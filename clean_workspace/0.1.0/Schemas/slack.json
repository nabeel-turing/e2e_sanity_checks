[
  {
    "name": "add_reaction_to_message",
    "description": "Adds a reaction to a message.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID. Must be a non-empty string."
        },
        "channel_id": {
          "type": "string",
          "description": "ID of the channel. Must be a non-empty string."
        },
        "name": {
          "type": "string",
          "description": "Reaction (emoji) name. Must be a non-empty string."
        },
        "message_ts": {
          "type": "string",
          "description": "Timestamp of the message. This should be a string\nrepresentation of a Unix timestamp with up to 6 decimal places\nfor microsecond precision. Must be a non-empty string."
        }
      },
      "required": [
        "channel_id",
        "message_ts",
        "name",
        "user_id"
      ]
    }
  },
  {
    "name": "add_reminder",
    "description": "Creates a reminder with comprehensive input validation.\n\nValidation Logic:\n    1. Type validation: user_id, text, and ts must be strings; channel_id must be string or None\n    2. Empty string validation: user_id and text cannot be empty strings\n    3. Timestamp validation: ts cannot be empty and must represent a valid numeric value\n    4. User existence validation: user_id must exist in the database",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID to remind. Must be a non-empty string."
        },
        "text": {
          "type": "string",
          "description": "The content of the reminder. Must be a non-empty string."
        },
        "ts": {
          "type": "string",
          "description": "When this reminder should happen (unix timestamp as a string).\nMust be a non-empty string representing a number (e.g., \"1678886400\" or \"1678886400.5\")."
        },
        "channel_id": {
          "type": "string",
          "description": "Channel ID to remind in. Defaults to None.\nIf provided as a string, it can be empty (unlike user_id and text)."
        }
      },
      "required": [
        "text",
        "ts",
        "user_id"
      ]
    }
  },
  {
    "name": "add_remote_file",
    "description": "Add a remote file to the Slack workspace.\n\nThis function registers an external file in Slack's database, allowing it to be referenced\nand shared within the Slack workspace. The file itself remains hosted externally.",
    "parameters": {
      "type": "object",
      "properties": {
        "external_id": {
          "type": "string",
          "description": "A unique identifier for the file in the external system.\nMust be a non-empty string."
        },
        "external_url": {
          "type": "string",
          "description": "The URL where the file can be accessed.\nMust be a non-empty string."
        },
        "title": {
          "type": "string",
          "description": "The display title for the file in Slack.\nMust be a non-empty string."
        },
        "filetype": {
          "type": "string",
          "description": "The type/extension of the file (e.g., \"pdf\", \"docx\").\nMust be a non-empty string if provided. Defaults to None."
        },
        "indexable_file_contents": {
          "type": "string",
          "description": "Text content that can be indexed for search.\nMust be a non-empty string if provided. Defaults to None."
        }
      },
      "required": [
        "external_id",
        "external_url",
        "title"
      ]
    }
  },
  {
    "name": "archive_conversation",
    "description": "Archives a conversation by setting its archived status and closing it.\n\nArchiving a conversation marks it as archived (is_archived=True) and closes it \n(is_open=False) in the database. Archived conversations are typically hidden \nfrom regular channel lists and are no longer actively used.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "ID of conversation to archive. Must be a non-empty string."
        }
      },
      "required": [
        "channel"
      ]
    }
  },
  {
    "name": "close_conversation",
    "description": "Closes a direct message or multi-person direct message.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Conversation to close."
        }
      },
      "required": [
        "channel"
      ]
    }
  },
  {
    "name": "complete_reminder",
    "description": "Marks a reminder as complete.",
    "parameters": {
      "type": "object",
      "properties": {
        "reminder_id": {
          "type": "string",
          "description": "The ID of the reminder. Must be a non-empty string."
        },
        "complete_ts": {
          "type": "string",
          "description": "Timestamp for when it was completed. Must be a non-empty string representing a valid numeric timestamp."
        }
      },
      "required": [
        "complete_ts",
        "reminder_id"
      ]
    }
  },
  {
    "name": "create_channel",
    "description": "Initiates a public or private channel-based conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the channel. Must be a non-empty string."
        },
        "is_private": {
          "type": "boolean",
          "description": "Create a private channel. Defaults to False. Must be a boolean."
        },
        "team_id": {
          "type": "string",
          "description": "Encoded team id. Defaults to None. Must be a string if provided."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "create_user_group",
    "description": "Creates a new User Group.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the User Group. Must be a non-empty string."
        },
        "handle": {
          "type": "string",
          "description": "A mention handle for the User Group. Must be a string if provided."
        },
        "team_id": {
          "type": "string",
          "description": "ID of the team the User Group belongs to. Must be a string if provided."
        },
        "description": {
          "type": "string",
          "description": "Description of the User Group. Must be a string if provided."
        },
        "channel_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of channel IDs to include in the User Group.\nIf provided, must be a list of strings."
        },
        "created_at": {
          "type": "string",
          "description": "Timestamp when the User Group was created.\nDefaults to current time as a string."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "delete_chat_message",
    "description": "Deletes a message from a specified channel by its timestamp.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "The unique identifier of the channel containing the message."
        },
        "ts": {
          "type": "string",
          "description": "A Unix timestamp with fractional seconds representing the message to be deleted."
        }
      },
      "required": [
        "channel",
        "ts"
      ]
    }
  },
  {
    "name": "delete_file",
    "description": "Deletes a file from the Slack workspace.\n\nThis function permanently removes a file from the Slack workspace, including\nfrom all channels where it was shared.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file to delete. Must be a non-empty string."
        }
      },
      "required": [
        "file_id"
      ]
    }
  },
  {
    "name": "delete_reminder",
    "description": "Deletes a reminder.",
    "parameters": {
      "type": "object",
      "properties": {
        "reminder_id": {
          "type": "string",
          "description": "The ID of the reminder. Must be a non-empty string."
        }
      },
      "required": [
        "reminder_id"
      ]
    }
  },
  {
    "name": "delete_scheduled_message",
    "description": "Deletes a scheduled message from a specified channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "The unique identifier of the channel containing the scheduled message."
        },
        "scheduled_message_id": {
          "type": "string",
          "description": "The unique ID of the scheduled message."
        }
      },
      "required": [
        "channel",
        "scheduled_message_id"
      ]
    }
  },
  {
    "name": "delete_user_photo",
    "description": "Deletes the profile photo for a user.\n\nThis function removes the profile picture for a specified user. It\nidentifies the user by their ID and deletes the associated image data,\nincluding any cropping information, from their profile.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user whose photo should be deleted."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "disable_user_group",
    "description": "Disables a User Group.",
    "parameters": {
      "type": "object",
      "properties": {
        "usergroup_id": {
          "type": "string",
          "description": "The ID of the User Group to disable."
        },
        "date_delete": {
          "type": "string",
          "description": "Timestamp string when the User Group was deleted.\nIf None, current time will be used."
        }
      },
      "required": [
        "usergroup_id"
      ]
    }
  },
  {
    "name": "enable_user_group",
    "description": "Enables a User Group.\n\nThis method enables a user group that has been disabled.\nIt resets the disabled flag and the deleted timestamp.\nIt also resets the user who deleted it.",
    "parameters": {
      "type": "object",
      "properties": {
        "usergroup_id": {
          "type": "string",
          "description": "The ID of the User Group to enable."
        }
      },
      "required": [
        "usergroup_id"
      ]
    }
  },
  {
    "name": "finish_external_file_upload",
    "description": "Finishes an external file upload started with `get_external_upload_url()`.",
    "parameters": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Required. The ID of the file to update."
              },
              "title": {
                "type": "string",
                "description": "Optional. The new title for the file."
              }
            },
            "required": [
              "id"
            ]
          },
          "description": "List of file object dictionaries. Each dictionary must contain:"
        },
        "channel_id": {
          "type": "string",
          "description": "Channel ID where the file will be shared."
        },
        "initial_comment": {
          "type": "string",
          "description": "Initial comment for the file."
        },
        "thread_ts": {
          "type": "string",
          "description": "Parent message timestamp for threading."
        }
      },
      "required": [
        "files"
      ]
    }
  },
  {
    "name": "get_conversation_history",
    "description": "Fetches a conversation's history of messages and events.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Conversation ID. Must be a non-empty string."
        },
        "cursor": {
          "type": "string",
          "description": "Pagination cursor. Defaults to None. If provided, must be a base64-encoded string\nwith the format \"user:{user_id}\" (e.g., \"dXNlcjpleGFtcGxlSWQxMjM=\" for \"user:exampleId123\").\nThis matches Slack's cursor format for consistent pagination."
        },
        "include_all_metadata": {
          "type": "boolean",
          "description": "Return all metadata. Defaults to False. Must be a boolean."
        },
        "inclusive": {
          "type": "boolean",
          "description": "Include messages with oldest/latest timestamps.\nDefaults to False."
        },
        "latest": {
          "type": "string",
          "description": "Only messages before this timestamp.\nDefaults to None (current time). If provided, must be a string in Unix timestamp format\nwith exactly 6 decimal places for microsecond precision (e.g. \"1688683055.556679\").\nThe timestamp must be a valid Unix timestamp that can be converted to a float."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of items to return. Defaults to 100. Must be an integer between 1 and 999."
        },
        "oldest": {
          "type": "string",
          "description": "Only messages after this timestamp. Defaults to \"0\". Must be a string in Unix timestamp format\nwith exactly 6 decimal places for microsecond precision (e.g. \"1688683055.556679\").\nThe timestamp must be a valid Unix timestamp that can be converted to a float."
        },
        "user_id": {
          "type": "string",
          "description": "If provided, only messages whose ``user`` field matches this ID will be\nreturned. Useful for filtering messages sent by a specific user."
        }
      },
      "required": [
        "channel"
      ]
    }
  },
  {
    "name": "get_conversation_members",
    "description": "Retrieve members of a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "ID of the conversation."
        },
        "cursor": {
          "type": "string",
          "description": "Pagination cursor encoded in base64 in format \"user:{user_id}\". Defaults to None."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of items to return. Defaults to 100. Must be positive and cannot exceed 10000."
        }
      },
      "required": [
        "channel"
      ]
    }
  },
  {
    "name": "get_conversation_replies",
    "description": "Retrieve a thread of messages posted to a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Conversation ID."
        },
        "ts": {
          "type": "string",
          "description": "Timestamp of the parent message or a message in the thread."
        },
        "cursor": {
          "type": "string",
          "description": "Pagination cursor. Defaults to None."
        },
        "include_all_metadata": {
          "type": "boolean",
          "description": "Return all metadata. Defaults to False. Note: This parameter is currently not implemented and has no effect on the response."
        },
        "inclusive": {
          "type": "boolean",
          "description": "Include messages with oldest/latest timestamps.\nDefaults to False."
        },
        "latest": {
          "type": "string",
          "description": "Only messages before this timestamp.\nDefaults to None."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of items to return. Defaults to 1000."
        },
        "oldest": {
          "type": "string",
          "description": "Only messages after this timestamp. Defaults to \"0\"."
        }
      },
      "required": [
        "channel",
        "ts"
      ]
    }
  },
  {
    "name": "get_current_user_id",
    "description": "Helper endpoint that returns the ID of the user who is currently authenticated in the\n\nsimulation (``DB[\"current_user\"][\"id\"]``).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_external_upload_url",
    "description": "Generates a URL for uploading an external file to Slack.\n\nThis function initiates the file upload process by providing a secure,\ntemporary URL to which the file data can be sent. It takes basic file\ninformation, such as its name and size, and returns a unique file ID\nand the corresponding upload URL. It also starts a 1-minute timer to\nautomatically delete the file record if the upload is not completed.",
    "parameters": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "description": "The name of the file to be uploaded."
        },
        "length": {
          "type": "integer",
          "description": "The size of the file in bytes."
        },
        "alt_txt": {
          "type": "string",
          "description": "A description of the file used for\naccessibility purposes (e.g., by screen readers)."
        },
        "snippet_type": {
          "type": "string",
          "description": "The specific type of snippet, which\ncan be used to influence how the file is displayed."
        }
      },
      "required": [
        "filename",
        "length"
      ]
    }
  },
  {
    "name": "get_file_info",
    "description": "Get information about a file.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file to get info for. Must be a non-empty string."
        },
        "cursor": {
          "type": "string",
          "description": "Pagination cursor for comments. Must be a string representing a non-negative integer. Defaults to None."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of comments to return. Must be a positive integer. Defaults to 100."
        }
      },
      "required": [
        "file_id"
      ]
    }
  },
  {
    "name": "get_message_reactions",
    "description": "Gets reactions for a specific message in a channel.\n\nThis function is used to get reactions for a specific message in a channel.\nIt can return either a summary of the reactions or all the reaction details.\nIf full is True, it returns all the reaction details.\nIf full is False, it returns a summary of the reactions.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "ID of the channel. Cannot be empty."
        },
        "message_ts": {
          "type": "string",
          "description": "The timestamp of the message to get reactions for.\nThis should be a string representation of a Unix timestamp with\nup to 6 decimal places for microsecond precision. Cannot be empty."
        },
        "full": {
          "type": "boolean",
          "description": "If true, return all reaction details. Defaults to False."
        }
      },
      "required": [
        "channel_id",
        "message_ts"
      ]
    }
  },
  {
    "name": "get_reminder_info",
    "description": "Gets information about a reminder.",
    "parameters": {
      "type": "object",
      "properties": {
        "reminder_id": {
          "type": "string",
          "description": "The ID of the reminder. Must be a non-empty string."
        }
      },
      "required": [
        "reminder_id"
      ]
    }
  },
  {
    "name": "get_user_identity",
    "description": "Get a user's identity information.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID. Must be a non-empty string."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "get_user_info",
    "description": "Gets information about a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID to get info on."
        },
        "include_locale": {
          "type": "boolean",
          "description": "Whether to include locale. Defaults to False."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "get_user_presence",
    "description": "Gets user presence information.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID to get presence info on. Defaults to the authed user."
        }
      }
    }
  },
  {
    "name": "invite_admin_user",
    "description": "Invites a user to a Slack workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address of the user to invite. Must be a non-empty string\nand a valid email format."
        },
        "channel_ids": {
          "type": "string",
          "description": "Comma-separated list of channel IDs to add the user to.\nIf provided, must be a string. Defaults to None."
        },
        "real_name": {
          "type": "string",
          "description": "Full name of the user. If provided, must be a string.\nif not provided it is extracted from the email."
        },
        "team_id": {
          "type": "string",
          "description": "ID of the team to invite the user to. If provided, must be a string.\nDefaults to None."
        }
      },
      "required": [
        "email"
      ]
    }
  },
  {
    "name": "invite_to_conversation",
    "description": "Invites users to a channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "The ID of the channel to invite users to. Must be a non-empty string."
        },
        "users": {
          "type": "string",
          "description": "A comma separated list of user IDs. Must be a non-empty string."
        },
        "force": {
          "type": "boolean",
          "description": "Continue inviting valid users even if some are invalid. Defaults to False."
        }
      },
      "required": [
        "channel",
        "users"
      ]
    }
  },
  {
    "name": "join_conversation",
    "description": "Joins an existing conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID of the user joining the conversation."
        },
        "channel": {
          "type": "string",
          "description": "ID of conversation to join."
        }
      },
      "required": [
        "channel",
        "user_id"
      ]
    }
  },
  {
    "name": "kick_from_conversation",
    "description": "Removes a user from a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "ID of conversation to remove user from."
        },
        "user_id": {
          "type": "string",
          "description": "ID of user to remove from conversation."
        }
      },
      "required": [
        "channel",
        "user_id"
      ]
    }
  },
  {
    "name": "leave_conversation",
    "description": "Leaves a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID of the user leaving the conversation."
        },
        "channel": {
          "type": "string",
          "description": "Conversation to leave."
        }
      },
      "required": [
        "channel",
        "user_id"
      ]
    }
  },
  {
    "name": "list_channels",
    "description": "Lists all channels in a Slack team.",
    "parameters": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Paginate through collections of data. Must be a string\nrepresenting a non-negative integer if provided. Defaults to None."
        },
        "exclude_archived": {
          "type": "boolean",
          "description": "Set to true to exclude archived channels from the list.\nDefaults to False."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of items to return. Must be between 1 and 1000.\nDefaults to 100."
        },
        "team_id": {
          "type": "string",
          "description": "Encoded team id to list channels in. Defaults to None."
        },
        "types": {
          "type": "string",
          "description": "Mix and match channel types by providing a comma-separated list of any\ncombination of public_channel, private_channel, mpim, im.\nDefaults to \"public_channel\"."
        }
      }
    }
  },
  {
    "name": "list_files",
    "description": "Lists files, optionally filtered by channel, user, and time.\n\nThis function retrieves files from the Slack workspace with optional filtering capabilities.\nFiles can be filtered by channel, user, timestamp range, and file types. Results are paginated\nfor efficient data retrieval.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "Filter files shared in a specific channel. Must be a valid channel ID if provided."
        },
        "user_id": {
          "type": "string",
          "description": "Filter files uploaded by a specific user. Must be a valid user ID if provided."
        },
        "ts_from": {
          "type": "string",
          "description": "Filter files created after this timestamp (inclusive). Must be a Unix timestamp string if provided."
        },
        "ts_to": {
          "type": "string",
          "description": "Filter files created before this timestamp (inclusive). Must be a Unix timestamp string if provided."
        },
        "types": {
          "type": "string",
          "description": "Comma-separated list of file types to filter by (e.g., \"pdf,docx,jpg\")."
        },
        "cursor": {
          "type": "string",
          "description": "Pagination cursor for retrieving additional results. Must be a string representing a non-negative integer."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of files to return per page. Must be a positive integer. Defaults to 100."
        }
      }
    }
  },
  {
    "name": "list_reminders",
    "description": "Lists all reminders created by or for a given user.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID. Must be a non-empty string."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "list_scheduled_messages",
    "description": "Returns a list of scheduled messages.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "The channel of the scheduled messages. Defaults to None."
        },
        "cursor": {
          "type": "string",
          "description": "For pagination purposes. Should be a string representing a non-negative integer. Defaults to None."
        },
        "latest": {
          "type": "string",
          "description": "A Unix timestamp string (integer or float representation) of the latest value in the time range. Defaults to None."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of original entries to return. Must be a non-negative integer. Defaults to None."
        },
        "oldest": {
          "type": "string",
          "description": "A Unix timestamp string (integer or float representation) of the oldest value in the time range. Defaults to None."
        },
        "team_id": {
          "type": "string",
          "description": "encoded team id to list channels in, required if org token is used. Defaults to None."
        }
      }
    }
  },
  {
    "name": "list_user_conversations",
    "description": "Lists conversations the specified user may access.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user whose conversations to list."
        },
        "cursor": {
          "type": "string",
          "description": "Paginate through collections of data by setting the cursor parameter to the next_cursor attribute returned by a previous request's response. Default value fetches the first page."
        },
        "exclude_archived": {
          "type": "boolean",
          "description": "Set to true to exclude archived channels from the list. Defaults to False."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. Default is 100."
        },
        "types": {
          "type": "string",
          "description": "Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "list_user_group_members",
    "description": "Lists all users in a User Group.",
    "parameters": {
      "type": "object",
      "properties": {
        "usergroup_id": {
          "type": "string",
          "description": "The ID of the User Group."
        },
        "include_disabled": {
          "type": "boolean",
          "description": "Include disabled users. Defaults to False."
        }
      },
      "required": [
        "usergroup_id"
      ]
    }
  },
  {
    "name": "list_user_groups",
    "description": "Lists all User Groups for a team.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "string",
          "description": "ID of the team to list User Groups for."
        },
        "include_disabled": {
          "type": "boolean",
          "description": "Include disabled User Groups. Defaults to False."
        },
        "include_count": {
          "type": "boolean",
          "description": "Include the number of users. Defaults to False."
        },
        "include_users": {
          "type": "boolean",
          "description": "Include the list of user IDs. Defaults to False."
        }
      }
    }
  },
  {
    "name": "list_user_reactions",
    "description": "Lists reactions made by a user (or all users if user_id is None).",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Show reactions made by this user. Defaults to None (all users).\nIf provided, must be a non-empty string."
        },
        "full": {
          "type": "boolean",
          "description": "If true, return all reaction details. Defaults to False."
        },
        "cursor": {
          "type": "string",
          "description": "Parameter for pagination. Defaults to None.\nIf provided, must be a string that can be parsed as a non-negative integer."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of items to return. Defaults to 100.\nMust be a positive integer."
        }
      }
    }
  },
  {
    "name": "list_users",
    "description": "Lists all users in a Slack team.",
    "parameters": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Pagination cursor encoded in base64 in format \"user:{user_id}\". Must be a valid base64 string if provided."
        },
        "include_locale": {
          "type": "boolean",
          "description": "Include locale information. Defaults to False."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of items to return. Must be positive and no larger than 1000. Defaults to 100."
        },
        "team_id": {
          "type": "string",
          "description": "Team ID to filter users by. Must be a non-empty string if provided."
        }
      }
    }
  },
  {
    "name": "lookup_user_by_email",
    "description": "Find a user with an email address.",
    "parameters": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "An email address belonging to a user. Must be a non-empty string."
        }
      },
      "required": [
        "email"
      ]
    }
  },
  {
    "name": "mark_conversation_read",
    "description": "Sets the read cursor in a channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel or conversation ID."
        },
        "ts": {
          "type": "string",
          "description": "Timestamp of the message to mark as read."
        }
      },
      "required": [
        "channel",
        "ts"
      ]
    }
  },
  {
    "name": "open_conversation",
    "description": "Opens or resumes a direct message or multi-person direct message.\n\nThis function opens or resumes a conversation between users. When return_im=False (default),\nthe function returns minimal channel information containing only the channel ID. When return_im=True,\nit returns the full channel object with all metadata. The function can either resume an existing\nconversation by channel ID or create a new one with specified users.\n\n\nNote: Returns existing conversation if same user combination already exists. When creating a new conversation \nwith the `users` parameter, the current user is automatically included in the conversation. You don't need to \nexplicitly include the current user in the users list.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Resume a conversation by supplying a channel ID.\nSupply either this OR users, not both. Defaults to None."
        },
        "prevent_creation": {
          "type": "boolean",
          "description": "Set to True to prevent creating a new conversation if one doesn't exist.\nDefaults to False."
        },
        "return_im": {
          "type": "boolean",
          "description": "If True, returns the full channel definition including all metadata.\nIf False, returns minimal channel information (just ID). Defaults to False."
        },
        "users": {
          "type": "string",
          "description": "Comma-separated list of user IDs to include in the conversation.\nThe current user will be automatically included if not already in the list.\nSupply either this OR channel, not both. Defaults to None."
        }
      }
    }
  },
  {
    "name": "post_chat_message",
    "description": "Sends a message to a channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel ID. Must be a non-empty string."
        },
        "ts": {
          "type": "string",
          "description": "Message timestamp. Must be a string if provided."
        },
        "attachments": {
          "type": "string",
          "description": "JSON-based array of structured attachments. Must be a string if provided."
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          },
          "description": "A JSON-based array of structured blocks.\nIf provided, must be a list of dictionaries. Each dictionary's structure\nis validated by BlockItemStructure."
        },
        "text": {
          "type": "string",
          "description": "Message text. Must be a string if provided."
        },
        "as_user": {
          "type": "boolean",
          "description": "Post as user (legacy). Must be a boolean if provided."
        },
        "icon_emoji": {
          "type": "string",
          "description": "Emoji to use as the icon. Must be a string if provided."
        },
        "icon_url": {
          "type": "string",
          "description": "URL to an image to use as the icon. Must be a string if provided."
        },
        "link_names": {
          "type": "boolean",
          "description": "Find and link user groups. Must be a boolean if provided."
        },
        "markdown_text": {
          "type": "string",
          "description": "Message text formatted in markdown. Must be a string if provided."
        },
        "metadata": {
          "type": "string",
          "description": "JSON object with event_type and event_payload fields. Must be a string if provided."
        },
        "mrkdwn": {
          "type": "boolean",
          "description": "Disable Slack markup parsing. Must be a boolean if provided."
        },
        "parse": {
          "type": "string",
          "description": "Change how messages are treated. Must be a string if provided."
        },
        "reply_broadcast": {
          "type": "boolean",
          "description": "Make reply visible to everyone. Must be a boolean if provided."
        },
        "thread_ts": {
          "type": "string",
          "description": "Provide another message's ts value to make this message a reply. Must be a string if provided."
        },
        "unfurl_links": {
          "type": "boolean",
          "description": "Enable unfurling of primarily text-based content. Must be a boolean if provided."
        },
        "unfurl_media": {
          "type": "boolean",
          "description": "Disable unfurling of media content. Must be a boolean if provided."
        },
        "username": {
          "type": "string",
          "description": "Set your bot's user name. Must be a string if provided."
        }
      },
      "required": [
        "channel"
      ]
    }
  },
  {
    "name": "post_ephemeral_message",
    "description": "Sends an ephemeral message to a user in a channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel to send the message to. Can't be empty."
        },
        "user": {
          "type": "string",
          "description": "User to send the message to. Can't be empty."
        },
        "attachments": {
          "type": "string",
          "description": "JSON-based array of structured attachments. Must be a string if provided."
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          },
          "description": "A JSON-based array of structured blocks. Must be a list if provided."
        },
        "text": {
          "type": "string",
          "description": "Message text. Must be a string if provided."
        },
        "as_user": {
          "type": "boolean",
          "description": "Pass true to post the message as the authed user. Must be a boolean if provided."
        },
        "icon_emoji": {
          "type": "string",
          "description": "Emoji to use as the icon. Must be a string if provided."
        },
        "icon_url": {
          "type": "string",
          "description": "URL to an image to use as the icon. Must be a string if provided."
        },
        "link_names": {
          "type": "boolean",
          "description": "Find and link channel names and usernames. Must be a boolean if provided."
        },
        "markdown_text": {
          "type": "string",
          "description": "Message text formatted in markdown. Must be a string if provided."
        },
        "parse": {
          "type": "string",
          "description": "Change how messages are treated. Must be a string if provided."
        },
        "thread_ts": {
          "type": "string",
          "description": "Provide another message's ts value to post this message in a thread. Must be a string if provided."
        },
        "username": {
          "type": "string",
          "description": "Set your bot's or your user name. Must be a string if provided."
        }
      },
      "required": [
        "channel",
        "user"
      ]
    }
  },
  {
    "name": "remove_reaction_from_message",
    "description": "Removes a reaction from a message.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID. Must be a non-empty string."
        },
        "name": {
          "type": "string",
          "description": "Reaction (emoji) name. Must be a non-empty string."
        },
        "channel_id": {
          "type": "string",
          "description": "ID of the channel. Must be a non-empty string."
        },
        "message_ts": {
          "type": "string",
          "description": "Timestamp of the message. Must be a non-empty string."
        }
      },
      "required": [
        "channel_id",
        "message_ts",
        "name",
        "user_id"
      ]
    }
  },
  {
    "name": "remove_remote_file",
    "description": "Remove a remote file and clean up all of its references.\n\nExactly **one** identifier must be supplied – either a Slack-generated\n``file_id`` *or* the external ``external_id`` that was provided when the\nfile was first registered.  When the target is found the file record is\ndeleted from the workspace's internal storage and its identifier is\nremoved from every channel that had access to the file.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The unique Slack-generated ID of the file to remove."
        },
        "external_id": {
          "type": "string",
          "description": "The creator-defined GUID that was supplied when the remote file\nwas added via :pyfunc:`add_remote_file` or the external upload\nflow."
        }
      }
    }
  },
  {
    "name": "rename_conversation",
    "description": "Renames a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "ID of conversation to rename."
        },
        "name": {
          "type": "string",
          "description": "New name for conversation."
        }
      },
      "required": [
        "channel",
        "name"
      ]
    }
  },
  {
    "name": "schedule_chat_message",
    "description": "Schedules a message to be sent to a channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID."
        },
        "channel": {
          "type": "string",
          "description": "Channel to send the message to."
        },
        "post_at": {
          "type": "integer",
          "description": "Unix timestamp for when to send the message. Must be positive.\nCan be provided as int, float, or numeric string."
        },
        "attachments": {
          "type": "string",
          "description": "JSON-formatted string representing an array of structured attachments."
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          },
          "description": "A list of structured block objects (dictionaries)."
        },
        "text": {
          "type": "string",
          "description": "Message text."
        },
        "as_user": {
          "type": "boolean",
          "description": "Post as the authed user. Defaults to False."
        },
        "link_names": {
          "type": "boolean",
          "description": "Find and link user groups. Defaults to False."
        },
        "markdown_text": {
          "type": "string",
          "description": "Message text formatted in markdown."
        },
        "metadata": {
          "type": "string",
          "description": "JSON-formatted string representing an object with 'event_type' (str)\nand 'event_payload' (dict) fields."
        },
        "parse": {
          "type": "string",
          "description": "Change how messages are treated."
        },
        "reply_broadcast": {
          "type": "boolean",
          "description": "Whether reply should be made visible to everyone. Defaults to False."
        },
        "thread_ts": {
          "type": "string",
          "description": "Provide another message's ts value to make this message a reply."
        },
        "unfurl_links": {
          "type": "boolean",
          "description": "Enable unfurling of primarily text-based content. Defaults to True."
        },
        "unfurl_media": {
          "type": "boolean",
          "description": "Disable unfurling of media content. Defaults to False."
        }
      },
      "required": [
        "channel",
        "post_at",
        "user_id"
      ]
    }
  },
  {
    "name": "search_all_content",
    "description": "Searches for messages and files matching a query.\n\nThis function executes a search across both messages and files using a single\nquery. The query is a space-separated string of terms and filters. Filters\nare applied to the resource type they are relevant to (e.g., `filetype:`\nonly applies to files).",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query. The structure is a space-separated string\nof terms and filters.\n\nFor Text Terms:\n- In Messages: Matched against message content. Default logic is AND,\n  but `OR` can be used to match any term.\n- In Files: Matched against the file's name and title. The logic is\n  always OR (any term match).\n\nSupported Filters:\n- `in:#<channel>`: (Messages & Files) Restricts search to a channel.\n- `has:star`: (Messages & Files) Narrows to starred items.\n- `from:@<user>`: (Messages-only) Restricts to messages from a user.\n- `has:link`: (Messages-only) Narrows to messages containing a URL.\n- `has:reaction`: (Messages-only) Narrows to messages with reactions.\n- `before:`, `after:`, `during:`: (Messages-only) Date-based filters.\n- `-<word>`: (Messages-only) Excludes messages with the word.\n- `some*`: (Messages-only) Wildcard support.\n- `filetype:<type>`: (Files-only) Narrows to a specific file type."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_files",
    "description": "Searches for files matching a query.\n\nThe query is a space-separated string of terms and filters. Text terms are\nmatched against the file's name and title. If multiple text terms are\nprovided, a match occurs if any term is found (OR logic).",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query. The structure is a space-separated string\nof terms and filters. Supported filters for files are:\n- `in:#<channel>`: Restricts the search to a specific channel.\n- `filetype:<type>`: Narrows search to a specific file type (e.g., 'pdf', 'image').\n- `has:star`: Narrows search to files that have been starred.\nNote: Date filters, user filters (`from:`), exclusion (`-`), and\nwildcards (`*`) are not applicable to file searches."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_messages",
    "description": "Searches for messages matching a query.\n\nThe query is a space-separated string of terms and filters. Text terms are\nmatched against the message's content. By default, all text terms must be\npresent in the message (AND logic).",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query. The structure is a space-separated string\nof terms and filters. Supported filters are:\n- `from:@<user>`: Restricts the search to messages from a specific user.\n- `in:#<channel>`: Restricts the search to a specific channel.\n- `has:link`: Narrows search to messages that contain a URL.\n- `has:reaction`: Narrows search to messages that have a reaction.\n- `has:star`: Narrows search to messages that have been starred.\n- `before:YYYY-MM-DD`: Filters for messages sent before a specific date.\n- `after:YYYY-MM-DD`: Filters for messages sent after a specific date.\n- `during:YYYY-MM-DD`: Filters for messages on a specific date. Also\n  supports `YYYY` for a year or `YYYY-MM` for a month.\n- `-<word>`: Excludes messages containing the specified word.\n- `some*`: Wildcard support for partial word matching.\n- `OR`: When used between text terms (e.g., \"hello OR world\"), the\n  logic changes to match messages containing any of the terms."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "send_me_message",
    "description": "Share a me message into a channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User ID."
        },
        "channel": {
          "type": "string",
          "description": "Channel to send message to. Must be a non-empty string."
        },
        "text": {
          "type": "string",
          "description": "Text of the message to send. Must be a non-empty string."
        }
      },
      "required": [
        "channel",
        "text",
        "user_id"
      ]
    }
  },
  {
    "name": "set_conversation_purpose",
    "description": "Sets the channel description.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel to set the description of."
        },
        "purpose": {
          "type": "string",
          "description": "The description of the channel."
        }
      },
      "required": [
        "channel",
        "purpose"
      ]
    }
  },
  {
    "name": "set_conversation_topic",
    "description": "Sets the topic for a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Conversation to set the topic of."
        },
        "topic": {
          "type": "string",
          "description": "The new topic string."
        }
      },
      "required": [
        "channel",
        "topic"
      ]
    }
  },
  {
    "name": "set_user_photo",
    "description": "Sets a user's profile photo.\n\nThis function updates the profile photo for a specified user. It takes a\nuser ID and a base64-encoded string representing the new image.\nOptionally, cropping parameters can be provided to specify how the image\nshould be cropped. The function updates the user's record in the\ndatabase with the new image and cropping information.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user to update. Cannot be an empty string."
        },
        "image": {
          "type": "string",
          "description": "A base64-encoded string of the image data. Cannot be empty."
        },
        "crop_x": {
          "type": "integer",
          "description": "The x-coordinate for the top-left corner of the crop.\nMust be a non-negative integer if provided."
        },
        "crop_y": {
          "type": "integer",
          "description": "The y-coordinate for the top-left corner of the crop.\nMust be a non-negative integer if provided."
        },
        "crop_w": {
          "type": "integer",
          "description": "The width of the crop box.\nMust be a non-negative integer if provided."
        }
      },
      "required": [
        "image",
        "user_id"
      ]
    }
  },
  {
    "name": "set_user_presence",
    "description": "Manually sets a user's presence.\n\nThis function updates the presence status for a specified user, setting it\nto either 'active' or 'away'. It directly modifies the user's record in\nthe database. Upon successful execution, it confirms the operation was\nsuccessful.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user to update. Cannot be an empty string."
        },
        "presence": {
          "type": "string",
          "description": "The new presence status. Must be either 'active' or 'away'."
        }
      },
      "required": [
        "presence",
        "user_id"
      ]
    }
  },
  {
    "name": "set_user_profile",
    "description": "Set a user's profile information.",
    "parameters": {
      "type": "object",
      "properties": {
        "profile": {
          "type": "object",
          "properties": {
            "display_name": {
              "type": "string",
              "description": "The user's display name"
            },
            "real_name": {
              "type": "string",
              "description": "The user's real name"
            },
            "email": {
              "type": "string",
              "description": "The user's email address. Must contain '@' character if provided"
            },
            "phone": {
              "type": "string",
              "description": "The user's phone number. Must contain only digits, spaces, hyphens, and '+' if provided"
            },
            "status_emoji": {
              "type": "string",
              "description": "The user's status emoji"
            },
            "status_text": {
              "type": "string",
              "description": "The user's status text"
            },
            "title": {
              "type": "string",
              "description": "The user's title"
            },
            "team": {
              "type": "string",
              "description": "The user's team"
            },
            "skype": {
              "type": "string",
              "description": "The user's Skype handle"
            },
            "first_name": {
              "type": "string",
              "description": "The user's first name"
            },
            "last_name": {
              "type": "string",
              "description": "The user's last name"
            }
          },
          "description": "Dictionary of profile fields to set. Must contain valid profile fields:"
        },
        "user_id": {
          "type": "string",
          "description": "ID of user to change. Must be a non-empty string."
        }
      },
      "required": [
        "profile",
        "user_id"
      ]
    }
  },
  {
    "name": "share_file",
    "description": "Shares an existing file into specified channels.\n\nThis function allows sharing a file that already exists in the Slack workspace\nto one or more channels. The file must exist in the files database and all\nspecified channels must be valid.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file to share. Must be a non-empty string."
        },
        "channel_ids": {
          "type": "string",
          "description": "Comma-separated list of channel IDs to share the file with.\nMust be a non-empty string with valid channel IDs."
        }
      },
      "required": [
        "channel_ids",
        "file_id"
      ]
    }
  },
  {
    "name": "update_chat_message",
    "description": "Updates a message.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel containing the message."
        },
        "ts": {
          "type": "string",
          "description": "Timestamp of the message to be updated."
        },
        "attachments": {
          "type": "string",
          "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
        },
        "blocks": {
          "type": "string",
          "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
        },
        "text": {
          "type": "string",
          "description": "The updated message text."
        },
        "as_user": {
          "type": "boolean",
          "description": "Update the message as the authed user."
        },
        "file_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of new file ids that will be sent with this message."
        },
        "link_names": {
          "type": "boolean",
          "description": "Find and link channel names and usernames."
        },
        "markdown_text": {
          "type": "string",
          "description": "Message text formatted in markdown."
        },
        "parse": {
          "type": "string",
          "description": "Change how messages are treated."
        },
        "reply_broadcast": {
          "type": "boolean",
          "description": "Broadcast an existing thread reply."
        }
      },
      "required": [
        "channel",
        "ts"
      ]
    }
  },
  {
    "name": "update_user_group",
    "description": "Updates an existing User Group.",
    "parameters": {
      "type": "object",
      "properties": {
        "usergroup_id": {
          "type": "string",
          "description": "The ID of the User Group to update."
        },
        "name": {
          "type": "string",
          "description": "New name for the User Group. Must be a non-empty string if provided."
        },
        "handle": {
          "type": "string",
          "description": "New handle for the User Group. Must be a non-empty string if provided."
        },
        "description": {
          "type": "string",
          "description": "New description for the User Group. Must be a string if provided."
        },
        "channel_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "New list of channel IDs. Must be a list of strings if provided."
        },
        "date_update": {
          "type": "string",
          "description": "Timestamp when the User Group was last updated. Must be a string if provided."
        }
      },
      "required": [
        "usergroup_id"
      ]
    }
  },
  {
    "name": "update_user_group_members",
    "description": "Update the list of users for a User Group.",
    "parameters": {
      "type": "object",
      "properties": {
        "usergroup": {
          "type": "string",
          "description": "The encoded ID of the User Group to update."
        },
        "users": {
          "type": "string",
          "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
        },
        "include_count": {
          "type": "boolean",
          "description": "Include the number of users in the User Group. Defaults to False."
        },
        "date_update": {
          "type": "string",
          "description": "Timestamp when the User Group was last updated. If None or empty, \nthe current timestamp will be used."
        }
      },
      "required": [
        "usergroup",
        "users"
      ]
    }
  },
  {
    "name": "upload_file",
    "description": "Upload a file to Slack.\n\nIt supports uploading files either by providing content directly or by specifying a file path.\nThe function automatically detects file types, MIME types, and handles both text and binary files.\nFiles are subject to a 50MB size limit.",
    "parameters": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "string",
          "description": "Comma-separated list of channel IDs where the file will be shared.\nMust be valid channel IDs if provided."
        },
        "content": {
          "type": "string",
          "description": "File contents as a string. If both content and file_path are provided,\ncontent takes precedence. Subject to 50MB size limit."
        },
        "file_path": {
          "type": "string",
          "description": "Path to a local file to upload. The file will be read and its\ncontent will be processed based on the file type (text or binary). Subject to 50MB size limit."
        },
        "filename": {
          "type": "string",
          "description": "Name of the file. If not provided and file_path is given,\nthe filename will be extracted from the file path."
        },
        "filetype": {
          "type": "string",
          "description": "File type identifier (e.g., 'pdf', 'txt', 'jpg').\nIf not provided, it will be auto-detected from the filename or file path."
        },
        "initial_comment": {
          "type": "string",
          "description": "Initial comment to add with the file."
        },
        "thread_ts": {
          "type": "string",
          "description": "Timestamp of parent message to reply to in a thread."
        },
        "title": {
          "type": "string",
          "description": "Title of the file. If not provided, defaults to filename."
        }
      }
    }
  }
]