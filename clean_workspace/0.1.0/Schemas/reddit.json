[
  {
    "name": "accept_live_thread_contributor_invite",
    "description": "Accepts an invitation to contribute to a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "accept_moderator_invite",
    "description": "Accepts an invitation to moderate a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "add_friend",
    "description": "Adds a user as a friend.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_type": {
          "type": "string",
          "description": "Must be \"json\"."
        },
        "name": {
          "type": "string",
          "description": "The username to add as a friend."
        }
      },
      "required": [
        "api_type",
        "name"
      ]
    }
  },
  {
    "name": "add_live_thread_update",
    "description": "Adds a new update to the live thread feed.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The text content of the update."
        }
      },
      "required": [
        "body"
      ]
    }
  },
  {
    "name": "add_post_to_collection",
    "description": "Adds a post to an existing collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The unique identifier of the collection."
        },
        "link_fullname": {
          "type": "string",
          "description": "The fullname of the post to add."
        }
      },
      "required": [
        "collection_id",
        "link_fullname"
      ]
    }
  },
  {
    "name": "add_subreddit_emoji",
    "description": "Adds a new emoji to a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "The name of the subreddit."
        },
        "name": {
          "type": "string",
          "description": "Name of the emoji to be created. It can be alphanumeric without any special characters except '-' & '_' and cannot exceed 24 characters."
        },
        "s3_key": {
          "type": "string",
          "description": "S3 key of the uploaded image which can be obtained from the S3 url. This is of the form subreddit/hash_value."
        },
        "mod_flair_only": {
          "type": "boolean",
          "description": "Whether the emoji is only available for moderator flair. Defaults to False."
        },
        "post_flair_allowed": {
          "type": "boolean",
          "description": "Whether the emoji can be used in post flair. Defaults to True."
        },
        "user_flair_allowed": {
          "type": "boolean",
          "description": "Whether the emoji can be used in user flair. Defaults to True."
        },
        "css": {
          "type": "string",
          "description": "CSS styling for the emoji."
        }
      },
      "required": [
        "name",
        "s3_key",
        "subreddit"
      ]
    }
  },
  {
    "name": "add_wiki_page_editor",
    "description": "Adds a user to the wiki editors list for a page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "username": {
          "type": "string",
          "description": "The username to grant editing access."
        }
      },
      "required": [
        "page",
        "username"
      ]
    }
  },
  {
    "name": "approve_item",
    "description": "Approves a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item to approve."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "approve_modmail_conversation",
    "description": "Approves a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "archive_modmail_conversation",
    "description": "Archives a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "block_user",
    "description": "Blocks a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The account ID of the user to block."
        }
      },
      "required": [
        "account_id"
      ]
    }
  },
  {
    "name": "block_user_via_message",
    "description": "Blocks a user based on a messaging context.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the message or user context."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "bulk_mark_modmail_as_read",
    "description": "Marks multiple modmail conversations as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs."
        }
      },
      "required": [
        "conversation_ids"
      ]
    }
  },
  {
    "name": "check_captcha_requirement",
    "description": "Checks if CAPTCHA is required for user requests.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "check_username_availability",
    "description": "Checks if a username is available.",
    "parameters": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "The username to check."
        }
      },
      "required": [
        "user"
      ]
    }
  },
  {
    "name": "clear_flair_templates",
    "description": "Clears all flair templates (user or link) in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        }
      },
      "required": [
        "flair_type"
      ]
    }
  },
  {
    "name": "close_live_thread",
    "description": "Closes a live thread to stop further updates.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "collapse_messages",
    "description": "Collapses one or more messages in the inbox.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs to collapse."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "compose_message",
    "description": "Composes and sends a new private message.",
    "parameters": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string",
          "description": "The recipient's identifier or email. Cannot be empty or consist only of whitespace."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the message. Cannot be empty or consist only of whitespace."
        },
        "text": {
          "type": "string",
          "description": "The body text of the message. Cannot be empty or consist only of whitespace."
        }
      },
      "required": [
        "subject",
        "text",
        "to"
      ]
    }
  },
  {
    "name": "configure_flair_settings",
    "description": "Configures overall flair settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_enabled": {
          "type": "boolean",
          "description": "Indicates if flair is enabled."
        },
        "flair_position": {
          "type": "string",
          "description": "The position of flair (e.g., \"left\" or \"right\")."
        }
      }
    }
  },
  {
    "name": "copy_multireddit",
    "description": "Copies an existing multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "frm": {
          "type": "string",
          "description": "The source multireddit path."
        },
        "to": {
          "type": "string",
          "description": "The destination path for the copy."
        }
      },
      "required": [
        "frm",
        "to"
      ]
    }
  },
  {
    "name": "create_collection",
    "description": "Creates a new collection in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the new collection."
        },
        "sr_fullname": {
          "type": "string",
          "description": "The fullname of the subreddit."
        }
      },
      "required": [
        "sr_fullname",
        "title"
      ]
    }
  },
  {
    "name": "create_live_thread",
    "description": "Creates a new live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the new live thread."
        }
      },
      "required": [
        "title"
      ]
    }
  },
  {
    "name": "create_or_edit_subreddit",
    "description": "Creates or edits a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the subreddit."
        },
        "title": {
          "type": "string",
          "description": "The title of the subreddit."
        }
      },
      "required": [
        "name",
        "title"
      ]
    }
  },
  {
    "name": "create_or_update_flair_template",
    "description": "Creates or updates a flair template.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "text": {
          "type": "string",
          "description": "The flair text."
        }
      },
      "required": [
        "flair_type",
        "text"
      ]
    }
  },
  {
    "name": "create_or_update_flair_template_v2",
    "description": "Creates or updates a flair template with advanced options.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "text": {
          "type": "string",
          "description": "The flair text."
        }
      },
      "required": [
        "flair_type",
        "text"
      ]
    }
  },
  {
    "name": "create_or_update_subreddit_widget",
    "description": "Creates or updates a subreddit widget.",
    "parameters": {
      "type": "object",
      "properties": {
        "widget_data": {
          "type": "object",
          "properties": {},
          "description": "The widget configuration data. The format varies based on the widget kind:\n- For 'image' widgets:\n    {\n        \"data\": [\n            {\n                \"height\": int,\n                \"linkUrl\": str (optional),\n                \"url\": str,\n                \"width\": int,\n            },\n            ...\n        ],\n        \"kind\": \"image\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'calendar' widgets:\n    {\n        \"configuration\": {\n            \"numEvents\": int (1-50, default: 10),\n            \"showDate\": bool,\n            \"showDescription\": bool,\n            \"showLocation\": bool,\n            \"showTime\": bool,\n            \"showTitle\": bool,\n        },\n        \"googleCalendarId\": str (email),\n        \"kind\": \"calendar\",\n        \"requiresSync\": bool,\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'textarea' widgets:\n    {\n        \"kind\": \"textarea\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n        \"text\": str (markdown),\n    }\n- For 'menu' widgets:\n    {\n        \"data\": [\n            {\n                \"text\": str (max 20 chars),\n                \"url\": str,\n            }\n            OR\n            {\n                \"children\": [\n                    {\n                        \"text\": str (max 20 chars),\n                        \"url\": str,\n                    },\n                    ...\n                ],\n                \"text\": str (max 20 chars),\n            },\n            ...\n        ],\n        \"kind\": \"menu\",\n        \"showWiki\": bool,\n    }\n- For 'button' widgets:\n    {\n        \"buttons\": [\n            {\n                \"color\": str (6-digit hex),\n                \"fillColor\": str (6-digit hex),\n                \"hoverState\": {\n                    \"color\": str (6-digit hex),\n                    \"fillColor\": str (6-digit hex),\n                    \"kind\": \"text\",\n                    \"text\": str (max 30 chars),\n                    \"textColor\": str (6-digit hex),\n                }\n                OR\n                {\n                    \"height\": int,\n                    \"imageUrl\": str,\n                    \"kind\": \"image\",\n                    \"width\": int,\n                },\n                \"kind\": \"text\",\n                \"text\": str (max 30 chars),\n                \"textColor\": str (6-digit hex),\n                \"url\": str,\n            }\n            OR\n            {\n                \"height\": int,\n                \"hoverState\": {\n                    \"color\": str (6-digit hex),\n                    \"fillColor\": str (6-digit hex),\n                    \"kind\": \"text\",\n                    \"text\": str (max 30 chars),\n                    \"textColor\": str (6-digit hex),\n                }\n                OR\n                {\n                    \"height\": int,\n                    \"imageUrl\": str,\n                    \"kind\": \"image\",\n                    \"width\": int,\n                },\n                \"imageUrl\": str,\n                \"kind\": \"image\",\n                \"linkUrl\": str,\n                \"text\": str (max 30 chars),\n                \"width\": int,\n            },\n            ...\n        ],\n        \"description\": str (markdown),\n        \"kind\": \"button\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'community-list' widgets:\n    {\n        \"data\": [\n            str (subreddit name),\n            ...\n        ],\n        \"kind\": \"community-list\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'custom' widgets:\n    {\n        \"css\": str (max 100000 chars),\n        \"height\": int (50-500),\n        \"imageData\": [\n            {\n                \"height\": int,\n                \"name\": str (max 20 chars),\n                \"url\": str,\n                \"width\": int,\n            },\n            ...\n        ],\n        \"kind\": \"custom\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n        \"text\": str (markdown),\n    }\n- For 'post-flair' widgets:\n    {\n        \"display\": str (\"cloud\" or \"list\"),\n        \"kind\": \"post-flair\",\n        \"order\": [\n            str (flair template ID),\n            ...\n        ],\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }"
        }
      },
      "required": [
        "widget_data"
      ]
    }
  },
  {
    "name": "delete_collection",
    "description": "Deletes an existing collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The identifier of the collection to delete."
        }
      },
      "required": [
        "collection_id"
      ]
    }
  },
  {
    "name": "delete_flair_template",
    "description": "Deletes a flair template by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "template_id": {
          "type": "string",
          "description": "The ID of the flair template to delete."
        }
      },
      "required": [
        "template_id"
      ]
    }
  },
  {
    "name": "delete_live_thread_update",
    "description": "Deletes a specific update from a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_id": {
          "type": "string",
          "description": "The ID of the update to delete."
        }
      },
      "required": [
        "update_id"
      ]
    }
  },
  {
    "name": "delete_message",
    "description": "Deletes a message permanently.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the message to delete."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_moderator_note",
    "description": "Deletes a moderator note.",
    "parameters": {
      "type": "object",
      "properties": {
        "note_id": {
          "type": "string",
          "description": "The identifier of the note to delete."
        }
      },
      "required": [
        "note_id"
      ]
    }
  },
  {
    "name": "delete_multireddit",
    "description": "Deletes a multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "multipath": {
          "type": "string",
          "description": "The multireddit path."
        }
      },
      "required": [
        "multipath"
      ]
    }
  },
  {
    "name": "delete_post_or_comment",
    "description": "Deletes a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item to delete."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_saved_filter_path",
    "description": "Deletes a saved filter path.",
    "parameters": {
      "type": "object",
      "properties": {
        "filterpath": {
          "type": "string",
          "description": "The filter path identifier."
        }
      },
      "required": [
        "filterpath"
      ]
    }
  },
  {
    "name": "delete_subreddit_banner",
    "description": "Deletes the subreddit's banner image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "delete_subreddit_emoji",
    "description": "Removes an existing emoji from a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "The name of the subreddit."
        },
        "emoji_name": {
          "type": "string",
          "description": "The name of the emoji to delete."
        }
      },
      "required": [
        "emoji_name",
        "subreddit"
      ]
    }
  },
  {
    "name": "delete_subreddit_header",
    "description": "Deletes the subreddit's header image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "delete_subreddit_icon",
    "description": "Deletes the subreddit's icon image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "delete_subreddit_stylesheet_image",
    "description": "Deletes a subreddit stylesheet image.",
    "parameters": {
      "type": "object",
      "properties": {
        "img_name": {
          "type": "string",
          "description": "The name or key of the image to remove."
        }
      },
      "required": [
        "img_name"
      ]
    }
  },
  {
    "name": "delete_subreddit_widget",
    "description": "Deletes a specific widget.",
    "parameters": {
      "type": "object",
      "properties": {
        "widget_id": {
          "type": "string",
          "description": "The identifier of the widget to delete."
        }
      },
      "required": [
        "widget_id"
      ]
    }
  },
  {
    "name": "delete_user_flair",
    "description": "Removes flair from a specific user.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username whose flair is to be removed."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "disapprove_modmail_conversation",
    "description": "Disapproves a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "distinguish_item",
    "description": "Distinguishes a moderator's post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "how": {
          "type": "string",
          "description": "The method of distinction (e.g., \"yes\", \"no\", \"admin\")."
        }
      },
      "required": [
        "how",
        "id"
      ]
    }
  },
  {
    "name": "edit_live_thread_settings",
    "description": "Updates the settings or title of a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The new description for the live thread."
        }
      }
    }
  },
  {
    "name": "edit_post_or_comment_text",
    "description": "Edits the text of a comment or self-post.",
    "parameters": {
      "type": "object",
      "properties": {
        "thing_id": {
          "type": "string",
          "description": "The fullname of the post or comment."
        },
        "text": {
          "type": "string",
          "description": "The new text content in raw markdown."
        }
      },
      "required": [
        "text",
        "thing_id"
      ]
    }
  },
  {
    "name": "edit_wiki_page_content",
    "description": "Edits the content of a wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "content": {
          "type": "string",
          "description": "The new content in raw markdown."
        }
      },
      "required": [
        "content",
        "page"
      ]
    }
  },
  {
    "name": "find_duplicate_posts",
    "description": "Finds duplicate posts for a given article.",
    "parameters": {
      "type": "object",
      "properties": {
        "article": {
          "type": "string",
          "description": "The ID of the original post."
        }
      },
      "required": [
        "article"
      ]
    }
  },
  {
    "name": "follow_or_unfollow_post",
    "description": "Follows or unfollows a post to receive notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "fullname": {
          "type": "string",
          "description": "The fullname of the post."
        },
        "follow": {
          "type": "boolean",
          "description": "True to follow, False to unfollow."
        }
      },
      "required": [
        "follow",
        "fullname"
      ]
    }
  },
  {
    "name": "get_all_subreddit_emojis",
    "description": "Retrieves all emojis for a specified subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit"
      ]
    }
  },
  {
    "name": "get_all_subreddit_widgets",
    "description": "Retrieves all widgets configured for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_wiki_pages",
    "description": "Retrieves a list of wiki pages for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_wiki_revisions",
    "description": "Retrieves recent revisions for all wiki pages.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_approved_submitters",
    "description": "Retrieves a list of approved submitters in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_approved_wiki_contributors",
    "description": "Retrieves a list of approved wiki contributors.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_banned_users",
    "description": "Retrieves a list of banned users in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_best_posts",
    "description": "Retrieves the best posts ranked by the algorithm.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "The fullname anchor for pagination."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of posts to return."
        }
      }
    }
  },
  {
    "name": "get_collection_info",
    "description": "Retrieves information about a specific collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The unique identifier of the collection."
        }
      },
      "required": [
        "collection_id"
      ]
    }
  },
  {
    "name": "get_controversial_posts",
    "description": "Retrieves posts that are currently controversial.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "The fullname anchor for pagination."
        }
      }
    }
  },
  {
    "name": "get_default_subreddits",
    "description": "Retrieves the list of default subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_detailed_blocked_users",
    "description": "Retrieves detailed information about blocked users.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_detailed_friends_info",
    "description": "Retrieves detailed information about friends.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_edited_items",
    "description": "Retrieves recently edited posts or comments.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_emoji_s3_upload_lease",
    "description": "Acquires and returns an upload lease to an S3 temporary bucket.",
    "parameters": {
      "type": "object",
      "properties": {
        "filepath": {
          "type": "string",
          "description": "The name and extension of the image file (e.g. \"image1.png\")."
        },
        "mimetype": {
          "type": "string",
          "description": "The MIME type of the image (e.g. \"image/png\")."
        }
      },
      "required": [
        "filepath",
        "mimetype"
      ]
    }
  },
  {
    "name": "get_featured_live_thread",
    "description": "Retrieves the currently featured live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_flair_list",
    "description": "Retrieves a paginated list of users and their flair.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "The fullname anchor for pagination."
        },
        "name": {
          "type": "string",
          "description": "A filter by username."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of users to return."
        }
      }
    }
  },
  {
    "name": "get_flair_options",
    "description": "Retrieves available flair options for a link or user.",
    "parameters": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string",
          "description": "The fullname of the link."
        },
        "name": {
          "type": "string",
          "description": "The username."
        }
      }
    }
  },
  {
    "name": "get_global_announcements",
    "description": "Retrieves a list of global announcements.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_gold_subreddits",
    "description": "Retrieves gold-exclusive subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_hot_posts",
    "description": "Retrieves hot posts from the front page.",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "The maximum number of posts to return."
        }
      }
    }
  },
  {
    "name": "get_inbox_messages",
    "description": "Retrieves messages from the inbox.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_items_info",
    "description": "Retrieves information about posts or comments by fullname or URL.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A comma-separated list of fullnames."
        },
        "url": {
          "type": "string",
          "description": "A URL to look up posts referencing it."
        }
      }
    }
  },
  {
    "name": "get_link_flair_templates",
    "description": "Retrieves link flair templates (v2).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_link_flair_templates_legacy",
    "description": "Retrieves link flair templates (legacy version).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_contributors",
    "description": "Retrieves the list of contributors for a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_details",
    "description": "Retrieves details about a specific live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "get_live_thread_discussions",
    "description": "Retrieves discussion thread identifiers associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_metadata",
    "description": "Retrieves metadata about a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_update_details",
    "description": "Retrieves details for a specific live thread update.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_id": {
          "type": "string",
          "description": "The ID of the update to retrieve."
        }
      },
      "required": [
        "update_id"
      ]
    }
  },
  {
    "name": "get_live_threads_by_id",
    "description": "Retrieves data for multiple live threads by their fullnames.",
    "parameters": {
      "type": "object",
      "properties": {
        "names": {
          "type": "string",
          "description": "A comma-separated list of live thread fullnames."
        }
      },
      "required": [
        "names"
      ]
    }
  },
  {
    "name": "get_messages_by_mailbox",
    "description": "Retrieves messages from a specified mailbox category.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The mailbox category (e.g., \"inbox\", \"sent\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_moderated_items_by_category",
    "description": "Retrieves moderated listings for a specific category.",
    "parameters": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The moderation category (e.g., \"spam\")."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "get_moderation_log",
    "description": "Retrieves the moderation log for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_modmail_conversation_details",
    "description": "Retrieves details of a specific modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "get_modmail_conversations",
    "description": "Retrieves a list of modmail conversations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_modqueue_items",
    "description": "Retrieves items pending moderator action",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_more_comments",
    "description": "Retrieves additional comments omitted by pagination.",
    "parameters": {
      "type": "object",
      "properties": {
        "link_id": {
          "type": "string",
          "description": "The fullname of the parent post."
        },
        "children": {
          "type": "string",
          "description": "A comma-separated list of child comment IDs to retrieve."
        }
      },
      "required": [
        "children",
        "link_id"
      ]
    }
  },
  {
    "name": "get_multireddit_description",
    "description": "Retrieves the description of a multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "multipath": {
          "type": "string",
          "description": "The multireddit path."
        }
      },
      "required": [
        "multipath"
      ]
    }
  },
  {
    "name": "get_muted_users",
    "description": "Retrieves a list of muted users in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_blocked_users",
    "description": "Retrieves a list of users blocked by the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_contributor_subreddits",
    "description": "Retrieves subreddits where the user is an approved contributor.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_friends",
    "description": "Retrieves a list of friends for the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_identity",
    "description": "Retrieves the identity details of the currently authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_karma_breakdown",
    "description": "Retrieves a breakdown of the authenticated user's subreddit karma.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_messaging_preferences",
    "description": "Retrieves the messaging preferences of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_moderator_subreddits",
    "description": "Retrieves subreddits where the user is a moderator.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_multireddits",
    "description": "Retrieves the authenticated user's multireddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_preferences",
    "description": "Retrieves the preference settings of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "string",
          "description": "A comma-separated list of specific preference fields to return.\nIf None, returns all preferences."
        }
      }
    }
  },
  {
    "name": "get_my_streaming_subreddits",
    "description": "Retrieves subreddits related to streaming content.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_subreddits_by_category",
    "description": "Retrieves subreddits based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category (e.g., \"contributor\", \"moderator\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_my_subscribed_subreddits",
    "description": "Retrieves subreddits the user is subscribed to.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_trophies",
    "description": "Retrieves the trophies (awards) earned by the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_trusted_users",
    "description": "Retrieves the trusted user list for the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_new_posts",
    "description": "Retrieves the newest posts.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_new_subreddits",
    "description": "Retrieves newly created subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_newest_users",
    "description": "Retrieves the newest registered users.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_oauth_scopes",
    "description": "Retrieves all available OAuth scopes and their descriptions.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_popular_subreddits",
    "description": "Retrieves popular subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_popular_users",
    "description": "Retrieves popular users.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_post_comments",
    "description": "Retrieves comments for a post identified by its article ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "article": {
          "type": "string",
          "description": "The article ID or slug."
        }
      },
      "required": [
        "article"
      ]
    }
  },
  {
    "name": "get_posts_by_id",
    "description": "Retrieves posts by their fullnames.",
    "parameters": {
      "type": "object",
      "properties": {
        "names": {
          "type": "string",
          "description": "A comma-separated list of post fullnames."
        }
      },
      "required": [
        "names"
      ]
    }
  },
  {
    "name": "get_preferences_by_category",
    "description": "Retrieves specific preference details from various preference categories.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The preference category to retrieve (e.g., \"blocked\", \"friends\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_recent_moderator_notes_for_user",
    "description": "Retrieves recent moderator notes for a user in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "The username for whom to retrieve notes."
        },
        "subreddit": {
          "type": "string",
          "description": "The subreddit identifier."
        }
      },
      "required": [
        "subreddit",
        "user"
      ]
    }
  },
  {
    "name": "get_reported_items",
    "description": "Retrieves reported posts or comments.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_rising_posts",
    "description": "Retrieves posts that are rapidly gaining popularity.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_saved_categories",
    "description": "Retrieves the user's saved categories.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_search",
    "description": "Searches for content based on the provided query and parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string",
          "description": "The search query string (maximum 512 characters)."
        },
        "after": {
          "type": "string",
          "description": "A cursor for paginating results after a certain point. Defaults to None."
        },
        "before": {
          "type": "string",
          "description": "A cursor for paginating results before a certain point. Defaults to None."
        },
        "category": {
          "type": "string",
          "description": "The category to filter search results by (maximum 5 characters). Defaults to None."
        },
        "count": {
          "type": "integer",
          "description": "The number of results already seen. Defaults to 0."
        },
        "include_facets": {
          "type": "boolean",
          "description": "Whether to include facet information in the results. Defaults to False."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of results to return (must be between 1 and 100). Defaults to 25."
        },
        "restrict_sr": {
          "type": "boolean",
          "description": "Whether to restrict the search to the current subreddit (if applicable). Defaults to False."
        },
        "show": {
          "type": "string",
          "description": "A string to filter results by a specific type (e.g., 'all'). Defaults to None."
        },
        "sort": {
          "type": "string",
          "description": "The sorting method for results ('relevance', 'hot', 'top', 'new', 'comments'). Defaults to \"relevance\"."
        },
        "sr_detail": {
          "type": "boolean",
          "description": "Whether to include detailed information about the subreddit. Defaults to False."
        },
        "t": {
          "type": "string",
          "description": "The time filter for top or controversial sorts ('hour', 'day', 'week', 'month', 'year', 'all'). Defaults to None."
        },
        "type": {
          "type": "string",
          "description": "Comma-separated string of types to search for ('sr', 'link', 'user'). Defaults to None (all types)."
        }
      },
      "required": [
        "q"
      ]
    }
  },
  {
    "name": "get_sent_messages",
    "description": "Retrieves messages from the sent folder.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_sorted_posts",
    "description": "Retrieves posts sorted by a specified method.",
    "parameters": {
      "type": "object",
      "properties": {
        "sort": {
          "type": "string",
          "description": "The sorting category (e.g., hot, new, rising)."
        }
      },
      "required": [
        "sort"
      ]
    }
  },
  {
    "name": "get_spam_items",
    "description": "Retrieves items marked as spam.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_stickied_post_ids",
    "description": "Retrieves the identifiers of stickied posts.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_autocomplete_suggestions",
    "description": "Provides autocomplete suggestions for subreddits (v2).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_autocomplete_suggestions_legacy",
    "description": "Provides autocomplete suggestions for subreddits (legacy).",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A partial subreddit name."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "get_subreddit_collections",
    "description": "Retrieves collections for a specific subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "sr_fullname": {
          "type": "string",
          "description": "The fullname of the subreddit."
        }
      },
      "required": [
        "sr_fullname"
      ]
    }
  },
  {
    "name": "get_subreddit_editing_settings",
    "description": "Retrieves the subreddit editing settings.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_info",
    "description": "Retrieves information about a specific subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit"
      ]
    }
  },
  {
    "name": "get_subreddit_moderators",
    "description": "Retrieves a list of moderators in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_post_requirements",
    "description": "Retrieves submission requirements for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit"
      ]
    }
  },
  {
    "name": "get_subreddit_rules",
    "description": "Retrieves the moderation rules of a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_sidebar",
    "description": "Retrieves the sidebar content for the subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_stylesheet",
    "description": "Retrieves the subreddit's stylesheet code.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_submit_text",
    "description": "Retrieves the submission text (sidebar text) for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "sr": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "sr"
      ]
    }
  },
  {
    "name": "get_subreddit_traffic_stats",
    "description": "Retrieves traffic statistics for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddits_by_category",
    "description": "Retrieves subreddits based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category (e.g., \"popular\", \"new\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_top_posts",
    "description": "Retrieves the top posts.",
    "parameters": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "description": "The timeframe (e.g., day, week)."
        }
      }
    }
  },
  {
    "name": "get_unmoderated_items",
    "description": "Retrieves posts or comments that are unmoderated.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_unread_announcements",
    "description": "Retrieves a list of announcements not yet read by the user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_unread_messages",
    "description": "Retrieves unread messages from the inbox.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_unread_modmail_conversation_count",
    "description": "Retrieves the count of unread modmail conversations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_comments",
    "description": "Retrieves comments made by a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_content_by_category",
    "description": "Retrieves user content for a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category (e.g., \"overview\", \"comments\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_user_data_by_account_ids",
    "description": "Retrieves user data for specified account IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "string",
          "description": "A comma-separated list of account IDs."
        }
      },
      "required": [
        "ids"
      ]
    }
  },
  {
    "name": "get_user_downvoted_posts",
    "description": "Retrieves posts downvoted by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_flair_templates",
    "description": "Retrieves all user flair templates for a subreddit (v2).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_flair_templates_legacy",
    "description": "Retrieves all user flair templates for a subreddit (legacy).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_gilded_posts",
    "description": "Retrieves posts that have been gilded for a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_hidden_posts",
    "description": "Retrieves hidden posts of a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_overview",
    "description": "Retrieves an overview of a user's submissions and comments.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_profile_info",
    "description": "Retrieves profile information for a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_public_multireddits",
    "description": "Retrieves public multireddits for a specified user.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username whose multireddits are requested."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_saved_posts",
    "description": "Retrieves posts saved by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_submitted_posts",
    "description": "Retrieves posts submitted by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_trophies",
    "description": "Retrieves trophies for a specified user.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The target username."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_upvoted_posts",
    "description": "Retrieves posts upvoted by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_users_by_category",
    "description": "Retrieves user lists based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category (e.g., \"banned\", \"moderators\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_users_by_list_category",
    "description": "Retrieves users based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The user category (e.g., \"new\", \"popular\")."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_widget_image_s3_upload_lease",
    "description": "Acquires and returns an upload lease to an S3 temporary bucket for widget image uploads.",
    "parameters": {
      "type": "object",
      "properties": {
        "filepath": {
          "type": "string",
          "description": "The name and extension of the image file (e.g. \"widget.png\")."
        },
        "mimetype": {
          "type": "string",
          "description": "The MIME type of the image (e.g. \"image/png\")."
        }
      },
      "required": [
        "filepath",
        "mimetype"
      ]
    }
  },
  {
    "name": "get_wiki_banned_users",
    "description": "Retrieves a list of users banned from wiki edits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_wiki_page_content",
    "description": "Retrieves the content of a wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "get_wiki_page_discussions",
    "description": "Retrieves discussion links related to a wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "get_wiki_page_revisions",
    "description": "Retrieves revisions for a specific wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "get_wiki_page_settings",
    "description": "Retrieves the settings for a specific wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "hide_announcements",
    "description": "Hides one or more announcements from the authenticated user's feed.",
    "parameters": {
      "type": "object",
      "properties": {
        "announcement_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of announcement IDs to hide."
        }
      },
      "required": [
        "announcement_ids"
      ]
    }
  },
  {
    "name": "hide_live_thread_discussion",
    "description": "Hides the discussion thread associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "hide_posts",
    "description": "Hides one or more posts from the user's front page.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of post fullnames to hide."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "hide_wiki_page_revision",
    "description": "Hides a specific revision from the wiki history.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "revision": {
          "type": "string",
          "description": "The revision ID to hide."
        }
      },
      "required": [
        "page",
        "revision"
      ]
    }
  },
  {
    "name": "ignore_item_reports",
    "description": "Ignores future reports on a specific item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "invite_live_thread_contributor",
    "description": "Invites a new contributor to a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the invitee."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "leave_contributor_status",
    "description": "Removes the current user from contributor status.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "leave_live_thread_contributor_role",
    "description": "Removes contributor status from the current user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "leave_moderator_status",
    "description": "Removes the current user from moderator status.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_modmail_accessible_subreddits",
    "description": "Lists subreddits accessible via modmail.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "lock_item",
    "description": "Locks a post or comment to prevent further replies.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item to lock."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_all_announcements_as_read",
    "description": "Marks all global announcements as read.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "mark_all_messages_as_read",
    "description": "Marks all messages in the inbox as read.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "mark_announcements_as_read",
    "description": "Marks one or more announcements as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "announcement_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of announcement IDs to mark as read."
        }
      },
      "required": [
        "announcement_ids"
      ]
    }
  },
  {
    "name": "mark_messages_as_read",
    "description": "Marks specified messages as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_messages_as_unread",
    "description": "Marks specified messages as unread.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_modmail_conversations_as_read",
    "description": "Marks specified modmail conversations as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs."
        }
      },
      "required": [
        "conversation_ids"
      ]
    }
  },
  {
    "name": "mark_modmail_conversations_as_unread",
    "description": "Marks specified modmail conversations as unread.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs."
        }
      },
      "required": [
        "conversation_ids"
      ]
    }
  },
  {
    "name": "mark_post_nsfw",
    "description": "Marks a post as Not Safe For Work (NSFW).",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_post_spoiler",
    "description": "Marks a post as containing spoilers.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mute_user_in_modmail_conversation",
    "description": "Mutes the user in a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "perform_wiki_editor_action",
    "description": "Performs an action to add or remove a wiki editor.",
    "parameters": {
      "type": "object",
      "properties": {
        "act": {
          "type": "string",
          "description": "\"add\" or \"del\" to modify wiki editors."
        }
      },
      "required": [
        "act"
      ]
    }
  },
  {
    "name": "recommend_related_subreddits",
    "description": "Suggests related subreddits based on provided names.",
    "parameters": {
      "type": "object",
      "properties": {
        "srnames": {
          "type": "string",
          "description": "A comma-separated list of subreddit names."
        }
      },
      "required": [
        "srnames"
      ]
    }
  },
  {
    "name": "remove_friend",
    "description": "Removes a friend relationship.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username to unfriend."
        },
        "type": {
          "type": "string",
          "description": "The relationship type (e.g., \"friend\")."
        }
      },
      "required": [
        "name",
        "type"
      ]
    }
  },
  {
    "name": "remove_friend_by_username",
    "description": "Removes a friend relationship.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username to remove."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "remove_item",
    "description": "Removes a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item to remove."
        },
        "spam": {
          "type": "boolean",
          "description": "Indicates if the item should be marked as spam."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "remove_live_thread_contributor",
    "description": "Removes a contributor from a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the contributor to remove."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "remove_modmail_conversation_highlight",
    "description": "Removes a highlight marker from a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "remove_post_from_collection",
    "description": "Removes a post from a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "link_fullname": {
          "type": "string",
          "description": "The fullname of the post to remove."
        },
        "collection_id": {
          "type": "string",
          "description": "The identifier of the collection."
        }
      },
      "required": [
        "collection_id",
        "link_fullname"
      ]
    }
  },
  {
    "name": "remove_subreddit_from_filter_path",
    "description": "Removes a subreddit from a saved filter path.",
    "parameters": {
      "type": "object",
      "properties": {
        "filterpath": {
          "type": "string",
          "description": "The filter path identifier."
        },
        "srname": {
          "type": "string",
          "description": "The subreddit name to remove."
        }
      },
      "required": [
        "filterpath",
        "srname"
      ]
    }
  },
  {
    "name": "remove_subreddit_from_multireddit",
    "description": "Removes a subreddit from a multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "multipath": {
          "type": "string",
          "description": "The multireddit path."
        },
        "srname": {
          "type": "string",
          "description": "The subreddit name to remove."
        }
      },
      "required": [
        "multipath",
        "srname"
      ]
    }
  },
  {
    "name": "remove_wiki_page_editor",
    "description": "Removes a user from the wiki editors list.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "username": {
          "type": "string",
          "description": "The username to remove from editors."
        }
      },
      "required": [
        "page",
        "username"
      ]
    }
  },
  {
    "name": "reorder_collection_posts",
    "description": "Reorders the posts in a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The identifier of the collection."
        },
        "link_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of comma separated link_ids in the order to set them in."
        }
      },
      "required": [
        "collection_id",
        "link_ids"
      ]
    }
  },
  {
    "name": "reorder_flair_templates",
    "description": "Reorders the existing flair templates.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "template_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An ordered list of flair template IDs."
        }
      },
      "required": [
        "flair_type",
        "template_ids"
      ]
    }
  },
  {
    "name": "reorder_subreddit_widgets",
    "description": "Reorders widgets within a specified section.",
    "parameters": {
      "type": "object",
      "properties": {
        "section": {
          "type": "string",
          "description": "The section name (e.g., \"sidebar\")."
        },
        "ordered_widgets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An ordered list of widget IDs."
        }
      },
      "required": [
        "ordered_widgets",
        "section"
      ]
    }
  },
  {
    "name": "report_item",
    "description": "Reports a post or comment for review.",
    "parameters": {
      "type": "object",
      "properties": {
        "thing_id": {
          "type": "string",
          "description": "The fullname of the item to report."
        },
        "reason": {
          "type": "string",
          "description": "A short explanation for the report."
        }
      },
      "required": [
        "thing_id"
      ]
    }
  },
  {
    "name": "report_live_thread",
    "description": "Reports a live thread for rule violations.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "report_user",
    "description": "Reports a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "The username to report."
        },
        "reason": {
          "type": "string",
          "description": "The reason for reporting."
        }
      },
      "required": [
        "user"
      ]
    }
  },
  {
    "name": "revert_wiki_page_to_revision",
    "description": "Reverts a wiki page to a previous revision.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "revision": {
          "type": "string",
          "description": "The revision ID to revert to."
        }
      },
      "required": [
        "page",
        "revision"
      ]
    }
  },
  {
    "name": "revoke_live_thread_contributor_invite",
    "description": "Revokes a pending contributor invite.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the invite to revoke."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "save_item",
    "description": "Saves a post or comment to the user's saved list.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item to save."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "search_subreddit_names",
    "description": "Checks for subreddit name availability or suggests names.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search term for subreddit names."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_subreddits_by_name_or_topic",
    "description": "Searches for subreddits by name or topic.",
    "parameters": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string",
          "description": "The search query."
        }
      },
      "required": [
        "q"
      ]
    }
  },
  {
    "name": "search_subreddits_by_title_description",
    "description": "Searches for subreddits by name, title and description.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search keyword(s)."
        },
        "exact": {
          "type": "boolean",
          "description": "If True, an exact match for the query will be performed. Defaults to False."
        },
        "include_over18": {
          "type": "boolean",
          "description": "If True, results will include subreddits marked as \"over 18\". Defaults to False."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_users_by_name",
    "description": "Searches for users by name.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "select_link_flair",
    "description": "Applies a chosen link flair template to a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string",
          "description": "The fullname of the post."
        },
        "flair_template_id": {
          "type": "string",
          "description": "The ID of the flair template."
        }
      },
      "required": [
        "flair_template_id",
        "link"
      ]
    }
  },
  {
    "name": "set_flair_enabled_status",
    "description": "Enables or disables flair in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_type": {
          "type": "string",
          "description": "Must be \"json\"."
        },
        "flair_enabled": {
          "type": "boolean",
          "description": "True to enable flair, False to disable."
        }
      },
      "required": [
        "api_type",
        "flair_enabled"
      ]
    }
  },
  {
    "name": "set_live_thread_contributor_permissions",
    "description": "Updates permissions for an existing contributor.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the contributor."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "set_post_contest_mode",
    "description": "Enables or disables contest mode for a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "state": {
          "type": "boolean",
          "description": "True to enable contest mode, False to disable."
        },
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id",
        "state"
      ]
    }
  },
  {
    "name": "set_post_sticky_status",
    "description": "Stickies or unstickies a post in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "The sticky slot number."
        },
        "state": {
          "type": "boolean",
          "description": "True to sticky, False to unsticky."
        },
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id",
        "state"
      ]
    }
  },
  {
    "name": "set_post_suggested_sort",
    "description": "Sets the suggested comment sort order for a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "sort": {
          "type": "string",
          "description": "The sort order (e.g., \"top\", \"new\")."
        },
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "set_subreddit_emoji_custom_size",
    "description": "Sets a custom display size for a subreddit emoji.",
    "parameters": {
      "type": "object",
      "properties": {
        "emoji_name": {
          "type": "string",
          "description": "The name of the emoji."
        },
        "width": {
          "type": "integer",
          "description": "The desired width in pixels."
        },
        "height": {
          "type": "integer",
          "description": "The desired height in pixels."
        }
      },
      "required": [
        "emoji_name",
        "height",
        "width"
      ]
    }
  },
  {
    "name": "set_user_flair",
    "description": "Sets or updates a user's flair.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_type": {
          "type": "string",
          "description": "Must be \"json\"."
        },
        "name": {
          "type": "string",
          "description": "The username for which to set flair."
        },
        "flair_template_id": {
          "type": "string",
          "description": "The ID of the flair template (if using one)."
        },
        "text": {
          "type": "string",
          "description": "Custom flair text if not using a template."
        }
      },
      "required": [
        "api_type",
        "name"
      ]
    }
  },
  {
    "name": "set_user_flairs_via_csv",
    "description": "Processes CSV input to set multiple user flairs.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_csv": {
          "type": "string",
          "description": "A CSV-formatted string with flair data."
        }
      },
      "required": [
        "flair_csv"
      ]
    }
  },
  {
    "name": "set_user_permissions",
    "description": "Sets permissions for a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username for whom to set permissions."
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of permissions to grant."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "show_removed_comment",
    "description": "Re-approves a comment that was removed.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the comment."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "snooze_item_reports",
    "description": "Snoozes reports on a specific item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "store_recent_visits",
    "description": "Stores a record of the user's recent post or comment visits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "strike_live_thread_update",
    "description": "Marks a live thread update as erroneous.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the update to strike."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "submit_comment",
    "description": "Submits a new comment or reply to a message.",
    "parameters": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "The fullname of the parent post or comment."
        },
        "text": {
          "type": "string",
          "description": "The comment text in raw markdown."
        }
      },
      "required": [
        "parent",
        "text"
      ]
    }
  },
  {
    "name": "submit_post",
    "description": "Submits a new link or text post into a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The type of post (\"link\" or \"self\")."
        },
        "sr": {
          "type": "string",
          "description": "The subreddit to which the post is submitted."
        },
        "title": {
          "type": "string",
          "description": "The title of the post."
        },
        "text": {
          "type": "string",
          "description": "The text body for a self-post. Required when kind is \"self\"."
        },
        "url": {
          "type": "string",
          "description": "The URL for a link post. Required when kind is \"link\"."
        },
        "nsfw": {
          "type": "boolean",
          "description": "Whether the post is Not Safe For Work. Defaults to False."
        },
        "spoiler": {
          "type": "boolean",
          "description": "Whether the post contains spoilers. Defaults to False."
        }
      },
      "required": [
        "kind",
        "sr",
        "title"
      ]
    }
  },
  {
    "name": "subscribe_or_unsubscribe_subreddit",
    "description": "Subscribes or unsubscribes the user from a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Either \"sub\" or \"unsub\"."
        },
        "sr_name": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "action",
        "sr_name"
      ]
    }
  },
  {
    "name": "temp_ban_user_via_modmail",
    "description": "Temporarily bans a user via modmail.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "toggle_item_replies",
    "description": "Enables or disables replies for a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "state": {
          "type": "boolean",
          "description": "True to enable replies, False to disable."
        }
      },
      "required": [
        "id",
        "state"
      ]
    }
  },
  {
    "name": "unarchive_modmail_conversation",
    "description": "Unarchives a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "unban_user_via_modmail",
    "description": "Revokes a ban issued via modmail.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "unblock_subreddit_messaging",
    "description": "Unblocks a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "uncollapse_messages",
    "description": "Uncollapses one or more messages in the inbox.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unhide_live_thread_discussion",
    "description": "Unhides the discussion thread associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "unhide_posts",
    "description": "Unhides posts that were previously hidden.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of post fullnames to unhide."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unignore_item_reports",
    "description": "Stops ignoring reports on a specific item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unlock_item",
    "description": "Unlocks a previously locked post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unmark_post_nsfw",
    "description": "Removes the NSFW tag from a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unmark_post_spoiler",
    "description": "Removes the spoiler tag from a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unmute_user_in_modmail_conversation",
    "description": "Unmutes a user in a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "unsave_item",
    "description": "Unsaves a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item to unsave."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unsnooze_item_reports",
    "description": "Unsnoozes reports, resuming notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "update_collection_description",
    "description": "Updates the description of a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The collection identifier."
        },
        "description": {
          "type": "string",
          "description": "The new description text."
        }
      },
      "required": [
        "collection_id",
        "description"
      ]
    }
  },
  {
    "name": "update_collection_display_layout",
    "description": "Updates the display layout of a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The collection identifier."
        },
        "display_layout": {
          "type": "string",
          "description": "The new layout style (e.g., GALLERY, TIMELINE)."
        }
      },
      "required": [
        "collection_id",
        "display_layout"
      ]
    }
  },
  {
    "name": "update_collection_title",
    "description": "Changes the title of a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The collection identifier."
        },
        "title": {
          "type": "string",
          "description": "The new title for the collection."
        }
      },
      "required": [
        "collection_id",
        "title"
      ]
    }
  },
  {
    "name": "update_my_preferences",
    "description": "Updates the preference settings of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_preferences": {
          "type": "object",
          "properties": {},
          "description": "A dictionary containing the preference fields to update."
        }
      },
      "required": [
        "new_preferences"
      ]
    }
  },
  {
    "name": "update_post_crowd_control_level",
    "description": "Updates the crowd control level for a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the post."
        },
        "level": {
          "type": "integer",
          "description": "The new crowd control level."
        }
      },
      "required": [
        "id",
        "level"
      ]
    }
  },
  {
    "name": "update_subreddit_stylesheet",
    "description": "Updates the subreddit's stylesheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "description": "The operation (typically \"save\")."
        },
        "stylesheet_contents": {
          "type": "string",
          "description": "The new stylesheet code."
        }
      },
      "required": [
        "op",
        "stylesheet_contents"
      ]
    }
  },
  {
    "name": "upload_subreddit_stylesheet_image",
    "description": "Uploads an image for a subreddit's stylesheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name/key for the image."
        },
        "file": {
          "type": "object",
          "properties": {},
          "description": "The image file data."
        }
      },
      "required": [
        "file",
        "name"
      ]
    }
  },
  {
    "name": "vote_on_item",
    "description": "Casts or revokes a vote on a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "dir": {
          "type": "integer",
          "description": "The vote direction (-1 for downvote, 0 for remove, +1 for upvote)."
        }
      },
      "required": [
        "dir",
        "id"
      ]
    }
  }
]