[
  {
    "name": "create_attachment",
    "description": "Mock file upload that generates attachment tokens and metadata.\n\nThis function simulates uploading a file to Zendesk and returns the upload token\nand attachment metadata. The token can be used to associate the file with tickets\nor comments. Multiple files can be associated with the same token.",
    "parameters": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "description": "Target filename for the attachment."
        },
        "token": {
          "type": "string",
          "description": "Upload token for associating multiple files. If not provided,\na new token will be generated."
        },
        "content_type": {
          "type": "string",
          "description": "MIME type of the file. If not provided, will be\nauto-detected from the filename."
        },
        "file_size": {
          "type": "integer",
          "description": "Mock file size in bytes. Defaults to 1024."
        }
      },
      "required": [
        "filename"
      ]
    }
  },
  {
    "name": "create_organization",
    "description": "Creates a new organization.\n\nAdds a new organization to the database if the provided ID does not already exist.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the organization."
        },
        "industry": {
          "type": "string",
          "description": "The industry of the organization. Defaults to None."
        },
        "location": {
          "type": "string",
          "description": "The location of the organization. Defaults to None."
        },
        "domain_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of domain names associated with the organization.\nDefaults to empty list."
        },
        "external_id": {
          "type": "string",
          "description": "A unique external identifier for the organization. Defaults to None."
        },
        "group_id": {
          "type": "integer",
          "description": "The ID of the group that the organization belongs to. Defaults to None."
        },
        "notes": {
          "type": "string",
          "description": "Notes about the organization. Defaults to None."
        },
        "details": {
          "type": "string",
          "description": "Any details about the organization, such as the address. Defaults to None."
        },
        "shared_tickets": {
          "type": "boolean",
          "description": "Whether tickets from this organization are shared with other organizations. Defaults to None."
        },
        "shared_comments": {
          "type": "boolean",
          "description": "Whether end users in this organization can comment on each other's tickets. Defaults to None."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags associated with the organization. Defaults to empty list."
        },
        "organization_fields": {
          "type": "object",
          "properties": {},
          "description": "Custom fields for this organization. Defaults to None."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "create_ticket",
    "description": "Creates a new ticket.\n\nThis function creates a new ticket. The request body must contain a 'ticket'\nobject. Within the 'ticket' object, 'requester_id' and a 'comment' object \n(which must include a 'body') are typically required fields for successful ticket creation.",
    "parameters": {
      "type": "object",
      "properties": {
        "ticket": {
          "type": "object",
          "properties": {
            "assignee_email": {
              "type": "string",
              "description": "Write only. The email address of the\n    agent to assign the ticket to."
            },
            "assignee_id": {
              "type": "integer",
              "description": "The agent currently assigned to the ticket."
            },
            "brand_id": {
              "type": "integer",
              "description": "The id of the brand this ticket is\n    associated with."
            },
            "collaborator_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "The ids of users currently\n    CC'ed on the ticket."
            },
            "collaborators": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "ID of an existing user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of a new or existing user."
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of a new or existing user."
                  }
                }
              },
              "description": "POST requests only.\n    Users to add as cc's when creating a ticket. Each item is a\n    dictionary with the following keys:"
            },
            "comment": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "string",
                  "description": "The plain text body of the comment. Mandatory for new\n        tickets."
                },
                "html_body": {
                  "type": "string",
                  "description": "The HTML body of the comment. If both\n        body and html_body are present, html_body is ignored."
                },
                "public": {
                  "type": "boolean",
                  "description": "Whether the comment is public (true) or\n        internal (false). Defaults to True."
                },
                "uploads": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "An array of attachment tokens\n        received from the Uploads API."
                },
                "author_id": {
                  "type": "integer",
                  "description": "ID of the agent or end user who is the\n        author of the comment."
                }
              },
              "description": "Write only. An object that adds a comment\n    to the ticket. This dictionary must contain a 'body' key.",
              "required": [
                "body"
              ]
            },
            "custom_fields": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the custom field."
                  },
                  "value": {
                    "type": "object",
                    "description": "The value for the custom field."
                  }
                },
                "required": [
                  "id",
                  "value"
                ]
              },
              "description": "Custom fields for the\n    ticket. Each object in the list must have an 'id' and 'value'.\n    Defaults to []."
            },
            "due_at": {
              "type": "string",
              "description": "If this is a ticket of type 'task' it has a\n    due date. Due date format uses ISO 8601 format."
            },
            "email_cc_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "The ids of agents or end users\n    currently CC'ed on the ticket. Ignored when CCs and followers\n    is not enabled."
            },
            "email_ccs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "ID of the user."
                  },
                  "user_email": {
                    "type": "string",
                    "description": "Email of the user."
                  },
                  "action": {
                    "type": "string",
                    "description": "Action to perform. Possible values: \"put\",\n        \"delete\"."
                  }
                }
              },
              "description": "Write only. An array of\n    objects that represents agent or end users email CCs to add or\n    delete from the ticket. Each item is a dictionary with keys:"
            },
            "external_id": {
              "type": "string",
              "description": "An id you can use to link Zendesk Support\n    tickets to local records."
            },
            "follower_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "The ids of agents currently\n    following the ticket. Ignored when CCs and followers is not\n    enabled."
            },
            "followers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "ID of the user."
                  },
                  "user_email": {
                    "type": "string",
                    "description": "Email of the user."
                  },
                  "action": {
                    "type": "string",
                    "description": "Action to perform. Possible values: \"put\",\n        \"delete\"."
                  }
                }
              },
              "description": "Write only. An array of\n    objects that represents agent followers to add or delete from\n    the ticket. Each item is a dictionary with keys:"
            },
            "group_id": {
              "type": "integer",
              "description": "The group this ticket is assigned to."
            },
            "macro_id": {
              "type": "integer",
              "description": "Write only. A macro ID to be recorded in\n    the ticket audit."
            },
            "macro_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "POST requests only. List of macro IDs\n    to be recorded in the ticket audit."
            },
            "metadata": {
              "type": "object",
              "properties": {
                "system": {
                  "type": "object",
                  "properties": {},
                  "description": "System-related metadata."
                },
                "custom": {
                  "type": "object",
                  "properties": {},
                  "description": "Custom metadata."
                }
              },
              "description": "Write only. Metadata for the audit."
            },
            "organization_id": {
              "type": "integer",
              "description": "The organization of the requester."
            },
            "priority": {
              "type": "string",
              "description": "The urgency with which the ticket should be\n    addressed. Possible values: \"urgent\", \"high\", \"normal\", \"low\".\n    Defaults to \"normal\"."
            },
            "problem_id": {
              "type": "integer",
              "description": "For tickets of type 'incident', the ID of\n    the problem the incident is linked to."
            },
            "raw_subject": {
              "type": "string",
              "description": "The dynamic content placeholder, if\n    present, or the 'subject' value, if not. Defaults to the 'subject' value."
            },
            "recipient": {
              "type": "string",
              "description": "The original recipient e-mail address of\n    the ticket."
            },
            "requester_id": {
              "type": "integer",
              "description": "The user who requested this ticket. Mandatory."
            },
            "sharing_agreement_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "The ids of the sharing\n    agreements used for this ticket. Defaults to []."
            },
            "status": {
              "type": "string",
              "description": "The state of the ticket. Possible values: \"new\",\n    \"open\", \"pending\", \"hold\", \"solved\", \"closed\". Defaults to \"new\"."
            },
            "subject": {
              "type": "string",
              "description": "The value of the subject field for this ticket."
            },
            "submitter_id": {
              "type": "integer",
              "description": "The user who submitted the ticket.\n    Defaults to requester_id."
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The array of tags applied to this ticket.\n    Defaults to []."
            },
            "type": {
              "type": "string",
              "description": "The type of this ticket. Possible values:\n    \"problem\", \"incident\", \"question\", \"task\". Defaults to \"question\"."
            },
            "via": {
              "type": "object",
              "properties": {
                "channel": {
                  "type": "string",
                  "description": "The channel through which the ticket was\n        created."
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "rel": {
                      "type": "string",
                      "description": "Relation type."
                    }
                  },
                  "description": "Source details."
                }
              },
              "description": "Describes how the ticket was created.\n    Defaults to {\"channel\": \"api\", \"source\": {\"rel\": \"api_client\"}}."
            },
            "attribute_value_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "List of attribute value IDs for the ticket."
            },
            "custom_status_id": {
              "type": "integer",
              "description": "ID of the custom status for the ticket."
            },
            "requester": {
              "type": "string",
              "description": "Email or name of the requester."
            },
            "safe_update": {
              "type": "boolean",
              "description": "Whether to perform a safe update."
            },
            "ticket_form_id": {
              "type": "integer",
              "description": "ID of the ticket form."
            },
            "updated_stamp": {
              "type": "string",
              "description": "Timestamp for when the ticket was last updated."
            },
            "via_followup_source_id": {
              "type": "integer",
              "description": "ID of the via followup source."
            },
            "via_id": {
              "type": "integer",
              "description": "ID of the via channel."
            },
            "voice_comment": {
              "type": "object",
              "properties": {},
              "description": "Voice comment data for the ticket."
            }
          },
          "description": "The ticket object to create. This dictionary must\ncontain 'requester_id' and 'comment' keys. Its structure is as follows:",
          "required": [
            "comment",
            "requester_id"
          ]
        }
      },
      "required": [
        "ticket"
      ]
    }
  },
  {
    "name": "create_user",
    "description": "Creates a new user with comprehensive Zendesk API support.\n\nAdds a new user to the database if the provided ID does not already exist.\nSupports all standard Zendesk API parameters with robust validation.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the user (mandatory)."
        },
        "email": {
          "type": "string",
          "description": "The user's primary email address (mandatory)."
        },
        "role": {
          "type": "string",
          "description": "The user's role. Possible values: \"end-user\", \"agent\", \"admin\". Defaults to \"end-user\"."
        },
        "organization_id": {
          "type": "integer",
          "description": "The id of the user's organization. Defaults to None."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The user's tags. Defaults to None."
        },
        "photo": {
          "type": "object",
          "properties": {},
          "description": "The user's profile picture as Attachment object. Defaults to None."
        },
        "details": {
          "type": "string",
          "description": "Any details about the user. Defaults to None."
        },
        "default_group_id": {
          "type": "integer",
          "description": "The id of the user's default group. Defaults to None."
        },
        "alias": {
          "type": "string",
          "description": "An alias displayed to end users. Defaults to None."
        },
        "custom_role_id": {
          "type": "integer",
          "description": "A custom role if user is an agent on Enterprise plan. Defaults to None."
        },
        "external_id": {
          "type": "string",
          "description": "A unique identifier from another system. Defaults to None."
        },
        "locale": {
          "type": "string",
          "description": "The user's locale (BCP-47 compliant). Defaults to None."
        },
        "locale_id": {
          "type": "integer",
          "description": "The user's language identifier. Defaults to None."
        },
        "moderator": {
          "type": "boolean",
          "description": "Whether user has forum moderation capabilities. Defaults to None."
        },
        "notes": {
          "type": "string",
          "description": "Any notes about the user. Defaults to None."
        },
        "only_private_comments": {
          "type": "boolean",
          "description": "Whether user can only create private comments. Defaults to None."
        },
        "phone": {
          "type": "string",
          "description": "The user's primary phone number. Defaults to None."
        },
        "remote_photo_url": {
          "type": "string",
          "description": "URL pointing to user's profile picture. Defaults to None."
        },
        "restricted_agent": {
          "type": "boolean",
          "description": "If agent has restrictions. Defaults to None."
        },
        "shared_phone_number": {
          "type": "boolean",
          "description": "Whether phone number is shared. Defaults to None."
        },
        "signature": {
          "type": "string",
          "description": "The user's signature (agents/admins only). Defaults to None."
        },
        "suspended": {
          "type": "boolean",
          "description": "If agent is suspended. Defaults to None."
        },
        "ticket_restriction": {
          "type": "string",
          "description": "Which tickets user has access to. Defaults to None."
        },
        "time_zone": {
          "type": "string",
          "description": "The user's time zone. Defaults to None."
        },
        "verified": {
          "type": "boolean",
          "description": "Whether any user identity is verified. Defaults to None."
        },
        "user_fields": {
          "type": "object",
          "properties": {},
          "description": "Values of custom fields in user's profile. Defaults to None."
        }
      },
      "required": [
        "email",
        "name"
      ]
    }
  },
  {
    "name": "delete_attachment",
    "description": "Deletes an uploaded file using its token.\n\nThis function removes an uploaded file from the system using the token\nthat was returned when the file was originally uploaded. The token is\nvalid for 60 minutes after upload.",
    "parameters": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "The upload token of the attachment to delete. This token\nwas returned when the file was originally uploaded via the uploads endpoint."
        }
      },
      "required": [
        "token"
      ]
    }
  },
  {
    "name": "delete_organization",
    "description": "Deletes an existing organization.\n\nDeletes an organization based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "integer",
          "description": "The unique identifier for the organization."
        }
      },
      "required": [
        "organization_id"
      ]
    }
  },
  {
    "name": "delete_ticket",
    "description": "Deletes an existing ticket.\n\nDeletes a ticket based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier for the ticket."
        }
      },
      "required": [
        "ticket_id"
      ]
    }
  },
  {
    "name": "delete_user",
    "description": "Deletes an existing user.\n\nDeletes a user based on their unique identifier and returns the complete user data\nthat was deleted. This operation is irreversible.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "description": "The unique identifier for the user. Must be a positive integer."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "get_organization_details",
    "description": "Shows details of a specific organization.\n\nReturns the details of an organization based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "integer",
          "description": "The unique identifier for the organization."
        }
      },
      "required": [
        "organization_id"
      ]
    }
  },
  {
    "name": "get_ticket_details",
    "description": "Shows details of a specific ticket.\n\nReturns the details of a ticket based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier for the ticket."
        }
      },
      "required": [
        "ticket_id"
      ]
    }
  },
  {
    "name": "get_user_details",
    "description": "Shows details of a specific user.\n\nReturns the details of a user based on their unique identifier.\nReturns comprehensive user information including all Zendesk API fields.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "description": "The unique identifier for the user."
        }
      },
      "required": [
        "user_id"
      ]
    }
  },
  {
    "name": "list_organizations",
    "description": "Lists all organizations in the database.\n\nReturns a list of all organizations in the database.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_ticket_comments",
    "description": "List all comments for a ticket.",
    "parameters": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "integer",
          "description": "The ID of the ticket to list comments for."
        },
        "include": {
          "type": "string",
          "description": "Accepts \"users\". Use this parameter to list email CCs by side-loading users.\nNote: If the comment source is email, a deleted user will be represented as the CCd email address.\nIf the comment source is anything else, a deleted user will be represented as the user name.\nExample: ?include=users. Its in the documentation but not implemented."
        },
        "include_inline_images": {
          "type": "boolean",
          "description": "Default is false. When true, inline images are also listed as attachments in the response."
        }
      },
      "required": [
        "ticket_id"
      ]
    }
  },
  {
    "name": "list_tickets",
    "description": "Lists all tickets in the database.\n\nReturns a list of all tickets in the database.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_users",
    "description": "Lists all users in the database.\n\nReturns a list of all users in the database with comprehensive user details.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "search",
    "description": "Search for tickets, users, and organizations using Zendesk's query syntax.\n\nThis function simulates the Zendesk Support API /api/v2/search endpoint which allows\nsearching across tickets, users, and organizations using property keywords and operators.\nGroups are not currently supported.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query string using Zendesk's query syntax.\nSearch Rules:\n- Searches across tickets, users, and organizations by default\n- Use \"type:ticket\", \"type:user\", or \"type:organization\" to limit scope\n- Multiple terms are combined with AND logic\n- Use quotes for exact phrase matching: \"exact phrase\"\n- Use wildcards (*) for pattern matching like \"email*\"\n- Use minus (-) for negation like \"-status:closed\"\n- Combine filters and text like \"priority:urgent server down\"\n\nSupported Filter Fields:\n\nFor Tickets:\n- status: new, open, pending, hold, solved, closed\n- priority: low, normal, high, urgent (supports >, <, >=, <= operators)\n- ticket_type: problem, incident, question, task\n- assignee: user_id, \"me\", \"none\"\n- requester: user_id\n- organization: organization_id, \"none\"\n- group: group_id, \"none\"\n- tags: tag_name, \"none\"\n- subject: text search in ticket subject\n- description: text search in ticket description\n- created: date or relative time (>2hours, >1day, >1week)\n- updated: date or relative time\n\nFor Users:\n- role: end-user, agent, admin\n- email: email pattern or domain (@example.com)\n- name: text search in user name\n- organization: organization_id, \"none\"\n- tags: tag_name, \"none\"\n- verified: true, false\n- active: true, false\n- created: date or relative time\n- updated: date or relative time\n\nFor Organizations:\n- name: text search in organization name\n- tags: tag_name, \"none\"\n- created: date or relative time\n- updated: date or relative time\n\nRelative Time Format:\n- Supports: hours/h, minutes/min, days/d, weeks/w, months, years/y"
        },
        "sort_by": {
          "type": "string",
          "description": "Field to sort results by. Value can be created_at, updated_at, priority, status, ticket_type"
        },
        "sort_order": {
          "type": "string",
          "description": "Sort order. Value can be asc, desc. Defaults to desc."
        },
        "page": {
          "type": "integer",
          "description": "Page number for pagination. Defaults to 1."
        },
        "per_page": {
          "type": "integer",
          "description": "Number of results per page (1-100). Defaults to 100."
        },
        "include": {
          "type": "string",
          "description": "Side-load related data. Comma-separated list like \"users\", or \"users,organizations\"."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "show_attachment",
    "description": "Retrieves metadata about a specific attachment.\n\nThis function returns detailed information about an attachment including\nits content type, file name, size, URLs, and other metadata. The attachment\nmust exist in the system and not be marked as deleted.",
    "parameters": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "integer",
          "description": "The ID of the attachment to retrieve."
        }
      },
      "required": [
        "attachment_id"
      ]
    }
  },
  {
    "name": "show_ticket",
    "description": "Shows details of a specific ticket.\n\nReturns the details of a ticket based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier for the ticket."
        }
      },
      "required": [
        "ticket_id"
      ]
    }
  },
  {
    "name": "update_organization",
    "description": "Updates an existing organization.\n\nUpdates the details of an organization based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "integer",
          "description": "The unique identifier for the organization."
        },
        "name": {
          "type": "string",
          "description": "The new name of the organization. Defaults to None."
        },
        "domain_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of domain names associated with the organization. Defaults to None."
        },
        "external_id": {
          "type": "string",
          "description": "A unique external identifier for the organization. Defaults to None."
        },
        "group_id": {
          "type": "integer",
          "description": "The ID of the group that the organization belongs to. Defaults to None."
        },
        "notes": {
          "type": "string",
          "description": "Notes about the organization. Defaults to None."
        },
        "details": {
          "type": "string",
          "description": "Any details about the organization, such as the address. Defaults to None."
        },
        "shared_tickets": {
          "type": "boolean",
          "description": "Whether tickets from this organization are shared with other organizations. Defaults to None."
        },
        "shared_comments": {
          "type": "boolean",
          "description": "Whether end users in this organization can comment on each other's tickets. Defaults to None."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of tags associated with the organization. Defaults to None."
        },
        "organization_fields": {
          "type": "object",
          "properties": {},
          "description": "Custom fields for this organization. Defaults to None."
        }
      },
      "required": [
        "organization_id"
      ]
    }
  },
  {
    "name": "update_ticket",
    "description": "Updates an existing ticket.\n\nUpdates the details of a ticket based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "ticket_id": {
          "type": "integer",
          "description": "The unique identifier for the ticket."
        },
        "ticket_updates": {
          "type": "object",
          "properties": {
            "subject": {
              "type": "string",
              "description": "The new subject of the ticket. Must be a non-empty string if provided."
            },
            "comment_body": {
              "type": "string",
              "description": "The new body of the comment. Must be a non-empty string if provided."
            },
            "priority": {
              "type": "string",
              "description": "The new priority of the ticket. Must be one of: \"urgent\", \"high\", \"normal\", \"low\"."
            },
            "ticket_type": {
              "type": "string",
              "description": "The new type of the ticket. Must be one of: \"problem\", \"incident\", \"question\", \"task\"."
            },
            "status": {
              "type": "string",
              "description": "The new status of the ticket. Must be one of: \"new\", \"open\", \"pending\", \"hold\", \"solved\", \"closed\"."
            },
            "attribute_value_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "List of attribute value IDs for the ticket."
            },
            "custom_status_id": {
              "type": "integer",
              "description": "ID of the custom status for the ticket."
            },
            "requester": {
              "type": "string",
              "description": "Email or name of the requester."
            },
            "safe_update": {
              "type": "boolean",
              "description": "Whether to perform a safe update."
            },
            "ticket_form_id": {
              "type": "integer",
              "description": "ID of the ticket form."
            },
            "updated_stamp": {
              "type": "string",
              "description": "Timestamp for when the ticket was last updated."
            },
            "via_followup_source_id": {
              "type": "integer",
              "description": "ID of the via followup source."
            },
            "via_id": {
              "type": "integer",
              "description": "ID of the via channel."
            },
            "voice_comment": {
              "type": "object",
              "properties": {},
              "description": "Voice comment data for the ticket."
            }
          },
          "description": "Dictionary containing the fields to update.\nCan include any of the following optional fields:"
        }
      },
      "required": [
        "ticket_id",
        "ticket_updates"
      ]
    }
  },
  {
    "name": "update_user",
    "description": "Updates an existing user with comprehensive Zendesk API support.\n\nThis function allows you to update any combination of user fields for an existing user.\nOnly the fields you specify will be updated; all other fields remain unchanged.\nThe function automatically updates the `updated_at` timestamp when any field is modified.\n\nKey Features:\n- Partial updates: Only specified fields are updated\n- Comprehensive validation: All fields are validated according to Zendesk API standards\n- Automatic timestamp updates: `updated_at` is automatically set to current time\n- Flexible field combinations: Update any combination of fields in a single call\n\nValidation Rules:\n- String fields have length limits (e.g., name cannot be empty, details max 1000 chars)\n- Enum fields are validated against allowed values (e.g., role must be \"end-user\", \"agent\", or \"admin\")\n- Numeric IDs must be positive integers\n- Boolean fields must be actual boolean values\n- Tags are limited to 50 items, each under 50 characters",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "description": "The unique identifier for the user to update. Must be a positive integer."
        },
        "name": {
          "type": "string",
          "description": "The new name of the user. Must be a non-empty string."
        },
        "email": {
          "type": "string",
          "description": "The new email address of the user. Must be a valid email format."
        },
        "role": {
          "type": "string",
          "description": "The new role of the user. Must be one of: \"end-user\", \"agent\", \"admin\".\n- \"end-user\": Regular user with limited permissions\n- \"agent\": Support agent with ticket management capabilities\n- \"admin\": Administrator with full system access"
        },
        "organization_id": {
          "type": "integer",
          "description": "The new ID of the user's organization. Must be a positive integer."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The new list of tags for categorizing the user. \nMaximum 50 tags, each under 50 characters."
        },
        "photo": {
          "type": "object",
          "properties": {},
          "description": "The new user's profile picture as an Attachment object.\nShould contain fields like \"id\", \"filename\", \"content_type\", \"size\", \"url\"."
        },
        "details": {
          "type": "string",
          "description": "Any new details about the user. Maximum 1000 characters."
        },
        "default_group_id": {
          "type": "integer",
          "description": "The new ID of the user's default group. Must be a positive integer."
        },
        "alias": {
          "type": "string",
          "description": "A new alias displayed to end users. Maximum 100 characters."
        },
        "custom_role_id": {
          "type": "integer",
          "description": "A new custom role ID for Enterprise plan agents. Must be a positive integer."
        },
        "external_id": {
          "type": "string",
          "description": "A new unique identifier from another system. Maximum 255 characters."
        },
        "locale": {
          "type": "string",
          "description": "The new user's locale in BCP-47 format."
        },
        "locale_id": {
          "type": "integer",
          "description": "The new user's language identifier. Must be a positive integer."
        },
        "moderator": {
          "type": "boolean",
          "description": "Whether the user has forum moderation capabilities."
        },
        "notes": {
          "type": "string",
          "description": "Any new internal notes about the user. Maximum 1000 characters."
        },
        "only_private_comments": {
          "type": "boolean",
          "description": "Whether the user can only create private comments."
        },
        "phone": {
          "type": "string",
          "description": "The new user's primary phone number."
        },
        "remote_photo_url": {
          "type": "string",
          "description": "New URL pointing to the user's profile picture."
        },
        "restricted_agent": {
          "type": "boolean",
          "description": "Whether the agent has access restrictions."
        },
        "shared_phone_number": {
          "type": "boolean",
          "description": "Whether the phone number is shared."
        },
        "signature": {
          "type": "string",
          "description": "The new user's email signature (agents/admins only). Maximum 1000 characters."
        },
        "suspended": {
          "type": "boolean",
          "description": "Whether the user account is suspended."
        },
        "ticket_restriction": {
          "type": "string",
          "description": "Which tickets the user has access to. Must be one of:\n- \"organization\": Access to tickets in user's organization\n- \"groups\": Access to tickets in user's groups\n- \"assigned\": Access only to assigned tickets\n- \"requested\": Access only to requested tickets"
        },
        "time_zone": {
          "type": "string",
          "description": "The new user's time zone."
        },
        "verified": {
          "type": "boolean",
          "description": "Whether any user identity is verified."
        },
        "user_fields": {
          "type": "object",
          "properties": {},
          "description": "New values of custom fields in the user's profile."
        }
      },
      "required": [
        "user_id"
      ]
    }
  }
]