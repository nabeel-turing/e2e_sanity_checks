[
  {
    "name": "add_content_labels",
    "description": "Adds labels to a content item. If the content does not have existing labels,\n\na new entry is created. Returns the updated list of labels.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content to add labels to."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of labels to add."
        }
      },
      "required": [
        "id",
        "labels"
      ]
    }
  },
  {
    "name": "convert_content_body",
    "description": "Converts a content body from one format to another.",
    "parameters": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string",
          "description": "The target format to convert to. Valid values are:\n- \"view\": For viewing the content.\n- \"export_view\": For exporting the content.\n- \"editor\": For editing the content.\n- \"storage\": For storing the content."
        },
        "body": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The current content format type."
            },
            "value": {
              "type": "string",
              "description": "The actual content value."
            },
            "representation": {
              "type": "string",
              "description": "The current representation of the content."
            }
          },
          "description": "The content body to convert, containing:",
          "required": [
            "representation",
            "type",
            "value"
          ]
        }
      },
      "required": [
        "body",
        "to"
      ]
    }
  },
  {
    "name": "create_content",
    "description": "Creates new content.\n\nThis function creates a new content item (page, blogpost, comment, etc.) with the specified\ndetails and stores it in the database. It handles both basic content creation and special\ncases like comments with ancestor relationships.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Content type (e.g., 'page', 'blogpost', 'comment')"
            },
            "title": {
              "type": "string",
              "description": "Content title"
            },
            "spaceKey": {
              "type": "string",
              "description": "Space key where content will be created"
            },
            "status": {
              "type": "string",
              "description": "Content status (default: 'current')"
            },
            "version": {
              "type": "object",
              "description": "Content version object with 'number' key",
              "properties": {
                "number": {
                  "type": "integer",
                  "description": "Version number (default: 1)"
                },
                "minorEdit": {
                  "type": "boolean",
                  "description": "Flag indicating a minor edit (default: False)"
                }
              },
              "required": [
                "minorEdit",
                "number"
              ]
            },
            "body": {
              "type": "object",
              "description": "Content body with storage format, structured as:",
              "properties": {
                "storage": {
                  "type": "object",
                  "description": "A dictionary with:",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "The content value in storage format."
                    },
                    "representation": {
                      "type": "string",
                      "description": "The representation type (e.g., \"storage\")"
                    }
                  },
                  "required": [
                    "representation",
                    "value"
                  ]
                }
              },
              "required": [
                "storage"
              ]
            },
            "createdBy": {
              "type": "string",
              "description": "Username of the creator (default: 'unknown')"
            },
            "postingDay": {
              "type": "string",
              "description": "Posting day for blog posts in \"YYYY-MM-DD\" format"
            }
          },
          "description": "Dictionary containing content details\nRequired fields:",
          "required": [
            "body",
            "createdBy",
            "spaceKey",
            "status",
            "title",
            "type",
            "version"
          ]
        }
      },
      "required": [
        "body"
      ]
    }
  },
  {
    "name": "create_content_attachments",
    "description": "Creates new attachments for a specific content item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "file": {
          "type": "object",
          "description": "The file object to attach."
        },
        "comment": {
          "type": "string",
          "description": "A comment describing the attachment. Defaults to None."
        },
        "minorEdit": {
          "type": "boolean",
          "description": "Whether this is a minor edit. Defaults to False."
        }
      },
      "required": [
        "file",
        "id"
      ]
    }
  },
  {
    "name": "create_content_property",
    "description": "Creates a new property for a specified content item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content"
        },
        "body": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The property key"
            },
            "value": {
              "type": "object",
              "properties": {
                "some": {
                  "type": "string",
                  "description": "The property value"
                }
              },
              "description": "The property value, any key-value pair",
              "required": [
                "some"
              ]
            }
          },
          "description": "A JSON object containing the property key and value",
          "required": [
            "key",
            "value"
          ]
        }
      },
      "required": [
        "body",
        "id"
      ]
    }
  },
  {
    "name": "create_content_property_for_key",
    "description": "Creates a new content property for a specified key when the version is 1.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content."
        },
        "key": {
          "type": "string",
          "description": "The key for the property."
        },
        "body": {
          "type": "object",
          "properties": {},
          "description": "A JSON object representing the property, including version=1"
        }
      },
      "required": [
        "body",
        "id",
        "key"
      ]
    }
  },
  {
    "name": "create_private_space",
    "description": "Creates a new private space.\n\nThis function behaves identically to create_space and returns a new private space dictionary.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The unique identifier for the space."
            },
            "name": {
              "type": "string",
              "description": "The display name of the space."
            },
            "description": {
              "type": "string",
              "description": "An optional description of the space."
            }
          },
          "description": "A dictionary containing:",
          "required": [
            "key",
            "name"
          ]
        }
      },
      "required": [
        "body"
      ]
    }
  },
  {
    "name": "create_space",
    "description": "Creates a new space.\n\nCreates and returns a new space dictionary from the provided data.\nNote: If 'name' or 'description' are not provided in the body, Pydantic model\nvalidation ensures they default to an empty string.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The unique identifier for the space. (Mandatory)"
            },
            "name": {
              "type": "string",
              "description": "The display name of the space."
            },
            "description": {
              "type": "string",
              "description": "An optional description of the space, defaults to empty string"
            }
          },
          "description": "A dictionary containing:",
          "required": [
            "key",
            "name"
          ]
        }
      },
      "required": [
        "body"
      ]
    }
  },
  {
    "name": "delete_content",
    "description": "Deletes a content item from the system.\n\nThis function simulates the deletion of a content item based on its type and status,\nfollowing these cases:\n  1. If the status of the content is \"current\":\n     The content is trashed by updating its status to \"trashed\" (simulating a soft delete).\n  2. If the status of the content is \"trashed\", and the query parameter \"status\"\n     is set to \"trashed\":\n     The content is purged (permanently deleted) from the database.\n  3. If the content is not trashable (historical, draft, archived):\n     The content is immediately deleted permanently regardless of its status.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content to delete."
        },
        "status": {
          "type": "string",
          "description": "The query parameter \"status\" from the request.\nWhen set to \"trashed\" in the purge scenario, indicates that the content should be\npermanently deleted."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_content_labels",
    "description": "Deletes labels from a content item. If a specific label is provided,\n\nonly that label is deleted. Otherwise, all labels are deleted.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content from which labels should be deleted."
        },
        "label": {
          "type": "string",
          "description": "Optional specific label to delete."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_content_property",
    "description": "Deletes a property from a content item identified by its key.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content."
        },
        "key": {
          "type": "string",
          "description": "The key of the property to delete"
        }
      },
      "required": [
        "id",
        "key"
      ]
    }
  },
  {
    "name": "delete_space",
    "description": "Deletes a space and tracks the deletion task.\n\nDeletes the space identified by spaceKey and returns a task dictionary that tracks the deletion process.\nNote: The deletion task is simulated and marked as complete immediately.",
    "parameters": {
      "type": "object",
      "properties": {
        "spaceKey": {
          "type": "string",
          "description": "The unique identifier of the space to delete."
        }
      },
      "required": [
        "spaceKey"
      ]
    }
  },
  {
    "name": "get_content_attachments",
    "description": "Returns attachments for a specific content item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include.\nNot utilized in this simulation. Defaults to None."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Defaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of attachments to return. Defaults to 50."
        },
        "filename": {
          "type": "string",
          "description": "Filter attachments by filename. Defaults to None."
        },
        "mediaType": {
          "type": "string",
          "description": "Filter attachments by media type. Defaults to None."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_children",
    "description": "Returns a mapping of direct children content grouped by type.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the parent content."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include.\nThis parameter is not utilized in this simulation. Defaults to None."
        },
        "parentVersion": {
          "type": "integer",
          "description": "The version number of the parent content. This is included\nfor potential version-related logic, but is not used in the simulation. Defaults to 0."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_children_by_type",
    "description": "Returns direct children content of a specified type.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the parent content."
        },
        "child_type": {
          "type": "string",
          "description": "The type of child content to retrieve (e.g., \"page\", \"blogpost\", \"comment\", \"attachment\")."
        },
        "expand": {
          "type": "string",
          "description": "Additional fields to include in the result. Not used in this simulation.\nDefaults to None."
        },
        "parentVersion": {
          "type": "integer",
          "description": "The version of the parent content. Provided for potential future use; not used\nin this simulation. Defaults to 0."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Defaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of child content items to return. Defaults to 25."
        }
      },
      "required": [
        "child_type",
        "id"
      ]
    }
  },
  {
    "name": "get_content_comments",
    "description": "Returns the comments associated with a specific content item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include in the\nreturned comment objects. Not utilized in this simulation. Defaults to None."
        },
        "parentVersion": {
          "type": "integer",
          "description": "The version of the parent content. This parameter is provided for\ncompleteness but is not used in this simulation. Defaults to 0."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Defaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of comment objects to return. Defaults to 25."
        },
        "location": {
          "type": "string",
          "description": "An optional parameter to specify a location filter within the\ncontent hierarchy. Not used in this simulation. Defaults to None."
        },
        "depth": {
          "type": "string",
          "description": "An optional parameter to control the depth of comment retrieval.\nNot used in this simulation. Defaults to None."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_descendants",
    "description": "Returns all descendants of a content item, grouped by type.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include.\nNot used in this simulation."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of descendants to return per type."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_descendants_by_type",
    "description": "Returns descendants of a specific type for a content item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "type": {
          "type": "string",
          "description": "The type of descendants to retrieve (e.g., \"page\", \"blogpost\", \"comment\", \"attachment\")."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include.\nNot used in this simulation."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of descendants to return."
        }
      },
      "required": [
        "id",
        "type"
      ]
    }
  },
  {
    "name": "get_content_details",
    "description": "Retrieves content by its unique identifier.\n\nThis function fetches a content item from the database using its ID. It can optionally\nfilter the content by its status to ensure the content matches the expected state.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content to retrieve. Must be a non-empty string."
        },
        "status": {
          "type": "string",
          "description": "The expected status of the content. If provided,\nthe function will verify that the content's status matches this value.\nIf set to \"any\", the status check is bypassed. Must be a string if provided."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_history",
    "description": "Returns the history of a piece of content.\n\nThis method returns the metadata regarding creation and versioning for the content item\nidentified by the given id. It uses a global history store (DB[\"history\"]) that is updated\nwhenever content is created or updated. Each history record includes the version number,\ncreatedBy, createdDate, and lastUpdated timestamp.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the content."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to expand\n(e.g., \"previousVersion,nextVersion,lastUpdated\").\nThis parameter is not used to filter the output in this simulation."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_labels",
    "description": "Returns a paginated list of content labels. If a prefix is provided,\n\nit filters labels that start with the given prefix.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content to get labels for."
        },
        "prefix": {
          "type": "string",
          "description": "Optional prefix to filter labels by."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Must be non-negative."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of labels to return. Must be positive."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_list",
    "description": "Returns a paginated list of content filtered by the specified parameters.\n\nThis function retrieves all content from the database and applies filters based\non the provided arguments. The results are paginated using the start and limit parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of content (e.g., \"page\", \"blogpost\", \"comment\").\nOnly content matching this type is returned. If None, no filtering is applied."
        },
        "spaceKey": {
          "type": "string",
          "description": "The key of the space in which the content is located.\nOnly content in the specified space is returned."
        },
        "title": {
          "type": "string",
          "description": "The title of the content. Filters to content with a matching title. Required if type is \"page\"."
        },
        "status": {
          "type": "string",
          "description": "The status of the content (e.g., \"current\", \"trashed\", or \"any\").\nDefaults to \"current\". If explicitly set to None, it's treated like \"current\" by the core logic.\nIf \"any\", the status filter is ignored."
        },
        "postingDay": {
          "type": "string",
          "description": "The posting day of the content. This filter is only applied\nif the content type is \"blogpost\". Format: yyyy-mm-dd. Example: \"2024-01-01\"."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include in the\nreturned content objects. Supported values:\n- space: Expands the space field with space key\n- version: Expands the version information\n- history: Expands the content history"
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Defaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of results to return. Defaults to 25."
        }
      }
    }
  },
  {
    "name": "get_content_properties",
    "description": "Returns a paginated list of content properties for the specified content.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content"
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of properties to expand"
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination"
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of properties to return"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_property_details",
    "description": "Retrieves a specific property of a content item by its key.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content"
        },
        "key": {
          "type": "string",
          "description": "The key of the property to retrieve"
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list to expand property details.\nSupported values: 'version', 'content'"
        }
      },
      "required": [
        "id",
        "key"
      ]
    }
  },
  {
    "name": "get_content_restrictions_by_operation",
    "description": "Retrieves all restrictions for a content item, grouped by operation type.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content item."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include.\nThis parameter is not utilized in this simulation. Defaults to None."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_content_restrictions_for_operation",
    "description": "Retrieves restrictions for a specific operation on a content item.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content item."
        },
        "operationKey": {
          "type": "string",
          "description": "The operation type (e.g., \"read\" or \"update\")."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of additional fields to include.\nThis parameter is not utilized in this simulation. Defaults to None."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Defaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of results to return. Defaults to 100."
        }
      },
      "required": [
        "id",
        "operationKey"
      ]
    }
  },
  {
    "name": "get_long_task_details",
    "description": "Returns a specific long-running task by its ID.\n\nRetrieves the long-running task dictionary that matches the provided task ID.\nNote: The 'expand' parameter is accepted for API compatibility but is not currently processed.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the task."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of properties to expand.\nDefaults to None."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_long_tasks",
    "description": "Returns a paginated list of all long-running tasks.\n\nRetrieves a list of task dictionaries for all long-running tasks.\nNote: The 'expand' parameter is accepted for API compatibility but is not currently processed.",
    "parameters": {
      "type": "object",
      "properties": {
        "expand": {
          "type": "string",
          "description": "A comma-separated list of properties to expand.\nDefaults to None.\nNote: Not implemented."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination.\nDefaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of tasks to return.\nDefaults to 100."
        }
      }
    }
  },
  {
    "name": "get_space_content",
    "description": "Retrieves the content within a specific space.\n\nReturns a list of content item dictionaries for the space identified by spaceKey.\nNote: The 'depth' and 'expand' parameters are included for API compatibility but are not fully implemented.",
    "parameters": {
      "type": "object",
      "properties": {
        "spaceKey": {
          "type": "string",
          "description": "The unique identifier of the space. Must be a non-empty string."
        },
        "depth": {
          "type": "string",
          "description": "The depth of content to retrieve. Defaults to None."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of properties to expand. Defaults to None."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination.\nDefaults to 0. Must be a non-negative integer."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of content items to return.\nDefaults to 25. Must be a positive integer."
        }
      },
      "required": [
        "spaceKey"
      ]
    }
  },
  {
    "name": "get_space_content_by_type",
    "description": "Retrieves content of a specific type within a space.\n\nReturns a list of content item dictionaries matching the specified type for the given spaceKey.\nNote: The function first retrieves all content for the space and then filters by type.\n      The 'depth' and 'expand' parameters are accepted for API compatibility but are not fully implemented.",
    "parameters": {
      "type": "object",
      "properties": {
        "spaceKey": {
          "type": "string",
          "description": "The unique identifier of the space."
        },
        "depth": {
          "type": "string",
          "description": "The depth of content to retrieve. Defaults to None."
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of properties to expand. Defaults to None."
        },
        "type": {
          "type": "string",
          "description": "The type of content to filter (e.g., \"page\", \"blogpost\")."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination after filtering.\nDefaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of content items to return after filtering.\nDefaults to 25."
        }
      },
      "required": [
        "spaceKey",
        "type"
      ]
    }
  },
  {
    "name": "get_space_details",
    "description": "Retrieves details about a specific space.\n\nReturns the space dictionary for the provided spaceKey.",
    "parameters": {
      "type": "object",
      "properties": {
        "spaceKey": {
          "type": "string",
          "description": "The unique identifier of the space."
        }
      },
      "required": [
        "spaceKey"
      ]
    }
  },
  {
    "name": "get_spaces",
    "description": "Returns a paginated list of all spaces.\n\nRetrieves a list of space dictionaries for the provided parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "spaceKey": {
          "type": "string",
          "description": "A unique identifier to filter spaces by.\nDefaults to None."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination.\nDefaults to 0."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of spaces to return.\nDefaults to 25."
        }
      }
    }
  },
  {
    "name": "search_content",
    "description": "Search for content based on a CQL query.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The CQL query to search for"
        },
        "expand": {
          "type": "string",
          "description": "A comma-separated list of properties to expand"
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination (default: 0)"
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of results to return (default: 100)"
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_content_cql",
    "description": "Searches for content using Confluence Query Language (CQL) with pagination support.\n\nThis function performs a search across all content items using the provided CQL query.\nIt supports complex queries with logical operators and field comparisons, and returns\npaginated results.",
    "parameters": {
      "type": "object",
      "properties": {
        "cql": {
          "type": "string",
          "description": "The Confluence Query Language (CQL) string for the search.\nFor example: `cql=\"type='page' AND space='TEST' AND title~'Urgent'\"`.\nSupported fields and operators:\n- `type`: Filters by the type of content (e.g., 'page', 'blogpost', 'comment').\n    - Operators: `=`, `!=`\n    - Example: `type='page'`\n- `space`/`spaceKey`: Filters by the space the content belongs to.\n    - Operators: `=`, `!=`\n    - Example: `space='MYSPACE'`\n- `title`: Filters by content title.\n    - Operators: `=`, `!=`, `~` (contains), `!~` (does not contain)\n    - Example: `title~'Meeting Notes'`\n- `status`: Filters by content status.\n    - Operators: `=`, `!=`\n    - Example: `status='current'`\n- `ancestor`: Filters by a specific parent page ID.\n    - Operators: `=`\n    - Example: `ancestor=12345`\n- `label`: Filters by a label on the content.\n    - Operators: `=`, `!=`\n    - Example: `label='official-docs'`\n- `creator`: Filters by the user who created the content.\n    - Operators: `=`, `!=`\n    - Example: `creator='jsmith'`\nLogical operators `AND`, `OR`, `NOT` and parentheses `()` can be used to combine expressions."
        },
        "start": {
          "type": "integer",
          "description": "The starting index for pagination. Defaults to 0. Must be non-negative."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of results to return. Defaults to 25. Must be non-negative."
        }
      },
      "required": [
        "cql"
      ]
    }
  },
  {
    "name": "update_attachment_data",
    "description": "Updates the binary data of an existing attachment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "attachmentId": {
          "type": "string",
          "description": "The unique identifier of the attachment to update."
        },
        "file": {
          "type": "object",
          "description": "The new file object to replace the existing attachment."
        },
        "comment": {
          "type": "string",
          "description": "A comment describing the update."
        },
        "minorEdit": {
          "type": "boolean",
          "description": "Whether this is a minor edit."
        }
      },
      "required": [
        "attachmentId",
        "file",
        "id"
      ]
    }
  },
  {
    "name": "update_attachment_metadata",
    "description": "Updates the metadata of an existing attachment.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the parent content."
        },
        "attachmentId": {
          "type": "string",
          "description": "The unique identifier of the attachment to update."
        },
        "body": {
          "type": "object",
          "properties": {},
          "description": "The updated metadata for the attachment."
        }
      },
      "required": [
        "attachmentId",
        "body",
        "id"
      ]
    }
  },
  {
    "name": "update_content",
    "description": "Updates existing content.\n\nThis function updates an existing content item with new values.\nVersioning is managed automatically: the version is incremented by one (defaulting to 1 if no version is set).\nThe update payload should not include a version object (any provided version data is ignored).\n\nSpecial behavior:\n  - **Restoring a trashed page:**\n    To restore content that is \"trashed\", the update request must set its status to \"current\". In that case,\n    only the version is incremented and the status updated to \"current\". No other fields are modified.\n  - **Deleting a draft:**\n    If the update is intended to delete a draft (signaled by `query_status=\"draft\"`), then the draft is removed and\n    the content's body is replaced with the provided body. (Updating a draft is not supported.)",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the content to update."
        },
        "body": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "New content title."
            },
            "status": {
              "type": "string",
              "description": "New content status."
            },
            "body": {
              "type": "object",
              "description": "New content body."
            },
            "space": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Space key."
                }
              },
              "description": "New space object containing a \"key\" field.",
              "required": [
                "key"
              ]
            },
            "ancestors": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of ancestor IDs."
            }
          },
          "description": "Dictionary containing updated content details.\nOptional fields:",
          "required": [
            "ancestors",
            "body",
            "space",
            "status",
            "title"
          ]
        }
      },
      "required": [
        "body",
        "id"
      ]
    }
  },
  {
    "name": "update_content_property",
    "description": "Updates an existing content property with a new value and an incremented version.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the content"
        },
        "key": {
          "type": "string",
          "description": "The key of the property to update"
        },
        "body": {
          "type": "object",
          "properties": {},
          "description": "A JSON object containing the updated property value and new version"
        }
      },
      "required": [
        "body",
        "id",
        "key"
      ]
    }
  },
  {
    "name": "update_space",
    "description": "Updates an existing space.\n\nUpdates and returns a space dictionary for the space specified by spaceKey.",
    "parameters": {
      "type": "object",
      "properties": {
        "spaceKey": {
          "type": "string",
          "description": "The unique identifier of the space to update."
        },
        "body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The new display name of the space."
            },
            "description": {
              "type": "string",
              "description": "The new description of the space."
            }
          },
          "description": "A dictionary containing the fields to update:",
          "required": [
            "description",
            "name"
          ]
        }
      },
      "required": [
        "body",
        "spaceKey"
      ]
    }
  }
]