[
  {
    "name": "get_place_autocomplete_predictions",
    "description": "Simulates returning autocomplete predictions for a given input query.",
    "parameters": {
      "type": "object",
      "properties": {
        "request_data": {
          "type": "object",
          "properties": {
            "input": {
              "type": "string",
              "description": "The text entered by the user to generate predictions."
            },
            "inputOffset": {
              "type": "integer",
              "description": "Offset from the beginning of the input string to interpret for prediction."
            },
            "languageCode": {
              "type": "string",
              "description": "Preferred language for prediction results."
            },
            "regionCode": {
              "type": "string",
              "description": "Unicode region code to influence results."
            },
            "sessionToken": {
              "type": "string",
              "description": "Token used for session-scoped billing and grouping."
            },
            "includeQueryPredictions": {
              "type": "boolean",
              "description": "Whether to include predictions that complete the entire query."
            },
            "includePureServiceAreaBusinesses": {
              "type": "boolean",
              "description": "Whether to include service-area-only businesses."
            },
            "includedPrimaryTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of place types to restrict the predictions to."
            },
            "includedRegionCodes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Restrict results to these CLDR region codes."
            },
            "origin": {
              "type": "object",
              "properties": {},
              "description": "Geographic location of the user.\n    - latitude (float)\n    - longitude (float)"
            },
            "locationRestriction": {
              "type": "object",
              "properties": {
                "circle": {
                  "type": "object",
                  "properties": {
                    "radius": {
                      "type": "number",
                      "description": "Radius of the restriction in meters."
                    }
                  },
                  "description": "",
                  "required": [
                    "radius"
                  ]
                }
              },
              "description": "Restricts predictions to a circular area.",
              "required": [
                "circle"
              ]
            }
          },
          "description": "Input parameters for the autocomplete request.",
          "required": [
            "input"
          ]
        }
      },
      "required": [
        "request_data"
      ]
    }
  },
  {
    "name": "get_place_details",
    "description": "Retrieves detailed information about a place using its resource name.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The resource name of the place in the format \"places/{place_id}\"."
        },
        "languageCode": {
          "type": "string",
          "description": "Preferred language for localized content if available."
        },
        "sessionToken": {
          "type": "string",
          "description": "Autocomplete session token for billing. Must be base64-safe and <= 36 ASCII chars."
        },
        "regionCode": {
          "type": "string",
          "description": "Unicode CLDR region code to influence localized place details."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "get_place_photo_media",
    "description": "Retrieves photo media by resource name.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource name of a photo, formatted as\n\"places/{place_id}/photos/{photo_reference}/media\". (Required)"
        },
        "maxWidthPx": {
          "type": "integer",
          "description": "The maximum desired photo width (range 1–4800)."
        },
        "maxHeightPx": {
          "type": "integer",
          "description": "The maximum desired photo height (range 1–4800)."
        },
        "skipHttpRedirect": {
          "type": "boolean",
          "description": "If True, skips HTTP redirects and returns JSON data. Defaults to False."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "search_nearby_places",
    "description": "Searches for places in the static database based on provided filters.\n\nFilters can include primary types, secondary types (included or excluded),\na specific language code for the display name, and a geographical\nlocation restriction with a center point and a radius.",
    "parameters": {
      "type": "object",
      "properties": {
        "request": {
          "type": "object",
          "properties": {
            "includedPrimaryTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Only return places that have at least one of these primary types. Primary types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
            },
            "excludedPrimaryTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Do not return places that have any of these primary types. Primary types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
            },
            "includedTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Only return places that have at least one of these types (primary or secondary). Types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
            },
            "excludedTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Do not return places that have any of these types (primary or secondary). Types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
            },
            "languageCode": {
              "type": "string",
              "description": "The preferred language for the displayName. If provided, only places with a displayName in this language will be returned."
            },
            "locationRestriction": {
              "type": "object",
              "properties": {
                "circle": {
                  "type": "object",
                  "properties": {},
                  "description": "Defines the circle."
                },
                "center": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "description": "The latitude of the center point."
                    },
                    "longitude": {
                      "type": "number",
                      "description": "The longitude of the center point."
                    }
                  },
                  "description": "The center of the circle.",
                  "required": [
                    "latitude",
                    "longitude"
                  ]
                },
                "radius": {
                  "type": "number",
                  "description": "The radius of the circle in meters."
                }
              },
              "description": "Limits the search to a circular area.",
              "required": [
                "center",
                "radius"
              ]
            },
            "maxResultCount": {
              "type": "integer",
              "description": "The maximum number of places to return.\n    Defaults to 20."
            },
            "regionCode": {
              "type": "string",
              "description": "Unicode country/region code of the request origin."
            },
            "rankPreference": {
              "type": "string",
              "description": "Specifies the ranking of the results.\n    One of:\n    - \"RANK_PREFERENCE_UNSPECIFIED\"\n    - \"DISTANCE\"\n    - \"POPULARITY\""
            },
            "routingParameters": {
              "type": "object",
              "properties": {
                "routingPreference": {
                  "type": "string",
                  "description": "Specifies how to compute routing summaries.\n        One of:\n        - \"ROUTING_PREFERENCE_UNSPECIFIED\": No routing preference specified. Defaults to `TRAFFIC_UNAWARE`.\n        - \"TRAFFIC_UNAWARE\": Ignores live traffic conditions. Optimized for lowest latency.\n        - \"TRAFFIC_AWARE\": Considers live traffic, but includes some performance optimizations.\n        - \"TRAFFIC_AWARE_OPTIMAL\": Fully considers live traffic without optimizations (highest latency)."
                },
                "routeModifiers": {
                  "type": "object",
                  "properties": {
                    "avoidFerries": {
                      "type": "boolean",
                      "description": "Avoid ferries when possible."
                    },
                    "avoidTolls": {
                      "type": "boolean",
                      "description": "Avoid toll roads when possible."
                    },
                    "avoidIndoor": {
                      "type": "boolean",
                      "description": "Avoid indoor navigation when possible."
                    },
                    "avoidHighways": {
                      "type": "boolean",
                      "description": "Avoid highways when possible."
                    }
                  },
                  "description": "Conditions to avoid in routing."
                },
                "origin": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "description": "Latitude in degrees. Range: [-90.0, +90.0]."
                    },
                    "longitude": {
                      "type": "number",
                      "description": "Longitude in degrees. Range: [-180.0, +180.0]."
                    }
                  },
                  "description": "Overrides the polyline origin.",
                  "required": [
                    "latitude",
                    "longitude"
                  ]
                },
                "travelMode": {
                  "type": "string",
                  "description": "Specifies the mode of travel.\n        One of:\n        - \"TRAVEL_MODE_UNSPECIFIED\": No travel mode specified. Defaults to `DRIVE`.\n        - \"DRIVE\": Travel by passenger car.\n        - \"BICYCLE\": Travel by bicycle. Not supported with `search_along_route_parameters`.\n        - \"WALK\": Travel by walking. Not supported with `search_along_route_parameters`.\n        - \"TWO_WHEELER\": Motorized two-wheeled vehicles like scooters or motorcycles. Only supported in specific countries."
                }
              },
              "description": "Parameters to configure routing calculations."
            }
          },
          "description": "A dictionary containing the search parameters.\nExpected keys:"
        }
      },
      "required": [
        "request"
      ]
    }
  },
  {
    "name": "search_places_by_text",
    "description": "Performs a text-based search for places using optional filters.\n\nThis function processes a search request structured according to the\nGoogleMapsPlacesV1SearchTextRequest schema. Supported filters include:\n'strictTypeFiltering', 'priceLevels', 'locationBias', 'openNow',\n'minRating', 'includePureServiceAreaBusinesses', 'locationRestriction',\n'languageCode', 'pageSize', 'regionCode', 'textQuery', and others.",
    "parameters": {
      "type": "object",
      "properties": {
        "request": {
          "type": "object",
          "properties": {
            "textQuery": {
              "type": "string",
              "description": "Required text query to search for."
            },
            "pageSize": {
              "type": "integer",
              "description": "Max number of results."
            },
            "maxResultCount": {
              "type": "integer",
              "description": "Alternate to pageSize."
            },
            "strictTypeFiltering": {
              "type": "boolean",
              "description": "If true, only places whose primaryType exactly matches includedType will be returned. Defaults to false."
            },
            "includedType": {
              "type": "string",
              "description": "Used in conjunction with `strictTypeFiltering=true`. Only return places that have at least one of these types (primary or secondary). Types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
            },
            "priceLevels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by the specified price levels.\n    Allowed values include:\n    - PRICE_LEVEL_UNSPECIFIED\n    - PRICE_LEVEL_FREE\n    - PRICE_LEVEL_INEXPENSIVE\n    - PRICE_LEVEL_MODERATE\n    - PRICE_LEVEL_EXPENSIVE\n    - PRICE_LEVEL_VERY_EXPENSIVE"
            },
            "locationBias": {
              "type": "object",
              "properties": {
                "circle": {
                  "type": "object",
                  "properties": {
                    "center": {
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "description": "The center’s latitude."
                        },
                        "longitude": {
                          "type": "number",
                          "description": "The center’s longitude."
                        }
                      },
                      "description": "Required. The center point of the circle.",
                      "required": [
                        "latitude",
                        "longitude"
                      ]
                    },
                    "radius": {
                      "type": "number",
                      "description": "Required. Radius in meters. Only places within this circle are returned."
                    }
                  },
                  "description": "A circular geographic area.",
                  "required": [
                    "center",
                    "radius"
                  ]
                },
                "rectangle": {
                  "type": "object",
                  "properties": {
                    "viewport": {
                      "type": "object",
                      "properties": {
                        "low": {
                          "type": "object",
                          "properties": {
                            "latitude": {
                              "type": "number",
                              "description": "Latitude of the southwest corner."
                            },
                            "longitude": {
                              "type": "number",
                              "description": "Longitude of the southwest corner."
                            }
                          },
                          "description": "Required. Southwest point of the viewport.",
                          "required": [
                            "latitude",
                            "longitude"
                          ]
                        },
                        "high": {
                          "type": "object",
                          "properties": {
                            "latitude": {
                              "type": "number",
                              "description": "Latitude of the northeast corner."
                            },
                            "longitude": {
                              "type": "number",
                              "description": "Longitude of the northeast corner."
                            }
                          },
                          "description": "Required. Northeast point of the viewport.",
                          "required": [
                            "latitude",
                            "longitude"
                          ]
                        }
                      },
                      "description": "Required. The bounding box of the rectangle.",
                      "required": [
                        "high",
                        "low"
                      ]
                    }
                  },
                  "description": "A rectangular geographic area.",
                  "required": [
                    "viewport"
                  ]
                }
              },
              "description": "A geographic “bias” that influences result ordering.\n    One of:"
            },
            "openNow": {
              "type": "boolean",
              "description": "If true, only return places that are currently open. Defaults to false."
            },
            "minRating": {
              "type": "number",
              "description": "If provided, only return places with a rating greater than or equal to the specified value."
            },
            "pageToken": {
              "type": "string",
              "description": "Used for pagination. If provided, returns the next set of results following a previous search."
            },
            "includePureServiceAreaBusinesses": {
              "type": "boolean",
              "description": "If false, exclude places that are pure service area businesses. Defaults to true."
            },
            "locationRestriction": {
              "type": "object",
              "properties": {
                "circle": {
                  "type": "object",
                  "properties": {},
                  "description": "Defines the circle."
                },
                "center": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "description": "The latitude of the center point."
                    },
                    "longitude": {
                      "type": "number",
                      "description": "The longitude of the center point."
                    }
                  },
                  "description": "The center of the circle.",
                  "required": [
                    "latitude",
                    "longitude"
                  ]
                },
                "radius": {
                  "type": "number",
                  "description": "The radius of the circle in meters."
                }
              },
              "description": "Limits the\n    search to a circular area.",
              "required": [
                "center",
                "radius"
              ]
            },
            "languageCode": {
              "type": "string",
              "description": "The preferred language for the displayName. If provided, only places with a displayName in this language will be returned."
            },
            "regionCode": {
              "type": "string",
              "description": "Unicode country/region code of the request origin."
            },
            "searchAlongRouteParameters": {
              "type": "object",
              "properties": {
                "polyline": {
                  "type": "object",
                  "properties": {
                    "encodedPolyline": {
                      "type": "string",
                      "description": "An encoded polyline string representing the route, as defined by the [Google Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)."
                    }
                  },
                  "description": "Required. Defines the route polyline.",
                  "required": [
                    "encodedPolyline"
                  ]
                }
              },
              "description": "Specifies a precalculated polyline route used to bias place search results along a path, rather than in a general area like `locationBias` or `locationRestriction`.",
              "required": [
                "polyline"
              ]
            },
            "evOptions": {
              "type": "object",
              "properties": {
                "connectorTypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of preferred EV connector types. Places without any of the specified connectors are excluded. Valid values include:\n        - \"EV_CONNECTOR_TYPE_UNSPECIFIED\": Unspecified connector.\n        - \"EV_CONNECTOR_TYPE_OTHER\": Other connector types.\n        - \"EV_CONNECTOR_TYPE_J1772\": J1772 type 1 connector.\n        - \"EV_CONNECTOR_TYPE_TYPE_2\": IEC 62196 type 2 connector (MENNEKES).\n        - \"EV_CONNECTOR_TYPE_CHADEMO\": CHAdeMO connector.\n        - \"EV_CONNECTOR_TYPE_CCS_COMBO_1\": Combined Charging System, type-1 J-1772.\n        - \"EV_CONNECTOR_TYPE_CCS_COMBO_2\": Combined Charging System, type-2 Mennekes.\n        - \"EV_CONNECTOR_TYPE_TESLA\": Generic Tesla connector. May vary by region (e.g., NACS, CCS2, GB/T).\n        - \"EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T\": GB/T standard connector (China).\n        - \"EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET\": Unspecified wall outlet.\n        - \"EV_CONNECTOR_TYPE_NACS\": North American Charging System (NACS), SAE J3400 standard."
                },
                "minimumChargingRateKw": {
                  "type": "number",
                  "description": "Minimum charging rate in kilowatts. Filters out places with a lower charging rate."
                }
              },
              "description": "Electric vehicle (EV) filtering options for the search."
            },
            "routingParameters": {
              "type": "object",
              "properties": {
                "routingPreference": {
                  "type": "string",
                  "description": "Specifies how to compute routing summaries.\n        One of:\n        - \"ROUTING_PREFERENCE_UNSPECIFIED\": No routing preference specified. Defaults to `TRAFFIC_UNAWARE`.\n        - \"TRAFFIC_UNAWARE\": Ignores live traffic conditions. Optimized for lowest latency.\n        - \"TRAFFIC_AWARE\": Considers live traffic, but includes some performance optimizations.\n        - \"TRAFFIC_AWARE_OPTIMAL\": Fully considers live traffic without optimizations (highest latency)."
                },
                "routeModifiers": {
                  "type": "object",
                  "properties": {
                    "avoidFerries": {
                      "type": "boolean",
                      "description": "Avoid ferries when possible."
                    },
                    "avoidTolls": {
                      "type": "boolean",
                      "description": "Avoid toll roads when possible."
                    },
                    "avoidIndoor": {
                      "type": "boolean",
                      "description": "Avoid indoor navigation when possible."
                    },
                    "avoidHighways": {
                      "type": "boolean",
                      "description": "Avoid highways when possible."
                    }
                  },
                  "description": "Conditions to avoid in routing."
                },
                "origin": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "number",
                      "description": "Latitude in degrees. Range: [-90.0, +90.0]."
                    },
                    "longitude": {
                      "type": "number",
                      "description": "Longitude in degrees. Range: [-180.0, +180.0]."
                    }
                  },
                  "description": "Overrides the polyline origin.",
                  "required": [
                    "latitude",
                    "longitude"
                  ]
                },
                "travelMode": {
                  "type": "string",
                  "description": "Specifies the mode of travel.\n        One of:\n        - \"TRAVEL_MODE_UNSPECIFIED\": No travel mode specified. Defaults to `DRIVE`.\n        - \"DRIVE\": Travel by passenger car.\n        - \"BICYCLE\": Travel by bicycle. Not supported with `search_along_route_parameters`.\n        - \"WALK\": Travel by walking. Not supported with `search_along_route_parameters`.\n        - \"TWO_WHEELER\": Motorized two-wheeled vehicles like scooters or motorcycles. Only supported in specific countries."
                }
              },
              "description": "Parameters to configure routing calculations."
            },
            "rankPreference": {
              "type": "string",
              "description": "Specifies the ranking of the results.\n    One of:\n    - \"RANK_PREFERENCE_UNSPECIFIED\"\n    - \"DISTANCE\"\n    - \"POPULARITY\""
            }
          },
          "description": "Dictionary with the following keys:",
          "required": [
            "textQuery"
          ]
        }
      },
      "required": [
        "request"
      ]
    }
  }
]