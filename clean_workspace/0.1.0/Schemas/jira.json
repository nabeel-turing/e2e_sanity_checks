[
  {
    "name": "add_attachment",
    "description": "Add an attachment to an issue from a file path.\n\nCreates a new attachment associated with the specified issue by reading\na file from the filesystem. Automatically handles MIME type detection,\nfile size validation, encoding, and checksum generation. The attachment\nis stored in the database with full metadata and the issue is updated\nto reference the new attachment.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_id_or_key": {
          "type": "string",
          "description": "The unique identifier or key of the target issue.\nMust be a non-empty string that exists in the database."
        },
        "file_path": {
          "type": "string",
          "description": "Filesystem path to the file to attach. The file will\nbe read from disk and the filename will be extracted from the path.\n    "
        }
      },
      "required": [
        "file_path",
        "issue_id_or_key"
      ]
    }
  },
  {
    "name": "assign_issue_to_user",
    "description": "Assign an issue to a user.\n\nThis method assigns an issue to a specific user. The assignee can be\na user or can be set to null to unassign the issue (handled by how 'assignee' dict is populated).",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "description": "The unique identifier of the issue to assign."
        },
        "assignee": {
          "type": "object",
          "description": "The assignee information. Must contain:",
          "properties": {
            "name": {
              "type": "string",
              "description": "The assignee's username (e.g., 'jdoe')."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "assignee",
        "issue_id"
      ]
    }
  },
  {
    "name": "bulk_delete_issues",
    "description": "Delete multiple issues in bulk.\n\nThis method allows deleting multiple issues in a single operation.\nThe operation will continue even if some issues cannot be deleted.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of issue IDs to delete"
        }
      },
      "required": [
        "issue_ids"
      ]
    }
  },
  {
    "name": "create_group",
    "description": "Create a new group.\n\nThis method creates a new group with the specified name. The group\nwill initially have no members.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group to create."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "create_issue",
    "description": "Create a new issue in Jira.\n\nThis method creates a new issue with the specified fields. The issue will be\nassigned a unique ID and stored in the system.",
    "parameters": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "properties": {
            "project": {
              "type": "string",
              "description": "The project key the issue belongs to"
            },
            "summary": {
              "type": "string",
              "description": "A brief description of the issue"
            },
            "description": {
              "type": "string",
              "description": "A detailed description of the issue"
            },
            "issuetype": {
              "type": "string",
              "description": "The type of issue"
            },
            "priority": {
              "type": "string",
              "description": "The priority of the issue"
            },
            "status": {
              "type": "string",
              "description": "The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)"
            },
            "assignee": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The assignee's username (e.g., 'jdoe')"
                }
              },
              "description": "The user assigned to the issue in dictionary format. Example: {\"name\": \"jdoe\"}",
              "required": [
                "name"
              ]
            }
          },
          "description": "A dictionary containing the issue fields. Required fields include:",
          "required": [
            "assignee",
            "description",
            "issuetype",
            "priority",
            "project",
            "status",
            "summary"
          ]
        }
      },
      "required": [
        "fields"
      ]
    }
  },
  {
    "name": "create_issue_link",
    "description": "Create a new issue link in Jira.\n\nThis method creates a new issue link between two issues. The link will be\nassigned a unique ID and stored in the system. Both issues must exist in\nthe database for the link to be created successfully.",
    "parameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of issue link to create. Must be a non-empty string."
        },
        "inwardIssue": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the inward issue. Must be a non-empty string."
            }
          },
          "description": "The inward issue reference containing:",
          "required": [
            "key"
          ]
        },
        "outwardIssue": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the outward issue. Must be a non-empty string."
            }
          },
          "description": "The outward issue reference containing:",
          "required": [
            "key"
          ]
        }
      },
      "required": [
        "inwardIssue",
        "outwardIssue",
        "type"
      ]
    }
  },
  {
    "name": "create_issue_type",
    "description": "Create a new issue type in Jira.\n\nThis method creates a new issue type with the specified name and description.\nThe issue type will be assigned a unique ID and stored in the system.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the issue type. Cannot be empty."
        },
        "description": {
          "type": "string",
          "description": "The description of the issue type. Cannot be empty."
        },
        "type": {
          "type": "string",
          "description": "The type of issue type to create (default is \"standard\").\nExpected values are \"standard\" or \"subtask\". \nAny other value provided is treated as \"standard\" by the code."
        }
      },
      "required": [
        "description",
        "name"
      ]
    }
  },
  {
    "name": "create_or_get_webhooks",
    "description": "Create or get webhooks.",
    "parameters": {
      "type": "object",
      "properties": {
        "webhooks": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "The webhooks to create or get."
        }
      },
      "required": [
        "webhooks"
      ]
    }
  },
  {
    "name": "create_project",
    "description": "Create a new project.\n\nThis method creates a new project with the given key and name.",
    "parameters": {
      "type": "object",
      "properties": {
        "proj_key": {
          "type": "string",
          "description": "The key of the project. Cannot be empty."
        },
        "proj_name": {
          "type": "string",
          "description": "The name of the project. Cannot be empty."
        },
        "proj_lead": {
          "type": "string",
          "description": "The name of the project lead. Must be a valid user name if provided."
        }
      },
      "required": [
        "proj_key",
        "proj_name"
      ]
    }
  },
  {
    "name": "create_project_component",
    "description": "Create a new component in a Jira project.\n\nThis method creates a new component within a specified project. Components\nare used to group issues within a project and can be assigned to specific\nteam members.",
    "parameters": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "The key of the project where the component will be created.\nMust be a non-empty string."
        },
        "name": {
          "type": "string",
          "description": "The name of the component.\nMust be a non-empty string with a maximum length of 255 characters."
        },
        "description": {
          "type": "string",
          "description": "A description of the component's purpose.\nMaximum length is 1000 characters. None if not provided."
        }
      },
      "required": [
        "name",
        "project"
      ]
    }
  },
  {
    "name": "create_user",
    "description": "Create a new user with all required fields.\n\nThis function validates the input payload to ensure it contains the necessary\nuser details and that the email is not already in use. On success, it\npopulates a user object with a mix of provided data and sensible defaults.",
    "parameters": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username for the new user. (Required)"
            },
            "emailAddress": {
              "type": "string",
              "description": "The user's primary email address. (Required)"
            },
            "displayName": {
              "type": "string",
              "description": "The name to display in the UI. (Required)"
            },
            "profile": {
              "type": "object",
              "properties": {
                "bio": {
                  "type": "string",
                  "description": "The user's biography."
                },
                "joined": {
                  "type": "string",
                  "description": "The date the user joined."
                }
              },
              "description": "A dictionary for profile info."
            },
            "groups": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of group names."
            },
            "drafts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique ID of the draft."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of the draft."
                  },
                  "body": {
                    "type": "string",
                    "description": "The content of the draft."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "The creation timestamp of the draft."
                  }
                },
                "required": [
                  "body",
                  "id",
                  "subject",
                  "timestamp"
                ]
              },
              "description": "A list of draft objects.\n    - Each object is a dict with the keys:"
            },
            "messages": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique ID of the message."
                  },
                  "from": {
                    "type": "string",
                    "description": "The sender's email address."
                  },
                  "to": {
                    "type": "string",
                    "description": "The recipient's email address."
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject of the message."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "The timestamp of the message."
                  }
                },
                "required": [
                  "from",
                  "id",
                  "subject",
                  "timestamp",
                  "to"
                ]
              },
              "description": "A list of message objects.\n    - Each object is a dict with the keys:"
            },
            "threads": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique ID of the thread."
                  },
                  "messageIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of message IDs in the thread."
                  }
                },
                "required": [
                  "id",
                  "messageIds"
                ]
              },
              "description": "A list of thread objects.\n    - Each object is a dict with the keys:"
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label strings."
            },
            "settings": {
              "type": "object",
              "properties": {
                "theme": {
                  "type": "string",
                  "description": "The user's theme preference."
                },
                "notifications": {
                  "type": "boolean",
                  "description": "The user's notification preference."
                }
              },
              "description": "A dictionary for user settings."
            },
            "history": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "The action performed."
                  },
                  "timestamp": {
                    "type": "string",
                    "description": "The timestamp of the action."
                  }
                },
                "required": [
                  "action",
                  "timestamp"
                ]
              },
              "description": "A list of history event objects.\n    - Each object is a dict with the keys:"
            },
            "watch": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of watched item IDs."
            },
            "sendAs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "alias": {
                    "type": "string",
                    "description": "The email alias."
                  },
                  "default": {
                    "type": "boolean",
                    "description": "Whether this is the default alias."
                  }
                },
                "required": [
                  "alias",
                  "default"
                ]
              },
              "description": "A list of alias objects.\n    - Each object is a dict with the keys:"
            }
          },
          "description": "A dictionary containing the user's details.",
          "required": [
            "displayName",
            "emailAddress",
            "name"
          ]
        }
      },
      "required": [
        "payload"
      ]
    }
  },
  {
    "name": "create_version",
    "description": "Create a new version.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the version."
        },
        "description": {
          "type": "string",
          "description": "The description of the version."
        },
        "archived": {
          "type": "boolean",
          "description": "Whether the version is archived."
        },
        "released": {
          "type": "boolean",
          "description": "Whether the version is released."
        },
        "release_date": {
          "type": "string",
          "description": "The release date of the version."
        },
        "user_release_date": {
          "type": "string",
          "description": "The user release date of the version."
        },
        "project": {
          "type": "string",
          "description": "The project of the version."
        },
        "project_id": {
          "type": "integer",
          "description": "The project ID of the version."
        }
      }
    }
  },
  {
    "name": "crop_temporary_avatar",
    "description": "Crop a temporary avatar in Jira.\n\nThis method allows cropping a temporary avatar to the desired dimensions\nbefore making it permanent. This is typically used after uploading a\ntemporary avatar to adjust its appearance.",
    "parameters": {
      "type": "object",
      "properties": {
        "cropDimensions": {
          "type": "object",
          "description": "A dictionary containing the crop dimensions:",
          "properties": {
            "x": {
              "type": "integer",
              "description": "The x-coordinate of the top-left corner"
            },
            "y": {
              "type": "integer",
              "description": "The y-coordinate of the top-left corner"
            },
            "width": {
              "type": "integer",
              "description": "The width of the crop area"
            },
            "height": {
              "type": "integer",
              "description": "The height of the crop area"
            }
          },
          "required": [
            "height",
            "width",
            "x",
            "y"
          ]
        }
      },
      "required": [
        "cropDimensions"
      ]
    }
  },
  {
    "name": "delete_attachment",
    "description": "Delete an attachment and remove all references from issues.\n\nPermanently removes an attachment from the system, including the file data \nand all references to it from issues. This operation cannot be undone.\nThe function performs a complete cleanup by removing both the attachment \nrecord and all issue references to ensure data consistency.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the attachment to delete.\nMust be a positive integer or a string representation of a positive integer.\n    "
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_component_by_id",
    "description": "Delete a component from a project.\n\nThis method permanently removes a component from a project. Optionally,\nissues assigned to the component can be moved to another component.",
    "parameters": {
      "type": "object",
      "properties": {
        "comp_id": {
          "type": "string",
          "description": "The unique identifier of the component to delete"
        },
        "moveIssuesTo": {
          "type": "string",
          "description": "The ID of the component to move\nexisting issues to. If not provided, issues will remain\nunassigned. Defaults to None."
        }
      },
      "required": [
        "comp_id"
      ]
    }
  },
  {
    "name": "delete_group_by_name",
    "description": "Delete an existing group.\n\nThis method permanently removes a group from the system. All users\nin the group will lose their group-based permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "groupname": {
          "type": "string",
          "description": "The name of the group to delete"
        }
      },
      "required": [
        "groupname"
      ]
    }
  },
  {
    "name": "delete_issue_by_id",
    "description": "Delete an existing issue.\n\nThis method permanently removes an issue from the system.\nOptionally, its subtasks can be deleted as well.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "description": "The unique identifier of the issue to delete."
        },
        "delete_subtasks": {
          "type": "boolean",
          "description": "Whether to delete subtasks. Defaults to False."
        }
      },
      "required": [
        "issue_id"
      ]
    }
  },
  {
    "name": "delete_project_by_key",
    "description": "Delete a project.\n\nThis method deletes a project and all its associated components.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_key": {
          "type": "string",
          "description": "The key of the project. Cannot be empty."
        }
      },
      "required": [
        "project_key"
      ]
    }
  },
  {
    "name": "delete_user_by_username_or_key",
    "description": "Delete a user by username or key.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the user to delete."
        },
        "key": {
          "type": "string",
          "description": "The key of the user to delete."
        }
      }
    }
  },
  {
    "name": "delete_version_by_id",
    "description": "Delete a version.",
    "parameters": {
      "type": "object",
      "properties": {
        "ver_id": {
          "type": "string",
          "description": "The ID of the version to delete."
        },
        "move_fix_issues_to": {
          "type": "string",
          "description": "The ID of the version to move the fixed issues to, currently not used."
        },
        "move_affected_issues_to": {
          "type": "string",
          "description": "The ID of the version to move the affected issues to, currently not used."
        }
      },
      "required": [
        "ver_id"
      ]
    }
  },
  {
    "name": "delete_webhooks_by_ids",
    "description": "Delete webhooks.",
    "parameters": {
      "type": "object",
      "properties": {
        "webhookIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IDs of the webhooks to delete."
        }
      },
      "required": [
        "webhookIds"
      ]
    }
  },
  {
    "name": "download_attachment",
    "description": "Download attachment content to a local file in the current directory.\n\nDownloads the specified attachment and saves it to the current directory using\nthe attachment's original filename. This function handles both binary and text \nattachments, automatically detecting the appropriate encoding and writing method \nbased on the attachment's stored encoding format.\n\nThe function retrieves the attachment data directly from the database and\nthen processes it according to its encoding:\n- Base64 encoded attachments are decoded and written as binary files\n- Text attachments are written directly as UTF-8 text files",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the attachment to download.\nCan be provided as an integer or string representation of the attachment ID.\nMust be a positive integer that exists in the database."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "find_groups_for_picker",
    "description": "Search for groups matching a query string.\n\nThis method searches for groups whose names contain the specified query string.\nThe search is case-insensitive and returns all matching group names. This is useful\nfor implementing group picker functionality in the UI.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search string to match against group names.\nIf None or not provided, all groups will be returned.\nMust be a string if provided."
        }
      }
    }
  },
  {
    "name": "find_users",
    "description": "Finds users by a string search against their name, display name, and email.\n\nThis function provides a general-purpose search for users and supports\npagination and filtering by active status. The search is case-insensitive.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_string": {
          "type": "string",
          "description": "The search string to match against user fields name, display name, and email"
        },
        "startAt": {
          "type": "integer",
          "description": "The index of the first user to return. Defaults to 0."
        },
        "maxResults": {
          "type": "integer",
          "description": "The maximum number of users to return. Defaults to 50 (maximum allowed value is 1000). \nIf you specify a value that is higher than 1000, your search results will be truncated."
        },
        "includeActive": {
          "type": "boolean",
          "description": "If True, active users are included. Defaults to True."
        },
        "includeInactive": {
          "type": "boolean",
          "description": "If True, inactive users are included. Defaults to False."
        }
      },
      "required": [
        "search_string"
      ]
    }
  },
  {
    "name": "get_all_application_roles",
    "description": "Retrieve all application roles from Jira.\n\nThis method returns a list of all application roles defined in the system.\nApplication roles are used to control access to specific Jira features and functionality.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_dashboards",
    "description": "Retrieve a list of dashboards from Jira.\n\nThis method returns a list of all dashboards in the system, with optional\npagination support. Dashboards are used to display various Jira data and\nmetrics in a customizable layout.",
    "parameters": {
      "type": "object",
      "properties": {
        "startAt": {
          "type": "integer",
          "description": "The index of the first dashboard to return.\nDefaults to 0."
        },
        "maxResults": {
          "type": "integer",
          "description": "The maximum number of dashboards to return.\nIf not specified, all dashboards will be returned."
        }
      }
    }
  },
  {
    "name": "get_all_filters",
    "description": "Retrieve all filters from Jira.\n\nThis method returns a list of all filters in the system. Filters in Jira\nare used to save and share search queries, allowing users to quickly\naccess commonly used issue searches.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_issue_link_types",
    "description": "Retrieve all issue link types from Jira.\n\nThis method returns a list of all issue link types defined in the system.\nIssue link types are used to categorize and manage relationships between issues.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_issue_types",
    "description": "Retrieve all issue types from Jira.\n\nThis method returns a list of all issue types defined in the system.\nIssue types are used to categorize and manage issues in Jira.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_permission_schemes",
    "description": "Get all permission schemes.\n\nThis method returns all permission schemes in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_permissions",
    "description": "Get all permissions.\n\nThis method returns all permissions in the system.\nNot available in the real world API.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_priorities",
    "description": "Get all priorities.\n\nThis method returns all priorities in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_project_categories",
    "description": "Get all project categories.\n\nThis method returns all project categories in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_projects",
    "description": "Get all projects.\n\nThis method returns all projects in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_resolutions",
    "description": "Get all resolutions.\n\nThis method returns all resolutions in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_roles",
    "description": "Get all roles.\n\nThis method returns all roles in the system. If no roles exist, \nan empty list is returned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_security_levels",
    "description": "Get all security levels.\n\nThis method returns all security levels in the system. If no security levels\nexist, an empty list is returned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_settings",
    "description": "Get all settings.\n\nThis method returns all settings in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_status_categories",
    "description": "Get all status categories.\n\nThis method returns all status categories in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_statuses",
    "description": "Get all statuses.\n\nThis method returns all statuses in the system.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_webhooks",
    "description": "Get all webhooks.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_workflows",
    "description": "Get all workflows.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_application_properties",
    "description": "Retrieve application properties from Jira.\n\nThis method allows fetching either all application properties or a specific property\nby its key. Application properties are system-wide settings that control various\naspects of Jira's behavior.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the specific property to retrieve. If not provided,\nall application properties will be returned."
        },
        "permissionLevel": {
          "type": "string",
          "description": "The permission level required to access the property.\nValid values: \"ADMIN\", \"USER\", \"ANONYMOUS\". If not provided, all properties\nwill be returned regardless of permission level."
        },
        "keyFilter": {
          "type": "string",
          "description": "A filter to apply to the property keys. If provided,\nonly properties whose keys contain this substring will be returned."
        }
      }
    }
  },
  {
    "name": "get_application_role_by_key",
    "description": "Retrieve a specific application role by its key.\n\nThis method returns detailed information about a specific application role\nidentified by its unique key.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The unique identifier of the application role to retrieve"
        }
      },
      "required": [
        "key"
      ]
    }
  },
  {
    "name": "get_attachment_content",
    "description": "Get attachment content as binary data.\n\nRetrieves the raw binary content of an attachment without saving it to disk.\nThis function decodes the stored attachment data and returns it as binary content.\nThe content is returned as bytes that can be used directly by applications for processing, \nstreaming, or further manipulation.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the attachment to retrieve.\nCan be provided as an integer or string representation of the attachment ID.\nMust be a positive integer that exists in the database."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_attachment_metadata",
    "description": "Get attachment metadata without file content.\n\nReturns metadata information for an attachment.\nThis is useful for getting file information (name, size, type, etc.)",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the attachment. Must be a positive \ninteger or a string representation of a positive integer.\n    "
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "get_component_by_id",
    "description": "Retrieve a component by its ID.\n\nThis method returns detailed information about a specific component\nidentified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "comp_id": {
          "type": "string",
          "description": "The unique identifier of the component to retrieve."
        }
      },
      "required": [
        "comp_id"
      ]
    }
  },
  {
    "name": "get_current_user_permissions",
    "description": "Get the current user's permissions.\n\nThis method returns the permissions of the current user from the database.\nThe permissions are returned as a list of permission keys that the user has access to.",
    "parameters": {
      "type": "object",
      "properties": {
        "projectKey": {
          "type": "string",
          "description": "The key of the project to check permissions for. Defaults to None."
        },
        "issueKey": {
          "type": "string",
          "description": "The key of the issue to check permissions for. Defaults to None."
        }
      }
    }
  },
  {
    "name": "get_current_user_preferences",
    "description": "Get the current user's preferences.\n\nThis method returns the preferences of the current user from the database.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_dashboard_by_id",
    "description": "Retrieve a specific dashboard by its ID.\n\nThis method returns detailed information about a specific dashboard\nidentified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "dash_id": {
          "type": "string",
          "description": "The unique identifier of the dashboard to retrieve"
        }
      },
      "required": [
        "dash_id"
      ]
    }
  },
  {
    "name": "get_filter_by_id",
    "description": "Retrieve a specific filter by its ID.\n\nThis method returns detailed information about a specific filter\nidentified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter_id": {
          "type": "string",
          "description": "The unique identifier of the filter to retrieve"
        }
      },
      "required": [
        "filter_id"
      ]
    }
  },
  {
    "name": "get_group_by_name",
    "description": "Retrieve a specific group by its name.\n\nThis method returns detailed information about a specific group\nidentified by its name. Groups in Jira are used to manage user permissions\nand access control.",
    "parameters": {
      "type": "object",
      "properties": {
        "groupname": {
          "type": "string",
          "description": "The name of the group to retrieve. Cannot be empty or whitespace-only."
        }
      },
      "required": [
        "groupname"
      ]
    }
  },
  {
    "name": "get_issue_by_id",
    "description": "Retrieve a specific issue by its ID.\n\nThis method returns detailed information about a specific issue\nidentified by its unique ID, including any attachments associated with the issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "description": "The unique identifier of the issue to retrieve."
        }
      },
      "required": [
        "issue_id"
      ]
    }
  },
  {
    "name": "get_issue_create_metadata",
    "description": "Get the create metadata for projects and issue types.\n\nThis method returns metadata about projects and their available issue types\nthat can be used for creating new issues. The response can be filtered by\nproject keys and issue type names.",
    "parameters": {
      "type": "object",
      "properties": {
        "projectKeys": {
          "type": "string",
          "description": "Project keys to filter the results. \nIf None, all projects are returned. This parameter accepts a \ncomma-separated list of project keys. Specifying a project \nthat does not exist is not an error, but it will not be in the results."
        },
        "issueTypeNames": {
          "type": "string",
          "description": "Issue type names to filter the results.\nIf None, all issue types are returned. This parameter accepts a \ncomma-separated list of issue type names. Specifying an issue type \nthat does not exist is not an error."
        }
      }
    }
  },
  {
    "name": "get_issue_link_type_by_id",
    "description": "Retrieve a specific issue link type by its ID.\n\nThis method returns detailed information about a specific issue link type\nidentified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "link_type_id": {
          "type": "string",
          "description": "The unique identifier of the issue link type to retrieve"
        }
      },
      "required": [
        "link_type_id"
      ]
    }
  },
  {
    "name": "get_issue_type_by_id",
    "description": "Retrieve a specific issue type by its ID.\n\nThis method returns detailed information about a specific issue type\nidentified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "type_id": {
          "type": "string",
          "description": "The unique identifier of the issue type to retrieve. Must be a non-empty string."
        }
      },
      "required": [
        "type_id"
      ]
    }
  },
  {
    "name": "get_jql_autocomplete_suggestions",
    "description": "Get JQL autocomplete data.\n\nThis method returns JQL autocomplete data.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_permission_scheme_by_id",
    "description": "Get a permission scheme by id.\n\nThis method returns a permission scheme by id from the database.",
    "parameters": {
      "type": "object",
      "properties": {
        "scheme_id": {
          "type": "string",
          "description": "The id of the permission scheme to get"
        }
      },
      "required": [
        "scheme_id"
      ]
    }
  },
  {
    "name": "get_priority_by_id",
    "description": "Get a priority by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "priority_id": {
          "type": "string",
          "description": "The id of the priority to get. Must be a non-empty string."
        }
      },
      "required": [
        "priority_id"
      ]
    }
  },
  {
    "name": "get_project_avatars_by_key",
    "description": "Get all avatars for a project.\n\nNote: This returns all avatars with type 'project'",
    "parameters": {
      "type": "object",
      "properties": {
        "project_key": {
          "type": "string",
          "description": "The key of the project. Must be a non-empty string."
        }
      },
      "required": [
        "project_key"
      ]
    }
  },
  {
    "name": "get_project_by_key",
    "description": "Get a project by key.\n\nThis method retrieves a specific project using its key.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_key": {
          "type": "string",
          "description": "The key of the project. Cannot be empty."
        }
      },
      "required": [
        "project_key"
      ]
    }
  },
  {
    "name": "get_project_category_by_id",
    "description": "Get a project category by id.\n\nThis method returns a project category by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "cat_id": {
          "type": "string",
          "description": "The id of the project category"
        }
      },
      "required": [
        "cat_id"
      ]
    }
  },
  {
    "name": "get_project_components_by_key",
    "description": "Get all components for a project.\n\nThis method returns all components for a project.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_key": {
          "type": "string",
          "description": "The key of the project."
        }
      },
      "required": [
        "project_key"
      ]
    }
  },
  {
    "name": "get_reindex_status",
    "description": "Get the current status of the reindex operation.\n\nThis method returns information about any ongoing reindex operation,\nincluding whether it is currently running and its type.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_resolution_by_id",
    "description": "Get a resolution by id.\n\nThis method returns a resolution by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "res_id": {
          "type": "string",
          "description": "The id of the resolution. Must be a non-empty string."
        }
      },
      "required": [
        "res_id"
      ]
    }
  },
  {
    "name": "get_role_by_id",
    "description": "Get a role by id.\n\nThis method returns a role by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string",
          "description": "The id of the role. Cannot be empty or None."
        }
      },
      "required": [
        "role_id"
      ]
    }
  },
  {
    "name": "get_security_level_by_id",
    "description": "Get a security level by id.\n\nThis method returns a security level by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "sec_id": {
          "type": "string",
          "description": "The id of the security level. Cannot be empty or None."
        }
      },
      "required": [
        "sec_id"
      ]
    }
  },
  {
    "name": "get_server_info",
    "description": "Get server information.\n\nThis method returns information about the server.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_status_by_id",
    "description": "Get a status by id.\n\nThis method returns a status by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "status_id": {
          "type": "string",
          "description": "The id of the status"
        }
      },
      "required": [
        "status_id"
      ]
    }
  },
  {
    "name": "get_status_category_by_id",
    "description": "Get a status category by id.\n\nThis method returns a status category by id.",
    "parameters": {
      "type": "object",
      "properties": {
        "cat_id": {
          "type": "string",
          "description": "The id of the status category"
        }
      },
      "required": [
        "cat_id"
      ]
    }
  },
  {
    "name": "get_user_avatars_by_username",
    "description": "Get all avatars that are visible to the current user.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the user to get avatars for."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_by_username_or_account_id",
    "description": "Get a user by username or account_id(key).\n\nThis function retrieves a single user from the database. It prioritizes\nthe `account_id` if both identifiers are provided. If no user is found\nmatching the given criteria, it will raise a `UserNotFoundError`.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the user to retrieve. This is deprecated."
        },
        "account_id": {
          "type": "string",
          "description": "The account ID (key) of the user to retrieve."
        }
      }
    }
  },
  {
    "name": "get_version_by_id",
    "description": "Get a version by ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "ver_id": {
          "type": "string",
          "description": "The ID of the version to get."
        }
      },
      "required": [
        "ver_id"
      ]
    }
  },
  {
    "name": "get_version_related_issue_counts_by_id",
    "description": "Get the related issue counts for a version.",
    "parameters": {
      "type": "object",
      "properties": {
        "ver_id": {
          "type": "string",
          "description": "The ID of the version to get the related issue counts for."
        }
      },
      "required": [
        "ver_id"
      ]
    }
  },
  {
    "name": "list_issue_attachments",
    "description": "List all attachments associated with an issue.\n\nRetrieves metadata for all attachments that are currently associated with the\nspecified issue. The function automatically handles orphaned references by\nskipping attachments that were deleted but still have references in the issue.\nReturns an empty list if the issue has no attachments. The attachments are\nreturned in the order they appear in the issue's attachment list.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_id_or_key": {
          "type": "string",
          "description": "The unique identifier or key of the issue to query.\nMust be a non-empty string that exists in the database.\n    "
        }
      },
      "required": [
        "issue_id_or_key"
      ]
    }
  },
  {
    "name": "perform_bulk_issue_operations",
    "description": "Performs bulk operations on multiple Jira issues.\n\nThis function allows updating multiple issues in a single operation.\nEach update can modify fields, assignee, status, priority, summary, or description.\nAdditionally, issues can be deleted with optional subtask deletion.",
    "parameters": {
      "type": "object",
      "properties": {
        "issueUpdates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "issueId": {
                "type": "string",
                "description": "The ID of the issue to update"
              },
              "fields": {
                "type": "object",
                "properties": {},
                "description": "Fields to update"
              },
              "assignee": {
                "type": "object",
                "properties": {},
                "description": "Assignee information"
              },
              "status": {
                "type": "string",
                "description": "New status"
              },
              "priority": {
                "type": "string",
                "description": "New priority"
              },
              "summary": {
                "type": "string",
                "description": "New summary"
              },
              "description": {
                "type": "string",
                "description": "New description"
              },
              "delete": {
                "type": "boolean",
                "description": "Whether to delete this issue (default: False)"
              },
              "deleteSubtasks": {
                "type": "boolean",
                "description": "Whether to delete subtasks when deleting (default: False)"
              }
            },
            "required": [
              "issueId"
            ]
          },
          "description": "A list of issue updates to perform.\nEach update should contain:"
        }
      },
      "required": [
        "issueUpdates"
      ]
    }
  },
  {
    "name": "search_issues_for_picker",
    "description": "Search for issues based on a query string and/or JQL.\n\nThis method searches for issues based on a text query string and/or JQL (Jira Query Language).\nThe search is case-insensitive for text queries. JQL filtering is applied first, then text filtering.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The text query string to search for in issue summaries and IDs.\nIf None, no text filtering will be applied.\nAn empty string \"\" will generally match all issues."
        },
        "currentJQL": {
          "type": "string",
          "description": "JQL expression to filter issues before applying text search.\nIf provided, only issues matching the JQL will be considered.\nSupports all standard JQL operators and functions."
        }
      }
    }
  },
  {
    "name": "search_issues_jql",
    "description": "Search for issues based on JQL query.",
    "parameters": {
      "type": "object",
      "properties": {
        "jql": {
          "type": "string",
          "description": "The JQL query to search for issues.\nStrings with spaces must be enclosed in single (') or double (\") quotes.\nCommonly searchable fields include:\n- `id` / `key` (e.g., `id = \"ISSUE-123\"`)\n- `project` (e.g., `project = \"DEMO\"`)\n- `summary` (e.g., `summary ~ \"critical bug\"` or `summary = \"Exact phrase\"`)\n- `description` (e.g., `description ~ \"detailed steps\"`)\n- `priority` (e.g., `priority = \"High\"`)\n- `assignee`:\n    - The `assignee` field is stored as a dictionary with a `name` field (e.g., `{\"name\": \"jdoe\"}`), but can be queried directly using the username: `assignee = \"jdoe\"`.\n    - The JQL parser automatically extracts the `name` field from the assignee dictionary for comparison.\n    - The `name` field corresponds to the user's `name` field from the users table (not email or display name).\n    - Dot notation queries (e.g., `assignee.name = \"jdoe\"`) are **NOT supported** by the current JQL parser.\n- `created` (e.g., `created >= \"2024-01-01\"`)\n- `issuetype` (e.g., `issuetype = \"Bug\"`)\n- `status` (e.g., `status = \"Open\"`)\n\nSupported operators:\n- `=` (equals), `!=` (not equals)\n- `~` (contains), `!~` (does not contain)\n- `<`, `<=`, `>`, `>=` (comparison operators for dates/numbers)\n- `IN` (e.g., `priority IN (\"High\", \"Critical\")`)\n- `NOT IN` (e.g., `status NOT IN (\"Closed\", \"Done\")`)\n- `IS EMPTY`, `IS NOT EMPTY` (for null/empty checks)\n- `IS NULL`, `IS NOT NULL` (aliases for empty checks)\n- `EMPTY`, `NULL` (legacy empty checks)\n\nCombining conditions:\n- Use `AND` and `OR` for multiple conditions (e.g., `project = \"WebApp\" AND status = \"Open\" OR priority = \"High\"`).\n- `AND` has higher precedence than `OR`.\n- Parentheses `()` for explicit grouping of conditions are supported (e.g., `(project = \"WebApp\" OR project = \"API\") AND status = \"Open\"`).\n\nOrdering results:\n- Use `ORDER BY fieldName [ASC|DESC]` (e.g., `ORDER BY created DESC`).\n\nThe exact fields and operators supported depend on the JQL parsing and evaluation logic implemented in the simulation."
        },
        "start_at": {
          "type": "integer",
          "description": "The index of the first issue to return. Defaults to 0."
        },
        "max_results": {
          "type": "integer",
          "description": "The maximum number of issues to return. Defaults to 50."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of fields to return. Defaults to None (all fields)."
        },
        "expand": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of fields to expand. Defaults to None."
        },
        "validate_query": {
          "type": "boolean",
          "description": "Whether to validate the JQL query. Defaults to True."
        }
      }
    }
  },
  {
    "name": "start_reindex",
    "description": "Start a reindex operation in Jira.\n\nThis method initiates a reindex operation which rebuilds the search indexes in Jira.\nThe reindex can be performed in either FOREGROUND or BACKGROUND mode.",
    "parameters": {
      "type": "object",
      "properties": {
        "reindex_type": {
          "type": "string",
          "description": "The type of reindex to perform.\n- \"FOREGROUND\": Reindex runs in the foreground, blocking other operations\n- \"BACKGROUND\": Reindex runs in the background, allowing other operations\nDefaults to \"FOREGROUND\"."
        }
      }
    }
  },
  {
    "name": "update_application_property_by_id",
    "description": "Update an application property in Jira.\n\nThis method allows modifying the value of an existing application property\nor creating a new one if it doesn't exist.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the property to update"
        },
        "value": {
          "type": "string",
          "description": "The new value to set for the property"
        }
      },
      "required": [
        "id",
        "value"
      ]
    }
  },
  {
    "name": "update_component_by_id",
    "description": "Update an existing component.\n\nThis method allows updating the name and/or description of an existing\ncomponent. At least one of name or description must be provided.",
    "parameters": {
      "type": "object",
      "properties": {
        "comp_id": {
          "type": "string",
          "description": "The unique identifier of the component to update."
        },
        "name": {
          "type": "string",
          "description": "The new name for the component. Defaults to None and maximum length is 255 characters."
        },
        "description": {
          "type": "string",
          "description": "The new description for the component\nMaximum length is 1000 characters.\nDefaults to None."
        }
      },
      "required": [
        "comp_id"
      ]
    }
  },
  {
    "name": "update_current_user_preferences",
    "description": "Update the current user's preferences.\n\nThis method updates the preferences of the current user with the provided values.",
    "parameters": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "description": "The preferences to update. Must contain one or more of:",
          "properties": {
            "theme": {
              "type": "string",
              "description": "The theme of the current user"
            },
            "notifications": {
              "type": "string",
              "description": "The notifications of the current user"
            }
          }
        }
      },
      "required": [
        "value"
      ]
    }
  },
  {
    "name": "update_filter_by_id",
    "description": "Update an existing filter.\n\nThis method allows updating the name and/or JQL query of an existing\nfilter. At least one of name or jql must be provided.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter_id": {
          "type": "string",
          "description": "The unique identifier of the filter to update"
        },
        "name": {
          "type": "string",
          "description": "The new name for the filter. Defaults to None."
        },
        "jql": {
          "type": "string",
          "description": "The new JQL query for the filter. Defaults to None."
        },
        "description": {
          "type": "string",
          "description": "Description of the filter. Defaults to None."
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the filter is a favorite. Defaults to None."
        },
        "editable": {
          "type": "boolean",
          "description": "Whether the filter is editable. Defaults to None."
        }
      },
      "required": [
        "filter_id"
      ]
    }
  },
  {
    "name": "update_group_members_by_name",
    "description": "Update the members of an existing group.\n\nThis method allows updating the list of users in a specific group.\nThe group must exist before it can be updated.",
    "parameters": {
      "type": "object",
      "properties": {
        "groupname": {
          "type": "string",
          "description": "The name of the group to update"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of usernames to add to the group"
        }
      },
      "required": [
        "groupname",
        "users"
      ]
    }
  },
  {
    "name": "update_issue_by_id",
    "description": "Update an existing issue.\n\nThis method allows updating the fields of an existing issue.\nOnly the provided fields will be updated.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_id": {
          "type": "string",
          "description": "The unique identifier of the issue to update."
        },
        "fields": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "The summary of the issue"
            },
            "description": {
              "type": "string",
              "description": "The description of the issue"
            },
            "priority": {
              "type": "string",
              "description": "The priority of the issue"
            },
            "status": {
              "type": "string",
              "description": "The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)"
            },
            "assignee": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The assignee's username (e.g., 'jdoe')"
                }
              },
              "description": "Assignee information in dictionary format. Example: {\"name\": \"jdoe\"}",
              "required": [
                "name"
              ]
            },
            "issuetype": {
              "type": "string",
              "description": "The type of issue"
            },
            "project": {
              "type": "string",
              "description": "The project key"
            },
            "due_date": {
              "type": "string",
              "description": "The due date of the issue"
            },
            "comments": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "description": "A list of comments to add to the issue."
            }
          },
          "description": "The fields to update. Can include any valid\nissue field. Expected structure if provided:"
        }
      },
      "required": [
        "issue_id"
      ]
    }
  },
  {
    "name": "upload_avatar",
    "description": "Upload a new avatar to Jira.\n\nThis method allows uploading a new avatar image to be used in Jira.\nThe avatar can be used for users, projects, or other entities.",
    "parameters": {
      "type": "object",
      "properties": {
        "filetype": {
          "type": "string",
          "description": "The type of avatar being uploaded. Must be one of:\n- \"user\": For user avatars\n- \"project\": For project avatars\n- \"system\": For system-wide avatars"
        },
        "filename": {
          "type": "string",
          "description": "The name of the file being uploaded"
        }
      },
      "required": [
        "filename",
        "filetype"
      ]
    }
  },
  {
    "name": "upload_temporary_avatar",
    "description": "Upload a temporary avatar to Jira.\n\nThis method allows uploading a temporary avatar that can be used for preview\nbefore making it permanent. Temporary avatars are typically used during the\navatar selection process.",
    "parameters": {
      "type": "object",
      "properties": {
        "filetype": {
          "type": "string",
          "description": "The type of avatar being uploaded. Must be one of:\n- \"user\": For user avatars\n- \"project\": For project avatars\n- \"system\": For system-wide avatars"
        },
        "filename": {
          "type": "string",
          "description": "The name of the file being uploaded"
        }
      },
      "required": [
        "filename",
        "filetype"
      ]
    }
  },
  {
    "name": "validate_license",
    "description": "Validate a license.\n\nThis method validates a license.",
    "parameters": {
      "type": "object",
      "properties": {
        "license": {
          "type": "string",
          "description": "The license to validate"
        }
      },
      "required": [
        "license"
      ]
    }
  }
]