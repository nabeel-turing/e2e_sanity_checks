[
  {
    "name": "create_new_jupyter_notebook",
    "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code.\n\nGenerates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks\nare interactive documents commonly used for data exploration, analysis,\nvisualization, and combining code with narrative text. This tool should\nonly be called when the user explicitly requests to create a new Jupyter\nNotebook.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "create_new_workspace",
    "description": "Get steps to help the user create any project in a VS Code workspace.\n\nUse this tool to help users set up new projects, including TypeScript-based projects, Model Context Protocol (MCP) servers, VS Code extensions, Next.js projects, Vite projects, or any other project.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "file_search",
    "description": "Search for files in the workspace by glob pattern.\n\nThis function searches for files in the workspace using a glob pattern. It returns a list of\nfile paths relative to the workspace root that match the pattern.\nThe search is limited to 20 results. This tool is suitable when the filename pattern\nfor the desired files is known. Glob patterns are matched starting from the root of the\nworkspace folder.",
    "parameters": {
      "type": "object",
      "properties": {
        "glob_pattern": {
          "type": "string",
          "description": "The glob pattern to search for files."
        }
      },
      "required": [
        "glob_pattern"
      ]
    }
  },
  {
    "name": "get_changed_files",
    "description": "Get git diffs of current file changes in the active git repository.\n\nThis function retrieves git diffs for current file changes within the\nactive git repository. For each changed file, it provides its path,\nstatus (e.g., 'modified', 'added', 'deleted', 'renamed', 'copied'),\nthe diff output in unified format, and the original path if the file\nwas renamed or copied. It is also noted that `run_in_terminal` can be\nused to execute git commands.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_errors",
    "description": "Get any compile or lint errors in a code file.\n\nIf a user mentions errors or problems in a file, they may be referring to\nthese compile or lint errors. This function allows seeing the same errors\nthat the user is seeing. It is also used after editing a file to validate\nthe change.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The path to the code file to analyze for errors."
        }
      },
      "required": [
        "file_path"
      ]
    }
  },
  {
    "name": "get_project_setup_info",
    "description": "Provides project setup information for a Visual Studio Code workspace based on a project type and programming language.\n\nThis tool provides project setup information for a Visual Studio Code workspace based on a project type and programming language. This tool must not be called without first calling the tool to create a workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_type": {
          "type": "string",
          "description": "The type of the project (e.g., 'typescript_server', 'vscode_extension', 'python_datascience')."
        },
        "language": {
          "type": "string",
          "description": "The primary programming language of the project (e.g., 'typescript', 'python')."
        }
      },
      "required": [
        "language",
        "project_type"
      ]
    }
  },
  {
    "name": "get_terminal_output",
    "description": "Retrieves the output and status for a terminal process.\n\nThis function is used to get the standard output (stdout), standard error (stderr),\nrunning status, and exit code of a terminal command that was previously\nstarted.\n\nWhen called, it attempts to read any new output generated by the process\nsince the last call for the same `terminal_id`. If the process has finished,\nthis function will retrieve any output, the final exit code.",
    "parameters": {
      "type": "object",
      "properties": {
        "terminal_id": {
          "type": "string",
          "description": "The ID of the background terminal process. This ID should\nhave been returned by the function that initiated the background process.\nIt must be a string containing only digits."
        }
      },
      "required": [
        "terminal_id"
      ]
    }
  },
  {
    "name": "get_vscode_api",
    "description": "Get relevant VS Code API references to answer questions about VS Code extension development.\n\nThis function gets relevant VS Code API references to answer questions about VS Code\nextension development. It is used when the user asks about VS Code APIs,\ncapabilities, or best practices related to developing VS Code extensions.\nIt is used in all VS Code extension development workspaces.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query to search vscode documentation for. Should contain all\nrelevant context."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "grep_search",
    "description": "Do a text search in the workspace.\n\nThis function performs a text search within the user's workspace. It is\nlimited to 20 results and is intended for use when the exact string or\nregular expression to search for is known.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_pattern": {
          "type": "string",
          "description": "The exact string or regular expression to search\nfor in the workspace."
        }
      },
      "required": [
        "search_pattern"
      ]
    }
  },
  {
    "name": "insert_edit_into_file",
    "description": "Insert new code into an existing file in the workspace.\n\nInserts new code into an existing file in the workspace. This function is used\nonce per file that needs modification, even if there are multiple changes for\nthat file. The `explanation` property should be generated first. The system\nintelligently applies edits based on minimal hints. It is important to avoid\nrepeating existing code in the `edit_instructions`; instead, comments\n(e.g., `// ...existing code...`) represent regions of unchanged code,\naiming for conciseness. For example:\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n\nAn example of how to format an edit to an existing `Person` class:\nclass Person {\n    // ...existing code...\n    age: number;\n    // ...existing code...\n    getAge() {\n        return this.age;\n    }\n}",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The path of the file within the workspace that needs to be modified."
        },
        "edit_instructions": {
          "type": "string",
          "description": "The content representing the changes to be applied to the file. Follow the concise diff-like format: use comments (e.g., '// ...existing code...') to represent regions of unchanged code and provide only the new or modified code blocks."
        },
        "explanation": {
          "type": "string",
          "description": "A natural language explanation of the changes being made in this edit. This should be generated first."
        }
      },
      "required": [
        "edit_instructions",
        "explanation",
        "file_path"
      ]
    }
  },
  {
    "name": "install_extension",
    "description": "Install an extension in VS Code.\n\nThis function installs an extension in Visual Studio Code. It is intended for use\nexclusively as part of a new workspace creation process.",
    "parameters": {
      "type": "object",
      "properties": {
        "extension_id": {
          "type": "string",
          "description": "The unique identifier of the Visual Studio Code extension\nto be installed (e.g., 'ms-python.python')."
        }
      },
      "required": [
        "extension_id"
      ]
    }
  },
  {
    "name": "list_code_usages",
    "description": "Requests to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc.\n\nThis function lists all usages (e.g., references, definitions, implementations) of a specified code symbol such as a function, class, method, or variable.\nIt is used for purposes such as:\n1. Looking for a sample implementation of an interface or class.\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to the file containing the symbol for which usages are to be found."
        },
        "line_number": {
          "type": "integer",
          "description": "The 1-based line number in the specified file where the symbol is located. This typically refers to the start of the symbol's identifier."
        },
        "column_number": {
          "type": "integer",
          "description": "The 1-based column number (character offset) on the line in the specified file where the symbol is located. This typically refers to the start of the symbol's identifier."
        }
      },
      "required": [
        "column_number",
        "file_path",
        "line_number"
      ]
    }
  },
  {
    "name": "list_dir",
    "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file.\n\nThis function lists the contents of a specified directory. For each entry\nfound, which represents a child item, its name is provided. A trailing\nslash ('/') in an entry's name indicates that the entry is a folder;\notherwise, the entry is considered a file.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path to the directory whose contents are to be listed."
        }
      },
      "required": [
        "path"
      ]
    }
  },
  {
    "name": "read_file",
    "description": "Read the contents of a file.\n\nThis function reads a specified range of lines from a file. If the requested\nrange is part of a larger file, an outline of the file structure may be\nprovided. If the returned content is insufficient, this function can be\ncalled again to retrieve more content.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The path to the file to be read."
        },
        "start_line": {
          "type": "integer",
          "description": "The 1-based starting line number of the content to retrieve."
        },
        "end_line": {
          "type": "integer",
          "description": "The 1-based ending line number of the content to retrieve."
        }
      },
      "required": [
        "end_line",
        "file_path",
        "start_line"
      ]
    }
  },
  {
    "name": "run_in_terminal",
    "description": "Run a shell command in a terminal.\n\nThis function runs a shell command in a terminal. The terminal state is persistent across tool calls.\nThis tool is intended to be used instead of printing a shell codeblock and asking the user to run it.\nIf the command is a long-running background process, the `is_background` parameter must be set to `True`.\nWhen a command is run in the background, the function returns a terminal ID, which can be used with\n`get_terminal_output` to check the output of the background process.\nIf a command typically uses a pager (e.g., `git log`, `man`, `less`), the command MUST be modified\nto disable the pager (e.g., `git --no-pager log`) or its output must be piped to a non-pager\ncommand (e.g., `git log | cat`). Failure to handle pagers correctly may lead to stalled\nexecution or unexpected behavior.",
    "parameters": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The shell command to execute. This is a required parameter.\nIf the command typically uses a pager (e.g., `git log`, `man`, `less`),\nyou MUST modify the command to disable the pager (e.g., `git --no-pager log`)\nor pipe its output to a non-pager command (e.g., `git log | cat`).\nFailure to do so may lead to stalled execution or unexpected behavior."
        },
        "is_background": {
          "type": "boolean",
          "description": "If true, the command runs as a background process, and the\nmethod returns immediately with a terminal ID. If false (default), the\ncommand runs in the foreground, and the method waits for completion before\nreturning output. Defaults to false."
        }
      },
      "required": [
        "command"
      ]
    }
  },
  {
    "name": "semantic_search",
    "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace.\n\nThis function runs a natural language search for relevant code or documentation comments\nfrom the user's current workspace. It returns relevant code snippets from the\nuser's current workspace if it is large, or the full contents of the workspace\nif it is small.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The natural language query string to search for."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "test_search",
    "description": "For a source code file, find the file that contains the tests. For a test file find the file that contains the code under test.\n\nThis function processes a given `file_path`. If `file_path` points to a source code file, the function searches for the file containing its tests.\nConversely, if `file_path` points to a test file, the function searches for the file containing the code under test.\nThe outcome of this search, including the path to the related file (if found), the type of relationship, and a confidence score, is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to the source code file or test file for which to find its related counterpart."
        }
      },
      "required": [
        "file_path"
      ]
    }
  }
]