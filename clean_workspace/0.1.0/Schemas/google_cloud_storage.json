[
  {
    "name": "create_bucket",
    "description": "Creates a new bucket.",
    "parameters": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "A valid API project identifier."
        },
        "bucket_request": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Bucket name (required if provided)"
            },
            "storageClass": {
              "type": "string",
              "description": "Storage class (STANDARD, NEARLINE, COLDLINE, ARCHIVE, etc.)"
            },
            "location": {
              "type": "string",
              "description": "Bucket location"
            },
            "billing": {
              "type": "object",
              "properties": {
                "requesterPays": {
                  "type": "boolean",
                  "description": "Whether requester pays is enabled"
                }
              },
              "description": "Billing configuration",
              "required": [
                "requesterPays"
              ]
            },
            "cors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "maxAgeSeconds": {
                    "type": "integer",
                    "description": "Max age for preflight cache"
                  },
                  "method": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "HTTP methods allowed"
                  },
                  "origin": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Origins allowed"
                  },
                  "responseHeader": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Headers allowed in response"
                  }
                },
                "required": [
                  "maxAgeSeconds",
                  "method",
                  "origin",
                  "responseHeader"
                ]
              },
              "description": "CORS configuration rules"
            },
            "customPlacementConfig": {
              "type": "object",
              "properties": {
                "dataLocations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of regional locations"
                }
              },
              "description": "Custom dual region placement",
              "required": [
                "dataLocations"
              ]
            },
            "hierarchicalNamespace": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether hierarchical namespace is enabled"
                }
              },
              "description": "Hierarchical namespace config",
              "required": [
                "enabled"
              ]
            },
            "iamConfiguration": {
              "type": "object",
              "properties": {
                "uniformBucketLevelAccess": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether enabled"
                    },
                    "lockedTime": {
                      "type": "string",
                      "description": "When it was locked (RFC 3339 format)"
                    }
                  },
                  "description": "Uniform bucket-level access config",
                  "required": [
                    "enabled",
                    "lockedTime"
                  ]
                },
                "bucketPolicyOnly": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether enabled"
                    },
                    "lockedTime": {
                      "type": "string",
                      "description": "When it was locked (RFC 3339 format)"
                    }
                  },
                  "description": "Legacy bucket policy only config",
                  "required": [
                    "enabled",
                    "lockedTime"
                  ]
                },
                "publicAccessPrevention": {
                  "type": "string",
                  "description": "Public access prevention (\"inherited\" or \"enforced\")"
                }
              },
              "description": "IAM configuration",
              "required": [
                "bucketPolicyOnly",
                "publicAccessPrevention",
                "uniformBucketLevelAccess"
              ]
            },
            "ipFilter": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "description": "Filter mode (\"Enabled\" or \"Disabled\")"
                },
                "publicNetworkSource": {
                  "type": "object",
                  "properties": {
                    "allowedIpCidrRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of allowed IP CIDR ranges"
                    }
                  },
                  "description": "Public network sources",
                  "required": [
                    "allowedIpCidrRanges"
                  ]
                },
                "vpcNetworkSources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "network": {
                        "type": "string",
                        "description": "VPC network resource name"
                      },
                      "allowedIpCidrRanges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of allowed IP CIDR ranges"
                      }
                    },
                    "required": [
                      "allowedIpCidrRanges",
                      "network"
                    ]
                  },
                  "description": "VPC network sources"
                }
              },
              "description": "IP filter configuration",
              "required": [
                "mode",
                "publicNetworkSource",
                "vpcNetworkSources"
              ]
            },
            "lifecycle": {
              "type": "object",
              "properties": {
                "rule": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Action type (Delete, SetStorageClass, AbortIncompleteMultipartUpload)"
                          },
                          "storageClass": {
                            "type": "string",
                            "description": "Target storage class for SetStorageClass action"
                          }
                        },
                        "description": "Action to take",
                        "required": [
                          "storageClass",
                          "type"
                        ]
                      },
                      "condition": {
                        "type": "object",
                        "properties": {
                          "age": {
                            "type": "integer",
                            "description": "Age of object in days"
                          },
                          "createdBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "customTimeBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "daysSinceCustomTime": {
                            "type": "integer",
                            "description": "Days since custom time"
                          },
                          "daysSinceNoncurrentTime": {
                            "type": "integer",
                            "description": "Days since noncurrent time"
                          },
                          "isLive": {
                            "type": "boolean",
                            "description": "Whether object is live"
                          },
                          "matchesPattern": {
                            "type": "string",
                            "description": "Regular expression pattern"
                          },
                          "matchesPrefix": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Object name prefixes"
                          },
                          "matchesSuffix": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Object name suffixes"
                          },
                          "matchesStorageClass": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Storage classes to match"
                          },
                          "noncurrentTimeBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "numNewerVersions": {
                            "type": "integer",
                            "description": "Number of newer versions"
                          }
                        },
                        "description": "Conditions for applying the rule",
                        "required": [
                          "age",
                          "createdBefore",
                          "customTimeBefore",
                          "daysSinceCustomTime",
                          "daysSinceNoncurrentTime",
                          "isLive",
                          "matchesPattern",
                          "matchesPrefix",
                          "matchesStorageClass",
                          "matchesSuffix",
                          "noncurrentTimeBefore",
                          "numNewerVersions"
                        ]
                      }
                    },
                    "required": [
                      "action",
                      "condition"
                    ]
                  },
                  "description": "List of lifecycle rules"
                }
              },
              "description": "Lifecycle management rules",
              "required": [
                "rule"
              ]
            },
            "autoclass": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether autoclass is enabled"
                },
                "toggleTime": {
                  "type": "string",
                  "description": "Time autoclass was toggled (RFC 3339 format)"
                },
                "terminalStorageClass": {
                  "type": "string",
                  "description": "Terminal storage class (NEARLINE or ARCHIVE)"
                },
                "terminalStorageClassUpdateTime": {
                  "type": "string",
                  "description": "Time terminal class was updated (RFC 3339)"
                }
              },
              "description": "Autoclass configuration",
              "required": [
                "enabled",
                "terminalStorageClass",
                "terminalStorageClassUpdateTime",
                "toggleTime"
              ]
            },
            "versioning": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether versioning is enabled"
                }
              },
              "description": "Versioning configuration",
              "required": [
                "enabled"
              ]
            },
            "website": {
              "type": "object",
              "properties": {
                "mainPageSuffix": {
                  "type": "string",
                  "description": "Main page suffix (e.g., \"index.html\")"
                },
                "notFoundPage": {
                  "type": "string",
                  "description": "404 page (e.g., \"404.html\")"
                }
              },
              "description": "Website configuration",
              "required": [
                "mainPageSuffix",
                "notFoundPage"
              ]
            },
            "logging": {
              "type": "object",
              "properties": {
                "logBucket": {
                  "type": "string",
                  "description": "Destination bucket for logs"
                },
                "logObjectPrefix": {
                  "type": "string",
                  "description": "Prefix for log objects"
                }
              },
              "description": "Access logging configuration",
              "required": [
                "logBucket",
                "logObjectPrefix"
              ]
            },
            "retentionPolicy": {
              "type": "object",
              "properties": {
                "effectiveTime": {
                  "type": "string",
                  "description": "When policy became effective (RFC 3339 format)"
                },
                "isLocked": {
                  "type": "boolean",
                  "description": "Whether policy is locked"
                },
                "retentionPeriod": {
                  "type": "string",
                  "description": "Retention period in seconds"
                }
              },
              "description": "Retention policy",
              "required": [
                "effectiveTime",
                "isLocked",
                "retentionPeriod"
              ]
            },
            "objectRetention": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "description": "Object retention mode"
                }
              },
              "description": "Object retention configuration",
              "required": [
                "mode"
              ]
            },
            "softDeletePolicy": {
              "type": "object",
              "properties": {
                "retentionDurationSeconds": {
                  "type": "string",
                  "description": "Retention duration in seconds"
                },
                "effectiveTime": {
                  "type": "string",
                  "description": "When policy became effective (RFC 3339 format)"
                }
              },
              "description": "Soft delete policy",
              "required": [
                "effectiveTime",
                "retentionDurationSeconds"
              ]
            },
            "encryption": {
              "type": "object",
              "properties": {
                "defaultKmsKeyName": {
                  "type": "string",
                  "description": "Default KMS key resource name"
                }
              },
              "description": "Encryption configuration",
              "required": [
                "defaultKmsKeyName"
              ]
            },
            "owner": {
              "type": "object",
              "properties": {
                "entity": {
                  "type": "string",
                  "description": "Owner entity"
                },
                "entityId": {
                  "type": "string",
                  "description": "Owner entity ID"
                }
              },
              "description": "Bucket owner information",
              "required": [
                "entity",
                "entityId"
              ]
            },
            "labels": {
              "type": "object",
              "properties": {},
              "description": "User-defined labels (key-value pairs)"
            },
            "defaultEventBasedHold": {
              "type": "boolean",
              "description": "Default event-based hold for new objects"
            },
            "rpo": {
              "type": "string",
              "description": "Recovery Point Objective (\"DEFAULT\" or \"ASYNC_TURBO\")"
            },
            "locationType": {
              "type": "string",
              "description": "Type of location (e.g., \"region\", \"dual-region\")"
            },
            "projectNumber": {
              "type": "string",
              "description": "Project number bucket belongs to"
            },
            "satisfiesPZS": {
              "type": "boolean",
              "description": "Whether bucket satisfies Zone Separation"
            },
            "satisfiesPZI": {
              "type": "boolean",
              "description": "Whether bucket satisfies Zone Isolation"
            }
          },
          "description": "A dictionary representing the bucket properties\nto create. Will be validated against the BucketRequest model. If not provided, a default\nbucket with auto-generated name will be created. Supported keys:",
          "required": [
            "autoclass",
            "billing",
            "cors",
            "customPlacementConfig",
            "defaultEventBasedHold",
            "encryption",
            "hierarchicalNamespace",
            "iamConfiguration",
            "ipFilter",
            "labels",
            "lifecycle",
            "location",
            "locationType",
            "logging",
            "name",
            "objectRetention",
            "owner",
            "projectNumber",
            "retentionPolicy",
            "rpo",
            "satisfiesPZI",
            "satisfiesPZS",
            "softDeletePolicy",
            "storageClass",
            "versioning",
            "website"
          ]
        },
        "predefinedAcl": {
          "type": "string",
          "description": "Apply a predefined set of access controls to this bucket.\nValid values:\n- \"authenticatedRead\": Project team owners get OWNER access, allAuthenticatedUsers get READER access\n- \"private\": Project team owners get OWNER access\n- \"projectPrivate\": Project team members get access according to their roles\n- \"publicRead\": Project team owners get OWNER access, allUsers get READER access\n- \"publicReadWrite\": Project team owners get OWNER access, allUsers get WRITER access\nDefaults to None."
        },
        "predefined_default_object_acl": {
          "type": "string",
          "description": "Apply a predefined set of default object\naccess controls to this bucket. Valid values:\n- \"authenticatedRead\": Object owner gets OWNER access, allAuthenticatedUsers get READER access\n- \"bucketOwnerFullControl\": Object owner gets OWNER access, project team owners get OWNER access\n- \"bucketOwnerRead\": Object owner gets OWNER access, project team owners get READER access\n- \"private\": Object owner gets OWNER access\n- \"projectPrivate\": Object owner gets OWNER access, project team members get access according to roles\n- \"publicRead\": Object owner gets OWNER access, allUsers get READER access\nDefaults to None."
        },
        "projection": {
          "type": "string",
          "description": "Set of properties to return in the response. Valid values:\n- \"full\": Include all properties\n- \"noAcl\": Omit owner, acl and defaultObjectAcl properties\nDefaults to \"noAcl\"."
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets. Defaults to None."
        },
        "enableObjectRetention": {
          "type": "boolean",
          "description": "If True, enables object retention on the bucket.\nDefaults to False."
        }
      },
      "required": [
        "project"
      ]
    }
  },
  {
    "name": "delete_bucket",
    "description": "Deletes an empty bucket.\n\nDeletions are permanent unless soft delete is enabled on the bucket. This function\nchecks for metageneration match conditions and ensures the bucket is empty before deletion.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket to delete. Must be a valid, non-empty bucket name."
        },
        "if_metageneration_match": {
          "type": "string",
          "description": "If set, deletes only if the bucket's metageneration\nmatches this value."
        },
        "if_metageneration_not_match": {
          "type": "string",
          "description": "If set, deletes only if the bucket's metageneration\ndoes not match this value."
        }
      },
      "required": [
        "bucket"
      ]
    }
  },
  {
    "name": "get_bucket_details",
    "description": "Returns metadata for the specified bucket.\n\nThis function supports conditional fetches based on metageneration and supports\nretrieval of soft-deleted buckets if specified.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket to retrieve metadata for."
        },
        "generation": {
          "type": "string",
          "description": "If specified, fetches the version of the bucket\nmatching this generation. Required if soft_deleted is True."
        },
        "soft_deleted": {
          "type": "boolean",
          "description": "If True, retrieves the soft-deleted version of the bucket."
        },
        "if_metageneration_match": {
          "type": "string",
          "description": "Returns metadata only if the bucket's\nmetageneration matches this value."
        },
        "if_metageneration_not_match": {
          "type": "string",
          "description": "Returns metadata only if the bucket's\nmetageneration does not match this value."
        },
        "projection": {
          "type": "string",
          "description": "Set of properties to return. Acceptable values:\n- \"full\": Includes all properties.\n- \"noAcl\": Excludes owner, acl, and defaultObjectAcl. Default is \"noAcl\"."
        }
      },
      "required": [
        "bucket"
      ]
    }
  },
  {
    "name": "get_bucket_iam_policy",
    "description": "Returns an IAM policy for the specified bucket.\n\nThis function retrieves the IAM policy for a Google Cloud Storage bucket, with support\nfor different policy format versions and proper error handling for various edge cases.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket whose IAM policy is being requested. Must be a valid,\nnon-empty bucket name that follows Google Cloud Storage naming conventions."
        },
        "options_requested_policy_version": {
          "type": "integer",
          "description": "The desired IAM policy format version\nto be returned. Must be >= 1 if specified. Defaults to None (latest version).\nDifferent versions may have different field structures and capabilities."
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets. Must be a valid project identifier if specified."
        }
      },
      "required": [
        "bucket"
      ]
    }
  },
  {
    "name": "get_bucket_storage_layout",
    "description": "Returns the storage layout configuration for the specified bucket.\n\nThis function retrieves the storage layout information for a Google Cloud Storage bucket,\nwith optional prefix-based access validation. The operation simulates the requirement\nfor `storage.objects.list` permission and validates access based on the specified prefix.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket whose storage layout is to be retrieved. Must be a valid,\nnon-empty bucket name that follows Google Cloud Storage naming conventions."
        },
        "prefix": {
          "type": "string",
          "description": "Optional prefix used for permission checks and access validation.\nWhen specified, the function validates that the caller would have permission to access\nobjects under this prefix path within the bucket. Must follow valid object naming\nconventions if provided. Defaults to None (no prefix restriction)."
        }
      },
      "required": [
        "bucket"
      ]
    }
  },
  {
    "name": "list_buckets",
    "description": "Retrieve buckets within a project with optional filtering and pagination.",
    "parameters": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "Identifier of the owning project. Cannot be empty."
        },
        "max_results": {
          "type": "integer",
          "description": "Maximum number of buckets to return. Must be a positive integer. Defaults to 1000."
        },
        "page_token": {
          "type": "string",
          "description": "String token representing the starting offset of the next page. If None or invalid, the listing starts at the first record."
        },
        "prefix": {
          "type": "string",
          "description": "If provided, only buckets whose names start with this prefix are returned."
        },
        "soft_deleted": {
          "type": "boolean",
          "description": "When True, only buckets whose softDeleted flag is True are returned. When False, soft-deleted buckets are excluded."
        },
        "projection": {
          "type": "string",
          "description": "Amount of metadata to include for each bucket. Allowed values: \"full\" or \"noAcl\". Default is \"noAcl\"."
        },
        "user_project": {
          "type": "string",
          "description": "Billing project identifier for Requester Pays buckets."
        }
      },
      "required": [
        "project"
      ]
    }
  },
  {
    "name": "lock_bucket_retention_policy",
    "description": "Locks retention policy on a bucket.\n\nThis function permanently locks the retention policy on a Google Cloud Storage bucket,\npreventing any future changes to the retention period. Once locked, the retention policy\ncannot be unlocked or modified. The operation is conditional on the bucket's current\nmetageneration matching the specified value for optimistic concurrency control.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket on which to lock the retention policy. Must be a valid,\nnon-empty bucket name that follows Google Cloud Storage naming conventions."
        },
        "if_metageneration_match": {
          "type": "string",
          "description": "Locks only if the bucket's current metageneration matches\nthis value exactly. This ensures the bucket hasn't been modified since the client\nlast retrieved it. Must be a non-empty string representing a valid metageneration value."
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets. Must be a valid project identifier if specified."
        }
      },
      "required": [
        "bucket",
        "if_metageneration_match"
      ]
    }
  },
  {
    "name": "patch_bucket_attributes",
    "description": "Patches a bucket.\n\nChanges to the bucket are readable immediately after writing, but configuration changes\nmay take time to propagate. This operation may be conditional on metageneration match.\nOnly the fields specified in bucket_request are updated; other fields remain unchanged.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket to update."
        },
        "if_metageneration_match": {
          "type": "string",
          "description": "Makes the patch conditional on whether the\nbucket's current metageneration matches this value. Defaults to None."
        },
        "if_metageneration_not_match": {
          "type": "string",
          "description": "Makes the patch conditional on whether the\nbucket's current metageneration does not match this value. Defaults to None."
        },
        "predefinedAcl": {
          "type": "string",
          "description": "Apply a predefined set of access controls to the bucket.\nValid values:\n- \"authenticatedRead\": Project team owners get OWNER access, allAuthenticatedUsers get READER access\n- \"private\": Project team owners get OWNER access\n- \"projectPrivate\": Project team members get access according to their roles\n- \"publicRead\": Project team owners get OWNER access, allUsers get READER access\n- \"publicReadWrite\": Project team owners get OWNER access, allUsers get WRITER access\nDefaults to None."
        },
        "predefined_default_object_acl": {
          "type": "string",
          "description": "Apply a predefined set of default object\naccess controls to the bucket. Valid values:\n- \"authenticatedRead\": Object owner gets OWNER access, allAuthenticatedUsers get READER access\n- \"bucketOwnerFullControl\": Object owner gets OWNER access, project team owners get OWNER access\n- \"bucketOwnerRead\": Object owner gets OWNER access, project team owners get READER access\n- \"private\": Object owner gets OWNER access\n- \"projectPrivate\": Object owner gets OWNER access, project team members get access according to roles\n- \"publicRead\": Object owner gets OWNER access, allUsers get READER access\nDefaults to None."
        },
        "projection": {
          "type": "string",
          "description": "Set of properties to return in the response. Valid values:\n- \"full\": Include all properties\n- \"noAcl\": Omit owner, acl and defaultObjectAcl properties\nDefaults to None (returns all properties)."
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets. Defaults to None."
        },
        "bucket_request": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Bucket name"
            },
            "storageClass": {
              "type": "string",
              "description": "Storage class (STANDARD, NEARLINE, COLDLINE, ARCHIVE, etc.)"
            },
            "location": {
              "type": "string",
              "description": "Bucket location"
            },
            "billing": {
              "type": "object",
              "properties": {
                "requesterPays": {
                  "type": "boolean",
                  "description": "Whether requester pays is enabled"
                }
              },
              "description": "Billing configuration",
              "required": [
                "requesterPays"
              ]
            },
            "cors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "maxAgeSeconds": {
                    "type": "integer",
                    "description": "Max age for preflight cache"
                  },
                  "method": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "HTTP methods allowed"
                  },
                  "origin": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Origins allowed"
                  },
                  "responseHeader": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Headers allowed in response"
                  }
                },
                "required": [
                  "maxAgeSeconds",
                  "method",
                  "origin",
                  "responseHeader"
                ]
              },
              "description": "CORS configuration rules"
            },
            "customPlacementConfig": {
              "type": "object",
              "properties": {
                "dataLocations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of regional locations"
                }
              },
              "description": "Custom dual region placement",
              "required": [
                "dataLocations"
              ]
            },
            "hierarchicalNamespace": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether hierarchical namespace is enabled"
                }
              },
              "description": "Hierarchical namespace config",
              "required": [
                "enabled"
              ]
            },
            "iamConfiguration": {
              "type": "object",
              "properties": {
                "uniformBucketLevelAccess": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether enabled"
                    },
                    "lockedTime": {
                      "type": "string",
                      "description": "When it was locked (RFC 3339 format)"
                    }
                  },
                  "description": "Uniform bucket-level access config",
                  "required": [
                    "enabled",
                    "lockedTime"
                  ]
                },
                "bucketPolicyOnly": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether enabled"
                    },
                    "lockedTime": {
                      "type": "string",
                      "description": "When it was locked (RFC 3339 format)"
                    }
                  },
                  "description": "Legacy bucket policy only config",
                  "required": [
                    "enabled",
                    "lockedTime"
                  ]
                },
                "publicAccessPrevention": {
                  "type": "string",
                  "description": "Public access prevention (\"inherited\" or \"enforced\")"
                }
              },
              "description": "IAM configuration",
              "required": [
                "bucketPolicyOnly",
                "publicAccessPrevention",
                "uniformBucketLevelAccess"
              ]
            },
            "ipFilter": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "description": "Filter mode (\"Enabled\" or \"Disabled\")"
                },
                "publicNetworkSource": {
                  "type": "object",
                  "properties": {
                    "allowedIpCidrRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of allowed IP CIDR ranges"
                    }
                  },
                  "description": "Public network sources",
                  "required": [
                    "allowedIpCidrRanges"
                  ]
                },
                "vpcNetworkSources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "network": {
                        "type": "string",
                        "description": "VPC network resource name"
                      },
                      "allowedIpCidrRanges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of allowed IP CIDR ranges"
                      }
                    },
                    "required": [
                      "allowedIpCidrRanges",
                      "network"
                    ]
                  },
                  "description": "VPC network sources"
                }
              },
              "description": "IP filter configuration",
              "required": [
                "mode",
                "publicNetworkSource",
                "vpcNetworkSources"
              ]
            },
            "lifecycle": {
              "type": "object",
              "properties": {
                "rule": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Action type (Delete, SetStorageClass, AbortIncompleteMultipartUpload)"
                          },
                          "storageClass": {
                            "type": "string",
                            "description": "Target storage class for SetStorageClass action"
                          }
                        },
                        "description": "Action to take",
                        "required": [
                          "storageClass",
                          "type"
                        ]
                      },
                      "condition": {
                        "type": "object",
                        "properties": {
                          "age": {
                            "type": "integer",
                            "description": "Age of object in days"
                          },
                          "createdBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "customTimeBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "daysSinceCustomTime": {
                            "type": "integer",
                            "description": "Days since custom time"
                          },
                          "daysSinceNoncurrentTime": {
                            "type": "integer",
                            "description": "Days since noncurrent time"
                          },
                          "isLive": {
                            "type": "boolean",
                            "description": "Whether object is live"
                          },
                          "matchesPattern": {
                            "type": "string",
                            "description": "Regular expression pattern"
                          },
                          "matchesPrefix": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Object name prefixes"
                          },
                          "matchesSuffix": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Object name suffixes"
                          },
                          "matchesStorageClass": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Storage classes to match"
                          },
                          "noncurrentTimeBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "numNewerVersions": {
                            "type": "integer",
                            "description": "Number of newer versions"
                          }
                        },
                        "description": "Conditions for applying the rule",
                        "required": [
                          "age",
                          "createdBefore",
                          "customTimeBefore",
                          "daysSinceCustomTime",
                          "daysSinceNoncurrentTime",
                          "isLive",
                          "matchesPattern",
                          "matchesPrefix",
                          "matchesStorageClass",
                          "matchesSuffix",
                          "noncurrentTimeBefore",
                          "numNewerVersions"
                        ]
                      }
                    },
                    "required": [
                      "action",
                      "condition"
                    ]
                  },
                  "description": "List of lifecycle rules"
                }
              },
              "description": "Lifecycle management rules",
              "required": [
                "rule"
              ]
            },
            "autoclass": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether autoclass is enabled"
                },
                "toggleTime": {
                  "type": "string",
                  "description": "Time autoclass was toggled (RFC 3339 format)"
                },
                "terminalStorageClass": {
                  "type": "string",
                  "description": "Terminal storage class (NEARLINE or ARCHIVE)"
                },
                "terminalStorageClassUpdateTime": {
                  "type": "string",
                  "description": "Time terminal class was updated (RFC 3339)"
                }
              },
              "description": "Autoclass configuration",
              "required": [
                "enabled",
                "terminalStorageClass",
                "terminalStorageClassUpdateTime",
                "toggleTime"
              ]
            },
            "versioning": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether versioning is enabled"
                }
              },
              "description": "Versioning configuration",
              "required": [
                "enabled"
              ]
            },
            "website": {
              "type": "object",
              "properties": {
                "mainPageSuffix": {
                  "type": "string",
                  "description": "Main page suffix (e.g., \"index.html\")"
                },
                "notFoundPage": {
                  "type": "string",
                  "description": "404 page (e.g., \"404.html\")"
                }
              },
              "description": "Website configuration",
              "required": [
                "mainPageSuffix",
                "notFoundPage"
              ]
            },
            "logging": {
              "type": "object",
              "properties": {
                "logBucket": {
                  "type": "string",
                  "description": "Destination bucket for logs"
                },
                "logObjectPrefix": {
                  "type": "string",
                  "description": "Prefix for log objects"
                }
              },
              "description": "Access logging configuration",
              "required": [
                "logBucket",
                "logObjectPrefix"
              ]
            },
            "retentionPolicy": {
              "type": "object",
              "properties": {
                "effectiveTime": {
                  "type": "string",
                  "description": "When policy became effective (RFC 3339 format)"
                },
                "isLocked": {
                  "type": "boolean",
                  "description": "Whether policy is locked"
                },
                "retentionPeriod": {
                  "type": "string",
                  "description": "Retention period in seconds"
                }
              },
              "description": "Retention policy",
              "required": [
                "effectiveTime",
                "isLocked",
                "retentionPeriod"
              ]
            },
            "objectRetention": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "description": "Object retention mode"
                }
              },
              "description": "Object retention configuration",
              "required": [
                "mode"
              ]
            },
            "softDeletePolicy": {
              "type": "object",
              "properties": {
                "retentionDurationSeconds": {
                  "type": "string",
                  "description": "Retention duration in seconds"
                },
                "effectiveTime": {
                  "type": "string",
                  "description": "When policy became effective (RFC 3339 format)"
                }
              },
              "description": "Soft delete policy",
              "required": [
                "effectiveTime",
                "retentionDurationSeconds"
              ]
            },
            "encryption": {
              "type": "object",
              "properties": {
                "defaultKmsKeyName": {
                  "type": "string",
                  "description": "Default KMS key resource name"
                }
              },
              "description": "Encryption configuration",
              "required": [
                "defaultKmsKeyName"
              ]
            },
            "owner": {
              "type": "object",
              "properties": {
                "entity": {
                  "type": "string",
                  "description": "Owner entity"
                },
                "entityId": {
                  "type": "string",
                  "description": "Owner entity ID"
                }
              },
              "description": "Bucket owner information",
              "required": [
                "entity",
                "entityId"
              ]
            },
            "labels": {
              "type": "object",
              "properties": {},
              "description": "User-defined labels (key-value pairs)"
            },
            "defaultEventBasedHold": {
              "type": "boolean",
              "description": "Default event-based hold for new objects"
            },
            "rpo": {
              "type": "string",
              "description": "Recovery Point Objective (\"DEFAULT\" or \"ASYNC_TURBO\")"
            },
            "locationType": {
              "type": "string",
              "description": "Type of location (e.g., \"region\", \"dual-region\")"
            },
            "projectNumber": {
              "type": "string",
              "description": "Project number bucket belongs to"
            },
            "satisfiesPZS": {
              "type": "boolean",
              "description": "Whether bucket satisfies Zone Separation"
            },
            "satisfiesPZI": {
              "type": "boolean",
              "description": "Whether bucket satisfies Zone Isolation"
            }
          },
          "description": "A dictionary representing the bucket properties\nto update. Will be validated against the BucketRequest model. Supported keys:",
          "required": [
            "autoclass",
            "billing",
            "cors",
            "customPlacementConfig",
            "defaultEventBasedHold",
            "encryption",
            "hierarchicalNamespace",
            "iamConfiguration",
            "ipFilter",
            "labels",
            "lifecycle",
            "location",
            "locationType",
            "logging",
            "name",
            "objectRetention",
            "owner",
            "projectNumber",
            "retentionPolicy",
            "rpo",
            "satisfiesPZI",
            "satisfiesPZS",
            "softDeletePolicy",
            "storageClass",
            "versioning",
            "website"
          ]
        }
      },
      "required": [
        "bucket"
      ]
    }
  },
  {
    "name": "relocate_bucket",
    "description": "Initiates a long-running Relocate Bucket operation on the specified bucket.\n\nThis function validates the relocation request and initiates a bucket relocation operation.\nThe operation moves a bucket from its current location to a specified destination location.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket to be relocated. Must be a valid, non-empty bucket name\nthat follows Google Cloud Storage naming conventions."
        },
        "request_body": {
          "type": "object",
          "properties": {
            "destinationLocation": {
              "type": "string",
              "description": "The new location to which the bucket will be moved.\n  Must be a valid Google Cloud region (e.g., 'us-central1', 'europe-west1')."
            },
            "destinationCustomPlacementConfig": {
              "type": "object",
              "properties": {
                "dataLocations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The list of regional locations that will be used\n      to store the bucket's data. Must contain exactly 2 locations for dual-region."
                }
              },
              "description": "Configuration for\n  Custom Dual Region. Optional. Contains:",
              "required": [
                "dataLocations"
              ]
            },
            "validateOnly": {
              "type": "boolean",
              "description": "If True, only validate the relocation request\n  without executing. Defaults to False."
            }
          },
          "description": "A dictionary containing the relocation configuration with\nthe following keys:",
          "required": [
            "destinationLocation"
          ]
        }
      },
      "required": [
        "bucket",
        "request_body"
      ]
    }
  },
  {
    "name": "restore_bucket",
    "description": "Restores a soft-deleted bucket.\n\nThis function restores a bucket only if it exists, is soft-deleted, and its generation\nmatches the provided generation value. The bucket's softDeleted flag is set to False\nupon successful restoration.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket to restore. Must be a valid, non-empty bucket name."
        },
        "generation": {
          "type": "string",
          "description": "The generation of the bucket for verification. Must match the\nbucket's current generation exactly."
        },
        "projection": {
          "type": "string",
          "description": "Set of properties to return. Defaults to \"full\".\nAllowed values:\n- \"full\": Includes all properties including acl and defaultObjectAcl.\n- \"noAcl\": Excludes acl and defaultObjectAcl properties."
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for the request. Required for\nRequester Pays buckets. Defaults to None."
        }
      },
      "required": [
        "bucket",
        "generation"
      ]
    }
  },
  {
    "name": "set_bucket_iam_policy",
    "description": "Updates an IAM policy for the specified bucket.\n\nThis function replaces the existing IAM policy for a bucket with the provided policy.\nThe policy must contain valid role bindings with properly formatted members and roles.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket whose IAM policy is being updated. Must be a valid,\nnon-empty bucket name that follows Google Cloud Storage naming conventions."
        },
        "policy": {
          "type": "object",
          "properties": {
            "bindings": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "IAM role string. Valid roles:\n        - \"roles/storage.admin\": Full control of Google Cloud Storage resources.\n        - \"roles/storage.objectViewer\": Read-only access to objects.\n        - \"roles/storage.objectCreator\": Access to create objects.\n        - \"roles/storage.objectAdmin\": Full control of objects.\n        - \"roles/storage.legacyObjectReader\": Read-only access to objects without listing.\n        - \"roles/storage.legacyObjectOwner\": Read/write access to existing objects without listing.\n        - \"roles/storage.legacyBucketReader\": Read access to buckets with object listing.\n        - \"roles/storage.legacyBucketWriter\": Read access with object creation/deletion.\n        - \"roles/storage.legacyBucketOwner\": Read and write access to buckets."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of member identifiers. Valid formats:\n        - \"allUsers\": Anyone on the internet.\n        - \"allAuthenticatedUsers\": Anyone with a Google account.\n        - \"user:<email>\": Specific user email (e.g., \"user:alice@gmail.com\").\n        - \"serviceAccount:<email>\": Service account email.\n        - \"group:<email>\": Google group email.\n        - \"domain:<domain>\": Google Apps domain (e.g., \"domain:example.com\").\n        - \"projectOwner:<projectid>\": Project owners.\n        - \"projectEditor:<projectid>\": Project editors.\n        - \"projectViewer:<projectid>\": Project viewers."
                  },
                  "condition": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Short description of the condition."
                      },
                      "description": {
                        "type": "string",
                        "description": "Detailed explanation."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Common Expression Language (CEL) syntax string."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional location for debugging."
                      }
                    },
                    "description": "Optional condition expression with:",
                    "required": [
                      "expression",
                      "title"
                    ]
                  }
                },
                "required": [
                  "members",
                  "role"
                ]
              },
              "description": "List of role-member associations. Each binding contains:"
            },
            "etag": {
              "type": "string",
              "description": "HTTP 1.1 entity tag for the policy. If provided, used for optimistic concurrency control."
            },
            "kind": {
              "type": "string",
              "description": "Resource kind, should be \"storage#policy\" if provided."
            },
            "resourceId": {
              "type": "string",
              "description": "Resource ID the policy applies to. Ignored on input."
            },
            "version": {
              "type": "integer",
              "description": "IAM policy format version. Defaults to 1 if not specified."
            }
          },
          "description": "The IAM policy to set on the bucket. Must contain:",
          "required": [
            "bindings"
          ]
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets. Defaults to None."
        }
      },
      "required": [
        "bucket",
        "policy"
      ]
    }
  },
  {
    "name": "stop_notification_channel",
    "description": "Stops watching resources through the specified notification channel.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "test_bucket_permissions",
    "description": "Tests a set of permissions on the given bucket to see which, if any, are held by the caller.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket on which permissions are being tested."
        },
        "permissions": {
          "type": "string",
          "description": "The list of permissions to test.\nOne of:\n- storage.buckets.delete\n- storage.buckets.get\n- storage.buckets.getIamPolicy\n- storage.buckets.create\n- storage.buckets.list\n- storage.buckets.setIamPolicy\n- storage.buckets.update\n- storage.objects.delete\n- storage.objects.get\n- storage.objects.getIamPolicy\n- storage.objects.create\n- storage.objects.list\n- storage.objects.setIamPolicy\n- storage.objects.update\n- storage.managedFolders.delete\n- storage.managedFolders.get\n- storage.managedFolders.getIamPolicy\n- storage.managedFolders.create\n- storage.managedFolders.list\n- storage.managedFolders.setIamPolicy"
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets."
        }
      },
      "required": [
        "bucket",
        "permissions"
      ]
    }
  },
  {
    "name": "update_bucket_attributes",
    "description": "Updates a bucket with complete replacement using PUT semantics.\n\nChanges to the bucket will be readable immediately after writing, but configuration changes\nmay take time to propagate. Unlike patch(), this operation completely replaces the bucket\nconfiguration with the provided bucket_request data, requiring bucket_request to be provided.",
    "parameters": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string",
          "description": "Name of the bucket to update."
        },
        "if_metageneration_match": {
          "type": "string",
          "description": "Makes the update conditional on whether the\nbucket's current metageneration matches this value. Defaults to None."
        },
        "if_metageneration_not_match": {
          "type": "string",
          "description": "Makes the update conditional on whether the\nbucket's current metageneration does not match this value. Defaults to None."
        },
        "predefinedAcl": {
          "type": "string",
          "description": "Apply a predefined set of access controls to the bucket.\nValid values:\n- \"authenticatedRead\": Project team owners get OWNER access, allAuthenticatedUsers get READER access\n- \"private\": Project team owners get OWNER access\n- \"projectPrivate\": Project team members get access according to their roles\n- \"publicRead\": Project team owners get OWNER access, allUsers get READER access\n- \"publicReadWrite\": Project team owners get OWNER access, allUsers get WRITER access\nDefaults to None."
        },
        "predefined_default_object_acl": {
          "type": "string",
          "description": "Apply a predefined set of default object\naccess controls to the bucket. Valid values:\n- \"authenticatedRead\": Object owner gets OWNER access, allAuthenticatedUsers get READER access\n- \"bucketOwnerFullControl\": Object owner gets OWNER access, project team owners get OWNER access\n- \"bucketOwnerRead\": Object owner gets OWNER access, project team owners get READER access\n- \"private\": Object owner gets OWNER access\n- \"projectPrivate\": Object owner gets OWNER access, project team members get access according to roles\n- \"publicRead\": Object owner gets OWNER access, allUsers get READER access\nDefaults to None."
        },
        "projection": {
          "type": "string",
          "description": "Set of properties to return in the response. Valid values:\n- \"full\": Include all properties\n- \"noAcl\": Omit owner, acl and defaultObjectAcl properties\nDefaults to None (returns all properties)."
        },
        "user_project": {
          "type": "string",
          "description": "The project to be billed for this request. Required for\nRequester Pays buckets. Defaults to None."
        },
        "bucket_request": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Bucket name (will be preserved as original bucket name)"
            },
            "storageClass": {
              "type": "string",
              "description": "Storage class (STANDARD, NEARLINE, COLDLINE, ARCHIVE, etc.)"
            },
            "location": {
              "type": "string",
              "description": "Bucket location"
            },
            "billing": {
              "type": "object",
              "properties": {
                "requesterPays": {
                  "type": "boolean",
                  "description": "Whether requester pays is enabled"
                }
              },
              "description": "Billing configuration",
              "required": [
                "requesterPays"
              ]
            },
            "cors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "maxAgeSeconds": {
                    "type": "integer",
                    "description": "Max age for preflight cache"
                  },
                  "method": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "HTTP methods allowed"
                  },
                  "origin": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Origins allowed"
                  },
                  "responseHeader": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Headers allowed in response"
                  }
                },
                "required": [
                  "maxAgeSeconds",
                  "method",
                  "origin",
                  "responseHeader"
                ]
              },
              "description": "CORS configuration rules"
            },
            "customPlacementConfig": {
              "type": "object",
              "properties": {
                "dataLocations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of regional locations"
                }
              },
              "description": "Custom dual region placement",
              "required": [
                "dataLocations"
              ]
            },
            "hierarchicalNamespace": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether hierarchical namespace is enabled"
                }
              },
              "description": "Hierarchical namespace config",
              "required": [
                "enabled"
              ]
            },
            "iamConfiguration": {
              "type": "object",
              "properties": {
                "uniformBucketLevelAccess": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether enabled"
                    },
                    "lockedTime": {
                      "type": "string",
                      "description": "When it was locked (RFC 3339 format)"
                    }
                  },
                  "description": "Uniform bucket-level access config",
                  "required": [
                    "enabled",
                    "lockedTime"
                  ]
                },
                "bucketPolicyOnly": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether enabled"
                    },
                    "lockedTime": {
                      "type": "string",
                      "description": "When it was locked (RFC 3339 format)"
                    }
                  },
                  "description": "Legacy bucket policy only config",
                  "required": [
                    "enabled",
                    "lockedTime"
                  ]
                },
                "publicAccessPrevention": {
                  "type": "string",
                  "description": "Public access prevention (\"inherited\" or \"enforced\")"
                }
              },
              "description": "IAM configuration",
              "required": [
                "bucketPolicyOnly",
                "publicAccessPrevention",
                "uniformBucketLevelAccess"
              ]
            },
            "ipFilter": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "description": "Filter mode (\"Enabled\" or \"Disabled\")"
                },
                "publicNetworkSource": {
                  "type": "object",
                  "properties": {
                    "allowedIpCidrRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of allowed IP CIDR ranges"
                    }
                  },
                  "description": "Public network sources",
                  "required": [
                    "allowedIpCidrRanges"
                  ]
                },
                "vpcNetworkSources": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "network": {
                        "type": "string",
                        "description": "VPC network resource name"
                      },
                      "allowedIpCidrRanges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of allowed IP CIDR ranges"
                      }
                    },
                    "required": [
                      "allowedIpCidrRanges",
                      "network"
                    ]
                  },
                  "description": "VPC network sources"
                }
              },
              "description": "IP filter configuration",
              "required": [
                "mode",
                "publicNetworkSource",
                "vpcNetworkSources"
              ]
            },
            "lifecycle": {
              "type": "object",
              "properties": {
                "rule": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Action type (Delete, SetStorageClass, AbortIncompleteMultipartUpload)"
                          },
                          "storageClass": {
                            "type": "string",
                            "description": "Target storage class for SetStorageClass action"
                          }
                        },
                        "description": "Action to take",
                        "required": [
                          "storageClass",
                          "type"
                        ]
                      },
                      "condition": {
                        "type": "object",
                        "properties": {
                          "age": {
                            "type": "integer",
                            "description": "Age of object in days"
                          },
                          "createdBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "customTimeBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "daysSinceCustomTime": {
                            "type": "integer",
                            "description": "Days since custom time"
                          },
                          "daysSinceNoncurrentTime": {
                            "type": "integer",
                            "description": "Days since noncurrent time"
                          },
                          "isLive": {
                            "type": "boolean",
                            "description": "Whether object is live"
                          },
                          "matchesPattern": {
                            "type": "string",
                            "description": "Regular expression pattern"
                          },
                          "matchesPrefix": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Object name prefixes"
                          },
                          "matchesSuffix": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Object name suffixes"
                          },
                          "matchesStorageClass": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Storage classes to match"
                          },
                          "noncurrentTimeBefore": {
                            "type": "string",
                            "description": "Date in RFC 3339 format"
                          },
                          "numNewerVersions": {
                            "type": "integer",
                            "description": "Number of newer versions"
                          }
                        },
                        "description": "Conditions for applying the rule",
                        "required": [
                          "age",
                          "createdBefore",
                          "customTimeBefore",
                          "daysSinceCustomTime",
                          "daysSinceNoncurrentTime",
                          "isLive",
                          "matchesPattern",
                          "matchesPrefix",
                          "matchesStorageClass",
                          "matchesSuffix",
                          "noncurrentTimeBefore",
                          "numNewerVersions"
                        ]
                      }
                    },
                    "required": [
                      "action",
                      "condition"
                    ]
                  },
                  "description": "List of lifecycle rules"
                }
              },
              "description": "Lifecycle management rules",
              "required": [
                "rule"
              ]
            },
            "autoclass": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether autoclass is enabled"
                },
                "toggleTime": {
                  "type": "string",
                  "description": "Time autoclass was toggled (RFC 3339 format)"
                },
                "terminalStorageClass": {
                  "type": "string",
                  "description": "Terminal storage class (NEARLINE or ARCHIVE)"
                },
                "terminalStorageClassUpdateTime": {
                  "type": "string",
                  "description": "Time terminal class was updated (RFC 3339)"
                }
              },
              "description": "Autoclass configuration",
              "required": [
                "enabled",
                "terminalStorageClass",
                "terminalStorageClassUpdateTime",
                "toggleTime"
              ]
            },
            "versioning": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether versioning is enabled"
                }
              },
              "description": "Versioning configuration",
              "required": [
                "enabled"
              ]
            },
            "website": {
              "type": "object",
              "properties": {
                "mainPageSuffix": {
                  "type": "string",
                  "description": "Main page suffix (e.g., \"index.html\")"
                },
                "notFoundPage": {
                  "type": "string",
                  "description": "404 page (e.g., \"404.html\")"
                }
              },
              "description": "Website configuration",
              "required": [
                "mainPageSuffix",
                "notFoundPage"
              ]
            },
            "logging": {
              "type": "object",
              "properties": {
                "logBucket": {
                  "type": "string",
                  "description": "Destination bucket for logs"
                },
                "logObjectPrefix": {
                  "type": "string",
                  "description": "Prefix for log objects"
                }
              },
              "description": "Access logging configuration",
              "required": [
                "logBucket",
                "logObjectPrefix"
              ]
            },
            "retentionPolicy": {
              "type": "object",
              "properties": {
                "effectiveTime": {
                  "type": "string",
                  "description": "When policy became effective (RFC 3339 format)"
                },
                "isLocked": {
                  "type": "boolean",
                  "description": "Whether policy is locked"
                },
                "retentionPeriod": {
                  "type": "string",
                  "description": "Retention period in seconds"
                }
              },
              "description": "Retention policy",
              "required": [
                "effectiveTime",
                "isLocked",
                "retentionPeriod"
              ]
            },
            "objectRetention": {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "description": "Object retention mode"
                }
              },
              "description": "Object retention configuration",
              "required": [
                "mode"
              ]
            },
            "softDeletePolicy": {
              "type": "object",
              "properties": {
                "retentionDurationSeconds": {
                  "type": "string",
                  "description": "Retention duration in seconds"
                },
                "effectiveTime": {
                  "type": "string",
                  "description": "When policy became effective (RFC 3339 format)"
                }
              },
              "description": "Soft delete policy",
              "required": [
                "effectiveTime",
                "retentionDurationSeconds"
              ]
            },
            "encryption": {
              "type": "object",
              "properties": {
                "defaultKmsKeyName": {
                  "type": "string",
                  "description": "Default KMS key resource name"
                }
              },
              "description": "Encryption configuration",
              "required": [
                "defaultKmsKeyName"
              ]
            },
            "owner": {
              "type": "object",
              "properties": {
                "entity": {
                  "type": "string",
                  "description": "Owner entity"
                },
                "entityId": {
                  "type": "string",
                  "description": "Owner entity ID"
                }
              },
              "description": "Bucket owner information",
              "required": [
                "entity",
                "entityId"
              ]
            },
            "labels": {
              "type": "object",
              "properties": {},
              "description": "User-defined labels (key-value pairs)"
            },
            "defaultEventBasedHold": {
              "type": "boolean",
              "description": "Default event-based hold for new objects"
            },
            "rpo": {
              "type": "string",
              "description": "Recovery Point Objective (\"DEFAULT\" or \"ASYNC_TURBO\")"
            },
            "locationType": {
              "type": "string",
              "description": "Type of location (e.g., \"region\", \"dual-region\")"
            },
            "projectNumber": {
              "type": "string",
              "description": "Project number bucket belongs to"
            },
            "satisfiesPZS": {
              "type": "boolean",
              "description": "Whether bucket satisfies Zone Separation"
            },
            "satisfiesPZI": {
              "type": "boolean",
              "description": "Whether bucket satisfies Zone Isolation"
            }
          },
          "description": "A dictionary representing the complete bucket\nconfiguration to replace existing configuration. REQUIRED for update operation.\nWill be validated against the BucketRequest model. Supported keys:",
          "required": [
            "autoclass",
            "billing",
            "cors",
            "customPlacementConfig",
            "defaultEventBasedHold",
            "encryption",
            "hierarchicalNamespace",
            "iamConfiguration",
            "ipFilter",
            "labels",
            "lifecycle",
            "location",
            "locationType",
            "logging",
            "name",
            "objectRetention",
            "owner",
            "projectNumber",
            "retentionPolicy",
            "rpo",
            "satisfiesPZI",
            "satisfiesPZS",
            "softDeletePolicy",
            "storageClass",
            "versioning",
            "website"
          ]
        }
      },
      "required": [
        "bucket"
      ]
    }
  }
]