[
  {
    "name": "copy_file",
    "description": "Creates a copy of a file if quota allows.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to copy. Must be a non-empty string."
        },
        "body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the copied file. If not provided, defaults to \"Copy of {original_file_name}\"."
            },
            "parents": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of parent folder IDs. If not provided, inherits from original file."
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Permission ID."
                  },
                  "role": {
                    "type": "string",
                    "description": "The role granted by this permission. Allowed values:\n        - 'viewer': Can view the file\n        - 'commenter': Can view and comment on the file\n        - 'editor': Can view, comment, and edit the file\n        - 'owner': Has full control over the file"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the grantee. Allowed values:\n        - 'user': Permission granted to a specific user\n        - 'group': Permission granted to a group\n        - 'domain': Permission granted to a domain\n        - 'anyone': Permission granted to anyone with the link"
                  },
                  "emailAddress": {
                    "type": "string",
                    "description": "The email address of the user or group."
                  },
                  "domain": {
                    "type": "string",
                    "description": "The domain name of the entity this permission refers to."
                  },
                  "allowFileDiscovery": {
                    "type": "boolean",
                    "description": "Whether the permission allows the file to be discovered through search."
                  },
                  "expirationTime": {
                    "type": "string",
                    "description": "The time at which this permission will expire, in RFC 3339 format."
                  }
                },
                "required": [
                  "id",
                  "role",
                  "type"
                ]
              },
              "description": "List of permission objects. Each permission object may include the following fields:"
            }
          },
          "description": "Dictionary of file properties with keys:"
        },
        "ignoreDefaultVisibility": {
          "type": "boolean",
          "description": "Whether to ignore default visibility set by domain administrators. Defaults to False."
        },
        "keepRevisionForever": {
          "type": "boolean",
          "description": "Whether to keep revision forever. Defaults to False."
        },
        "ocrLanguage": {
          "type": "string",
          "description": "The language to use for OCR. Defaults to empty string."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. Defaults to False."
        },
        "includePermissionsForView": {
          "type": "string",
          "description": "Specifies which additional view's permissions to include. Defaults to empty string."
        },
        "includeLabels": {
          "type": "string",
          "description": "Comma-separated list of labels to include. Defaults to empty string."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "create_comment_reply",
    "description": "Creates a reply to a comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment."
        },
        "body": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "The content of the reply."
            },
            "displayName": {
              "type": "string",
              "description": "The author's display name."
            },
            "emailAddress": {
              "type": "string",
              "description": "The author's email address."
            },
            "photoLink": {
              "type": "string",
              "description": "A link to the author's profile photo."
            }
          },
          "description": "Dictionary containing the reply details with keys:",
          "required": [
            "content",
            "displayName",
            "emailAddress",
            "photoLink"
          ]
        }
      },
      "required": [
        "body",
        "commentId",
        "fileId"
      ]
    }
  },
  {
    "name": "create_file_comment",
    "description": "Creates a body on a file.\n\nThis function creates a new body on the specified Google Drive file with\ninput validation and error handling.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to comment on."
        },
        "body": {
          "type": "object",
          "properties": {
            "content": {
              "type": "object",
              "description": "The plain text content of the comment."
            },
            "author": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "Display name of the author."
                },
                "emailAddress": {
                  "type": "string",
                  "description": "Valid email address of the author."
                }
              },
              "description": "Author information with keys:",
              "required": [
                "displayName",
                "emailAddress"
              ]
            },
            "quotedFileContent": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "The quoted content text (required if quotedFileContent provided)."
                },
                "mimeType": {
                  "type": "string",
                  "description": "MIME type of the quoted content (required if quotedFileContent provided)."
                }
              },
              "description": "Quoted content with keys:",
              "required": [
                "mimeType",
                "value"
              ]
            },
            "anchor": {
              "type": "string",
              "description": "Anchor point for the comment."
            },
            "resolved": {
              "type": "boolean",
              "description": "Whether the comment is resolved (defaults to False)."
            }
          },
          "description": "Dictionary containing comment properties. If None,\nan empty dictionary is used. Supported keys:",
          "required": [
            "content"
          ]
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "create_file_or_folder",
    "description": "Creates a new file or folder with permissions if quota allows.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the file."
            },
            "mimeType": {
              "type": "string",
              "description": "MIME type of the file. Can be:\n    - 'application/vnd.google-apps.document'\n    - 'application/vnd.google-apps.spreadsheet'\n    - 'application/vnd.google-apps.presentation'\n    - 'application/vnd.google-apps.drawing'\n    - 'application/vnd.google-apps.folder'\n    - 'application/vnd.google-apps.script'"
            },
            "parents": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of parent folder IDs."
            },
            "size": {
              "type": "string",
              "description": "File size in bytes (string that must be convertible to integer)."
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Permission ID"
                  },
                  "role": {
                    "type": "string",
                    "description": "Permission role (e.g., 'owner', 'reader', 'writer')"
                  },
                  "type": {
                    "type": "string",
                    "description": "Permission type (e.g., 'user', 'group', 'domain', 'anyone')"
                  },
                  "emailAddress": {
                    "type": "string",
                    "description": "Email address for user/group permissions"
                  }
                },
                "required": [
                  "emailAddress",
                  "id",
                  "role",
                  "type"
                ]
              },
              "description": "List of permission objects with keys:"
            },
            "modifiedTime": {
              "type": "string",
              "description": "Last modification timestamp in the format 'YYYY-MM-DDTHH:MM:SSZ'."
            }
          },
          "description": "Dictionary of file properties with keys:",
          "required": [
            "mimeType",
            "modifiedTime",
            "name",
            "parents",
            "permissions",
            "size"
          ]
        },
        "media_body": {
          "type": "object",
          "properties": {
            "size": {
              "type": "integer",
              "description": "File size in bytes."
            },
            "md5Checksum": {
              "type": "string",
              "description": "MD5 checksum of the file content."
            },
            "sha1Checksum": {
              "type": "string",
              "description": "SHA1 checksum of the file content."
            },
            "sha256Checksum": {
              "type": "string",
              "description": "SHA256 checksum of the file content."
            },
            "mimeType": {
              "type": "string",
              "description": "MIME type of the file content."
            },
            "imageMediaMetadata": {
              "type": "object",
              "properties": {},
              "description": "Metadata for image files."
            },
            "videoMediaMetadata": {
              "type": "object",
              "properties": {},
              "description": "Metadata for video files."
            },
            "filePath": {
              "type": "string",
              "description": "Path to file for content upload."
            }
          },
          "description": "Dictionary containing media content properties with keys:",
          "required": [
            "filePath",
            "imageMediaMetadata",
            "md5Checksum",
            "mimeType",
            "sha1Checksum",
            "sha256Checksum",
            "size",
            "videoMediaMetadata"
          ]
        },
        "enforceSingleParent": {
          "type": "boolean",
          "description": "Whether to enforce single parent. Defaults to False."
        },
        "ignoreDefaultVisibility": {
          "type": "boolean",
          "description": "Whether to ignore default visibility. Defaults to False."
        },
        "keepRevisionForever": {
          "type": "boolean",
          "description": "Whether to keep revision forever. Defaults to False."
        },
        "ocrLanguage": {
          "type": "string",
          "description": "The language to use for OCR. Defaults to empty string."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. Defaults to False."
        },
        "useContentAsIndexableText": {
          "type": "boolean",
          "description": "Whether to use content as indexable text. Defaults to False."
        },
        "includePermissionsForView": {
          "type": "string",
          "description": "Specifies which additional view's permissions to include. Defaults to empty string."
        },
        "includeLabels": {
          "type": "string",
          "description": "Comma-separated list of labels to include. Defaults to empty string."
        }
      }
    }
  },
  {
    "name": "create_file_revision",
    "description": "Create a new revision for a file.\n\nThis function creates a new revision for a file with the given content. It\ngenerates a unique revision ID based on the existing revisions in the file's\ndata structure, creates a revision content structure matching the expected\nJSON format, and validates the revision using the RevisionModel. The function\nthen adds the revision to the file's revisions list.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user creating the revision."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file to which the revision is being added."
        },
        "content": {
          "type": "object",
          "description": "The content to be added to the revision."
        }
      },
      "required": [
        "content",
        "file_id",
        "user_id"
      ]
    }
  },
  {
    "name": "create_permission",
    "description": "Creates a permission for a file or shared drive.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file or shared drive."
        },
        "body": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "The role granted by this permission, defaults to 'reader' (alias for 'viewer'). Possible values:\n    - 'viewer': Can view the file\n    - 'commenter': Can view and comment on the file\n    - 'editor': Can view, comment, and edit the file\n    - 'owner': Has full control over the file"
            },
            "type": {
              "type": "string",
              "description": "The type of the grantee, defaults to 'user'. Possible values:\n    - 'user': Permission granted to a specific user\n    - 'group': Permission granted to a group\n    - 'domain': Permission granted to a domain\n    - 'anyone': Permission granted to anyone with the link"
            },
            "emailAddress": {
              "type": "string",
              "description": "The email address of the user or group to grant the permission to. This will be normalized to lowercase."
            },
            "domain": {
              "type": "string",
              "description": "The domain name (e.g. 'example.com') of the entity this permission refers to."
            },
            "allowFileDiscovery": {
              "type": "boolean",
              "description": "Whether the permission allows the file to be discovered through search, defaults to False."
            },
            "expirationTime": {
              "type": "string",
              "description": "The time at which this permission will expire, in RFC 3339 format. Example: `'2025-06-30T12:00:00Z'` (UTC) or `'2025-06-30T08:00:00-04:00'`."
            }
          },
          "description": "Dictionary of permission properties with keys:",
          "required": [
            "allowFileDiscovery",
            "domain",
            "emailAddress",
            "expirationTime",
            "role",
            "type"
          ]
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "create_shared_drive",
    "description": "Creates a shared drive. If requestId is provided, it's used as the drive's ID and for idempotency.\n\nOtherwise, an internal ID is generated.",
    "parameters": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "description": "An ID, such as a random UUID. If provided, this ID is used\nas the drive's ID. If a drive with this ID already exists,\nit is returned. If None or empty, an internal ID is\ngenerated for a new drive."
        },
        "body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the shared drive."
            },
            "restrictions": {
              "type": "object",
              "properties": {
                "adminManagedRestrictions": {
                  "type": "boolean",
                  "description": "Whether administrative privileges on this shared drive are required to modify restrictions."
                },
                "copyRequiresWriterPermission": {
                  "type": "boolean",
                  "description": "Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters."
                },
                "domainUsersOnly": {
                  "type": "boolean",
                  "description": "Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs."
                },
                "driveMembersOnly": {
                  "type": "boolean",
                  "description": "Whether access to items inside this shared drive is restricted to its members."
                }
              },
              "description": "A dictionary of restrictions to apply to the drive, with keys:",
              "required": [
                "adminManagedRestrictions",
                "copyRequiresWriterPermission",
                "domainUsersOnly",
                "driveMembersOnly"
              ]
            },
            "hidden": {
              "type": "boolean",
              "description": "Whether the shared drive is hidden from default view."
            },
            "themeId": {
              "type": "string",
              "description": "The ID of the theme to apply to this shared drive."
            }
          },
          "description": "Dictionary of drive properties. Valid keys:"
        }
      }
    }
  },
  {
    "name": "delete_comment_reply",
    "description": "Deletes a reply.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment."
        },
        "replyId": {
          "type": "string",
          "description": "The ID of the reply to delete."
        }
      },
      "required": [
        "commentId",
        "fileId",
        "replyId"
      ]
    }
  },
  {
    "name": "delete_file_comment",
    "description": "Deletes a comment from a file in Google Drive.\n\nThis function permanently removes a comment from a file. The comment is\nidentified by its `commentId` and the `fileId` of the file it is associated\nwith. If the comment does not exist or the provided IDs are incorrect,\nan error will be raised.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file the comment belongs to."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment to delete."
        }
      },
      "required": [
        "commentId",
        "fileId"
      ]
    }
  },
  {
    "name": "delete_file_permanently",
    "description": "Permanently deletes a file owned by the user without moving it to trash.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to delete."
        },
        "enforceSingleParent": {
          "type": "boolean",
          "description": "Whether to enforce single parent. Defaults to False."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. Defaults to False."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "delete_permission",
    "description": "Deletes a permission.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file or shared drive."
        },
        "permissionId": {
          "type": "string",
          "description": "The ID of the permission to delete."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. Defaults to False."
        },
        "useDomainAdminAccess": {
          "type": "boolean",
          "description": "Whether to use domain admin access. Defaults to False."
        }
      },
      "required": [
        "fileId",
        "permissionId"
      ]
    }
  },
  {
    "name": "delete_shared_drive",
    "description": "Permanently deletes a shared drive for which the user is an organizer.\n\nThis function permanently removes a shared drive from the user's account. The drive\nmust be identified by its unique `driveId`. For the operation to succeed, the user\nmust have the appropriate permissions (e.g., be an organizer) for the specified drive.\nOnce deleted, the drive and all of its contents are irretrievably lost.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The unique identifier of the shared drive to be deleted."
        }
      },
      "required": [
        "driveId"
      ]
    }
  },
  {
    "name": "empty_files_from_trash",
    "description": "Permanently deletes all of the trashed files owned by the user.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive to empty trash from."
        },
        "enforceSingleParent": {
          "type": "boolean",
          "description": "Whether to enforce single parent."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives."
        }
      }
    }
  },
  {
    "name": "export_file_content",
    "description": "Export file content to a different format.\n\nThis function exports the content of a file to a different format. It checks\nif the export is cached and returns the cached content if available. If not,\nit decodes the current content, validates the export format, and exports the\ncontent to the target MIME type. Finally, it caches the exported content and\nreturns the exported content.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user exporting the file content."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file to export content from."
        },
        "target_mime": {
          "type": "string",
          "description": "The target MIME type for export."
        }
      },
      "required": [
        "file_id",
        "target_mime",
        "user_id"
      ]
    }
  },
  {
    "name": "export_google_doc",
    "description": "Exports a Google Doc to the requested MIME type and returns binary content.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to export. Must be a non-empty string."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type to export to. Must be a non-empty string."
        }
      },
      "required": [
        "fileId",
        "mimeType"
      ]
    }
  },
  {
    "name": "generate_file_ids",
    "description": "Generates a set of file IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "description": "Number of IDs to generate."
        },
        "space": {
          "type": "string",
          "description": "The space in which the IDs can be used."
        }
      }
    }
  },
  {
    "name": "get_app_details",
    "description": "Gets a specific app.",
    "parameters": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "description": "The ID of the app to retrieve."
        }
      },
      "required": [
        "appId"
      ]
    }
  },
  {
    "name": "get_changes_start_page_token",
    "description": "Gets the starting pageToken for listing future changes.\n\nThis method retrieves a starting page token that can be used to list changes\nto files in a user's Drive or a shared drive. The page token doesn't expire\nand should be stored for subsequent change tracking operations.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive for which the starting \npageToken for listing future changes will be returned. Must be a valid \nshared drive ID if provided. Defaults to empty string (user's My Drive)."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether the requesting application \nsupports both My Drives and shared drives. When True, enables access \nto shared drive content. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "**DEPRECATED** - Use supportsAllDrives \ninstead. This parameter will be removed in a future version. Defaults to False."
        },
        "teamDriveId": {
          "type": "string",
          "description": "**DEPRECATED** - Use driveId instead. \nThis parameter will be removed in a future version. Defaults to empty string.\n    "
        }
      }
    }
  },
  {
    "name": "get_comment_reply",
    "description": "Gets a reply by ID from a comment on a file.\n\nThis function retrieves a specific reply to a comment on a Google Drive file.\nDeleted replies are excluded by default unless explicitly requested.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment."
        },
        "replyId": {
          "type": "string",
          "description": "The ID of the reply to retrieve."
        },
        "includeDeleted": {
          "type": "boolean",
          "description": "Whether to include deleted replies in the response.\nDefaults to False. When False, deleted replies return None."
        }
      },
      "required": [
        "commentId",
        "fileId",
        "replyId"
      ]
    }
  },
  {
    "name": "get_drive_account_info",
    "description": "Gets information about the user's Drive account.\n\nThis function retrieves account information for the authenticated user\nfrom the Google Drive API. The response can be filtered to include\nonly specific fields using the fields parameter.",
    "parameters": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "string",
          "description": "A comma-separated list of fields to include in the response.\nUse '*' to include all fields (default).\nFor partial responses, use comma-separated field names (e.g., 'user,storageQuota').\nFor nested fields, use dot notation (e.g., 'user.displayName,storageQuota.limit').\nField names are case-sensitive and whitespace around commas is ignored."
        }
      }
    }
  },
  {
    "name": "get_file_comment",
    "description": "Gets a comment by ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file the comment belongs to."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment to get."
        },
        "includeDeleted": {
          "type": "boolean",
          "description": "Whether to include deleted comments."
        }
      },
      "required": [
        "commentId",
        "fileId"
      ]
    }
  },
  {
    "name": "get_file_content",
    "description": "Get file content, optionally for a specific revision.\n\nThis function retrieves the content of a file, optionally for a specific revision.\nIf a revision ID is provided, it searches the file's revisions list for the matching\nrevision and returns its content. If no revision ID is provided, it returns the current\ncontent of the file.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user retrieving the file content."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file to retrieve content from."
        },
        "revision_id": {
          "type": "string",
          "description": "Optional revision ID to get specific revision."
        }
      },
      "required": [
        "file_id",
        "user_id"
      ]
    }
  },
  {
    "name": "get_file_metadata_or_content",
    "description": "Gets a file's metadata.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to retrieve."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "get_permission",
    "description": "Gets a permission by ID.\n\nRetrieves a specific permission by its ID for the specified file. The function\nsupports various access patterns including shared drives and domain admin access.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file or shared drive. Must be a non-empty string."
        },
        "permissionId": {
          "type": "string",
          "description": "The ID of the permission to retrieve. Must be a non-empty string."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether the requesting application supports both My Drives \nand shared drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. Deprecated - use \nsupportsAllDrives instead. Defaults to False."
        },
        "useDomainAdminAccess": {
          "type": "boolean",
          "description": "Issue the request as a domain administrator. If set to \ntrue, grants access if the file ID refers to a shared drive and the requester \nis an administrator of the domain to which the shared drive belongs. Defaults to False."
        }
      },
      "required": [
        "fileId",
        "permissionId"
      ]
    }
  },
  {
    "name": "get_shared_drive_metadata",
    "description": "Gets a shared drive's metadata by ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive."
        }
      },
      "required": [
        "driveId"
      ]
    }
  },
  {
    "name": "hide_shared_drive",
    "description": "Hides a shared drive from the default view.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive to hide. Must be a non-empty string."
        }
      },
      "required": [
        "driveId"
      ]
    }
  },
  {
    "name": "list_changes",
    "description": "Lists the changes for a user or shared drive.\n\nThis method retrieves a list of changes that have occurred since the specified \npage token. Changes include file additions, modifications, deletions, and \npermission changes.",
    "parameters": {
      "type": "object",
      "properties": {
        "pageToken": {
          "type": "string",
          "description": "The token for continuing a previous list request on the next page.\nThis token is obtained from a previous changes.list request or from \nchanges.getStartPageToken(). Cannot be empty."
        },
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive for which changes are returned.\nOnly changes to files within this shared drive will be returned.\nDefaults to empty string (user's My Drive)."
        },
        "includeCorpusRemovals": {
          "type": "boolean",
          "description": "Whether changes should include the file resource \nif the file is still accessible by the user at the time of the request.\nDefaults to False."
        },
        "includeItemsFromAllDrives": {
          "type": "boolean",
          "description": "Whether both My Drive and shared drive items \nshould be included in results. Defaults to False."
        },
        "includeRemoved": {
          "type": "boolean",
          "description": "Whether to include changes indicating that items have \nbeen removed from the list of changes. Defaults to True."
        },
        "includeTeamDriveItems": {
          "type": "boolean",
          "description": "**DEPRECATED** - Use includeItemsFromAllDrives \ninstead. Whether to include changes for team drive items. Defaults to False."
        },
        "pageSize": {
          "type": "integer",
          "description": "Maximum number of changes to return per page. Must be between \n1 and 1000 inclusive. Defaults to 100."
        },
        "restrictToMyDrive": {
          "type": "boolean",
          "description": "Whether to restrict the results to changes inside \nthe My Drive hierarchy. This cannot be used together with teamDriveId or driveId.\nDefaults to False."
        },
        "spaces": {
          "type": "string",
          "description": "A comma-separated list of spaces to query within the user corpus.\nSupported values are 'drive', 'appDataFolder', and 'photos'. Defaults to 'drive'."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether the requesting application supports both \nMy Drives and shared drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "**DEPRECATED** - Use supportsAllDrives instead.\nWhether the requesting application supports Team Drives. Defaults to False."
        },
        "teamDriveId": {
          "type": "string",
          "description": "**DEPRECATED** - Use driveId instead. The ID of the Team Drive \nfor which changes will be returned. Defaults to empty string."
        },
        "includePermissionsForView": {
          "type": "string",
          "description": "Specifies which additional view's permissions \nto include in the response. Only 'published' is supported. Defaults to empty string."
        },
        "includeLabels": {
          "type": "string",
          "description": "A comma-separated list of IDs of labels to include in \nthe labelInfo part of the response. Defaults to empty string.\n    "
        }
      },
      "required": [
        "pageToken"
      ]
    }
  },
  {
    "name": "list_comment_replies",
    "description": "Lists a comment's replies.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file. Must not be empty."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment. Must not be empty."
        },
        "includeDeleted": {
          "type": "boolean",
          "description": "Whether to include deleted replies. Defaults to False."
        },
        "pageSize": {
          "type": "integer",
          "description": "Maximum number of replies to return per page. Must be positive. Defaults to 20."
        },
        "pageToken": {
          "type": "string",
          "description": "Token for the next page of results. Defaults to an empty string."
        }
      },
      "required": [
        "commentId",
        "fileId"
      ]
    }
  },
  {
    "name": "list_comments",
    "description": "Lists comments for a file.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to list comments for. Cannot be empty."
        },
        "includeDeleted": {
          "type": "boolean",
          "description": "Whether to include deleted comments.\nIf False, deleted comments are excluded from the response. Defaults to False."
        },
        "pageSize": {
          "type": "integer",
          "description": "Maximum number of comments to return per page.\nMust be between 1 and 100, inclusive. Defaults to 20."
        },
        "pageToken": {
          "type": "string",
          "description": "Page token for continuing a previous list request.\nProvides the starting point for pagination. Expected to be an integer string if provided.\nDefaults to an empty string."
        },
        "startModifiedTime": {
          "type": "string",
          "description": "The start time to filter comments by.\nOnly comments modified on or after this timestamp are returned.\nFormat: RFC 3339 timestamp (e.g., '2023-01-01T00:00:00Z').\nDefaults to an empty string (no time filter)."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "list_file_revisions",
    "description": "List all revisions for a file.\n\nThis function retrieves all revisions for a file. It returns the file's revisions\nlist, which is a list of dictionaries containing the revision information.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user retrieving the revisions."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file to retrieve revisions from."
        }
      },
      "required": [
        "file_id",
        "user_id"
      ]
    }
  },
  {
    "name": "list_installed_apps",
    "description": "Lists a user's installed apps.\n\nThis function retrieves all installed apps for the current user and applies\noptional filtering based on file extensions and MIME types. The languageCode\nparameter is accepted for API compatibility but does not affect the current\nimplementation.",
    "parameters": {
      "type": "object",
      "properties": {
        "appFilterExtensions": {
          "type": "string",
          "description": "A comma-separated list of file extensions \nto filter by (e.g., \"pdf,txt,docx\"). Only apps that support these extensions\nwill be returned. Defaults to '' (no filtering)."
        },
        "appFilterMimeTypes": {
          "type": "string",
          "description": "A comma-separated list of MIME types to \nfilter by (e.g., \"text/plain,application/pdf\"). Only apps that support \nthese MIME types will be returned. Defaults to '' (no filtering)."
        },
        "languageCode": {
          "type": "string",
          "description": "The language code to use for localized strings.\nCurrently unused but accepted for API compatibility. Defaults to ''.\n    "
        }
      }
    }
  },
  {
    "name": "list_permissions",
    "description": "Lists a file's or shared drive's permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file or shared drive."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives. If True, includes permissions from all drives. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. If True, includes team drive specific permissions. Defaults to False."
        },
        "useDomainAdminAccess": {
          "type": "boolean",
          "description": "Whether to use domain admin access. If True, includes domain-wide permissions. Defaults to False."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "list_user_files",
    "description": "Lists the user's files with support for Shared Drives, ordering, and pagination.",
    "parameters": {
      "type": "object",
      "properties": {
        "corpora": {
          "type": "string",
          "description": "Comma-separated list of corpora. Defaults to 'user', which means\nonly files owned by or shared with the user will be returned."
        },
        "driveId": {
          "type": "string",
          "description": "ID of the shared drive to search. Defaults to empty string,\nmeaning no specific drive filtering is applied."
        },
        "includeItemsFromAllDrives": {
          "type": "boolean",
          "description": "Whether to include items from all drives.\nDefaults to False, meaning only items from the user's My Drive are included."
        },
        "includeTeamDriveItems": {
          "type": "boolean",
          "description": "Whether to include team drive items.\nDefaults to False, meaning team drive items are excluded."
        },
        "orderBy": {
          "type": "string",
          "description": "Sort order for the results. Defaults to 'folder,modifiedTime desc,name',\nwhich means:\n- Folders are listed first\n- Then files are sorted by modified time in descending order (newest first)\n- Finally, items with the same modified time are sorted by name"
        },
        "pageSize": {
          "type": "integer",
          "description": "Maximum number of files to return. Must be a positive integer.\nDefaults to 10, meaning at most 10 files will be returned per page."
        },
        "pageToken": {
          "type": "string",
          "description": "Token for the next page of results. Defaults to empty string,\nmeaning the first page of results will be returned."
        },
        "q": {
          "type": "string",
          "description": "Query string for filtering files. Defaults to empty string,\nmeaning no filtering is applied. The query string should follow the format: `field operator value`.\nLogical Operators:\nMultiple conditions can be combined using `and` and `or` logical operators.\nFor example, `name = 'file.txt' and trashed = False or mimeType = 'image/jpeg'`\nis processed as `(name = 'file.txt' and trashed = False) or (mimeType = 'image/jpeg')`.\nParentheses for explicitly grouping conditions (e.g., `A and (B or C)`) are not supported.\nnot supported by the current parser. To achieve a query like `A and (B or C)`,\nyou must write it in disjunctive normal form: `(A and B) or (A and C)`.\nFor instance:\n`(name contains 'report' and mimeType = 'application/pdf') or (name contains 'report' and mimeType = 'text/plain')`\nSupported Operators:\n   - `=`: Equals. For exact matches.\n   - `!=`: Not equals.\n   - `contains`: Checks if the field's string representation contains the given value.\n   (e.g., `name contains 'report'`).\n   - `<`: Less than. Used for numeric or date/time fields.\n   - `<=`: Less than or equal to. Used for numeric or date/time fields.\n   - `>`: Greater than. Used for numeric or date/time fields.\n   - `>=`: Greater than or equal to. Used for numeric or date/time fields.\n   - `in`: Checks if a specific string value is present within a list-like field (e.g., `parents`).\n   The syntax is `'stringValue' in fieldName`.\n   For example, `'folderId123' in parents` checks if `'folderId123'`\n   is one of the IDs in the `parents` list of a file.\nValue Types:\n   - Strings: Must be enclosed in single (`'`) or double (`\"`) quotes\n   (e.g., `name = 'My Document.pdf'` or `description = \"Final Report\"`).\n   - Booleans: Use `True` or `False` (case-insensitive)\n   (e.g., `trashed = False` or `starred = True`).\n   - Date/Timestamps: For fields like `modifiedTime` or `createdTime`.\n   Values should be in a standard date/time format that can be parsed\n   (e.g., ISO 8601 format like `'2023-10-26T10:00:00Z'`).\nFilterable Fields:\nYou can attempt to filter on any field present in the file resource dictionary.\nCommon fields include:\n   - `name` (str): The name of the file.\n   - `mimeType` (str): The MIME type of the file\n   - `trashed` (bool): Whether the file is in the trash.\n   - `starred` (bool): Whether the file is starred.\n   - `createdTime` (str): The creation time (e.g., `'2024-01-01T00:00:00Z'`).\n   - `modifiedTime` (str): The last modification time.\n   - `parents` (List[str]): A list of parent folder IDs. Use with the `in` operator.\n   - `id` (str): The unique ID of the file.\n   - `description` (str): The file's description.\nExamples of `q` strings:\n   - `name = 'MyContract.pdf' and trashed = false`\n   - `mimeType = 'application/vnd.google-apps.folder' or starred = true`\n   - `modifiedTime > '2024-01-01T00:00:00Z'`\n   - `'specific_folder_id' in parents and name contains 'confidential'`\n   - `(description contains 'secret' and mimeType = 'application/pdf') or (description contains 'secret' and mimeType = 'text/csv')`"
        },
        "spaces": {
          "type": "string",
          "description": "Comma-separated list of spaces to search. Defaults to 'drive',\nwhich means only files in the user's Drive will be returned."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives. Defaults to False,\nmeaning shared drive operations are not supported."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives. Defaults to False,\nmeaning team drive operations are not supported."
        },
        "teamDriveId": {
          "type": "string",
          "description": "ID of the team drive to search. Defaults to empty string,\nmeaning no specific team drive filtering is applied."
        },
        "includePermissionsForView": {
          "type": "string",
          "description": "Specifies which additional view's permissions to include.\nDefaults to empty string, meaning no additional permissions are included."
        },
        "includeLabels": {
          "type": "string",
          "description": "Comma-separated list of labels to include. Defaults to empty string,\nmeaning no label filtering is applied."
        }
      }
    }
  },
  {
    "name": "list_user_shared_drives",
    "description": "Lists the user's shared drives.\n\nThis function returns a list of shared drives that the user is a member of.\nIt supports filtering by drive properties through the `q` parameter\nand allows for pagination using `pageSize` and `pageToken`.",
    "parameters": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "description": "Maximum number of shared drives to return per page.\nMust be an integer between 1 and 100."
        },
        "q": {
          "type": "string",
          "description": "Query string for searching shared drives. \nThe query supports the following fields and operators:\n    - Fields: 'name', 'id', 'createdTime', 'hidden', 'themeId'\n    - Operators: =, !=, <, <=, >, >=, contains, in\nYou can combine conditions with 'and' and 'or'.\nString values must be quoted. Example queries:\n    \"name = 'My Drive'\"\n    \"name contains 'Project' and hidden = false\"\n    \"createdTime >= '2023-01-01T00:00:00Z'\"\n    \"name = 'Team Drive' or themeId = 'blue-theme'\""
        },
        "pageToken": {
          "type": "string",
          "description": "(Optional) A base64-encoded token for pagination. The token encodes a JSON object with:\n- 'last_row_time' (str): The unix timestamp (as a string) when the last page was generated.\n- 'offset' (int): The offset (index) to start the next page from."
        }
      }
    }
  },
  {
    "name": "stop_channel_watch",
    "description": "Stops watching resources through this channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the channel to stop."
            },
            "resourceId": {
              "type": "string",
              "description": "The ID of the resource being watched."
            },
            "resourceUri": {
              "type": "string",
              "description": "The URI of the resource being watched."
            },
            "token": {
              "type": "string",
              "description": "The token used to authenticate the channel."
            },
            "expiration": {
              "type": "string",
              "description": "The time at which the channel will expire (RFC3339 format)."
            },
            "type": {
              "type": "string",
              "description": "The type of the channel."
            },
            "address": {
              "type": "string",
              "description": "The address where notifications are delivered."
            },
            "payload": {
              "type": "boolean",
              "description": "Whether to include the payload in notifications."
            },
            "params": {
              "type": "object",
              "properties": {},
              "description": "Additional parameters for the channel."
            }
          },
          "description": "Dictionary of channel properties. \nIf None or empty dictionary, no action is taken. Required key:",
          "required": [
            "address",
            "expiration",
            "id",
            "params",
            "payload",
            "resourceId",
            "resourceUri",
            "token",
            "type"
          ]
        }
      }
    }
  },
  {
    "name": "subscribe_to_file_changes",
    "description": "Subscribes to changes to a file.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to watch."
        },
        "body": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Channel ID."
            },
            "type": {
              "type": "string",
              "description": "Channel type."
            },
            "address": {
              "type": "string",
              "description": "Channel address."
            },
            "token": {
              "type": "string",
              "description": "Channel token."
            },
            "expiration": {
              "type": "string",
              "description": "Channel expiration time."
            }
          },
          "description": "Dictionary of watch properties with keys:",
          "required": [
            "address",
            "expiration",
            "id",
            "token",
            "type"
          ]
        },
        "acknowledgeAbuse": {
          "type": "boolean",
          "description": "Whether to acknowledge abuse."
        },
        "ignoreDefaultVisibility": {
          "type": "boolean",
          "description": "Whether to ignore default visibility."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether to support all drives."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "Whether to support team drives."
        },
        "includePermissionsForView": {
          "type": "string",
          "description": "Specifies which additional view's permissions to include."
        },
        "includeLabels": {
          "type": "string",
          "description": "Comma-separated list of labels to include."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "unhide_shared_drive",
    "description": "Restores a shared drive to the default view.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive."
        }
      },
      "required": [
        "driveId"
      ]
    }
  },
  {
    "name": "update_comment_reply",
    "description": "Updates a reply.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment."
        },
        "replyId": {
          "type": "string",
          "description": "The ID of the reply to update."
        },
        "body": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "The updated content of the reply."
            },
            "author": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "The author's display name."
                },
                "emailAddress": {
                  "type": "string",
                  "description": "The author's email address."
                },
                "photoLink": {
                  "type": "string",
                  "description": "A link to the author's profile photo."
                }
              },
              "description": "Updated information about the author with keys:",
              "required": [
                "displayName",
                "emailAddress",
                "photoLink"
              ]
            }
          },
          "description": "Dictionary containing the updated reply details with keys:",
          "required": [
            "author",
            "content"
          ]
        }
      },
      "required": [
        "commentId",
        "fileId",
        "replyId"
      ]
    }
  },
  {
    "name": "update_file_comment",
    "description": "Updates a comment with patch semantics.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file the comment belongs to."
        },
        "commentId": {
          "type": "string",
          "description": "The ID of the comment to update."
        },
        "body": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "The content of the comment."
            },
            "author": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "The display name of the author."
                },
                "emailAddress": {
                  "type": "string",
                  "description": "The email address of the author."
                }
              },
              "description": "Dictionary of author information with keys:",
              "required": [
                "displayName",
                "emailAddress"
              ]
            },
            "quotedFileContent": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "The quoted content."
                },
                "mimeType": {
                  "type": "string",
                  "description": "The MIME type of the quoted content."
                }
              },
              "description": "Dictionary of quoted content with keys:",
              "required": [
                "mimeType",
                "value"
              ]
            },
            "anchor": {
              "type": "string",
              "description": "The anchor point of the comment."
            },
            "resolved": {
              "type": "boolean",
              "description": "Whether the comment has been resolved."
            }
          },
          "description": "Dictionary of comment properties to update with keys:",
          "required": [
            "anchor",
            "author",
            "content",
            "quotedFileContent",
            "resolved"
          ]
        }
      },
      "required": [
        "commentId",
        "fileId"
      ]
    }
  },
  {
    "name": "update_file_content",
    "description": "Update file content with new bytes data.\n\nThis function updates the content of a file with new bytes data. It calculates\na new checksum for the new content, encodes it to base64, and creates a new\ncontent structure matching the expected JSON format. The function then validates\nthe new content using the FileContentModel and creates a new revision before\nupdating the file's content and size. Finally, it clears the export cache since\nthe content has changed.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The ID of the user updating the file content."
        },
        "file_id": {
          "type": "string",
          "description": "The ID of the file to which content is being updated."
        },
        "new_content": {
          "type": "object",
          "description": "The new content to be added to the file."
        }
      },
      "required": [
        "file_id",
        "new_content",
        "user_id"
      ]
    }
  },
  {
    "name": "update_file_metadata_or_content",
    "description": "Updates a file's metadata or content with patch semantics. \n\nThis means only the fields explicitly provided in the `body` dictionary\nwill be updated. All other file properties will remain unchanged.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file to update."
        },
        "body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "New name of the file."
            },
            "mimeType": {
              "type": "string",
              "description": "New MIME type of the file."
            },
            "parents": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "New list of parent folder IDs."
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "New list of permission objects."
            }
          },
          "description": "Dictionary of file properties to update with keys:",
          "required": [
            "mimeType",
            "name",
            "parents",
            "permissions"
          ]
        },
        "media_body": {
          "type": "object",
          "properties": {
            "size": {
              "type": "integer",
              "description": "File size in bytes."
            },
            "md5Checksum": {
              "type": "string",
              "description": "MD5 checksum of the file content."
            },
            "sha1Checksum": {
              "type": "string",
              "description": "SHA1 checksum of the file content."
            },
            "sha256Checksum": {
              "type": "string",
              "description": "SHA256 checksum of the file content."
            },
            "mimeType": {
              "type": "string",
              "description": "MIME type of the file content."
            },
            "imageMediaMetadata": {
              "type": "object",
              "properties": {},
              "description": "Metadata for image files."
            },
            "videoMediaMetadata": {
              "type": "object",
              "properties": {},
              "description": "Metadata for video files."
            },
            "filePath": {
              "type": "string",
              "description": "Path to file for content upload (creates new revision)."
            }
          },
          "description": "Dictionary containing media content properties to update with keys:",
          "required": [
            "filePath",
            "imageMediaMetadata",
            "md5Checksum",
            "mimeType",
            "sha1Checksum",
            "sha256Checksum",
            "size",
            "videoMediaMetadata"
          ]
        },
        "addParents": {
          "type": "string",
          "description": "Comma-separated list of parent IDs to add, defaults to ''."
        },
        "enforceSingleParent": {
          "type": "boolean",
          "description": "Whether to enforce single parent, defaults to False."
        },
        "removeParents": {
          "type": "string",
          "description": "Comma-separated list of parent IDs to remove, defaults to ''."
        }
      },
      "required": [
        "fileId"
      ]
    }
  },
  {
    "name": "update_permission",
    "description": "Updates a permission with patch semantics.",
    "parameters": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "string",
          "description": "The ID of the file or shared drive."
        },
        "permissionId": {
          "type": "string",
          "description": "The ID of the permission to update."
        },
        "body": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "The role granted by this permission. Possible values:\n    - 'viewer': Can view the file, (alias for 'reader')\n    - 'commenter': Can view and comment on the file\n    - 'editor': Can view, comment, and edit the file (alias for 'writer')\n    - 'owner': Has full control over the file"
            },
            "type": {
              "type": "string",
              "description": "The type of the grantee. Possible values:\n    - 'user': Permission granted to a specific user\n    - 'group': Permission granted to a group\n    - 'domain': Permission granted to a domain\n    - 'anyone': Permission granted to anyone with the link"
            },
            "emailAddress": {
              "type": "string",
              "description": "The email address of the user or group."
            },
            "domain": {
              "type": "string",
              "description": "The domain name of the entity this permission refers to."
            },
            "allowFileDiscovery": {
              "type": "boolean",
              "description": "Whether the permission allows the file to be discovered through search."
            },
            "expirationTime": {
              "type": "string",
              "description": "The time at which this permission will expire."
            }
          },
          "description": "Dictionary of permission properties to update with keys:",
          "required": [
            "allowFileDiscovery",
            "domain",
            "emailAddress",
            "expirationTime",
            "role",
            "type"
          ]
        },
        "transferOwnership": {
          "type": "boolean",
          "description": "Whether to transfer ownership to the specified user and downgrade the current owner to a writer."
        }
      },
      "required": [
        "fileId",
        "permissionId"
      ]
    }
  },
  {
    "name": "update_shared_drive_metadata",
    "description": "Updates the metadata for a shared drive.\n\nThis function modifies an existing shared drive's metadata based on the\nprovided `body`. The drive is identified by its `driveId`.",
    "parameters": {
      "type": "object",
      "properties": {
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive."
        },
        "body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the shared drive."
            },
            "restrictions": {
              "type": "object",
              "properties": {
                "adminManagedRestrictions": {
                  "type": "boolean",
                  "description": "Whether administrative privileges on this shared drive are required to modify restrictions."
                },
                "copyRequiresWriterPermission": {
                  "type": "boolean",
                  "description": "Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters."
                },
                "domainUsersOnly": {
                  "type": "boolean",
                  "description": "Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs."
                },
                "driveMembersOnly": {
                  "type": "boolean",
                  "description": "Whether access to items inside this shared drive is restricted to its members."
                }
              },
              "description": "Dictionary of restrictions with keys:"
            },
            "hidden": {
              "type": "boolean",
              "description": "Whether the shared drive is hidden from default view."
            },
            "themeId": {
              "type": "string",
              "description": "The ID of the theme to apply to this shared drive."
            }
          },
          "description": "Dictionary of drive properties to update with keys:"
        }
      },
      "required": [
        "driveId"
      ]
    }
  },
  {
    "name": "watch_changes",
    "description": "Creates a simulated notification channel for watching changes in Google Drive.\n\nThis function simulates setting up a watch channel for changes to files in \na user's Drive or shared drive. In the simulation, it stores the channel \nconfiguration and validates the watch parameters, but does not establish \nactual real-time notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "pageToken": {
          "type": "string",
          "description": "The token for the initial page of changes to watch from.\nThis token is obtained from changes.getStartPageToken() or a previous \nchanges.list request. Cannot be empty."
        },
        "resource": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Required. Unique identifier for the channel."
            },
            "type": {
              "type": "string",
              "description": "Required. Channel type, typically 'web_hook'."
            },
            "address": {
              "type": "string",
              "description": "Required. URL where notifications are delivered."
            },
            "resourceId": {
              "type": "string",
              "description": "Optional. ID of the resource being watched."
            },
            "resourceUri": {
              "type": "string",
              "description": "Optional. URI of the resource being watched."
            },
            "token": {
              "type": "string",
              "description": "Optional. Token for authenticating the channel."
            },
            "expiration": {
              "type": "string",
              "description": "Optional. Expiration time in RFC 3339 format."
            },
            "payload": {
              "type": "boolean",
              "description": "Optional. Whether to include payload in notifications."
            },
            "params": {
              "type": "object",
              "properties": {},
              "description": "Optional. Additional channel parameters."
            }
          },
          "description": "Dictionary of notification channel \nproperties. If None, a minimal channel will be created. Expected keys:",
          "required": [
            "address",
            "expiration",
            "id",
            "params",
            "payload",
            "resourceId",
            "resourceUri",
            "token",
            "type"
          ]
        },
        "driveId": {
          "type": "string",
          "description": "The ID of the shared drive for which changes are watched.\nOnly changes to files within this shared drive will trigger notifications.\nDefaults to empty string (user's My Drive)."
        },
        "includeCorpusRemovals": {
          "type": "boolean",
          "description": "Whether the watch should include notifications \nfor files that are removed from the corpus but still accessible.\nDefaults to False."
        },
        "includeItemsFromAllDrives": {
          "type": "boolean",
          "description": "Whether to watch changes in both My Drive \nand shared drives. Defaults to False."
        },
        "includeRemoved": {
          "type": "boolean",
          "description": "Whether to include notifications for removed items.\nDefaults to True."
        },
        "includeTeamDriveItems": {
          "type": "boolean",
          "description": "**DEPRECATED** - Use includeItemsFromAllDrives \ninstead. Whether to include changes for team drive items. Defaults to False."
        },
        "pageSize": {
          "type": "integer",
          "description": "Maximum number of changes to return per notification. \nMust be between 1 and 1000 inclusive. Defaults to 100."
        },
        "restrictToMyDrive": {
          "type": "boolean",
          "description": "Whether to restrict notifications to changes \ninside the My Drive hierarchy only. Cannot be used with driveId or teamDriveId.\nDefaults to False."
        },
        "spaces": {
          "type": "string",
          "description": "A comma-separated list of spaces to watch for changes.\nSupported values are 'drive', 'appDataFolder', and 'photos'. Defaults to 'drive'."
        },
        "supportsAllDrives": {
          "type": "boolean",
          "description": "Whether the requesting application supports both \nMy Drives and shared drives. Required when driveId is specified. Defaults to False."
        },
        "supportsTeamDrives": {
          "type": "boolean",
          "description": "**DEPRECATED** - Use supportsAllDrives instead.\nWhether the application supports Team Drives. Defaults to False."
        },
        "teamDriveId": {
          "type": "string",
          "description": "**DEPRECATED** - Use driveId instead. The ID of the Team Drive \nto watch for changes. Defaults to empty string."
        },
        "includePermissionsForView": {
          "type": "string",
          "description": "Specifies which additional view's permissions \nto include in change notifications. Only 'published' is supported. \nDefaults to empty string."
        },
        "includeLabels": {
          "type": "string",
          "description": "A comma-separated list of label IDs to include in \nthe labelInfo part of change notifications. Defaults to empty string.\n    "
        }
      },
      "required": [
        "pageToken"
      ]
    }
  }
]