[
  {
    "name": "add_address",
    "description": "Creates a new address for an existing customer.\n\nThis function adds a new address to a customer's address collection. The address requires \nfour mandatory fields (address1, city, country, zip) and supports optional fields for \ncomplete address information. The new address is automatically assigned a unique ID and \nset as non-default. Returns the complete created address with all provided and generated fields.",
    "parameters": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "description": "The unique identifier of the customer to add the address to. \nMust be a non-empty string representing an existing customer.\nExamples: '207119551', 'cust_abc123'."
        },
        "address": {
          "type": "object",
          "properties": {
            "address1": {
              "type": "string",
              "description": "Primary street address line. Required.\n    Examples: '123 Main St', '456 Oak Avenue'."
            },
            "city": {
              "type": "string",
              "description": "City name. Required.\n    Examples: 'New York', 'Toronto', 'London'."
            },
            "country": {
              "type": "string",
              "description": "Country name or code. Required.\n    Examples: 'United States', 'Canada', 'US', 'CA'."
            },
            "zip": {
              "type": "string",
              "description": "Postal or ZIP code. Required.\n    Examples: '10001', 'M5V 3A8', 'SW1A 1AA'."
            },
            "address2": {
              "type": "string",
              "description": "Secondary address line for apartment, suite, etc.\n    Examples: 'Apt 4B', 'Suite 200', 'Floor 3'."
            },
            "first_name": {
              "type": "string",
              "description": "Recipient's first name."
            },
            "last_name": {
              "type": "string",
              "description": "Recipient's last name."
            },
            "phone": {
              "type": "string",
              "description": "Contact phone number."
            },
            "province": {
              "type": "string",
              "description": "State or province name."
            },
            "company": {
              "type": "string",
              "description": "Company or organization name."
            },
            "province_code": {
              "type": "string",
              "description": "Two-letter state/province code (e.g., 'CA', 'NY')."
            },
            "country_code": {
              "type": "string",
              "description": "Two-letter country code (e.g., 'US', 'CA')."
            },
            "country_name": {
              "type": "string",
              "description": "Full country name."
            },
            "latitude": {
              "type": "number",
              "description": "Geographic latitude coordinate."
            },
            "longitude": {
              "type": "number",
              "description": "Geographic longitude coordinate."
            }
          },
          "description": "The address data to create. Must include required fields \nand can include optional fields for complete address information:",
          "required": [
            "address1",
            "city",
            "country",
            "zip"
          ]
        }
      },
      "required": [
        "address",
        "customer_id"
      ]
    }
  },
  {
    "name": "cancel_order",
    "description": "Cancels an order and optionally processes refunds and restocking.\n\nPermanently closes the order and marks it as cancelled. Can simultaneously\nprocess refunds using either simple amount/currency parameters or detailed\nrefund objects for complex scenarios involving specific line items.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order to cancel."
        },
        "amount": {
          "type": "string",
          "description": "Refund amount as decimal string. Superseded by refund object."
        },
        "currency": {
          "type": "string",
          "description": "Currency code for refund. Required if amount specified."
        },
        "reason": {
          "type": "string",
          "description": "Cancellation reason ('customer', 'inventory', 'fraud', 'other')."
        },
        "email": {
          "type": "boolean",
          "description": "Whether to send cancellation email to customer."
        },
        "restock": {
          "type": "boolean",
          "description": "Whether to restock all items. Overridden by refund line item settings."
        },
        "refund": {
          "type": "object",
          "properties": {
            "note": {
              "type": "string",
              "description": "Refund note/description"
            },
            "currency": {
              "type": "string",
              "description": "Refund currency (defaults to order currency)"
            },
            "shipping": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "Specific shipping amount to refund"
                },
                "full_refund": {
                  "type": "boolean",
                  "description": "Whether to refund all shipping"
                }
              },
              "description": "Shipping refund details:"
            },
            "refund_line_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "line_item_id": {
                    "type": "integer",
                    "description": "Original order line item ID"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Quantity to refund"
                  },
                  "restock_type": {
                    "type": "string",
                    "description": "Restocking behavior (\"no_restock\", \"cancel\", \"return\")"
                  },
                  "location_id": {
                    "type": "integer",
                    "description": "Restock location ID"
                  }
                },
                "required": [
                  "line_item_id",
                  "quantity",
                  "restock_type"
                ]
              },
              "description": "Line items to refund:"
            },
            "transactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "parent_id": {
                    "type": "string",
                    "description": "Original transaction ID to refund"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Refund amount"
                  },
                  "kind": {
                    "type": "string",
                    "description": "Must be \"refund\""
                  },
                  "gateway": {
                    "type": "string",
                    "description": "Payment gateway identifier"
                  }
                },
                "required": [
                  "amount",
                  "gateway",
                  "kind",
                  "parent_id"
                ]
              },
              "description": "Refund transactions:"
            }
          },
          "description": "Detailed refund object containing:"
        }
      },
      "required": [
        "order_id"
      ]
    }
  },
  {
    "name": "close_order",
    "description": "Closes an order.\n\nCloses an order. A closed order is one that has no more work to be done. All items have been fulfilled or refunded.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order to close. This is a path parameter."
        }
      },
      "required": [
        "order_id"
      ]
    }
  },
  {
    "name": "count_orders",
    "description": "Retrieve the total number of orders that meet the specified criteria.\n\nRetrieves the total number of orders that meet the specified criteria.\nFilters can be applied based on creation date, update date, financial\nstatus, fulfillment_status, and overall order status.",
    "parameters": {
      "type": "object",
      "properties": {
        "created_at_max": {
          "type": "string",
          "description": "Count orders created at or before this date\n(ISO 8601 format). Defaults to None."
        },
        "created_at_min": {
          "type": "string",
          "description": "Count orders created at or after this date\n(ISO 8601 format). Defaults to None."
        },
        "financial_status": {
          "type": "string",
          "description": "Filter count by financial status.\nCommon values include: 'pending', 'authorized', 'paid',\n'partially_paid', 'refunded', 'voided', 'partially_refunded',\n'any', 'unpaid'. Defaults to 'any'."
        },
        "fulfillment_status": {
          "type": "string",
          "description": "Filter count by fulfillment status.\nCommon values include: 'shipped', 'partial', 'unshipped', 'any',\n'fulfilled'. Defaults to 'any'."
        },
        "status": {
          "type": "string",
          "description": "Filter count by order status. Common values\ninclude: 'open', 'closed', 'any'. Defaults to 'open'."
        },
        "updated_at_max": {
          "type": "string",
          "description": "Count orders last updated at or before\nthis date (ISO 8601 format). Defaults to None."
        },
        "updated_at_min": {
          "type": "string",
          "description": "Count orders last updated at or after\nthis date (ISO 8601 format). Defaults to None."
        }
      }
    }
  },
  {
    "name": "create_an_order_transaction",
    "description": "This function creates a new transaction for a specified order. This can be used to record\n\npayments (such as 'sale' or 'capture') or authorizations. The details of the transaction,\nincluding its kind, amount, and optionally the gateway, are provided within the `transaction`\ndictionary.\n\nThe function performs comprehensive financial validation including: validates capture amounts \nagainst authorization limits, prevents over-refunding by checking transaction history, enforces \nproper transaction state transitions (e.g., can't void captured authorizations), automatically \nupdates order financial status based on transaction outcomes, and manages customer gift card \nbalance updates for manual gateway refunds (gift card refunds automatically credit the customer's \ngift card balance).",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order for which to create a transaction. This is a path parameter."
        },
        "transaction": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "string",
              "description": "The amount of the transaction. (Required)"
            },
            "kind": {
              "type": "string",
              "description": "The kind of transaction: 'authorization', 'capture', 'sale', 'void', or 'refund'. (Required)"
            },
            "gateway": {
              "type": "string",
              "description": "(Optional for some kinds like capture/void if parent_id is used)\n    The payment gateway used. For manual payments, can be 'manual'."
            },
            "parent_id": {
              "type": "string",
              "description": "(Optional) The ID of an existing transaction to explicitly\n    void or capture."
            },
            "currency": {
              "type": "string",
              "description": "(Optional) The currency (ISO 4217 format) of the transaction.\n    Defaults to order currency."
            },
            "test": {
              "type": "boolean",
              "description": "(Optional) Whether this is a test transaction. Default: false."
            },
            "authorization": {
              "type": "string",
              "description": "(Optional) The authorization code, for external gateways\n    when kind is 'sale' or 'authorization'."
            },
            "target_payment_method_id": {
              "type": "string",
              "description": "(Optional) The ID of the target payment method for cross-payment method refunds."
            }
          },
          "description": "The transaction object to be created. This dictionary can include\nvarious fields as defined by the Shopify Transaction API. Key fields include:",
          "required": [
            "amount",
            "kind"
          ]
        }
      },
      "required": [
        "order_id",
        "transaction"
      ]
    }
  },
  {
    "name": "create_draft_order",
    "description": "Creates a new draft order with comprehensive line items, customer data, and pricing calculations.\n\nThis function creates a complete draft order by processing line items, customer information, \nshipping and billing addresses, applied discounts, and shipping details. The system automatically \ncalculates subtotals, applies line-item and order-level discounts, computes tax amounts, and \ngenerates the final total price. When a variant_id is provided, product details are automatically \nretrieved from the database, while custom line items can be created using title and price. \nCustomer data can reference existing customers by ID or create new customer records as needed. \nThe function handles complex discount logic including percentage and fixed-amount discounts at \nboth line-item and order levels, ensuring accurate pricing calculations throughout the process.",
    "parameters": {
      "type": "object",
      "properties": {
        "draft_order": {
          "type": "object",
          "properties": {
            "line_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "variant_id": {
                    "type": "string",
                    "description": "The unique identifier of an existing product variant.\n        When provided, product details are automatically retrieved from the database."
                  },
                  "product_id": {
                    "type": "string",
                    "description": "The unique identifier of the parent product.\n        Used in conjunction with custom line items."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The number of units for this line item. Must be a positive integer."
                  },
                  "title": {
                    "type": "string",
                    "description": "The display name for custom line items.\n        Required when variant_id is not provided."
                  },
                  "price": {
                    "type": "string",
                    "description": "The unit price for custom line items as a decimal string.\n        Required when variant_id is not provided."
                  },
                  "sku": {
                    "type": "string",
                    "description": "The stock keeping unit identifier for inventory tracking."
                  },
                  "grams": {
                    "type": "integer",
                    "description": "The weight of the line item in grams for shipping calculations."
                  },
                  "requires_shipping": {
                    "type": "boolean",
                    "description": "Whether this item needs physical shipping.\n        Defaults to True for most items."
                  },
                  "taxable": {
                    "type": "boolean",
                    "description": "Whether this item is subject to tax calculations.\n        Defaults to True for most items."
                  },
                  "applied_discount": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "A descriptive name for the discount."
                      },
                      "description": {
                        "type": "string",
                        "description": "Additional details about the discount."
                      },
                      "value": {
                        "type": "string",
                        "description": "The discount amount as a decimal string."
                      },
                      "value_type": {
                        "type": "string",
                        "description": "Either \"fixed_amount\" for dollar amounts or \"percentage\"\n            for percentage-based discounts."
                      }
                    },
                    "description": "A discount specific to this line item.\n        When provided, must include both value and value_type fields:",
                    "required": [
                      "value",
                      "value_type"
                    ]
                  },
                  "custom_attributes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {}
                    },
                    "description": "Additional metadata for the\n        line item as key-value pairs. Each dictionary must contain both 'key' and 'value' fields."
                  }
                },
                "required": [
                  "quantity"
                ]
              },
              "description": "A list of line item objects that define\n    the products or services in the draft order. Each line item is a dictionary that \n    requires either a variant_id for existing products or both title and price for \n    custom items. Line items support the following structure:"
            },
            "customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of an existing customer.\n        When provided, existing customer data is used."
                },
                "email": {
                  "type": "string",
                  "description": "The customer's email address for new customer records."
                },
                "first_name": {
                  "type": "string",
                  "description": "The customer's first name for new customer records."
                },
                "last_name": {
                  "type": "string",
                  "description": "The customer's last name for new customer records."
                },
                "phone": {
                  "type": "string",
                  "description": "The customer's phone number for contact purposes."
                },
                "tags": {
                  "type": "string",
                  "description": "Comma-separated tags for customer categorization."
                }
              },
              "description": "Customer information for the draft order.\n    Can reference an existing customer by ID or provide new customer data:"
            },
            "shipping_address": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "Recipient's first name."
                },
                "last_name": {
                  "type": "string",
                  "description": "Recipient's last name."
                },
                "address1": {
                  "type": "string",
                  "description": "Primary street address line."
                },
                "address2": {
                  "type": "string",
                  "description": "Secondary address line for apartment or suite numbers."
                },
                "city": {
                  "type": "string",
                  "description": "City name for the shipping destination."
                },
                "province": {
                  "type": "string",
                  "description": "State or province name."
                },
                "country": {
                  "type": "string",
                  "description": "Full country name."
                },
                "zip": {
                  "type": "string",
                  "description": "Postal or ZIP code."
                },
                "phone": {
                  "type": "string",
                  "description": "Contact phone number for delivery."
                },
                "company": {
                  "type": "string",
                  "description": "Company name if applicable."
                },
                "province_code": {
                  "type": "string",
                  "description": "Two-letter state or province code."
                },
                "country_code": {
                  "type": "string",
                  "description": "Two-letter ISO country code."
                }
              },
              "description": "The delivery address for the draft order:"
            },
            "billing_address": {
              "type": "object",
              "properties": {},
              "description": "The billing address for payment processing.\n    Uses the same structure as shipping_address with identical field definitions."
            },
            "email": {
              "type": "string",
              "description": "Primary email address for the draft order.\n    This is used when no customer object is provided or when the customer object lacks an email."
            },
            "note": {
              "type": "string",
              "description": "Internal notes or comments about the draft order for reference purposes."
            },
            "tags": {
              "type": "string",
              "description": "Comma-separated tags for categorizing and organizing draft orders."
            },
            "shipping_line": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The name of the shipping method (e.g., \"Standard Shipping\")."
                },
                "price": {
                  "type": "string",
                  "description": "The shipping cost as a decimal string."
                }
              },
              "description": "Shipping method and cost information:",
              "required": [
                "price",
                "title"
              ]
            },
            "applied_discount": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "A descriptive name for the discount."
                },
                "description": {
                  "type": "string",
                  "description": "Additional details about the discount promotion."
                },
                "value": {
                  "type": "string",
                  "description": "The discount amount as a decimal string."
                },
                "value_type": {
                  "type": "string",
                  "description": "Either \"fixed_amount\" for dollar discounts or \"percentage\"\n        for percentage-based discounts."
                }
              },
              "description": "Order-level discount applied to the entire draft order:",
              "required": [
                "value",
                "value_type"
              ]
            }
          },
          "description": "The complete draft order object to be created. \nThis dictionary must contain the structural data for creating a comprehensive draft order."
        }
      },
      "required": [
        "draft_order"
      ]
    }
  },
  {
    "name": "create_exchange",
    "description": "Creates an exchange for items in an existing order.\n\nCreates an Exchange object that allows customers to return fulfilled items and receive \ndifferent items in return. Automatically calculates price differences, processes inventory \nadjustments, and completes the exchange immediately. Validates exchange eligibility by \nchecking order status, fulfillment status, and inventory availability.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "Order identifier for the exchange."
        },
        "return_line_items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fulfillment_line_item_id": {
                "type": "string",
                "description": "ID of the original order line item to exchange."
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity to return (must be positive)."
              },
              "exchange_reason": {
                "type": "string",
                "description": "Reason for exchanging this item."
              },
              "exchange_reason_note": {
                "type": "string",
                "description": "Additional notes about the exchange."
              }
            },
            "required": [
              "fulfillment_line_item_id",
              "quantity"
            ]
          },
          "description": "Items to be returned, each containing:"
        },
        "new_line_items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "variant_id": {
                "type": "string",
                "description": "ID of the product variant to receive."
              },
              "product_id": {
                "type": "string",
                "description": "ID of the product to receive."
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity to receive (must be positive)."
              },
              "title": {
                "type": "string",
                "description": "Custom title for the item."
              },
              "price": {
                "type": "string",
                "description": "Custom price for the item as decimal string."
              }
            },
            "required": [
              "product_id",
              "quantity",
              "variant_id"
            ]
          },
          "description": "New items to receive, each containing:"
        },
        "exchange_reason": {
          "type": "string",
          "description": "Overall reason for the exchange."
        },
        "exchange_note": {
          "type": "string",
          "description": "Additional notes about the exchange."
        },
        "restock_returned_items": {
          "type": "boolean",
          "description": "Whether to restock the returned items (default: True)."
        }
      },
      "required": [
        "new_line_items",
        "order_id",
        "return_line_items"
      ]
    }
  },
  {
    "name": "create_order",
    "description": "Creates an order with comprehensive customer, financial, and inventory management.\n\nThis endpoint creates complete orders with detailed line items, customer linking, address management, \nfinancial processing including gift card payments, and inventory control. The system supports both \nexisting and new customer creation, automatic transaction processing, and flexible inventory behavior \npolicies for different fulfillment scenarios.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "object",
          "properties": {
            "billing_address": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "object",
                  "description": "Billing recipient's first name"
                },
                "last_name": {
                  "type": "object",
                  "description": "Billing recipient's last name"
                },
                "address1": {
                  "type": "string",
                  "description": "Primary street address line"
                },
                "address2": {
                  "type": "string",
                  "description": "Secondary address line (apartment, suite, etc.)"
                },
                "city": {
                  "type": "string",
                  "description": "City name"
                },
                "province": {
                  "type": "string",
                  "description": "State or province name"
                },
                "country": {
                  "type": "string",
                  "description": "Country name"
                },
                "zip": {
                  "type": "string",
                  "description": "Postal or ZIP code"
                },
                "phone": {
                  "type": "string",
                  "description": "Contact phone number"
                },
                "company": {
                  "type": "string",
                  "description": "Company name"
                },
                "latitude": {
                  "type": "number",
                  "description": "Geographic latitude coordinate"
                },
                "longitude": {
                  "type": "number",
                  "description": "Geographic longitude coordinate"
                },
                "province_code": {
                  "type": "string",
                  "description": "Two-letter province/state code"
                },
                "country_code": {
                  "type": "string",
                  "description": "Two-letter ISO country code"
                },
                "country_name": {
                  "type": "string",
                  "description": "Full country name"
                }
              },
              "description": "Customer's billing address dict with keys:",
              "required": [
                "first_name",
                "last_name"
              ]
            },
            "currency": {
              "type": "string",
              "description": "Three-letter ISO 4217 currency code for order pricing.\n    Examples: \"USD\", \"EUR\", \"GBP\", \"CAD\". Defaults to shop's default currency."
            },
            "customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Existing customer ID to link order to. Takes precedence over other fields."
                },
                "email": {
                  "type": "string",
                  "description": "Customer email - creates new customer if no ID provided"
                },
                "first_name": {
                  "type": "string",
                  "description": "Customer's first name - for new customer creation"
                },
                "last_name": {
                  "type": "string",
                  "description": "Customer's last name - for new customer creation"
                },
                "phone": {
                  "type": "string",
                  "description": "Customer's phone number"
                },
                "tags": {
                  "type": "string",
                  "description": "Comma-separated customer tags string"
                }
              },
              "description": "Customer information for order association dict with keys:"
            },
            "discount_codes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "object",
                    "description": "Discount code identifier"
                  },
                  "amount": {
                    "type": "object",
                    "description": "Discount amount as decimal string"
                  },
                  "type": {
                    "type": "object",
                    "description": "Discount type - \"fixed_amount\" is supported"
                  }
                },
                "required": [
                  "amount",
                  "code",
                  "type"
                ]
              },
              "description": "Order-level discount codes array, each dict with keys:"
            },
            "email": {
              "type": "string",
              "description": "Customer email for order - used when customer object not provided or lacks email"
            },
            "financial_status": {
              "type": "string",
              "description": "Order payment status override.\n    Options: \"pending\", \"authorized\", \"partially_paid\", \"paid\", \"partially_refunded\", \"refunded\", \"voided\"\n    Default: Automatically derived from transaction amounts and total price"
            },
            "inventory_behaviour": {
              "type": "string",
              "description": "Inventory management policy for order fulfillment.\n    \"bypass\": Skip inventory checks and updates (default)\n    \"decrement_ignoring_policy\": Reduce inventory regardless of stock levels\n    \"decrement_obeying_policy\": Reduce inventory only if sufficient stock available"
            },
            "line_items": {
              "type": "object",
              "description": "Order items array, each dict with keys:",
              "properties": {
                "variant_id": {
                  "type": "string",
                  "description": "Product variant ID to order. Required if product_id not provided."
                },
                "product_id": {
                  "type": "string",
                  "description": "Product ID - uses first variant if variant_id not specified."
                },
                "quantity": {
                  "type": "object",
                  "description": "Number of units to order. Must be positive integer."
                },
                "price": {
                  "type": "string",
                  "description": "Override price per unit as decimal string. Uses variant price if not provided."
                },
                "title": {
                  "type": "string",
                  "description": "Override line item display name. Uses variant/product title if not provided."
                },
                "total_discount_amount": {
                  "type": "string",
                  "description": "Total discount for entire line (not per unit) as decimal string.\n        Example: \"10.00\" for $10 total discount on this line item."
                }
              },
              "required": [
                "quantity"
              ]
            },
            "note": {
              "type": "string",
              "description": "Internal order note or special instructions"
            },
            "send_fulfillment_receipt": {
              "type": "boolean",
              "description": "Whether to send shipping confirmation email. Default: False."
            },
            "send_receipt": {
              "type": "boolean",
              "description": "Whether to send order confirmation email. Default: False."
            },
            "shipping_address": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "object",
                  "description": "Shipping recipient's first name"
                },
                "last_name": {
                  "type": "object",
                  "description": "Shipping recipient's last name"
                },
                "address1": {
                  "type": "string",
                  "description": "Primary street address line"
                },
                "address2": {
                  "type": "string",
                  "description": "Secondary address line (apartment, suite, etc.)"
                },
                "city": {
                  "type": "string",
                  "description": "City name"
                },
                "province": {
                  "type": "string",
                  "description": "State or province name"
                },
                "country": {
                  "type": "string",
                  "description": "Country name"
                },
                "zip": {
                  "type": "string",
                  "description": "Postal or ZIP code"
                },
                "phone": {
                  "type": "string",
                  "description": "Contact phone number"
                },
                "company": {
                  "type": "string",
                  "description": "Company name"
                },
                "latitude": {
                  "type": "number",
                  "description": "Geographic latitude coordinate"
                },
                "longitude": {
                  "type": "number",
                  "description": "Geographic longitude coordinate"
                },
                "province_code": {
                  "type": "string",
                  "description": "Two-letter province/state code"
                },
                "country_code": {
                  "type": "string",
                  "description": "Two-letter ISO country code"
                },
                "country_name": {
                  "type": "string",
                  "description": "Full country name"
                }
              },
              "description": "Customer's shipping address dict with keys:",
              "required": [
                "first_name",
                "last_name"
              ]
            },
            "shipping_lines": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "object",
                    "description": "Shipping method name (e.g., \"Standard Shipping\", \"Express\")"
                  },
                  "price": {
                    "type": "object",
                    "description": "Shipping cost as decimal string"
                  },
                  "code": {
                    "type": "string",
                    "description": "Shipping method code"
                  },
                  "source": {
                    "type": "string",
                    "description": "Shipping provider identifier"
                  }
                },
                "required": [
                  "price",
                  "title"
                ]
              },
              "description": "Shipping method charges array, each dict with keys:"
            },
            "tags": {
              "type": "string",
              "description": "Comma-separated tags string for order categorization and filtering"
            },
            "tax_lines": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "object",
                    "description": "Tax name (e.g., \"State Tax\", \"VAT\")"
                  },
                  "rate": {
                    "type": "object",
                    "description": "Tax rate as decimal (e.g., 0.08 for 8%)"
                  },
                  "price": {
                    "type": "object",
                    "description": "Tax amount as decimal string"
                  }
                },
                "required": [
                  "price",
                  "rate",
                  "title"
                ]
              },
              "description": "Tax charges array, each dict with keys:"
            },
            "transactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "object",
                    "description": "Transaction type - \"sale\", \"authorization\", \"capture\", \"refund\", \"void\""
                  },
                  "amount": {
                    "type": "object",
                    "description": "Transaction amount as decimal string"
                  },
                  "status": {
                    "type": "object",
                    "description": "Transaction status - \"success\", \"pending\", \"failure\", \"error\""
                  },
                  "gateway": {
                    "type": "object",
                    "description": "Payment gateway identifier - \"manual\", \"gift_card\", \"shopify_payments\", etc.\n        Note: For gift card payments, use gateway=\"gift_card\" - system automatically validates\n        and deducts from customer's gift card balance"
                  }
                },
                "required": [
                  "amount",
                  "gateway",
                  "kind",
                  "status"
                ]
              },
              "description": "Payment transactions array, each dict with keys:"
            }
          },
          "description": "Complete order creation object with all order details and configuration.",
          "required": [
            "line_items"
          ]
        }
      },
      "required": [
        "order"
      ]
    }
  },
  {
    "name": "create_return",
    "description": "Initiates a return for one or more line items on an order.\n\nCreates a Return object and associated ReturnLineItem objects for items that have been \nfulfilled but need to be returned. Validates return eligibility by checking fulfillment \nstatus, existing return quantities, and order state to ensure proper inventory tracking.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "Order identifier for the return."
        },
        "return_line_items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fulfillment_line_item_id": {
                "type": "string",
                "description": "Line item identifier to return."
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity to return (must be positive)."
              },
              "return_reason": {
                "type": "string",
                "description": "Return reason code. Valid values:\n    \"UNKNOWN\", \"DAMAGED_OR_DEFECTIVE\", \"NOT_AS_DESCRIBED\", \n    \"WRONG_ITEM_SENT\", \"SIZE_TOO_SMALL\", \"SIZE_TOO_LARGE\", \n    \"STYLE_NOT_AS_EXPECTED\", \"COLOR_NOT_AS_EXPECTED\", \n    \"CHANGED_MIND\", \"UNWANTED_GIFT\", \"OTHER\""
              },
              "return_reason_note": {
                "type": "string",
                "description": "Additional return details."
              }
            },
            "required": [
              "fulfillment_line_item_id",
              "quantity"
            ]
          },
          "description": "Items to return, each containing:"
        }
      },
      "required": [
        "order_id",
        "return_line_items"
      ]
    }
  },
  {
    "name": "get_address",
    "description": "Retrieves a specific customer address using customer ID and address ID.\n\nThis function fetches a single address from a customer's address collection. You need both the \ncustomer ID and the specific address ID to retrieve the address. Returns complete address \ndetails including contact information and geographic data.",
    "parameters": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "description": "The unique identifier of the customer who owns the address. \nMust be a non-empty string. Examples: '207119551', 'cust_abc123'."
        },
        "address_id": {
          "type": "string",
          "description": "The unique identifier of the specific address to retrieve. \nMust be a non-empty string. Examples: 'addr_12345', '987654321'."
        }
      },
      "required": [
        "address_id",
        "customer_id"
      ]
    }
  },
  {
    "name": "get_customer_by_id",
    "description": "Retrieves a single customer by their unique identifier with optional field selection.\n\nThis endpoint fetches complete customer information for a specific customer ID. You can optimize the response by requesting only specific fields, which is useful for reducing payload size when you only need certain customer attributes. The function returns comprehensive customer data including personal information, order statistics, addresses, and account metadata.",
    "parameters": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "description": "The unique identifier for the customer. Must be a non-empty string representing the customer's ID in the system.\nExamples: '207119551', 'cust_abc123', '1073339462'."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific customer fields to include in the response. Each field name must be a valid customer attribute. Supports nested field access for addresses.\nExamples: ['id', 'email', 'first_name'] (basic info), ['id', 'orders_count', 'total_spent'] (order data), ['default_address', 'addresses'] (address info).\nDefault is None (all available fields)."
        }
      },
      "required": [
        "customer_id"
      ]
    }
  },
  {
    "name": "get_customer_orders",
    "description": "Retrieves all orders belonging to a specific customer with comprehensive filtering and field selection capabilities.\n\nThis endpoint provides access to a customer's complete order history with flexible filtering options including order status, creation date ranges, and financial status. By default, only open orders are returned to focus on active business. The function supports field-level response customization to optimize payload size and includes comprehensive order details including line items, pricing, and customer information for each returned order.",
    "parameters": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "description": "The unique identifier of the customer whose orders should be retrieved. Must be a non-empty string representing a valid customer ID in the system.\nExamples: '207119551', 'cust_abc123', '1073339462'."
        },
        "status": {
          "type": "string",
          "description": "Filter orders by their current status. Controls which orders are included based on their lifecycle state.\nValid values: 'open' (active orders), 'closed' (completed orders), 'cancelled' (cancelled orders), 'any' (all orders regardless of status).\nDefault is 'open'."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of orders to return in a single response. Must be between 1 and 250 for performance optimization.\nExamples: 10 (small batch), 50 (default), 250 (maximum).\nDefault is 50."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific order fields to include in each response object. Reduces payload size when only certain data is needed.\nExamples: ['id', 'order_number', 'total_price'] (basic info), ['id', 'line_items', 'financial_status'] (detailed order data), ['created_at', 'total_price', 'currency'] (financial summary).\nDefault is None (all available fields)."
        },
        "created_at_min": {
          "type": "string",
          "description": "Filter orders created after this date. Must be in ISO 8601 format with timezone information.\nExamples: '2024-01-01T00:00:00Z', '2024-01-01T00:00:00+00:00', '2023-12-01T00:00:00-05:00'.\nDefault is None (no lower date limit)."
        },
        "created_at_max": {
          "type": "string",
          "description": "Filter orders created before this date. Must be in ISO 8601 format with timezone information.\nExamples: '2024-12-31T23:59:59Z', '2024-12-31T23:59:59+00:00', '2024-01-31T23:59:59-05:00'.\nDefault is None (no upper date limit)."
        },
        "financial_status": {
          "type": "string",
          "description": "Filter orders by their payment and financial processing status.\nExamples: 'pending' (awaiting payment), 'paid' (fully paid), 'partially_paid' (partial payment received), 'refunded' (payment returned), 'voided' (payment cancelled).\nDefault is None (no financial status filtering)."
        },
        "since_id": {
          "type": "string",
          "description": "Return only orders with IDs greater than this value for offset-based pagination. Useful for retrieving orders in batches.\nExamples: '450789469', 'order_123456', '1073339462'.\nDefault is None (start from beginning)."
        }
      },
      "required": [
        "customer_id"
      ]
    }
  },
  {
    "name": "get_draft_order_by_id",
    "description": "Retrieves a specific draft order using its unique identifier.\n\nThis function fetches a complete draft order by ID with optional field filtering to reduce response size. \nWhen fields parameter is provided, only the specified fields are returned. Otherwise, the complete \ndraft order with all available data is returned including pricing, customer info, line items, and status.",
    "parameters": {
      "type": "object",
      "properties": {
        "draft_order_id": {
          "type": "string",
          "description": "The unique identifier of the draft order to retrieve.\nMust be a non-empty string representing an existing draft order.\nExamples: 'D101', '12345', 'draft_abc123'."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific fields to include in the response for optimized payload size.\nWhen provided, only these fields will be returned instead of the complete draft order.\nExamples: ['id', 'status', 'total_price'] (basic info), ['customer', 'line_items'] (detailed data).\nDefault is None (returns all available fields)."
        }
      },
      "required": [
        "draft_order_id"
      ]
    }
  },
  {
    "name": "get_order_by_id",
    "description": "Retrieves an order by specifying the ID. All fields of an order are returned unless specific fields are named.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order to retrieve. This is a path parameter."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "(Optional) A list of field names to retrieve for the order. \nIf omitted or an empty list, all fields are returned. Defaults to None."
        }
      },
      "required": [
        "order_id"
      ]
    }
  },
  {
    "name": "get_product_by_id",
    "description": "Retrieves a specific product by its ID.\n\nThis function retrieves detailed information for a single product identified by its unique `product_id`.\nAn optional list of `fields` can be provided to limit the data returned for the product; these\nfields are sent as a comma-separated string to the API.",
    "parameters": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "integer",
          "description": "The ID of the product to retrieve. This is a path parameter."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "(Optional) A list of fields to retrieve for the product.\nThese will be sent as a comma-separated string to the API. Defaults to None."
        }
      },
      "required": [
        "product_id"
      ]
    }
  },
  {
    "name": "list_addresses",
    "description": "Retrieves a paginated list of addresses for a specific customer with efficient offset-based navigation.\n\nThis endpoint fetches all addresses associated with a customer account, providing comprehensive address \ninformation including shipping and billing details. The function implements offset-based pagination using \nsince_id for efficient navigation through large address collections. Each address includes complete \ngeographic and contact information, making it suitable for order processing, shipping calculations, and \ncustomer profile management. The pagination system sorts addresses lexicographically by ID to ensure \nconsistent ordering across requests, while the limit parameter allows control over response size for \noptimal performance in different integration scenarios.",
    "parameters": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "description": "The unique identifier of the customer whose addresses should be retrieved. \nMust be a non-empty string representing a valid customer ID in the system.\nExamples: '207119551', 'cust_abc123', '1073339462'."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of address records to return in a single response. \nMust be an integer between 1 and 250 inclusive. Controls pagination batch size for \nefficient data transfer and processing.\nExamples: 10 (small batches), 50 (default balanced size), 250 (maximum bulk retrieval).\nDefault is 50."
        },
        "since_id": {
          "type": "integer",
          "description": "The pagination offset identifier for retrieving subsequent pages of addresses. \nWhen provided, only addresses with string IDs lexicographically greater than str(since_id) are returned. \nThis enables consistent pagination through the complete address collection.\nExamples: 0 (start from beginning), 12345 (continue from address ID 12345).\nDefault is 0 (no pagination offset)."
        }
      },
      "required": [
        "customer_id"
      ]
    }
  },
  {
    "name": "list_customers",
    "description": "Retrieves a filtered list of customers with support for date ranges, field selection, and pagination.\n\nThis endpoint provides comprehensive customer listing capabilities with multiple filtering options including creation and update date ranges, specific customer ID selection, and field-level response customization. The function supports both offset-based pagination via since_id and result limiting for efficient data retrieval. You can optimize response payload by requesting only specific customer fields, making it ideal for bulk customer operations and data synchronization tasks.",
    "parameters": {
      "type": "object",
      "properties": {
        "created_at_max": {
          "type": "string",
          "description": "Filter customers created before this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-12-31T23:59:59Z', '2024-01-01T00:00:00+00:00'.\nDefault is None (no upper date limit)."
        },
        "created_at_min": {
          "type": "string",
          "description": "Filter customers created after this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-01-01T00:00:00Z', '2024-01-01T00:00:00+00:00'.\nDefault is None (no lower date limit)."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific customer fields to include in each response object. Reduces payload size when only certain data is needed.\nExamples: ['id', 'email', 'first_name'] (basic info), ['id', 'orders_count', 'total_spent'] (order metrics), ['email', 'tags', 'state'] (marketing data).\nDefault is None (all available fields)."
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific customer IDs to retrieve. When provided, only customers with these IDs are returned.\nExamples: ['207119551', '1073339462'], ['cust_abc123', 'cust_def456'].\nDefault is None (no ID filtering)."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of customers to return in a single response. Must be between 1 and 250.\nExamples: 10 (small batch), 50 (default), 250 (maximum).\nDefault is 50."
        },
        "since_id": {
          "type": "integer",
          "description": "Return customers with IDs greater than this value for pagination. Used for offset-based pagination.\nExamples: 207119551, 1073339462.\nDefault is None (start from beginning)."
        },
        "updated_at_max": {
          "type": "string",
          "description": "Filter customers last updated before this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-12-31T23:59:59Z'.\nDefault is None (no upper update date limit)."
        },
        "updated_at_min": {
          "type": "string",
          "description": "Filter customers last updated after this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-01-01T00:00:00Z'.\nDefault is None (no lower update date limit)."
        }
      }
    }
  },
  {
    "name": "list_draft_orders",
    "description": "Retrieves a filtered list of draft orders with support for pagination and field selection.\n\nThis function fetches draft orders from the system with comprehensive filtering options including \ndate ranges, specific IDs, status filtering, and field selection. Supports pagination via since_id \nand limit parameters for efficient data retrieval. When fields parameter is provided, only specified \nfields are returned to optimize response size. Returns draft orders sorted by ID for consistent pagination.",
    "parameters": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific fields to include in each draft order for optimized payload size.\nWhen provided, only these fields are returned instead of complete draft order data.\nExamples: ['id', 'status', 'total_price'] (basic info), ['customer', 'line_items', 'total_price'] (detailed).\nDefault is None (returns all available fields)."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of draft orders to return in a single response.\nMust be between 1 and 250 inclusive for optimal performance.\nExamples: 10 (small batches), 50 (default), 250 (maximum bulk retrieval).\nDefault is 50."
        },
        "since_id": {
          "type": "integer",
          "description": "Return draft orders with IDs greater than this value for pagination.\nUsed for offset-based pagination through large result sets.\nExamples: 1001 (continue from draft order 1001), None (start from beginning).\nDefault is None (no pagination offset)."
        },
        "updated_at_min": {
          "type": "string",
          "description": "Include draft orders last updated at or after this timestamp.\nMust be in ISO 8601 format with timezone information.\nExamples: '2023-01-01T00:00:00Z', '2024-01-01T00:00:00-05:00'.\nDefault is None (no minimum date filter)."
        },
        "updated_at_max": {
          "type": "string",
          "description": "Include draft orders last updated at or before this timestamp.\nMust be in ISO 8601 format with timezone information.\nExamples: '2023-12-31T23:59:59Z', '2024-01-01T23:59:59-05:00'.\nDefault is None (no maximum date filter)."
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific draft order IDs to retrieve for targeted data access.\nWhen provided, only draft orders with these IDs are returned.\nExamples: ['D101', 'D102'], ['12345', '67890'].\nDefault is None (no ID filtering)."
        },
        "status": {
          "type": "string",
          "description": "Filter draft orders by their current status for workflow management.\nValid values: 'open', 'invoice_sent', 'completed'.\nExamples: 'open' (draft orders ready for editing), 'completed' (finalized orders).\nDefault is None (all statuses included)."
        }
      }
    }
  },
  {
    "name": "list_orders",
    "description": "Retrieves a list of orders that meet the specified criteria. Note: This endpoint implements pagination by using links that are provided in the response header.",
    "parameters": {
      "type": "object",
      "properties": {
        "attribution_app_id": {
          "type": "string",
          "description": "(Optional) Show orders attributed to a certain app, specified by the app ID. Set as 'current' to show orders for the app currently consuming the API."
        },
        "created_at_max": {
          "type": "string",
          "description": "(Optional) Show orders created at or before this date (ISO 8601 format, e.g., '2014-04-25T16:15:47-04:00')."
        },
        "created_at_min": {
          "type": "string",
          "description": "(Optional) Show orders created at or after this date (ISO 8601 format, e.g., '2014-04-25T16:15:47-04:00')."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "(Optional) A list of field names to retrieve for each order. These will be sent as a comma-separated string to the API."
        },
        "financial_status": {
          "type": "string",
          "description": "(Optional) Filter orders by their financial status. Common values include: 'pending', 'authorized', 'paid', 'partially_paid', 'refunded', 'voided', 'partially_refunded', 'any', 'unpaid'. Default: 'any'."
        },
        "fulfillment_status": {
          "type": "string",
          "description": "(Optional) Filter orders by their fulfillment status. Common values include: 'shipped', 'partial', 'unshipped', 'any', 'fulfilled'. Default: 'any'."
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "(Optional) A list of order IDs to retrieve. These will be sent as a comma-separated string to the API."
        },
        "limit": {
          "type": "integer",
          "description": "(Optional) The maximum number of results to show on a page. Must be less than or equal to 250. Default: 50."
        },
        "name": {
          "type": "string",
          "description": "(Optional) Filter orders by name (e.g., '#1001')."
        },
        "processed_at_max": {
          "type": "string",
          "description": "(Optional) Show orders imported or processed at or before this date (ISO 8601 format)."
        },
        "processed_at_min": {
          "type": "string",
          "description": "(Optional) Show orders imported or processed at or after this date (ISO 8601 format)."
        },
        "since_id": {
          "type": "integer",
          "description": "(Optional) Show orders after the specified order ID. (Note: Cursor-based pagination via Link headers is generally preferred)."
        },
        "status": {
          "type": "string",
          "description": "(Optional) Filter orders by their status. Default: 'open'. Valid: \"open\", \"closed\", \"cancelled\", \"any\"."
        },
        "updated_at_max": {
          "type": "string",
          "description": "(Optional) Show orders last updated at or before this date (ISO 8601 format)."
        },
        "updated_at_min": {
          "type": "string",
          "description": "(Optional) Show orders last updated at or after this date (ISO 8601 format)."
        }
      }
    }
  },
  {
    "name": "list_products",
    "description": "Retrieves a list of products with comprehensive filtering and pagination support.\n\nThis function provides access to the store's product catalog with extensive filtering capabilities\nincluding collection membership, date ranges, product types, and field selection. Supports\nreal-world pagination through since_id and multi-currency pricing information.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "Return products belonging to a specific product collection ID.\nSupports both manual collections (explicit product lists) and smart collections (rule-based\nautomatic inclusion based on product attributes like type, vendor, tags, etc.).\nExample: 'coll_1001'"
        },
        "created_at_max": {
          "type": "string",
          "description": "Return products created before a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
        },
        "created_at_min": {
          "type": "string",
          "description": "Return products created after a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of field names to retrieve for each product. \nAvailable fields include: admin_graphql_api_id, body_html, created_at, handle, id, image, \nimages, options, product_type, published_at, published_scope, status, tags, template_suffix, \ntitle, updated_at, variants, vendor. If None or empty, all available fields are returned.\nExample: ['id', 'title', 'product_type']"
        },
        "handle": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of product handles to retrieve. Handles are human-friendly\nunique strings used in URLs and themes."
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of product IDs to retrieve. Useful for fetching specific products."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of results to retrieve per page. Default: 50, Maximum: 250."
        },
        "presentment_currencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of ISO 4217 currency codes to return \npresentment prices in. When provided, each variant will include a 'presentment_prices' array\nwith currency-specific pricing. Supported currencies: USD, EUR, GBP, CAD, AUD, JPY.\nExample: ['USD', 'EUR', 'CAD']"
        },
        "product_type": {
          "type": "string",
          "description": "Filter products by product type. Case-insensitive matching."
        },
        "published_at_max": {
          "type": "string",
          "description": "Return products published before a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
        },
        "published_at_min": {
          "type": "string",
          "description": "Return products published after a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
        },
        "since_id": {
          "type": "string",
          "description": "Return only products after the specified ID. Essential for cursor-based\npagination in production environments. Products are sorted by ID for consistent pagination."
        }
      }
    }
  },
  {
    "name": "modify_pending_order_address",
    "description": "Modifies the shipping address of an open order.\n\nUpdates the delivery address for an open order that hasn't been fulfilled yet.\nThis function allows modification of shipping information while preserving\npayment and line item details.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order to modify."
        },
        "shipping_address": {
          "type": "object",
          "properties": {
            "address1": {
              "type": "string",
              "description": "Primary street address line."
            },
            "address2": {
              "type": "string",
              "description": "Secondary address line (apartment, suite, etc.)."
            },
            "city": {
              "type": "string",
              "description": "City name."
            },
            "province": {
              "type": "string",
              "description": "Province or state name."
            },
            "province_code": {
              "type": "string",
              "description": "Province or state code."
            },
            "country": {
              "type": "string",
              "description": "Country name."
            },
            "country_code": {
              "type": "string",
              "description": "Country code."
            },
            "zip": {
              "type": "string",
              "description": "Postal or ZIP code."
            },
            "phone": {
              "type": "string",
              "description": "Address-specific phone number."
            },
            "first_name": {
              "type": "string",
              "description": "Recipient's first name."
            },
            "last_name": {
              "type": "string",
              "description": "Recipient's last name."
            },
            "company": {
              "type": "string",
              "description": "Company name."
            }
          },
          "description": "Updated delivery address with fields:",
          "required": [
            "address1",
            "city",
            "country",
            "country_code",
            "first_name",
            "last_name",
            "province",
            "province_code",
            "zip"
          ]
        }
      },
      "required": [
        "order_id",
        "shipping_address"
      ]
    }
  },
  {
    "name": "modify_pending_order_items",
    "description": "Modifies line items and related charges of an open order.\n\nUpdates line items, shipping charges, tax lines, discount codes, and order notes\nfor an open order that hasn't been fulfilled yet. This function allows modification\nof order items while preserving address and payment details.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order to modify."
        },
        "line_items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "variant_id": {
                "type": "string",
                "description": "Variant ID to update or add."
              },
              "quantity": {
                "type": "integer",
                "description": "New quantity (0 to remove the item)."
              }
            },
            "required": [
              "quantity",
              "variant_id"
            ]
          },
          "description": "List of line item updates, each with:"
        },
        "payment_method_id": {
          "type": "string",
          "description": "The payment method to use for the order."
        },
        "note": {
          "type": "string",
          "description": "Order notes."
        },
        "tags": {
          "type": "string",
          "description": "Order tags."
        }
      },
      "required": [
        "order_id"
      ]
    }
  },
  {
    "name": "modify_pending_order_payment",
    "description": "Modifies payment transactions of an open order.\n\nUpdates or adds payment transactions for an open order that hasn't been fulfilled yet.\nThis function allows modification of payment information while preserving address\nand line item details.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order to modify."
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Transaction ID."
              },
              "amount": {
                "type": "string",
                "description": "Transaction amount as decimal string."
              },
              "kind": {
                "type": "string",
                "description": "Transaction type (\"sale\", \"capture\", \"authorization\", \"void\", \"refund\")."
              },
              "gateway": {
                "type": "string",
                "description": "Payment gateway identifier."
              },
              "status": {
                "type": "string",
                "description": "Transaction status (\"success\", \"pending\", \"failure\")."
              },
              "currency": {
                "type": "string",
                "description": "Three-letter currency code."
              },
              "original_payment_method_id": {
                "type": "string",
                "description": "Original payment method ID."
              },
              "message": {
                "type": "string",
                "description": "Status message."
              },
              "authorization": {
                "type": "string",
                "description": "Authorization code."
              },
              "parent_id": {
                "type": "string",
                "description": "Parent transaction identifier."
              },
              "test": {
                "type": "boolean",
                "description": "Whether this is a test transaction."
              },
              "device_id": {
                "type": "string",
                "description": "Device ID."
              },
              "source_name": {
                "type": "string",
                "description": "Source name."
              },
              "receipt": {
                "type": "object",
                "properties": {},
                "description": "Receipt information."
              },
              "currency_exchange_adjustment": {
                "type": "object",
                "properties": {},
                "description": "Currency exchange adjustment."
              }
            },
            "required": [
              "amount",
              "currency",
              "gateway",
              "id",
              "kind",
              "status"
            ]
          },
          "description": "List of transaction updates, each with:"
        }
      },
      "required": [
        "order_id",
        "transactions"
      ]
    }
  },
  {
    "name": "reopen_order",
    "description": "Re-opens a closed order.\n\nThis function re-opens a previously closed order. It takes the ID of the\nclosed order as input. Upon successful execution, it returns a dictionary\ncontaining the updated order details, reflecting its reopened status.",
    "parameters": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the closed order to re-open. This is a path parameter."
        }
      },
      "required": [
        "order_id"
      ]
    }
  },
  {
    "name": "search_customers",
    "description": "Searches for customers using flexible query syntax with support for filtering, pagination, and field selection.\n\nThis endpoint enables powerful customer search capabilities using Shopify's query language syntax. You can search by customer attributes like email, name, phone, tags, order count, and dates. The function supports cursor-based pagination for handling large result sets and allows selective field retrieval to optimize response size. Results can be sorted by various customer fields in ascending or descending order.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query string using Shopify query syntax. Supports field-specific searches, comparison operators, and logical combinations.\nExamples: 'Bob Norman' (name search), 'email:bob.norman@mail.example.com' (exact email), 'orders_count:>5' (customers with more than 5 orders), 'tag:VIP AND created_at:>2023-01-01' (VIP customers created after date), 'phone:+1*' (phone numbers starting with +1)."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of customer results to retrieve. Must be between 1 and 250.\nDefault is 50."
        },
        "page_info": {
          "type": "string",
          "description": "Pagination token for cursor-based navigation. Use the next_page_token from a previous response to get the next page of results.\nDefault is None (first page)."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specific customer fields to include in the response. Supports nested field access using dot notation.\nExamples: ['id', 'email', 'first_name'] (basic fields), ['id', 'default_address.city', 'addresses.country'] (nested fields).\nDefault is None (all available fields)."
        },
        "order": {
          "type": "string",
          "description": "Sort order specification in format 'field_name DIRECTION'. Field must be a valid sortable customer field, direction must be 'ASC' or 'DESC'.\nExamples: 'updated_at DESC', 'orders_count ASC', 'last_name ASC'.\nDefault is None (sorted by customer ID ascending)."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_products",
    "description": "Search products with comprehensive filtering and sorting capabilities.\n\nThis function provides advanced product search functionality with support for text search,\ntag filtering, price ranges, inventory levels, and multiple sorting options. Designed for\nreal-world e-commerce scenarios where customers need to find products based on specific\nattributes and criteria.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Text search query to match against product title, body_html, \ntags, vendor, and product_type. Case-insensitive partial matching."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of tags that products must have. Products must \ncontain ALL specified tags (AND logic). Tags are matched case-insensitively."
        },
        "product_type": {
          "type": "string",
          "description": "Filter by product type. Case-insensitive exact match."
        },
        "vendor": {
          "type": "string",
          "description": "Filter by vendor name. Case-insensitive exact match."
        },
        "status": {
          "type": "string",
          "description": "Filter by product status. Valid values: \"active\", \"archived\", \"draft\"."
        },
        "published_scope": {
          "type": "string",
          "description": "Filter by published scope. Valid values: \"web\", \"global\"."
        },
        "price_min": {
          "type": "string",
          "description": "Minimum price filter. Searches across all product variants.\nFormat: decimal string (e.g., \"10.00\", \"99.99\")."
        },
        "price_max": {
          "type": "string",
          "description": "Maximum price filter. Searches across all product variants.\nFormat: decimal string (e.g., \"100.00\", \"999.99\")."
        },
        "inventory_quantity_min": {
          "type": "integer",
          "description": "Minimum total inventory quantity across all variants."
        },
        "inventory_quantity_max": {
          "type": "integer",
          "description": "Maximum total inventory quantity across all variants."
        },
        "created_at_min": {
          "type": "string",
          "description": "Filter products created after this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-01-01T00:00:00Z\")."
        },
        "created_at_max": {
          "type": "string",
          "description": "Filter products created before this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-12-31T23:59:59Z\")."
        },
        "updated_at_min": {
          "type": "string",
          "description": "Filter products updated after this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-01-01T00:00:00Z\")."
        },
        "updated_at_max": {
          "type": "string",
          "description": "Filter products updated before this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-12-31T23:59:59Z\")."
        },
        "variant_query": {
          "type": "string",
          "description": "Text search query to match against variant titles, SKUs, \nand option values. Case-insensitive partial matching. Useful for finding specific \nproduct variations like \"clicky switches\" or \"Google Home compatible\"."
        },
        "variant_sku": {
          "type": "string",
          "description": "Filter products that have variants with matching SKU.\nCase-insensitive partial matching."
        },
        "variant_title": {
          "type": "string",
          "description": "Filter products that have variants with matching title.\nCase-insensitive partial matching."
        },
        "variant_option1": {
          "type": "string",
          "description": "Filter products that have variants with matching option1 value.\nCase-insensitive partial matching. Common for size, color, material, etc."
        },
        "variant_option2": {
          "type": "string",
          "description": "Filter products that have variants with matching option2 value.\nCase-insensitive partial matching. Common for secondary attributes."
        },
        "variant_option3": {
          "type": "string",
          "description": "Filter products that have variants with matching option3 value.\nCase-insensitive partial matching. Common for tertiary attributes."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of fields to include in response. If not specified,\nreturns all product fields. Valid fields include: id, title, body_html, vendor,\nproduct_type, handle, status, tags, variants, options, images, etc."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of products to return. Range: 1-250. Default: 50."
        },
        "sort_by": {
          "type": "string",
          "description": "Field to sort results by. Valid values:\n- \"title\": Sort by product title\n- \"created_at\": Sort by creation date\n- \"updated_at\": Sort by last update date\n- \"price\": Sort by lowest variant price\n- \"inventory_quantity\": Sort by total inventory quantity\n- \"vendor\": Sort by vendor name\n- \"product_type\": Sort by product type\nDefault: \"id\" (product ID)."
        },
        "sort_order": {
          "type": "string",
          "description": "Sort direction. Valid values: \"asc\", \"desc\". Default: \"asc\"."
        }
      }
    }
  },
  {
    "name": "transfer_to_human_agents",
    "description": "Transfer the user to a human agent with a summary of the user's issue.\n\nThis function simulates the transfer to a human agent. It should only be used\nif the user explicitly asks for a human agent, or if the user's issue cannot\nbe resolved by the agent with the available tools.",
    "parameters": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string",
          "description": "A summary of the user's issue to be provided to the human agent.\nThis should include the key details of what the user needs help with."
        }
      },
      "required": [
        "summary"
      ]
    }
  },
  {
    "name": "update_address",
    "description": "Updates an existing customer address with partial field modifications.\n\nThis function modifies specific fields of an existing address within a customer's address collection. \nOnly the fields you provide in the address parameter will be updated - other fields remain unchanged. \nThe system prevents modification of protected fields (id, customer_id, default) to maintain data integrity. \nReturns the complete updated address with all current field values.",
    "parameters": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "string",
          "description": "The unique identifier of the customer whose address is being updated.\nMust be a non-empty string representing an existing customer.\nExamples: '207119551', 'cust_abc123'."
        },
        "address_id": {
          "type": "string",
          "description": "The unique identifier of the specific address to update.\nMust be a non-empty string representing an existing address for this customer.\nExamples: 'addr_12345', '987654321'."
        },
        "address": {
          "type": "object",
          "properties": {
            "address1": {
              "type": "string",
              "description": "Primary street address line.\n    Examples: '456 New Road', '789 Updated Ave'."
            },
            "address2": {
              "type": "string",
              "description": "Secondary address line.\n    Examples: 'Apt 5C', 'Suite 300'."
            },
            "city": {
              "type": "string",
              "description": "City name.\n    Examples: 'Updated City', 'New York'."
            },
            "province": {
              "type": "string",
              "description": "State or province name.\n    Examples: 'California', 'Ontario'."
            },
            "country": {
              "type": "string",
              "description": "Country name or code.\n    Examples: 'United States', 'Canada', 'US'."
            },
            "zip": {
              "type": "string",
              "description": "Postal or ZIP code.\n    Examples: '90210', 'M5V 3A8'."
            },
            "phone": {
              "type": "string",
              "description": "Contact phone number.\n    Examples: '555-000-1111', '+1-416-555-0123'."
            },
            "first_name": {
              "type": "string",
              "description": "Recipient's first name."
            },
            "last_name": {
              "type": "string",
              "description": "Recipient's last name."
            },
            "company": {
              "type": "string",
              "description": "Company name."
            },
            "province_code": {
              "type": "string",
              "description": "Two-letter province code (e.g., 'CA', 'NY')."
            },
            "country_code": {
              "type": "string",
              "description": "Two-letter country code (e.g., 'US', 'CA')."
            },
            "country_name": {
              "type": "string",
              "description": "Full country name."
            },
            "latitude": {
              "type": "number",
              "description": "Geographic latitude coordinate."
            },
            "longitude": {
              "type": "number",
              "description": "Geographic longitude coordinate."
            }
          },
          "description": "Dictionary containing the fields to update. Only provided fields will be modified.\nCannot include protected fields: 'id', 'customer_id', 'default'.\nUpdatable fields include:",
          "required": [
            "address1",
            "city",
            "country",
            "zip"
          ]
        }
      },
      "required": [
        "address",
        "address_id",
        "customer_id"
      ]
    }
  },
  {
    "name": "update_draft_order",
    "description": "Updates an existing draft order with the provided fields.\n\nModifies details like line items, customer information, addresses, and other attributes\nfor an existing draft order. Only non-read-only fields can be updated.",
    "parameters": {
      "type": "object",
      "properties": {
        "draft_order_id": {
          "type": "string",
          "description": "The ID of the draft order to update."
        },
        "draft_order": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "ID of the customer associated with the draft order"
            },
            "email": {
              "type": "string",
              "description": "Customer's email address"
            },
            "note": {
              "type": "string",
              "description": "Optional note attached to the draft order"
            },
            "tags": {
              "type": "string",
              "description": "Comma-separated list of tags for filtering and searching"
            },
            "tax_exempt": {
              "type": "boolean",
              "description": "Whether taxes are exempt for the draft order"
            },
            "shipping_address": {
              "type": "object",
              "properties": {
                "first_name": {
                  "type": "string",
                  "description": "Recipient first name"
                },
                "last_name": {
                  "type": "string",
                  "description": "Recipient last name"
                },
                "address1": {
                  "type": "string",
                  "description": "Street address line 1"
                },
                "address2": {
                  "type": "string",
                  "description": "Street address line 2"
                },
                "city": {
                  "type": "string",
                  "description": "City name"
                },
                "province": {
                  "type": "string",
                  "description": "Province or state"
                },
                "country": {
                  "type": "string",
                  "description": "Country name"
                },
                "zip": {
                  "type": "string",
                  "description": "Postal or ZIP code"
                },
                "phone": {
                  "type": "string",
                  "description": "Contact phone number"
                },
                "company": {
                  "type": "string",
                  "description": "Company name"
                },
                "province_code": {
                  "type": "string",
                  "description": "Province/state code"
                },
                "country_code": {
                  "type": "string",
                  "description": "ISO country code"
                },
                "country_name": {
                  "type": "string",
                  "description": "Full country name"
                },
                "latitude": {
                  "type": "number",
                  "description": "Address latitude"
                },
                "longitude": {
                  "type": "number",
                  "description": "Address longitude"
                }
              },
              "description": "Shipping address dict with keys:"
            },
            "billing_address": {
              "type": "object",
              "properties": {},
              "description": "Billing address dict with same keys as shipping_address"
            },
            "line_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "product_id": {
                    "type": "string",
                    "description": "Parent product ID (required)"
                  },
                  "variant_id": {
                    "type": "string",
                    "description": "Product variant ID (required)"
                  },
                  "title": {
                    "type": "string",
                    "description": "Product or item title"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Item quantity"
                  },
                  "price": {
                    "type": "string",
                    "description": "Unit price as string"
                  },
                  "applied_discount": {
                    "type": "object",
                    "properties": {},
                    "description": "Line item discount dict with string values"
                  }
                },
                "required": [
                  "price",
                  "product_id",
                  "quantity",
                  "title",
                  "variant_id"
                ]
              },
              "description": "Product line items array, each dict contains:"
            },
            "shipping_line": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Shipping method name"
                },
                "price": {
                  "type": "string",
                  "description": "Shipping cost as string"
                }
              },
              "description": "Shipping method dict with keys:",
              "required": [
                "price",
                "title"
              ]
            },
            "customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Customer's unique identifier"
                },
                "email": {
                  "type": "string",
                  "description": "Customer's email address"
                },
                "first_name": {
                  "type": "string",
                  "description": "Customer's first name"
                },
                "last_name": {
                  "type": "string",
                  "description": "Customer's last name"
                },
                "phone": {
                  "type": "string",
                  "description": "Customer's phone number"
                },
                "tags": {
                  "type": "string",
                  "description": "Customer tags"
                }
              },
              "description": "Customer information dict (alternative to customer_id) with keys:"
            },
            "applied_discount": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Discount name"
                },
                "description": {
                  "type": "string",
                  "description": "Discount description"
                },
                "value": {
                  "type": "string",
                  "description": "Original discount value"
                },
                "value_type": {
                  "type": "string",
                  "description": "Type ('fixed_amount' or 'percentage')"
                },
                "amount": {
                  "type": "string",
                  "description": "Applied discount amount"
                }
              },
              "description": "Order-level discount dict with keys:",
              "required": [
                "value",
                "value_type"
              ]
            }
          },
          "description": "Draft order object containing fields to update."
        }
      },
      "required": [
        "draft_order",
        "draft_order_id"
      ]
    }
  }
]