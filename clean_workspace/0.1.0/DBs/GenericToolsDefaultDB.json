{
  "services": {
    "google_maps": {
      "get_place_autocomplete_predictions": {
        "name": "get_place_autocomplete_predictions",
        "description": "Simulates returning autocomplete predictions for a given input query.",
        "parameters": {
          "type": "object",
          "properties": {
            "request_data": {
              "type": "object",
              "properties": {
                "input": {
                  "type": "string",
                  "description": "The text entered by the user to generate predictions."
                },
                "inputOffset": {
                  "type": "object",
                  "description": "Offset from the beginning of the input string to interpret for prediction."
                },
                "languageCode": {
                  "type": "object",
                  "description": "Preferred language for prediction results."
                },
                "regionCode": {
                  "type": "object",
                  "description": "Unicode region code to influence results."
                },
                "sessionToken": {
                  "type": "object",
                  "description": "Token used for session-scoped billing and grouping."
                },
                "includeQueryPredictions": {
                  "type": "object",
                  "description": "Whether to include predictions that complete the entire query."
                },
                "includePureServiceAreaBusinesses": {
                  "type": "object",
                  "description": "Whether to include service-area-only businesses."
                },
                "includedPrimaryTypes": {
                  "type": "object",
                  "description": "List of place types to restrict the predictions to."
                },
                "includedRegionCodes": {
                  "type": "object",
                  "description": "Restrict results to these CLDR region codes."
                },
                "origin": {
                  "type": "object",
                  "description": "Geographic location of the user.\n    - latitude (float)\n    - longitude (float)"
                },
                "locationRestriction": {
                  "type": "object",
                  "description": "Restricts predictions to a circular area.",
                  "properties": {
                    "circle": {
                      "type": "object",
                      "properties": {
                        "radius": {
                          "type": "number",
                          "description": "Radius of the restriction in meters."
                        }
                      },
                      "description": "",
                      "required": [
                        "radius"
                      ]
                    }
                  },
                  "required": [
                    "circle"
                  ]
                }
              },
              "description": "Input parameters for the autocomplete request.",
              "required": [
                "input"
              ]
            }
          },
          "required": [
            "request_data"
          ]
        }
      },
      "get_place_details": {
        "name": "get_place_details",
        "description": "Retrieves detailed information about a place using its resource name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. The resource name of the place in the format \"places/{place_id}\"."
            },
            "languageCode": {
              "type": "string",
              "description": "Preferred language for localized content if available."
            },
            "sessionToken": {
              "type": "string",
              "description": "Autocomplete session token for billing. Must be base64-safe and <= 36 ASCII chars."
            },
            "regionCode": {
              "type": "string",
              "description": "Unicode CLDR region code to influence localized place details."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "search_nearby_places": {
        "name": "search_nearby_places",
        "description": "Searches for places in the static database based on provided filters.\n\nFilters can include primary types, secondary types (included or excluded),\na specific language code for the display name, and a geographical\nlocation restriction with a center point and a radius.",
        "parameters": {
          "type": "object",
          "properties": {
            "request": {
              "type": "object",
              "properties": {
                "includedPrimaryTypes": {
                  "type": "object",
                  "description": "Only return places that have at least one of these primary types. Primary types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
                },
                "excludedPrimaryTypes": {
                  "type": "object",
                  "description": "Do not return places that have any of these primary types. Primary types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
                },
                "includedTypes": {
                  "type": "object",
                  "description": "Only return places that have at least one of these types (primary or secondary). Types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
                },
                "excludedTypes": {
                  "type": "object",
                  "description": "Do not return places that have any of these types (primary or secondary). Types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
                },
                "languageCode": {
                  "type": "object",
                  "description": "The preferred language for the displayName. If provided, only places with a displayName in this language will be returned."
                },
                "locationRestriction": {
                  "type": "object",
                  "description": "Limits the search to a circular area.",
                  "properties": {
                    "circle": {
                      "type": "object",
                      "description": "Defines the circle."
                    },
                    "center": {
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "description": "The latitude of the center point."
                        },
                        "longitude": {
                          "type": "number",
                          "description": "The longitude of the center point."
                        }
                      },
                      "description": "The center of the circle.",
                      "required": [
                        "latitude",
                        "longitude"
                      ]
                    },
                    "radius": {
                      "type": "number",
                      "description": "The radius of the circle in meters."
                    }
                  },
                  "required": [
                    "center",
                    "radius"
                  ]
                },
                "maxResultCount": {
                  "type": "integer",
                  "description": "The maximum number of places to return.\n    Defaults to 20."
                },
                "regionCode": {
                  "type": "string",
                  "description": "Unicode country/region code of the request origin."
                },
                "rankPreference": {
                  "type": "string",
                  "description": "Specifies the ranking of the results.\n    One of:\n    - \"RANK_PREFERENCE_UNSPECIFIED\"\n    - \"DISTANCE\"\n    - \"POPULARITY\""
                },
                "routingParameters": {
                  "type": "object",
                  "description": "Parameters to configure routing calculations.",
                  "properties": {
                    "routingPreference": {
                      "type": "object",
                      "description": "Specifies how to compute routing summaries.\n        One of:\n        - \"ROUTING_PREFERENCE_UNSPECIFIED\": No routing preference specified. Defaults to `TRAFFIC_UNAWARE`.\n        - \"TRAFFIC_UNAWARE\": Ignores live traffic conditions. Optimized for lowest latency.\n        - \"TRAFFIC_AWARE\": Considers live traffic, but includes some performance optimizations.\n        - \"TRAFFIC_AWARE_OPTIMAL\": Fully considers live traffic without optimizations (highest latency)."
                    },
                    "routeModifiers": {
                      "type": "object",
                      "description": "Conditions to avoid in routing.",
                      "properties": {
                        "avoidFerries": {
                          "type": "object",
                          "description": "Avoid ferries when possible."
                        },
                        "avoidTolls": {
                          "type": "object",
                          "description": "Avoid toll roads when possible."
                        },
                        "avoidIndoor": {
                          "type": "object",
                          "description": "Avoid indoor navigation when possible."
                        },
                        "avoidHighways": {
                          "type": "object",
                          "description": "Avoid highways when possible."
                        }
                      }
                    },
                    "origin": {
                      "type": "object",
                      "description": "Overrides the polyline origin.",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "description": "Latitude in degrees. Range: [-90.0, +90.0]."
                        },
                        "longitude": {
                          "type": "number",
                          "description": "Longitude in degrees. Range: [-180.0, +180.0]."
                        }
                      },
                      "required": [
                        "latitude",
                        "longitude"
                      ]
                    },
                    "travelMode": {
                      "type": "object",
                      "description": "Specifies the mode of travel.\n        One of:\n        - \"TRAVEL_MODE_UNSPECIFIED\": No travel mode specified. Defaults to `DRIVE`.\n        - \"DRIVE\": Travel by passenger car.\n        - \"BICYCLE\": Travel by bicycle. Not supported with `search_along_route_parameters`.\n        - \"WALK\": Travel by walking. Not supported with `search_along_route_parameters`.\n        - \"TWO_WHEELER\": Motorized two-wheeled vehicles like scooters or motorcycles. Only supported in specific countries."
                    }
                  }
                }
              },
              "description": "A dictionary containing the search parameters.\nExpected keys:"
            }
          },
          "required": [
            "request"
          ]
        }
      },
      "search_places_by_text": {
        "name": "search_places_by_text",
        "description": "Performs a text-based search for places using optional filters.\n\nThis function processes a search request structured according to the\nGoogleMapsPlacesV1SearchTextRequest schema. Supported filters include:\n'strictTypeFiltering', 'priceLevels', 'locationBias', 'openNow',\n'minRating', 'includePureServiceAreaBusinesses', 'locationRestriction',\n'languageCode', 'pageSize', 'regionCode', 'textQuery', and others.",
        "parameters": {
          "type": "object",
          "properties": {
            "request": {
              "type": "object",
              "properties": {
                "textQuery": {
                  "type": "string",
                  "description": "Required text query to search for."
                },
                "pageSize": {
                  "type": "object",
                  "description": "Max number of results."
                },
                "maxResultCount": {
                  "type": "object",
                  "description": "Alternate to pageSize."
                },
                "strictTypeFiltering": {
                  "type": "object",
                  "description": "If true, only places whose primaryType exactly matches includedType will be returned. Defaults to false."
                },
                "includedType": {
                  "type": "object",
                  "description": "Used in conjunction with `strictTypeFiltering=true`. Only return places that have at least one of these types (primary or secondary). Types are defined in (https://developers.google.com/maps/documentation/places/web-service/place-types)"
                },
                "priceLevels": {
                  "type": "object",
                  "description": "Filter results by the specified price levels.\n    Allowed values include:\n    - PRICE_LEVEL_UNSPECIFIED\n    - PRICE_LEVEL_FREE\n    - PRICE_LEVEL_INEXPENSIVE\n    - PRICE_LEVEL_MODERATE\n    - PRICE_LEVEL_EXPENSIVE\n    - PRICE_LEVEL_VERY_EXPENSIVE"
                },
                "locationBias": {
                  "type": "object",
                  "description": "A geographic \u201cbias\u201d that influences result ordering.\n    One of:",
                  "properties": {
                    "circle": {
                      "type": "object",
                      "description": "A circular geographic area.",
                      "properties": {
                        "center": {
                          "type": "object",
                          "properties": {
                            "latitude": {
                              "type": "number",
                              "description": "The center\u2019s latitude."
                            },
                            "longitude": {
                              "type": "number",
                              "description": "The center\u2019s longitude."
                            }
                          },
                          "description": "Required. The center point of the circle.",
                          "required": [
                            "latitude",
                            "longitude"
                          ]
                        },
                        "radius": {
                          "type": "number",
                          "description": "Required. Radius in meters. Only places within this circle are returned."
                        }
                      },
                      "required": [
                        "center",
                        "radius"
                      ]
                    },
                    "rectangle": {
                      "type": "object",
                      "description": "A rectangular geographic area.",
                      "properties": {
                        "viewport": {
                          "type": "object",
                          "properties": {
                            "low": {
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "description": "Latitude of the southwest corner."
                                },
                                "longitude": {
                                  "type": "number",
                                  "description": "Longitude of the southwest corner."
                                }
                              },
                              "description": "Required. Southwest point of the viewport.",
                              "required": [
                                "latitude",
                                "longitude"
                              ]
                            },
                            "high": {
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "description": "Latitude of the northeast corner."
                                },
                                "longitude": {
                                  "type": "number",
                                  "description": "Longitude of the northeast corner."
                                }
                              },
                              "description": "Required. Northeast point of the viewport.",
                              "required": [
                                "latitude",
                                "longitude"
                              ]
                            }
                          },
                          "description": "Required. The bounding box of the rectangle.",
                          "required": [
                            "high",
                            "low"
                          ]
                        }
                      },
                      "required": [
                        "viewport"
                      ]
                    }
                  }
                },
                "openNow": {
                  "type": "object",
                  "description": "If true, only return places that are currently open. Defaults to false."
                },
                "minRating": {
                  "type": "object",
                  "description": "If provided, only return places with a rating greater than or equal to the specified value."
                },
                "pageToken": {
                  "type": "object",
                  "description": "Used for pagination. If provided, returns the next set of results following a previous search."
                },
                "includePureServiceAreaBusinesses": {
                  "type": "object",
                  "description": "If false, exclude places that are pure service area businesses. Defaults to true."
                },
                "locationRestriction": {
                  "type": "object",
                  "description": "Limits the\n    search to a circular area.",
                  "properties": {
                    "circle": {
                      "type": "object",
                      "description": "Defines the circle."
                    },
                    "center": {
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "description": "The latitude of the center point."
                        },
                        "longitude": {
                          "type": "number",
                          "description": "The longitude of the center point."
                        }
                      },
                      "description": "The center of the circle.",
                      "required": [
                        "latitude",
                        "longitude"
                      ]
                    },
                    "radius": {
                      "type": "number",
                      "description": "The radius of the circle in meters."
                    }
                  },
                  "required": [
                    "center",
                    "radius"
                  ]
                },
                "languageCode": {
                  "type": "object",
                  "description": "The preferred language for the displayName. If provided, only places with a displayName in this language will be returned."
                },
                "regionCode": {
                  "type": "object",
                  "description": "Unicode country/region code of the request origin."
                },
                "searchAlongRouteParameters": {
                  "type": "object",
                  "description": "Specifies a precalculated polyline route used to bias place search results along a path, rather than in a general area like `locationBias` or `locationRestriction`.",
                  "properties": {
                    "polyline": {
                      "type": "object",
                      "properties": {
                        "encodedPolyline": {
                          "type": "string",
                          "description": "An encoded polyline string representing the route, as defined by the [Google Polyline Algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)."
                        }
                      },
                      "description": "Required. Defines the route polyline.",
                      "required": [
                        "encodedPolyline"
                      ]
                    }
                  },
                  "required": [
                    "polyline"
                  ]
                },
                "evOptions": {
                  "type": "object",
                  "description": "Electric vehicle (EV) filtering options for the search.",
                  "properties": {
                    "connectorTypes": {
                      "type": "object",
                      "description": "List of preferred EV connector types. Places without any of the specified connectors are excluded. Valid values include:\n        - \"EV_CONNECTOR_TYPE_UNSPECIFIED\": Unspecified connector.\n        - \"EV_CONNECTOR_TYPE_OTHER\": Other connector types.\n        - \"EV_CONNECTOR_TYPE_J1772\": J1772 type 1 connector.\n        - \"EV_CONNECTOR_TYPE_TYPE_2\": IEC 62196 type 2 connector (MENNEKES).\n        - \"EV_CONNECTOR_TYPE_CHADEMO\": CHAdeMO connector.\n        - \"EV_CONNECTOR_TYPE_CCS_COMBO_1\": Combined Charging System, type-1 J-1772.\n        - \"EV_CONNECTOR_TYPE_CCS_COMBO_2\": Combined Charging System, type-2 Mennekes.\n        - \"EV_CONNECTOR_TYPE_TESLA\": Generic Tesla connector. May vary by region (e.g., NACS, CCS2, GB/T).\n        - \"EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T\": GB/T standard connector (China).\n        - \"EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET\": Unspecified wall outlet.\n        - \"EV_CONNECTOR_TYPE_NACS\": North American Charging System (NACS), SAE J3400 standard."
                    },
                    "minimumChargingRateKw": {
                      "type": "object",
                      "description": "Minimum charging rate in kilowatts. Filters out places with a lower charging rate."
                    }
                  }
                },
                "routingParameters": {
                  "type": "object",
                  "description": "Parameters to configure routing calculations.",
                  "properties": {
                    "routingPreference": {
                      "type": "object",
                      "description": "Specifies how to compute routing summaries.\n        One of:\n        - \"ROUTING_PREFERENCE_UNSPECIFIED\": No routing preference specified. Defaults to `TRAFFIC_UNAWARE`.\n        - \"TRAFFIC_UNAWARE\": Ignores live traffic conditions. Optimized for lowest latency.\n        - \"TRAFFIC_AWARE\": Considers live traffic, but includes some performance optimizations.\n        - \"TRAFFIC_AWARE_OPTIMAL\": Fully considers live traffic without optimizations (highest latency)."
                    },
                    "routeModifiers": {
                      "type": "object",
                      "description": "Conditions to avoid in routing.",
                      "properties": {
                        "avoidFerries": {
                          "type": "object",
                          "description": "Avoid ferries when possible."
                        },
                        "avoidTolls": {
                          "type": "object",
                          "description": "Avoid toll roads when possible."
                        },
                        "avoidIndoor": {
                          "type": "object",
                          "description": "Avoid indoor navigation when possible."
                        },
                        "avoidHighways": {
                          "type": "object",
                          "description": "Avoid highways when possible."
                        }
                      }
                    },
                    "origin": {
                      "type": "object",
                      "description": "Overrides the polyline origin.",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "description": "Latitude in degrees. Range: [-90.0, +90.0]."
                        },
                        "longitude": {
                          "type": "number",
                          "description": "Longitude in degrees. Range: [-180.0, +180.0]."
                        }
                      },
                      "required": [
                        "latitude",
                        "longitude"
                      ]
                    },
                    "travelMode": {
                      "type": "object",
                      "description": "Specifies the mode of travel.\n        One of:\n        - \"TRAVEL_MODE_UNSPECIFIED\": No travel mode specified. Defaults to `DRIVE`.\n        - \"DRIVE\": Travel by passenger car.\n        - \"BICYCLE\": Travel by bicycle. Not supported with `search_along_route_parameters`.\n        - \"WALK\": Travel by walking. Not supported with `search_along_route_parameters`.\n        - \"TWO_WHEELER\": Motorized two-wheeled vehicles like scooters or motorcycles. Only supported in specific countries."
                    }
                  }
                },
                "rankPreference": {
                  "type": "object",
                  "description": "Specifies the ranking of the results.\n    One of:\n    - \"RANK_PREFERENCE_UNSPECIFIED\"\n    - \"DISTANCE\"\n    - \"POPULARITY\""
                }
              },
              "description": "Dictionary with the following keys:",
              "required": [
                "textQuery"
              ]
            }
          },
          "required": [
            "request"
          ]
        }
      },
      "get_place_photo_media": {
        "name": "get_place_photo_media",
        "description": "Retrieves photo media by resource name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of a photo, formatted as\n\"places/{place_id}/photos/{photo_reference}/media\". (Required)"
            },
            "maxWidthPx": {
              "type": "integer",
              "description": "The maximum desired photo width (range 1\u20134800)."
            },
            "maxHeightPx": {
              "type": "integer",
              "description": "The maximum desired photo height (range 1\u20134800)."
            },
            "skipHttpRedirect": {
              "type": "boolean",
              "description": "If True, skips HTTP redirects and returns JSON data. Defaults to False."
            }
          },
          "required": [
            "name"
          ]
        }
      }
    },
    "google_calendar": {
      "delete_event": {
        "name": "delete_event",
        "description": "Deletes an event from the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar containing the event to delete."
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the event to delete."
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the deletion.\nDefaults to False."
            },
            "sendUpdates": {
              "type": "string",
              "description": "Whether to send updates about the deletion.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None."
            }
          },
          "required": [
            "calendarId",
            "eventId"
          ]
        }
      },
      "get_event": {
        "name": "get_event",
        "description": "Retrieves an event from the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Deprecated. This parameter is ignored as email addresses\nare always included in the response. Defaults to False."
            },
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar. If not provided, defaults to \"primary\".\nTo retrieve calendar IDs call the calendarList.list method.\nIf you want to access the primary calendar of the currently logged in user,\nuse the \"primary\" keyword."
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the event to retrieve. This is mandatory."
            },
            "maxAttendees": {
              "type": "integer",
              "description": "The maximum number of attendees to return (must be non-negative).\nDefaults to None (return all attendees)."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone to use for the response (e.g. \"America/New_York\").\nDefaults to the calendar's time zone."
            }
          }
        }
      },
      "import_event": {
        "name": "import_event",
        "description": "Imports an event into the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar."
            },
            "conferenceDataVersion": {
              "type": "integer",
              "description": "The version of the conference data.\nDefaults to 0."
            },
            "supportsAttachments": {
              "type": "boolean",
              "description": "Whether the event supports attachments.\nDefaults to False."
            },
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The identifier of the event. If not provided,\n    a new UUID will be generated."
                },
                "summary": {
                  "type": "string",
                  "description": "The summary/title of the event."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the event."
                },
                "start": {
                  "type": "object",
                  "properties": {
                    "dateTime": {
                      "type": "string",
                      "description": "The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                    }
                  },
                  "description": "The start time of the event.",
                  "required": [
                    "dateTime"
                  ]
                },
                "end": {
                  "type": "object",
                  "properties": {
                    "dateTime": {
                      "type": "string",
                      "description": "The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                    }
                  },
                  "description": "The end time of the event.",
                  "required": [
                    "dateTime"
                  ]
                }
              },
              "description": "The event to import:",
              "required": [
                "end",
                "start",
                "summary"
              ]
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "create_event": {
        "name": "create_event",
        "description": "Creates a new event in the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar. Defaults to \"primary\"."
            },
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The identifier of the event. If not provided,\n    a new UUID will be generated."
                },
                "summary": {
                  "type": "string",
                  "description": "The summary/title of the event."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the event."
                },
                "start": {
                  "type": "object",
                  "properties": {
                    "dateTime": {
                      "type": "string",
                      "description": "The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                    }
                  },
                  "description": "The start time of the event.",
                  "required": [
                    "dateTime"
                  ]
                },
                "end": {
                  "type": "object",
                  "properties": {
                    "dateTime": {
                      "type": "string",
                      "description": "The date and time of the end time."
                    }
                  },
                  "description": "The end time of the event.",
                  "required": [
                    "dateTime"
                  ]
                },
                "recurrence": {
                  "type": "object",
                  "description": "The recurrence rules of the event in RRULE format.\n    Examples:\n    - Daily for 5 occurrences: [\"RRULE:FREQ=DAILY;COUNT=5\"]\n    - Weekly on Monday and Wednesday: [\"RRULE:FREQ=WEEKLY;BYDAY=MO,WE\"]\n    - Monthly on the 15th: [\"RRULE:FREQ=MONTHLY;BYMONTHDAY=15\"]\n    - Yearly on January 1st: [\"RRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1\"]\n    - Every 2 weeks: [\"RRULE:FREQ=WEEKLY;INTERVAL=2\"]\n    - Until a specific date: [\"RRULE:FREQ=DAILY;UNTIL=20241231T235959Z\"]\n    \n    Supported RRULE parameters:\n    - FREQ: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY (required)\n    - INTERVAL: Positive integer (default: 1)\n    - COUNT: Positive integer (number of occurrences)\n    - UNTIL: YYYYMMDDTHHMMSSZ or YYYYMMDDTHHMMSS format\n    - BYDAY: SU,MO,TU,WE,TH,FR,SA (with optional ordinal: 1SU, -1MO)\n    - BYMONTH: 1-12\n    - BYMONTHDAY: 1-31\n    - BYYEARDAY: 1-366\n    - BYWEEKNO: 1-53\n    - BYHOUR: 0-23\n    - BYMINUTE: 0-59\n    - BYSECOND: 0-59\n    - BYSETPOS: 1-366 or -366 to -1\n    - WKST: SU,MO,TU,WE,TH,FR,SA (week start)"
                },
                "attendees": {
                  "type": "object",
                  "description": "List of event attendees. Each attendee can have:",
                  "properties": {
                    "email": {
                      "type": "object",
                      "description": "The attendee's email address"
                    },
                    "displayName": {
                      "type": "object",
                      "description": "The attendee's display name"
                    },
                    "organizer": {
                      "type": "object",
                      "description": "Whether the attendee is the organizer"
                    },
                    "self": {
                      "type": "object",
                      "description": "Whether the attendee is the user"
                    },
                    "resource": {
                      "type": "object",
                      "description": "Whether the attendee is a resource"
                    },
                    "optional": {
                      "type": "object",
                      "description": "Whether the attendee's presence is optional"
                    },
                    "responseStatus": {
                      "type": "object",
                      "description": "The attendee's response status"
                    },
                    "comment": {
                      "type": "object",
                      "description": "The attendee's comment"
                    },
                    "additionalGuests": {
                      "type": "object",
                      "description": "Number of additional guests"
                    }
                  }
                },
                "reminders": {
                  "type": "object",
                  "description": "The reminders of the event.",
                  "properties": {
                    "useDefault": {
                      "type": "boolean",
                      "description": "Whether to use the default reminders."
                    },
                    "overrides": {
                      "type": "object",
                      "description": "The list of overrides.",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "The method of the reminder."
                        },
                        "minutes": {
                          "type": "integer",
                          "description": "The minutes of the reminder."
                        }
                      },
                      "required": [
                        "method",
                        "minutes"
                      ]
                    }
                  },
                  "required": [
                    "useDefault"
                  ]
                },
                "location": {
                  "type": "object",
                  "description": "The location of the event."
                }
              },
              "description": "The event to create:",
              "required": [
                "end",
                "start",
                "summary"
              ]
            }
          }
        }
      },
      "list_event_instances": {
        "name": "list_event_instances",
        "description": "Returns instances of a specified recurring event.\n\nThis is a mock, so we won't actually expand recurrences.\nWe'll pretend the event itself is the only instance.",
        "parameters": {
          "type": "object",
          "properties": {
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to include the email address of the event creator.\nDefaults to False."
            },
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar. If not provided, defaults to \"primary\"."
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the event."
            },
            "maxAttendees": {
              "type": "integer",
              "description": "The maximum number of attendees to return.\nMust be non-negative. Defaults to None (return all attendees)."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of instances to return.\nMust be a positive integer. Defaults to 250."
            },
            "originalStart": {
              "type": "string",
              "description": "The original start time of the instance in ISO 8601 format."
            },
            "pageToken": {
              "type": "string",
              "description": "The token for the next page of results."
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted instances.\nDefaults to False."
            },
            "timeMax": {
              "type": "string",
              "description": "The maximum time of the instances to return in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
            },
            "timeMin": {
              "type": "string",
              "description": "The minimum time of the instances to return in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone to use for the response (e.g. \"America/New_York\").\nMust be in format 'Continent/City'. Defaults to the calendar's time zone."
            }
          }
        }
      },
      "list_events": {
        "name": "list_events",
        "description": "Lists events from the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar.\nIf None, events are filtered assuming 'None' is a valid calendar identifier or\nspecific logic handles it (original behavior preserved). The conceptual default\nmentioned as \"primary\" in some descriptions would need to be handled by the caller\nor internal logic if `None` is passed. Defaults to None."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of events to return.\nMust be a positive integer. Defaults to 250."
            },
            "timeMin": {
              "type": "string",
              "description": "The minimum time of the events to return (ISO datetime string)."
            },
            "timeMax": {
              "type": "string",
              "description": "The maximum time of the events to return (ISO datetime string)."
            },
            "q": {
              "type": "string",
              "description": "The query string to filter events by."
            },
            "singleEvents": {
              "type": "boolean",
              "description": "Whether to expand recurring events into individual instances.\nWhen True, recurring events are expanded into separate instances within the time range.\nWhen False, only the base recurring event is returned. Defaults to False."
            },
            "orderBy": {
              "type": "string",
              "description": "The order of the events.\nMust be one of: \"startTime\", \"updated\". Defaults to None."
            }
          }
        }
      },
      "move_event": {
        "name": "move_event",
        "description": "Moves an event from one calendar to another. We simulate by removing from old\n\nand creating in new with same ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the source calendar."
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the event to move."
            },
            "destination": {
              "type": "string",
              "description": "The identifier of the destination calendar."
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the move.\nDefaults to False."
            },
            "sendUpdates": {
              "type": "string",
              "description": "Whether to send updates about the move.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None."
            }
          },
          "required": [
            "calendarId",
            "destination",
            "eventId"
          ]
        }
      },
      "patch_event": {
        "name": "patch_event",
        "description": "Updates specific fields of an existing event.\n\nThis function allows partial updates to an event by providing only the fields \nthat need to be changed.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar. Defaults to \"primary\"."
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the event to update."
            },
            "resource": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "object",
                  "description": "The new summary/title of the event."
                },
                "description": {
                  "type": "object",
                  "description": "The new description of the event."
                },
                "start": {
                  "type": "object",
                  "description": "The new start time of the event.",
                  "properties": {
                    "dateTime": {
                      "type": "object",
                      "description": "The date and time in ISO 8601 format (e.g., \"2025-03-10T09:00:00Z\")."
                    }
                  }
                },
                "end": {
                  "type": "object",
                  "description": "The new end time of the event.",
                  "properties": {
                    "dateTime": {
                      "type": "object",
                      "description": "The date and time in ISO 8601 format (e.g., \"2025-03-10T09:30:00Z\")."
                    }
                  }
                },
                "attendees": {
                  "type": "object",
                  "description": "The new list of attendees.\n    Each attendee dict contains:",
                  "properties": {
                    "email": {
                      "type": "object",
                      "description": "The attendee's email address."
                    },
                    "displayName": {
                      "type": "object",
                      "description": "The attendee's name."
                    },
                    "organizer": {
                      "type": "object",
                      "description": "Whether the attendee is the organizer."
                    },
                    "self": {
                      "type": "object",
                      "description": "Whether this represents the calendar owner."
                    },
                    "resource": {
                      "type": "object",
                      "description": "Whether the attendee is a resource (room, equipment)."
                    },
                    "optional": {
                      "type": "object",
                      "description": "Whether this is an optional attendee."
                    },
                    "responseStatus": {
                      "type": "object",
                      "description": "Response status (\"needsAction\", \"declined\", \"tentative\", \"accepted\")."
                    },
                    "comment": {
                      "type": "object",
                      "description": "The attendee's comment."
                    },
                    "additionalGuests": {
                      "type": "object",
                      "description": "Number of additional guests."
                    }
                  }
                },
                "location": {
                  "type": "object",
                  "description": "The new location of the event."
                },
                "recurrence": {
                  "type": "object",
                  "description": "The new recurrence rules of the event."
                },
                "reminders": {
                  "type": "object",
                  "description": "The new reminders of the event.",
                  "properties": {
                    "useDefault": {
                      "type": "object",
                      "description": "Whether to use default calendar reminders."
                    },
                    "overrides": {
                      "type": "object",
                      "description": "Custom reminder overrides.\n        Each override dict contains:",
                      "properties": {
                        "method": {
                          "type": "object",
                          "description": "Reminder method."
                        },
                        "minutes": {
                          "type": "object",
                          "description": "Minutes before event start."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The fields to update.\nValidated structure:"
            }
          }
        }
      },
      "quick_add_event": {
        "name": "quick_add_event",
        "description": "Creates an event based on a simple text string.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar."
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the creation.\nDefaults to False."
            },
            "sendUpdates": {
              "type": "string",
              "description": "Whether to send updates about the creation.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None."
            },
            "text": {
              "type": "string",
              "description": "The text to parse into an event. This should be a natural language\ndescription of the event, such as \"Lunch with John at noon tomorrow\"."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "update_event": {
        "name": "update_event",
        "description": "Replaces an existing event with new data.",
        "parameters": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "The identifier of the event to update."
            },
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar."
            },
            "resource": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "string",
                  "description": "The summary/title of the event."
                },
                "id": {
                  "type": "object",
                  "description": "The identifier of the event."
                },
                "description": {
                  "type": "object",
                  "description": "The description of the event."
                },
                "start": {
                  "type": "object",
                  "description": "The start time of the event.",
                  "properties": {
                    "dateTime": {
                      "type": "object",
                      "description": "The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                    },
                    "timeZone": {
                      "type": "object",
                      "description": "The time zone of the start time."
                    }
                  }
                },
                "end": {
                  "type": "object",
                  "description": "The end time of the event.",
                  "properties": {
                    "dateTime": {
                      "type": "object",
                      "description": "The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                    },
                    "timeZone": {
                      "type": "object",
                      "description": "The time zone of the end time."
                    }
                  }
                },
                "recurrence": {
                  "type": "object",
                  "description": "The recurrence rules of the event in RRULE format.\n    Examples:\n    - Daily for 5 occurrences: [\"RRULE:FREQ=DAILY;COUNT=5\"]\n    - Weekly on Monday and Wednesday: [\"RRULE:FREQ=WEEKLY;BYDAY=MO,WE\"]\n    - Monthly on the 15th: [\"RRULE:FREQ=MONTHLY;BYMONTHDAY=15\"]\n    - Yearly on January 1st: [\"RRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1\"]\n    - Every 2 weeks: [\"RRULE:FREQ=WEEKLY;INTERVAL=2\"]\n    - Until a specific date: [\"RRULE:FREQ=DAILY;UNTIL=20241231T235959Z\"]\n    \n    Supported RRULE parameters:\n    - FREQ: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY (required)\n    - INTERVAL: Positive integer (default: 1)\n    - COUNT: Positive integer (number of occurrences)\n    - UNTIL: YYYYMMDDTHHMMSSZ or YYYYMMDDTHHMMSS format\n    - BYDAY: SU,MO,TU,WE,TH,FR,SA (with optional ordinal: 1SU, -1MO)\n    - BYMONTH: 1-12\n    - BYMONTHDAY: 1-31\n    - BYYEARDAY: 1-366\n    - BYWEEKNO: 1-53\n    - BYHOUR: 0-23\n    - BYMINUTE: 0-59\n    - BYSECOND: 0-59\n    - BYSETPOS: 1-366 or -366 to -1\n    - WKST: SU,MO,TU,WE,TH,FR,SA (week start)"
                },
                "attendees": {
                  "type": "object",
                  "description": "List of event attendees. Each attendee can have:",
                  "properties": {
                    "email": {
                      "type": "object",
                      "description": "The attendee's email address"
                    },
                    "displayName": {
                      "type": "object",
                      "description": "The attendee's display name"
                    },
                    "organizer": {
                      "type": "object",
                      "description": "Whether the attendee is the organizer"
                    },
                    "self": {
                      "type": "object",
                      "description": "Whether the attendee is the user"
                    },
                    "resource": {
                      "type": "object",
                      "description": "Whether the attendee is a resource"
                    },
                    "optional": {
                      "type": "object",
                      "description": "Whether the attendee's presence is optional"
                    },
                    "responseStatus": {
                      "type": "object",
                      "description": "The attendee's response status"
                    },
                    "comment": {
                      "type": "object",
                      "description": "The attendee's comment"
                    },
                    "additionalGuests": {
                      "type": "object",
                      "description": "Number of additional guests"
                    }
                  }
                },
                "reminders": {
                  "type": "object",
                  "description": "The reminders of the event.",
                  "properties": {
                    "useDefault": {
                      "type": "object",
                      "description": "Whether to use the default reminders."
                    },
                    "overrides": {
                      "type": "object",
                      "description": "The list of overrides.",
                      "properties": {
                        "method": {
                          "type": "object",
                          "description": "The method of the reminder."
                        },
                        "minutes": {
                          "type": "object",
                          "description": "The minutes of the reminder."
                        }
                      }
                    }
                  }
                },
                "location": {
                  "type": "object",
                  "description": "The location of the event."
                }
              },
              "description": "The event to update. Must contain:",
              "required": [
                "summary"
              ]
            }
          },
          "required": [
            "eventId"
          ]
        }
      },
      "watch_event_changes": {
        "name": "watch_event_changes",
        "description": "Sets up a watch for changes to events in the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include the email address\nof the event creator. Defaults to False."
            },
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar. If not provided,\ndefaults to the user's primary calendar."
            },
            "eventTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The types of events to watch for.\nMust be one or more of: \"default\", \"focusTime\", \"outOfOffice\"."
            },
            "iCalUID": {
              "type": "string",
              "description": "The iCalUID of the event to filter by."
            },
            "maxAttendees": {
              "type": "integer",
              "description": "The maximum number of attendees to return per event.\nMust be a positive integer if provided."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of events to return.\nMust be a positive integer. Defaults to 250."
            },
            "orderBy": {
              "type": "string",
              "description": "The order of the events.\nMust be one of: \"startTime\", \"updated\"."
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return."
            },
            "privateExtendedProperty": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Private extended property filters\nin the form \"key=value\"."
            },
            "q": {
              "type": "string",
              "description": "Free text search terms to find events that match."
            },
            "sharedExtendedProperty": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Shared extended property filters\nin the form \"key=value\"."
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted events.\nDefaults to False."
            },
            "showHiddenInvitations": {
              "type": "boolean",
              "description": "Whether to include hidden invitations.\nDefaults to False."
            },
            "singleEvents": {
              "type": "boolean",
              "description": "Whether to expand recurring events into instances.\nDefaults to False."
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the\nlast page of results from the previous list request."
            },
            "timeMax": {
              "type": "string",
              "description": "Upper bound (exclusive) for an event's start time in\nISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
            },
            "timeMin": {
              "type": "string",
              "description": "Lower bound (inclusive) for an event's end time in\nISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
            },
            "timeZone": {
              "type": "string",
              "description": "Time zone used in the response (e.g. \"America/New_York\").\nThe default is the calendar's time zone."
            },
            "updatedMin": {
              "type": "string",
              "description": "Lower bound for an event's last modification time in\nISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
            },
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The identifier of the watch. If not provided,\n    a new UUID will be generated."
                },
                "type": {
                  "type": "object",
                  "description": "The type of the watch. Defaults to \"web_hook\"."
                },
                "address": {
                  "type": "object",
                  "description": "The address to send notifications to."
                }
              },
              "description": "The watch configuration:"
            }
          }
        }
      },
      "clear_primary_calendar": {
        "name": "clear_primary_calendar",
        "description": "Clears a primary calendar. This operation deletes all events associated with the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "delete_secondary_calendar": {
        "name": "delete_secondary_calendar",
        "description": "Deletes a secondary calendar. This operation removes the calendar from the user's calendar list.\n\nNote: Primary calendars cannot be deleted.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the secondary calendar to delete.\nTo retrieve calendar IDs, call the `calendarList.list` method."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "get_calendar_metadata": {
        "name": "get_calendar_metadata",
        "description": "Retrieves metadata for a specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "create_secondary_calendar": {
        "name": "create_secondary_calendar",
        "description": "Creates a secondary calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The identifier of the calendar."
                },
                "summary": {
                  "type": "object",
                  "description": "The Title of the calendar."
                },
                "description": {
                  "type": "object",
                  "description": "The description of the calendar."
                },
                "timeZone": {
                  "type": "object",
                  "description": "The time zone of the calendar (e.g. \"America/New_York\")."
                },
                "location": {
                  "type": "object",
                  "description": "Geographic location of the calendar as free-form text."
                },
                "etag": {
                  "type": "object",
                  "description": "ETag of the resource. Used for optimistic concurrency control."
                },
                "kind": {
                  "type": "object",
                  "description": "Type of the resource (\"calendar#calendar\")."
                },
                "conferenceProperties": {
                  "type": "object",
                  "description": "Conference-related properties.",
                  "properties": {
                    "allowedConferenceSolutionTypes": {
                      "type": "object",
                      "description": "List of conference solution types that are supported for this calendar.\n        Each string in the list can be one of:\n        - \"eventHangout\"\n        - \"eventNamedHangout\"\n        - \"hangoutsMeet\""
                    }
                  }
                }
              },
              "description": "The resource to create the calendar with."
            }
          }
        }
      },
      "patch_calendar_metadata": {
        "name": "patch_calendar_metadata",
        "description": "Updates specific fields of an existing calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
            },
            "resource": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "object",
                  "description": "The summary of the calendar."
                },
                "description": {
                  "type": "object",
                  "description": "The description of the calendar."
                },
                "timeZone": {
                  "type": "object",
                  "description": "The time zone of the calendar (e.g. \"America/New_York\")."
                }
              },
              "description": "The resource to patch the calendar with."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "update_calendar_metadata": {
        "name": "update_calendar_metadata",
        "description": "Replaces an existing calendar with new data.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
            },
            "resource": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "object",
                  "description": "The summary of the calendar."
                },
                "description": {
                  "type": "object",
                  "description": "The description of the calendar."
                },
                "timeZone": {
                  "type": "object",
                  "description": "The time zone of the calendar (e.g. \"America/New_York\")."
                }
              },
              "description": "The resource to update the calendar with."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "get_calendar_and_event_colors": {
        "name": "get_calendar_and_event_colors",
        "description": "Returns the color definitions for calendars and events.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_access_control_rule": {
        "name": "delete_access_control_rule",
        "description": "Deletes an access control rule from the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar to delete the rule from."
            },
            "ruleId": {
              "type": "string",
              "description": "The ID of the rule to delete."
            }
          },
          "required": [
            "calendarId",
            "ruleId"
          ]
        }
      },
      "get_access_control_rule": {
        "name": "get_access_control_rule",
        "description": "Retrieves an access control rule from the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar to get the rule from."
            },
            "ruleId": {
              "type": "string",
              "description": "The ID of the rule to retrieve."
            }
          },
          "required": [
            "calendarId",
            "ruleId"
          ]
        }
      },
      "create_access_control_rule": {
        "name": "create_access_control_rule",
        "description": "Creates a new access control rule for the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar to create the rule for."
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications to the rule's scope. Defaults to True."
            },
            "resource": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role to assign (e.g., 'reader', 'writer')."
                },
                "scope": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of scope (e.g., 'user', 'group')."
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the scope (e.g., email address)."
                    }
                  },
                  "description": "The scope of the rule:",
                  "required": [
                    "type",
                    "value"
                  ]
                },
                "ruleId": {
                  "type": "object",
                  "description": "The ID of the rule. If not provided, one will be generated."
                }
              },
              "description": "The rule details:",
              "required": [
                "role",
                "scope"
              ]
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "list_access_control_rules": {
        "name": "list_access_control_rules",
        "description": "Lists all access control rules for the specified calendar.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar to list rules for."
            },
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of rules to return. Defaults to 100."
            },
            "pageToken": {
              "type": "string",
              "description": "Token for pagination. Not implemented."
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted rules. Not implemented."
            },
            "syncToken": {
              "type": "string",
              "description": "Token for synchronization. Not implemented."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "patch_access_control_rule": {
        "name": "patch_access_control_rule",
        "description": "Updates specific fields of an existing access control rule.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar containing the rule."
            },
            "ruleId": {
              "type": "string",
              "description": "The ID of the rule to update."
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications. Defaults to True."
            },
            "resource": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "New role to assign."
                },
                "scope": {
                  "type": "object",
                  "properties": {},
                  "description": "New scope settings."
                }
              },
              "description": "The fields to update:",
              "required": [
                "role",
                "scope"
              ]
            }
          },
          "required": [
            "calendarId",
            "ruleId"
          ]
        }
      },
      "update_access_control_rule": {
        "name": "update_access_control_rule",
        "description": "Replaces an existing access control rule with new data.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar containing the rule."
            },
            "ruleId": {
              "type": "string",
              "description": "The ID of the rule to update."
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications. Defaults to True."
            },
            "resource": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "New role to assign."
                },
                "scope": {
                  "type": "object",
                  "properties": {},
                  "description": "New scope settings."
                }
              },
              "description": "The complete new rule data:",
              "required": [
                "role",
                "scope"
              ]
            }
          },
          "required": [
            "calendarId",
            "ruleId"
          ]
        }
      },
      "watch_access_control_rule_changes": {
        "name": "watch_access_control_rule_changes",
        "description": "Sets up a watch for changes to access control rules.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar to watch."
            },
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of rules to return. Defaults to 100."
            },
            "pageToken": {
              "type": "string",
              "description": "Token for pagination. Not implemented."
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted rules. Not implemented."
            },
            "syncToken": {
              "type": "string",
              "description": "Token for synchronization. Not implemented."
            },
            "resource": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Type of watch (defaults to \"web_hook\")."
                },
                "id": {
                  "type": "string",
                  "description": "Channel ID. If not provided, one will be generated."
                }
              },
              "description": "Watch configuration:",
              "required": [
                "type"
              ]
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "delete_calendar_list_entry": {
        "name": "delete_calendar_list_entry",
        "description": "Deletes a calendar list entry from the user's calendar list.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar list entry to delete."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "get_calendar_list_entry": {
        "name": "get_calendar_list_entry",
        "description": "Retrieves a calendar list entry from the user's calendar list.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar list entry to retrieve. If \"primary\" is provided, the primary calendar will be returned."
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "create_calendar_list_entry": {
        "name": "create_calendar_list_entry",
        "description": "Creates a new calendar list entry in the user's calendar list.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The ID of the calendar list entry. If not provided, a UUID will be generated."
                },
                "summary": {
                  "type": "string",
                  "description": "The summary of the calendar list entry."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the calendar list entry."
                },
                "timeZone": {
                  "type": "string",
                  "description": "The time zone of the calendar list entry (e.g. \"America/New_York\")."
                }
              },
              "description": "The resource to create the calendar list entry with.",
              "required": [
                "description",
                "summary",
                "timeZone"
              ]
            }
          },
          "required": [
            "resource"
          ]
        }
      },
      "list_calendar_list_entries": {
        "name": "list_calendar_list_entries",
        "description": "Lists all calendar list entries in the user's calendar list.",
        "parameters": {
          "type": "object",
          "properties": {
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of calendar list entries to return.\nMust be a positive integer. Defaults to 100."
            }
          }
        }
      },
      "patch_calendar_list_entry": {
        "name": "patch_calendar_list_entry",
        "description": "Updates specific fields of an existing calendar list entry.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar list entry to patch. If \"primary\" is provided, the primary calendar will be patched."
            },
            "colorRgbFormat": {
              "type": "boolean",
              "description": "Whether to use RGB color format. Defaults to False."
            },
            "resource": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "string",
                  "description": "The summary of the calendar list entry."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the calendar list entry."
                },
                "timeZone": {
                  "type": "string",
                  "description": "The time zone of the calendar list entry (e.g. \"America/New_York\")."
                }
              },
              "description": "The resource to patch the calendar list entry with.",
              "required": [
                "description",
                "summary",
                "timeZone"
              ]
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "update_calendar_list_entry": {
        "name": "update_calendar_list_entry",
        "description": "Replaces an existing calendar list entry with new data.",
        "parameters": {
          "type": "object",
          "properties": {
            "calendarId": {
              "type": "string",
              "description": "The ID of the calendar list entry to replace. If \"primary\" is provided, the primary calendar will be replaced."
            },
            "colorRgbFormat": {
              "type": "boolean",
              "description": "Whether to use RGB color format. Defaults to False."
            },
            "resource": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "string",
                  "description": "The summary of the calendar list entry."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the calendar list entry."
                },
                "timeZone": {
                  "type": "string",
                  "description": "The time zone of the calendar list entry (e.g. \"America/New_York\")."
                }
              },
              "description": "The resource to replace the calendar list entry with.",
              "required": [
                "description",
                "summary",
                "timeZone"
              ]
            }
          },
          "required": [
            "calendarId"
          ]
        }
      },
      "watch_calendar_list_changes": {
        "name": "watch_calendar_list_changes",
        "description": "Sets up a watch for changes to calendar list entries.",
        "parameters": {
          "type": "object",
          "properties": {
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of calendar list entries to return.\nMust be between 1 and 250. Defaults to 100."
            },
            "minAccessRole": {
              "type": "string",
              "description": "The minimum access role required to view the\ncalendar list entries. Must be one of: \"freeBusyReader\", \"owner\", \"reader\", \"writer\"."
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return."
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted calendar list entries\nin the result. Defaults to False."
            },
            "showHidden": {
              "type": "boolean",
              "description": "Whether to show hidden entries. Defaults to False."
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned\non the last page of results from the previous list request. Cannot be used\ntogether with minAccessRole."
            },
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Channel ID. If not provided, one will be generated."
                },
                "type": {
                  "type": "string",
                  "description": "Type of watch. Defaults to \"web_hook\"."
                }
              },
              "description": "Watch configuration:",
              "required": [
                "id",
                "type"
              ]
            }
          }
        }
      },
      "stop_notification_channel": {
        "name": "stop_notification_channel",
        "description": "Stops watching resources through a channel. This operation removes the channel from the\n\nlist of active channels and prevents further notifications from being sent.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The identifier of the channel."
                }
              },
              "description": "The resource to stop the channel with.",
              "required": [
                "id"
              ]
            }
          }
        }
      }
    },
    "device_setting": {
      "open": {
        "name": "open",
        "description": "Navigates to the settings page for a given setting type.",
        "parameters": {
          "type": "object",
          "properties": {
            "setting_type": {
              "type": "object",
              "description": "Setting to open. Use UNSPECIFIED if the user only mentions \"settings.\"\nIf None, opens general device settings page."
            }
          }
        }
      },
      "get": {
        "name": "get",
        "description": "Gets the current value of a device setting.",
        "parameters": {
          "type": "object",
          "properties": {
            "setting_type": {
              "type": "object",
              "description": "Setting to get the value of. Must be one of the getable device settings.\nRequired parameter - cannot be None."
            }
          }
        }
      },
      "on": {
        "name": "on",
        "description": "Turns on a device setting.",
        "parameters": {
          "type": "object",
          "properties": {
            "setting": {
              "type": "object",
              "description": "Setting to turn on. Must be one of the toggleable device settings."
            }
          },
          "required": [
            "setting"
          ]
        }
      },
      "off": {
        "name": "off",
        "description": "Turns off a device setting.",
        "parameters": {
          "type": "object",
          "properties": {
            "setting": {
              "type": "object",
              "description": "Setting to turn off. Must be one of the toggleable device settings."
            }
          },
          "required": [
            "setting"
          ]
        }
      },
      "mute": {
        "name": "mute",
        "description": "Mutes the device volume.",
        "parameters": {
          "type": "object",
          "properties": {
            "setting": {
              "type": "object",
              "description": "The specific volume setting to mute. If None or UNSPECIFIED, mutes all volume settings.\nValid options: ALARM, CALL, MEDIA, NOTIFICATION, RING, UNSPECIFIED"
            }
          }
        }
      },
      "unmute": {
        "name": "unmute",
        "description": "Unmutes the device volume by setting to default levels.",
        "parameters": {
          "type": "object",
          "properties": {
            "setting": {
              "type": "object",
              "description": "The specific volume setting to unmute. If None or UNSPECIFIED, unmutes all volume settings.\nValid options: ALARM, CALL, MEDIA, NOTIFICATION, RING, UNSPECIFIED\nDefault levels: ALARM_VOLUME=50, CALL_VOLUME=70, MEDIA_VOLUME=60, \n               NOTIFICATION_VOLUME=40, RING_VOLUME=80, VOLUME=65"
            }
          }
        }
      },
      "adjust_volume": {
        "name": "adjust_volume",
        "description": "Adjusts the volume by a certain percentage.",
        "parameters": {
          "type": "object",
          "properties": {
            "by": {
              "type": "object",
              "description": "The amount to adjust the volume by, in percentage points. Can be positive or negative.\nValues are clamped between 0 and 100 after adjustment."
            },
            "setting": {
              "type": "object",
              "description": "The specific volume setting to adjust. If None or UNSPECIFIED, adjusts all volume settings.\nValid options: ALARM, CALL, MEDIA, NOTIFICATION, RING, UNSPECIFIED"
            }
          },
          "required": [
            "by"
          ]
        }
      },
      "set_volume": {
        "name": "set_volume",
        "description": "Sets the volume to a specific percentage.",
        "parameters": {
          "type": "object",
          "properties": {
            "to": {
              "type": "object",
              "description": "The volume level to set to, in percentage points. Must be between 0 and 100."
            },
            "setting": {
              "type": "object",
              "description": "The specific volume setting to set. If None or UNSPECIFIED, sets all volume settings.\nValid options: ALARM, CALL, MEDIA, NOTIFICATION, RING, UNSPECIFIED"
            }
          },
          "required": [
            "to"
          ]
        }
      },
      "get_device_insights": {
        "name": "get_device_insights",
        "description": "Generates device insights based on user's current device state.",
        "parameters": {
          "type": "object",
          "properties": {
            "device_state_type": {
              "type": "object",
              "description": "The type of device state to get insights for. If None or UNCATEGORIZED,\nreturns general device insights. Valid options: UNCATEGORIZED, BATTERY, STORAGE"
            }
          }
        }
      }
    },
    "messages": {
      "send_chat_message": {
        "name": "send_chat_message",
        "description": "Send a message to a recipient containing a single endpoint.\n\nThis method sends a message to a recipient via SMS/MMS. Always invoke this method \nwith `get_confirmation=True`. The method validates the recipient has exactly one \nendpoint before sending the message.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": "object",
              "properties": {
                "contact_id": {
                  "type": "object",
                  "description": "Unique identifier for the contact"
                },
                "contact_name": {
                  "type": "string",
                  "description": "The name of the contact (required)"
                },
                "contact_endpoints": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "endpoint_type": {
                        "type": "string",
                        "description": "Must be \"PHONE_NUMBER\""
                      },
                      "endpoint_value": {
                        "type": "string",
                        "description": "The phone number"
                      },
                      "endpoint_label": {
                        "type": "object",
                        "description": "Label for the endpoint"
                      }
                    },
                    "required": [
                      "endpoint_type",
                      "endpoint_value"
                    ]
                  },
                  "description": "List with exactly one endpoint containing:"
                },
                "contact_photo_url": {
                  "type": "object",
                  "description": "URL to the contact's photo"
                }
              },
              "description": "The recipient object containing \ncontact information. Must have exactly one endpoint for sending messages.\nExpected structure:",
              "required": [
                "contact_endpoints",
                "contact_name"
              ]
            },
            "message_body": {
              "type": "string",
              "description": "The text message content to send to the recipient. \nThis field must be non-empty. Should use correct grammar, capitalization, \nand punctuation. If the message body contains a list of items, format \nit as a bulleted list with asterisks."
            },
            "media_attachments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "media_id": {
                    "type": "string",
                    "description": "Unique identifier of the media"
                  },
                  "media_type": {
                    "type": "string",
                    "description": "Type of media, defaults to \"IMAGE\""
                  },
                  "source": {
                    "type": "string",
                    "description": "Source of media (\"IMAGE_RETRIEVAL\", \"IMAGE_GENERATION\",\n  \"IMAGE_UPLOAD\", or \"GOOGLE_PHOTO\")"
                  }
                },
                "required": [
                  "media_id",
                  "media_type",
                  "source"
                ]
              },
              "description": "Metadata associated with media payload. Currently only supports images.\nEach attachment should contain:"
            },
            "get_confirmation": {
              "type": "boolean",
              "description": "Whether to get confirmation before sending. \nDefaults to True and should always be True per OpenAPI spec."
            },
            "recipient_name": {
              "type": "string",
              "description": "The recipient's name (legacy parameter)."
            },
            "recipient_phone_number": {
              "type": "string",
              "description": "The phone number of the recipient \n(legacy parameter)."
            },
            "recipient_photo_url": {
              "type": "string",
              "description": "URL to the profile photo of the recipient \n(legacy parameter)."
            }
          },
          "required": [
            "message_body",
            "recipient"
          ]
        }
      },
      "prepare_chat_message": {
        "name": "prepare_chat_message",
        "description": "Prepare to send a message to one or more candidate recipients via SMS/MMS.\n\nThis method prepares message cards that show information and can be interacted \nwith to send messages. It validates the message body and recipient list but \ndoes not actually send any messages.",
        "parameters": {
          "type": "object",
          "properties": {
            "message_body": {
              "type": "string",
              "description": "The text message content to send to the recipients.\nMust be a non-empty string."
            },
            "recipients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contact_id": {
                    "type": "object",
                    "description": "Unique identifier for the contact"
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "The name of the contact (required)"
                  },
                  "contact_endpoints": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "List of endpoints for the contact"
                  },
                  "contact_photo_url": {
                    "type": "object",
                    "description": "URL to the contact's photo"
                  }
                },
                "required": [
                  "contact_endpoints",
                  "contact_name"
                ]
              },
              "description": "List of recipient \nobjects. Each recipient should contain:"
            }
          },
          "required": [
            "message_body",
            "recipients"
          ]
        }
      },
      "show_message_recipient_choices": {
        "name": "show_message_recipient_choices",
        "description": "Display potential recipients in a card for user selection.\n\nThis method displays a list of one or more recipients that the user can choose \nto send a message to. It is used when there are multiple recipients or when \na single recipient has multiple endpoints, requiring user clarification.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contact_id": {
                    "type": "object",
                    "description": "Unique identifier for the contact"
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "The name of the contact (required)"
                  },
                  "contact_endpoints": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "List of endpoints for the contact"
                  },
                  "contact_photo_url": {
                    "type": "object",
                    "description": "URL to the contact's photo"
                  }
                },
                "required": [
                  "contact_endpoints",
                  "contact_name"
                ]
              },
              "description": "List of possible \nrecipients to send the message to. Each recipient should contain:"
            },
            "message_body": {
              "type": "string",
              "description": "The text message content to send to the \nrecipient. This may be left empty if the user has not specified \nthis already."
            }
          },
          "required": [
            "recipients"
          ]
        }
      },
      "ask_for_message_body": {
        "name": "ask_for_message_body",
        "description": "Display recipient and ask user for message body.\n\nThis method displays the recipient in a card shown to the user, with the intent \nto ask the user to provide the message body. It is used when there is a single \nrecipient with a single endpoint, but the user has not specified a message body.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": "object",
              "properties": {
                "contact_id": {
                  "type": "object",
                  "description": "Unique identifier for the contact"
                },
                "contact_name": {
                  "type": "string",
                  "description": "The name of the contact (required)"
                },
                "contact_endpoints": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "description": "List of endpoints for the contact"
                },
                "contact_photo_url": {
                  "type": "object",
                  "description": "URL to the contact's photo"
                }
              },
              "description": "The recipient to send the \nmessage to. The recipient is auxiliary information that is displayed \nin the card shown to the user. Should contain:",
              "required": [
                "contact_endpoints",
                "contact_name"
              ]
            }
          },
          "required": [
            "recipient"
          ]
        }
      },
      "show_message_recipient_not_found_or_specified": {
        "name": "show_message_recipient_not_found_or_specified",
        "description": "Inform the user that the message recipient is not found or not specified.\n\nThis method is used to inform the user that the message recipient is not found \nor not specified. It is invoked when there are no contacts returned from contact \nsearch or when the user has not specified a contact name in the query.",
        "parameters": {
          "type": "object",
          "properties": {
            "contact_name": {
              "type": "string",
              "description": "The recipient name that was searched for.\nMay be None if no name was provided in the search."
            },
            "message_body": {
              "type": "string",
              "description": "The text message content to send to the \nrecipient. This may be left empty if the user has not specified \nthis already."
            }
          }
        }
      }
    },
    "google_sheets": {
      "get_spreadsheet_values": {
        "name": "get_spreadsheet_values",
        "description": "Gets values from a specific range in a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to retrieve values from."
            },
            "range": {
              "type": "string",
              "description": "The A1 notation of the range to retrieve values from."
            },
            "majorDimension": {
              "type": "string",
              "description": "The major dimension that results should use.\nIf not specified, defaults to \"ROWS\". Valid values: \"ROWS\", \"COLUMNS\"."
            },
            "valueRenderOption": {
              "type": "string",
              "description": "How values should be rendered in the output.\nIf not specified, defaults to \"FORMATTED_VALUE\". Valid values:\n\"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\"."
            },
            "dateTimeRenderOption": {
              "type": "string",
              "description": "How dates, times, and durations should be rendered.\nIf not specified, defaults to \"FORMATTED_STRING\". Valid values:\n\"SERIAL_NUMBER\", \"FORMATTED_STRING\"."
            }
          },
          "required": [
            "range",
            "spreadsheet_id"
          ]
        }
      },
      "update_spreadsheet_values": {
        "name": "update_spreadsheet_values",
        "description": "Updates values in a specific range of a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to update."
            },
            "range": {
              "type": "string",
              "description": "The A1 notation of the range to append values to. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\""
            },
            "valueInputOption": {
              "type": "string",
              "description": "How the input data should be interpreted.\nValid values: \"RAW\" (values inserted as-is) or\n\"USER_ENTERED\" (values parsed as if entered by user)."
            },
            "values": {
              "type": "array",
              "description": "The values to update in the range. Each inner list represents a row."
            },
            "includeValuesInResponse": {
              "type": "boolean",
              "description": "Whether to include the updated values in the response. Defaults to False."
            },
            "responseValueRenderOption": {
              "type": "string",
              "description": "How values should be rendered in the response. Defaults to \"FORMATTED_VALUE\".\nValid values: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\"."
            },
            "responseDateTimeRenderOption": {
              "type": "string",
              "description": "How dates, times, and durations should be rendered in the response. Defaults to \"SERIAL_NUMBER\".\nValid values: \"SERIAL_NUMBER\", \"FORMATTED_STRING\"."
            }
          },
          "required": [
            "range",
            "spreadsheet_id",
            "valueInputOption",
            "values"
          ]
        }
      },
      "append_spreadsheet_values": {
        "name": "append_spreadsheet_values",
        "description": "Appends values to a range in a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to append values to."
            },
            "range": {
              "type": "string",
              "description": "The A1 notation of the range to append values to. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\""
            },
            "valueInputOption": {
              "type": "string",
              "description": "How the input data should be interpreted. Allowed: 'RAW', 'USER_ENTERED'."
            },
            "values": {
              "type": "array",
              "description": "The values to append to the range. Expected to be a list of lists (e.g., List[List[Any]])."
            },
            "insertDataOption": {
              "type": "string",
              "description": "How the input data should be inserted. Allowed: 'OVERWRITE', 'INSERT_ROWS'. Defaults to None (behaves like 'INSERT_ROWS' for appending)."
            },
            "includeValuesInResponse": {
              "type": "boolean",
              "description": "Whether to include the appended values in the response. Defaults to False."
            },
            "responseValueRenderOption": {
              "type": "string",
              "description": "How values should be rendered in the response. Allowed: 'FORMATTED_VALUE', 'UNFORMATTED_VALUE', 'FORMULA'. Defaults to FORMATTED_VALUE."
            },
            "responseDateTimeRenderOption": {
              "type": "string",
              "description": "How dates, times, and durations should be rendered in the response. Allowed: 'SERIAL_NUMBER', 'FORMATTED_STRING'. Defaults to 'SERIAL_NUMBER'."
            },
            "majorDimension": {
              "type": "string",
              "description": "The major dimension of the values. Allowed: 'ROWS' (default), 'COLUMNS'. Defaults to \"ROWS\"."
            }
          },
          "required": [
            "range",
            "spreadsheet_id",
            "valueInputOption",
            "values"
          ]
        }
      },
      "clear_spreadsheet_values": {
        "name": "clear_spreadsheet_values",
        "description": "Clears values from a specific range in a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to clear values from."
            },
            "range": {
              "type": "string",
              "description": "The A1 notation of the range to append values to. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\""
            }
          },
          "required": [
            "range",
            "spreadsheet_id"
          ]
        }
      },
      "batch_get_spreadsheet_values": {
        "name": "batch_get_spreadsheet_values",
        "description": "Gets values from multiple ranges in a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to retrieve values from."
            },
            "ranges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of A1 notations of ranges to retrieve values from. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\""
            },
            "majorDimension": {
              "type": "string",
              "description": "The major dimension that results should use. Valid values: \"ROWS\", \"COLUMNS\"."
            },
            "valueRenderOption": {
              "type": "string",
              "description": "How values should be rendered in the output. Valid values: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\", defaults to \"FORMATTED_VALUE\"."
            },
            "dateTimeRenderOption": {
              "type": "string",
              "description": "How dates, times, and durations should be rendered. Valid values: \"SERIAL_NUMBER\", \"FORMATTED_STRING\", defaults to \"SERIAL_NUMBER\"."
            }
          },
          "required": [
            "ranges",
            "spreadsheet_id"
          ]
        }
      },
      "batch_update_spreadsheet_values": {
        "name": "batch_update_spreadsheet_values",
        "description": "Updates values in multiple ranges of a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to update."
            },
            "valueInputOption": {
              "type": "string",
              "description": "How the input data should be interpreted.\nValid values:\n- \"RAW\": Values are inserted as-is, without any parsing.\n- \"USER_ENTERED\": Values are parsed as if entered into Sheets by a user.\n  Formulas are stored as formulas, strings that look like dates or times\n  may be converted to date/time values, plain numbers are converted to numbers."
            },
            "data": {
              "type": "array",
              "description": "List of update requests, each a dictionary containing:"
            },
            "includeValuesInResponse": {
              "type": "boolean",
              "description": "Whether to include the updated values in the response. Defaults to False."
            },
            "responseValueRenderOption": {
              "type": "string",
              "description": "How values should be rendered in the response. Defaults to \"FORMATTED_VALUE\".\nValid values: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\". Only \"UNFORMATTED_VALUE\" is explicitly handled; \"FORMULA\" is not currently implemented."
            },
            "responseDateTimeRenderOption": {
              "type": "string",
              "description": "How dates, times, and durations should be rendered in the response. Defaults to \"SERIAL_NUMBER\".\nValid values: \"SERIAL_NUMBER\", \"FORMATTED_STRING\". Only \"SERIAL_NUMBER\" is explicitly handled; \"FORMATTED_STRING\" is not currently implemented."
            }
          },
          "required": [
            "data",
            "spreadsheet_id",
            "valueInputOption"
          ]
        }
      },
      "batch_clear_spreadsheet_values": {
        "name": "batch_clear_spreadsheet_values",
        "description": "Clears values from multiple ranges in a spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to clear values from."
            },
            "ranges": {
              "type": "array",
              "description": "List of A1 notations of ranges to clear. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\""
            }
          },
          "required": [
            "ranges",
            "spreadsheet_id"
          ]
        }
      },
      "batch_get_spreadsheet_values_by_data_filter": {
        "name": "batch_get_spreadsheet_values_by_data_filter",
        "description": "Retrieves values from a simulated spreadsheet data store using data filters.\n\nUses an API-aligned return structure.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to retrieve values from."
            },
            "dataFilters": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "List of data filter objects.\nEach dictionary represents a DataFilter and can specify one of:\n- {\"a1Range\": \"Sheet1!A1:B2\"} (primarily acted upon by this simulator). The a1Range should be an A1 notation. Which is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\"\n- {\"gridRange\": {\"sheetId\": 0, ...}} (conceptual for this simulator)\n- {\"developerMetadataLookup\": {\"metadataKey\": \"key\"}} (conceptual)\nIf None or empty, an empty \"valueRanges\" list is returned."
            },
            "majorDimension": {
              "type": "string",
              "description": "Major dimension for results (\"ROWS\" or \"COLUMNS\")."
            },
            "valueRenderOption": {
              "type": "string",
              "description": "How values should be represented in the output. Valid values: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\". Defaults to \"FORMATTED_VALUE\"."
            },
            "dateTimeRenderOption": {
              "type": "string",
              "description": "How dates, times, and durations should be represented in the output. This is ignored if valueRenderOption is \"FORMATTED_VALUE\". Valid values: \"SERIAL_NUMBER\", \"FORMATTED_STRING\". Defaults to \"SERIAL_NUMBER\"."
            },
            "userId": {
              "type": "string",
              "description": "The user ID to use for accessing the spreadsheet. Defaults to \"me\" if not provided."
            }
          },
          "required": [
            "spreadsheet_id"
          ]
        }
      },
      "batch_update_spreadsheet_values_by_data_filter": {
        "name": "batch_update_spreadsheet_values_by_data_filter",
        "description": "Updates values in a spreadsheet using data filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to update."
            },
            "valueInputOption": {
              "type": "string",
              "description": "Determines how input data should be interpreted. Valid values: \"RAW\" (values are stored as-is), \"USER_ENTERED\" (values are parsed as if entered by a user). \"INPUT_VALUE_OPTION_UNSPECIFIED\" is not allowed and must not be used."
            },
            "data": {
              "type": "array",
              "description": "List of update requests, each containing either:\nFormat 1:"
            },
            "includeValuesInResponse": {
              "type": "boolean",
              "description": "Whether to include the updated values in the response. Defaults to False."
            },
            "responseValueRenderOption": {
              "type": "string",
              "description": "Determines how values in the response should be rendered. Valid values: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\". Defaults to \"FORMATTED_VALUE\"."
            },
            "responseDateTimeRenderOption": {
              "type": "string",
              "description": "Determines how dates, times, and durations in the response should be rendered. This is ignored if responseValueRenderOption is \"FORMATTED_VALUE\". Valid values: \"SERIAL_NUMBER\", \"FORMATTED_STRING\". Defaults to \"SERIAL_NUMBER\"."
            }
          },
          "required": [
            "data",
            "spreadsheet_id",
            "valueInputOption"
          ]
        }
      },
      "batch_clear_spreadsheet_values_by_data_filter": {
        "name": "batch_clear_spreadsheet_values_by_data_filter",
        "description": "Clears values from a spreadsheet using data filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to clear values from."
            },
            "dataFilters": {
              "type": "array",
              "description": "List of data filters, each containing:"
            }
          },
          "required": [
            "dataFilters",
            "spreadsheet_id"
          ]
        }
      },
      "create_spreadsheet": {
        "name": "create_spreadsheet",
        "description": "Creates a new spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "IGNORED - The spreadsheet ID is auto-generated."
                },
                "properties": {
                  "type": "object",
                  "description": "Dictionary of spreadsheet properties with keys:",
                  "properties": {
                    "title": {
                      "type": "object",
                      "description": "The title of the spreadsheet (defaults to \"Untitled Spreadsheet\")"
                    },
                    "locale": {
                      "type": "object",
                      "description": "The locale of the spreadsheet"
                    },
                    "autoRecalc": {
                      "type": "object",
                      "description": "The auto-recalculation setting"
                    },
                    "timeZone": {
                      "type": "object",
                      "description": "The time zone of the spreadsheet"
                    },
                    "defaultFormat": {
                      "type": "object",
                      "description": "Default cell formatting"
                    },
                    "iterativeCalculationSettings": {
                      "type": "object",
                      "description": "Iterative calculation settings"
                    },
                    "owner": {
                      "type": "object",
                      "description": "Owner email address"
                    },
                    "permissions": {
                      "type": "object",
                      "description": "List of permissions"
                    },
                    "parents": {
                      "type": "object",
                      "description": "List of parent folder IDs"
                    },
                    "size": {
                      "type": "object",
                      "description": "File size in bytes"
                    },
                    "trashed": {
                      "type": "object",
                      "description": "Whether the file is trashed"
                    },
                    "starred": {
                      "type": "object",
                      "description": "Whether the file is starred"
                    },
                    "createdTime": {
                      "type": "object",
                      "description": "Creation timestamp"
                    },
                    "modifiedTime": {
                      "type": "object",
                      "description": "Last modification timestamp"
                    }
                  }
                },
                "sheets": {
                  "type": "object",
                  "description": "List of sheet dictionaries. If empty, a default \"Sheet1\" will be created.",
                  "properties": {
                    "properties": {
                      "type": "object",
                      "description": "Sheet properties including:",
                      "properties": {
                        "sheetId": {
                          "type": "object",
                          "description": "Unique identifier for the sheet"
                        },
                        "title": {
                          "type": "string",
                          "description": "Title of the sheet"
                        },
                        "index": {
                          "type": "integer",
                          "description": "Position of the sheet"
                        },
                        "sheetType": {
                          "type": "object",
                          "description": "Type of the sheet"
                        },
                        "gridProperties": {
                          "type": "object",
                          "description": "Grid properties"
                        }
                      },
                      "required": [
                        "index",
                        "title"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "description": "Sheet data using A1 notation. The key is the range in A1 notation. The value is a list of lists of cell values."
                    },
                    "merges": {
                      "type": "object",
                      "description": "Cell merges"
                    },
                    "conditionalFormats": {
                      "type": "object",
                      "description": "Conditional formatting"
                    },
                    "filterViews": {
                      "type": "object",
                      "description": "Filter views"
                    },
                    "protectedRanges": {
                      "type": "object",
                      "description": "Protected ranges"
                    },
                    "basicFilter": {
                      "type": "object",
                      "description": "Basic filter settings"
                    },
                    "charts": {
                      "type": "object",
                      "description": "Embedded charts"
                    },
                    "bandedRanges": {
                      "type": "object",
                      "description": "Banded ranges"
                    },
                    "developerMetadata": {
                      "type": "object",
                      "description": "Developer metadata"
                    }
                  }
                },
                "data": {
                  "type": "object",
                  "description": "Dictionary of spreadsheet data with the following keys which are required if present:",
                  "properties": {
                    "spreadsheetId": {
                      "type": "string",
                      "description": "The spreadsheet ID"
                    },
                    "valueRanges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {}
                      },
                      "description": "List of value ranges"
                    },
                    "properties": {
                      "type": "object",
                      "properties": {},
                      "description": "Spreadsheet properties"
                    },
                    "sheets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {}
                      },
                      "description": "List of sheets"
                    }
                  },
                  "required": [
                    "properties",
                    "sheets",
                    "spreadsheetId",
                    "valueRanges"
                  ]
                }
              },
              "description": "Dictionary containing:"
            }
          },
          "required": [
            "spreadsheet"
          ]
        }
      },
      "get_spreadsheet": {
        "name": "get_spreadsheet",
        "description": "Gets the latest version of a specified spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to retrieve."
            },
            "ranges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ranges to retrieve, in A1 notation. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: \"Sheet1!A1:D3\" or \"A1:D3\"\nDefaults to None."
            },
            "includeGridData": {
              "type": "boolean",
              "description": "Whether to include grid data.\nDefaults to False."
            }
          },
          "required": [
            "spreadsheet_id"
          ]
        }
      },
      "get_spreadsheet_by_data_filter": {
        "name": "get_spreadsheet_by_data_filter",
        "description": "Gets spreadsheet data filtered by specified criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to retrieve."
            },
            "includeGridData": {
              "type": "boolean",
              "description": "Whether to include grid data. Defaults to False."
            },
            "dataFilters": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "a1Range": {
                    "type": "object",
                    "description": "The range in A1 notation"
                  },
                  "gridRange": {
                    "type": "object",
                    "description": "Grid range specification"
                  },
                  "developerMetadataLookup": {
                    "type": "object",
                    "description": "Developer metadata lookup with keys:",
                    "properties": {
                      "metadataKey": {
                        "type": "object",
                        "description": "Key of the metadata to look up"
                      },
                      "metadataValue": {
                        "type": "object",
                        "description": "Value of the metadata"
                      }
                    }
                  }
                }
              },
              "description": "List of data filters. Defaults to None.\nEach filter contains:"
            }
          },
          "required": [
            "spreadsheet_id"
          ]
        }
      },
      "batch_update_spreadsheet": {
        "name": "batch_update_spreadsheet",
        "description": "Applies one or more updates to the spreadsheet.\n\nDescription: This function applies one or more updates to the spreadsheet.\nIt supports the following request types:\n- addSheetRequest - Adds a new sheet to the spreadsheet.\n- deleteSheetRequest - Deletes an existing sheet from the spreadsheet.\n- updateSheetPropertiesRequest - Updates the properties of an existing sheet.\n- updateCells - Updates the cells in a specified range of the spreadsheet.\n- updateSheetProperties - Updates the properties of an existing sheet.\nThe function validates the requests and updates the spreadsheet accordingly.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to update."
            },
            "requests": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "List of update requests. Each dictionary\nin the list must contain exactly one key, which specifies the type of\nrequest. The value for that key is a dictionary payload for the request.\nSupported request keys and their payload structures:\n- 'addSheetRequest': Payload must conform to AddSheetRequestPayloadModel.\n    Requires 'properties' with a 'sheetId'.\n- 'deleteSheetRequest': Payload must conform to DeleteSheetRequestPayloadModel.\n    Requires 'sheetId'.\n- 'updateSheetPropertiesRequest': Payload must conform to UpdateSheetPropertiesRequestPayloadModel.\n    Requires 'properties' (with 'sheetId') and 'fields'.\n- 'updateCells': Payload must conform to UpdateCellsPayloadModel.\n    Requires 'range' and 'rows'.\n- 'updateSheetProperties': Payload must conform to UpdateSheetPropertiesSimplePayloadModel.\n    Requires 'properties' (with 'sheetId'); 'fields' is optional."
            },
            "include_spreadsheet_in_response": {
              "type": "boolean",
              "description": "Whether to include the\nupdated spreadsheet in the response. Defaults to False."
            },
            "response_ranges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ranges to include in the\nresponse if include_spreadsheet_in_response is True. Defaults to None."
            },
            "response_include_grid_data": {
              "type": "boolean",
              "description": "Whether to include grid data\nin the response if include_spreadsheet_in_response is True. Defaults to False."
            }
          },
          "required": [
            "requests",
            "spreadsheet_id"
          ]
        }
      },
      "copy_sheet_to_spreadsheet": {
        "name": "copy_sheet_to_spreadsheet",
        "description": "Copies a sheet to a new spreadsheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to copy the sheet from."
            },
            "sheet_id": {
              "type": "string",
              "description": "The ID of the sheet to copy."
            },
            "destination_spreadsheet_id": {
              "type": "string",
              "description": "The ID of the spreadsheet to copy the sheet to."
            }
          },
          "required": [
            "destination_spreadsheet_id",
            "sheet_id",
            "spreadsheet_id"
          ]
        }
      }
    },
    "google_chat": {
      "download_media": {
        "name": "download_media",
        "description": "Downloads media using the specified resource name.",
        "parameters": {
          "type": "object",
          "properties": {
            "resourceName": {
              "type": "string",
              "description": "Name of the media to download.\nSee ReadRequest.resource_name."
            }
          },
          "required": [
            "resourceName"
          ]
        }
      },
      "upload_media": {
        "name": "upload_media",
        "description": "Uploads an attachment to the specified Chat space.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. Resource name of the Chat space in which the attachment is uploaded. Format \"spaces/{space}\"."
            },
            "attachment_request": {
              "type": "object",
              "description": "Dictionary with keys:",
              "properties": {
                "filename": {
                  "type": "string",
                  "description": "Filename of the uploaded attachment."
                }
              },
              "required": [
                "filename"
              ]
            }
          },
          "required": [
            "attachment_request",
            "parent"
          ]
        }
      },
      "list_space_members": {
        "name": "list_space_members",
        "description": "Lists memberships in a space.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. The resource name of the space to list memberships for.\nFormat: spaces/{space}"
            },
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of memberships to return.\nIf unspecified, at most 100 are returned. Value must be between 1 and 1000, inclusive, if provided."
            },
            "pageToken": {
              "type": "string",
              "description": "Token to retrieve the next page from a previous response."
            },
            "filter": {
              "type": "string",
              "description": "Query filter string to filter memberships by:\n- role = \"ROLE_MEMBER\" or \"ROLE_MANAGER\"\n- member.type = \"HUMAN\" or \"BOT\"\nYou may also use:\n- member.type != \"BOT\"\n- AND/OR operators (restrictions apply)\nIf 'useAdminAccess' is True and a filter is provided, the filter must include\na condition on 'member.type' (e.g., 'member.type = \"HUMAN\"' or 'member.type != \"BOT\"')."
            },
            "showGroups": {
              "type": "boolean",
              "description": "If True, includes memberships associated with Google Groups."
            },
            "showInvited": {
              "type": "boolean",
              "description": "If True, includes memberships in the INVITED state."
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "If True, enables admin privileges for the listing operation."
            }
          },
          "required": [
            "parent"
          ]
        }
      },
      "get_space_member": {
        "name": "get_space_member",
        "description": "Retrieves details about a specific membership in a Chat space.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. The resource name of the membership to retrieve.\nFormat:\n- spaces/{space}/members/{member}\n- spaces/{space}/members/app (for the app itself)\nYou can use an email address as an alias for {member}, e.g., spaces/{space}/members/user@example.com."
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "If True, runs with the caller's Workspace admin privileges.\nNote: App memberships (i.e., .../members/app) cannot be fetched with admin access."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "add_space_member": {
        "name": "add_space_member",
        "description": "Creates a membership for a user or group in the specified Chat space.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. The resource name of the space.\nFormat: spaces/{space}"
            },
            "membership": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "Optional. Defaults to 'ROLE_MEMBER'. One of:\n    - 'MEMBERSHIP_ROLE_UNSPECIFIED'\n    - 'ROLE_MEMBER'\n    - 'ROLE_MANAGER'"
                },
                "state": {
                  "type": "string",
                  "description": "Optional. Defaults to 'INVITED'. One of:\n    - 'MEMBERSHIP_STATE_UNSPECIFIED'\n    - 'JOINED'\n    - 'INVITED'\n    - 'NOT_A_MEMBER'"
                },
                "deleteTime": {
                  "type": "string",
                  "description": "Optional. Timestamp of deletion."
                },
                "member": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Format: users/{user} or users/app"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Optional. The user's display name."
                    },
                    "domainId": {
                      "type": "string",
                      "description": "Optional. Workspace domain ID."
                    },
                    "type": {
                      "type": "string",
                      "description": "One of:\n        - 'TYPE_UNSPECIFIED'\n        - 'HUMAN'\n        - 'BOT'"
                    },
                    "isAnonymous": {
                      "type": "boolean",
                      "description": "Optional. True if the user is deleted or profile is hidden."
                    }
                  },
                  "description": "Required. Member information, with fields:",
                  "required": [
                    "displayName",
                    "domainId",
                    "isAnonymous",
                    "name",
                    "type"
                  ]
                },
                "groupMember": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Format: groups/{group}"
                    }
                  },
                  "description": "Optional. Group information, with field:",
                  "required": [
                    "name"
                  ]
                }
              },
              "description": "Required. Represents the membership to be created, with the following fields:",
              "required": [
                "deleteTime",
                "groupMember",
                "member",
                "role",
                "state"
              ]
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "If True, uses administrator privileges.\nAdmin access cannot be used to create memberships for bots or users outside the domain."
            }
          },
          "required": [
            "membership",
            "parent"
          ]
        }
      },
      "update_space_member": {
        "name": "update_space_member",
        "description": "Updates a membership.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the membership to update.\nFormat: spaces/{space}/members/{member}"
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Comma-separated list of fields to update.\nSupported values:\n- 'role'"
            },
            "membership": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Resource name of the membership.\n    Format: spaces/{space}/members/{member}"
                },
                "role": {
                  "type": "string",
                  "description": "Optional. One of:\n    - 'MEMBERSHIP_ROLE_UNSPECIFIED'\n    - 'ROLE_MEMBER'\n    - 'ROLE_MANAGER'"
                },
                "state": {
                  "type": "string",
                  "description": "Output only. One of:\n    - 'MEMBERSHIP_STATE_UNSPECIFIED'\n    - 'JOINED'\n    - 'INVITED'\n    - 'NOT_A_MEMBER'"
                },
                "createTime": {
                  "type": "string",
                  "description": "Output only. Timestamp when the membership was created."
                },
                "deleteTime": {
                  "type": "string",
                  "description": "Output only. Timestamp when the membership was deleted."
                },
                "member": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Format: users/{user}"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Output only. Display name of the user."
                    },
                    "domainId": {
                      "type": "string",
                      "description": "Output only. Workspace domain ID."
                    },
                    "type": {
                      "type": "string",
                      "description": "One of:\n        - 'TYPE_UNSPECIFIED'\n        - 'HUMAN'\n        - 'BOT'"
                    },
                    "isAnonymous": {
                      "type": "boolean",
                      "description": "Output only. True if user is deleted or hidden."
                    }
                  },
                  "description": "Member details with the following structure:",
                  "required": [
                    "displayName",
                    "domainId",
                    "isAnonymous",
                    "name",
                    "type"
                  ]
                },
                "groupMember": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Format: groups/{group}"
                    }
                  },
                  "description": "Optional group information with the following structure:",
                  "required": [
                    "name"
                  ]
                }
              },
              "description": "Dictionary containing the updated membership fields. Supported structure:",
              "required": [
                "createTime",
                "deleteTime",
                "groupMember",
                "member",
                "name",
                "role",
                "state"
              ]
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "If True, runs the method using administrator privileges."
            }
          },
          "required": [
            "membership",
            "name",
            "updateMask"
          ]
        }
      },
      "remove_space_member": {
        "name": "remove_space_member",
        "description": "Deletes a membership from a space. ",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the membership to delete.\nFormat: spaces/{space}/members/{member}\nExample values:\n- spaces/AAA/members/user@example.com\n- spaces/AAA/members/app"
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "Optional. If True, uses Workspace admin privileges.\nNote: Deleting app memberships using admin access is not supported."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_spaces": {
        "name": "list_spaces",
        "description": "Lists spaces the current user is a member of, with optional filtering and pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "pageSize": {
              "type": "integer",
              "description": "Max number of spaces to return (default 100, max 1000).\nMust be between 1 and 1000 if provided."
            },
            "pageToken": {
              "type": "string",
              "description": "Pagination token (used as an offset)."
            },
            "filter": {
              "type": "string",
              "description": "Filter by space type using 'OR' operator only, no 'AND' operator is allowed. Example:\n'spaceType = \"SPACE\" OR spaceType = \"GROUP_CHAT\"'.\nAllowed values for spaceType:\n    - \"SPACE\"\n    - \"GROUP_CHAT\"\n    - \"DIRECT_MESSAGE\""
            }
          }
        }
      },
      "search_spaces": {
        "name": "search_spaces",
        "description": "Searches for Chat spaces in a Google Workspace organization using administrator access.\n\nSupported fields in the query include:\n- display_name: Uses the HAS (`:`) operator.\n- external_user_allowed: Accepts \"true\" or \"false\".\n- create_time, last_active_time: Accepts `=`, `<`, `>`, `<=`, `>=` with timestamps in RFC-3339 format.\n- space_history_state: Accepts specific enum values.\n- space_type: Only \"SPACE\" is allowed (required).\n- customer: Must be \"customers/my_customer\" (required).",
        "parameters": {
          "type": "object",
          "properties": {
            "useAdminAccess": {
              "type": "boolean",
              "description": "Required. Must be `True`. Enables administrator-only\naccess. Requires admin scopes such as:\n- `chat.admin.spaces.readonly`\n- `chat.admin.spaces`"
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of spaces to return. If unspecified,\nup to 100 spaces are returned. Maximum allowed value is 1000. Values greater\nthan 1000 are capped at 1000. Negative values are ignored and default to 100."
            },
            "pageToken": {
              "type": "string",
              "description": "A token received from a previous search call.\nUsed for pagination; represents an offset."
            },
            "query": {
              "type": "string",
              "description": "Required. A query string combining fields using the `AND` operator.\nRequired conditions:\n    - customer = \"customers/my_customer\"\n    - space_type = \"SPACE\"\nSupported query fields:\n    - display_name: e.g., `display_name:\"hello world\"`\n    - create_time: e.g., `create_time >= \"2022-01-01T00:00:00Z\"`\n    - last_active_time: e.g., `last_active_time < \"2024-12-01T00:00:00Z\"`\n    - external_user_allowed: \"true\" or \"false\"\n    - space_history_state: One of the enum values below\nOperators:\n    - Allowed: `=`, `<`, `>`, `<=`, `>=`, `:`\n    - Only `AND` is supported between conditions"
            },
            "orderBy": {
              "type": "string",
              "description": "Specifies result ordering. Format:\n`field ASC|DESC`. Supported fields:\n- `membership_count.joined_direct_human_user_count`\n- `last_active_time`\n- `create_time`\nDefault is `create_time ASC`."
            }
          },
          "required": [
            "useAdminAccess"
          ]
        }
      },
      "get_space_details": {
        "name": "get_space_details",
        "description": "Returns details of a Chat space by resource name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the space. Format: \"spaces/{space}\"."
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "When True, the caller can view any space\nas an admin. Otherwise, the user must be a member."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "create_space": {
        "name": "create_space",
        "description": "Creates a Chat space.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string",
              "description": "Unique ID for request. If reused, returns existing space."
            },
            "space": {
              "type": "object",
              "description": "Space resource to create. Expected structure defined by SpaceInputModel.\nRequired fields include:",
              "properties": {
                "spaceType": {
                  "type": "string",
                  "description": "\"SPACE\", \"GROUP_CHAT\", \"DIRECT_MESSAGE\""
                },
                "displayName": {
                  "type": "string",
                  "description": "Required and cannot be empty if spaceType is \"SPACE\"."
                },
                "spaceDetails": {
                  "type": "object",
                  "description": "{\"description\": str, \"guidelines\": str}"
                },
                "predefinedPermissionSettings": {
                  "type": "string",
                  "description": "e.g., \"COLLABORATION_SPACE\""
                },
                "accessSettings": {
                  "type": "object",
                  "description": "{\"audience\": str}"
                }
              },
              "required": [
                "spaceType"
              ]
            }
          }
        }
      },
      "setup_space": {
        "name": "setup_space",
        "description": "Sets up a Chat space and adds initial members.",
        "parameters": {
          "type": "object",
          "properties": {
            "setup_body": {
              "type": "object",
              "description": "Request body with the following fields:",
              "properties": {
                "space": {
                  "type": "object",
                  "description": "Required. Space resource:",
                  "properties": {
                    "spaceType": {
                      "type": "string",
                      "description": "\"SPACE\", \"GROUP_CHAT\", \"DIRECT_MESSAGE\""
                    },
                    "spaceDetails": {
                      "type": "object",
                      "description": "- description (str, optional)\n        - guidelines (str, optional)"
                    },
                    "predefinedPermissionSettings": {
                      "type": "string",
                      "description": "\"PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED\",\n        \"COLLABORATION_SPACE\", \"ANNOUNCEMENT_SPACE\""
                    },
                    "accessSettings": {
                      "type": "object",
                      "description": "- audience (str, optional)"
                    }
                  },
                  "required": [
                    "spaceType"
                  ]
                },
                "memberships": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "member": {
                        "type": "object",
                        "description": "",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "e.g. \"users/user@example.com\""
                          },
                          "type": {
                            "type": "string",
                            "description": "\"HUMAN\" or \"BOT\""
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      },
                      "role": {
                        "type": "string",
                        "description": "\"ROLE_MEMBER\", \"ROLE_MANAGER\""
                      },
                      "state": {
                        "type": "string",
                        "description": "\"JOINED\", \"INVITED\""
                      }
                    },
                    "required": [
                      "member"
                    ]
                  },
                  "description": "Memberships to add:"
                }
              },
              "required": [
                "space"
              ]
            }
          },
          "required": [
            "setup_body"
          ]
        }
      },
      "update_space_details": {
        "name": "update_space_details",
        "description": "Updates a Chat space.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the space. Format: \"spaces/{space}\"."
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Comma-separated list of field paths to update, or \"*\" to update all supported:\n- \"space_details\"\n- \"display_name\"\n- \"space_type\"\n- \"space_history_state\"\n- \"access_settings.audience\"\n- \"permission_settings\""
            },
            "space_updates": {
              "type": "object",
              "description": "Space object with updated field values."
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "Run as admin. Some update masks are restricted."
            }
          },
          "required": [
            "name",
            "space_updates",
            "updateMask"
          ]
        }
      },
      "delete_space": {
        "name": "delete_space",
        "description": "Deletes a Chat space and all its child resources.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the space. Format: \"spaces/{space}\"."
            },
            "useAdminAccess": {
              "type": "boolean",
              "description": "When True, allows deletion without membership check."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "add_message_reaction": {
        "name": "add_message_reaction",
        "description": "Creates a reaction and adds it to a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. Resource name of the message to which the reaction is added.\nFormat: \"spaces/{space}/messages/{message}\""
            },
            "reaction": {
              "type": "object",
              "description": "Required. The Reaction resource to create with fields:",
              "properties": {
                "emoji": {
                  "type": "object",
                  "description": "",
                  "properties": {
                    "unicode": {
                      "type": "string",
                      "description": "Optional. A basic emoji represented by a unicode string."
                    },
                    "customEmoji": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Identifier. Format: customEmojis/{customEmoji}"
                        },
                        "uid": {
                          "type": "string",
                          "description": "Output only. Unique key for the custom emoji."
                        },
                        "emojiName": {
                          "type": "string",
                          "description": "Optional. User-defined emoji name, must be valid format."
                        },
                        "temporaryImageUri": {
                          "type": "string",
                          "description": "Output only. Temporary image URL."
                        },
                        "payload": {
                          "type": "object",
                          "description": "",
                          "properties": {
                            "fileContent": {
                              "type": "string",
                              "description": "Required. Image binary data."
                            },
                            "filename": {
                              "type": "string",
                              "description": "Required. Image file name (.png, .jpg, .gif)."
                            }
                          },
                          "required": [
                            "fileContent",
                            "filename"
                          ]
                        }
                      },
                      "required": [
                        "emojiName",
                        "name",
                        "payload",
                        "temporaryImageUri",
                        "uid"
                      ]
                    }
                  },
                  "required": [
                    "customEmoji",
                    "unicode"
                  ]
                },
                "user": {
                  "type": "object",
                  "description": "",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required. Format: users/{user}"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Output only. User's display name."
                    },
                    "domainId": {
                      "type": "string",
                      "description": "Output only. Workspace domain ID."
                    },
                    "type": {
                      "type": "string",
                      "description": "Enum: TYPE_UNSPECIFIED, HUMAN, BOT"
                    },
                    "isAnonymous": {
                      "type": "boolean",
                      "description": "Output only. True if user is deleted or hidden."
                    }
                  },
                  "required": [
                    "displayName",
                    "domainId",
                    "isAnonymous",
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "emoji",
                "user"
              ]
            }
          },
          "required": [
            "parent",
            "reaction"
          ]
        }
      },
      "list_message_reactions": {
        "name": "list_message_reactions",
        "description": "Lists reactions to a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. The resource name of the message to list reactions for.\nFormat: \"spaces/{space}/messages/{message}\""
            },
            "pageSize": {
              "type": "integer",
              "description": "Optional. Maximum number of reactions to return. Defaults to 25.\nMaximum value is 200."
            },
            "pageToken": {
              "type": "string",
              "description": "Optional. Token from a previous list call to retrieve the next page."
            },
            "filter": {
              "type": "string",
              "description": "Optional. Filter reactions by emoji or user fields. Examples:\n- emoji.unicode = \"\ud83d\ude42\"\n- emoji.custom_emoji.uid = \"XYZ\"\n- user.name = \"users/USER123\"\n- (emoji.unicode = \"\ud83d\ude42\" OR emoji.unicode = \"\ud83d\udc4d\") AND user.name = \"users/USER123\""
            }
          },
          "required": [
            "parent"
          ]
        }
      },
      "delete_message_reaction": {
        "name": "delete_message_reaction",
        "description": "Deletes a reaction by its resource name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. The resource name of the reaction to delete.\nFormat: \"spaces/{space}/messages/{message}/reactions/{reaction}\""
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "create_message": {
        "name": "create_message",
        "description": "Creates a message in a space.\n\nThe space is identified by `parent`, for example, \"spaces/AAA\". The caller must be a member\nof \"spaces/{space}/members/{CURRENT_USER_ID}\" to create a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. Resource name of the space to create the message in.\nFormat: \"spaces/{space}\"."
            },
            "message_body": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "object",
                  "description": "Plain-text body of the message."
                },
                "thread": {
                  "type": "object",
                  "description": "Thread information based on ThreadDetailInput model:",
                  "properties": {
                    "name": {
                      "type": "object",
                      "description": "Resource name of the thread (e.g., \"spaces/AAA/threads/BBB\")."
                    }
                  }
                },
                "attachment": {
                  "type": "object",
                  "description": "List of message attachments (defaults to empty list):",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Attachment resource name."
                    },
                    "contentName": {
                      "type": "string",
                      "description": "File name."
                    },
                    "contentType": {
                      "type": "string",
                      "description": "MIME type."
                    },
                    "thumbnailUri": {
                      "type": "string",
                      "description": "Thumbnail preview image."
                    },
                    "downloadUri": {
                      "type": "string",
                      "description": "Direct download URL."
                    },
                    "source": {
                      "type": "string",
                      "description": "One of \"DRIVE_FILE\", \"UPLOADED_CONTENT\"."
                    },
                    "attachmentDataRef": {
                      "type": "object",
                      "properties": {
                        "resourceName": {
                          "type": "string",
                          "description": "Reference to the media."
                        },
                        "attachmentUploadToken": {
                          "type": "string",
                          "description": "Token for uploaded content."
                        }
                      },
                      "description": "For uploading files:",
                      "required": [
                        "attachmentUploadToken",
                        "resourceName"
                      ]
                    },
                    "driveDataRef": {
                      "type": "object",
                      "properties": {
                        "driveFileId": {
                          "type": "string",
                          "description": "ID of the file in Google Drive."
                        }
                      },
                      "description": "Drive file metadata:",
                      "required": [
                        "driveFileId"
                      ]
                    }
                  },
                  "required": [
                    "attachmentDataRef",
                    "contentName",
                    "contentType",
                    "downloadUri",
                    "driveDataRef",
                    "name",
                    "source",
                    "thumbnailUri"
                  ]
                }
              },
              "description": "Required. A dictionary representing the message resource object. Based on the\nMessageBodyInput model, the following core fields are supported:"
            },
            "requestId": {
              "type": "string",
              "description": "A unique ID for the message request. If reused by the same user,\nthe same message is returned. If reused incorrectly, results in a conflict and returns an\nempty dictionary."
            },
            "messageReplyOption": {
              "type": "string",
              "description": "Controls whether the message starts a new thread or replies\nto an existing one. Valid values:\n- 'MESSAGE_REPLY_OPTION_UNSPECIFIED': Default behavior\n- 'REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD': Reply to existing thread if specified, otherwise create new thread\n- 'REPLY_MESSAGE_OR_FAIL': Reply to existing thread if specified, otherwise fail\n- 'NEW_THREAD': Always create a new thread"
            },
            "messageId": {
              "type": "string",
              "description": "A custom ID that must start with \"client-\". Included in the message's\nresource name if provided."
            }
          },
          "required": [
            "message_body",
            "parent"
          ]
        }
      },
      "list_messages": {
        "name": "list_messages",
        "description": "Lists messages in a space where the caller is a member.\n\nThe space is identified by `parent`, e.g., \"spaces/AAA\". The caller must be a member of the specified space to retrieve messages.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "Required. The resource name of the space to list messages from. Format: `spaces/{space}`."
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of messages to return. Defaults to 25 if unspecified. Maximum is 1000. Negative values raise an error."
            },
            "pageToken": {
              "type": "string",
              "description": "Token for fetching the next page of results. Should be passed unchanged to retrieve paginated data."
            },
            "filter": {
              "type": "string",
              "description": "A query string for filtering messages by `create_time` and/or `thread.name`. Examples:\n- create_time > \"2023-04-21T11:30:00-04:00\"\n- create_time > \"2023-04-21T11:30:00-04:00\" AND thread.name = spaces/AAA/threads/123"
            },
            "orderBy": {
              "type": "string",
              "description": "Order of the returned messages. Valid values:\n- \"createTime desc\": Sort by createTime in descending order (newest first)\n- \"createTime asc\": Sort by createTime in ascending order (oldest first)\nDefaults to \"createTime desc\" if unspecified."
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted messages. If False, messages with `deleteTime` are excluded."
            }
          },
          "required": [
            "parent"
          ]
        }
      },
      "get_message": {
        "name": "get_message",
        "description": "Returns details about a message by name.\n\nThe `name` should follow the format: \"spaces/{space}/messages/{message}\".\nThis function performs the following steps:\n    1. Parses the space portion from the name.\n    2. Checks if the current user is a member of the space.\n    3. Finds the message in DB[\"Message\"].\n    4. Returns the message if found and authorized, else returns {}.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the message.\nFormat: \"spaces/{space}/messages/{message}\" or\n\"spaces/{space}/messages/client-custom-id\"."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "update_message": {
        "name": "update_message",
        "description": "Updates a message in a Google Chat space or creates a new one if allowed.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the message to update. Format:\n`spaces/{space}/messages/{message}`. If using a client-assigned ID,\nuse `spaces/{space}/messages/client-{custom_id}`."
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Comma-separated list of fields to update. Use `\"*\"` to update all fields.\nValid fields: \"text\", \"attachment\", \"cards\", \"cards_v2\", \"accessory_widgets\"."
            },
            "allowMissing": {
              "type": "boolean",
              "description": "Optional. If True and the message is not found, creates a new message\n(only allowed with a client-assigned message ID)."
            },
            "body": {
              "type": "object",
              "description": "Required. The message fields to apply updates to. May include any of the following keys:",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The plain-text message body."
                },
                "attachment": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "description": "List of attachments."
                },
                "cards": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "description": "Legacy UI card structure."
                },
                "cardsV2": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "description": "Enhanced modern card structure."
                },
                "accessoryWidgets": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "description": "Interactive widgets shown below the message."
                }
              },
              "required": [
                "accessoryWidgets",
                "attachment",
                "cards",
                "cardsV2",
                "text"
              ]
            }
          },
          "required": [
            "allowMissing",
            "body",
            "name",
            "updateMask"
          ]
        }
      },
      "patch_message": {
        "name": "patch_message",
        "description": "Updates an existing message resource using the PATCH method.\n\nThis method updates the fields of a Chat message identified by its resource\nname. It supports partial updates via the `updateMask` parameter. If the message\nis not found and `allowMissing` is True, a new message is created (requires a\nclient-assigned message ID).",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the message to update.\nFormat: `spaces/{space}/messages/{message}`.\nExamples:\n- `spaces/AAA/messages/BBB.CCC`\n- `spaces/AAA/messages/client-custom-name`\nSee: https://developers.google.com/workspace/chat/create-messages#name_a_created_message"
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Comma-separated list of fields to update, or `*` for all.\nSupported values include:\n- `text`\n- `attachment`\n- `cards`\n- `cards_v2`\n- `accessory_widgets`"
            },
            "allowMissing": {
              "type": "boolean",
              "description": "Optional. If True, creates the message if not found (requires a\nclient-assigned ID). Ignores `updateMask` in that case."
            },
            "message": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Plain-text body of the message."
                },
                "fallbackText": {
                  "type": "string",
                  "description": "Fallback text for message cards."
                },
                "cards": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "List of cards to include in the message."
                },
                "cards_v2": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "List of version 2 cards (advanced formatting)."
                },
                "attachment": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Attachments such as files or media."
                },
                "thread": {
                  "type": "object",
                  "properties": {},
                  "description": "Thread info, including `name` or `threadKey`."
                },
                "annotations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Annotations like user mentions, rich links, etc."
                },
                "clientAssignedMessageId": {
                  "type": "string",
                  "description": "Optional custom ID to identify the message."
                }
              },
              "description": "A dictionary representing the fields of the message to update.\nPossible keys include:",
              "required": [
                "annotations",
                "attachment",
                "cards",
                "cards_v2",
                "clientAssignedMessageId",
                "fallbackText",
                "text",
                "thread"
              ]
            }
          },
          "required": [
            "name",
            "updateMask"
          ]
        }
      },
      "delete_message": {
        "name": "delete_message",
        "description": "Deletes a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the message.\nFormat: `spaces/{space}/messages/{message}`.\nIf you've set a custom ID for your message, you can use the value from\nthe `clientAssignedMessageId` field for `{message}`. For details, see\nhttps://developers.google.com/workspace/chat/create-messages#name_a_created_message"
            },
            "force": {
              "type": "boolean",
              "description": "When `true`, deleting a message also deletes its threaded\nreplies. When `false`, if the message has threaded replies, deletion fails.\nOnly applies when authenticating as a user. Has no effect when authenticating\nas a Chat app."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_message_attachment": {
        "name": "get_message_attachment",
        "description": "Retrieves attachment metadata by its resource name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the attachment.\nFormat: \"spaces/{space}/messages/{message}/attachments/{attachment}\""
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_thread_read_state_for_user": {
        "name": "get_thread_read_state_for_user",
        "description": "Retrieves the read state of a user within a thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the thread read state to retrieve.\nOnly supports getting read state for the calling user.\nTo refer to the calling user, set one of the following:\n- The `me` alias. For example: users/me/spaces/{space}/threads/{thread}/threadReadState\n- Their Workspace email address. For example: users/user@example.com/spaces/{space}/threads/{thread}/threadReadState\n- Their user ID. For example: users/123456789/spaces/{space}/threads/{thread}/threadReadState\nFormat: users/{user}/spaces/{space}/threads/{thread}/threadReadState"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_space_read_state_for_user": {
        "name": "get_space_read_state_for_user",
        "description": "Retrieves the read state of a user within a space.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the space read state to retrieve.\nOnly supports getting read state for the calling user.\nTo refer to the calling user, set one of the following:\n- The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.\n- Their Workspace email address. For example, `users/user@example.com/spaces/{space}/spaceReadState`.\n- Their user ID. For example, `users/123456789/spaces/{space}/spaceReadState`.\nFormat: users/{user}/spaces/{space}/spaceReadState"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "update_space_read_state_for_user": {
        "name": "update_space_read_state_for_user",
        "description": "Updates a user's space read state.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name of the space read state to update.\nFormat: users/{user}/spaces/{space}/spaceReadState"
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Comma-separated list of fields to update.\nCurrently only \"last_read_time\" is supported."
            },
            "requestBody": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Resource name of the space read state.\n    Format: users/{user}/spaces/{space}/spaceReadState"
                },
                "last_read_time": {
                  "type": "string",
                  "description": "Optional. The time when the user's space read state was updated.\n    This corresponds with either the timestamp of the last read message, or a user-specified timestamp."
                }
              },
              "description": "A dictionary representing the SpaceReadState resource with the following key:",
              "required": [
                "last_read_time",
                "name"
              ]
            }
          },
          "required": [
            "name",
            "requestBody",
            "updateMask"
          ]
        }
      },
      "get_space_notification_settings_for_user": {
        "name": "get_space_notification_settings_for_user",
        "description": "Retrieves the space notification setting for a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the space notification setting to retrieve.\nOnly supports the calling user's identifier.\nFormat:\n- users/me/spaces/{space}/spaceNotificationSetting\n- users/user@example.com/spaces/{space}/spaceNotificationSetting\n- users/123456789/spaces/{space}/spaceNotificationSetting"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "update_space_notification_settings_for_user": {
        "name": "update_space_notification_settings_for_user",
        "description": "Updates the space notification setting for a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Resource name of the space notification setting to update.\nFormat: users/{user}/spaces/{space}/spaceNotificationSetting"
            },
            "updateMask": {
              "type": "string",
              "description": "Required. Comma-separated list of fields to update.\nSupported fields:\n- \"notification_setting\"\n- \"mute_setting\""
            },
            "requestBody": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Resource name of the space notification setting."
                },
                "notification_setting": {
                  "type": "string",
                  "description": "New notification level. One of:\n    - 'NOTIFICATION_SETTING_UNSPECIFIED'\n    - 'ALL'\n    - 'MAIN_CONVERSATIONS'\n    - 'FOR_YOU'\n    - 'OFF'"
                },
                "mute_setting": {
                  "type": "string",
                  "description": "New mute setting. One of:\n    - 'MUTE_SETTING_UNSPECIFIED'\n    - 'UNMUTED'\n    - 'MUTED'"
                }
              },
              "description": "A dictionary representing the SpaceNotificationSetting resource with the following keys:",
              "required": [
                "mute_setting",
                "name",
                "notification_setting"
              ]
            }
          },
          "required": [
            "name",
            "requestBody",
            "updateMask"
          ]
        }
      }
    },
    "google_cloud_storage": {
      "stop_notification_channel": {
        "name": "stop_notification_channel",
        "description": "Stops watching resources through the specified notification channel.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_bucket": {
        "name": "delete_bucket",
        "description": "Deletes an empty bucket.\n\nDeletions are permanent unless soft delete is enabled on the bucket. This function\nchecks for metageneration match conditions and ensures the bucket is empty before deletion.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket to delete."
            },
            "if_metageneration_match": {
              "type": "string",
              "description": "If set, deletes only if the bucket's metageneration\nmatches this value."
            },
            "if_metageneration_not_match": {
              "type": "string",
              "description": "If set, deletes only if the bucket's metageneration\ndoes not match this value."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "restore_bucket": {
        "name": "restore_bucket",
        "description": "Restores a soft-deleted bucket.\n\nThis function restores a bucket only if it exists, is soft-deleted, and its generation\nmatches the provided generation value.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket to restore."
            },
            "generation": {
              "type": "string",
              "description": "The generation of the bucket for verification."
            },
            "projection": {
              "type": "string",
              "description": "Set of properties to return\nOne of:\n-\"full\" (default)\n-\"noAcl\""
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for the request; required for Requester Pays buckets."
            }
          },
          "required": [
            "bucket",
            "generation"
          ]
        }
      },
      "relocate_bucket": {
        "name": "relocate_bucket",
        "description": "Initiates a long-running Relocate Bucket operation on the specified bucket.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket to be relocated."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "get_bucket_details": {
        "name": "get_bucket_details",
        "description": "Returns metadata for the specified bucket.\n\nThis function supports conditional fetches based on metageneration and supports\nretrieval of soft-deleted buckets if specified.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket to retrieve metadata for."
            },
            "generation": {
              "type": "string",
              "description": "If specified, fetches the version of the bucket\nmatching this generation. Required if soft_deleted is True."
            },
            "soft_deleted": {
              "type": "boolean",
              "description": "If True, retrieves the soft-deleted version of the bucket."
            },
            "if_metageneration_match": {
              "type": "string",
              "description": "Returns metadata only if the bucket's\nmetageneration matches this value."
            },
            "if_metageneration_not_match": {
              "type": "string",
              "description": "Returns metadata only if the bucket's\nmetageneration does not match this value."
            },
            "projection": {
              "type": "string",
              "description": "Set of properties to return. Acceptable values:\n- \"full\": Includes all properties.\n- \"noAcl\": Excludes owner, acl, and defaultObjectAcl. Default is \"noAcl\"."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "get_bucket_iam_policy": {
        "name": "get_bucket_iam_policy",
        "description": "Returns an IAM policy for the specified bucket.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket whose IAM policy is being requested."
            },
            "options_requested_policy_version": {
              "type": "integer",
              "description": "The desired IAM policy format version\nto be returned. Must be >= 1 if specified."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for this request. Required for\nRequester Pays buckets."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "get_bucket_storage_layout": {
        "name": "get_bucket_storage_layout",
        "description": "Returns the storage layout configuration for the specified bucket.\n\nThis operation requires the `storage.objects.list` permission. If a `prefix` is specified,\nit can be used to restrict access validation under that specific prefix.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket whose storage layout is to be retrieved."
            },
            "prefix": {
              "type": "string",
              "description": "Optional prefix used for permission checks. Useful when the caller\nonly has permission under a specific path within the bucket."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "create_bucket": {
        "name": "create_bucket",
        "description": "Creates a new bucket.",
        "parameters": {
          "type": "object",
          "properties": {
            "project": {
              "type": "string",
              "description": "A valid API project identifier."
            },
            "predefinedAcl": {
              "type": "string",
              "description": "Apply a predefined set of access controls to this bucket.\nOne of:\n- \"authenticatedRead\"\n- \"private\"\n- \"projectPrivate\"\n- \"publicRead\"\n- \"publicReadWrite\""
            },
            "predefined_default_object_acl": {
              "type": "string",
              "description": "Apply a predefined set of default object access controls to this bucket.\nOne of:\n- \"authenticatedRead\"\n- \"bucketOwnerFullControl\"\n- \"bucketOwnerRead\"\n- \"private\"\n- \"projectPrivate\"\n- \"publicRead\""
            },
            "projection": {
              "type": "string",
              "description": "Set of properties to return.\nOne of:\n- \"full\": Includes all properties.\n- \"noAcl\": Omits owner, acl, and defaultObjectAcl."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for this request."
            },
            "enableObjectRetention": {
              "type": "boolean",
              "description": "If True, enables object retention on the bucket."
            }
          },
          "required": [
            "project"
          ]
        }
      },
      "list_buckets": {
        "name": "list_buckets",
        "description": "Retrieves a list of buckets for a given project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project": {
              "type": "string",
              "description": "A valid API project identifier."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of buckets to return. Defaults to 1000."
            },
            "page_token": {
              "type": "string",
              "description": "Token indicating the starting point for the next page of results."
            },
            "prefix": {
              "type": "string",
              "description": "Filter to include only buckets whose names begin with this prefix."
            },
            "soft_deleted": {
              "type": "boolean",
              "description": "If True, only returns soft-deleted buckets."
            },
            "projection": {
              "type": "string",
              "description": "Properties to return for each bucket. Allowed values:\n- \"full\": Include all properties.\n- \"noAcl\": Exclude ACL-related properties. Default is \"noAcl\"."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for the request."
            }
          },
          "required": [
            "project"
          ]
        }
      },
      "lock_bucket_retention_policy": {
        "name": "lock_bucket_retention_policy",
        "description": "Locks retention policy on a bucket.\n\nThis operation sets the `retentionPolicyLocked` flag to True, preventing future changes\nto the retention policy. The action is conditional on the bucket's current metageneration\nmatching the specified value.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket on which to lock the retention policy."
            },
            "if_metageneration_match": {
              "type": "string",
              "description": "Locks only if the bucket's metageneration matches this value."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for the request. Required for\nRequester Pays buckets."
            }
          },
          "required": [
            "bucket",
            "if_metageneration_match"
          ]
        }
      },
      "patch_bucket_attributes": {
        "name": "patch_bucket_attributes",
        "description": "Patches a bucket.\n\nChanges to the bucket are readable immediately after the write, but configuration changes\nmay take time to propagate. This operation may be conditional on metageneration match.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket to update."
            },
            "if_metageneration_match": {
              "type": "string",
              "description": "Makes the patch conditional on whether the\nbucket's current metageneration matches this value."
            },
            "if_metageneration_not_match": {
              "type": "string",
              "description": "Makes the patch conditional on whether the\nbucket's current metageneration does not match this value."
            },
            "predefinedAcl": {
              "type": "string",
              "description": "Apply a predefined set of access controls to the bucket.\nOne of:\n- \"authenticatedRead\"\n- \"private\"\n- \"projectPrivate\"\n- \"publicRead\"\n- \"publicReadWrite\""
            },
            "predefined_default_object_acl": {
              "type": "string",
              "description": "Apply a predefined set of default object\naccess controls to the bucket.\nOne of:\n- \"authenticatedRead\"\n- \"bucketOwnerFullControl\"\n- \"bucketOwnerRead\"\n- \"private\"\n- \"projectPrivate\"\n- \"publicRead\""
            },
            "projection": {
              "type": "string",
              "description": "Set of properties to return in the response.\nOne of:\n- \"full\": Includes all properties.\n- \"noAcl\": Omits owner, acl and defaultObjectAcl properties."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for this request. Required for\nRequester Pays buckets."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "set_bucket_iam_policy": {
        "name": "set_bucket_iam_policy",
        "description": "Updates an IAM policy for the specified bucket.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket whose IAM policy is being updated."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for this request. Required for\nRequester Pays buckets."
            }
          },
          "required": [
            "bucket"
          ]
        }
      },
      "test_bucket_permissions": {
        "name": "test_bucket_permissions",
        "description": "Tests a set of permissions on the given bucket to see which, if any, are held by the caller.",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket on which permissions are being tested."
            },
            "permissions": {
              "type": "string",
              "description": "The list of permissions to test.\nOne of:\n- storage.buckets.delete\n- storage.buckets.get\n- storage.buckets.getIamPolicy\n- storage.buckets.create\n- storage.buckets.list\n- storage.buckets.setIamPolicy\n- storage.buckets.update\n- storage.objects.delete\n- storage.objects.get\n- storage.objects.getIamPolicy\n- storage.objects.create\n- storage.objects.list\n- storage.objects.setIamPolicy\n- storage.objects.update\n- storage.managedFolders.delete\n- storage.managedFolders.get\n- storage.managedFolders.getIamPolicy\n- storage.managedFolders.create\n- storage.managedFolders.list\n- storage.managedFolders.setIamPolicy"
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for this request. Required for\nRequester Pays buckets."
            }
          },
          "required": [
            "bucket",
            "permissions"
          ]
        }
      },
      "update_bucket_attributes": {
        "name": "update_bucket_attributes",
        "description": "Updates a bucket. Changes to the bucket will be readable immediately after writing,\n\nbut configuration changes may take time to propagate.\"",
        "parameters": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string",
              "description": "Name of the bucket to update."
            },
            "if_metageneration_match": {
              "type": "string",
              "description": "Makes the patch conditional on whether the\nbucket's current metageneration matches this value."
            },
            "if_metageneration_not_match": {
              "type": "string",
              "description": "Makes the patch conditional on whether the\nbucket's current metageneration does not match this value."
            },
            "predefinedAcl": {
              "type": "string",
              "description": "Apply a predefined set of access controls to the bucket.\nOne of:\n- \"authenticatedRead\"\n- \"private\"\n- \"projectPrivate\"\n- \"publicRead\"\n- \"publicReadWrite\""
            },
            "predefined_default_object_acl": {
              "type": "string",
              "description": "Apply a predefined set of default object\naccess controls to the bucket.\nOne of:\n- \"authenticatedRead\"\n- \"bucketOwnerFullControl\"\n- \"bucketOwnerRead\"\n- \"private\"\n- \"projectPrivate\"\n- \"publicRead\""
            },
            "projection": {
              "type": "string",
              "description": "Set of properties to return in the response.\nOne of:\n- \"full\": Includes all properties.\n- \"noAcl\": Omits owner, acl and defaultObjectAcl properties."
            },
            "user_project": {
              "type": "string",
              "description": "The project to be billed for this request. Required for\nRequester Pays buckets."
            }
          },
          "required": [
            "bucket"
          ]
        }
      }
    },
    "puppeteer": {
      "navigate": {
        "name": "navigate",
        "description": "Navigates to a URL in the browser.\n\nOpens a new browser context and navigates to the specified URL. Validates the URL format, \ninitializes a browser session, loads the page, and stores the navigation details in the \ndatabase for subsequent operations.",
        "parameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to navigate to. Must be a valid HTTP/HTTPS URL."
            },
            "launch_options": {
              "type": "object",
              "properties": {},
              "description": "Browser launch configuration options.\nCommon options include headless mode, viewport size, and user agent settings."
            },
            "allow_dangerous": {
              "type": "boolean",
              "description": "Whether to allow navigation to potentially unsafe URLs.\nDefaults to False for security."
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "screenshot": {
        "name": "screenshot",
        "description": "Takes a screenshot of the current page or a specific element.\n\nCaptures a screenshot identified by the name parameter. If a selector is provided, captures \nthe specific element on the page that matches the CSS selector. If no selector is given, \ncaptures the entire current page. The dimensions can be customized using the width and \nheight parameters, which default to 800 and 600 pixels respectively.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name for the screenshot."
            },
            "selector": {
              "type": "string",
              "description": "CSS selector for element to screenshot."
            },
            "width": {
              "type": "integer",
              "description": "Width in pixels (default: 800)."
            },
            "height": {
              "type": "integer",
              "description": "Height in pixels (default: 600)."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "click": {
        "name": "click",
        "description": "Clicks an element on the current page.\n\nLocates an element using the provided CSS selector and performs a click action on it.\nWaits for the element to be visible before attempting to click. The element must be \nclickable (not obscured, disabled, or hidden) for the operation to succeed.",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for the element to click."
            }
          },
          "required": [
            "selector"
          ]
        }
      },
      "fill": {
        "name": "fill",
        "description": "Fills an input field with a value.\n\nLocates an input field using the provided CSS selector and fills it with the specified value.\nWaits for the element to be visible and editable before attempting to fill it. The target \nelement must be an input field, textarea, or other editable element for the operation to succeed.",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for the input element to fill."
            },
            "value": {
              "type": "string",
              "description": "Value to enter into the input field."
            }
          },
          "required": [
            "selector",
            "value"
          ]
        }
      },
      "select_option": {
        "name": "select_option",
        "description": "Selects an option in a dropdown element.\n\nLocates a select dropdown using the provided CSS selector and selects the specified option.\nWaits for the select element to be visible before attempting to select an option. The value \ncan match either the option's value attribute or its text content. The target element must \nbe a select element with available options for the operation to succeed.",
        "parameters": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "string",
              "description": "CSS selector for the select element."
            },
            "value": {
              "type": "string",
              "description": "Value or text of the option to select."
            }
          },
          "required": [
            "selector",
            "value"
          ]
        }
      }
    },
    "copilot": {
      "semantic_search": {
        "name": "semantic_search",
        "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace.\n\nThis function runs a natural language search for relevant code or documentation comments\nfrom the user's current workspace. It returns relevant code snippets from the\nuser's current workspace if it is large, or the full contents of the workspace\nif it is small.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The natural language query string to search for."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "list_code_usages": {
        "name": "list_code_usages",
        "description": "Requests to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc.\n\nThis function lists all usages (e.g., references, definitions, implementations) of a specified code symbol such as a function, class, method, or variable.\nIt is used for purposes such as:\n1. Looking for a sample implementation of an interface or class.\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the file containing the symbol for which usages are to be found."
            },
            "line_number": {
              "type": "integer",
              "description": "The 1-based line number in the specified file where the symbol is located. This typically refers to the start of the symbol's identifier."
            },
            "column_number": {
              "type": "integer",
              "description": "The 1-based column number (character offset) on the line in the specified file where the symbol is located. This typically refers to the start of the symbol's identifier."
            }
          },
          "required": [
            "column_number",
            "file_path",
            "line_number"
          ]
        }
      },
      "grep_search": {
        "name": "grep_search",
        "description": "Do a text search in the workspace.\n\nThis function performs a text search within the user's workspace. It is\nlimited to 20 results and is intended for use when the exact string or\nregular expression to search for is known.",
        "parameters": {
          "type": "object",
          "properties": {
            "search_pattern": {
              "type": "string",
              "description": "The exact string or regular expression to search\nfor in the workspace."
            }
          },
          "required": [
            "search_pattern"
          ]
        }
      },
      "file_search": {
        "name": "file_search",
        "description": "Search for files in the workspace by glob pattern.\n\nThis function searches for files in the workspace using a glob pattern. It returns a list of\nfile paths relative to the workspace root that match the pattern.\nThe search is limited to 20 results. This tool is suitable when the filename pattern\nfor the desired files is known. Glob patterns are matched starting from the root of the\nworkspace folder.",
        "parameters": {
          "type": "object",
          "properties": {
            "glob_pattern": {
              "type": "string",
              "description": "The glob pattern to search for files."
            }
          },
          "required": [
            "glob_pattern"
          ]
        }
      },
      "read_file": {
        "name": "read_file",
        "description": "Read the contents of a file.\n\nThis function reads a specified range of lines from a file. If the requested\nrange is part of a larger file, an outline of the file structure may be\nprovided. If the returned content is insufficient, this function can be\ncalled again to retrieve more content.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The path to the file to be read."
            },
            "start_line": {
              "type": "integer",
              "description": "The 1-based starting line number of the content to retrieve."
            },
            "end_line": {
              "type": "integer",
              "description": "The 1-based ending line number of the content to retrieve."
            }
          },
          "required": [
            "end_line",
            "file_path",
            "start_line"
          ]
        }
      },
      "list_dir": {
        "name": "list_dir",
        "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file.\n\nThis function lists the contents of a specified directory. For each entry\nfound, which represents a child item, its name is provided. A trailing\nslash ('/') in an entry's name indicates that the entry is a folder;\notherwise, the entry is considered a file.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path to the directory whose contents are to be listed."
            }
          },
          "required": [
            "path"
          ]
        }
      },
      "insert_edit_into_file": {
        "name": "insert_edit_into_file",
        "description": "Insert new code into an existing file in the workspace.\n\nInserts new code into an existing file in the workspace. This function is used\nonce per file that needs modification, even if there are multiple changes for\nthat file. The `explanation` property should be generated first. The system\nintelligently applies edits based on minimal hints. It is important to avoid\nrepeating existing code in the `edit_instructions`; instead, comments\n(e.g., `// ...existing code...`) represent regions of unchanged code,\naiming for conciseness. For example:\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n\nAn example of how to format an edit to an existing `Person` class:\nclass Person {\n    // ...existing code...\n    age: number;\n    // ...existing code...\n    getAge() {\n        return this.age;\n    }\n}",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The path of the file within the workspace that needs to be modified."
            },
            "edit_instructions": {
              "type": "string",
              "description": "The content representing the changes to be applied to the file. Follow the concise diff-like format: use comments (e.g., '// ...existing code...') to represent regions of unchanged code and provide only the new or modified code blocks."
            },
            "explanation": {
              "type": "string",
              "description": "A natural language explanation of the changes being made in this edit. This should be generated first."
            }
          },
          "required": [
            "edit_instructions",
            "explanation",
            "file_path"
          ]
        }
      },
      "run_in_terminal": {
        "name": "run_in_terminal",
        "description": "Run a shell command in a terminal.\n\nThis function runs a shell command in a terminal. The terminal state is persistent across tool calls.\nThis tool is intended to be used instead of printing a shell codeblock and asking the user to run it.\nIf the command is a long-running background process, the `is_background` parameter must be set to `True`.\nWhen a command is run in the background, the function returns a terminal ID, which can be used with\n`get_terminal_output` to check the output of the background process.\nIf a command typically uses a pager (e.g., `git log`, `man`, `less`), the command MUST be modified\nto disable the pager (e.g., `git --no-pager log`) or its output must be piped to a non-pager\ncommand (e.g., `git log | cat`). Failure to handle pagers correctly may lead to stalled\nexecution or unexpected behavior.",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The shell command to execute. This is a required parameter.\nIf the command typically uses a pager (e.g., `git log`, `man`, `less`),\nyou MUST modify the command to disable the pager (e.g., `git --no-pager log`)\nor pipe its output to a non-pager command (e.g., `git log | cat`).\nFailure to do so may lead to stalled execution or unexpected behavior."
            },
            "is_background": {
              "type": "boolean",
              "description": "If true, the command runs as a background process, and the\nmethod returns immediately with a terminal ID. If false (default), the\ncommand runs in the foreground, and the method waits for completion before\nreturning output. Defaults to false."
            }
          },
          "required": [
            "command"
          ]
        }
      },
      "get_terminal_output": {
        "name": "get_terminal_output",
        "description": "Retrieves the output and status for a terminal process.\n\nThis function is used to get the standard output (stdout), standard error (stderr),\nrunning status, and exit code of a terminal command that was previously\nstarted.\n\nWhen called, it attempts to read any new output generated by the process\nsince the last call for the same `terminal_id`. If the process has finished,\nthis function will retrieve any output, the final exit code.",
        "parameters": {
          "type": "object",
          "properties": {
            "terminal_id": {
              "type": "string",
              "description": "The ID of the background terminal process. This ID should\nhave been returned by the function that initiated the background process.\nIt must be a string containing only digits."
            }
          },
          "required": [
            "terminal_id"
          ]
        }
      },
      "get_vscode_api": {
        "name": "get_vscode_api",
        "description": "Get relevant VS Code API references to answer questions about VS Code extension development.\n\nThis function gets relevant VS Code API references to answer questions about VS Code\nextension development. It is used when the user asks about VS Code APIs,\ncapabilities, or best practices related to developing VS Code extensions.\nIt is used in all VS Code extension development workspaces.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The query to search vscode documentation for. Should contain all\nrelevant context."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "install_extension": {
        "name": "install_extension",
        "description": "Install an extension in VS Code.\n\nThis function installs an extension in Visual Studio Code. It is intended for use\nexclusively as part of a new workspace creation process.",
        "parameters": {
          "type": "object",
          "properties": {
            "extension_id": {
              "type": "string",
              "description": "The unique identifier of the Visual Studio Code extension\nto be installed (e.g., 'ms-python.python')."
            }
          },
          "required": [
            "extension_id"
          ]
        }
      },
      "create_new_workspace": {
        "name": "create_new_workspace",
        "description": "Get steps to help the user create any project in a VS Code workspace.\n\nUse this tool to help users set up new projects, including TypeScript-based projects, Model Context Protocol (MCP) servers, VS Code extensions, Next.js projects, Vite projects, or any other project.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "get_project_setup_info": {
        "name": "get_project_setup_info",
        "description": "Provides project setup information for a Visual Studio Code workspace based on a project type and programming language.\n\nThis tool provides project setup information for a Visual Studio Code workspace based on a project type and programming language. This tool must not be called without first calling the tool to create a workspace.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_type": {
              "type": "string",
              "description": "The type of the project (e.g., 'typescript_server', 'vscode_extension', 'python_datascience')."
            },
            "language": {
              "type": "string",
              "description": "The primary programming language of the project (e.g., 'typescript', 'python')."
            }
          },
          "required": [
            "language",
            "project_type"
          ]
        }
      },
      "create_new_jupyter_notebook": {
        "name": "create_new_jupyter_notebook",
        "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code.\n\nGenerates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks\nare interactive documents commonly used for data exploration, analysis,\nvisualization, and combining code with narrative text. This tool should\nonly be called when the user explicitly requests to create a new Jupyter\nNotebook.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_errors": {
        "name": "get_errors",
        "description": "Get any compile or lint errors in a code file.\n\nIf a user mentions errors or problems in a file, they may be referring to\nthese compile or lint errors. This function allows seeing the same errors\nthat the user is seeing. It is also used after editing a file to validate\nthe change.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The path to the code file to analyze for errors."
            }
          },
          "required": [
            "file_path"
          ]
        }
      },
      "get_changed_files": {
        "name": "get_changed_files",
        "description": "Get git diffs of current file changes in the active git repository.\n\nThis function retrieves git diffs for current file changes within the\nactive git repository. For each changed file, it provides its path,\nstatus (e.g., 'modified', 'added', 'deleted', 'renamed', 'copied'),\nthe diff output in unified format, and the original path if the file\nwas renamed or copied. It is also noted that `run_in_terminal` can be\nused to execute git commands.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "test_search": {
        "name": "test_search",
        "description": "For a source code file, find the file that contains the tests. For a test file find the file that contains the code under test.\n\nThis function processes a given `file_path`. If `file_path` points to a source code file, the function searches for the file containing its tests.\nConversely, if `file_path` points to a test file, the function searches for the file containing the code under test.\nThe outcome of this search, including the path to the related file (if found), the type of relationship, and a confidence score, is returned.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_path": {
              "type": "string",
              "description": "The absolute path to the source code file or test file for which to find its related counterpart."
            }
          },
          "required": [
            "file_path"
          ]
        }
      }
    },
    "cursor": {
      "list_dir": {
        "name": "list_dir",
        "description": "Lists the immediate contents of a directory within the configured workspace.\n\nResolves the provided path relative to the workspace root and queries the\ninternal file system representation to find direct children (files and\nsubdirectories).\n\nThis function is primarily intended for exploring the workspace structure\nand discovering file/directory names at a specific location. It often serves\nas a preliminary step before using more targeted tools like `read_file`,\n`grep_search`, or `codebase_search` on specific items found in the listing.",
        "parameters": {
          "type": "object",
          "properties": {
            "relative_workspace_path": {
              "type": "string",
              "description": "The path of the directory to list,\nrelative to the workspace root. An empty string or '.' refers\nto the workspace root itself. Leading slashes are stripped."
            },
            "explanation": {
              "type": "string",
              "description": "A description of the reason for\nthis operation, potentially used for logging or auditing. Defaults to None."
            }
          },
          "required": [
            "relative_workspace_path"
          ]
        }
      },
      "delete_file": {
        "name": "delete_file",
        "description": "Deletes a specified file from the application's managed file system.\n\nResolves the provided path relative to the workspace root and attempts to\nremove the corresponding file entry from the application's internal file\nsystem representation.\n\nThis operation raises appropriate errors for failure scenarios: if the file does\nnot exist, if the target path refers to a directory, or if path resolution fails.\nOnly successful deletions return a success dictionary.",
        "parameters": {
          "type": "object",
          "properties": {
            "target_file": {
              "type": "string",
              "description": "The path of the file to be deleted, relative to the\nworkspace root. Leading slashes are stripped to ensure the path is\ntreated as relative."
            },
            "explanation": {
              "type": "string",
              "description": "A description of the reason for\nthis deletion. Not used in the return value but may be utilized for\nlogging or auditing. Defaults to None."
            }
          },
          "required": [
            "target_file"
          ]
        }
      },
      "file_search": {
        "name": "file_search",
        "description": "Performs a fuzzy search for files based on matching a query against file paths.\n\nSearches through the file paths within the application's internal file system\nrepresentation using fuzzy matching algorithms. This is useful when part of \na file path or name is known, but the exact location is not. It returns a \nranked list of file paths (excluding directories) based on similarity to the query.\n\nResults are capped at a maximum of 10 matches; more specific queries will\nyield narrower results.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The string to search for within file paths. Fuzzy matching\nattempts to account for typos and partial matches."
            },
            "explanation": {
              "type": "string",
              "description": "A required sentence explaining the reason for this search,\ntypically for logging or auditing purposes."
            }
          },
          "required": [
            "explanation",
            "query"
          ]
        }
      },
      "grep_search": {
        "name": "grep_search",
        "description": "Performs a text search using a regular expression across applicable files.\n\nScans the content of files within the application's internal file system\nrepresentation, optionally filtering by include/exclude glob patterns.\nIt searches each line using the provided regex query, respecting case\nsensitivity. This function is optimized for finding exact text matches or\nspecific patterns and is generally more precise than semantic search for\nlocating known symbols, function names, or literal strings.\n\nThe query must be a valid regex pattern; ensure special characters intended\nfor literal matching are properly escaped (e.g., '\\.' to match a period).\nFound matches include file path, line number, and content, capped at the\nfirst 50 matches found across all searched files.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The regular expression pattern to search for. Callers should\nensure the pattern is valid and escape special characters if\nliteral matching is intended (e.g., '\\.' for a literal dot)."
            },
            "explanation": {
              "type": "string",
              "description": "A description of the reason for\nthis search, primarily for logging or auditing. Defaults to None."
            },
            "case_sensitive": {
              "type": "boolean",
              "description": "Determines if the regex search respects\ncharacter case (True) or ignores case (False). Defaults to True."
            },
            "include_pattern": {
              "type": "string",
              "description": "A glob pattern (e.g., '*.py', 'src/**')\nto filter which file paths are included in the search. If omitted,\nall files passing the exclude filter are considered. Defaults to None."
            },
            "exclude_pattern": {
              "type": "string",
              "description": "A glob pattern to filter\nwhich file paths are excluded from the search. Exclusions override\ninclusions. Defaults to None."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "edit_file": {
        "name": "edit_file",
        "description": "Proposes an edit to an existing file or creates a new file.\n\nThis function generates a structured edit that is read and applied by a less intelligent model.\nThe edit specifies changes clearly while minimizing the amount of unchanged code. Changes are\nspecified in sequence, with the special comment `// ... existing code ...` representing\nunchanged code between edited lines.\n\nFor example:\n```\n// ... existing code ...\nFIRST_EDIT\n// ... existing code ...\nSECOND_EDIT\n// ... existing code ...\nTHIRD_EDIT\n// ... existing code ...\n```\n\nThe edit repeats as few lines of the original file as possible, but contains sufficient\ncontext of unchanged lines to resolve ambiguity. Omitting the `// ... existing code ...`\ncomment for pre-existing code may cause the model to inadvertently delete those lines.\nCreating a new file involves specifying the entire file content in the `code_edit` field.",
        "parameters": {
          "type": "object",
          "properties": {
            "target_file": {
              "type": "string",
              "description": "The target file to modify. This argument is always specified first. Its path can be relative to the workspace or absolute, and an absolute path is preserved."
            },
            "code_edit": {
              "type": "string",
              "description": "Contains only the precise lines of code to edit. It never contains unchanged code; instead, it represents unchanged code using a language-appropriate comment like `// ... existing code ...`."
            },
            "instructions": {
              "type": "string",
              "description": "A single sentence instruction describing the change being made in the sketched edit. It assists the less intelligent model in applying the edit by providing a concise summary that avoids repeating information from previous messages and disambiguates any uncertainty in the edit."
            }
          },
          "required": [
            "code_edit",
            "instructions",
            "target_file"
          ]
        }
      },
      "codebase_search": {
        "name": "codebase_search",
        "description": "Finds code snippets semantically relevant to a natural language query,\n\nfiltered by target directories if specified.\n\nThis function searches the codebase for code segments that match the meaning\nand intent of the user's query, rather than just exact keywords. It also\nsearches git repository metadata for additional context related to the query,\nproviding both code snippets and relevant git information when available.\nResults include commit hash information for integration with git history tools.\n\nGuidelines for use:\n- To find code related to a specific task, feature description, or conceptual question \n  (e.g., \"find how user authentication is handled\", \"show me data validation logic\", \n  \"where are API request parsers defined?\").\n- When the exact file names or function/class names are unknown.\n- To get an understanding of how certain concepts are implemented across various \n  parts of the codebase.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The natural language search query describing the functionality,\nconcept, or implementation to find. Should be descriptive rather than\nusing exact function or variable names."
            },
            "explanation": {
              "type": "string",
              "description": "Optional description of the search purpose\nfor logging and debugging. Used to track search patterns. Defaults to None."
            },
            "target_directories": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional list of glob patterns to\nrestrict search scope to specific directories or file patterns.\nExamples: ['src/**', 'lib/*.py', 'components/*']. Defaults to None\nfor full codebase search."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "read_file": {
        "name": "read_file",
        "description": "Read the contents of a file from the application's managed file system.\n\nThis function reads a specified range of lines from a file within the workspace and provides the summary of the\nfile content outside of that specified range of lines. It can read a specific range of lines or the entire file based on the\nshould_read_entire_file parameter. The function handles path resolution, validates the file exists, and ensures the\nrequested line range is valid. If the requested `start_line_one_indexed` is out of bounds (greater than the total\nnumber of lines), the function will instead read up to the last 250 lines of the file.\n\nGuidelines for use:\n    - You can view up to 250 lines at a time.\n    - After each read, check if you have enough context to proceed with your task.\n    - Note any lines that were not shown, and if you suspect important information is outside the viewed range,\n      read those lines as well.\n    - When unsure, read additional lines to ensure you have the complete context.\n    - Avoid reading the entire file unless absolutely necessary as this can be slow and inefficient for large files.",
        "parameters": {
          "type": "object",
          "properties": {
            "target_file": {
              "type": "string",
              "description": "The path of the file to read. Can be relative to the workspace root or absolute.\nIf absolute, it will be used as is. If relative, it will be joined with workspace root."
            },
            "should_read_entire_file": {
              "type": "boolean",
              "description": "Whether to read the entire file. If True,\nstart_line_one_indexed and end_line_one_indexed_inclusive are ignored."
            },
            "start_line_one_indexed": {
              "type": "integer",
              "description": "The one-indexed line number to start reading from (inclusive).\nMust be >= 1 and <= end_line_one_indexed_inclusive."
            },
            "end_line_one_indexed_inclusive": {
              "type": "integer",
              "description": "The one-indexed line number to end reading at (inclusive).\nMust be >= start_line_one_indexed and <= total lines in file."
            },
            "explanation": {
              "type": "string",
              "description": "A description of why this operation is being performed.\nNot used in the return value but may be utilized for logging or auditing.\nDefaults to None."
            }
          },
          "required": [
            "end_line_one_indexed_inclusive",
            "start_line_one_indexed",
            "target_file"
          ]
        }
      },
      "reapply": {
        "name": "reapply",
        "description": "Re-applies the last attempted edit for a file using enhanced processing.\n\nThis function retrieves the instructions and code edit details from the\npreviously recorded edit operation for the specified `target_file`. It then\ninvokes an LLM, providing the original instructions, the prior edit attempt,\nand the file's current content. The LLM generates the intended complete,\nfinal content of the file. This new content directly replaces the existing\ncontent in the application's internal file representation.\n\nUse this function only if a preceding `edit_file` operation produced an\nunexpected or incorrect result.",
        "parameters": {
          "type": "object",
          "properties": {
            "target_file": {
              "type": "string",
              "description": "The path of the file to re-apply the last edit to\n(relative to CWD or absolute within the workspace)."
            }
          },
          "required": [
            "target_file"
          ]
        }
      },
      "run_terminal_cmd": {
        "name": "run_terminal_cmd",
        "description": "Executes the provided terminal command in the current workspace context.\n\nUse this function to run shell commands. You need to provide the exact\ncommand string to be executed. Note that commands like 'cd' and 'pwd' are\nhandled internally to manage the current working directory state; other\ncommands are executed externally and may modify the workspace files.\n\nIMPORTANT: For any command that expects user interaction or uses a pager\n(like git diff, git log, less, head, tail, more, etc.), you MUST append\n' | cat' to the command string yourself before passing it to this function.\nFailure to do so will cause the command to hang or fail.\n\nFor commands that are intended to run for a long time or indefinitely\n(e.g., starting a server, running a watch process), set the\n`is_background` parameter to True.",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The exact terminal command string to execute. Remember\nto append ' | cat' for interactive/pager commands."
            },
            "explanation": {
              "type": "string",
              "description": "A brief justification for running this command, which\nmay be shown to the user or used for logging."
            },
            "is_background": {
              "type": "boolean",
              "description": "Set to True to run the command as a\nbackground process (e.g., for servers or watchers). Defaults to False,\nrunning the command in the foreground and waiting for completion."
            }
          },
          "required": [
            "command",
            "explanation"
          ]
        }
      },
      "fetch_pull_request": {
        "name": "fetch_pull_request",
        "description": "Looks up a pull request by number or a commit by commit hash and returns the diff.\n\nThis function integrates with the git repository to fetch real diffs and commit information.\nIt can resolve PR numbers by finding commits that reference them in commit messages, or \ndirectly show commit diffs. The function returns comprehensive information including the\nformatted diff, author details, and file changes.\n\nPull requests and commit hashes related to files can be found via the\n'read_file' and 'codebase_search' tools. You should generally use this\ntool following a 'codebase_search' toolcall rather than making a new\n'codebase_search' or 'read_file' tool call.",
        "parameters": {
          "type": "object",
          "properties": {
            "pullNumberOrCommitHash": {
              "type": "string",
              "description": "The pull request number (without '#' prefix) or \ncommit hash (full or abbreviated). For PR numbers, the function searches \nfor commits referencing that PR in their messages."
            }
          },
          "required": [
            "pullNumberOrCommitHash"
          ]
        }
      },
      "add_to_memory": {
        "name": "add_to_memory",
        "description": "Makes a suggestion to the user to store a piece of learned knowledge\n\n(e.g., about deprecated functions, new patterns, facts about the codebase)\ninto a persistent knowledge base for future reference by the AI.\nUser must accept the tool call before the knowledge is stored.\nEspecially important things to add to the knowledge base are operational\nknowledge about the codebase that are not obvious from just the code.\nAs an example, using 'nvm use' before running terminal commands.\nIf the user asks to remember something, for something to be saved,\nor to create a memory, you MUST use this tool. To update existing knowledge,\nprovide the existing_knowledge_id parameter.",
        "parameters": {
          "type": "object",
          "properties": {
            "knowledge_to_store": {
              "type": "string",
              "description": "The specific piece of knowledge or fact to be stored.\nIt should be no more than a paragraph in length (max 500 characters). \nIf the knowledge is an update or contradiction of previous\nknowledge, do not mention or refer to the previous\nknowledge."
            },
            "title": {
              "type": "string",
              "description": "The title of the knowledge to be stored. This will be used to look\nup and retrieve the knowledge later. This should be a short title\nthat captures the essence of the knowledge."
            },
            "existing_knowledge_id": {
              "type": "string",
              "description": "Optional. The ID of existing knowledge\nto update instead of creating new\nknowledge. If provided, the\nknowledge_to_store and title will\nreplace the existing knowledge entry."
            }
          },
          "required": [
            "knowledge_to_store",
            "title"
          ]
        }
      },
      "create_diagram": {
        "name": "create_diagram",
        "description": "Creates a Mermaid diagram that will be rendered in the chat UI. Provide the raw Mermaid DSL string via `content`.\n\nUse <br/> for line breaks, always wrap diagram texts/tags in double quotes, do not use custom colors, do not use :::, and do not use beta features.\nThe diagram will be pre-rendered to validate syntax - if there are any Mermaid syntax errors, a MermaidSyntaxError exception will be raised.",
        "parameters": {
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "Raw Mermaid diagram definition (e.g., 'graph TD; A-->B;')."
            }
          },
          "required": [
            "content"
          ]
        }
      },
      "fix_lints": {
        "name": "fix_lints",
        "description": "Attempts to fix linting errors from the last edit by generating and applying new code edits.\n\nThis function should be called if a previous edit introduced linting errors.",
        "parameters": {
          "type": "object",
          "properties": {
            "run": {
              "type": "boolean",
              "description": "A flag to execute the function. Must be True."
            }
          },
          "required": [
            "run"
          ]
        }
      },
      "fetch_rules": {
        "name": "fetch_rules",
        "description": "Fetches rules provided by the user to help with navigating the codebase.\n\nThis function fetches rules provided by the user to help with navigating the codebase.\nRules contain information about the codebase that can be used to help with generating code.\nIf a user's request seems like it would benefit from a rule, this tool is used to fetch the rule.",
        "parameters": {
          "type": "object",
          "properties": {
            "rule_names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The names of the rules to fetch. Each string in the list\nis the name of the rule to fetch."
            }
          },
          "required": [
            "rule_names"
          ]
        }
      },
      "deep_search": {
        "name": "deep_search",
        "description": "Ask a specialized search model to find relevant files, code blocks, and other context within the codebase.\n\nThis tool is expensive since it requires waiting for a sub-agent to do a full search, so you should try to\ninclude all the relevant information in the query and avoid doing multiple searches about the same topic.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query to ask the search model. The search model will receive NO other context\nbesides this. It should be a broad query that includes as much information as needed about\nthe user's high-level goal, so that the search model can provide a comprehensive answer\nand you won't need to do additional searching.\nMust be between 3 and 1000 characters long and contain at least one alphanumeric character."
            }
          },
          "required": [
            "query"
          ]
        }
      }
    },
    "workday": {
      "get_supplier_contact_by_id": {
        "name": "get_supplier_contact_by_id",
        "description": "Retrieves the details of an existing supplier contact by ID.\n\nThis function returns full information about a supplier contact, including their\nattributes and optionally included related resources such as contact types, phones,\nand linked supplier company.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Required. Unique identifier of the supplier contact."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"supplier_company\"\n- \"contact_types\"\n- \"phones\""
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_supplier_contact_by_id": {
        "name": "update_supplier_contact_by_id",
        "description": "Updates the details of an existing supplier contact.\n\nThis function modifies a supplier contact's attributes and optionally updates related\ncontact types and phone records. The request body must include the `id` of the contact,\nwhich should match the path parameter.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Required. Unique identifier of the supplier contact to be updated."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"supplier_company\"\n- \"contact_types\"\n- \"phones\""
            },
            "body": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {},
                  "description": ""
                },
                "type": {
                  "type": "string",
                  "description": "Required. Must be \"supplier_contacts\"."
                },
                "id": {
                  "type": "integer",
                  "description": "Required. Must match the `id` in the URL path."
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required unless both `first_name` and `last_name` are provided. Full name (\u2264 255 chars)."
                    },
                    "first_name": {
                      "type": "object",
                      "description": "First name (\u2264 255 chars)."
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Last name (\u2264 255 chars)."
                    },
                    "email": {
                      "type": "string",
                      "description": "Required. Email address (\u2264 255 chars)."
                    },
                    "notes": {
                      "type": "object",
                      "description": "Notes about the contact."
                    },
                    "phone_number": {
                      "type": "object",
                      "description": "Deprecated. Prefer `phones` relationship."
                    },
                    "job_title": {
                      "type": "object",
                      "description": "Job title of the contact."
                    },
                    "external_id": {
                      "type": "object",
                      "description": "Internal reference ID."
                    },
                    "is_suggested": {
                      "type": "object",
                      "description": "If the contact is unapproved or suggested."
                    }
                  },
                  "description": "",
                  "required": [
                    "email",
                    "name"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "contact_types": {
                      "type": "object",
                      "description": "- data: List[{ id (int), type (str) }]"
                    },
                    "phones": {
                      "type": "object",
                      "description": "- data: List[{ id (int), type (str) }]"
                    }
                  },
                  "description": ""
                }
              },
              "description": "Payload containing the updated supplier contact information.",
              "required": [
                "attributes",
                "data",
                "id",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_supplier_contact_by_id": {
        "name": "delete_supplier_contact_by_id",
        "description": "Deletes a supplier contact by its unique identifier.\n\nThis function permanently removes the specified supplier contact from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Required. Unique identifier of the supplier contact to be deleted."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_spend_categories": {
        "name": "list_spend_categories",
        "description": "Retrieves a list of spend categories.\n\nAllows listing of all available spend categories along with optional usage types. Categories can be used to group procurement, expenses, ad-hoc payments, and supplier invoices.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_spend_category": {
        "name": "create_spend_category",
        "description": "Creates a new spend category with specified attributes.\n\nSpend categories are used to classify spend for procurement, expense, ad-hoc payment, or supplier invoice use cases. Only categories with the \"procurement\" usage can be used in requisitions.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Name of the spend category."
            },
            "external_id": {
              "type": "string",
              "description": "External identifier of the category (max 255 characters)."
            },
            "usages": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of applicable usage contexts.\n- Allowed values: \"procurement\", \"expense\", \"ad_hoc_payment\", \"supplier_invoice\""
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "add_supplier_companies_to_project_by_external_id": {
        "name": "add_supplier_companies_to_project_by_external_id",
        "description": "Adds one or more supplier companies to a project using external identifiers.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_external_id": {
              "type": "string",
              "description": "The external identifier of the project."
            },
            "supplier_external_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of supplier company external IDs to add to the project."
            }
          },
          "required": [
            "project_external_id",
            "supplier_external_ids"
          ]
        }
      },
      "remove_supplier_companies_from_project_by_external_id": {
        "name": "remove_supplier_companies_from_project_by_external_id",
        "description": "Removes one or more supplier companies from a project using external identifiers.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_external_id": {
              "type": "string",
              "description": "The external identifier of the project."
            },
            "supplier_external_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of supplier company external IDs to remove from the project.\nFor optimal performance, it's recommended to remove 10 or fewer\nsuppliers in a single request."
            }
          },
          "required": [
            "project_external_id",
            "supplier_external_ids"
          ]
        }
      },
      "add_supplier_contacts_to_project_by_internal_id": {
        "name": "add_supplier_contacts_to_project_by_internal_id",
        "description": "Adds one or more supplier contacts to a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "integer",
              "description": "The unique identifier of the project."
            },
            "supplier_contact_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "A list of supplier contact IDs to add to the project."
            }
          },
          "required": [
            "project_id",
            "supplier_contact_ids"
          ]
        }
      },
      "remove_supplier_contacts_from_project_by_internal_id": {
        "name": "remove_supplier_contacts_from_project_by_internal_id",
        "description": "Removes one or more supplier contacts from a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "integer",
              "description": "The unique identifier of the project."
            },
            "supplier_contact_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "A list of supplier contact IDs to remove from the project."
            }
          },
          "required": [
            "project_id",
            "supplier_contact_ids"
          ]
        }
      },
      "get_field_group_by_id": {
        "name": "get_field_group_by_id",
        "description": "Retrieves the details of a specific field group by its ID.\n\nThis function returns the complete details of a field group identified by its\nunique identifier. The function supports both string and integer ID formats.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the field group to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_field_group_by_id": {
        "name": "update_field_group_by_id",
        "description": "Updates the details of an existing field group.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the field group to update."
            },
            "options": {
              "type": "object",
              "description": "A dictionary containing the updated properties for the\nfield group, including any of the following fields:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"field_groups\""
                },
                "id": {
                  "type": "integer",
                  "description": "Field group identifier string. Same as the id parameter."
                },
                "fields": {
                  "type": "object",
                  "description": "List of fields belonging to this group"
                },
                "name": {
                  "type": "string",
                  "description": "Field group name (max 255 characters)"
                },
                "description": {
                  "type": "string",
                  "description": "Field group description (max 255 characters)"
                },
                "attributes": {
                  "type": "object",
                  "description": "Field group attributes containing:",
                  "properties": {
                    "target_object": {
                      "type": "string",
                      "description": "Field group object type string, one of:\n        - \"PROJECT\"\n        - \"SUPPLIER_COMPANY\"\n        - \"RFP\""
                    },
                    "name": {
                      "type": "string",
                      "description": "Field group name (max 255 characters)"
                    }
                  },
                  "required": [
                    "name",
                    "target_object"
                  ]
                }
              },
              "required": [
                "attributes",
                "description",
                "fields",
                "id",
                "name",
                "type"
              ]
            }
          },
          "required": [
            "id",
            "options"
          ]
        }
      },
      "delete_field_group_by_id": {
        "name": "delete_field_group_by_id",
        "description": "Deletes a specific field group from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the field group to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_custom_fields": {
        "name": "list_custom_fields",
        "description": "Returns a list of custom fields for the specified criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "object",
              "description": "A dictionary containing field attributes and their desired values for filtering.\nIf None, returns all fields. Supported filters:",
              "properties": {
                "group_id_equals": {
                  "type": "string",
                  "description": "ID of the group for which fields should be selected"
                },
                "target_object_equals": {
                  "type": "string",
                  "description": "Find custom fields by target class name"
                }
              },
              "required": [
                "group_id_equals",
                "target_object_equals"
              ]
            }
          }
        }
      },
      "create_custom_field": {
        "name": "create_custom_field",
        "description": "Create a field with given parameters.\n\nFor fields with target_object set to RFP, group relationship should be omitted. It is required to specify the relationship for all other target objects.",
        "parameters": {
          "type": "object",
          "properties": {
            "new_id": {
              "type": "string",
              "description": "The unique identifier for the new field. If not provided, the system will generate a new ID."
            },
            "options": {
              "type": "object",
              "description": "A dictionary containing the field configuration options. Can contain any of the following fields:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Field type"
                },
                "group": {
                  "type": "string",
                  "description": "Field group identifier string"
                },
                "name": {
                  "type": "string",
                  "description": "Field name (max 255 characters)"
                },
                "attributes": {
                  "type": "object",
                  "description": "Field attributes containing:",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Field name (max 255 characters)"
                    },
                    "target_object": {
                      "type": "string",
                      "description": "Field object type, one of:\n        - \"PROJECT\"\n        - \"RFP\"\n        - \"SUPPLIER_COMPANY\""
                    },
                    "type_description": {
                      "type": "string",
                      "description": "Internal name and meaning of each field, one of:\n        - \"Checkbox\"\n        - \"File\"\n        - \"Short Text\"\n        - \"Paragraph\"\n        - \"Date\"\n        - \"Integer\"\n        - \"Currency\"\n        - \"Decimal\"\n        - \"Single Select\"\n        - \"Multiple Select\"\n        - \"URL\"\n        - \"Lookup\"\n        - \"Related\""
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Identifies whether the field is required"
                    }
                  },
                  "required": [
                    "name",
                    "required",
                    "target_object",
                    "type_description"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Field relationship containing:",
                  "properties": {
                    "group": {
                      "type": "object",
                      "description": "Reference to the field group where the field belongs to\n        Note: Must be null for fields with target_object set to RFP, and required for all other fields"
                    }
                  },
                  "required": [
                    "group"
                  ]
                }
              },
              "required": [
                "attributes",
                "group",
                "name",
                "relationships",
                "type"
              ]
            }
          }
        }
      },
      "list_supplier_company_segmentations": {
        "name": "list_supplier_company_segmentations",
        "description": "Returns a list of supplier company segmentations.\n\nThis function retrieves all supplier company segmentation definitions,\nincluding label, order, and slug metadata used for categorization or\nfiltering of supplier companies.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_supplier_company_segmentation": {
        "name": "create_supplier_company_segmentation",
        "description": "Creates a new supplier company segmentation.\n\nThis function registers a new segmentation category used to organize supplier\ncompanies within the platform. The segmentation is defined by a label, display order,\nand optional slug for programmatic reference.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "description": "Required. Display label for the segmentation (\u2264 255 characters)."
                },
                "order": {
                  "type": "integer",
                  "description": "Required. UI display ordering index."
                },
                "slug": {
                  "type": "object",
                  "description": "Optional programmatic identifier (\u2264 255 characters)."
                }
              },
              "description": "Payload defining the segmentation details.",
              "required": [
                "label",
                "order"
              ]
            }
          }
        }
      },
      "get_supplier_contact_by_external_id": {
        "name": "get_supplier_contact_by_external_id",
        "description": "Retrieves the details of an existing supplier contact by external ID.\n\nThis function returns the full resource representation of a supplier contact\nidentified by its external ID, with optional inclusion of related entities.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. Unique external identifier of the supplier contact.\nExample: \"CNT-17\""
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"supplier_company\"\n- \"contact_types\"\n- \"phones\""
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_supplier_contact_by_external_id": {
        "name": "update_supplier_contact_by_external_id",
        "description": "Updates the details of an existing supplier contact using the external ID.\n\nThe function modifies a supplier contact\u2019s attributes and relationships such as contact types\nand phone numbers, identified via the external ID. The request body must include the contact's\ninternal `id`, which must match the contact's actual identifier in the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. Unique external identifier of the supplier contact.\nExample: \"CNT-17\""
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"supplier_company\"\n- \"contact_types\"\n- \"phones\""
            },
            "body": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {},
                  "description": ""
                },
                "type": {
                  "type": "string",
                  "description": "Required. Must be \"supplier_contacts\"."
                },
                "id": {
                  "type": "integer",
                  "description": "Required. Must match the internal ID of the contact being updated."
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required unless both `first_name` and `last_name` are given. Full name (\u2264 255 chars)."
                    },
                    "first_name": {
                      "type": "object",
                      "description": "First name (\u2264 255 chars)."
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Last name (\u2264 255 chars)."
                    },
                    "email": {
                      "type": "string",
                      "description": "Required. Email address (\u2264 255 chars)."
                    },
                    "notes": {
                      "type": "object",
                      "description": "Optional notes related to the contact."
                    },
                    "phone_number": {
                      "type": "object",
                      "description": "Deprecated. Prefer using `phones` relationship."
                    },
                    "job_title": {
                      "type": "object",
                      "description": "Job title of the contact."
                    },
                    "external_id": {
                      "type": "object",
                      "description": "External ID of the contact."
                    },
                    "is_suggested": {
                      "type": "object",
                      "description": "Indicates if the contact was suggested and not yet approved."
                    }
                  },
                  "description": "",
                  "required": [
                    "email",
                    "name"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "contact_types": {
                      "type": "object",
                      "description": "- data: List[{ id (int), type (str) }]"
                    },
                    "phones": {
                      "type": "object",
                      "description": "- data: List[{ id (int), type (str) }]"
                    }
                  },
                  "description": ""
                }
              },
              "description": "Payload with updated supplier contact details.",
              "required": [
                "attributes",
                "data",
                "id",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_supplier_contact_by_external_id": {
        "name": "delete_supplier_contact_by_external_id",
        "description": "Deletes a supplier contact using the external identifier.\n\nThis function permanently removes the specified supplier contact identified by\nits external ID from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. The unique external identifier of the supplier contact.\nExample: \"CNT-17\""
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_contact_type_by_id": {
        "name": "update_contact_type_by_id",
        "description": "Updates the details of an existing contact type.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the contact type to update."
            },
            "body": {
              "type": "object",
              "description": "A dictionary containing the updated properties for\nthe contact type. The dictionary must include:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"contact_types\""
                },
                "id": {
                  "type": "integer",
                  "description": "Contact type identifier"
                },
                "external_id": {
                  "type": "string",
                  "description": "Contact type external identifier (max 255 characters)"
                },
                "name": {
                  "type": "string",
                  "description": "Contact type name (max 255 characters)"
                }
              },
              "required": [
                "external_id",
                "id",
                "name",
                "type"
              ]
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_contact_type_by_id": {
        "name": "delete_contact_type_by_id",
        "description": "Deletes a contact type from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the contact type to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_supplier_companies": {
        "name": "list_supplier_companies",
        "description": "Retrieves a list of supplier companies matching the specified filters and options.\n\nSupports filtering, pagination, and compound document formatting via the `include` parameter to reduce multiple requests.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "object",
              "properties": {},
              "description": "Filter supplier companies by criteria. One filter per attribute."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include.\n- Enum: \"attachments\", \"supplier_category\", \"supplier_groups\", \"default_payment_term\",\n\"payment_types\", \"default_payment_type\", \"payment_currencies\",\n\"default_payment_currency\", \"supplier_classification_values\""
            },
            "page": {
              "type": "object",
              "properties": {},
              "description": "Pagination config."
            }
          }
        }
      },
      "create_supplier_company": {
        "name": "create_supplier_company",
        "description": "Creates a new supplier company with specified attributes, linked resources, and optional custom fields.\n\nSupports internal and external ID references via `external_` prefixes for relationships. Allows compound creation via `include` parameter to return related resources in one request.",
        "parameters": {
          "type": "object",
          "properties": {
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\n- Enum: \"attachments\", \"supplier_category\", \"supplier_groups\", \"default_payment_term\",\n\"payment_types\", \"default_payment_type\", \"payment_currencies\",\n\"default_payment_currency\", \"supplier_classification_values\""
            },
            "body": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Must be \"supplier_companies\"."
                },
                "attributes": {
                  "type": "object",
                  "description": "It can contain the following keys:",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required. Supplier company name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional. Company description."
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Optional. Whether the company is public."
                    },
                    "risk": {
                      "type": "string",
                      "description": "Optional. Risk classification (slug)."
                    },
                    "segmentation": {
                      "type": "string",
                      "description": "Optional. Segmentation type (slug)."
                    },
                    "segmentation_status": {
                      "type": "string",
                      "description": "Optional. Segmentation status (slug)."
                    },
                    "segmentation_notes": {
                      "type": "string",
                      "description": "Optional. Notes for segmentation."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional. Associated tags."
                    },
                    "url": {
                      "type": "string",
                      "description": "Optional. Supplier website."
                    },
                    "duns_number": {
                      "type": "string",
                      "description": "Optional. D-U-N-S\u00ae number."
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Optional. Internal database ID."
                    },
                    "self_registered": {
                      "type": "boolean",
                      "description": "Optional. Whether supplier self-registered."
                    },
                    "onboarding_form_completion_status": {
                      "type": "string",
                      "description": "Optional. Onboarding status.\n        - Enum: null, \"not_started\", \"in_progress\", \"completed\""
                    },
                    "accept_all_currencies": {
                      "type": "boolean",
                      "description": "Optional. Accepts all currencies."
                    },
                    "custom_fields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Field name."
                          },
                          "value": {
                            "type": "object",
                            "description": "Field value."
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "description": "Optional. List of custom fields."
                    }
                  },
                  "required": [
                    "accept_all_currencies",
                    "custom_fields",
                    "description",
                    "duns_number",
                    "external_id",
                    "name",
                    "onboarding_form_completion_status",
                    "public",
                    "risk",
                    "segmentation",
                    "segmentation_notes",
                    "segmentation_status",
                    "self_registered",
                    "tags",
                    "url"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {},
                  "description": "Resource links (optional).\n    - supplier_category\n    - supplier_groups\n    - default_payment_term\n    - payment_types\n    - default_payment_type\n    - payment_currencies\n    - default_payment_currency\n    - attachments\n    - supplier_classification_values"
                }
              },
              "description": "Supplier company payload.",
              "required": [
                "attributes",
                "relationships",
                "type"
              ]
            }
          }
        }
      },
      "get_scim_service_provider_config": {
        "name": "get_scim_service_provider_config",
        "description": "Retrieves the SCIM service provider configuration, describing supported features and capabilities.\n\nThis endpoint returns metadata about the SCIM implementation, including patch, filter, bulk, authentication schemes, and more, as specified in Section 5 of RFC 7643.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_field_options": {
        "name": "create_field_options",
        "description": "Creates a new field option with given parameters..",
        "parameters": {
          "type": "object",
          "properties": {
            "new_id": {
              "type": "string",
              "description": "The field ID to associate the options with. If not provided, the field ID will be generated."
            },
            "options": {
              "type": "object",
              "description": "A list of options to be associated with the field."
            }
          }
        }
      },
      "list_contract_awards": {
        "name": "list_contract_awards",
        "description": "Retrieves a list of all contract awards in the Workday Strategic Sourcing system.\n\nThis function returns all available contract awards, providing comprehensive\ninformation about each award including their associated data and configurations.\nThe function enables complete visibility into all awards and their current status.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_contract_award_by_id": {
        "name": "get_contract_award_by_id",
        "description": "Retrieves detailed information about a specific contract award.\n\nThis function returns comprehensive information about a contract award,\nincluding all its associated data and configurations. The function provides\ncomplete visibility into award details and associated metrics.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the award to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_contract_award_line_items": {
        "name": "list_contract_award_line_items",
        "description": "Retrieves a list of line items associated with a specific contract award.\n\nThis function returns all line items that are linked to the specified award ID,\nallowing for detailed analysis of award components and their associated data.\nThe line items provide granular information about the award's components.",
        "parameters": {
          "type": "object",
          "properties": {
            "award_id": {
              "type": "integer",
              "description": "The unique identifier of the award for which to retrieve\nline items."
            }
          },
          "required": [
            "award_id"
          ]
        }
      },
      "get_contract_award_line_item_by_id": {
        "name": "get_contract_award_line_item_by_id",
        "description": "Retrieves detailed information about a specific award line item.\n\nThis function returns comprehensive information about a contract award line\nitem, including all its associated data and configurations. The function\nprovides complete visibility into line item details and associated metrics.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the award line item to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_field_details_by_id": {
        "name": "get_field_details_by_id",
        "description": "Retrieves the details of an existing field using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the field to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_field_details_by_id": {
        "name": "update_field_details_by_id",
        "description": "Updates the details of an existing field using its internal identifier.\n\nPlease note, that request body must include an id attribute with the value of your field unique identifier,the same one you passed as argument.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the field to update."
            },
            "options": {
              "type": "object",
              "description": "A dictionary containing the field properties to update.\nMust include an 'id' field matching the path parameter.\nContains any of the following fields:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Field type"
                },
                "group": {
                  "type": "string",
                  "description": "Field group identifier string"
                },
                "name": {
                  "type": "string",
                  "description": "Field name (max 255 characters)"
                },
                "attributes": {
                  "type": "object",
                  "description": "Field attributes containing:",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Field name (max 255 characters)"
                    },
                    "target_object": {
                      "type": "string",
                      "description": "Field object type, one of:\n            - \"PROJECT\"\n            - \"RFP\"\n            - \"SUPPLIER_COMPANY\""
                    },
                    "type_description": {
                      "type": "string",
                      "description": "Internal name and meaning of each field, one of:\n            - \"Checkbox\"\n            - \"File\"\n            - \"Short Text\"\n            - \"Paragraph\"\n            - \"Date\"\n            - \"Integer\"\n            - \"Currency\"\n            - \"Decimal\"\n            - \"Single Select\"\n            - \"Multiple Select\"\n            - \"URL\"\n            - \"Lookup\"\n            - \"Related\""
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Identifies whether the field is required"
                    }
                  },
                  "required": [
                    "name",
                    "required",
                    "target_object",
                    "type_description"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Field relationship containing:",
                  "properties": {
                    "group": {
                      "type": "object",
                      "description": "Reference to the field group where the field belongs to\n            Note: Must be null for fields with target_object set to RFP, and required for all other fields"
                    }
                  },
                  "required": [
                    "group"
                  ]
                }
              },
              "required": [
                "attributes",
                "group",
                "name",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "id",
            "options"
          ]
        }
      },
      "delete_field_by_id": {
        "name": "delete_field_by_id",
        "description": "Deletes a field using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the field to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_event_templates": {
        "name": "list_event_templates",
        "description": "Returns a list of all event templates.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_event_template_by_id": {
        "name": "get_event_template_by_id",
        "description": "Retrieves the details of an existing event template by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the event template to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_field_groups": {
        "name": "list_field_groups",
        "description": "Returns a list of field groups.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_field_group": {
        "name": "create_field_group",
        "description": "Creates a new field group with the specified parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the field group to be created."
            },
            "description": {
              "type": "string",
              "description": "A detailed description of the field group.\nDefaults to an empty string."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the field group configuration options. Can contain any of the following fields:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"field_groups\""
                },
                "name": {
                  "type": "string",
                  "description": "Field group name (max 255 characters)"
                },
                "fields": {
                  "type": "object",
                  "description": "List of fields belonging to this group"
                },
                "attributes": {
                  "type": "object",
                  "description": "Field group attributes containing:",
                  "properties": {
                    "target_object": {
                      "type": "string",
                      "description": "Field group object type string, one of:\n        - \"PROJECT\"\n        - \"SUPPLIER_COMPANY\"\n        - \"RFP\""
                    },
                    "name": {
                      "type": "string",
                      "description": "Field group name (max 255 characters)"
                    }
                  },
                  "required": [
                    "name",
                    "target_object"
                  ]
                }
              },
              "required": [
                "attributes",
                "fields",
                "name",
                "type"
              ]
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_event_worksheet_by_id": {
        "name": "get_event_worksheet_by_id",
        "description": "Retrieves the details of an existing worksheet. You need to supply the unique worksheet identifier that was returned upon worksheet creation.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the worksheet belongs."
            },
            "id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to retrieve."
            }
          },
          "required": [
            "event_id",
            "id"
          ]
        }
      },
      "update_payment_type_by_external_id": {
        "name": "update_payment_type_by_external_id",
        "description": "Updates the details of an existing payment type using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the payment type to update."
            },
            "name": {
              "type": "string",
              "description": "The new name for the payment type."
            },
            "payment_method": {
              "type": "string",
              "description": "The new payment method. One of: \"Direct Deposit\", \"Check\", \"EFT\", \"Cash\", \"Credit Card\", \"Wire\", \"Manual\", \"Direct Debit\", \"PayPal\", \"EFT with Reference\""
            }
          },
          "required": [
            "external_id",
            "name"
          ]
        }
      },
      "delete_payment_type_by_external_id": {
        "name": "delete_payment_type_by_external_id",
        "description": "Deletes a payment type using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the payment type to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "get_supplier_company_contact_by_id": {
        "name": "get_supplier_company_contact_by_id",
        "description": "Retrieves the details of an existing supplier company contact.\n\nThis function locates a specific contact using both the company ID and contact ID,\nthen returns the complete contact details with optional related resource inclusion.",
        "parameters": {
          "type": "object",
          "properties": {
            "company_id": {
              "type": "integer",
              "description": "The unique identifier of the supplier company.\nThis is the internal ID used by the system to reference the company."
            },
            "contact_id": {
              "type": "integer",
              "description": "The unique identifier of the contact.\nThis is the internal ID used by the system to reference the contact."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include\nin the response. Not fully implemented in simulation."
            }
          },
          "required": [
            "company_id",
            "contact_id"
          ]
        }
      },
      "update_supplier_company_contact_by_id": {
        "name": "update_supplier_company_contact_by_id",
        "description": "Updates the details of an existing supplier company contact.\n\nThis function allows modification of contact information by providing updated\nvalues for specific fields. The contact is identified by both company ID and\ncontact ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "company_id": {
              "type": "integer",
              "description": "The unique identifier of the supplier company.\nThis is the internal ID used by the system to reference the company."
            },
            "contact_id": {
              "type": "integer",
              "description": "The unique identifier of the contact.\nThis is the internal ID used by the system to reference the contact."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include\nin the response. Not fully implemented in simulation."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The contact's full name"
                },
                "email": {
                  "type": "string",
                  "description": "The contact's email address"
                },
                "phone": {
                  "type": "string",
                  "description": "The contact's phone number"
                },
                "role": {
                  "type": "string",
                  "description": "The contact's role in the company"
                },
                "status": {
                  "type": "string",
                  "description": "The contact's status"
                }
              },
              "description": "Dictionary containing the fields to update.\nRequired fields:\n- At least one field to update\nOptional fields:",
              "required": [
                "email",
                "name",
                "phone",
                "role",
                "status"
              ]
            }
          },
          "required": [
            "company_id",
            "contact_id"
          ]
        }
      },
      "delete_supplier_company_contact_by_id": {
        "name": "delete_supplier_company_contact_by_id",
        "description": "Deletes a supplier company contact.\n\nThis function removes a specific contact from the system using both the company ID\nand contact ID for identification.",
        "parameters": {
          "type": "object",
          "properties": {
            "company_id": {
              "type": "integer",
              "description": "The unique identifier of the supplier company.\nThis is the internal ID used by the system to reference the company."
            },
            "contact_id": {
              "type": "integer",
              "description": "The unique identifier of the contact.\nThis is the internal ID used by the system to reference the contact."
            }
          },
          "required": [
            "company_id",
            "contact_id"
          ]
        }
      },
      "add_supplier_companies_to_event_by_internal_id": {
        "name": "add_supplier_companies_to_event_by_internal_id",
        "description": "Add suppliers to an event. Only events of type RFP are supported.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which suppliers\nwill be added."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier information, including:",
              "properties": {
                "supplier_ids": {
                  "type": "array",
                  "description": "A list of supplier IDs to be added to the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_companies\""
                }
              },
              "required": [
                "supplier_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_id"
          ]
        }
      },
      "remove_supplier_companies_from_event_by_internal_id": {
        "name": "remove_supplier_companies_from_event_by_internal_id",
        "description": "Remove suppliers from an event. Only events of type RFP are supported.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event from which suppliers\nwill be removed."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier information, including:",
              "properties": {
                "supplier_ids": {
                  "type": "array",
                  "description": "A list of supplier IDs to be removed from the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_companies\""
                }
              },
              "required": [
                "supplier_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_id"
          ]
        }
      },
      "list_bid_line_items_for_bid": {
        "name": "list_bid_line_items_for_bid",
        "description": "Returns a list of line items associated with a specific bid.\n\nThis function returns all line items that are linked to the specified bid ID,\nallowing for detailed analysis of bid components and their associated data.",
        "parameters": {
          "type": "object",
          "properties": {
            "bid_id": {
              "type": "integer",
              "description": "The unique identifier of the bid for which to retrieve line items."
            }
          },
          "required": [
            "bid_id"
          ]
        }
      },
      "list_performance_review_report_entries": {
        "name": "list_performance_review_report_entries",
        "description": "Retrieves a list of performance review report entries.\n\nReturns detailed performance review report data in a paginated format. Each entry contains attributes related to a performance review. Use pagination links to iterate through results.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_performance_review_report_schema": {
        "name": "get_performance_review_report_schema",
        "description": "Retrieves the schema for the performance review report.\n\nThe schema defines the structure of performance review report entries, including field types and names. This is useful for dynamically building forms, validating input, or rendering reports.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_project_type_by_id": {
        "name": "get_project_type_by_id",
        "description": "Retrieves detailed information about a specific project type using its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identifier of the project type."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_supplier_company_contacts_by_company_external_id": {
        "name": "list_supplier_company_contacts_by_company_external_id",
        "description": "Retrieves a list of contacts for a specific supplier company.\n\nThis function returns supplier contacts associated with a given supplier company ID.\nSupports detailed filtering, relationship includes, and pagination options.",
        "parameters": {
          "type": "object",
          "properties": {
            "company_id": {
              "type": "integer",
              "description": "Required. Unique identifier of the supplier company.\nExample: 1"
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"supplier_company\"\n- \"contact_types\"\n- \"phones\""
            },
            "filter": {
              "type": "object",
              "properties": {
                "updated_at_from": {
                  "type": "string",
                  "description": "Return contacts updated on or after this timestamp."
                },
                "updated_at_to": {
                  "type": "string",
                  "description": "Return contacts updated on or before this timestamp."
                }
              },
              "description": "Dictionary of filter parameters to narrow down contact results.\nSupported filters include:",
              "required": [
                "updated_at_from",
                "updated_at_to"
              ]
            }
          },
          "required": [
            "company_id"
          ]
        }
      },
      "list_scim_schemas": {
        "name": "list_scim_schemas",
        "description": "Retrieves the list of supported SCIM schemas and their attribute definitions.\n\nThis endpoint provides metadata about each schema in use, including its attributes and constraints. Refer to Section 3.4 of RFC 7644 for schema discovery guidance.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_scim_user_by_id": {
        "name": "get_scim_user_by_id",
        "description": "Retrieves the details of a single user by SCIM resource ID.\n\nThis endpoint conforms to SCIM 2.0 RFC 7644 Section 3.4.1, returning user metadata,\ncore attributes, and optional related roles or identifiers.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique SCIM identifier of the user to retrieve."
            },
            "attributes": {
              "type": "string",
              "description": "Optional comma-separated list of attributes to return in the response.\nAllowed:\n- \"userName\"\n- \"name.familyName\"\n- \"name.givenName\"\n- \"roles\"\n- \"roles.value\"\n- \"externalId\"\n- \"active\"\n- \"meta.lastModified\"\n- \"meta.created\""
            },
            "filter": {
              "type": "string",
              "description": "Optional filter to apply to the user search.\nCurrently not implemented."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "partially_update_scim_user_by_id": {
        "name": "partially_update_scim_user_by_id",
        "description": "Applies partial updates to a User resource using a sequence of SCIM-compliant patch operations.\n\nThis endpoint supports `add`, `remove`, and `replace` operations as described in RFC 7644 Section 3.5.2.\nCommon use cases include changing the user's name, deactivating accounts, or updating metadata.\n\nNote:\n    - Users cannot deactivate their own account (403).\n    - Changes to `userName` require both the original and target domains to match those configured in the company SSO setup.\n    - All PATCH operations must conform to SCIM and system-specific constraints.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique SCIM identifier of the user to patch."
            },
            "body": {
              "type": "object",
              "properties": {
                "schemas": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "SCIM schema identifiers. Must include SCIM PATCH schema URI."
                },
                "Operations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "op": {
                        "type": "string",
                        "description": "Type of operation.\n        - Enum: \"add\", \"remove\", \"replace\""
                      },
                      "path": {
                        "type": "string",
                        "description": "SCIM path to the attribute being modified. Required for \"remove\"."
                      },
                      "value": {
                        "type": "object",
                        "description": "Value to assign or append. Can be a primitive or nested structure."
                      }
                    },
                    "required": [
                      "op",
                      "value"
                    ]
                  },
                  "description": "A list of operations to apply."
                }
              },
              "description": "A dictionary containing the patch operations, conforming to SCIM schema.\nIt must contain the following keys:",
              "required": [
                "Operations",
                "schemas"
              ]
            }
          },
          "required": [
            "body",
            "id"
          ]
        }
      },
      "replace_scim_user_by_id": {
        "name": "replace_scim_user_by_id",
        "description": "Replaces all updatable attributes of a User resource as per RFC 7644 Section 3.5.1.\n\nThis operation replaces only the attributes provided in the request payload, leaving any others intact.\nUsers cannot deactivate themselves or modify their email domain unless it's compliant with configured SSO rules.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique SCIM identifier of the user to update."
            },
            "body": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Optional client-defined external identifier."
                },
                "userName": {
                  "type": "string",
                  "description": "Required. User's email address. Must match configured SSO domain for updates."
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "givenName": {
                      "type": "string",
                      "description": "Required. User\u2019s first name."
                    },
                    "familyName": {
                      "type": "string",
                      "description": "Required. User\u2019s last name."
                    }
                  },
                  "description": "",
                  "required": [
                    "familyName",
                    "givenName"
                  ]
                },
                "active": {
                  "type": "boolean",
                  "description": "Optional. Whether the user account is active."
                }
              },
              "description": "A dictionary containing the user attributes to update.",
              "required": [
                "active",
                "externalId",
                "name",
                "userName"
              ]
            }
          },
          "required": [
            "body",
            "id"
          ]
        }
      },
      "deactivate_scim_user_by_id": {
        "name": "deactivate_scim_user_by_id",
        "description": "Deactivates a user by their unique identifier.\n\nThis operation marks the user as inactive. The core logic to prevent self-deactivation\n(which would result in a 403 error) or to handle a non-existent user (404 error)\nis assumed to be part of the broader system or interactions with the 'db' object.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique SCIM user identifier of the user to deactivate."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_project_milestone_report_entries": {
        "name": "list_project_milestone_report_entries",
        "description": "Retrieves a list of project milestone report entries.\n\nEach milestone entry provides details related to project milestones.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_project_milestone_report_schema": {
        "name": "get_project_milestone_report_schema",
        "description": "Retrieves the schema definition for project milestone reports.\n\nThis endpoint provides metadata describing the fields available in project milestone reporting. Useful for dynamically rendering forms or parsing report data.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "update_payment_currency_by_external_id": {
        "name": "update_payment_currency_by_external_id",
        "description": "Updates the details of an existing payment currency using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the currency to update."
            },
            "alpha": {
              "type": "string",
              "description": "The new three-letter currency code (e.g., USD, EUR)."
            },
            "numeric": {
              "type": "string",
              "description": "The new numeric currency code."
            }
          },
          "required": [
            "alpha",
            "external_id",
            "numeric"
          ]
        }
      },
      "delete_payment_currency_by_external_id": {
        "name": "delete_payment_currency_by_external_id",
        "description": "Deletes a payment currency using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the currency to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "list_contact_types": {
        "name": "list_contact_types",
        "description": "Retrieves a list of all contact types in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_contact_type": {
        "name": "create_contact_type",
        "description": "Creates a new contact type with the specified parameters.\n\nThis function allows for the creation of a new contact type in the system\nwith the provided configuration and properties. The function validates the\ninput and ensures all required fields are present.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "description": "A dictionary containing the properties and\nconfiguration for the new contact type. The dictionary should\ninclude:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"contact_types\""
                },
                "external_id": {
                  "type": "string",
                  "description": "Contact type external identifier (max 255 characters)"
                },
                "name": {
                  "type": "string",
                  "description": "Contact type name (max 255 characters)"
                }
              },
              "required": [
                "external_id",
                "name",
                "type"
              ]
            }
          }
        }
      },
      "update_field_options_by_id": {
        "name": "update_field_options_by_id",
        "description": "Update a field options with given parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier of the field option to update."
            },
            "new_options": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "A list of new options to set for the field option."
            }
          },
          "required": [
            "id",
            "new_options"
          ]
        }
      },
      "delete_field_options_by_id": {
        "name": "delete_field_options_by_id",
        "description": "Deletes a field option from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the field option to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_savings_report_entries": {
        "name": "list_savings_report_entries",
        "description": "Retrieves a list of savings report entries.\n\nReturns all savings-related entries available to the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_savings_report_schema": {
        "name": "get_savings_report_schema",
        "description": "Retrieves the schema definition for the savings report.\n\nThe schema provides a list of fields and their types used in the savings report entries. This is useful for understanding the expected structure and available data fields when creating or interpreting report entries.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_event_report_entries": {
        "name": "list_event_report_entries",
        "description": "Retrieves a list of event report entries.\n\nEvent report entries contain detailed records of events captured within the system. These can include audit events, workflow triggers, system updates, etc. The response is paginated and supports traversal through `next` and `prev` links.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_event_report_entries_by_report_id": {
        "name": "get_event_report_entries_by_report_id",
        "description": "Retrieves a list of event report entries for a specific event report.\n\nThis endpoint provides detailed entries linked to a single event report, identified by `event_report_id`. It is useful for retrieving scoped data related to a specific event. The response is paginated.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_report_id": {
              "type": "integer",
              "description": "Unique identifier for the event report to retrieve entries from."
            }
          },
          "required": [
            "event_report_id"
          ]
        }
      },
      "list_user_owned_event_report_entries": {
        "name": "list_user_owned_event_report_entries",
        "description": "Retrieves a list of event report entries owned by the user.\n\n**Deprecated**: This endpoint is only supported in API version 2018-04-01 and has been deprecated as of 2019-01-01. It returns report entries specific to the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_event_report_schema": {
        "name": "get_event_report_schema",
        "description": "Retrieves the schema definition for event report entries.\n\nThis schema provides metadata about the fields available in event report entries, including their names and data types. It can be used to dynamically interpret and render event report data.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_scim_schema_by_uri": {
        "name": "get_scim_schema_by_uri",
        "description": "Retrieves a specific SCIM schema by its URI.\n\nThis endpoint provides the structure and metadata for a SCIM resource type, including all attributes and constraints, as defined by the schema URI (e.g., User, Group).",
        "parameters": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "description": "Schema URI identifying the SCIM resource type.\n- Example: \"urn:ietf:params:scim:schemas:core:2.0:User\""
            }
          },
          "required": [
            "uri"
          ]
        }
      },
      "list_event_worksheets": {
        "name": "list_event_worksheets",
        "description": "Returns a list of all worksheets.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the worksheets belong."
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "add_supplier_contacts_to_event_by_internal_id": {
        "name": "add_supplier_contacts_to_event_by_internal_id",
        "description": "Adds supplier contacts to a specific event. Only events of type RFP are supported.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which supplier\ncontacts will be added."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier contact information,\nincluding:",
              "properties": {
                "supplier_contact_ids": {
                  "type": "array",
                  "description": "A list of supplier contact IDs to be\n    added to the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_contacts\""
                }
              },
              "required": [
                "supplier_contact_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_id"
          ]
        }
      },
      "remove_supplier_contacts_from_event_by_internal_id": {
        "name": "remove_supplier_contacts_from_event_by_internal_id",
        "description": "Remove suppliers from an event using supplier contacts. Only events of type RFP are supported.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event from which supplier\ncontacts will be removed."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier contact information,\nincluding:",
              "properties": {
                "supplier_contact_ids": {
                  "type": "array",
                  "description": "A list of supplier contact IDs to be\n    removed from the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_contacts\""
                }
              },
              "required": [
                "supplier_contact_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_id"
          ]
        }
      },
      "list_contracts": {
        "name": "list_contracts",
        "description": "Retrieve a list of contracts based on specified criteria.\n\nThis function supports filtering, relationship inclusion, and pagination of contracts.\nContracts can be filtered based on any attribute present in the contract object.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "object",
              "description": "Dictionary containing filter criteria for contracts. Supported filters:",
              "properties": {
                "updated_at_from": {
                  "type": "string",
                  "description": "Return contracts updated on or after timestamp"
                },
                "updated_at_to": {
                  "type": "string",
                  "description": "Return contracts updated on or before timestamp"
                },
                "number_from": {
                  "type": "string",
                  "description": "Find contracts with number >= specified"
                },
                "number_to": {
                  "type": "string",
                  "description": "Find contracts with number <= specified"
                },
                "title_contains": {
                  "type": "string",
                  "description": "Return contracts with title containing string"
                },
                "title_not_contains": {
                  "type": "string",
                  "description": "Return contracts with title not containing string"
                },
                "description_contains": {
                  "type": "string",
                  "description": "Return contracts with description containing string"
                },
                "description_not_contains": {
                  "type": "string",
                  "description": "Return contracts with description not containing string"
                },
                "external_id_empty": {
                  "type": "boolean",
                  "description": "Return contracts with blank external_id"
                },
                "external_id_not_empty": {
                  "type": "boolean",
                  "description": "Return contracts with non-blank external_id"
                },
                "external_id_equals": {
                  "type": "string",
                  "description": "Find contracts by specific external ID"
                },
                "external_id_not_equals": {
                  "type": "string",
                  "description": "Find contracts excluding specified external ID"
                },
                "actual_start_date_from": {
                  "type": "string",
                  "description": "Return contracts started on or after date"
                },
                "actual_start_date_to": {
                  "type": "string",
                  "description": "Return contracts started on or before date"
                },
                "actual_end_date_from": {
                  "type": "string",
                  "description": "Return contracts ended on or after date"
                },
                "actual_end_date_to": {
                  "type": "string",
                  "description": "Return contracts ended on or before date"
                },
                "actual_spend_amount_from": {
                  "type": "number",
                  "description": "Return contracts with spend >= amount"
                },
                "actual_spend_amount_to": {
                  "type": "number",
                  "description": "Return contracts with spend <= amount"
                },
                "auto_renewal": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Auto-renewal mode (\"yes\", \"no\", \"evergreen\")"
                },
                "needs_attention_equals": {
                  "type": "boolean",
                  "description": "Return contracts with specified needs attention status"
                },
                "needs_attention_not_equals": {
                  "type": "boolean",
                  "description": "Return contracts with needs attention status not equal"
                },
                "renew_number_of_times_from": {
                  "type": "integer",
                  "description": "Find contracts renewing >= specified times"
                },
                "renew_number_of_times_to": {
                  "type": "integer",
                  "description": "Find contracts renewing <= specified times"
                },
                "state_equals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Find contracts with specified states"
                },
                "terminated_note_contains": {
                  "type": "string",
                  "description": "Return contracts with termination note containing string"
                },
                "terminated_note_not_contains": {
                  "type": "string",
                  "description": "Return contracts with termination note not containing string"
                },
                "terminated_note_empty": {
                  "type": "string",
                  "description": "Return contracts with empty termination note"
                },
                "terminated_note_not_empty": {
                  "type": "string",
                  "description": "Return contracts with non-empty termination note"
                },
                "terminated_reason_contains": {
                  "type": "string",
                  "description": "Return contracts with termination reason containing string"
                },
                "terminated_reason_not_contains": {
                  "type": "string",
                  "description": "Return contracts with termination reason not containing string"
                },
                "terminated_reason_empty": {
                  "type": "string",
                  "description": "Return contracts with empty termination reason"
                },
                "terminated_reason_not_empty": {
                  "type": "string",
                  "description": "Return contracts with non-empty termination reason"
                },
                "contract_type_id_equals": {
                  "type": "integer",
                  "description": "Find contracts with specified contract type"
                },
                "contract_type_id_not_equals": {
                  "type": "integer",
                  "description": "Find contracts with different contract type"
                },
                "marked_as_needs_attention_at_from": {
                  "type": "string",
                  "description": "Find contracts marked needs attention after date"
                },
                "marked_as_needs_attention_at_to": {
                  "type": "string",
                  "description": "Find contracts marked needs attention before date"
                },
                "needs_attention_note_contains": {
                  "type": "string",
                  "description": "Return contracts with needs attention note containing string"
                },
                "needs_attention_note_not_contains": {
                  "type": "string",
                  "description": "Return contracts with needs attention note not containing string"
                },
                "needs_attention_note_empty": {
                  "type": "string",
                  "description": "Return contracts with empty needs attention note"
                },
                "needs_attention_note_not_empty": {
                  "type": "string",
                  "description": "Return contracts with non-empty needs attention note"
                },
                "needs_attention_reason_contains": {
                  "type": "string",
                  "description": "Return contracts with needs attention reason containing string"
                },
                "needs_attention_reason_not_contains": {
                  "type": "string",
                  "description": "Return contracts with needs attention reason not containing string"
                },
                "needs_attention_reason_empty": {
                  "type": "string",
                  "description": "Return contracts with empty needs attention reason"
                },
                "needs_attention_reason_not_empty": {
                  "type": "string",
                  "description": "Return contracts with non-empty needs attention reason"
                },
                "renewal_termination_notice_date_from": {
                  "type": "string",
                  "description": "Find contracts with termination notice date >= specified"
                },
                "renewal_termination_notice_date_to": {
                  "type": "string",
                  "description": "Find contracts with termination notice date <= specified"
                },
                "renewal_termination_reminder_date_from": {
                  "type": "string",
                  "description": "Find contracts with termination reminder date >= specified"
                },
                "renewal_termination_reminder_date_to": {
                  "type": "string",
                  "description": "Find contracts with termination reminder date <= specified"
                },
                "spend_category_id_equals": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Find contracts using specified Spend Category IDs"
                }
              },
              "required": [
                "actual_end_date_from",
                "actual_end_date_to",
                "actual_spend_amount_from",
                "actual_spend_amount_to",
                "actual_start_date_from",
                "actual_start_date_to",
                "auto_renewal",
                "contract_type_id_equals",
                "contract_type_id_not_equals",
                "description_contains",
                "description_not_contains",
                "external_id_empty",
                "external_id_equals",
                "external_id_not_empty",
                "external_id_not_equals",
                "marked_as_needs_attention_at_from",
                "marked_as_needs_attention_at_to",
                "needs_attention_equals",
                "needs_attention_not_equals",
                "needs_attention_note_contains",
                "needs_attention_note_empty",
                "needs_attention_note_not_contains",
                "needs_attention_note_not_empty",
                "needs_attention_reason_contains",
                "needs_attention_reason_empty",
                "needs_attention_reason_not_contains",
                "needs_attention_reason_not_empty",
                "number_from",
                "number_to",
                "renew_number_of_times_from",
                "renew_number_of_times_to",
                "renewal_termination_notice_date_from",
                "renewal_termination_notice_date_to",
                "renewal_termination_reminder_date_from",
                "renewal_termination_reminder_date_to",
                "spend_category_id_equals",
                "state_equals",
                "terminated_note_contains",
                "terminated_note_empty",
                "terminated_note_not_contains",
                "terminated_note_not_empty",
                "terminated_reason_contains",
                "terminated_reason_empty",
                "terminated_reason_not_contains",
                "terminated_reason_not_empty",
                "title_contains",
                "title_not_contains",
                "updated_at_from",
                "updated_at_to"
              ]
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of relationships to include in response.\nSupported values: \"contract_type\", \"spend_category\", \"supplier_company\", \n\"docusign_envelopes\", \"adobe_sign_agreements\""
            },
            "page": {
              "type": "object",
              "description": "Dictionary containing pagination parameters:",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "Number of results per page (default: 10, max: 100)"
                }
              },
              "required": [
                "size"
              ]
            }
          }
        }
      },
      "create_contract": {
        "name": "create_contract",
        "description": "Create a new contract with the specified attributes.",
        "parameters": {
          "type": "object",
          "properties": {
            "_include": {
              "type": "string",
              "description": "Comma-separated list of relationships to include\nin the response. \nSupported values: \"contract_type\", \"spend_category\", \"supplier_company\", \"docusign_envelopes\", \"adobe_sign_agreements\""
            },
            "body": {
              "type": "object",
              "description": "Dictionary containing contract creation data. Contains any of the following keys:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Required. Object type"
                },
                "supplier_id": {
                  "type": "string",
                  "description": "Supplier identifier"
                },
                "start_date": {
                  "type": "string",
                  "description": "Contract start date"
                },
                "end_date": {
                  "type": "string",
                  "description": "Contract end date"
                },
                "external_id": {
                  "type": "string",
                  "description": "External contract identifier"
                },
                "attributes": {
                  "type": "object",
                  "description": "Required. Contract attributes containing:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Required. Contract title (max 255 characters)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional. Contract description"
                    },
                    "state": {
                      "type": "string",
                      "description": "Required. Current contract state, one of:\n        - \"draft\"\n        - \"requested\"\n        - \"in_progress\"\n        - \"out_for_approval\"\n        - \"approved\"\n        - \"active\"\n        - \"expired\"\n        - \"terminated\""
                    },
                    "state_label": {
                      "type": "string",
                      "description": "Optional. Customer-specific contract state label"
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Optional. Customer provided unique contract identifier"
                    },
                    "actual_start_date": {
                      "type": "string",
                      "description": "Optional. Contract start date"
                    },
                    "actual_end_date": {
                      "type": "string",
                      "description": "Optional. Contract end date"
                    },
                    "actual_spend_amount": {
                      "type": "number",
                      "description": "Optional. Actual spend amount"
                    },
                    "auto_renewal": {
                      "type": "string",
                      "description": "Optional. Auto-renewal mode, one of:\n        - \"yes\"\n        - \"no\"\n        - \"evergreen\""
                    },
                    "marked_as_needs_attention_at": {
                      "type": "string",
                      "description": "Optional. Date when contract was flagged as needs attention"
                    },
                    "needs_attention": {
                      "type": "boolean",
                      "description": "Optional. Whether contract needs attention"
                    },
                    "needs_attention_note": {
                      "type": "string",
                      "description": "Optional. Notes on why contract needs attention"
                    },
                    "needs_attention_reason": {
                      "type": "string",
                      "description": "Optional. Reason why contract needs attention"
                    },
                    "renew_number_of_times": {
                      "type": "integer",
                      "description": "Optional. Number of times contract should be renewed"
                    },
                    "renewal_term_unit": {
                      "type": "string",
                      "description": "Optional. Term unit for renewals, one of:\n        - \"days\"\n        - \"weeks\"\n        - \"months\"\n        - \"years\""
                    },
                    "renewal_term_value": {
                      "type": "integer",
                      "description": "Optional. Number of term units between renewals"
                    },
                    "renewal_termination_notice_unit": {
                      "type": "string",
                      "description": "Optional. Term unit for termination notice"
                    },
                    "renewal_termination_notice_value": {
                      "type": "integer",
                      "description": "Optional. Term units before end date for notice"
                    },
                    "renewal_termination_reminder_unit": {
                      "type": "string",
                      "description": "Optional. Term unit for termination reminder"
                    },
                    "renewal_termination_reminder_value": {
                      "type": "integer",
                      "description": "Optional. Term units before notice for reminder"
                    },
                    "terminated_note": {
                      "type": "string",
                      "description": "Optional. Termination notes"
                    },
                    "terminated_reason": {
                      "type": "string",
                      "description": "Optional. Termination reason"
                    },
                    "custom_fields": {
                      "type": "array",
                      "description": "Optional. Custom field values"
                    },
                    "approval_rounds": {
                      "type": "integer",
                      "description": "Optional. Times contract has been sent for approval"
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Optional. Public visibility of contract"
                    }
                  },
                  "required": [
                    "actual_end_date",
                    "actual_spend_amount",
                    "actual_start_date",
                    "approval_rounds",
                    "auto_renewal",
                    "custom_fields",
                    "description",
                    "external_id",
                    "marked_as_needs_attention_at",
                    "needs_attention",
                    "needs_attention_note",
                    "needs_attention_reason",
                    "public",
                    "renew_number_of_times",
                    "renewal_term_unit",
                    "renewal_term_value",
                    "renewal_termination_notice_unit",
                    "renewal_termination_notice_value",
                    "renewal_termination_reminder_unit",
                    "renewal_termination_reminder_value",
                    "state",
                    "state_label",
                    "terminated_note",
                    "terminated_reason",
                    "title"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Required. Contract relationships containing:",
                  "properties": {
                    "owner": {
                      "type": "object",
                      "description": "Required. Contract owner with:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Required. Object type"
                        },
                        "id": {
                          "type": "integer",
                          "description": "Required. Owner identifier"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    },
                    "supplier_company": {
                      "type": "object",
                      "description": "Required. Associated supplier company with:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Required. Always \"supplier_companies\""
                        },
                        "id": {
                          "type": "integer",
                          "description": "Required. Supplier company identifier"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    },
                    "contract_type": {
                      "type": "object",
                      "description": "Required. Contract type with:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Required. Always \"contract_types\""
                        },
                        "id": {
                          "type": "integer",
                          "description": "Required. Contract type identifier"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    },
                    "spend_category": {
                      "type": "object",
                      "description": "Optional. Spend category with:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Required. Always \"spend_categories\""
                        },
                        "id": {
                          "type": "integer",
                          "description": "Required. Spend category identifier"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    },
                    "payment_currency": {
                      "type": "object",
                      "description": "Optional. Payment currency with:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Required. Always \"payment_currencies\""
                        },
                        "id": {
                          "type": "integer",
                          "description": "Required. Payment currency identifier"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "contract_type",
                    "owner",
                    "payment_currency",
                    "spend_category",
                    "supplier_company"
                  ]
                }
              },
              "required": [
                "attributes",
                "end_date",
                "external_id",
                "relationships",
                "start_date",
                "supplier_id",
                "type"
              ]
            }
          }
        }
      },
      "get_contract_by_id": {
        "name": "get_contract_by_id",
        "description": "Retrieve details of a specific contract by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the contract to retrieve."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of relationships to include\nin the response. \nSupported values: \"contract_type\", \"spend_category\", \"supplier_company\", \"docusign_envelopes\", \"adobe_sign_agreements\""
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_contract_by_id": {
        "name": "update_contract_by_id",
        "description": "Update an existing contract by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the contract to update."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of relationships to include\nin the response.\nSupported values: \"contract_type\", \"spend_category\", \"supplier_company\", \"docusign_envelopes\", \"adobe_sign_agreements\""
            },
            "body": {
              "type": "object",
              "description": "Dictionary containing the fields to update. Includes any of the following keys:",
              "properties": {
                "type": {
                  "type": "object",
                  "description": "Object type"
                },
                "id": {
                  "type": "object",
                  "description": "Contract identifier string"
                },
                "supplier_id": {
                  "type": "string",
                  "description": "Supplier identifier"
                },
                "start_date": {
                  "type": "string",
                  "description": "Contract start date"
                },
                "end_date": {
                  "type": "string",
                  "description": "Contract end date"
                },
                "external_id": {
                  "type": "string",
                  "description": "External contract identifier"
                },
                "attributes": {
                  "type": "object",
                  "description": "Contract attributes containing:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Contract title (max 255 characters)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Contract description"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current contract state (\"draft\", \"requested\", \"in_progress\", \"out_for_approval\", \"approved\", \"active\", \"expired\", \"terminated\")"
                    },
                    "state_label": {
                      "type": "string",
                      "description": "Customer-specific contract state label"
                    },
                    "number": {
                      "type": "integer",
                      "description": "Contract number, generated sequentially"
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Customer provided unique contract identifier"
                    },
                    "actual_start_date": {
                      "type": "string",
                      "description": "Contract start date"
                    },
                    "actual_end_date": {
                      "type": "string",
                      "description": "Contract end date"
                    },
                    "actual_spend_amount": {
                      "type": "number",
                      "description": "Actual spend amount"
                    },
                    "auto_renewal": {
                      "type": "string",
                      "description": "Auto-renewal mode (\"yes\", \"no\", \"evergreen\")"
                    },
                    "marked_as_needs_attention_at": {
                      "type": "string",
                      "description": "Date and time when contract was flagged as needs attention"
                    },
                    "needs_attention": {
                      "type": "boolean",
                      "description": "Whether contract needs attention"
                    },
                    "needs_attention_note": {
                      "type": "string",
                      "description": "Notes on why contract needs attention"
                    },
                    "needs_attention_reason": {
                      "type": "string",
                      "description": "Reason why contract needs attention"
                    },
                    "renew_number_of_times": {
                      "type": "integer",
                      "description": "Number of times contract should be renewed"
                    },
                    "renewal_term_unit": {
                      "type": "string",
                      "description": "Term unit for renewals (\"days\", \"weeks\", \"months\", \"years\")"
                    },
                    "renewal_term_value": {
                      "type": "integer",
                      "description": "Number of term units between renewals"
                    },
                    "renewal_termination_notice_date": {
                      "type": "string",
                      "description": "Date for termination notice"
                    },
                    "renewal_termination_notice_unit": {
                      "type": "string",
                      "description": "Term unit for termination notice"
                    },
                    "renewal_termination_notice_value": {
                      "type": "integer",
                      "description": "Term units before end date for notice"
                    },
                    "renewal_termination_reminder_date": {
                      "type": "string",
                      "description": "Date for termination reminder"
                    },
                    "renewal_termination_reminder_unit": {
                      "type": "string",
                      "description": "Term unit for termination reminder"
                    },
                    "renewal_termination_reminder_value": {
                      "type": "integer",
                      "description": "Term units before notice for reminder"
                    },
                    "terminated_note": {
                      "type": "string",
                      "description": "Termination notes"
                    },
                    "terminated_reason": {
                      "type": "string",
                      "description": "Termination reason"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Last modification date"
                    },
                    "custom_fields": {
                      "type": "array",
                      "description": "Custom field values"
                    },
                    "approved_at": {
                      "type": "string",
                      "description": "Date and time of contract approval"
                    },
                    "approval_rounds": {
                      "type": "integer",
                      "description": "Times contract has been sent for approval"
                    },
                    "first_sent_for_approval_at": {
                      "type": "string",
                      "description": "First approval request date"
                    },
                    "sent_for_approval_at": {
                      "type": "string",
                      "description": "Last approval request date"
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Public visibility of contract"
                    }
                  },
                  "required": [
                    "actual_end_date",
                    "actual_spend_amount",
                    "actual_start_date",
                    "approval_rounds",
                    "approved_at",
                    "auto_renewal",
                    "custom_fields",
                    "description",
                    "external_id",
                    "first_sent_for_approval_at",
                    "marked_as_needs_attention_at",
                    "needs_attention",
                    "needs_attention_note",
                    "needs_attention_reason",
                    "number",
                    "public",
                    "renew_number_of_times",
                    "renewal_term_unit",
                    "renewal_term_value",
                    "renewal_termination_notice_date",
                    "renewal_termination_notice_unit",
                    "renewal_termination_notice_value",
                    "renewal_termination_reminder_date",
                    "renewal_termination_reminder_unit",
                    "renewal_termination_reminder_value",
                    "sent_for_approval_at",
                    "state",
                    "state_label",
                    "terminated_note",
                    "terminated_reason",
                    "title",
                    "updated_at"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Contract relationships containing:",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "description": "Contract attachments"
                    },
                    "supplier_company": {
                      "type": "object",
                      "description": "Associated supplier company"
                    },
                    "creator": {
                      "type": "object",
                      "description": "Contract creator"
                    },
                    "owner": {
                      "type": "object",
                      "description": "Contract owner"
                    },
                    "docusign_envelopes": {
                      "type": "array",
                      "description": "Docusign envelopes"
                    },
                    "adobe_sign_agreements": {
                      "type": "array",
                      "description": "Adobe Sign agreements"
                    },
                    "contract_type": {
                      "type": "object",
                      "description": "Contract type"
                    },
                    "spend_category": {
                      "type": "object",
                      "description": "Spend category"
                    }
                  },
                  "required": [
                    "adobe_sign_agreements",
                    "attachments",
                    "contract_type",
                    "creator",
                    "docusign_envelopes",
                    "owner",
                    "spend_category",
                    "supplier_company"
                  ]
                }
              },
              "required": [
                "attributes",
                "end_date",
                "external_id",
                "id",
                "relationships",
                "start_date",
                "supplier_id",
                "type"
              ]
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_contract_by_id": {
        "name": "delete_contract_by_id",
        "description": "Delete a contract by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the contract to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_contract_by_external_id": {
        "name": "get_contract_by_external_id",
        "description": "Retrieve details of a specific contract by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the contract to retrieve."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of relationships to include\nin the response.\nSupported values: \"contract_type\", \"spend_category\", \"supplier_company\", \"docusign_envelopes\", \"adobe_sign_agreements\""
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_contract_by_external_id": {
        "name": "update_contract_by_external_id",
        "description": "Update an existing contract by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the contract to update."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of relationships to include\nin the response.\nSupported values: \"contract_type\", \"spend_category\", \"supplier_company\", \"docusign_envelopes\", \"adobe_sign_agreements\""
            },
            "body": {
              "type": "object",
              "description": "Dictionary containing the fields to update. Must include:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type"
                },
                "id": {
                  "type": "integer",
                  "description": "Contract identifier string"
                },
                "supplier_id": {
                  "type": "string",
                  "description": "Supplier identifier"
                },
                "start_date": {
                  "type": "string",
                  "description": "Contract start date"
                },
                "end_date": {
                  "type": "string",
                  "description": "Contract end date"
                },
                "external_id": {
                  "type": "string",
                  "description": "External contract identifier"
                },
                "attributes": {
                  "type": "object",
                  "description": "Contract attributes containing:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Contract title (max 255 characters)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Contract description"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current contract state (\"draft\", \"requested\", \"in_progress\", \"out_for_approval\", \"approved\", \"active\", \"expired\", \"terminated\")"
                    },
                    "state_label": {
                      "type": "string",
                      "description": "Customer-specific contract state label"
                    },
                    "number": {
                      "type": "integer",
                      "description": "Contract number, generated sequentially"
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Customer provided unique contract identifier"
                    },
                    "actual_start_date": {
                      "type": "string",
                      "description": "Contract start date"
                    },
                    "actual_end_date": {
                      "type": "string",
                      "description": "Contract end date"
                    },
                    "actual_spend_amount": {
                      "type": "number",
                      "description": "Actual spend amount"
                    },
                    "auto_renewal": {
                      "type": "string",
                      "description": "Auto-renewal mode (\"yes\", \"no\", \"evergreen\")"
                    },
                    "marked_as_needs_attention_at": {
                      "type": "string",
                      "description": "Date and time when contract was flagged as needs attention"
                    },
                    "needs_attention": {
                      "type": "boolean",
                      "description": "Whether contract needs attention"
                    },
                    "needs_attention_note": {
                      "type": "string",
                      "description": "Notes on why contract needs attention"
                    },
                    "needs_attention_reason": {
                      "type": "string",
                      "description": "Reason why contract needs attention"
                    },
                    "renew_number_of_times": {
                      "type": "integer",
                      "description": "Number of times contract should be renewed"
                    },
                    "renewal_term_unit": {
                      "type": "string",
                      "description": "Term unit for renewals (\"days\", \"weeks\", \"months\", \"years\")"
                    },
                    "renewal_term_value": {
                      "type": "integer",
                      "description": "Number of term units between renewals"
                    },
                    "renewal_termination_notice_date": {
                      "type": "string",
                      "description": "Date for termination notice"
                    },
                    "renewal_termination_notice_unit": {
                      "type": "string",
                      "description": "Term unit for termination notice"
                    },
                    "renewal_termination_notice_value": {
                      "type": "integer",
                      "description": "Term units before end date for notice"
                    },
                    "renewal_termination_reminder_date": {
                      "type": "string",
                      "description": "Date for termination reminder"
                    },
                    "renewal_termination_reminder_unit": {
                      "type": "string",
                      "description": "Term unit for termination reminder"
                    },
                    "renewal_termination_reminder_value": {
                      "type": "integer",
                      "description": "Term units before notice for reminder"
                    },
                    "terminated_note": {
                      "type": "string",
                      "description": "Termination notes"
                    },
                    "terminated_reason": {
                      "type": "string",
                      "description": "Termination reason"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Last modification date"
                    },
                    "custom_fields": {
                      "type": "array",
                      "description": "Custom field values"
                    },
                    "approved_at": {
                      "type": "string",
                      "description": "Date and time of contract approval"
                    },
                    "approval_rounds": {
                      "type": "integer",
                      "description": "Times contract has been sent for approval"
                    },
                    "first_sent_for_approval_at": {
                      "type": "string",
                      "description": "First approval request date"
                    },
                    "sent_for_approval_at": {
                      "type": "string",
                      "description": "Last approval request date"
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Public visibility of contract"
                    }
                  },
                  "required": [
                    "actual_end_date",
                    "actual_spend_amount",
                    "actual_start_date",
                    "approval_rounds",
                    "approved_at",
                    "auto_renewal",
                    "custom_fields",
                    "description",
                    "external_id",
                    "first_sent_for_approval_at",
                    "marked_as_needs_attention_at",
                    "needs_attention",
                    "needs_attention_note",
                    "needs_attention_reason",
                    "number",
                    "public",
                    "renew_number_of_times",
                    "renewal_term_unit",
                    "renewal_term_value",
                    "renewal_termination_notice_date",
                    "renewal_termination_notice_unit",
                    "renewal_termination_notice_value",
                    "renewal_termination_reminder_date",
                    "renewal_termination_reminder_unit",
                    "renewal_termination_reminder_value",
                    "sent_for_approval_at",
                    "state",
                    "state_label",
                    "terminated_note",
                    "terminated_reason",
                    "title",
                    "updated_at"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Contract relationships containing:",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "description": "Contract attachments"
                    },
                    "supplier_company": {
                      "type": "object",
                      "description": "Associated supplier company"
                    },
                    "creator": {
                      "type": "object",
                      "description": "Contract creator"
                    },
                    "owner": {
                      "type": "object",
                      "description": "Contract owner"
                    },
                    "docusign_envelopes": {
                      "type": "array",
                      "description": "Docusign envelopes"
                    },
                    "adobe_sign_agreements": {
                      "type": "array",
                      "description": "Adobe Sign agreements"
                    },
                    "contract_type": {
                      "type": "object",
                      "description": "Contract type"
                    },
                    "spend_category": {
                      "type": "object",
                      "description": "Spend category"
                    }
                  },
                  "required": [
                    "adobe_sign_agreements",
                    "attachments",
                    "contract_type",
                    "creator",
                    "docusign_envelopes",
                    "owner",
                    "spend_category",
                    "supplier_company"
                  ]
                }
              },
              "required": [
                "attributes",
                "end_date",
                "external_id",
                "id",
                "relationships",
                "start_date",
                "supplier_id",
                "type"
              ]
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_contract_by_external_id": {
        "name": "delete_contract_by_external_id",
        "description": "Delete a contract by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the contract to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "get_contract_fields_description": {
        "name": "get_contract_fields_description",
        "description": "Retrieve a list of all available fields for the contract object.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_contract_types": {
        "name": "list_contract_types",
        "description": "Retrieve a list of all available contract types.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_contract_type": {
        "name": "create_contract_type",
        "description": "Create a new contract type.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "description": "Dictionary containing contract type creation data. Can contain any of the following keys:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"contract_types\""
                },
                "name": {
                  "type": "string",
                  "description": "Name of the contract type"
                },
                "external_id": {
                  "type": "string",
                  "description": "External contract type identifier"
                }
              },
              "required": [
                "external_id",
                "name",
                "type"
              ]
            }
          }
        }
      },
      "get_contract_type_by_id": {
        "name": "get_contract_type_by_id",
        "description": "Retrieve details of a specific contract type by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the contract type to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_contract_type_by_id": {
        "name": "update_contract_type_by_id",
        "description": "Update an existing contract type by its internal ID. ",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the contract type to update."
            },
            "body": {
              "type": "object",
              "description": "Dictionary containing the fields to update. Must include:",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Must match the id parameter in the URL"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"contract_types\""
                },
                "name": {
                  "type": "string",
                  "description": "Name of the contract type"
                },
                "external_id": {
                  "type": "string",
                  "description": "External contract type identifier"
                }
              },
              "required": [
                "external_id",
                "id",
                "name",
                "type"
              ]
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_contract_type_by_id": {
        "name": "delete_contract_type_by_id",
        "description": "Delete a contract type by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the contract type to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_contract_type_by_external_id": {
        "name": "get_contract_type_by_external_id",
        "description": "Retrieve details of a specific contract type by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the contract type to retrieve."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_contract_type_by_external_id": {
        "name": "update_contract_type_by_external_id",
        "description": "Update an existing contract type by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the contract type to update."
            },
            "body": {
              "type": "object",
              "description": "Dictionary containing the fields to update. Must include:",
              "properties": {
                "external_id": {
                  "type": "string",
                  "description": "External contract type identifier"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"contract_types\""
                },
                "name": {
                  "type": "string",
                  "description": "Name of the contract type"
                }
              },
              "required": [
                "external_id",
                "external_id",
                "name",
                "type"
              ]
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_contract_type_by_external_id": {
        "name": "delete_contract_type_by_external_id",
        "description": "Delete a contract type by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the contract type to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_contact_type_by_external_id": {
        "name": "update_contact_type_by_external_id",
        "description": "Updates the details of an existing contact type using its external ID.\n\nThis function allows for the modification of an existing contact type's properties\nby searching for it using its external identifier. It performs validation checks\nto ensure the update is valid and the contact type exists before applying the\nchanges. The function supports partial updates of contact type properties.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The unique external identifier of the contact type to update."
            },
            "body": {
              "type": "object",
              "description": "A dictionary containing the updated properties for\nthe contact type. The dictionary must include:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"contact_types\""
                },
                "id": {
                  "type": "integer",
                  "description": "Contact type identifier"
                },
                "external_id": {
                  "type": "string",
                  "description": "Contact type external identifier (max 255 characters)"
                },
                "name": {
                  "type": "string",
                  "description": "Contact type name (max 255 characters)"
                }
              },
              "required": [
                "external_id",
                "id",
                "name",
                "type"
              ]
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_contact_type_by_external_id": {
        "name": "delete_contact_type_by_external_id",
        "description": "Deletes a contact type from the system using its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The unique external identifier of the contact type to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "list_contract_milestone_report_entries": {
        "name": "list_contract_milestone_report_entries",
        "description": "Retrieves a list of contract milestone report entries.\n\nReturns paginated milestone entries submitted under contract reports. Used for tracking progress or performance milestones across contracts.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_contract_milestone_report_schema": {
        "name": "get_contract_milestone_report_schema",
        "description": "Retrieves the contract milestone report schema.\n\nThe schema defines the structure and expected data types for each field in a contract milestone report entry. \nThis information is useful for dynamically generating forms, validating input, or formatting report data.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "update_payment_currency_by_id": {
        "name": "update_payment_currency_by_id",
        "description": "Updates the details of an existing payment currency using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the currency to update."
            },
            "alpha": {
              "type": "string",
              "description": "The new three-letter currency code (e.g., USD, EUR)."
            },
            "numeric": {
              "type": "string",
              "description": "The new numeric currency code."
            },
            "external_id": {
              "type": "string",
              "description": "The new external identifier for the currency."
            }
          },
          "required": [
            "alpha",
            "id",
            "numeric"
          ]
        }
      },
      "delete_payment_currency_by_id": {
        "name": "delete_payment_currency_by_id",
        "description": "Deletes a payment currency using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the currency to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_payment_types": {
        "name": "list_payment_types",
        "description": "Retrieves a list of all available payment types in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_payment_type": {
        "name": "create_payment_type",
        "description": "Create a payment type with given parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the payment type (e.g., \"Credit Card\", \"Bank Transfer\")."
            },
            "payment_method": {
              "type": "string",
              "description": "The method of payment (e.g., \"card\", \"transfer\")."
            },
            "external_id": {
              "type": "string",
              "description": "An external identifier for the payment type."
            }
          },
          "required": [
            "name",
            "payment_method"
          ]
        }
      },
      "add_supplier_contacts_to_event_by_external_ids": {
        "name": "add_supplier_contacts_to_event_by_external_ids",
        "description": "Add suppliers to an event using supplier contacts. Only events of type RFP are supported. You must supply the unique event external identifier (the one you used when created the event). You must supply the external identifiers of the supplier contacts too. The operation will be rolled back upon any failure, and invitations won't be sent. For best performance, we recommend inviting 10 or less supplier contacts in a single request.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_external_id": {
              "type": "string",
              "description": "The unique external identifier of the event to which suppliers will be added."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier contact information, including:",
              "properties": {
                "supplier_contact_external_ids": {
                  "type": "array",
                  "description": "A list of supplier contact external IDs to be added to the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_contacts\""
                }
              },
              "required": [
                "supplier_contact_external_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_external_id"
          ]
        }
      },
      "remove_supplier_contacts_from_event_by_external_ids": {
        "name": "remove_supplier_contacts_from_event_by_external_ids",
        "description": "Remove suppliers from an event using supplier contacts. Only events of type RFP are supported. You must supply the unique event external identifier (the one you used when created the event). You must supply the external identifiers of the supplier contacts too. The operation will be rolled back upon any failure, and invitations won't be removed. For best performance, we recommend removing 10 or less supplier contacts in a single request.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_external_id": {
              "type": "string",
              "description": "The unique external identifier of the event from which supplier contacts will be removed."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier contact information, including:",
              "properties": {
                "supplier_contact_external_ids": {
                  "type": "array",
                  "description": "A list of supplier contact external IDs to be removed from the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_contacts\""
                }
              },
              "required": [
                "supplier_contact_external_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_external_id"
          ]
        }
      },
      "get_supplier_company_contacts_by_external_id": {
        "name": "get_supplier_company_contacts_by_external_id",
        "description": "Retrieves contacts associated with a supplier company by external identifier.\n\nThis function returns all contacts for a specific supplier company and optionally\nfilters them based on provided criteria. The external ID must match the one used\nwhen the company was created.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. External identifier of the supplier company.\nExample: \"COMP-001\""
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include.\nCurrently not fully implemented."
            },
            "filter": {
              "type": "object",
              "properties": {},
              "description": "Optional filter criteria to apply to contacts.\nEach key-value pair in the dictionary will be used to filter contacts."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "get_spend_category_details_by_external_id": {
        "name": "get_spend_category_details_by_external_id",
        "description": "Retrieves the details of an existing spend category using its internal identifier.\n\nInternal IDs allow referencing spend categories directly in the database. This is useful for internal operations and direct database access.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Internal identifier of the spend category."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_spend_category_details_by_external_id": {
        "name": "update_spend_category_details_by_external_id",
        "description": "Updates the details of an existing spend category using its internal identifier.\n\nThe internal ID must match the one provided in the URL path. All parameters are optional and only the provided fields will be updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Internal identifier for the spend category to be updated."
            },
            "name": {
              "type": "string",
              "description": "Updated name (max 255 characters)."
            },
            "external_id": {
              "type": "string",
              "description": "New or same external identifier (max 255 characters)."
            },
            "usages": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Updated list of usages.\n- Enum: \"procurement\", \"expense\", \"ad_hoc_payment\", \"supplier_invoice\""
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_spend_category_by_external_id": {
        "name": "delete_spend_category_by_external_id",
        "description": "Deletes an existing spend category using its internal identifier.\n\nThe internal ID must match the one provided in the URL path.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Internal identifier of the spend category to be deleted."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_scim_resource_type_metadata_by_name": {
        "name": "get_scim_resource_type_metadata_by_name",
        "description": "Retrieves metadata for a specific SCIM resource type.\n\nThis endpoint provides the schema, endpoint path, and any extensions supported for a given SCIM resource (e.g., \"User\"). It returns a subset of the information available from the general `/ResourceTypes` endpoint, focusing on a single resource type.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "string",
              "description": "Name of the SCIM resource type.\n- Example: \"User\""
            }
          },
          "required": [
            "resource"
          ]
        }
      },
      "list_payment_terms": {
        "name": "list_payment_terms",
        "description": "Retrieves a list of all available payment terms in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_payment_term": {
        "name": "create_payment_term",
        "description": "Creates a new payment term entry in the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the payment term (e.g., \"Net 30\", \"Net 60\")."
            },
            "external_id": {
              "type": "string",
              "description": "An external identifier for the payment term."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "update_payment_type_by_id": {
        "name": "update_payment_type_by_id",
        "description": "Updates the details of an existing payment type using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the payment type to update."
            },
            "name": {
              "type": "string",
              "description": "The new name for the payment type."
            },
            "payment_method": {
              "type": "string",
              "description": "The new payment method. One of: \"Direct Deposit\", \"Check\", \"EFT\", \"Cash\", \"Credit Card\", \"Wire\", \"Manual\", \"Direct Debit\", \"PayPal\", \"EFT with Reference\""
            },
            "external_id": {
              "type": "string",
              "description": "The new external identifier for the payment type."
            }
          },
          "required": [
            "id",
            "name"
          ]
        }
      },
      "delete_payment_type_by_id": {
        "name": "delete_payment_type_by_id",
        "description": "Deletes a payment type using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the payment type to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "add_supplier_companies_to_event_by_external_id": {
        "name": "add_supplier_companies_to_event_by_external_id",
        "description": "Add suppliers to an event using external identifiers. Only events of type RFP are supported.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_external_id": {
              "type": "string",
              "description": "The unique external identifier of the event to\nwhich suppliers will be added."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier information, including:",
              "properties": {
                "supplier_external_ids": {
                  "type": "array",
                  "description": "A list of supplier external IDs to be\n    added to the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_companies\""
                }
              },
              "required": [
                "supplier_external_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_external_id"
          ]
        }
      },
      "remove_supplier_companies_from_event_by_external_id": {
        "name": "remove_supplier_companies_from_event_by_external_id",
        "description": "Removes supplier companies from a specific event using external identifiers. Only events of type RFP are supported.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_external_id": {
              "type": "string",
              "description": "The unique external identifier of the event from\nwhich suppliers will be removed."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the supplier information, including:",
              "properties": {
                "supplier_external_ids": {
                  "type": "array",
                  "description": "A list of supplier external IDs to be\n    removed from the event"
                },
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"supplier_companies\""
                }
              },
              "required": [
                "supplier_external_ids",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_external_id"
          ]
        }
      },
      "get_contract_report_entries": {
        "name": "get_contract_report_entries",
        "description": "Retrieves a list of contract report entries.\n\nContract reports are aggregated data entries related to contract performance, values, timelines, or milestones.\nThis endpoint returns all available contract report entries in a simple list format.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_contract_report_schema": {
        "name": "get_contract_report_schema",
        "description": "Retrieves the schema definition for contract report entries.\n\nThe schema outlines the available fields, their types, and how data is structured within contract reports. \nThis information is useful for dynamically interpreting or building UIs and integrations based on contract data fields.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_events_with_filters": {
        "name": "list_events_with_filters",
        "description": "Returns a list of events for the specified criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "object",
              "description": "Dictionary containing filter criteria where keys are\nevent attributes and values are the desired values to match. Supported filters:",
              "properties": {
                "updated_at_from": {
                  "type": "string",
                  "description": "Return events updated on or after timestamp"
                },
                "updated_at_to": {
                  "type": "string",
                  "description": "Return events updated on or before timestamp"
                },
                "title_contains": {
                  "type": "string",
                  "description": "Return events with title containing string"
                },
                "title_not_contains": {
                  "type": "string",
                  "description": "Return events with title not containing string"
                },
                "spend_category_id_equals": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Find events using specified Spend Category IDs"
                },
                "state_equals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Find events with specified states (\"draft\", \"scheduled\", \"published\", \"live_editing\", \"closed\", \"canceled\")"
                },
                "event_type_equals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Find events with specified types (\"RFP\", \"AUCTION\", \"AUCTION_WITH_LOTS\", \"AUCTION_LOT\", \"PERFORMANCE_REVIEW_EVENT\", \"PERFORMANCE_REVIEW_SCORE_CARD_ONLY_EVENT\", \"SUPPLIER_REVIEW_EVENT\", \"SUPPLIER_REVIEW_MASTER_EVENT\")"
                },
                "request_type_equals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Find events with specified request types"
                },
                "supplier_rsvp_deadline_from": {
                  "type": "string",
                  "description": "Return events with RSVP deadline on or after date"
                },
                "supplier_rsvp_deadline_to": {
                  "type": "string",
                  "description": "Return events with RSVP deadline on or before date"
                },
                "supplier_rsvp_deadline_empty": {
                  "type": "boolean",
                  "description": "Return events with RSVP deadline not set"
                },
                "supplier_rsvp_deadline_not_empty": {
                  "type": "boolean",
                  "description": "Return events with RSVP deadline set"
                },
                "supplier_question_deadline_from": {
                  "type": "string",
                  "description": "Return events with questions deadline on or after date"
                },
                "supplier_question_deadline_to": {
                  "type": "string",
                  "description": "Return events with questions deadline on or before date"
                },
                "supplier_question_deadline_empty": {
                  "type": "boolean",
                  "description": "Return events with questions deadline not set"
                },
                "supplier_question_deadline_not_empty": {
                  "type": "boolean",
                  "description": "Return events with questions deadline set"
                },
                "bid_submission_deadline_from": {
                  "type": "string",
                  "description": "Return events with bid deadline on or after date"
                },
                "bid_submission_deadline_to": {
                  "type": "string",
                  "description": "Return events with bid deadline on or before date"
                },
                "bid_submission_deadline_empty": {
                  "type": "boolean",
                  "description": "Return events with bid deadline not set"
                },
                "bid_submission_deadline_not_empty": {
                  "type": "boolean",
                  "description": "Return events with bid deadline set"
                },
                "created_at_from": {
                  "type": "string",
                  "description": "Return events created on or after timestamp"
                },
                "created_at_to": {
                  "type": "string",
                  "description": "Return events created on or before timestamp"
                },
                "published_at_from": {
                  "type": "string",
                  "description": "Return events published on or after timestamp"
                },
                "published_at_to": {
                  "type": "string",
                  "description": "Return events published on or before timestamp"
                },
                "published_at_empty": {
                  "type": "boolean",
                  "description": "Return events without published timestamp"
                },
                "published_at_not_empty": {
                  "type": "boolean",
                  "description": "Return events with published timestamp"
                },
                "closed_at_from": {
                  "type": "string",
                  "description": "Return events closed on or after timestamp"
                },
                "closed_at_to": {
                  "type": "string",
                  "description": "Return events closed on or before timestamp"
                },
                "closed_at_empty": {
                  "type": "boolean",
                  "description": "Return events without closed timestamp"
                },
                "closed_at_not_empty": {
                  "type": "boolean",
                  "description": "Return events with closed timestamp"
                },
                "spend_amount_from": {
                  "type": "number",
                  "description": "Return events with spend amount >= amount"
                },
                "spend_amount_to": {
                  "type": "number",
                  "description": "Return events with spend amount <= amount"
                },
                "spend_amount_empty": {
                  "type": "boolean",
                  "description": "Return events with spend amount not set"
                },
                "spend_amount_not_empty": {
                  "type": "boolean",
                  "description": "Return events with spend amount set"
                },
                "external_id_empty": {
                  "type": "boolean",
                  "description": "Return events with blank external_id"
                },
                "external_id_not_empty": {
                  "type": "boolean",
                  "description": "Return events with non-blank external_id"
                },
                "external_id_equals": {
                  "type": "string",
                  "description": "Find events by specific external ID"
                },
                "external_id_not_equals": {
                  "type": "string",
                  "description": "Find events excluding specified external ID"
                }
              },
              "required": [
                "bid_submission_deadline_empty",
                "bid_submission_deadline_from",
                "bid_submission_deadline_not_empty",
                "bid_submission_deadline_to",
                "closed_at_empty",
                "closed_at_from",
                "closed_at_not_empty",
                "closed_at_to",
                "created_at_from",
                "created_at_to",
                "event_type_equals",
                "external_id_empty",
                "external_id_equals",
                "external_id_not_empty",
                "external_id_not_equals",
                "published_at_empty",
                "published_at_from",
                "published_at_not_empty",
                "published_at_to",
                "request_type_equals",
                "spend_amount_empty",
                "spend_amount_from",
                "spend_amount_not_empty",
                "spend_amount_to",
                "spend_category_id_equals",
                "state_equals",
                "supplier_question_deadline_empty",
                "supplier_question_deadline_from",
                "supplier_question_deadline_not_empty",
                "supplier_question_deadline_to",
                "supplier_rsvp_deadline_empty",
                "supplier_rsvp_deadline_from",
                "supplier_rsvp_deadline_not_empty",
                "supplier_rsvp_deadline_to",
                "title_contains",
                "title_not_contains",
                "updated_at_from",
                "updated_at_to"
              ]
            },
            "page": {
              "type": "object",
              "description": "Dictionary containing pagination parameters:",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "Number of results per page (default: 10, max: 100)"
                }
              },
              "required": [
                "size"
              ]
            }
          }
        }
      },
      "create_event": {
        "name": "create_event",
        "description": "Create a new event.",
        "parameters": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "external_id": {
                  "type": "string",
                  "description": "Event identifier string"
                },
                "name": {
                  "type": "string",
                  "description": "Event name"
                },
                "type": {
                  "type": "string",
                  "description": "Event type enum (\"RFP\", \"AUCTION\", \"AUCTION_WITH_LOTS\", \"AUCTION_LOT\", \"PERFORMANCE_REVIEW_EVENT\", \"PERFORMANCE_REVIEW_SCORE_CARD_ONLY_EVENT\", \"SUPPLIER_REVIEW_EVENT\", \"SUPPLIER_REVIEW_MASTER_EVENT\")"
                },
                "suppliers": {
                  "type": "array",
                  "description": "List of suppliers"
                },
                "supplier_contacts": {
                  "type": "array",
                  "description": "List of supplier contacts"
                },
                "attributes": {
                  "type": "object",
                  "description": "Event attributes containing:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "An event title"
                    },
                    "event_type": {
                      "type": "string",
                      "description": "Event type enum (\"RFP\", \"AUCTION\", \"AUCTION_WITH_LOTS\", \"AUCTION_LOT\", \"PERFORMANCE_REVIEW_EVENT\", \"PERFORMANCE_REVIEW_SCORE_CARD_ONLY_EVENT\", \"SUPPLIER_REVIEW_EVENT\", \"SUPPLIER_REVIEW_MASTER_EVENT\")"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current event state enum (\"draft\", \"scheduled\", \"published\", \"live_editing\", \"closed\", \"canceled\")"
                    },
                    "duplication_state": {
                      "type": "string",
                      "description": "Event duplication state enum (\"scheduled\", \"started\", \"finished\", \"failed\")"
                    },
                    "spend_amount": {
                      "type": "number",
                      "description": "Actual spend amount"
                    },
                    "request_type": {
                      "type": "string",
                      "description": "Request type"
                    },
                    "late_bids": {
                      "type": "boolean",
                      "description": "Whether late bid submissions are allowed"
                    },
                    "revise_bids": {
                      "type": "boolean",
                      "description": "Whether suppliers can re-submit bids"
                    },
                    "instant_notifications": {
                      "type": "boolean",
                      "description": "Whether notifications are sent immediately"
                    },
                    "supplier_rsvp_deadline": {
                      "type": "string",
                      "description": "RSVP deadline date-time"
                    },
                    "supplier_question_deadline": {
                      "type": "string",
                      "description": "Questions deadline date-time"
                    },
                    "bid_submission_deadline": {
                      "type": "string",
                      "description": "Bid submission deadline date-time"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Creation date-time"
                    },
                    "closed_at": {
                      "type": "string",
                      "description": "Closing date-time"
                    },
                    "published_at": {
                      "type": "string",
                      "description": "Publication date-time"
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Event ID in internal database"
                    },
                    "is_public": {
                      "type": "boolean",
                      "description": "Whether event is accessible for self-registration"
                    },
                    "restricted": {
                      "type": "boolean",
                      "description": "Whether event is invitation only"
                    },
                    "custom_fields": {
                      "type": "array",
                      "description": "Custom field values"
                    }
                  },
                  "required": [
                    "bid_submission_deadline",
                    "closed_at",
                    "created_at",
                    "custom_fields",
                    "duplication_state",
                    "event_type",
                    "external_id",
                    "instant_notifications",
                    "is_public",
                    "late_bids",
                    "published_at",
                    "request_type",
                    "restricted",
                    "revise_bids",
                    "spend_amount",
                    "state",
                    "supplier_question_deadline",
                    "supplier_rsvp_deadline",
                    "title"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Event relationships containing:",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "description": "List of attachments"
                    },
                    "project": {
                      "type": "object",
                      "description": "Associated project"
                    },
                    "spend_category": {
                      "type": "object",
                      "description": "Associated spend category"
                    },
                    "event_template": {
                      "type": "object",
                      "description": "Used event template"
                    },
                    "commodity_codes": {
                      "type": "array",
                      "description": "List of commodity codes"
                    }
                  },
                  "required": [
                    "attachments",
                    "commodity_codes",
                    "event_template",
                    "project",
                    "spend_category"
                  ]
                }
              },
              "description": "Dictionary containing event creation data. Can contain any of the following keys:",
              "required": [
                "attributes",
                "external_id",
                "name",
                "relationships",
                "supplier_contacts",
                "suppliers",
                "type"
              ]
            }
          },
          "required": [
            "data"
          ]
        }
      },
      "get_event_by_id": {
        "name": "get_event_by_id",
        "description": "Retrieve details of a specific event.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier of the event to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_event_by_id": {
        "name": "update_event_by_id",
        "description": "Update an existing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier of the event to update."
            },
            "data": {
              "type": "object",
              "description": "Dictionary containing the fields to update. Must include:",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Event identifier string"
                },
                "type": {
                  "type": "string",
                  "description": "Event type enum (\"RFP\", \"AUCTION\", \"AUCTION_WITH_LOTS\", \"AUCTION_LOT\", \"PERFORMANCE_REVIEW_EVENT\", \"PERFORMANCE_REVIEW_SCORE_CARD_ONLY_EVENT\", \"SUPPLIER_REVIEW_EVENT\", \"SUPPLIER_REVIEW_MASTER_EVENT\")"
                },
                "attributes": {
                  "type": "object",
                  "description": "Event attributes containing:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "An event title"
                    },
                    "event_type": {
                      "type": "string",
                      "description": "Event type enum (\"RFP\", \"AUCTION\", \"AUCTION_WITH_LOTS\", \"AUCTION_LOT\", \"PERFORMANCE_REVIEW_EVENT\", \"PERFORMANCE_REVIEW_SCORE_CARD_ONLY_EVENT\", \"SUPPLIER_REVIEW_EVENT\", \"SUPPLIER_REVIEW_MASTER_EVENT\")"
                    },
                    "spend_amount": {
                      "type": "number",
                      "description": "Actual spend amount used to calculate savings and keep reporting up to date"
                    },
                    "late_bids": {
                      "type": "boolean",
                      "description": "Whether late bid submissions are allowed"
                    },
                    "revise_bids": {
                      "type": "boolean",
                      "description": "Whether suppliers are allowed to re-submit bids"
                    },
                    "instant_notifications": {
                      "type": "boolean",
                      "description": "When true, notification emails are sent immediately; when false, notifications are delivered every 3 hours in a digest form"
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Event ID in your internal database"
                    },
                    "restricted": {
                      "type": "boolean",
                      "description": "Whether event is invitation only even when posted on the public site"
                    },
                    "custom_fields": {
                      "type": "array",
                      "description": "Custom field values (note: custom fields of type File can only be accessed through the user interface, they will be exposed as null in the public API)"
                    }
                  },
                  "required": [
                    "custom_fields",
                    "event_type",
                    "external_id",
                    "instant_notifications",
                    "late_bids",
                    "restricted",
                    "revise_bids",
                    "spend_amount",
                    "title"
                  ]
                }
              },
              "required": [
                "attributes",
                "id",
                "id",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "id"
          ]
        }
      },
      "delete_event_by_id": {
        "name": "delete_event_by_id",
        "description": "Delete an event.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier of the event to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_supplier_review_report_entries": {
        "name": "list_supplier_review_report_entries",
        "description": "Returns a list of supplier review report entries.\n\nThis function retrieves all entries from the supplier review report. It supports pagination\nand includes metadata to navigate through result pages.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_supplier_review_report_schema": {
        "name": "get_supplier_review_report_schema",
        "description": "Returns the supplier review report schema.\n\nThis function retrieves the schema definition for supplier review reports. The schema\ndescribes the structure of review report entries, including the type and name of each field.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_bid_line_item_by_id": {
        "name": "get_bid_line_item_by_id",
        "description": "Retrieves the details of an existing bid line item.\n\nThis function locates a specific bid line item using its unique identifier\nand returns its complete details if found.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier of the bid line item to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_payment_currencies": {
        "name": "list_payment_currencies",
        "description": "Retrieves a list of all available payment currencies in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_payment_currency": {
        "name": "create_payment_currency",
        "description": "Creates a new payment currency entry in the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "alpha": {
              "type": "string",
              "description": "The three-letter currency code (e.g., USD, EUR)."
            },
            "numeric": {
              "type": "string",
              "description": "The numeric currency code."
            },
            "external_id": {
              "type": "string",
              "description": "An external identifier for the currency."
            }
          },
          "required": [
            "alpha",
            "numeric"
          ]
        }
      },
      "list_field_options_by_field_id": {
        "name": "list_field_options_by_field_id",
        "description": "Returns a list of field options for the specified field.",
        "parameters": {
          "type": "object",
          "properties": {
            "field_id": {
              "type": "string",
              "description": "The unique identifier of the field for which\nto retrieve options."
            }
          },
          "required": [
            "field_id"
          ]
        }
      },
      "list_awards_with_filters": {
        "name": "list_awards_with_filters",
        "description": "Retrieve a list of awards based on specified filter criteria.\n\nThis function supports filtering awards by their state and update timestamps.\nMultiple filters can be combined to narrow down the results.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter_state_equals": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of states to filter awards by.\nValid states include: \"draft\" \"confirmed\" \"awaiting_requisition_sync\" \"requisition_created\"."
            },
            "filter_updated_at_from": {
              "type": "string",
              "description": "Return awards updated on or after the specified timestamp.."
            },
            "filter_updated_at_to": {
              "type": "string",
              "description": "Return awards updated on or before the specified timestamp."
            }
          }
        }
      },
      "list_award_line_items_for_award": {
        "name": "list_award_line_items_for_award",
        "description": "Retrieve line items associated with a specific award.",
        "parameters": {
          "type": "object",
          "properties": {
            "award_id": {
              "type": "integer",
              "description": "The unique identifier of the award to retrieve line items for."
            },
            "filter_is_quoted_equals": {
              "type": "boolean",
              "description": "Filter line items by their quoted status.\nTrue for quoted items, False for non-quoted items."
            },
            "filter_line_item_type_equals": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Return awards line items with specified line item types.\nValid types include: \"STANDARD\", \"GOODS\", \"SERVICES\"."
            },
            "_include": {
              "type": "string",
              "description": "Use the _include parameter to request related resources along with the primary resource.\nSupported includes: \"supplier_company\", \"worksheet\"."
            }
          },
          "required": [
            "award_id"
          ]
        }
      },
      "get_award_line_item_by_id": {
        "name": "get_award_line_item_by_id",
        "description": "Retrieve details of a specific award line item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the award line item to retrieve."
            },
            "_include": {
              "type": "string",
              "description": "Use the _include parameter to request related resources along with the primary resource.\nSupported includes: \"supplier_company\", \"worksheet\"."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_payment_term_by_id": {
        "name": "update_payment_term_by_id",
        "description": "Updates the details of an existing payment term using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the payment term to update."
            },
            "name": {
              "type": "string",
              "description": "The name for the payment term."
            },
            "external_id": {
              "type": "string",
              "description": "The external identifier for the payment term."
            }
          },
          "required": [
            "id",
            "name"
          ]
        }
      },
      "delete_payment_term_by_id": {
        "name": "delete_payment_term_by_id",
        "description": "Deletes a payment term using its internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal identifier of the payment term to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_project_details_by_id": {
        "name": "get_project_details_by_id",
        "description": "Retrieves the details of a specific project using its unique internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the project to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_project_details_by_id": {
        "name": "update_project_details_by_id",
        "description": "Updates the details of an existing project using its unique internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the project to update."
            },
            "project_data": {
              "type": "object",
              "description": "A dictionary containing the updated project details.\nValidated against ProjectDataInputModel.\nMust include an 'id' field whose string representation matches the provided path ID.",
              "properties": {
                "type_id": {
                  "type": "string",
                  "description": "Object type"
                },
                "id": {
                  "type": "string",
                  "description": "Project identifier string."
                },
                "external_id": {
                  "type": "string",
                  "description": "Project external identifier string"
                },
                "supplier_companies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Array of supplier company objects"
                },
                "supplier_contacts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Array of supplier contact objects"
                },
                "status": {
                  "type": "string",
                  "description": "Project status"
                },
                "attributes": {
                  "type": "object",
                  "description": "Project attributes object."
                },
                "relationships": {
                  "type": "object",
                  "description": "Project relationships object."
                }
              },
              "required": [
                "attributes",
                "external_id",
                "id",
                "relationships",
                "status",
                "supplier_companies",
                "supplier_contacts",
                "type_id"
              ]
            }
          },
          "required": [
            "id",
            "project_data"
          ]
        }
      },
      "delete_project_by_id": {
        "name": "delete_project_by_id",
        "description": "Deletes a project using its unique internal identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the project to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "describe_supplier_company_fields": {
        "name": "describe_supplier_company_fields",
        "description": "Describes the Supplier Company object fields.\n\nReturns a list of field names for the Supplier Company resource. This metadata \nis useful for understanding the available fields that can be used when working \nwith supplier company data.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_supplier_company_by_external_id": {
        "name": "get_supplier_company_by_external_id",
        "description": "Retrieves a supplier company using its external identifier.\n\nThis endpoint fetches the details of a supplier company by its unique external ID. Related resources can be included using the `include` query parameter.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. The external identifier of the supplier company. Example: \"1234-5678-abcd-efgh\""
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response. \nEnum values:\n- \"attachments\"\n- \"supplier_category\"\n- \"supplier_groups\"\n- \"default_payment_term\"\n- \"payment_types\"\n- \"default_payment_type\"\n- \"payment_currencies\"\n- \"default_payment_currency\"\n- \"supplier_classification_values\""
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_supplier_company_by_external_id": {
        "name": "update_supplier_company_by_external_id",
        "description": "Updates an existing supplier company using its external identifier.\n\nThis endpoint allows updating a supplier company's attributes and relationships using its external ID. The request body must include an `id` that matches the identifier in the path.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. External identifier of the supplier company (e.g., \"1234-5678-abcd-efgh\")."
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nEnum values:\n- \"attachments\"\n- \"supplier_category\"\n- \"supplier_groups\"\n- \"default_payment_term\"\n- \"payment_types\"\n- \"default_payment_type\"\n- \"payment_currencies\"\n- \"default_payment_currency\"\n- \"supplier_classification_values\""
            },
            "body": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Must be \"supplier_companies\"."
                },
                "id": {
                  "type": "integer",
                  "description": "Supplier company ID."
                },
                "attributes": {
                  "type": "object",
                  "description": "Fields to update.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required. Company name (max 255 characters)."
                    },
                    "description": {
                      "type": "string",
                      "description": "Optional description."
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Visibility of the company."
                    },
                    "risk": {
                      "type": "string",
                      "description": "Slug value for company risk."
                    },
                    "segmentation": {
                      "type": "string",
                      "description": "Slug value for segmentation."
                    },
                    "segmentation_status": {
                      "type": "string",
                      "description": "Slug value for segmentation status."
                    },
                    "segmentation_notes": {
                      "type": "string",
                      "description": "Notes for segmentation."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Tags for classification."
                    },
                    "url": {
                      "type": "string",
                      "description": "Supplier's website."
                    },
                    "duns_number": {
                      "type": "string",
                      "description": "D-U-N-S\u00ae Number."
                    },
                    "external_id": {
                      "type": "string",
                      "description": "Custom external ID."
                    },
                    "self_registered": {
                      "type": "boolean",
                      "description": "Whether the supplier self-registered."
                    },
                    "onboarding_form_completion_status": {
                      "type": "string",
                      "description": "Onboarding progress: null, 'not_started', 'in_progress', 'completed'."
                    },
                    "accept_all_currencies": {
                      "type": "boolean",
                      "description": "If all currencies are accepted."
                    },
                    "custom_fields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the custom field."
                          },
                          "value": {
                            "type": "object",
                            "description": "Value, based on field type."
                          }
                        },
                        "required": [
                          "name",
                          "value"
                        ]
                      },
                      "description": "List of custom fields."
                    }
                  },
                  "required": [
                    "accept_all_currencies",
                    "custom_fields",
                    "description",
                    "duns_number",
                    "external_id",
                    "name",
                    "onboarding_form_completion_status",
                    "public",
                    "risk",
                    "segmentation",
                    "segmentation_notes",
                    "segmentation_status",
                    "self_registered",
                    "tags",
                    "url"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Updated linked resources.\n    - supplier_category, external_supplier_category (dict): Supplier category by ID or external ID.\n    - supplier_groups, external_supplier_groups (List[dict]): Group associations by ID or external ID.\n    - default_payment_term, external_default_payment_term (dict): Default payment term by ID or external ID.\n    - payment_types, external_payment_types (List[dict]): Accepted payment types.\n    - default_payment_type, external_default_payment_type (dict): Default payment method.\n    - payment_currencies, external_payment_currencies (List[dict]): Accepted currencies.\n    - default_payment_currency, external_default_payment_currency (dict): Default currency.",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Attachments (ID + type = \"attachments\")."
                    }
                  },
                  "required": [
                    "attachments"
                  ]
                }
              },
              "description": "The payload used to update the supplier company.",
              "required": [
                "attributes",
                "id",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_supplier_company_by_external_id": {
        "name": "delete_supplier_company_by_external_id",
        "description": "Deletes a supplier company using its external identifier.\n\nThis operation permanently deletes an existing supplier company. You must provide the external identifier used during the supplier company\u2019s creation.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Required. The external ID of the supplier company to delete.\nExample: \"1234-5678-abcd-efgh\""
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "list_all_suppliers": {
        "name": "list_all_suppliers",
        "description": "Returns a list of all supplier companies from the database.\n\nThis function retrieves all suppliers stored in the simulation database\nwithout any filtering or pagination.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_supplier_by_id": {
        "name": "get_supplier_by_id",
        "description": "Retrieves the details of an existing supplier company by its unique ID.\n\nThis function searches for a supplier in the database by their ID and returns\nthe supplier object if found, or None if not found.",
        "parameters": {
          "type": "object",
          "properties": {
            "supplier_id": {
              "type": "integer",
              "description": "Unique identifier of the supplier company to retrieve."
            }
          },
          "required": [
            "supplier_id"
          ]
        }
      },
      "list_all_bid_line_items": {
        "name": "list_all_bid_line_items",
        "description": "Returns a list of all bid line items.\n\nThis function returns all bid line items in the system, with the option to\nfilter the results based on specific criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "object",
              "description": "A dictionary containing field-value pairs to filter\nthe bid line items. Each key in the dictionary represents a field name,\nand its corresponding value is the exact value to match.\nExample: {\"bid_id\": 123, \"status\": \"active\"}\nDefaults to None, which returns all bid line items."
            }
          }
        }
      },
      "get_supplier_company_by_id": {
        "name": "get_supplier_company_by_id",
        "description": "Retrieves the details of an existing supplier company.\n\nThis function fetches all metadata and linked relationships for a supplier\ncompany using its unique identifier. Related resources can optionally be\nincluded using the `include` query parameter.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Required. Unique identifier of the supplier company.\nExample: 1"
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include.\nAllowed values:\n- \"attachments\"\n- \"supplier_category\"\n- \"supplier_groups\"\n- \"default_payment_term\"\n- \"payment_types\"\n- \"default_payment_type\"\n- \"payment_currencies\"\n- \"default_payment_currency\"\n- \"supplier_classification_values\""
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_supplier_company_by_id": {
        "name": "update_supplier_company_by_id",
        "description": "Updates the details of an existing supplier company.\n\nThis endpoint allows modification of a supplier company's attributes and relationships. You must provide the unique identifier of the supplier company (same as in the path) in the request body. When updating relationships, the entire existing relationship is replaced by the provided values.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Required. Unique identifier of the supplier company.\nExample: 1"
            },
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"attachments\"\n- \"supplier_category\"\n- \"supplier_groups\"\n- \"default_payment_term\"\n- \"payment_types\"\n- \"default_payment_type\"\n- \"payment_currencies\"\n- \"default_payment_currency\"\n- \"supplier_classification_values\""
            },
            "body": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Must be \"supplier_companies\"."
                },
                "id": {
                  "type": "integer",
                  "description": "Supplier company ID (must match the path parameter)."
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required. Name of the supplier (\u2264 255 characters)."
                    },
                    "description": {
                      "type": "object",
                      "description": "Company description."
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Whether the company is publicly listed."
                    },
                    "risk": {
                      "type": "object",
                      "description": "Risk slug defined by your organization."
                    },
                    "segmentation": {
                      "type": "object",
                      "description": "Segmentation slug."
                    },
                    "segmentation_status": {
                      "type": "object",
                      "description": "Segmentation status slug."
                    },
                    "segmentation_notes": {
                      "type": "object",
                      "description": "Notes about the segmentation."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Tags assigned to the supplier."
                    },
                    "url": {
                      "type": "object",
                      "description": "Website of the supplier."
                    },
                    "duns_number": {
                      "type": "object",
                      "description": "D-U-N-S\u00ae Number."
                    },
                    "external_id": {
                      "type": "object",
                      "description": "Your internal system ID for the supplier."
                    },
                    "self_registered": {
                      "type": "boolean",
                      "description": "Whether the supplier self-registered."
                    },
                    "onboarding_form_completion_status": {
                      "type": "string",
                      "description": "One of: null, 'not_started', 'in_progress', 'completed'."
                    },
                    "accept_all_currencies": {
                      "type": "boolean",
                      "description": "Whether all currencies are accepted."
                    },
                    "custom_fields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {}
                      },
                      "description": "List of custom field entries. Each entry can be of multiple supported types.\n        Note: File-type custom fields are only accessible via UI and return `null` in the API.\n\n        Supported types include:\n            - Checkbox\n            - Short Text\n            - Paragraph\n            - Date\n            - Integer\n            - Currency\n            - Decimal\n            - Single Select\n            - Multiple Select\n            - URL\n            - Lookup\n            - Related"
                    }
                  },
                  "description": "",
                  "required": [
                    "accept_all_currencies",
                    "custom_fields",
                    "name",
                    "onboarding_form_completion_status",
                    "public",
                    "self_registered",
                    "tags"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {},
                  "description": "Supplier relationships (replaces existing data).\n    - supplier_category\n    - supplier_groups\n    - default_payment_term\n    - payment_types\n    - default_payment_type\n    - payment_currencies\n    - default_payment_currency\n    - attachments\n    - supplier_classification_values"
                }
              },
              "description": "SupplierCompanyUpdate object containing:",
              "required": [
                "attributes",
                "id",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_supplier_company_by_id": {
        "name": "delete_supplier_company_by_id",
        "description": "Deletes a supplier company by its unique identifier.\n\nThis operation permanently removes the supplier company record from the system.\nYou must provide the supplier company ID that was returned upon its creation.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Required. Unique Supplier Company identifier.\nExample: 1"
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_bid_by_id": {
        "name": "get_bid_by_id",
        "description": "Retrieves the details of an existing bid. You need to supply the unique bid identifier that was returned upon bid creation.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique internal identifier of the bid to retrieve. This ID is\ntypically returned when the bid is created in the system. Must be a\npositive integer."
            },
            "_include": {
              "type": "string",
              "description": "A comma-separated string specifying additional\nrelated data to include in the response. Common options include:\n- 'event': Include associated event details\n- 'supplier_company': Include supplier information\nDefaults to None."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_field_by_external_id": {
        "name": "get_field_by_external_id",
        "description": "Retrieves the details of a specific field by its external ID.\n\nThis function returns the complete details of a field identified by its\nexternal identifier. The function searches through all fields to find a\nmatch for the provided external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the field to retrieve."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_field_by_external_id": {
        "name": "update_field_by_external_id",
        "description": "Updates the details of an existing field by its external ID.\n\nThis function updates the properties of a field identified by its external\nidentifier. The function verifies that the provided body includes the correct\nexternal ID before performing the update.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the field to update."
            },
            "body": {
              "type": "object",
              "description": "A dictionary containing the updated properties\nfor the field, including:",
              "properties": {
                "external_id": {
                  "type": "string",
                  "description": "Must match the external_id in the URL"
                },
                "name": {
                  "type": "string",
                  "description": "Updated name of the field"
                },
                "type": {
                  "type": "string",
                  "description": "Updated data type of the field"
                },
                "required": {
                  "type": "boolean",
                  "description": "Updated required status"
                },
                "description": {
                  "type": "string",
                  "description": "Updated description"
                },
                "configurations": {
                  "type": "object",
                  "description": "Updated field-specific settings"
                }
              },
              "required": [
                "configurations",
                "description",
                "external_id",
                "name",
                "required",
                "type"
              ]
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_field_by_external_id": {
        "name": "delete_field_by_external_id",
        "description": "Deletes a specific field from the system by its external ID.\n\nThis function removes a field identified by its external identifier from\nthe system. The function searches through all fields to find a match for\nthe provided external ID before performing the deletion.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the field to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "get_project_report_entries_by_id": {
        "name": "get_project_report_entries_by_id",
        "description": "Retrieves a list of report entries for a specified project report.\n\nAccepts an optional project_report_id parameter in newer API versions (2019-01-01 and later). Use this to scope results to a particular report.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_report_id": {
              "type": "integer",
              "description": "Unique identifier of the project report."
            }
          },
          "required": [
            "project_report_id"
          ]
        }
      },
      "list_user_owned_project_report_entries": {
        "name": "list_user_owned_project_report_entries",
        "description": "Retrieves a list of project report entries owned by the user.\n\nDeprecated: This endpoint is only available for API version `2018-04-01`. It has been removed in versions released after `2019-01-01`.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_project_report_schema": {
        "name": "get_project_report_schema",
        "description": "Retrieves the schema definition for project report entries.\n\nThe schema provides metadata about the fields used in project reports, including field names and data types.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_attachments_by_ids": {
        "name": "list_attachments_by_ids",
        "description": "Retrieve a filtered list of attachments based on specified IDs.\n\nThis function returns a list of attachments matching the provided IDs, with a maximum\nlimit of 50 attachments per request.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter_id_equals": {
              "type": "string",
              "description": "Comma-separated string of attachment IDs to filter by."
            }
          },
          "required": [
            "filter_id_equals"
          ]
        }
      },
      "create_attachment": {
        "name": "create_attachment",
        "description": "Create a new attachment in the system.\n\nThis function creates a new attachment with the provided data. It checks for duplicate\nexternal IDs and generates a new unique internal ID for the attachment.",
        "parameters": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "object",
                  "description": "Object type, should always be attachments."
                },
                "name": {
                  "type": "object",
                  "description": "Attachment file name."
                },
                "uploaded_by": {
                  "type": "string",
                  "description": "Email/identifier of uploader"
                },
                "external_id": {
                  "type": "object",
                  "description": "Attachment external identifier."
                },
                "attributes": {
                  "type": "object",
                  "description": "Attachment attributes which may contain any of the following keys:",
                  "properties": {
                    "title": {
                      "type": "object",
                      "description": "Attachment title."
                    },
                    "size": {
                      "type": "string",
                      "description": "Attachment file size in bytes."
                    },
                    "external_id": {
                      "type": "object",
                      "description": "Attachment external identifier."
                    },
                    "download_url": {
                      "type": "string",
                      "description": "Attachment download URL."
                    },
                    "download_url_expires_at": {
                      "type": "object",
                      "description": "Download URL expiration time."
                    },
                    "uploaded_at": {
                      "type": "object",
                      "description": "Upload timestamp"
                    }
                  },
                  "required": [
                    "download_url",
                    "download_url_expires_at",
                    "external_id",
                    "size",
                    "title",
                    "uploaded_at"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "One of Contract, Event, Project, or Supplier Company containing:",
                  "properties": {
                    "type": {
                      "type": "object",
                      "description": "Object type."
                    },
                    "id": {
                      "type": "object",
                      "description": "Object identifier string."
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ]
                }
              },
              "description": "Dictionary containing attachment data with the following keys:",
              "required": [
                "attributes",
                "external_id",
                "name",
                "relationships",
                "type",
                "uploaded_by"
              ]
            }
          },
          "required": [
            "data"
          ]
        }
      },
      "list_all_attachments_with_filter": {
        "name": "list_all_attachments_with_filter",
        "description": "Returns a filtered list of attachments based on the `filter[id_equals]` param.\n\nThe result is limited to 50 attachments.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter_id_equals": {
              "type": "string",
              "description": "Comma-separated string of attachment IDs to filter by. Defaults to None.\nIf None, all attachments are returned (up to the limit)."
            }
          }
        }
      },
      "get_attachment_by_id": {
        "name": "get_attachment_by_id",
        "description": "Retrieve a specific attachment by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal ID of the attachment to retrieve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_attachment_by_id": {
        "name": "update_attachment_by_id",
        "description": "Update an existing attachment by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal ID of the attachment to update."
            },
            "data": {
              "type": "object",
              "properties": {},
              "description": "Dictionary containing the fields to update with their new values."
            }
          },
          "required": [
            "data",
            "id"
          ]
        }
      },
      "delete_attachment_by_id": {
        "name": "delete_attachment_by_id",
        "description": "Delete an attachment by its internal ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal ID of the attachment to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_attachment_by_external_id": {
        "name": "get_attachment_by_external_id",
        "description": "Retrieve a specific attachment by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external ID of the attachment to retrieve."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_attachment_by_external_id": {
        "name": "update_attachment_by_external_id",
        "description": "Update an existing attachment by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external ID of the attachment to update."
            },
            "data": {
              "type": "object",
              "properties": {},
              "description": "Dictionary containing the fields to update with their new values."
            }
          },
          "required": [
            "data",
            "external_id"
          ]
        }
      },
      "delete_attachment_by_external_id": {
        "name": "delete_attachment_by_external_id",
        "description": "Delete an attachment by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external ID of the attachment to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "list_event_worksheet_line_items": {
        "name": "list_event_worksheet_line_items",
        "description": "Returns a list of line items for the specified criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the line items belong."
            },
            "worksheet_id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to which the line items belong."
            }
          },
          "required": [
            "event_id",
            "worksheet_id"
          ]
        }
      },
      "create_event_worksheet_line_item": {
        "name": "create_event_worksheet_line_item",
        "description": "Create a line item with given cell values.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the line item will belong."
            },
            "worksheet_id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to which the line item will belong."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the properties for the new line item, including:",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"line_items\""
                },
                "attributes": {
                  "type": "object",
                  "description": "LineItem attributes containing:",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "A hashmap where keys are data identifier strings for the columns in the worksheet, and values are cell values, where each value contains:",
                      "properties": {
                        "data_identifier": {
                          "type": "string",
                          "description": "Worksheet column identifier string"
                        },
                        "value": {
                          "type": "object",
                          "description": "Worksheet line item cell value"
                        }
                      },
                      "required": [
                        "data_identifier",
                        "value"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Line item relationships containing:",
                  "properties": {
                    "worksheet": {
                      "type": "object",
                      "description": "Associated worksheet containing:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Object type, should always be \"worksheets\""
                        },
                        "id": {
                          "type": "integer",
                          "description": "Worksheet identifier string"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "worksheet"
                  ]
                }
              },
              "required": [
                "attributes",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_id",
            "worksheet_id"
          ]
        }
      },
      "create_multiple_event_worksheet_line_items": {
        "name": "create_multiple_event_worksheet_line_items",
        "description": "Creates multiple line items in the specified event worksheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the line items will belong."
            },
            "worksheet_id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to which the line items will belong."
            },
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Object type, should always be \"line_items\""
                  },
                  "attributes": {
                    "type": "object",
                    "description": "LineItem attributes containing:",
                    "properties": {
                      "data": {
                        "type": "object",
                        "description": "A hashmap where keys are data identifier strings for the columns in the worksheet, and values are cell values, where each value contains:",
                        "properties": {
                          "data_identifier": {
                            "type": "string",
                            "description": "Worksheet column identifier string"
                          },
                          "value": {
                            "type": "object",
                            "description": "Worksheet line item cell value"
                          }
                        },
                        "required": [
                          "data_identifier",
                          "value"
                        ]
                      }
                    },
                    "required": [
                      "data"
                    ]
                  },
                  "relationships": {
                    "type": "object",
                    "description": "Line item relationships containing:",
                    "properties": {
                      "worksheet": {
                        "type": "object",
                        "description": "Associated worksheet containing:",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Object type, should always be \"worksheets\""
                          },
                          "id": {
                            "type": "integer",
                            "description": "Worksheet identifier string"
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "worksheet"
                    ]
                  }
                },
                "required": [
                  "attributes",
                  "relationships",
                  "type"
                ]
              },
              "description": "A list of dictionaries, where each dictionary contains\nthe properties for a new line item, including:"
            }
          },
          "required": [
            "data",
            "event_id",
            "worksheet_id"
          ]
        }
      },
      "create_supplier_contact": {
        "name": "create_supplier_contact",
        "description": "Creates a new supplier contact with the provided attributes and relationships.\n\nThis function links the contact to an existing supplier company by ID or external ID.\nYou may also assign contact types and a phone reference. The response includes the\nfull created contact object with all resolved relationships.",
        "parameters": {
          "type": "object",
          "properties": {
            "_include": {
              "type": "string",
              "description": "Comma-separated list of related resources to include in the response.\nAllowed values:\n- \"supplier_company\"\n- \"contact_types\"\n- \"phones\""
            },
            "body": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {},
                  "description": ""
                },
                "type": {
                  "type": "string",
                  "description": "Required. Must be \"supplier_contacts\"."
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Required unless first_name and last_name are provided. Full name (\u2264 255 chars)."
                    },
                    "first_name": {
                      "type": "object",
                      "description": "First name (\u2264 255 chars)."
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Last name (\u2264 255 chars)."
                    },
                    "email": {
                      "type": "string",
                      "description": "Required. Contact's email address (\u2264 255 chars)."
                    },
                    "notes": {
                      "type": "object",
                      "description": "Additional notes about the contact."
                    },
                    "phone_number": {
                      "type": "object",
                      "description": "Deprecated. Prefer the `phones` relationship."
                    },
                    "job_title": {
                      "type": "object",
                      "description": "Contact's job title."
                    },
                    "external_id": {
                      "type": "object",
                      "description": "Internal system reference."
                    },
                    "is_suggested": {
                      "type": "object",
                      "description": "Whether the contact was suggested but unapproved."
                    }
                  },
                  "description": "",
                  "required": [
                    "email",
                    "name"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "supplier_company": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Supplier company ID or external ID."
                            },
                            "type": {
                              "type": "string",
                              "description": "Must be \"supplier_companies\"."
                            }
                          },
                          "description": "",
                          "required": [
                            "id",
                            "type"
                          ]
                        }
                      },
                      "description": "Required. Link to a supplier company.",
                      "required": [
                        "data"
                      ]
                    },
                    "contact_types": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Contact type ID."
                              },
                              "type": {
                                "type": "string",
                                "description": "Must be \"contact_types\"."
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ]
                          },
                          "description": ""
                        }
                      },
                      "required": [
                        "data"
                      ]
                    },
                    "phones": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Phone ID."
                              },
                              "type": {
                                "type": "string",
                                "description": "Must be \"phones\"."
                              }
                            },
                            "required": [
                              "id",
                              "type"
                            ]
                          },
                          "description": "Maximum of one phone."
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  },
                  "description": "",
                  "required": [
                    "supplier_company"
                  ]
                }
              },
              "description": "The supplier contact creation payload.",
              "required": [
                "attributes",
                "data",
                "relationships",
                "type"
              ]
            }
          }
        }
      },
      "list_scim_users": {
        "name": "list_scim_users",
        "description": "Retrieves a list of users based on specified filtering, sorting, and pagination criteria.\n\nThis endpoint adheres to SCIM (System for Cross-domain Identity Management) standards.\nSupports complex filtering via SCIM filter syntax and offers a 100-item default page size.",
        "parameters": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "string",
              "description": "Comma-separated list of specific attributes to return.\n- Enum: \"userName\", \"name.familyName\", \"name.givenName\", \"roles\", \"roles.value\",\n\"externalId\", \"active\", \"meta.lastModified\", \"meta.created\", \"id\""
            },
            "filter": {
              "type": "string",
              "description": "SCIM-compliant filter expression to search for users.\nExample:\n    'userName eq \"jhon.doe@example.com\" and meta.lastModified gt \"2011-05-13T04:42:34Z\"'\nSupported attributes:\n    - \"userName\"\n    - \"name.familyName\"\n    - \"name.givenName\"\n    - \"roles\"\n    - \"roles.value\"\n    - \"externalId\"\n    - \"active\"\n    - \"meta.lastModified\"\n    - \"meta.created\"\nSupported operators:\n    - eq: Equal to\n    - ne: Not equal to\n    - lt: Less than\n    - le: Less than or equal to\n    - gt: Greater than\n    - ge: Greater than or equal to\n    - pr: Present\n    - co: Contains\n    - and: Logical \"and\"\n    - or: Logical \"or\"\n    - not: Logical \"not\""
            },
            "startIndex": {
              "type": "integer",
              "description": "1-based index of the first query result. Must be >= 1."
            },
            "count": {
              "type": "integer",
              "description": "Number of results to return per page. Must be >= 0."
            },
            "sortBy": {
              "type": "string",
              "description": "Attribute used to order results.\n- Allowed values: \"id\", \"externalId\""
            },
            "sortOrder": {
              "type": "string",
              "description": "Direction of sorting.\n- Allowed values: \"ascending\", \"descending\""
            }
          }
        }
      },
      "create_scim_user": {
        "name": "create_scim_user",
        "description": "Creates a new user with the specified attributes.\n\nThis operation is SCIM-compliant and requires a payload defining the user details.\nSupports external identifiers for integration with client systems.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Optional client-assigned unique identifier."
                },
                "userName": {
                  "type": "string",
                  "description": "Required. Email address of the user."
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "givenName": {
                      "type": "string",
                      "description": "First name of the user."
                    },
                    "familyName": {
                      "type": "string",
                      "description": "Last name of the user."
                    }
                  },
                  "description": "Required. Name object with:",
                  "required": [
                    "familyName",
                    "givenName"
                  ]
                },
                "active": {
                  "type": "boolean",
                  "description": "Optional. Whether the user account is active."
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional. Roles assigned to the user."
                },
                "meta": {
                  "type": "object",
                  "properties": {},
                  "description": "Optional. Metadata about the user."
                }
              },
              "description": "The user resource to create. The structure is defined by the SCIM User schema.",
              "required": [
                "active",
                "externalId",
                "meta",
                "name",
                "roles",
                "userName"
              ]
            }
          },
          "required": [
            "body"
          ]
        }
      },
      "get_project_by_external_id": {
        "name": "get_project_by_external_id",
        "description": "Retrieves the details of a specific project using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The unique external identifier of the project to retrieve."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_project_by_external_id": {
        "name": "update_project_by_external_id",
        "description": "Updates the details of an existing project using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The unique external identifier of the project to update."
            },
            "project_data": {
              "type": "object",
              "description": "A dictionary containing the updated project details.\nMust include an 'external_id' field matching the provided ID.",
              "properties": {
                "type_id": {
                  "type": "string",
                  "description": "Object type"
                },
                "id": {
                  "type": "string",
                  "description": "Project identifier string"
                },
                "external_id": {
                  "type": "string",
                  "description": "Project external identifier string. Same as the provided ID."
                },
                "supplier_companies": {
                  "type": "object",
                  "description": "Array of supplier company objects"
                },
                "supplier_contacts": {
                  "type": "object",
                  "description": "Array of supplier contact objects"
                },
                "status": {
                  "type": "string",
                  "description": "Project status"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Project name"
                    },
                    "description": {
                      "type": "string",
                      "description": "Project description"
                    },
                    "state": {
                      "type": "string",
                      "description": "Project state (draft, requested, planned, active, completed, canceled, on_hold)"
                    },
                    "target_start_date": {
                      "type": "object",
                      "description": "Project target start date"
                    },
                    "target_end_date": {
                      "type": "object",
                      "description": "Project target end date"
                    },
                    "actual_spend_amount": {
                      "type": "number",
                      "description": "Project actual spend amount"
                    },
                    "approved_spend_amount": {
                      "type": "number",
                      "description": "Project approved spend amount"
                    },
                    "estimated_savings_amount": {
                      "type": "number",
                      "description": "Project estimated savings amount"
                    },
                    "estimated_spend_amount": {
                      "type": "number",
                      "description": "Project estimated spend amount"
                    },
                    "canceled_note": {
                      "type": "object",
                      "description": "Project cancelation note"
                    },
                    "canceled_reason": {
                      "type": "object",
                      "description": "Project cancelation reason"
                    },
                    "on_hold_note": {
                      "type": "object",
                      "description": "Project on-hold note"
                    },
                    "on_hold_reason": {
                      "type": "object",
                      "description": "Project on-hold reason"
                    },
                    "needs_attention": {
                      "type": "boolean",
                      "description": "Project needs attention status"
                    },
                    "marked_as_needs_attention_at": {
                      "type": "object",
                      "description": "Project marked as needs attention timestamp"
                    },
                    "needs_attention_note": {
                      "type": "object",
                      "description": "Project needs attention note"
                    },
                    "needs_attention_reason": {
                      "type": "object",
                      "description": "Project needs attention reason"
                    }
                  },
                  "description": "Project attributes object containing:",
                  "required": [
                    "actual_spend_amount",
                    "approved_spend_amount",
                    "description",
                    "estimated_savings_amount",
                    "estimated_spend_amount",
                    "name",
                    "needs_attention",
                    "state",
                    "target_end_date",
                    "target_start_date"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Array of attachment objects"
                    },
                    "creator": {
                      "type": "object",
                      "description": "Project creator stakeholder object"
                    },
                    "requester": {
                      "type": "object",
                      "description": "Project requester stakeholder object"
                    },
                    "owner": {
                      "type": "object",
                      "description": "Project owner stakeholder object"
                    },
                    "project_type": {
                      "type": "object",
                      "description": "Project type object"
                    }
                  },
                  "description": "Project relationships object containing:",
                  "required": [
                    "attachments",
                    "creator",
                    "owner",
                    "project_type",
                    "requester"
                  ]
                }
              },
              "required": [
                "attributes",
                "external_id",
                "id",
                "relationships",
                "status",
                "supplier_companies",
                "supplier_contacts",
                "type_id"
              ]
            }
          },
          "required": [
            "external_id",
            "project_data"
          ]
        }
      },
      "delete_project_by_external_id": {
        "name": "delete_project_by_external_id",
        "description": "Deletes a project using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The unique external identifier of the project to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "list_projects": {
        "name": "list_projects",
        "description": "Retrieves a list of projects based on optional filtering criteria and pagination settings.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "object",
              "description": "A dictionary containing filter criteria for projects. Supported filters include:",
              "properties": {
                "updated_at_from": {
                  "type": "object",
                  "description": "Return projects updated on or after the specified timestamp"
                },
                "updated_at_to": {
                  "type": "object",
                  "description": "Return projects updated on or before the specified timestamp"
                },
                "number_from": {
                  "type": "integer",
                  "description": "Find projects with number equal or greater than the specified one"
                },
                "number_to": {
                  "type": "integer",
                  "description": "Find projects with number equal or smaller than the specified one"
                },
                "title_contains": {
                  "type": "string",
                  "description": "Return projects with title containing the specified string"
                },
                "title_not_contains": {
                  "type": "string",
                  "description": "Return projects with title not containing the specified string"
                },
                "description_contains": {
                  "type": "string",
                  "description": "Return projects with description containing the specified string"
                },
                "description_not_contains": {
                  "type": "string",
                  "description": "Return projects with description not containing the specified string"
                },
                "external_id_empty": {
                  "type": "boolean",
                  "description": "Return projects with external_id blank"
                },
                "external_id_not_empty": {
                  "type": "boolean",
                  "description": "Return projects with non-blank external_id"
                },
                "external_id_equals": {
                  "type": "string",
                  "description": "Find projects by a specific external ID"
                },
                "external_id_not_equals": {
                  "type": "string",
                  "description": "Find projects excluding the one with the specified external ID"
                },
                "actual_start_date_from": {
                  "type": "object",
                  "description": "Return projects started on or after the specified date"
                },
                "actual_start_date_to": {
                  "type": "object",
                  "description": "Return projects started on or before the specified date"
                },
                "actual_end_date_from": {
                  "type": "object",
                  "description": "Return projects ended on or after the specified date"
                },
                "actual_end_date_to": {
                  "type": "object",
                  "description": "Return projects ended on or before the specified date"
                },
                "target_start_date_from": {
                  "type": "object",
                  "description": "Return projects targeted to start on or after the specified date"
                },
                "target_start_date_to": {
                  "type": "object",
                  "description": "Return projects targeted to start on or before the specified date"
                },
                "target_end_date_from": {
                  "type": "object",
                  "description": "Return projects targeted to end on or after the specified date"
                },
                "target_end_date_to": {
                  "type": "object",
                  "description": "Return projects targeted to end on or before the specified date"
                },
                "actual_spend_amount_from": {
                  "type": "number",
                  "description": "Return projects with actual spend amount equal or greater than the specified amount"
                },
                "actual_spend_amount_to": {
                  "type": "number",
                  "description": "Return projects with actual spend amount equal or smaller than the specified amount"
                },
                "approved_spend_amount_from": {
                  "type": "number",
                  "description": "Return projects with approved spend amount equal or greater than the specified amount"
                },
                "approved_spend_amount_to": {
                  "type": "number",
                  "description": "Return projects with approved spend amount equal or smaller than the specified amount"
                },
                "estimated_savings_amount_from": {
                  "type": "number",
                  "description": "Return projects with estimated savings amount equal or greater than the specified amount"
                },
                "estimated_savings_amount_to": {
                  "type": "number",
                  "description": "Return projects with estimated savings amount equal or smaller than the specified amount"
                },
                "estimated_spend_amount_from": {
                  "type": "number",
                  "description": "Return projects with estimated spend amount equal or greater than the specified amount"
                },
                "estimated_spend_amount_to": {
                  "type": "number",
                  "description": "Return projects with estimated spend amount equal or smaller than the specified amount"
                },
                "canceled_note_contains": {
                  "type": "string",
                  "description": "Return projects with cancelation note containing the specified string"
                },
                "canceled_note_not_contains": {
                  "type": "string",
                  "description": "Return projects with cancelation note not containing the specified string"
                },
                "canceled_note_empty": {
                  "type": "string",
                  "description": "Return projects with an empty cancelation note"
                },
                "canceled_note_not_empty": {
                  "type": "string",
                  "description": "Return projects with a non-empty cancelation note"
                },
                "canceled_reason_contains": {
                  "type": "string",
                  "description": "Return projects with cancelation reason containing the specified string"
                },
                "canceled_reason_not_contains": {
                  "type": "string",
                  "description": "Return projects with cancelation reason not containing the specified string"
                },
                "canceled_reason_empty": {
                  "type": "string",
                  "description": "Return projects with an empty cancelation reason"
                },
                "canceled_reason_not_empty": {
                  "type": "string",
                  "description": "Return projects with a non-empty cancelation reason"
                },
                "on_hold_note_contains": {
                  "type": "string",
                  "description": "Return projects with on-hold note containing the specified string"
                },
                "on_hold_note_not_contains": {
                  "type": "string",
                  "description": "Return projects with on-hold note not containing the specified string"
                },
                "on_hold_note_empty": {
                  "type": "string",
                  "description": "Return projects with an empty on-hold note"
                },
                "on_hold_note_not_empty": {
                  "type": "string",
                  "description": "Return projects with a non-empty on-hold note"
                },
                "on_hold_reason_contains": {
                  "type": "string",
                  "description": "Return projects with on-hold reason containing the specified string"
                },
                "on_hold_reason_not_contains": {
                  "type": "string",
                  "description": "Return projects with on-hold reason not containing the specified string"
                },
                "on_hold_reason_empty": {
                  "type": "string",
                  "description": "Return projects with an empty on-hold reason"
                },
                "on_hold_reason_not_empty": {
                  "type": "string",
                  "description": "Return projects with a non-empty on-hold reason"
                },
                "needs_attention_equals": {
                  "type": "boolean",
                  "description": "Return projects with the specified \"needs attention\" status"
                },
                "needs_attention_not_equals": {
                  "type": "boolean",
                  "description": "Return projects with the \"needs attention\" status not equal to the specified one"
                },
                "state_equals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Find projects with specified statuses (draft, requested, planned, active, completed, canceled, on_hold)"
                },
                "marked_as_needs_attention_at_from": {
                  "type": "object",
                  "description": "Find projects marked as \"needs attention\" after or on the specified date"
                },
                "marked_as_needs_attention_at_to": {
                  "type": "object",
                  "description": "Find projects marked as \"needs attention\" before or on the specified date"
                },
                "needs_attention_note_contains": {
                  "type": "string",
                  "description": "Return projects with \"needs attention\" note containing the specified string"
                },
                "needs_attention_note_not_contains": {
                  "type": "string",
                  "description": "Return projects with \"needs attention\" note not containing the specified string"
                },
                "needs_attention_note_empty": {
                  "type": "string",
                  "description": "Return projects with an empty \"needs attention\" note"
                },
                "needs_attention_note_not_empty": {
                  "type": "string",
                  "description": "Return projects with a non-empty \"needs attention\" note"
                },
                "needs_attention_reason_contains": {
                  "type": "string",
                  "description": "Return projects with \"needs attention\" reason containing the specified string"
                },
                "needs_attention_reason_not_contains": {
                  "type": "string",
                  "description": "Return projects with \"needs attention\" reason not containing the specified string"
                },
                "needs_attention_reason_empty": {
                  "type": "string",
                  "description": "Return projects with an empty \"needs attention\" reason"
                },
                "needs_attention_reason_not_empty": {
                  "type": "string",
                  "description": "Return projects with a non-empty \"needs attention\" reason"
                }
              },
              "required": [
                "actual_end_date_from",
                "actual_end_date_to",
                "actual_spend_amount_from",
                "actual_spend_amount_to",
                "actual_start_date_from",
                "actual_start_date_to",
                "approved_spend_amount_from",
                "approved_spend_amount_to",
                "canceled_note_contains",
                "canceled_note_empty",
                "canceled_note_not_contains",
                "canceled_note_not_empty",
                "canceled_reason_contains",
                "canceled_reason_empty",
                "canceled_reason_not_contains",
                "canceled_reason_not_empty",
                "description_contains",
                "description_not_contains",
                "estimated_savings_amount_from",
                "estimated_savings_amount_to",
                "estimated_spend_amount_from",
                "estimated_spend_amount_to",
                "external_id_empty",
                "external_id_equals",
                "external_id_not_empty",
                "external_id_not_equals",
                "marked_as_needs_attention_at_from",
                "marked_as_needs_attention_at_to",
                "needs_attention_equals",
                "needs_attention_not_equals",
                "needs_attention_note_contains",
                "needs_attention_note_empty",
                "needs_attention_note_not_contains",
                "needs_attention_note_not_empty",
                "needs_attention_reason_contains",
                "needs_attention_reason_empty",
                "needs_attention_reason_not_contains",
                "needs_attention_reason_not_empty",
                "number_from",
                "number_to",
                "on_hold_note_contains",
                "on_hold_note_empty",
                "on_hold_note_not_contains",
                "on_hold_note_not_empty",
                "on_hold_reason_contains",
                "on_hold_reason_empty",
                "on_hold_reason_not_contains",
                "on_hold_reason_not_empty",
                "state_equals",
                "target_end_date_from",
                "target_end_date_to",
                "target_start_date_from",
                "target_start_date_to",
                "title_contains",
                "title_not_contains",
                "updated_at_from",
                "updated_at_to"
              ]
            },
            "page": {
              "type": "object",
              "description": "A dictionary containing pagination settings with 'size' parameter\nto limit the number of results per page (default: 10, max: 100).\nIf None, no pagination is applied."
            }
          }
        }
      },
      "create_project": {
        "name": "create_project",
        "description": "Creates a new project with the specified attributes.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_data": {
              "type": "object",
              "properties": {
                "type_id": {
                  "type": "string",
                  "description": "Object type (defaults to \"projects\")"
                },
                "id": {
                  "type": "string",
                  "description": "Project identifier string"
                },
                "external_id": {
                  "type": "string",
                  "description": "Project external identifier string"
                },
                "supplier_companies": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Array of supplier company objects"
                },
                "supplier_contacts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "Array of supplier contact objects"
                },
                "status": {
                  "type": "string",
                  "description": "Project status"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Project name (mandatory)"
                    },
                    "description": {
                      "type": "string",
                      "description": "Project description"
                    },
                    "state": {
                      "type": "string",
                      "description": "Project state (draft, requested, planned, active, completed, canceled, on_hold)"
                    },
                    "target_start_date": {
                      "type": "object",
                      "description": "Project target start date"
                    },
                    "target_end_date": {
                      "type": "object",
                      "description": "Project target end date"
                    },
                    "actual_spend_amount": {
                      "type": "number",
                      "description": "Project actual spend amount"
                    },
                    "approved_spend_amount": {
                      "type": "number",
                      "description": "Project approved spend amount"
                    },
                    "estimated_savings_amount": {
                      "type": "number",
                      "description": "Project estimated savings amount"
                    },
                    "estimated_spend_amount": {
                      "type": "number",
                      "description": "Project estimated spend amount"
                    },
                    "canceled_note": {
                      "type": "object",
                      "description": "Project cancelation note"
                    },
                    "canceled_reason": {
                      "type": "object",
                      "description": "Project cancelation reason"
                    },
                    "on_hold_note": {
                      "type": "object",
                      "description": "Project on-hold note"
                    },
                    "on_hold_reason": {
                      "type": "object",
                      "description": "Project on-hold reason"
                    },
                    "needs_attention": {
                      "type": "boolean",
                      "description": "Project needs attention status"
                    },
                    "marked_as_needs_attention_at": {
                      "type": "object",
                      "description": "Project marked as needs attention timestamp"
                    },
                    "needs_attention_note": {
                      "type": "object",
                      "description": "Project needs attention note"
                    },
                    "needs_attention_reason": {
                      "type": "object",
                      "description": "Project needs attention reason"
                    }
                  },
                  "description": "Project attributes object containing:",
                  "required": [
                    "actual_spend_amount",
                    "approved_spend_amount",
                    "description",
                    "estimated_savings_amount",
                    "estimated_spend_amount",
                    "name",
                    "needs_attention",
                    "state",
                    "target_end_date",
                    "target_start_date"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "attachments": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Array of attachment objects"
                    },
                    "creator": {
                      "type": "object",
                      "description": "Project creator stakeholder object"
                    },
                    "requester": {
                      "type": "object",
                      "description": "Project requester stakeholder object"
                    },
                    "owner": {
                      "type": "object",
                      "description": "Project owner stakeholder object"
                    },
                    "project_type": {
                      "type": "object",
                      "description": "Project type object"
                    }
                  },
                  "description": "Project relationships object containing:",
                  "required": [
                    "attachments",
                    "creator",
                    "owner",
                    "project_type",
                    "requester"
                  ]
                }
              },
              "description": "A dictionary containing the project attributes.\nIf 'id' is not provided, a new unique ID will be generated.\n'attributes' field with at least 'name' is mandatory.\nproject_data can contain any of the following keys:",
              "required": [
                "attributes",
                "external_id",
                "id",
                "relationships",
                "status",
                "supplier_companies",
                "supplier_contacts",
                "type_id"
              ]
            }
          },
          "required": [
            "project_data"
          ]
        }
      },
      "describe_bid_line_items_fields": {
        "name": "describe_bid_line_items_fields",
        "description": "Retrieves the list of available fields for bid line item objects.\n\nThis function returns a comprehensive list of all fields that can be present\nin a bid line item object, based on the schema definition in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "update_payment_term_by_external_id": {
        "name": "update_payment_term_by_external_id",
        "description": "Updates the details of an existing payment term using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the payment term to update."
            },
            "name": {
              "type": "string",
              "description": "The new name for the payment term (e.g., \"Net 30\", \"Net 60\")."
            }
          },
          "required": [
            "external_id",
            "name"
          ]
        }
      },
      "delete_payment_term_by_external_id": {
        "name": "delete_payment_term_by_external_id",
        "description": "Deletes a payment term using its external identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "The external identifier of the payment term to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "list_performance_review_answer_report_entries": {
        "name": "list_performance_review_answer_report_entries",
        "description": "Retrieves a list of performance review answer entries.\n\nThis endpoint returns detailed entries from performance review responses, useful for evaluation analysis, tracking progress, and generating summaries. Pagination is supported via `next` and `prev` links.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_performance_review_answer_report_schema": {
        "name": "get_performance_review_answer_report_schema",
        "description": "Retrieves the schema for performance review answer reports.\n\nThis schema outlines the structure of performance review answers returned by the API, including field names and their respective data types. Useful for dynamic rendering or processing of answer entries.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "add_supplier_companies_to_project": {
        "name": "add_supplier_companies_to_project",
        "description": "Adds one or more supplier companies to a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "integer",
              "description": "The unique identifier of the project."
            },
            "supplier_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "A list of supplier company IDs to add to the project.\nFor optimal performance, it's recommended to add 10 or fewer\nsuppliers in a single request."
            }
          },
          "required": [
            "project_id",
            "supplier_ids"
          ]
        }
      },
      "remove_supplier_companies_from_project": {
        "name": "remove_supplier_companies_from_project",
        "description": "Removes one or more supplier companies from a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "integer",
              "description": "The unique identifier of the project."
            },
            "supplier_ids": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "A list of supplier company IDs to remove from the project."
            }
          },
          "required": [
            "project_id",
            "supplier_ids"
          ]
        }
      },
      "describe_bid_fields": {
        "name": "describe_bid_fields",
        "description": "Returns a list of fields for the bid object.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_event_worksheet_line_item_by_id": {
        "name": "get_event_worksheet_line_item_by_id",
        "description": "Retrieves the details of an existing line item. You need to supply the unique line item identifier that \n\nwas returned upon line item creation.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the line item belongs."
            },
            "worksheet_id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to which the line item belongs."
            },
            "id": {
              "type": "integer",
              "description": "The unique identifier of the line item to retrieve."
            }
          },
          "required": [
            "event_id",
            "id",
            "worksheet_id"
          ]
        }
      },
      "update_event_worksheet_line_item_by_id": {
        "name": "update_event_worksheet_line_item_by_id",
        "description": "Updates the details of an existing line item. You need to supply the unique line item that was returned \n\nupon line item creation. Please note, that request body must include the id attribute with the value of \nyour line item unique identifier (the same one you passed as argument)",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the line item belongs."
            },
            "worksheet_id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to which the line item belongs."
            },
            "id": {
              "type": "integer",
              "description": "The unique identifier of the line item to update."
            },
            "data": {
              "type": "object",
              "description": "A dictionary containing the updated properties for the line item.",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type, should always be \"line_items\""
                },
                "attributes": {
                  "type": "object",
                  "description": "LineItem attributes containing:",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "A hashmap where keys are data identifier strings for the columns in the worksheet, and values are cell values, where each value contains:",
                      "properties": {
                        "data_identifier": {
                          "type": "string",
                          "description": "Worksheet column identifier string"
                        },
                        "value": {
                          "type": "object",
                          "description": "Worksheet line item cell value"
                        }
                      },
                      "required": [
                        "data_identifier",
                        "value"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                },
                "relationships": {
                  "type": "object",
                  "description": "Line item relationships containing:",
                  "properties": {
                    "worksheet": {
                      "type": "object",
                      "description": "Associated worksheet containing:",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Object type, should always be \"worksheets\""
                        },
                        "id": {
                          "type": "integer",
                          "description": "Worksheet identifier string"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "worksheet"
                  ]
                }
              },
              "required": [
                "attributes",
                "relationships",
                "type"
              ]
            }
          },
          "required": [
            "data",
            "event_id",
            "id",
            "worksheet_id"
          ]
        }
      },
      "delete_event_worksheet_line_item_by_id": {
        "name": "delete_event_worksheet_line_item_by_id",
        "description": "Deletes a specific line item from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event to which the line item belongs."
            },
            "worksheet_id": {
              "type": "integer",
              "description": "The unique identifier of the worksheet to which the line item belongs."
            },
            "id": {
              "type": "integer",
              "description": "The unique identifier of the line item to delete."
            }
          },
          "required": [
            "event_id",
            "id",
            "worksheet_id"
          ]
        }
      },
      "get_project_fields_description": {
        "name": "get_project_fields_description",
        "description": "Retrieves a list of all available fields for project objects.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_supplier_report_entries": {
        "name": "list_supplier_report_entries",
        "description": "This function retrieves all supplier report entries.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_supplier_report_schema": {
        "name": "get_supplier_report_schema",
        "description": "Returns the supplier report schema.\n\nThis function retrieves the schema definition for supplier reports, including\nfield names, types, and metadata that describe how supplier report entries are structured.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_event_bids": {
        "name": "list_event_bids",
        "description": "Returns a list of all bids. Only bids for events of type RFP are returned\n\nThis function returns all bids linked to the specified event, with support\nfor filtering, pagination, and optional inclusion of related data. Only\nbids for events of type RFP (Request for Proposal) are returned. The function\nsupports comprehensive filtering and data inclusion options.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer",
              "description": "The unique identifier of the event for which to retrieve\nbids."
            },
            "filter": {
              "type": "object",
              "description": "A dictionary containing filter criteria for bids. Each key represents a filter field with its corresponding value. Supported filters:",
              "properties": {
                "id_equals": {
                  "type": "integer",
                  "description": "Find bids by specific IDs"
                },
                "intend_to_bid_equals": {
                  "type": "boolean",
                  "description": "Return bids with specified \"intent to bid\" status"
                },
                "intend_to_bid_not_equals": {
                  "type": "boolean",
                  "description": "Return bids with \"intent to bid\" status not equal to specified value"
                },
                "intend_to_bid_answered_at_from": {
                  "type": "string",
                  "description": "Return bids with intend_to_bid updated on or after timestamp"
                },
                "intend_to_bid_answered_at_to": {
                  "type": "string",
                  "description": "Return bids with intend_to_bid updated on or before timestamp"
                },
                "submitted_at_from": {
                  "type": "string",
                  "description": "Return bids with submitted_at on or after timestamp"
                },
                "submitted_at_to": {
                  "type": "string",
                  "description": "Return bids with submitted_at on or before timestamp"
                },
                "resubmitted_at_from": {
                  "type": "string",
                  "description": "Return bids with resubmitted_at on or after timestamp"
                },
                "resubmitted_at_to": {
                  "type": "string",
                  "description": "Return bids with resubmitted_at on or before timestamp"
                },
                "status_equals": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Find bids with specified statuses (award_retracted, awarded, draft, rejected, rejection_retracted, resubmitted, revising, submitted, unclaimed, update_requested)"
                },
                "supplier_company_id_equals": {
                  "type": "integer",
                  "description": "Find bids by specific Supplier Company IDs"
                },
                "supplier_company_external_id_equals": {
                  "type": "string",
                  "description": "Find bids by specific Supplier Company External IDs"
                }
              },
              "required": [
                "id_equals",
                "intend_to_bid_answered_at_from",
                "intend_to_bid_answered_at_to",
                "intend_to_bid_equals",
                "intend_to_bid_not_equals",
                "resubmitted_at_from",
                "resubmitted_at_to",
                "status_equals",
                "submitted_at_from",
                "submitted_at_to",
                "supplier_company_external_id_equals",
                "supplier_company_id_equals"
              ]
            },
            "_include": {
              "type": "string",
              "description": "A string specifying additional related resources to include in the response. Supported values:\n- \"event\": Include event details\n- \"supplier_company\": Include supplier company details\nDefaults to None."
            },
            "page": {
              "type": "object",
              "description": "A dictionary containing pagination parameters:",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "The number of results returned per page. Default is 10, maximum is 100."
                }
              },
              "required": [
                "size"
              ]
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "list_project_types": {
        "name": "list_project_types",
        "description": "Retrieves a list of all available project types in the system.\n\nEach project type includes a name and a short code. This information is useful for categorizing and identifying different types of projects in workflows and project planning.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "list_scim_resource_types": {
        "name": "list_scim_resource_types",
        "description": "Lists SCIM resource types available on the service provider.\n\nThis endpoint allows clients to discover all supported SCIM resource types and their associated metadata, including endpoint paths and schemas. This is based on Section 4 of RFC 7644.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_scim_resource_type_by_name": {
        "name": "get_scim_resource_type_by_name",
        "description": "Retrieves metadata for a specific SCIM resource type.\n\nThis endpoint provides the schema, endpoint path, and any extensions supported for a given SCIM resource (e.g., \"User\"). It returns a subset of the information available from the general `/ResourceTypes` endpoint, focusing on a single resource type.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "string",
              "description": "Name of the SCIM resource type.\n- Example: \"User\""
            }
          },
          "required": [
            "resource"
          ]
        }
      },
      "get_spend_category_by_id": {
        "name": "get_spend_category_by_id",
        "description": "Retrieves the details of a specific spend category by its unique identifier.\n\nSpend categories define classification for various types of organizational spend such as procurement, expenses, supplier invoices, etc.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Unique identifier of the spend category."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "update_spend_category_by_id": {
        "name": "update_spend_category_by_id",
        "description": "Updates an existing spend category with new attributes.\n\nThe spend category must be identified by its unique ID (same as provided in the path). Only fields passed in the payload will be updated; others remain unchanged.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Unique identifier of the spend category to update."
            },
            "name": {
              "type": "string",
              "description": "Optional. Spend category name (max 255 characters)."
            },
            "new_external_id": {
              "type": "string",
              "description": "Optional. External system ID (max 255 characters)."
            },
            "usages": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Applicable contexts.\n- Enum: \"procurement\", \"expense\", \"ad_hoc_payment\", \"supplier_invoice\""
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "delete_spend_category_by_id": {
        "name": "delete_spend_category_by_id",
        "description": "Deletes an existing spend category by its unique identifier.\n\nThe identifier must match the one returned during spend category creation. This operation is irreversible and will permanently remove the category.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "Unique ID of the spend category to delete."
            }
          },
          "required": [
            "external_id"
          ]
        }
      },
      "add_supplier_contacts_to_project_by_external_ids": {
        "name": "add_supplier_contacts_to_project_by_external_ids",
        "description": "Adds suppliers to a project using supplier contact external identifiers.\n\nThis endpoint links supplier contacts to an existing project by referencing their external identifiers. This is particularly useful for bulk-inviting suppliers already registered in the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_external_id": {
              "type": "string",
              "description": "External ID of the project to which suppliers should be added."
            },
            "supplier_contact_external_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "External IDs of the supplier contacts to add to the project."
            }
          },
          "required": [
            "project_external_id",
            "supplier_contact_external_ids"
          ]
        }
      },
      "remove_supplier_contacts_from_project_by_external_ids": {
        "name": "remove_supplier_contacts_from_project_by_external_ids",
        "description": "Removes suppliers from a project using supplier contact external identifiers.\n\nThis endpoint disassociates supplier contacts from a specific project using their external IDs. This is commonly used to manage supplier participation in projects dynamically.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_external_id": {
              "type": "string",
              "description": "External ID of the project from which suppliers are to be removed."
            },
            "supplier_contact_external_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "External IDs of the supplier contacts to remove from the project."
            }
          },
          "required": [
            "project_external_id",
            "supplier_contact_external_ids"
          ]
        }
      }
    },
    "azure": {
      "azmcp_appconfig_account_list": {
        "name": "azmcp_appconfig_account_list",
        "description": "List all App Configuration stores in a subscription.\n\nThis function retrieves and displays all App Configuration stores available in the\nspecified subscription. The results are returned as a list of dictionaries,\nwhere each dictionary contains details of an App Configuration store,\nincluding its name, ID, and location.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either\nthe GUID identifier or the display name of the Azure subscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options:\n'credential' (Azure CLI/managed identity), 'key' (access key),\nor 'connectionString'. Defaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name.\nThis can be either the GUID identifier or the display name of your\nAzure AD tenant. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for\nfailed operations before giving up. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry\nattempts. For exponential backoff, this value is used as the base.\nDefaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses\nconsistent delays, 'exponential' increases delay between attempts.\nDefaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in\nseconds. Operations taking longer than this will be cancelled.\nDefaults to None."
            }
          },
          "required": [
            "subscription"
          ]
        }
      },
      "azmcp_appconfig_kv_delete": {
        "name": "azmcp_appconfig_kv_delete",
        "description": "Delete a key-value pair from an App Configuration store.\n\nThis command removes the specified key-value pair from the store.\nIf a label is specified, only the labeled version is deleted. If no label is specified, the key-value with the matching\nkey and the default label will be deleted.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the App Configuration store (e.g., my-appconfig)."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to access within the App Configuration store."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "label": {
              "type": "string",
              "description": "The label to apply to the configuration key. Labels are used to group and organize settings."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "account_name",
            "key",
            "subscription"
          ]
        }
      },
      "azmcp_appconfig_kv_list": {
        "name": "azmcp_appconfig_kv_list",
        "description": "List all key-values in an App Configuration store.\n\nThis command retrieves and displays all key-value pairs\nfrom the specified store. Each key-value includes its key, value, label, content type, ETag, last modified\ntime, and lock status.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the App Configuration store (e.g., my-appconfig)."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "key": {
              "type": "string",
              "description": "Specifies the key filter, if any, to be used when retrieving\nkey-values. The filter can be an exact match, for example a filter of \"foo\"\nwould get all key-values with a key of \"foo\", or the filter can include a '*'\ncharacter at the end of the string for wildcard searches (e.g., 'App*').\nIf omitted all keys will be retrieved."
            },
            "label": {
              "type": "string",
              "description": "Specifies the label filter, if any, to be used when retrieving\nkey-values. The filter can be an exact match, for example a filter of \"foo\"\nwould get all key-values with a label of \"foo\", or the filter can include a '*'\ncharacter at the end of the string for wildcard searches (e.g., 'Prod*').\nThis filter is case-sensitive. If omitted, all labels will be retrieved."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For\nexponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless\nof the retry strategy."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays,\n'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations\ntaking longer than this will be cancelled."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "account_name",
            "subscription"
          ]
        }
      },
      "azmcp_appconfig_kv_lock": {
        "name": "azmcp_appconfig_kv_lock",
        "description": "Lock a key-value in an App Configuration store.\n\nThis function sets a key-value in an App Configuration store to read-only mode,\npreventing any modifications to its value. It requires an account name and key\nto be specified. Optionally, a label can be provided to lock a specific\nlabeled version of the key-value.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the App Configuration store (e.g., my-appconfig)."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to access within the App Configuration store."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'. Defaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base. Defaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts. Defaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled. Defaults to None."
            },
            "label": {
              "type": "string",
              "description": "The label to apply to the configuration key. Labels are used to group and organize settings. Defaults to None."
            }
          }
        }
      },
      "azmcp_appconfig_kv_set": {
        "name": "azmcp_appconfig_kv_set",
        "description": "Set a key-value setting in an App Configuration store.\n\nThis function sets a key-value setting in an App Configuration store. It creates or\nupdates a key-value setting with the specified value. An account name, key, and\nvalue must be specified. Optionally, a label can be specified; otherwise, the\ndefault label is used.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the\nGUID identifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the App Configuration store (e.g., my-appconfig)."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to access within the App Configuration store."
            },
            "value": {
              "type": "string",
              "description": "The value to set for the configuration key."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "label": {
              "type": "string",
              "description": "The label to apply to the configuration key. Labels are\nused to group and organize settings."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for\nfailed operations before giving up."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent\ndelays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can\nbe either the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "account_name",
            "key",
            "subscription",
            "value"
          ]
        }
      },
      "azmcp_appconfig_kv_show": {
        "name": "azmcp_appconfig_kv_show",
        "description": "Show a specific key-value setting in an App Configuration store.\n\nThis function retrieves and displays the value, label, content type, ETag,\nlast modified time, and lock status for a specific key-value setting.\nAn account name and key must be specified. Optionally, a label can be\nspecified; if no label is provided, the setting with the default label\nwill be retrieved.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the App Configuration store (e.g., my-appconfig)."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to access within the App Configuration store."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'.\nDefaults to None."
            },
            "label": {
              "type": "string",
              "description": "The label to apply to the configuration key. Labels are used\nto group and organize settings. Defaults to None, which implies the default\nlabel."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For\nexponential backoff, this value is used as the base. Defaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays,\n'exponential' increases delay between attempts. Defaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled. Defaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant.\nDefaults to None."
            }
          },
          "required": [
            "account_name",
            "key",
            "subscription"
          ]
        }
      },
      "azmcp_appconfig_kv_unlock": {
        "name": "azmcp_appconfig_kv_unlock",
        "description": "Unlock a key-value setting in an App Configuration store.\n\nThis command removes the read-only mode from a key-value setting, allowing modifications to its value.\nIt requires an account name and key to be specified. Optionally, a label can be specified to unlock\na specific labeled version of the setting; otherwise, the setting with the default label will be unlocked.",
        "parameters": {
          "type": "object",
          "properties": {
            "account_name": {
              "type": "string",
              "description": "The name of the App Configuration store (e.g., my-appconfig)."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to access within the App Configuration store."
            },
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "label": {
              "type": "string",
              "description": "The label to apply to the configuration key. Labels are used to group and organize settings."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "account_name",
            "key",
            "subscription"
          ]
        }
      },
      "azmcp_cosmos_account_list": {
        "name": "azmcp_cosmos_account_list",
        "description": "List all Cosmos DB accounts in a subscription.\n\nThis command retrieves and displays all Cosmos DB accounts available in the specified subscription. Results include account names and are returned as a JSON array.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'. (not implemented)"
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant. (not implemented)"
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up.(not implemented)"
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base. (not implemented)"
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy. (not implemented)"
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts. (not implemented)"
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled. (not implemented)"
            }
          },
          "required": [
            "subscription"
          ]
        }
      },
      "azmcp_cosmos_database_list": {
        "name": "azmcp_cosmos_database_list",
        "description": "List all databases in a Cosmos DB account.\n\nThis function retrieves and displays all databases available in the specified Cosmos DB account.\nResults include database names and are returned as a list of dictionaries, where each dictionary\nrepresents a database resource.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the Cosmos DB account to query (e.g., my-cosmos-account)."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'.\nDefaults to None. (not implemented)"
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant.\nDefaults to None. (not implemented)"
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up. Defaults to None. (not implemented)"
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base. Defaults to None. (not implemented)"
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy. Defaults to None. (not implemented)"
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays,\n'exponential' increases delay between attempts. Defaults to None. (not implemented)"
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled. Defaults to None. (not implemented)"
            }
          },
          "required": [
            "account_name",
            "subscription"
          ]
        }
      },
      "azmcp_cosmos_database_container_list": {
        "name": "azmcp_cosmos_database_container_list",
        "description": "List all containers in a Cosmos DB database.\n\nThis function retrieves and displays all containers within the specified database and Cosmos DB account.\nResults include container names and are returned as a JSON array. Both an account name and a\ndatabase name must be specified.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the Cosmos DB account to query (e.g., my-cosmos-account)."
            },
            "database_name": {
              "type": "string",
              "description": "The name of the database to query (e.g., my-database)."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'. (not implemented)"
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For\nexponential backoff, this value is used as the base. (not implemented)"
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless\nof the retry strategy. (not implemented)"
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up. (not implemented)"
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays,\n'exponential' increases delay between attempts. (not implemented)"
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations\ntaking longer than this will be cancelled. (not implemented)"
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant. (not implemented)"
            }
          },
          "required": [
            "account_name",
            "database_name",
            "subscription"
          ]
        }
      },
      "azmcp_keyvault_key_create": {
        "name": "azmcp_keyvault_key_create",
        "description": "Create a new key in an Azure Key Vault.\n\nThis function creates a key with the specified name and type in the given vault.\nKey types include RSA (RSA key pair), EC (Elliptic Curve key pair), and OCT (ES cryptographic pair).",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the\nGUID identifier or the display name of the Azure subscription to use."
            },
            "vault": {
              "type": "string",
              "description": "The name of the Key Vault."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to retrieve/modify from the Key Vault."
            },
            "key_type": {
              "type": "string",
              "description": "The type of key to create (RSA, EC)."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base.\nMust be a string representing a non-negative integer."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy.\nMust be a string representing a non-negative integer."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for\nfailed operations before giving up.\nMust be a string representing a non-negative integer."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent\ndelays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled.\nMust be a string representing a non-negative integer."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can\nbe either the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "key",
            "key_type",
            "subscription",
            "vault"
          ]
        }
      },
      "azmcp_keyvault_key_get": {
        "name": "azmcp_keyvault_key_get",
        "description": "Get a key from an Azure Key Vault.\n\nThis function retrieves and displays details about a specific key in the specified vault.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "vault": {
              "type": "string",
              "description": "The name of the Key Vault."
            },
            "key": {
              "type": "string",
              "description": "The name of the key to retrieve/modify from the Key Vault."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "key",
            "subscription",
            "vault"
          ]
        }
      },
      "azmcp_keyvault_key_list": {
        "name": "azmcp_keyvault_key_list",
        "description": "List all keys in an Azure Key Vault.\n\nThis command retrieves and displays the names of all keys stored in the specified vault.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "vault": {
              "type": "string",
              "description": "The name of the Key Vault."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "include_managed": {
              "type": "string",
              "description": "Whether or not to include managed keys in results."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant."
            }
          },
          "required": [
            "subscription",
            "vault"
          ]
        }
      },
      "azmcp_monitor_healthmodels_entity_gethealth": {
        "name": "azmcp_monitor_healthmodels_entity_gethealth",
        "description": "Gets the health of an entity from a specified Azure Monitor Health Model.\n\nThis function retrieves the health of a specific entity from an Azure Monitor Health Model.\nIt returns detailed entity health information. To perform this operation, the entity identifier,\nthe health model name, the Azure resource group, and the subscription must be provided.",
        "parameters": {
          "type": "object",
          "properties": {
            "entity": {
              "type": "string",
              "description": "The entity to get health for."
            },
            "model_name": {
              "type": "string",
              "description": "The name of the health model for which to get the health."
            },
            "resource_group": {
              "type": "string",
              "description": "The name of the Azure resource group. This is a logical container for Azure resources."
            },
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base. Defaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts. Defaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled. Defaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant. Defaults to None."
            }
          },
          "required": [
            "entity",
            "model_name",
            "resource_group",
            "subscription"
          ]
        }
      },
      "azmcp_monitor_workspace_list": {
        "name": "azmcp_monitor_workspace_list",
        "description": "List Log Analytics workspaces in a subscription.\n\nThis command retrieves all Log Analytics workspaces available in the specified Azure subscription,\ndisplaying their names, IDs, and other key properties. Use this command to identify\nworkspaces before querying their logs or tables.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'.\nDefaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant.\nDefaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base. Defaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent\ndelays, 'exponential' increases delay between attempts. Defaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled. Defaults to None."
            }
          },
          "required": [
            "subscription"
          ]
        }
      },
      "azmcp_monitor_table_list": {
        "name": "azmcp_monitor_table_list",
        "description": "List all tables in a Log Analytics workspace.\n\nThis function lists all tables in a specified Log Analytics workspace. It requires the workspace\nidentifier and returns the names and schemas of the tables. This information can be utilized\nfor constructing KQL (Kusto Query Language) queries.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource_group": {
              "type": "string",
              "description": "The name of the Azure resource group. This is a logical container for Azure resources."
            },
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "table_type": {
              "type": "string",
              "description": "The type of table to query. Options: 'CustomLog', 'AzureMetrics', etc."
            },
            "workspace": {
              "type": "string",
              "description": "The Log Analytics workspace ID or name. This can be either the unique identifier (GUID) or the display name of your workspace."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base. Defaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts. Defaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled. Defaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant. Defaults to None."
            }
          },
          "required": [
            "resource_group",
            "subscription",
            "table_type",
            "workspace"
          ]
        }
      },
      "azmcp_monitor_table_type_list": {
        "name": "azmcp_monitor_table_type_list",
        "description": "List available table types in a Log Analytics workspace. Returns table type names.\n\nThis function lists the available table types within a specified Log Analytics workspace.\nIt returns a list containing the names of these table types.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "workspace": {
              "type": "string",
              "description": "The Log Analytics workspace ID or name. This can be either the\nunique identifier (GUID) or the display name of your workspace."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent\ndelays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled."
            }
          },
          "required": [
            "subscription",
            "workspace"
          ]
        }
      },
      "azmcp_storage_account_list": {
        "name": "azmcp_storage_account_list",
        "description": "List all Storage accounts in a subscription.\n\nThis command retrieves all Storage accounts available in the specified\nsubscription. Results include account names and are returned as a JSON array.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be\neither the GUID identifier or the display name of the Azure\nsubscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options:\n'credential' (Azure CLI/managed identity), 'key' (access key),\nor 'connectionString'. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry\nattempts. For exponential backoff, this value is used as the base.\nDefaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between\nretries, regardless of the retry strategy. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts\nfor failed operations before giving up. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses\nconsistent delays, 'exponential' increases delay between attempts.\nDefaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in\nseconds. Operations taking longer than this will be cancelled.\nDefaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name.\nThis can be either the GUID identifier or the display name of your\nAzure AD tenant. Defaults to None."
            }
          },
          "required": [
            "subscription"
          ]
        }
      },
      "azmcp_storage_blob_container_list": {
        "name": "azmcp_storage_blob_container_list",
        "description": "List all containers in a Storage account.\n\nThis command retrieves and displays all containers available in the specified account.\nResults include container names and are returned as a JSON array. Requires account-name.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID\nidentifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the Azure Storage account. This is the unique name\nyou chose for your storage account (e.g., 'mystorageaccount')."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be\neither the GUID identifier or the display name of your Azure AD tenant."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed\noperations before giving up."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For\nexponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays,\n'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled."
            }
          },
          "required": [
            "account_name",
            "subscription"
          ]
        }
      },
      "azmcp_storage_blob_container_details": {
        "name": "azmcp_storage_blob_container_details",
        "description": "Gets detailed properties of a storage container including metadata, lease status, and access level.\n\nThis function gets detailed properties of a storage container, including its metadata,\nlease status, and access level. It requires an account-name and container-name\nfor identification of the target container.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the GUID identifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the Azure Storage account. This is the unique name you chose for your storage account (e.g., 'mystorageaccount')."
            },
            "container_name": {
              "type": "string",
              "description": "The name of the container to access within the storage account."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled."
            }
          },
          "required": [
            "account_name",
            "container_name",
            "subscription"
          ]
        }
      },
      "azmcp_storage_blob_list": {
        "name": "azmcp_storage_blob_list",
        "description": "List all blobs in a Storage container.\n\nThis command retrieves and displays all blobs available in the specified\ncontainer and Storage account. Results include blob names, sizes, and\ncontent types, returned as a JSON array. Requires account-name and\ncontainer-name.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be\neither the GUID identifier or the display name of the Azure\nsubscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the Azure Storage account. This is the\nunique name you chose for your storage account (e.g.,\n'mystorageaccount')."
            },
            "container_name": {
              "type": "string",
              "description": "The name of the container to access within the\nstorage account."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options:\n'credential' (Azure CLI/managed identity), 'key' (access key),\nor 'connectionString'. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry\nattempts. For exponential backoff, this value is used as the base.\nDefaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between\nretries, regardless of the retry strategy. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts\nfor failed operations before giving up. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses\nconsistent delays, 'exponential' increases delay between attempts.\nDefaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in\nseconds. Operations taking longer than this will be cancelled.\nDefaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name.\nThis can be either the GUID identifier or the display name of your\nAzure AD tenant. Defaults to None."
            }
          },
          "required": [
            "account_name",
            "container_name",
            "subscription"
          ]
        }
      },
      "azmcp_storage_table_list": {
        "name": "azmcp_storage_table_list",
        "description": "List all tables in a Storage account.\n\nThis function retrieves and displays all tables available in the specified Storage\naccount. Results include table names and are returned as a list of dictionaries.\nIt requires an account name and subscription ID. This function is used to explore\nStorage resources or to verify table existence before performing operations on\nspecific tables.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either\nthe GUID identifier or the display name of the Azure subscription to use."
            },
            "account_name": {
              "type": "string",
              "description": "The name of the Azure Storage account. This is the unique\nname you chose for your storage account (e.g., 'mystorageaccount')."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options:\n'credential' (Azure CLI/managed identity), 'key' (access key),\nor 'connectionString'. Defaults to None."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This\ncan be either the GUID identifier or the display name of your Azure AD\ntenant. Defaults to None."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for\nfailed operations before giving up. Defaults to None."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base. Defaults to None."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy. Defaults to None."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent\ndelays, 'exponential' increases delay between attempts. Defaults to None."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled. Defaults to None."
            }
          },
          "required": [
            "account_name",
            "subscription"
          ]
        }
      },
      "azmcp_subscription_list": {
        "name": "azmcp_subscription_list",
        "description": "List all Azure subscriptions accessible to your account.\n\nThis function lists all Azure subscriptions accessible to the account. It optionally allows specifying a tenant and authentication method. Results include subscription names and IDs, returned as a list of dictionaries.",
        "parameters": {
          "type": "object",
          "properties": {
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for failed operations before giving up."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries, regardless of the retry strategy."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds. Operations taking longer than this will be cancelled."
            }
          }
        }
      },
      "azmcp_group_list": {
        "name": "azmcp_group_list",
        "description": "List all resource groups in a subscription.\n\nThis function retrieves all resource groups available in the specified subscription.\nResults include resource group names and IDs, returned as a list of dictionaries,\nwhere each dictionary represents a resource group.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The Azure subscription ID or name. This can be either the\nGUID identifier or the display name of the Azure subscription to use."
            },
            "auth_method": {
              "type": "string",
              "description": "Authentication method to use. Options: 'credential'\n(Azure CLI/managed identity), 'key' (access key), or 'connectionString'."
            },
            "tenant": {
              "type": "string",
              "description": "The Azure Active Directory tenant ID or name. This can\nbe either the GUID identifier or the display name of your Azure AD tenant."
            },
            "retry_max_retries": {
              "type": "string",
              "description": "Maximum number of retry attempts for\nfailed operations before giving up. Expected to be a string representing an integer."
            },
            "retry_delay": {
              "type": "string",
              "description": "Initial delay in seconds between retry attempts.\nFor exponential backoff, this value is used as the base. Expected to be a string representing an integer."
            },
            "retry_max_delay": {
              "type": "string",
              "description": "Maximum delay in seconds between retries,\nregardless of the retry strategy. Expected to be a string representing an integer."
            },
            "retry_mode": {
              "type": "string",
              "description": "Retry strategy to use. 'fixed' uses consistent\ndelays, 'exponential' increases delay between attempts."
            },
            "retry_network_timeout": {
              "type": "string",
              "description": "Network operation timeout in seconds.\nOperations taking longer than this will be cancelled. Expected to be a string representing an integer."
            }
          },
          "required": [
            "subscription"
          ]
        }
      }
    },
    "google_meet": {
      "update_meeting_space": {
        "name": "update_meeting_space",
        "description": "Updates details about a meeting space.\n\nThis function modifies the specified fields of an existing meeting space. Only fields\nthat are included in the update_mask will be changed.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the space to update."
            },
            "update_mask": {
              "type": "object",
              "properties": {},
              "description": "A dictionary containing the fields to update\nand their new values. If provided, known fields like 'id', 'meetingCode',\n'meetingUri', 'accessType', 'entryPointAccess' must adhere to their\nexpected types (typically string). Additional arbitrary fields and their\nvalues are also permitted, aligning with the Pydantic model SpaceUpdateMaskModel."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_meeting_space_details": {
        "name": "get_meeting_space_details",
        "description": "Gets details about a meeting space.\n\nRetrieves comprehensive information about a specific meeting space.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the space to retrieve."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "create_meeting_space": {
        "name": "create_meeting_space",
        "description": "Creates a new meeting space.\n\nThis function adds a new meeting space to the database with the specified\nname and content details.",
        "parameters": {
          "type": "object",
          "properties": {
            "space_name": {
              "type": "string",
              "description": "The name of the new space. Must be a non-empty string."
            },
            "space_content": {
              "type": "object",
              "properties": {
                "meetingCode": {
                  "type": "string",
                  "description": "A unique code for joining the meeting"
                },
                "meetingUri": {
                  "type": "string",
                  "description": "A URI that can be used to join the meeting"
                },
                "accessType": {
                  "type": "string",
                  "description": "The access level for the space"
                }
              },
              "description": "A dictionary containing the details of the new space.",
              "required": [
                "accessType",
                "meetingCode",
                "meetingUri"
              ]
            }
          },
          "required": [
            "space_content",
            "space_name"
          ]
        }
      },
      "end_active_conference_in_space": {
        "name": "end_active_conference_in_space",
        "description": "Ends an active conference in a meeting space, if one exists.\n\nThis function removes the activeConference field from the specified space,\neffectively marking any active conference as ended.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the space."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_conference_recording": {
        "name": "get_conference_recording",
        "description": "Gets a recording by recording ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name of the recording."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_conference_recordings": {
        "name": "list_conference_recordings",
        "description": "Lists the recordings of a conference.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "The parent resource name."
            },
            "parent_conference_record": {
              "type": "string",
              "description": "The parent conference record."
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of recordings to return."
            },
            "pageToken": {
              "type": "string",
              "description": "The token for continued list pagination."
            }
          },
          "required": [
            "parent",
            "parent_conference_record"
          ]
        }
      },
      "get_conference_record": {
        "name": "get_conference_record",
        "description": "Gets a conference record by conference ID.\n\nRetrieves detailed information about a specific conference record.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name of the conference to retrieve."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_conference_records": {
        "name": "list_conference_records",
        "description": "Lists the conference records.\n\nRetrieves a list of conference records with optional filtering and pagination.\nBy default, results are ordered by start time in descending order (most recent first).",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "string",
              "description": "An optional filter string to apply to the records. The filter is applied\nto the string representation of each record object."
            },
            "pageToken": {
              "type": "string",
              "description": "An optional token for pagination, representing the start index."
            },
            "pageSize": {
              "type": "integer",
              "description": "An optional maximum number of records to return per page."
            }
          }
        }
      },
      "get_conference_transcript": {
        "name": "get_conference_transcript",
        "description": "Gets a transcript by transcript ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name of the transcript."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_conference_transcript": {
        "name": "list_conference_transcript",
        "description": "Lists the transcripts of a conference.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "The parent resource name."
            },
            "parent_conference_record": {
              "type": "string",
              "description": "The parent conference record."
            },
            "pageToken": {
              "type": "string",
              "description": "The token for continued list pagination."
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of transcripts to return."
            }
          },
          "required": [
            "parent",
            "parent_conference_record"
          ]
        }
      },
      "get_transcript_entry": {
        "name": "get_transcript_entry",
        "description": "Gets a transcript entry by entry ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name of the entry."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_transcript_entries": {
        "name": "list_transcript_entries",
        "description": "Lists the entries of a transcript.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "The parent transcript resource name."
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of entries to return."
            },
            "pageToken": {
              "type": "string",
              "description": "The token for continued list pagination."
            }
          },
          "required": [
            "parent"
          ]
        }
      },
      "list_participant_sessions": {
        "name": "list_participant_sessions",
        "description": "Lists the sessions of a participant.\n\nRetrieves all sessions associated with the specified participant, with optional\nfiltering and pagination. Results are sorted by join time in ascending order.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "The parent participant resource name (participant ID)."
            },
            "filter": {
              "type": "string",
              "description": "An optional filter string to apply to the sessions. The filter is applied\nto the string representation of each session object."
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of sessions to return per page."
            },
            "pageToken": {
              "type": "string",
              "description": "The token for continued list pagination, representing the start index."
            }
          },
          "required": [
            "parent"
          ]
        }
      },
      "get_participant_session": {
        "name": "get_participant_session",
        "description": "Gets a participant session by session ID.\n\nRetrieves detailed information about a specific participant session.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name (ID) of the session to retrieve."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_conference_participant": {
        "name": "get_conference_participant",
        "description": "Gets a participant by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name of the participant."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_conference_participants": {
        "name": "list_conference_participants",
        "description": "Lists participants of a conference record.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "The parent conference record resource name."
            },
            "pageSize": {
              "type": "integer",
              "description": "The maximum number of participants to return."
            },
            "pageToken": {
              "type": "string",
              "description": "The token for continued list pagination."
            }
          },
          "required": [
            "parent"
          ]
        }
      }
    },
    "contacts": {
      "list_contacts": {
        "name": "list_contacts",
        "description": "List all contacts or filter by name.\n\nLists all your Google contacts or filters them by name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name_filter": {
              "type": "string",
              "description": "String to filter contacts by name. If None, all contacts are returned."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of contacts to return (default: 100)."
            }
          }
        }
      },
      "create_contact": {
        "name": "create_contact",
        "description": "Creates a new contact in your Google Contacts.\n\nThis function creates a new contact entry in Google Contacts using the provided personal details.",
        "parameters": {
          "type": "object",
          "properties": {
            "given_name": {
              "type": "string",
              "description": "First name of the contact."
            },
            "family_name": {
              "type": "string",
              "description": "Last name of the contact."
            },
            "email": {
              "type": "string",
              "description": "Email address of the contact."
            },
            "phone": {
              "type": "string",
              "description": "Phone number of the contact."
            }
          },
          "required": [
            "given_name"
          ]
        }
      },
      "get_contact": {
        "name": "get_contact",
        "description": "Retrieves detailed information about a specific contact.\n\nThis function gets a contact by their resource name or email address, retrieving detailed information for that specific contact.",
        "parameters": {
          "type": "object",
          "properties": {
            "identifier": {
              "type": "string",
              "description": "Resource name (`people/*`) or email address of the contact."
            }
          },
          "required": [
            "identifier"
          ]
        }
      },
      "update_contact": {
        "name": "update_contact",
        "description": "Updates an existing contact with new information.\n\nThis function updates an existing contact by applying the provided new details. At least one optional parameter must be provided to perform an update.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource_name": {
              "type": "string",
              "description": "Contact resource name (`people/*`)."
            },
            "given_name": {
              "type": "string",
              "description": "Updated first name."
            },
            "family_name": {
              "type": "string",
              "description": "Updated last name."
            },
            "email": {
              "type": "string",
              "description": "Updated email address."
            },
            "phone": {
              "type": "string",
              "description": "Updated phone number."
            }
          },
          "required": [
            "resource_name"
          ]
        }
      },
      "delete_contact": {
        "name": "delete_contact",
        "description": "Deletes a contact by resource name from your Google Contacts.\n\nThis function deletes a contact from Google Contacts using its specified resource name. Directory contacts or 'otherContacts' cannot be deleted via this method.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource_name": {
              "type": "string",
              "description": "Contact resource name (`people/*`) to delete."
            }
          },
          "required": [
            "resource_name"
          ]
        }
      },
      "search_contacts": {
        "name": "search_contacts",
        "description": "Search contacts by name, email, or phone number.\n\nThis function searches for contacts using a provided search term. The number of results returned can be limited.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search term to find in contacts; matches against names, emails, and phone numbers."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of results to return (default: 10). Must be a positive integer."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "list_workspace_users": {
        "name": "list_workspace_users",
        "description": "Lists Google Workspace users in your organization's directory.\n\nThis function lists users from the Google Workspace directory. It allows for\nfiltering the results based on a search term and controlling the number of\nusers returned in a single request.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search term to find specific users. The search\nlooks through names, email addresses, and phone numbers."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of results to return.\nMust be a positive integer. Defaults to 50."
            }
          }
        }
      },
      "search_directory": {
        "name": "search_directory",
        "description": "Performs a targeted search of your organization's Google Workspace directory.\n\nSearches for people in the Google Workspace directory.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search term to find directory members by name, email, or phone number."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of results to return."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "get_other_contacts": {
        "name": "get_other_contacts",
        "description": "Retrieves contacts from the 'Other contacts' section.\n\nRetrieves contacts from the 'Other contacts' section, which contains people you have interacted with but not explicitly added to your contacts.",
        "parameters": {
          "type": "object",
          "properties": {
            "max_results": {
              "type": "integer",
              "description": "Maximum number of results to return. Must be a positive integer. Defaults to 50."
            }
          }
        }
      }
    },
    "canva": {
      "create_autofill_job": {
        "name": "create_autofill_job",
        "description": "Creates an asynchronous job to autofill a design from a brand template with input data.",
        "parameters": {
          "type": "object",
          "properties": {
            "brand_template_id": {
              "type": "string",
              "description": "ID of the input brand template."
            },
            "data": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Required. One of \"image\", \"text\", or \"chart\"."
                },
                "asset_id": {
                  "type": "string",
                  "description": "Required if type is \"image\"."
                },
                "text": {
                  "type": "string",
                  "description": "Required if type is \"text\"."
                },
                "chart_data": {
                  "type": "object",
                  "description": "Required if type is \"chart\". Structure:",
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cells": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "One of \"string\", \"number\", \"boolean\", \"date\"."
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            "description": "List of cells, each with:"
                          }
                        },
                        "required": [
                          "cells"
                        ]
                      },
                      "description": "List of rows, where each row contains:"
                    }
                  },
                  "required": [
                    "rows"
                  ]
                }
              },
              "description": "Dictionary of data fields to autofill. Each key maps to a field object with:",
              "required": [
                "type"
              ]
            },
            "title": {
              "type": "string",
              "description": "Optional title for the autofilled design. If not provided, defaults to the template's title."
            }
          },
          "required": [
            "brand_template_id",
            "data"
          ]
        }
      },
      "get_autofill_job": {
        "name": "get_autofill_job",
        "description": "Retrieves the status and results of an autofill job by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "job_id": {
              "type": "string",
              "description": "The ID of the autofill job to retrieve."
            }
          },
          "required": [
            "job_id"
          ]
        }
      },
      "create_folder": {
        "name": "create_folder",
        "description": "Creates a new folder with the given name under the specified parent folder.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the new folder (1\u2013255 characters)."
            },
            "parent_folder_id": {
              "type": "string",
              "description": "ID of the parent folder (1\u201350 characters)."
            }
          },
          "required": [
            "name",
            "parent_folder_id"
          ]
        }
      },
      "get_folder": {
        "name": "get_folder",
        "description": "Retrieves metadata for a specific folder.",
        "parameters": {
          "type": "object",
          "properties": {
            "folder_id": {
              "type": "string",
              "description": "ID of the folder to retrieve."
            }
          },
          "required": [
            "folder_id"
          ]
        }
      },
      "update_folder": {
        "name": "update_folder",
        "description": "Updates the name of a folder and its modification timestamp.",
        "parameters": {
          "type": "object",
          "properties": {
            "folder_id": {
              "type": "string",
              "description": "ID of the folder to update."
            },
            "name": {
              "type": "string",
              "description": "New name for the folder (1\u2013255 characters)."
            }
          },
          "required": [
            "folder_id",
            "name"
          ]
        }
      },
      "delete_folder": {
        "name": "delete_folder",
        "description": "Deletes a folder and all its contents recursively.",
        "parameters": {
          "type": "object",
          "properties": {
            "folder_id": {
              "type": "string",
              "description": "ID of the folder to delete."
            }
          },
          "required": [
            "folder_id"
          ]
        }
      },
      "list_folder_items": {
        "name": "list_folder_items",
        "description": "Lists items (folders, designs, images) within a specified folder.",
        "parameters": {
          "type": "object",
          "properties": {
            "folder_id": {
              "type": "string",
              "description": "The ID of the folder to list items from."
            },
            "item_types": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Comma-delimited list of item types to filter by.\nValid values: \"folder\", \"design\", \"image\"."
            },
            "sort_by": {
              "type": "string",
              "description": "Field used to sort the results.\nValid values:\n- \"created_ascending\"\n- \"created_descending\"\n- \"modified_ascending\"\n- \"modified_descending\" (default)\n- \"title_ascending\"\n- \"title_descending\""
            },
            "continuation": {
              "type": "string",
              "description": "Continuation token for paginated responses."
            }
          },
          "required": [
            "folder_id"
          ]
        }
      },
      "get_brand_template": {
        "name": "get_brand_template",
        "description": "Retrieve a brand template by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "brand_template_id": {
              "type": "string",
              "description": "The ID of the brand template."
            }
          },
          "required": [
            "brand_template_id"
          ]
        }
      },
      "get_brand_template_dataset": {
        "name": "get_brand_template_dataset",
        "description": "Gets the dataset definition of a brand template. If the brand template contains autofill data fields,\n\nthis returns an object with the data field names and the type of data they accept.",
        "parameters": {
          "type": "object",
          "properties": {
            "brand_template_id": {
              "type": "string",
              "description": "The brand template ID."
            }
          },
          "required": [
            "brand_template_id"
          ]
        }
      },
      "list_brand_templates": {
        "name": "list_brand_templates",
        "description": "List brand templates with optional filters and sorting.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search term to filter brand templates by title."
            },
            "continuation": {
              "type": "string",
              "description": "Token for pagination (currently unused)."
            },
            "ownership": {
              "type": "string",
              "description": "Ownership filter ('any', 'owned', 'shared')."
            },
            "sort_by": {
              "type": "string",
              "description": "Sort order ('relevance', 'modified_descending', etc.)."
            },
            "dataset": {
              "type": "string",
              "description": "Filter based on dataset presence ('any', 'non_empty', 'empty')."
            }
          }
        }
      },
      "get_asset_upload_job": {
        "name": "get_asset_upload_job",
        "description": "Retrieves the status and result of an asset upload job.",
        "parameters": {
          "type": "object",
          "properties": {
            "job_id": {
              "type": "string",
              "description": "The ID of the asset upload job."
            }
          },
          "required": [
            "job_id"
          ]
        }
      },
      "get_asset": {
        "name": "get_asset",
        "description": "Retrieves metadata for a specific asset by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "asset_id": {
              "type": "string",
              "description": "The ID of the asset to retrieve."
            }
          },
          "required": [
            "asset_id"
          ]
        }
      },
      "delete_asset": {
        "name": "delete_asset",
        "description": "Deletes an asset by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "asset_id": {
              "type": "string",
              "description": "The ID of the asset to delete."
            }
          },
          "required": [
            "asset_id"
          ]
        }
      },
      "get_current_user": {
        "name": "get_current_user",
        "description": "Retrieves the team-related user information for the given user ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "Unique identifier of the user."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "get_current_user_profile": {
        "name": "get_current_user_profile",
        "description": "Retrieves the profile data for the given user ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "Unique identifier of the user."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "create_design": {
        "name": "create_design",
        "description": "Creates a new design with specified design type, asset, and title.",
        "parameters": {
          "type": "object",
          "properties": {
            "design_type": {
              "type": "object",
              "description": "The design type to use with the following key:\n- \"preset\": Accepted values for preset are:\n- doc\n- whiteboard\n- presentation\n- canvas\n- banner\n- flyer\n- social\n- video\n- presentation\n- infographic\n- poster"
            },
            "asset_id": {
              "type": "string",
              "description": "The ID of the asset (e.g., image) to include in the design.\nMust be a non-empty string."
            },
            "title": {
              "type": "string",
              "description": "Title of the design. Must be 1\u2013255 characters."
            }
          },
          "required": [
            "asset_id",
            "design_type",
            "title"
          ]
        }
      },
      "list_designs": {
        "name": "list_designs",
        "description": "Lists user-owned and shared designs, optionally filtered and sorted.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search term to filter designs by title (max length: 255)."
            },
            "ownership": {
              "type": "string",
              "description": "Filter by ownership - \"any\", \"owned\", or \"shared\".\nDefaults to \"any\"."
            },
            "sort_by": {
              "type": "string",
              "description": "Sort options - \"relevance\", \"modified_descending\", \"modified_ascending\",\n\"title_descending\", \"title_ascending\". Defaults to \"relevance\"."
            }
          }
        }
      },
      "get_design": {
        "name": "get_design",
        "description": "Retrieves metadata for a single design.",
        "parameters": {
          "type": "object",
          "properties": {
            "design_id": {
              "type": "string",
              "description": "The ID of the design. Must be a non-empty string."
            }
          },
          "required": [
            "design_id"
          ]
        }
      },
      "get_design_pages": {
        "name": "get_design_pages",
        "description": "Retrieves pages from a design, with support for pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "design_id": {
              "type": "string",
              "description": "The ID of the design to retrieve pages from."
            },
            "offset": {
              "type": "integer",
              "description": "The index of the first page to return (1-based). Default is 1.\nMin: 1, Max: 500."
            },
            "limit": {
              "type": "integer",
              "description": "The number of pages to return. Default is 50.\nMin: 1, Max: 200."
            }
          },
          "required": [
            "design_id"
          ]
        }
      }
    },
    "shopify": {
      "get_customer_by_id": {
        "name": "get_customer_by_id",
        "description": "Retrieves a single customer by their unique identifier with optional field selection.\n\nThis endpoint fetches complete customer information for a specific customer ID. You can optimize the response by requesting only specific fields, which is useful for reducing payload size when you only need certain customer attributes. The function returns comprehensive customer data including personal information, order statistics, addresses, and account metadata.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "The unique identifier for the customer. Must be a non-empty string representing the customer's ID in the system.\nExamples: '207119551', 'cust_abc123', '1073339462'."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific customer fields to include in the response. Each field name must be a valid customer attribute. Supports nested field access for addresses.\nExamples: ['id', 'email', 'first_name'] (basic info), ['id', 'orders_count', 'total_spent'] (order data), ['default_address', 'addresses'] (address info).\nDefault is None (all available fields)."
            }
          },
          "required": [
            "customer_id"
          ]
        }
      },
      "search_customers": {
        "name": "search_customers",
        "description": "Searches for customers using flexible query syntax with support for filtering, pagination, and field selection.\n\nThis endpoint enables powerful customer search capabilities using Shopify's query language syntax. You can search by customer attributes like email, name, phone, tags, order count, and dates. The function supports cursor-based pagination for handling large result sets and allows selective field retrieval to optimize response size. Results can be sorted by various customer fields in ascending or descending order.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query string using Shopify query syntax. Supports field-specific searches, comparison operators, and logical combinations.\nExamples: 'Bob Norman' (name search), 'email:bob.norman@mail.example.com' (exact email), 'orders_count:>5' (customers with more than 5 orders), 'tag:VIP AND created_at:>2023-01-01' (VIP customers created after date), 'phone:+1*' (phone numbers starting with +1)."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of customer results to retrieve. Must be between 1 and 250.\nDefault is 50."
            },
            "page_info": {
              "type": "string",
              "description": "Pagination token for cursor-based navigation. Use the next_page_token from a previous response to get the next page of results.\nDefault is None (first page)."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific customer fields to include in the response. Supports nested field access using dot notation.\nExamples: ['id', 'email', 'first_name'] (basic fields), ['id', 'default_address.city', 'addresses.country'] (nested fields).\nDefault is None (all available fields)."
            },
            "order": {
              "type": "string",
              "description": "Sort order specification in format 'field_name DIRECTION'. Field must be a valid sortable customer field, direction must be 'ASC' or 'DESC'.\nExamples: 'updated_at DESC', 'orders_count ASC', 'last_name ASC'.\nDefault is None (sorted by customer ID ascending)."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "list_customers": {
        "name": "list_customers",
        "description": "Retrieves a filtered list of customers with support for date ranges, field selection, and pagination.\n\nThis endpoint provides comprehensive customer listing capabilities with multiple filtering options including creation and update date ranges, specific customer ID selection, and field-level response customization. The function supports both offset-based pagination via since_id and result limiting for efficient data retrieval. You can optimize response payload by requesting only specific customer fields, making it ideal for bulk customer operations and data synchronization tasks.",
        "parameters": {
          "type": "object",
          "properties": {
            "created_at_max": {
              "type": "string",
              "description": "Filter customers created before this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-12-31T23:59:59Z', '2024-01-01T00:00:00+00:00'.\nDefault is None (no upper date limit)."
            },
            "created_at_min": {
              "type": "string",
              "description": "Filter customers created after this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-01-01T00:00:00Z', '2024-01-01T00:00:00+00:00'.\nDefault is None (no lower date limit)."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific customer fields to include in each response object. Reduces payload size when only certain data is needed.\nExamples: ['id', 'email', 'first_name'] (basic info), ['id', 'orders_count', 'total_spent'] (order metrics), ['email', 'tags', 'state'] (marketing data).\nDefault is None (all available fields)."
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific customer IDs to retrieve. When provided, only customers with these IDs are returned.\nExamples: ['207119551', '1073339462'], ['cust_abc123', 'cust_def456'].\nDefault is None (no ID filtering)."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of customers to return in a single response. Must be between 1 and 250.\nExamples: 10 (small batch), 50 (default), 250 (maximum).\nDefault is 50."
            },
            "since_id": {
              "type": "integer",
              "description": "Return customers with IDs greater than this value for pagination. Used for offset-based pagination.\nExamples: 207119551, 1073339462.\nDefault is None (start from beginning)."
            },
            "updated_at_max": {
              "type": "string",
              "description": "Filter customers last updated before this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-12-31T23:59:59Z'.\nDefault is None (no upper update date limit)."
            },
            "updated_at_min": {
              "type": "string",
              "description": "Filter customers last updated after this date. Must be in ISO 8601 format with timezone.\nExamples: '2014-04-25T16:15:47-04:00', '2023-01-01T00:00:00Z'.\nDefault is None (no lower update date limit)."
            }
          }
        }
      },
      "get_customer_orders": {
        "name": "get_customer_orders",
        "description": "Retrieves all orders belonging to a specific customer with comprehensive filtering and field selection capabilities.\n\nThis endpoint provides access to a customer's complete order history with flexible filtering options including order status, creation date ranges, and financial status. By default, only open orders are returned to focus on active business. The function supports field-level response customization to optimize payload size and includes comprehensive order details including line items, pricing, and customer information for each returned order.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "The unique identifier of the customer whose orders should be retrieved. Must be a non-empty string representing a valid customer ID in the system.\nExamples: '207119551', 'cust_abc123', '1073339462'."
            },
            "status": {
              "type": "string",
              "description": "Filter orders by their current status. Controls which orders are included based on their lifecycle state.\nValid values: 'open' (active orders), 'closed' (completed orders), 'cancelled' (cancelled orders), 'any' (all orders regardless of status).\nDefault is 'open'."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of orders to return in a single response. Must be between 1 and 250 for performance optimization.\nExamples: 10 (small batch), 50 (default), 250 (maximum).\nDefault is 50."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific order fields to include in each response object. Reduces payload size when only certain data is needed.\nExamples: ['id', 'order_number', 'total_price'] (basic info), ['id', 'line_items', 'financial_status'] (detailed order data), ['created_at', 'total_price', 'currency'] (financial summary).\nDefault is None (all available fields)."
            },
            "created_at_min": {
              "type": "string",
              "description": "Filter orders created after this date. Must be in ISO 8601 format with timezone information.\nExamples: '2024-01-01T00:00:00Z', '2024-01-01T00:00:00+00:00', '2023-12-01T00:00:00-05:00'.\nDefault is None (no lower date limit)."
            },
            "created_at_max": {
              "type": "string",
              "description": "Filter orders created before this date. Must be in ISO 8601 format with timezone information.\nExamples: '2024-12-31T23:59:59Z', '2024-12-31T23:59:59+00:00', '2024-01-31T23:59:59-05:00'.\nDefault is None (no upper date limit)."
            },
            "financial_status": {
              "type": "string",
              "description": "Filter orders by their payment and financial processing status.\nExamples: 'pending' (awaiting payment), 'paid' (fully paid), 'partially_paid' (partial payment received), 'refunded' (payment returned), 'voided' (payment cancelled).\nDefault is None (no financial status filtering)."
            },
            "since_id": {
              "type": "string",
              "description": "Return only orders with IDs greater than this value for offset-based pagination. Useful for retrieving orders in batches.\nExamples: '450789469', 'order_123456', '1073339462'.\nDefault is None (start from beginning)."
            }
          },
          "required": [
            "customer_id"
          ]
        }
      },
      "list_products": {
        "name": "list_products",
        "description": "Retrieves a list of products with comprehensive filtering and pagination support.\n\nThis function provides access to the store's product catalog with extensive filtering capabilities\nincluding collection membership, date ranges, product types, and field selection. Supports\nreal-world pagination through since_id and multi-currency pricing information.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "Return products belonging to a specific product collection ID.\nSupports both manual collections (explicit product lists) and smart collections (rule-based\nautomatic inclusion based on product attributes like type, vendor, tags, etc.).\nExample: 'coll_1001'"
            },
            "created_at_max": {
              "type": "string",
              "description": "Return products created before a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
            },
            "created_at_min": {
              "type": "string",
              "description": "Return products created after a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of field names to retrieve for each product. \nAvailable fields include: admin_graphql_api_id, body_html, created_at, handle, id, image, \nimages, options, product_type, published_at, published_scope, status, tags, template_suffix, \ntitle, updated_at, variants, vendor. If None or empty, all available fields are returned.\nExample: ['id', 'title', 'product_type']"
            },
            "handle": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of product handles to retrieve. Handles are human-friendly\nunique strings used in URLs and themes."
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of product IDs to retrieve. Useful for fetching specific products."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to retrieve per page. Default: 50, Maximum: 250."
            },
            "presentment_currencies": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of ISO 4217 currency codes to return \npresentment prices in. When provided, each variant will include a 'presentment_prices' array\nwith currency-specific pricing. Supported currencies: USD, EUR, GBP, CAD, AUD, JPY.\nExample: ['USD', 'EUR', 'CAD']"
            },
            "product_type": {
              "type": "string",
              "description": "Filter products by product type. Case-insensitive matching."
            },
            "published_at_max": {
              "type": "string",
              "description": "Return products published before a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
            },
            "published_at_min": {
              "type": "string",
              "description": "Return products published after a specified date (ISO 8601 format).\nExample: '2014-04-25T16:15:47-04:00'"
            },
            "since_id": {
              "type": "string",
              "description": "Return only products after the specified ID. Essential for cursor-based\npagination in production environments. Products are sorted by ID for consistent pagination."
            }
          }
        }
      },
      "create_order": {
        "name": "create_order",
        "description": "Creates an order with comprehensive customer, financial, and inventory management.\n\nThis endpoint creates complete orders with detailed line items, customer linking, address management, \nfinancial processing including gift card payments, and inventory control. The system supports both \nexisting and new customer creation, automatic transaction processing, and flexible inventory behavior \npolicies for different fulfillment scenarios.",
        "parameters": {
          "type": "object",
          "properties": {
            "order": {
              "type": "object",
              "properties": {
                "billing_address": {
                  "type": "object",
                  "description": "Customer's billing address dict with keys:",
                  "properties": {
                    "first_name": {
                      "type": "object",
                      "description": "Billing recipient's first name"
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Billing recipient's last name"
                    },
                    "address1": {
                      "type": "object",
                      "description": "Primary street address line"
                    },
                    "address2": {
                      "type": "object",
                      "description": "Secondary address line (apartment, suite, etc.)"
                    },
                    "city": {
                      "type": "object",
                      "description": "City name"
                    },
                    "province": {
                      "type": "object",
                      "description": "State or province name"
                    },
                    "country": {
                      "type": "object",
                      "description": "Country name"
                    },
                    "zip": {
                      "type": "object",
                      "description": "Postal or ZIP code"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Contact phone number"
                    },
                    "company": {
                      "type": "object",
                      "description": "Company name"
                    },
                    "latitude": {
                      "type": "object",
                      "description": "Geographic latitude coordinate"
                    },
                    "longitude": {
                      "type": "object",
                      "description": "Geographic longitude coordinate"
                    },
                    "province_code": {
                      "type": "object",
                      "description": "Two-letter province/state code"
                    },
                    "country_code": {
                      "type": "object",
                      "description": "Two-letter ISO country code"
                    },
                    "country_name": {
                      "type": "object",
                      "description": "Full country name"
                    }
                  },
                  "required": [
                    "first_name",
                    "last_name"
                  ]
                },
                "currency": {
                  "type": "object",
                  "description": "Three-letter ISO 4217 currency code for order pricing.\n    Examples: \"USD\", \"EUR\", \"GBP\", \"CAD\". Defaults to shop's default currency."
                },
                "customer": {
                  "type": "object",
                  "description": "Customer information for order association dict with keys:",
                  "properties": {
                    "id": {
                      "type": "object",
                      "description": "Existing customer ID to link order to. Takes precedence over other fields."
                    },
                    "email": {
                      "type": "object",
                      "description": "Customer email - creates new customer if no ID provided"
                    },
                    "first_name": {
                      "type": "object",
                      "description": "Customer's first name - for new customer creation"
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Customer's last name - for new customer creation"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Customer's phone number"
                    },
                    "tags": {
                      "type": "object",
                      "description": "Comma-separated customer tags string"
                    }
                  }
                },
                "discount_codes": {
                  "type": "object",
                  "description": "Order-level discount codes array, each dict with keys:",
                  "properties": {
                    "code": {
                      "type": "object",
                      "description": "Discount code identifier"
                    },
                    "amount": {
                      "type": "object",
                      "description": "Discount amount as decimal string"
                    },
                    "type": {
                      "type": "object",
                      "description": "Discount type - \"fixed_amount\" is supported"
                    }
                  },
                  "required": [
                    "amount",
                    "code",
                    "type"
                  ]
                },
                "email": {
                  "type": "object",
                  "description": "Customer email for order - used when customer object not provided or lacks email"
                },
                "financial_status": {
                  "type": "object",
                  "description": "Order payment status override.\n    Options: \"pending\", \"authorized\", \"partially_paid\", \"paid\", \"partially_refunded\", \"refunded\", \"voided\"\n    Default: Automatically derived from transaction amounts and total price"
                },
                "inventory_behaviour": {
                  "type": "object",
                  "description": "Inventory management policy for order fulfillment.\n    \"bypass\": Skip inventory checks and updates (default)\n    \"decrement_ignoring_policy\": Reduce inventory regardless of stock levels\n    \"decrement_obeying_policy\": Reduce inventory only if sufficient stock available"
                },
                "line_items": {
                  "type": "object",
                  "description": "Order items array, each dict with keys:",
                  "properties": {
                    "variant_id": {
                      "type": "object",
                      "description": "Product variant ID to order. Required if product_id not provided."
                    },
                    "product_id": {
                      "type": "object",
                      "description": "Product ID - uses first variant if variant_id not specified."
                    },
                    "quantity": {
                      "type": "object",
                      "description": "Number of units to order. Must be positive integer."
                    },
                    "price": {
                      "type": "object",
                      "description": "Override price per unit as decimal string. Uses variant price if not provided."
                    },
                    "title": {
                      "type": "object",
                      "description": "Override line item display name. Uses variant/product title if not provided."
                    },
                    "total_discount_amount": {
                      "type": "object",
                      "description": "Total discount for entire line (not per unit) as decimal string.\n        Example: \"10.00\" for $10 total discount on this line item."
                    }
                  },
                  "required": [
                    "quantity"
                  ]
                },
                "note": {
                  "type": "object",
                  "description": "Internal order note or special instructions"
                },
                "send_fulfillment_receipt": {
                  "type": "object",
                  "description": "Whether to send shipping confirmation email. Default: False."
                },
                "send_receipt": {
                  "type": "object",
                  "description": "Whether to send order confirmation email. Default: False."
                },
                "shipping_address": {
                  "type": "object",
                  "description": "Customer's shipping address dict with keys:",
                  "properties": {
                    "first_name": {
                      "type": "object",
                      "description": "Shipping recipient's first name"
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Shipping recipient's last name"
                    },
                    "address1": {
                      "type": "object",
                      "description": "Primary street address line"
                    },
                    "address2": {
                      "type": "object",
                      "description": "Secondary address line (apartment, suite, etc.)"
                    },
                    "city": {
                      "type": "object",
                      "description": "City name"
                    },
                    "province": {
                      "type": "object",
                      "description": "State or province name"
                    },
                    "country": {
                      "type": "object",
                      "description": "Country name"
                    },
                    "zip": {
                      "type": "object",
                      "description": "Postal or ZIP code"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Contact phone number"
                    },
                    "company": {
                      "type": "object",
                      "description": "Company name"
                    },
                    "latitude": {
                      "type": "object",
                      "description": "Geographic latitude coordinate"
                    },
                    "longitude": {
                      "type": "object",
                      "description": "Geographic longitude coordinate"
                    },
                    "province_code": {
                      "type": "object",
                      "description": "Two-letter province/state code"
                    },
                    "country_code": {
                      "type": "object",
                      "description": "Two-letter ISO country code"
                    },
                    "country_name": {
                      "type": "object",
                      "description": "Full country name"
                    }
                  },
                  "required": [
                    "first_name",
                    "last_name"
                  ]
                },
                "shipping_lines": {
                  "type": "object",
                  "description": "Shipping method charges array, each dict with keys:",
                  "properties": {
                    "title": {
                      "type": "object",
                      "description": "Shipping method name (e.g., \"Standard Shipping\", \"Express\")"
                    },
                    "price": {
                      "type": "object",
                      "description": "Shipping cost as decimal string"
                    },
                    "code": {
                      "type": "object",
                      "description": "Shipping method code"
                    },
                    "source": {
                      "type": "object",
                      "description": "Shipping provider identifier"
                    }
                  },
                  "required": [
                    "price",
                    "title"
                  ]
                },
                "tags": {
                  "type": "object",
                  "description": "Comma-separated tags string for order categorization and filtering"
                },
                "tax_lines": {
                  "type": "object",
                  "description": "Tax charges array, each dict with keys:",
                  "properties": {
                    "title": {
                      "type": "object",
                      "description": "Tax name (e.g., \"State Tax\", \"VAT\")"
                    },
                    "rate": {
                      "type": "object",
                      "description": "Tax rate as decimal (e.g., 0.08 for 8%)"
                    },
                    "price": {
                      "type": "object",
                      "description": "Tax amount as decimal string"
                    }
                  },
                  "required": [
                    "price",
                    "rate",
                    "title"
                  ]
                },
                "transactions": {
                  "type": "object",
                  "description": "Payment transactions array, each dict with keys:",
                  "properties": {
                    "kind": {
                      "type": "object",
                      "description": "Transaction type - \"sale\", \"authorization\", \"capture\", \"refund\", \"void\""
                    },
                    "amount": {
                      "type": "object",
                      "description": "Transaction amount as decimal string"
                    },
                    "status": {
                      "type": "object",
                      "description": "Transaction status - \"success\", \"pending\", \"failure\", \"error\""
                    },
                    "gateway": {
                      "type": "object",
                      "description": "Payment gateway identifier - \"manual\", \"gift_card\", \"shopify_payments\", etc.\n        Note: For gift card payments, use gateway=\"gift_card\" - system automatically validates\n        and deducts from customer's gift card balance"
                    }
                  },
                  "required": [
                    "amount",
                    "gateway",
                    "kind",
                    "status"
                  ]
                }
              },
              "description": "Complete order creation object with all order details and configuration.",
              "required": [
                "line_items"
              ]
            }
          },
          "required": [
            "order"
          ]
        }
      },
      "reopen_order": {
        "name": "reopen_order",
        "description": "Re-opens a closed order.\n\nThis function re-opens a previously closed order. It takes the ID of the\nclosed order as input. Upon successful execution, it returns a dictionary\ncontaining the updated order details, reflecting its reopened status.",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "The ID of the closed order to re-open. This is a path parameter."
            }
          },
          "required": [
            "order_id"
          ]
        }
      },
      "list_orders": {
        "name": "list_orders",
        "description": "Retrieves a list of orders that meet the specified criteria. Note: This endpoint implements pagination by using links that are provided in the response header.",
        "parameters": {
          "type": "object",
          "properties": {
            "attribution_app_id": {
              "type": "string",
              "description": "(Optional) Show orders attributed to a certain app, specified by the app ID. Set as 'current' to show orders for the app currently consuming the API."
            },
            "created_at_max": {
              "type": "string",
              "description": "(Optional) Show orders created at or before this date (ISO 8601 format, e.g., '2014-04-25T16:15:47-04:00')."
            },
            "created_at_min": {
              "type": "string",
              "description": "(Optional) Show orders created at or after this date (ISO 8601 format, e.g., '2014-04-25T16:15:47-04:00')."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "(Optional) A list of field names to retrieve for each order. These will be sent as a comma-separated string to the API."
            },
            "financial_status": {
              "type": "string",
              "description": "(Optional) Filter orders by their financial status. Common values include: 'pending', 'authorized', 'paid', 'partially_paid', 'refunded', 'voided', 'partially_refunded', 'any', 'unpaid'. Default: 'any'."
            },
            "fulfillment_status": {
              "type": "string",
              "description": "(Optional) Filter orders by their fulfillment status. Common values include: 'shipped', 'partial', 'unshipped', 'any', 'fulfilled'. Default: 'any'."
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "(Optional) A list of order IDs to retrieve. These will be sent as a comma-separated string to the API."
            },
            "limit": {
              "type": "integer",
              "description": "(Optional) The maximum number of results to show on a page. Must be less than or equal to 250. Default: 50."
            },
            "name": {
              "type": "string",
              "description": "(Optional) Filter orders by name (e.g., '#1001')."
            },
            "processed_at_max": {
              "type": "string",
              "description": "(Optional) Show orders imported or processed at or before this date (ISO 8601 format)."
            },
            "processed_at_min": {
              "type": "string",
              "description": "(Optional) Show orders imported or processed at or after this date (ISO 8601 format)."
            },
            "since_id": {
              "type": "integer",
              "description": "(Optional) Show orders after the specified order ID. (Note: Cursor-based pagination via Link headers is generally preferred)."
            },
            "status": {
              "type": "string",
              "description": "(Optional) Filter orders by their status. Default: 'open'. Valid: \"open\", \"closed\", \"cancelled\", \"any\"."
            },
            "updated_at_max": {
              "type": "string",
              "description": "(Optional) Show orders last updated at or before this date (ISO 8601 format)."
            },
            "updated_at_min": {
              "type": "string",
              "description": "(Optional) Show orders last updated at or after this date (ISO 8601 format)."
            }
          }
        }
      },
      "count_orders": {
        "name": "count_orders",
        "description": "Retrieve the total number of orders that meet the specified criteria.\n\nRetrieves the total number of orders that meet the specified criteria.\nFilters can be applied based on creation date, update date, financial\nstatus, fulfillment_status, and overall order status.",
        "parameters": {
          "type": "object",
          "properties": {
            "created_at_max": {
              "type": "string",
              "description": "Count orders created at or before this date\n(ISO 8601 format). Defaults to None."
            },
            "created_at_min": {
              "type": "string",
              "description": "Count orders created at or after this date\n(ISO 8601 format). Defaults to None."
            },
            "financial_status": {
              "type": "string",
              "description": "Filter count by financial status.\nCommon values include: 'pending', 'authorized', 'paid',\n'partially_paid', 'refunded', 'voided', 'partially_refunded',\n'any', 'unpaid'. Defaults to 'any'."
            },
            "fulfillment_status": {
              "type": "string",
              "description": "Filter count by fulfillment status.\nCommon values include: 'shipped', 'partial', 'unshipped', 'any',\n'fulfilled'. Defaults to 'any'."
            },
            "status": {
              "type": "string",
              "description": "Filter count by order status. Common values\ninclude: 'open', 'closed', 'any'. Defaults to 'open'."
            },
            "updated_at_max": {
              "type": "string",
              "description": "Count orders last updated at or before\nthis date (ISO 8601 format). Defaults to None."
            },
            "updated_at_min": {
              "type": "string",
              "description": "Count orders last updated at or after\nthis date (ISO 8601 format). Defaults to None."
            }
          }
        }
      },
      "get_product_by_id": {
        "name": "get_product_by_id",
        "description": "Retrieves a specific product by its ID.\n\nThis function retrieves detailed information for a single product identified by its unique `product_id`.\nAn optional list of `fields` can be provided to limit the data returned for the product; these\nfields are sent as a comma-separated string to the API.",
        "parameters": {
          "type": "object",
          "properties": {
            "product_id": {
              "type": "integer",
              "description": "The ID of the product to retrieve. This is a path parameter."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "(Optional) A list of fields to retrieve for the product.\nThese will be sent as a comma-separated string to the API. Defaults to None."
            }
          },
          "required": [
            "product_id"
          ]
        }
      },
      "create_an_order_transaction": {
        "name": "create_an_order_transaction",
        "description": "This function creates a new transaction for a specified order. This can be used to record\n\npayments (such as 'sale' or 'capture') or authorizations. The details of the transaction,\nincluding its kind, amount, and optionally the gateway, are provided within the `transaction`\ndictionary.\n\nThe function performs comprehensive financial validation including: validates capture amounts \nagainst authorization limits, prevents over-refunding by checking transaction history, enforces \nproper transaction state transitions (e.g., can't void captured authorizations), automatically \nupdates order financial status based on transaction outcomes, and manages customer gift card \nbalance updates for manual gateway refunds (gift card refunds automatically credit the customer's \ngift card balance).",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "The ID of the order for which to create a transaction. This is a path parameter."
            },
            "transaction": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "The amount of the transaction. (Required)"
                },
                "kind": {
                  "type": "string",
                  "description": "The kind of transaction: 'authorization', 'capture', 'sale', 'void', or 'refund'. (Required)"
                },
                "gateway": {
                  "type": "object",
                  "description": "(Optional for some kinds like capture/void if parent_id is used)\n    The payment gateway used. For manual payments, can be 'manual'."
                },
                "parent_id": {
                  "type": "object",
                  "description": "(Optional) The ID of an existing transaction to explicitly\n    void or capture."
                },
                "currency": {
                  "type": "object",
                  "description": "(Optional) The currency (ISO 4217 format) of the transaction.\n    Defaults to order currency."
                },
                "test": {
                  "type": "object",
                  "description": "(Optional) Whether this is a test transaction. Default: false."
                },
                "authorization": {
                  "type": "object",
                  "description": "(Optional) The authorization code, for external gateways\n    when kind is 'sale' or 'authorization'."
                },
                "target_payment_method_id": {
                  "type": "object",
                  "description": "(Optional) The ID of the target payment method for cross-payment method refunds."
                }
              },
              "description": "The transaction object to be created. This dictionary can include\nvarious fields as defined by the Shopify Transaction API. Key fields include:",
              "required": [
                "amount",
                "kind"
              ]
            }
          },
          "required": [
            "order_id",
            "transaction"
          ]
        }
      },
      "get_order_by_id": {
        "name": "get_order_by_id",
        "description": "Retrieves an order by specifying the ID. All fields of an order are returned unless specific fields are named.",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "The ID of the order to retrieve. This is a path parameter."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "(Optional) A list of field names to retrieve for the order. \nIf omitted or an empty list, all fields are returned. Defaults to None."
            }
          },
          "required": [
            "order_id"
          ]
        }
      },
      "create_draft_order": {
        "name": "create_draft_order",
        "description": "Creates a new draft order with comprehensive line items, customer data, and pricing calculations.\n\nThis function creates a complete draft order by processing line items, customer information, \nshipping and billing addresses, applied discounts, and shipping details. The system automatically \ncalculates subtotals, applies line-item and order-level discounts, computes tax amounts, and \ngenerates the final total price. When a variant_id is provided, product details are automatically \nretrieved from the database, while custom line items can be created using title and price. \nCustomer data can reference existing customers by ID or create new customer records as needed. \nThe function handles complex discount logic including percentage and fixed-amount discounts at \nboth line-item and order levels, ensuring accurate pricing calculations throughout the process.",
        "parameters": {
          "type": "object",
          "properties": {
            "draft_order": {
              "type": "object",
              "properties": {
                "line_items": {
                  "type": "object",
                  "description": "A list of line item objects that define\n    the products or services in the draft order. Each line item is a dictionary that \n    requires either a variant_id for existing products or both title and price for \n    custom items. Line items support the following structure:",
                  "properties": {
                    "variant_id": {
                      "type": "object",
                      "description": "The unique identifier of an existing product variant.\n        When provided, product details are automatically retrieved from the database."
                    },
                    "product_id": {
                      "type": "object",
                      "description": "The unique identifier of the parent product.\n        Used in conjunction with custom line items."
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The number of units for this line item. Must be a positive integer."
                    },
                    "title": {
                      "type": "object",
                      "description": "The display name for custom line items.\n        Required when variant_id is not provided."
                    },
                    "price": {
                      "type": "object",
                      "description": "The unit price for custom line items as a decimal string.\n        Required when variant_id is not provided."
                    },
                    "sku": {
                      "type": "object",
                      "description": "The stock keeping unit identifier for inventory tracking."
                    },
                    "grams": {
                      "type": "object",
                      "description": "The weight of the line item in grams for shipping calculations."
                    },
                    "requires_shipping": {
                      "type": "object",
                      "description": "Whether this item needs physical shipping.\n        Defaults to True for most items."
                    },
                    "taxable": {
                      "type": "object",
                      "description": "Whether this item is subject to tax calculations.\n        Defaults to True for most items."
                    },
                    "applied_discount": {
                      "type": "object",
                      "description": "A discount specific to this line item.\n        When provided, must include both value and value_type fields:",
                      "properties": {
                        "title": {
                          "type": "object",
                          "description": "A descriptive name for the discount."
                        },
                        "description": {
                          "type": "object",
                          "description": "Additional details about the discount."
                        },
                        "value": {
                          "type": "string",
                          "description": "The discount amount as a decimal string."
                        },
                        "value_type": {
                          "type": "string",
                          "description": "Either \"fixed_amount\" for dollar amounts or \"percentage\"\n            for percentage-based discounts."
                        }
                      },
                      "required": [
                        "value",
                        "value_type"
                      ]
                    },
                    "custom_attributes": {
                      "type": "object",
                      "description": "Additional metadata for the\n        line item as key-value pairs. Each dictionary must contain both 'key' and 'value' fields."
                    }
                  },
                  "required": [
                    "quantity"
                  ]
                },
                "customer": {
                  "type": "object",
                  "description": "Customer information for the draft order.\n    Can reference an existing customer by ID or provide new customer data:",
                  "properties": {
                    "id": {
                      "type": "object",
                      "description": "The unique identifier of an existing customer.\n        When provided, existing customer data is used."
                    },
                    "email": {
                      "type": "object",
                      "description": "The customer's email address for new customer records."
                    },
                    "first_name": {
                      "type": "object",
                      "description": "The customer's first name for new customer records."
                    },
                    "last_name": {
                      "type": "object",
                      "description": "The customer's last name for new customer records."
                    },
                    "phone": {
                      "type": "object",
                      "description": "The customer's phone number for contact purposes."
                    },
                    "tags": {
                      "type": "object",
                      "description": "Comma-separated tags for customer categorization."
                    }
                  }
                },
                "shipping_address": {
                  "type": "object",
                  "description": "The delivery address for the draft order:",
                  "properties": {
                    "first_name": {
                      "type": "object",
                      "description": "Recipient's first name."
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Recipient's last name."
                    },
                    "address1": {
                      "type": "object",
                      "description": "Primary street address line."
                    },
                    "address2": {
                      "type": "object",
                      "description": "Secondary address line for apartment or suite numbers."
                    },
                    "city": {
                      "type": "object",
                      "description": "City name for the shipping destination."
                    },
                    "province": {
                      "type": "object",
                      "description": "State or province name."
                    },
                    "country": {
                      "type": "object",
                      "description": "Full country name."
                    },
                    "zip": {
                      "type": "object",
                      "description": "Postal or ZIP code."
                    },
                    "phone": {
                      "type": "object",
                      "description": "Contact phone number for delivery."
                    },
                    "company": {
                      "type": "object",
                      "description": "Company name if applicable."
                    },
                    "province_code": {
                      "type": "object",
                      "description": "Two-letter state or province code."
                    },
                    "country_code": {
                      "type": "object",
                      "description": "Two-letter ISO country code."
                    }
                  }
                },
                "billing_address": {
                  "type": "object",
                  "description": "The billing address for payment processing.\n    Uses the same structure as shipping_address with identical field definitions."
                },
                "email": {
                  "type": "object",
                  "description": "Primary email address for the draft order.\n    This is used when no customer object is provided or when the customer object lacks an email."
                },
                "note": {
                  "type": "object",
                  "description": "Internal notes or comments about the draft order for reference purposes."
                },
                "tags": {
                  "type": "object",
                  "description": "Comma-separated tags for categorizing and organizing draft orders."
                },
                "shipping_line": {
                  "type": "object",
                  "description": "Shipping method and cost information:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The name of the shipping method (e.g., \"Standard Shipping\")."
                    },
                    "price": {
                      "type": "string",
                      "description": "The shipping cost as a decimal string."
                    }
                  },
                  "required": [
                    "price",
                    "title"
                  ]
                },
                "applied_discount": {
                  "type": "object",
                  "description": "Order-level discount applied to the entire draft order:",
                  "properties": {
                    "title": {
                      "type": "object",
                      "description": "A descriptive name for the discount."
                    },
                    "description": {
                      "type": "object",
                      "description": "Additional details about the discount promotion."
                    },
                    "value": {
                      "type": "string",
                      "description": "The discount amount as a decimal string."
                    },
                    "value_type": {
                      "type": "string",
                      "description": "Either \"fixed_amount\" for dollar discounts or \"percentage\"\n        for percentage-based discounts."
                    }
                  },
                  "required": [
                    "value",
                    "value_type"
                  ]
                }
              },
              "description": "The complete draft order object to be created. \nThis dictionary must contain the structural data for creating a comprehensive draft order."
            }
          },
          "required": [
            "draft_order"
          ]
        }
      },
      "list_draft_orders": {
        "name": "list_draft_orders",
        "description": "Retrieves a filtered list of draft orders with support for pagination and field selection.\n\nThis function fetches draft orders from the system with comprehensive filtering options including \ndate ranges, specific IDs, status filtering, and field selection. Supports pagination via since_id \nand limit parameters for efficient data retrieval. When fields parameter is provided, only specified \nfields are returned to optimize response size. Returns draft orders sorted by ID for consistent pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific fields to include in each draft order for optimized payload size.\nWhen provided, only these fields are returned instead of complete draft order data.\nExamples: ['id', 'status', 'total_price'] (basic info), ['customer', 'line_items', 'total_price'] (detailed).\nDefault is None (returns all available fields)."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of draft orders to return in a single response.\nMust be between 1 and 250 inclusive for optimal performance.\nExamples: 10 (small batches), 50 (default), 250 (maximum bulk retrieval).\nDefault is 50."
            },
            "since_id": {
              "type": "integer",
              "description": "Return draft orders with IDs greater than this value for pagination.\nUsed for offset-based pagination through large result sets.\nExamples: 1001 (continue from draft order 1001), None (start from beginning).\nDefault is None (no pagination offset)."
            },
            "updated_at_min": {
              "type": "string",
              "description": "Include draft orders last updated at or after this timestamp.\nMust be in ISO 8601 format with timezone information.\nExamples: '2023-01-01T00:00:00Z', '2024-01-01T00:00:00-05:00'.\nDefault is None (no minimum date filter)."
            },
            "updated_at_max": {
              "type": "string",
              "description": "Include draft orders last updated at or before this timestamp.\nMust be in ISO 8601 format with timezone information.\nExamples: '2023-12-31T23:59:59Z', '2024-01-01T23:59:59-05:00'.\nDefault is None (no maximum date filter)."
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific draft order IDs to retrieve for targeted data access.\nWhen provided, only draft orders with these IDs are returned.\nExamples: ['D101', 'D102'], ['12345', '67890'].\nDefault is None (no ID filtering)."
            },
            "status": {
              "type": "string",
              "description": "Filter draft orders by their current status for workflow management.\nValid values: 'open', 'invoice_sent', 'completed'.\nExamples: 'open' (draft orders ready for editing), 'completed' (finalized orders).\nDefault is None (all statuses included)."
            }
          }
        }
      },
      "list_addresses": {
        "name": "list_addresses",
        "description": "Retrieves a paginated list of addresses for a specific customer with efficient offset-based navigation.\n\nThis endpoint fetches all addresses associated with a customer account, providing comprehensive address \ninformation including shipping and billing details. The function implements offset-based pagination using \nsince_id for efficient navigation through large address collections. Each address includes complete \ngeographic and contact information, making it suitable for order processing, shipping calculations, and \ncustomer profile management. The pagination system sorts addresses lexicographically by ID to ensure \nconsistent ordering across requests, while the limit parameter allows control over response size for \noptimal performance in different integration scenarios.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "The unique identifier of the customer whose addresses should be retrieved. \nMust be a non-empty string representing a valid customer ID in the system.\nExamples: '207119551', 'cust_abc123', '1073339462'."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of address records to return in a single response. \nMust be an integer between 1 and 250 inclusive. Controls pagination batch size for \nefficient data transfer and processing.\nExamples: 10 (small batches), 50 (default balanced size), 250 (maximum bulk retrieval).\nDefault is 50."
            },
            "since_id": {
              "type": "integer",
              "description": "The pagination offset identifier for retrieving subsequent pages of addresses. \nWhen provided, only addresses with string IDs lexicographically greater than str(since_id) are returned. \nThis enables consistent pagination through the complete address collection.\nExamples: 0 (start from beginning), 12345 (continue from address ID 12345).\nDefault is 0 (no pagination offset)."
            }
          },
          "required": [
            "customer_id"
          ]
        }
      },
      "get_address": {
        "name": "get_address",
        "description": "Retrieves a specific customer address using customer ID and address ID.\n\nThis function fetches a single address from a customer's address collection. You need both the \ncustomer ID and the specific address ID to retrieve the address. Returns complete address \ndetails including contact information and geographic data.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "The unique identifier of the customer who owns the address. \nMust be a non-empty string. Examples: '207119551', 'cust_abc123'."
            },
            "address_id": {
              "type": "string",
              "description": "The unique identifier of the specific address to retrieve. \nMust be a non-empty string. Examples: 'addr_12345', '987654321'."
            }
          },
          "required": [
            "address_id",
            "customer_id"
          ]
        }
      },
      "add_address": {
        "name": "add_address",
        "description": "Creates a new address for an existing customer.\n\nThis function adds a new address to a customer's address collection. The address requires \nfour mandatory fields (address1, city, country, zip) and supports optional fields for \ncomplete address information. The new address is automatically assigned a unique ID and \nset as non-default. Returns the complete created address with all provided and generated fields.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "The unique identifier of the customer to add the address to. \nMust be a non-empty string representing an existing customer.\nExamples: '207119551', 'cust_abc123'."
            },
            "address": {
              "type": "object",
              "properties": {
                "address1": {
                  "type": "string",
                  "description": "Primary street address line. Required.\n    Examples: '123 Main St', '456 Oak Avenue'."
                },
                "city": {
                  "type": "string",
                  "description": "City name. Required.\n    Examples: 'New York', 'Toronto', 'London'."
                },
                "country": {
                  "type": "string",
                  "description": "Country name or code. Required.\n    Examples: 'United States', 'Canada', 'US', 'CA'."
                },
                "zip": {
                  "type": "string",
                  "description": "Postal or ZIP code. Required.\n    Examples: '10001', 'M5V 3A8', 'SW1A 1AA'."
                },
                "address2": {
                  "type": "object",
                  "description": "Secondary address line for apartment, suite, etc.\n    Examples: 'Apt 4B', 'Suite 200', 'Floor 3'."
                },
                "first_name": {
                  "type": "object",
                  "description": "Recipient's first name."
                },
                "last_name": {
                  "type": "object",
                  "description": "Recipient's last name."
                },
                "phone": {
                  "type": "object",
                  "description": "Contact phone number."
                },
                "province": {
                  "type": "object",
                  "description": "State or province name."
                },
                "company": {
                  "type": "object",
                  "description": "Company or organization name."
                },
                "province_code": {
                  "type": "object",
                  "description": "Two-letter state/province code (e.g., 'CA', 'NY')."
                },
                "country_code": {
                  "type": "object",
                  "description": "Two-letter country code (e.g., 'US', 'CA')."
                },
                "country_name": {
                  "type": "object",
                  "description": "Full country name."
                },
                "latitude": {
                  "type": "object",
                  "description": "Geographic latitude coordinate."
                },
                "longitude": {
                  "type": "object",
                  "description": "Geographic longitude coordinate."
                }
              },
              "description": "The address data to create. Must include required fields \nand can include optional fields for complete address information:",
              "required": [
                "address1",
                "city",
                "country",
                "zip"
              ]
            }
          },
          "required": [
            "address",
            "customer_id"
          ]
        }
      },
      "update_address": {
        "name": "update_address",
        "description": "Updates an existing customer address with partial field modifications.\n\nThis function modifies specific fields of an existing address within a customer's address collection. \nOnly the fields you provide in the address parameter will be updated - other fields remain unchanged. \nThe system prevents modification of protected fields (id, customer_id, default) to maintain data integrity. \nReturns the complete updated address with all current field values.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer_id": {
              "type": "string",
              "description": "The unique identifier of the customer whose address is being updated.\nMust be a non-empty string representing an existing customer.\nExamples: '207119551', 'cust_abc123'."
            },
            "address_id": {
              "type": "string",
              "description": "The unique identifier of the specific address to update.\nMust be a non-empty string representing an existing address for this customer.\nExamples: 'addr_12345', '987654321'."
            },
            "address": {
              "type": "object",
              "properties": {
                "address1": {
                  "type": "string",
                  "description": "Primary street address line.\n    Examples: '456 New Road', '789 Updated Ave'."
                },
                "address2": {
                  "type": "object",
                  "description": "Secondary address line.\n    Examples: 'Apt 5C', 'Suite 300'."
                },
                "city": {
                  "type": "string",
                  "description": "City name.\n    Examples: 'Updated City', 'New York'."
                },
                "province": {
                  "type": "object",
                  "description": "State or province name.\n    Examples: 'California', 'Ontario'."
                },
                "country": {
                  "type": "string",
                  "description": "Country name or code.\n    Examples: 'United States', 'Canada', 'US'."
                },
                "zip": {
                  "type": "string",
                  "description": "Postal or ZIP code.\n    Examples: '90210', 'M5V 3A8'."
                },
                "phone": {
                  "type": "object",
                  "description": "Contact phone number.\n    Examples: '555-000-1111', '+1-416-555-0123'."
                },
                "first_name": {
                  "type": "object",
                  "description": "Recipient's first name."
                },
                "last_name": {
                  "type": "object",
                  "description": "Recipient's last name."
                },
                "company": {
                  "type": "object",
                  "description": "Company name."
                },
                "province_code": {
                  "type": "object",
                  "description": "Two-letter province code (e.g., 'CA', 'NY')."
                },
                "country_code": {
                  "type": "object",
                  "description": "Two-letter country code (e.g., 'US', 'CA')."
                },
                "country_name": {
                  "type": "object",
                  "description": "Full country name."
                },
                "latitude": {
                  "type": "object",
                  "description": "Geographic latitude coordinate."
                },
                "longitude": {
                  "type": "object",
                  "description": "Geographic longitude coordinate."
                }
              },
              "description": "Dictionary containing the fields to update. Only provided fields will be modified.\nCannot include protected fields: 'id', 'customer_id', 'default'.\nUpdatable fields include:",
              "required": [
                "address1",
                "city",
                "country",
                "zip"
              ]
            }
          },
          "required": [
            "address",
            "address_id",
            "customer_id"
          ]
        }
      },
      "close_order": {
        "name": "close_order",
        "description": "Closes an order.\n\nCloses an order. A closed order is one that has no more work to be done. All items have been fulfilled or refunded.",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "The ID of the order to close. This is a path parameter."
            }
          },
          "required": [
            "order_id"
          ]
        }
      },
      "get_draft_order_by_id": {
        "name": "get_draft_order_by_id",
        "description": "Retrieves a specific draft order using its unique identifier.\n\nThis function fetches a complete draft order by ID with optional field filtering to reduce response size. \nWhen fields parameter is provided, only the specified fields are returned. Otherwise, the complete \ndraft order with all available data is returned including pricing, customer info, line items, and status.",
        "parameters": {
          "type": "object",
          "properties": {
            "draft_order_id": {
              "type": "string",
              "description": "The unique identifier of the draft order to retrieve.\nMust be a non-empty string representing an existing draft order.\nExamples: 'D101', '12345', 'draft_abc123'."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specific fields to include in the response for optimized payload size.\nWhen provided, only these fields will be returned instead of the complete draft order.\nExamples: ['id', 'status', 'total_price'] (basic info), ['customer', 'line_items'] (detailed data).\nDefault is None (returns all available fields)."
            }
          },
          "required": [
            "draft_order_id"
          ]
        }
      },
      "create_return": {
        "name": "create_return",
        "description": "Initiates a return for one or more line items on an order.\n\nCreates a Return object and associated ReturnLineItem objects for items that have been \nfulfilled but need to be returned. Validates return eligibility by checking fulfillment \nstatus, existing return quantities, and order state to ensure proper inventory tracking.",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "Order identifier for the return."
            },
            "return_line_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fulfillment_line_item_id": {
                    "type": "string",
                    "description": "Line item identifier to return."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Quantity to return (must be positive)."
                  },
                  "return_reason": {
                    "type": "object",
                    "description": "Return reason code. Valid values:\n    \"UNKNOWN\", \"DAMAGED_OR_DEFECTIVE\", \"NOT_AS_DESCRIBED\", \n    \"WRONG_ITEM_SENT\", \"SIZE_TOO_SMALL\", \"SIZE_TOO_LARGE\", \n    \"STYLE_NOT_AS_EXPECTED\", \"COLOR_NOT_AS_EXPECTED\", \n    \"CHANGED_MIND\", \"UNWANTED_GIFT\", \"OTHER\""
                  },
                  "return_reason_note": {
                    "type": "object",
                    "description": "Additional return details."
                  }
                },
                "required": [
                  "fulfillment_line_item_id",
                  "quantity"
                ]
              },
              "description": "Items to return, each containing:"
            }
          },
          "required": [
            "order_id",
            "return_line_items"
          ]
        }
      },
      "cancel_order": {
        "name": "cancel_order",
        "description": "Cancels an order and optionally processes refunds and restocking.\n\nPermanently closes the order and marks it as cancelled. Can simultaneously\nprocess refunds using either simple amount/currency parameters or detailed\nrefund objects for complex scenarios involving specific line items.",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "The ID of the order to cancel."
            },
            "amount": {
              "type": "string",
              "description": "Refund amount as decimal string. Superseded by refund object."
            },
            "currency": {
              "type": "string",
              "description": "Currency code for refund. Required if amount specified."
            },
            "reason": {
              "type": "string",
              "description": "Cancellation reason ('customer', 'inventory', 'fraud', 'other')."
            },
            "email": {
              "type": "boolean",
              "description": "Whether to send cancellation email to customer."
            },
            "restock": {
              "type": "boolean",
              "description": "Whether to restock all items. Overridden by refund line item settings."
            },
            "refund": {
              "type": "object",
              "properties": {
                "note": {
                  "type": "object",
                  "description": "Refund note/description"
                },
                "currency": {
                  "type": "object",
                  "description": "Refund currency (defaults to order currency)"
                },
                "shipping": {
                  "type": "object",
                  "description": "Shipping refund details:",
                  "properties": {
                    "amount": {
                      "type": "object",
                      "description": "Specific shipping amount to refund"
                    },
                    "full_refund": {
                      "type": "object",
                      "description": "Whether to refund all shipping"
                    }
                  }
                },
                "refund_line_items": {
                  "type": "object",
                  "description": "Line items to refund:",
                  "properties": {
                    "line_item_id": {
                      "type": "integer",
                      "description": "Original order line item ID"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "Quantity to refund"
                    },
                    "restock_type": {
                      "type": "string",
                      "description": "Restocking behavior (\"no_restock\", \"cancel\", \"return\")"
                    },
                    "location_id": {
                      "type": "object",
                      "description": "Restock location ID"
                    }
                  },
                  "required": [
                    "line_item_id",
                    "quantity",
                    "restock_type"
                  ]
                },
                "transactions": {
                  "type": "object",
                  "description": "Refund transactions:",
                  "properties": {
                    "parent_id": {
                      "type": "string",
                      "description": "Original transaction ID to refund"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Refund amount"
                    },
                    "kind": {
                      "type": "string",
                      "description": "Must be \"refund\""
                    },
                    "gateway": {
                      "type": "string",
                      "description": "Payment gateway identifier"
                    }
                  },
                  "required": [
                    "amount",
                    "gateway",
                    "kind",
                    "parent_id"
                  ]
                }
              },
              "description": "Detailed refund object containing:"
            }
          },
          "required": [
            "order_id"
          ]
        }
      },
      "update_draft_order": {
        "name": "update_draft_order",
        "description": "Updates an existing draft order with the provided fields.\n\nModifies details like line items, customer information, addresses, and other attributes\nfor an existing draft order. Only non-read-only fields can be updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "draft_order_id": {
              "type": "string",
              "description": "The ID of the draft order to update."
            },
            "draft_order": {
              "type": "object",
              "properties": {
                "customer_id": {
                  "type": "object",
                  "description": "ID of the customer associated with the draft order"
                },
                "email": {
                  "type": "object",
                  "description": "Customer's email address"
                },
                "note": {
                  "type": "object",
                  "description": "Optional note attached to the draft order"
                },
                "tags": {
                  "type": "object",
                  "description": "Comma-separated list of tags for filtering and searching"
                },
                "tax_exempt": {
                  "type": "object",
                  "description": "Whether taxes are exempt for the draft order"
                },
                "shipping_address": {
                  "type": "object",
                  "description": "Shipping address dict with keys:",
                  "properties": {
                    "first_name": {
                      "type": "object",
                      "description": "Recipient first name"
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Recipient last name"
                    },
                    "address1": {
                      "type": "object",
                      "description": "Street address line 1"
                    },
                    "address2": {
                      "type": "object",
                      "description": "Street address line 2"
                    },
                    "city": {
                      "type": "object",
                      "description": "City name"
                    },
                    "province": {
                      "type": "object",
                      "description": "Province or state"
                    },
                    "country": {
                      "type": "object",
                      "description": "Country name"
                    },
                    "zip": {
                      "type": "object",
                      "description": "Postal or ZIP code"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Contact phone number"
                    },
                    "company": {
                      "type": "object",
                      "description": "Company name"
                    },
                    "province_code": {
                      "type": "object",
                      "description": "Province/state code"
                    },
                    "country_code": {
                      "type": "object",
                      "description": "ISO country code"
                    },
                    "country_name": {
                      "type": "object",
                      "description": "Full country name"
                    },
                    "latitude": {
                      "type": "object",
                      "description": "Address latitude"
                    },
                    "longitude": {
                      "type": "object",
                      "description": "Address longitude"
                    }
                  }
                },
                "billing_address": {
                  "type": "object",
                  "description": "Billing address dict with same keys as shipping_address"
                },
                "line_items": {
                  "type": "object",
                  "description": "Product line items array, each dict contains:",
                  "properties": {
                    "product_id": {
                      "type": "string",
                      "description": "Parent product ID (required)"
                    },
                    "variant_id": {
                      "type": "string",
                      "description": "Product variant ID (required)"
                    },
                    "title": {
                      "type": "string",
                      "description": "Product or item title"
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "Item quantity"
                    },
                    "price": {
                      "type": "string",
                      "description": "Unit price as string"
                    },
                    "applied_discount": {
                      "type": "object",
                      "description": "Line item discount dict with string values"
                    }
                  },
                  "required": [
                    "price",
                    "product_id",
                    "quantity",
                    "title",
                    "variant_id"
                  ]
                },
                "shipping_line": {
                  "type": "object",
                  "description": "Shipping method dict with keys:",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Shipping method name"
                    },
                    "price": {
                      "type": "string",
                      "description": "Shipping cost as string"
                    }
                  },
                  "required": [
                    "price",
                    "title"
                  ]
                },
                "customer": {
                  "type": "object",
                  "description": "Customer information dict (alternative to customer_id) with keys:",
                  "properties": {
                    "id": {
                      "type": "object",
                      "description": "Customer's unique identifier"
                    },
                    "email": {
                      "type": "object",
                      "description": "Customer's email address"
                    },
                    "first_name": {
                      "type": "object",
                      "description": "Customer's first name"
                    },
                    "last_name": {
                      "type": "object",
                      "description": "Customer's last name"
                    },
                    "phone": {
                      "type": "object",
                      "description": "Customer's phone number"
                    },
                    "tags": {
                      "type": "object",
                      "description": "Customer tags"
                    }
                  }
                },
                "applied_discount": {
                  "type": "object",
                  "description": "Order-level discount dict with keys:",
                  "properties": {
                    "title": {
                      "type": "object",
                      "description": "Discount name"
                    },
                    "description": {
                      "type": "object",
                      "description": "Discount description"
                    },
                    "value": {
                      "type": "string",
                      "description": "Original discount value"
                    },
                    "value_type": {
                      "type": "string",
                      "description": "Type ('fixed_amount' or 'percentage')"
                    },
                    "amount": {
                      "type": "object",
                      "description": "Applied discount amount"
                    }
                  },
                  "required": [
                    "value",
                    "value_type"
                  ]
                }
              },
              "description": "Draft order object containing fields to update."
            }
          },
          "required": [
            "draft_order",
            "draft_order_id"
          ]
        }
      },
      "create_exchange": {
        "name": "create_exchange",
        "description": "Creates an exchange for items in an existing order.\n\nCreates an Exchange object that allows customers to return fulfilled items and receive \ndifferent items in return. Automatically calculates price differences, processes inventory \nadjustments, and completes the exchange immediately. Validates exchange eligibility by \nchecking order status, fulfillment status, and inventory availability.",
        "parameters": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "string",
              "description": "Order identifier for the exchange."
            },
            "return_line_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "fulfillment_line_item_id": {
                    "type": "string",
                    "description": "ID of the original order line item to exchange."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Quantity to return (must be positive)."
                  },
                  "exchange_reason": {
                    "type": "object",
                    "description": "Reason for exchanging this item."
                  },
                  "exchange_reason_note": {
                    "type": "object",
                    "description": "Additional notes about the exchange."
                  }
                },
                "required": [
                  "fulfillment_line_item_id",
                  "quantity"
                ]
              },
              "description": "Items to be returned, each containing:"
            },
            "new_line_items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "variant_id": {
                    "type": "string",
                    "description": "ID of the product variant to receive."
                  },
                  "product_id": {
                    "type": "string",
                    "description": "ID of the product to receive."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Quantity to receive (must be positive)."
                  },
                  "title": {
                    "type": "object",
                    "description": "Custom title for the item."
                  },
                  "price": {
                    "type": "object",
                    "description": "Custom price for the item as decimal string."
                  }
                },
                "required": [
                  "product_id",
                  "quantity",
                  "variant_id"
                ]
              },
              "description": "New items to receive, each containing:"
            },
            "exchange_reason": {
              "type": "string",
              "description": "Overall reason for the exchange."
            },
            "exchange_note": {
              "type": "string",
              "description": "Additional notes about the exchange."
            },
            "restock_returned_items": {
              "type": "boolean",
              "description": "Whether to restock the returned items (default: True)."
            }
          },
          "required": [
            "new_line_items",
            "order_id",
            "return_line_items"
          ]
        }
      },
      "search_products": {
        "name": "search_products",
        "description": "Search products with comprehensive filtering and sorting capabilities.\n\nThis function provides advanced product search functionality with support for text search,\ntag filtering, price ranges, inventory levels, and multiple sorting options. Designed for\nreal-world e-commerce scenarios where customers need to find products based on specific\nattributes and criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Text search query to match against product title, body_html, \ntags, vendor, and product_type. Case-insensitive partial matching."
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of tags that products must have. Products must \ncontain ALL specified tags (AND logic). Tags are matched case-insensitively."
            },
            "product_type": {
              "type": "string",
              "description": "Filter by product type. Case-insensitive exact match."
            },
            "vendor": {
              "type": "string",
              "description": "Filter by vendor name. Case-insensitive exact match."
            },
            "status": {
              "type": "string",
              "description": "Filter by product status. Valid values: \"active\", \"archived\", \"draft\"."
            },
            "published_scope": {
              "type": "string",
              "description": "Filter by published scope. Valid values: \"web\", \"global\"."
            },
            "price_min": {
              "type": "string",
              "description": "Minimum price filter. Searches across all product variants.\nFormat: decimal string (e.g., \"10.00\", \"99.99\")."
            },
            "price_max": {
              "type": "string",
              "description": "Maximum price filter. Searches across all product variants.\nFormat: decimal string (e.g., \"100.00\", \"999.99\")."
            },
            "inventory_quantity_min": {
              "type": "integer",
              "description": "Minimum total inventory quantity across all variants."
            },
            "inventory_quantity_max": {
              "type": "integer",
              "description": "Maximum total inventory quantity across all variants."
            },
            "created_at_min": {
              "type": "string",
              "description": "Filter products created after this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-01-01T00:00:00Z\")."
            },
            "created_at_max": {
              "type": "string",
              "description": "Filter products created before this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-12-31T23:59:59Z\")."
            },
            "updated_at_min": {
              "type": "string",
              "description": "Filter products updated after this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-01-01T00:00:00Z\")."
            },
            "updated_at_max": {
              "type": "string",
              "description": "Filter products updated before this date.\nFormat: ISO 8601 timestamp (e.g., \"2023-12-31T23:59:59Z\")."
            },
            "variant_query": {
              "type": "string",
              "description": "Text search query to match against variant titles, SKUs, \nand option values. Case-insensitive partial matching. Useful for finding specific \nproduct variations like \"clicky switches\" or \"Google Home compatible\"."
            },
            "variant_sku": {
              "type": "string",
              "description": "Filter products that have variants with matching SKU.\nCase-insensitive partial matching."
            },
            "variant_title": {
              "type": "string",
              "description": "Filter products that have variants with matching title.\nCase-insensitive partial matching."
            },
            "variant_option1": {
              "type": "string",
              "description": "Filter products that have variants with matching option1 value.\nCase-insensitive partial matching. Common for size, color, material, etc."
            },
            "variant_option2": {
              "type": "string",
              "description": "Filter products that have variants with matching option2 value.\nCase-insensitive partial matching. Common for secondary attributes."
            },
            "variant_option3": {
              "type": "string",
              "description": "Filter products that have variants with matching option3 value.\nCase-insensitive partial matching. Common for tertiary attributes."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of fields to include in response. If not specified,\nreturns all product fields. Valid fields include: id, title, body_html, vendor,\nproduct_type, handle, status, tags, variants, options, images, etc."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of products to return. Range: 1-250. Default: 50."
            },
            "sort_by": {
              "type": "string",
              "description": "Field to sort results by. Valid values:\n- \"title\": Sort by product title\n- \"created_at\": Sort by creation date\n- \"updated_at\": Sort by last update date\n- \"price\": Sort by lowest variant price\n- \"inventory_quantity\": Sort by total inventory quantity\n- \"vendor\": Sort by vendor name\n- \"product_type\": Sort by product type\nDefault: \"id\" (product ID)."
            },
            "sort_order": {
              "type": "string",
              "description": "Sort direction. Valid values: \"asc\", \"desc\". Default: \"asc\"."
            }
          }
        }
      }
    },
    "terminal": {
      "run_command": {
        "name": "run_command",
        "description": "Executes the provided terminal command in the current workspace context.\n\nUse this function to run shell commands. You need to provide the exact\ncommand string to be executed. Note that commands like 'cd', 'pwd', and\nenvironment commands ('export', 'unset', 'env') are handled internally;\nother commands are executed externally and may modify the workspace files.\n\nIMPORTANT: For any command that expects user interaction or uses a pager\n(like git diff, git log, less, head, tail, more, etc.), you MUST append\n' | cat' to the command string yourself before passing it to this function.\nFailure to do so will cause the command to hang or fail.\n\nFor commands that are intended to run for a long time or indefinitely\n(e.g., starting a server, running a watch process), set the\n`is_background` parameter to True.",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The exact terminal command string to execute. Remember\nto append ' | cat' for interactive/pager commands."
            },
            "is_background": {
              "type": "boolean",
              "description": "Set to True to run the command as a\nbackground process (e.g., for servers or watchers). Defaults to False,\nrunning the command in the foreground and waiting for completion."
            }
          },
          "required": [
            "command"
          ]
        }
      }
    },
    "bigquery": {
      "list_tables": {
        "name": "list_tables",
        "description": "List all tables in the BigQuery database.\n\nThis function lists all tables in the BigQuery database by loading the JSON DB file\nand processing its contents. It returns a list of dictionaries, where each dictionary\nrepresents a table. Each dictionary contains specific details for a table: its unique\nidentifier ('table_id'), the identifier of the dataset containing it ('dataset_id'),\nthe identifier of the project containing it ('project_id'), the table's type (e.g.,\n'TABLE', 'VIEW', 'MATERIALIZED_VIEW'), the Unix timestamp (milliseconds) of its\ncreation, and an optional Unix timestamp (milliseconds) for its expiration.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "describe_table": {
        "name": "describe_table",
        "description": "Get the schema information for a specific table.\n\nThis function retrieves detailed information for a specific table. The information\nreturned includes identifiers for the table, its dataset, and project;\ntimestamps for creation, last modification, and optional expiration;\nthe table's type (e.g., 'TABLE', 'VIEW', 'MATERIALIZED_VIEW', 'EXTERNAL');\nan optional row count and size in bytes; and a detailed schema definition.\nThe schema definition lists all fields (columns) with their names, data types,\nmodes, and any nested fields for structured (RECORD) types.",
        "parameters": {
          "type": "object",
          "properties": {
            "table_name": {
              "type": "string",
              "description": "The name of the table for which to retrieve schema information."
            }
          },
          "required": [
            "table_name"
          ]
        }
      },
      "execute_query": {
        "name": "execute_query",
        "description": "Execute a SELECT query on the BigQuery database.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The SQL query to execute."
            }
          },
          "required": [
            "query"
          ]
        }
      }
    },
    "google_docs": {
      "get_document": {
        "name": "get_document",
        "description": "Get a document by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "documentId": {
              "type": "string",
              "description": "The ID of the document to retrieve. Cannot be empty or whitespace."
            },
            "suggestionsViewMode": {
              "type": "string",
              "description": "The mode for viewing suggestions.\nCommon values include \"DEFAULT\" and \"SUGGESTIONS_INLINE\". \nIf None, the document's existing setting is preserved."
            },
            "includeTabsContent": {
              "type": "boolean",
              "description": "Whether to include tab content. Defaults to False."
            },
            "userId": {
              "type": "string",
              "description": "The ID of the user performing the action. Defaults to \"me\".\nCannot be empty or whitespace."
            }
          },
          "required": [
            "documentId"
          ]
        }
      },
      "create_document": {
        "name": "create_document",
        "description": "Create a new document.",
        "parameters": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The title of the document. Defaults to \"Untitled Document\"."
            },
            "userId": {
              "type": "string",
              "description": "The ID of the user. Defaults to \"me\".\nMust be a non-empty string."
            }
          }
        }
      },
      "batch_update_document": {
        "name": "batch_update_document",
        "description": "Apply batch updates to a document.",
        "parameters": {
          "type": "object",
          "properties": {
            "documentId": {
              "type": "string",
              "description": "The ID of the document to update."
            },
            "requests": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "insertText": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "The text to insert."
                      },
                      "location": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer",
                            "description": "The zero-based index in the document's content\n                           where the text will be inserted."
                          }
                        },
                        "description": "Specifies where to insert the text.",
                        "required": [
                          "index"
                        ]
                      }
                    },
                    "description": "Inserts text into the document.",
                    "required": [
                      "location",
                      "text"
                    ]
                  },
                  "updateDocumentStyle": {
                    "type": "object",
                    "properties": {
                      "documentStyle": {
                        "type": "object",
                        "description": "The new document style to apply. The specific\n                               structure of this dictionary will depend on how\n                               document styles are defined in your system."
                      }
                    },
                    "description": "Updates the document's style.",
                    "required": [
                      "documentStyle"
                    ]
                  }
                },
                "required": [
                  "insertText",
                  "updateDocumentStyle"
                ]
              },
              "description": "A list of update requests to apply. Each dictionary\nin the list must be one of the specified request types. Each request\ndictionary typically has a single key identifying the type of request\n(e.g., 'insertText'), and its value is a dictionary containing the\nparameters for that request. The supported request types and their\nstructures are:\n- InsertTextRequest: Corresponds to a dictionary with an 'insertText' key."
            },
            "userId": {
              "type": "string",
              "description": "The ID of the user. Defaults to \"me\"."
            }
          },
          "required": [
            "documentId",
            "requests"
          ]
        }
      }
    },
    "gdrive": {
      "copy_file": {
        "name": "copy_file",
        "description": "Creates a copy of a file if quota allows.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to copy. Must be a non-empty string."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "object",
                  "description": "Name of the copied file. If not provided, defaults to \"Copy of {original_file_name}\"."
                },
                "parents": {
                  "type": "object",
                  "description": "List of parent folder IDs. If not provided, inherits from original file."
                },
                "permissions": {
                  "type": "object",
                  "description": "List of permission objects. Each permission object may include the following fields:",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Permission ID."
                    },
                    "role": {
                      "type": "string",
                      "description": "The role granted by this permission. Allowed values:\n        - 'viewer': Can view the file\n        - 'commenter': Can view and comment on the file\n        - 'editor': Can view, comment, and edit the file\n        - 'owner': Has full control over the file"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the grantee. Allowed values:\n        - 'user': Permission granted to a specific user\n        - 'group': Permission granted to a group\n        - 'domain': Permission granted to a domain\n        - 'anyone': Permission granted to anyone with the link"
                    },
                    "emailAddress": {
                      "type": "object",
                      "description": "The email address of the user or group."
                    },
                    "domain": {
                      "type": "object",
                      "description": "The domain name of the entity this permission refers to."
                    },
                    "allowFileDiscovery": {
                      "type": "object",
                      "description": "Whether the permission allows the file to be discovered through search."
                    },
                    "expirationTime": {
                      "type": "object",
                      "description": "The time at which this permission will expire, in RFC 3339 format."
                    }
                  },
                  "required": [
                    "id",
                    "role",
                    "type"
                  ]
                }
              },
              "description": "Dictionary of file properties with keys:"
            },
            "ignoreDefaultVisibility": {
              "type": "boolean",
              "description": "Whether to ignore default visibility set by domain administrators. Defaults to False."
            },
            "keepRevisionForever": {
              "type": "boolean",
              "description": "Whether to keep revision forever. Defaults to False."
            },
            "ocrLanguage": {
              "type": "string",
              "description": "The language to use for OCR. Defaults to empty string."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. Defaults to False."
            },
            "includePermissionsForView": {
              "type": "string",
              "description": "Specifies which additional view's permissions to include. Defaults to empty string."
            },
            "includeLabels": {
              "type": "string",
              "description": "Comma-separated list of labels to include. Defaults to empty string."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "create_file_or_folder": {
        "name": "create_file_or_folder",
        "description": "Creates a new file or folder with permissions if quota allows.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the file."
                },
                "mimeType": {
                  "type": "string",
                  "description": "MIME type of the file. Can be:\n    - 'application/vnd.google-apps.document'\n    - 'application/vnd.google-apps.spreadsheet'\n    - 'application/vnd.google-apps.presentation'\n    - 'application/vnd.google-apps.drawing'\n    - 'application/vnd.google-apps.folder'\n    - 'application/vnd.google-apps.script'"
                },
                "parents": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of parent folder IDs."
                },
                "size": {
                  "type": "string",
                  "description": "File size in bytes (string that must be convertible to integer)."
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Permission ID"
                      },
                      "role": {
                        "type": "string",
                        "description": "Permission role (e.g., 'owner', 'reader', 'writer')"
                      },
                      "type": {
                        "type": "string",
                        "description": "Permission type (e.g., 'user', 'group', 'domain', 'anyone')"
                      },
                      "emailAddress": {
                        "type": "string",
                        "description": "Email address for user/group permissions"
                      }
                    },
                    "required": [
                      "emailAddress",
                      "id",
                      "role",
                      "type"
                    ]
                  },
                  "description": "List of permission objects with keys:"
                }
              },
              "description": "Dictionary of file properties with keys:",
              "required": [
                "mimeType",
                "name",
                "parents",
                "permissions",
                "size"
              ]
            },
            "media_body": {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "File size in bytes."
                },
                "md5Checksum": {
                  "type": "string",
                  "description": "MD5 checksum of the file content."
                },
                "sha1Checksum": {
                  "type": "string",
                  "description": "SHA1 checksum of the file content."
                },
                "sha256Checksum": {
                  "type": "string",
                  "description": "SHA256 checksum of the file content."
                },
                "mimeType": {
                  "type": "string",
                  "description": "MIME type of the file content."
                },
                "imageMediaMetadata": {
                  "type": "object",
                  "properties": {},
                  "description": "Metadata for image files."
                },
                "videoMediaMetadata": {
                  "type": "object",
                  "properties": {},
                  "description": "Metadata for video files."
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to file for content upload."
                }
              },
              "description": "Dictionary containing media content properties with keys:",
              "required": [
                "filePath",
                "imageMediaMetadata",
                "md5Checksum",
                "mimeType",
                "sha1Checksum",
                "sha256Checksum",
                "size",
                "videoMediaMetadata"
              ]
            },
            "enforceSingleParent": {
              "type": "boolean",
              "description": "Whether to enforce single parent. Defaults to False."
            },
            "ignoreDefaultVisibility": {
              "type": "boolean",
              "description": "Whether to ignore default visibility. Defaults to False."
            },
            "keepRevisionForever": {
              "type": "boolean",
              "description": "Whether to keep revision forever. Defaults to False."
            },
            "ocrLanguage": {
              "type": "string",
              "description": "The language to use for OCR. Defaults to empty string."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. Defaults to False."
            },
            "useContentAsIndexableText": {
              "type": "boolean",
              "description": "Whether to use content as indexable text. Defaults to False."
            },
            "includePermissionsForView": {
              "type": "string",
              "description": "Specifies which additional view's permissions to include. Defaults to empty string."
            },
            "includeLabels": {
              "type": "string",
              "description": "Comma-separated list of labels to include. Defaults to empty string."
            }
          }
        }
      },
      "delete_file_permanently": {
        "name": "delete_file_permanently",
        "description": "Permanently deletes a file owned by the user without moving it to trash.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to delete."
            },
            "enforceSingleParent": {
              "type": "boolean",
              "description": "Whether to enforce single parent. Defaults to False."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. Defaults to False."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "empty_files_from_trash": {
        "name": "empty_files_from_trash",
        "description": "Permanently deletes all of the trashed files owned by the user.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive to empty trash from."
            },
            "enforceSingleParent": {
              "type": "boolean",
              "description": "Whether to enforce single parent."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives."
            }
          }
        }
      },
      "export_google_doc": {
        "name": "export_google_doc",
        "description": "Exports a Google Doc to the requested MIME type and returns binary content.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to export. Must be a non-empty string."
            },
            "mimeType": {
              "type": "string",
              "description": "The MIME type to export to. Must be a non-empty string."
            }
          },
          "required": [
            "fileId",
            "mimeType"
          ]
        }
      },
      "generate_file_ids": {
        "name": "generate_file_ids",
        "description": "Generates a set of file IDs.",
        "parameters": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "description": "Number of IDs to generate."
            },
            "space": {
              "type": "string",
              "description": "The space in which the IDs can be used."
            }
          }
        }
      },
      "get_file_metadata_or_content": {
        "name": "get_file_metadata_or_content",
        "description": "Gets a file's metadata.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to retrieve."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "list_user_files": {
        "name": "list_user_files",
        "description": "Lists the user's files with support for Shared Drives, ordering, and pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "corpora": {
              "type": "string",
              "description": "Comma-separated list of corpora. Defaults to 'user', which means\nonly files owned by or shared with the user will be returned."
            },
            "driveId": {
              "type": "string",
              "description": "ID of the shared drive to search. Defaults to empty string,\nmeaning no specific drive filtering is applied."
            },
            "includeItemsFromAllDrives": {
              "type": "boolean",
              "description": "Whether to include items from all drives.\nDefaults to False, meaning only items from the user's My Drive are included."
            },
            "includeTeamDriveItems": {
              "type": "boolean",
              "description": "Whether to include team drive items.\nDefaults to False, meaning team drive items are excluded."
            },
            "orderBy": {
              "type": "string",
              "description": "Sort order for the results. Defaults to 'folder,modifiedTime desc,name',\nwhich means:\n- Folders are listed first\n- Then files are sorted by modified time in descending order (newest first)\n- Finally, items with the same modified time are sorted by name"
            },
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of files to return. Must be a positive integer.\nDefaults to 10, meaning at most 10 files will be returned per page."
            },
            "pageToken": {
              "type": "string",
              "description": "Token for the next page of results. Defaults to empty string,\nmeaning the first page of results will be returned."
            },
            "q": {
              "type": "string",
              "description": "Query string for filtering files. Defaults to empty string,\nmeaning no filtering is applied. The query string should follow the format: `field operator value`.\nLogical Operators:\nMultiple conditions can be combined using `and` and `or` logical operators.\nFor example, `name = 'file.txt' and trashed = False or mimeType = 'image/jpeg'`\nis processed as `(name = 'file.txt' and trashed = False) or (mimeType = 'image/jpeg')`.\nParentheses for explicitly grouping conditions (e.g., `A and (B or C)`) are not supported.\nnot supported by the current parser. To achieve a query like `A and (B or C)`,\nyou must write it in disjunctive normal form: `(A and B) or (A and C)`.\nFor instance:\n`(name contains 'report' and mimeType = 'application/pdf') or (name contains 'report' and mimeType = 'text/plain')`\nSupported Operators:\n   - `=`: Equals. For exact matches.\n   - `!=`: Not equals.\n   - `contains`: Checks if the field's string representation contains the given value.\n   (e.g., `name contains 'report'`).\n   - `<`: Less than. Used for numeric or date/time fields.\n   - `<=`: Less than or equal to. Used for numeric or date/time fields.\n   - `>`: Greater than. Used for numeric or date/time fields.\n   - `>=`: Greater than or equal to. Used for numeric or date/time fields.\n   - `in`: Checks if a specific string value is present within a list-like field (e.g., `parents`).\n   The syntax is `'stringValue' in fieldName`.\n   For example, `'folderId123' in parents` checks if `'folderId123'`\n   is one of the IDs in the `parents` list of a file.\nValue Types:\n   - Strings: Must be enclosed in single (`'`) or double (`\"`) quotes\n   (e.g., `name = 'My Document.pdf'` or `description = \"Final Report\"`).\n   - Booleans: Use `True` or `False` (case-insensitive)\n   (e.g., `trashed = False` or `starred = True`).\n   - Date/Timestamps: For fields like `modifiedTime` or `createdTime`.\n   Values should be in a standard date/time format that can be parsed\n   (e.g., ISO 8601 format like `'2023-10-26T10:00:00Z'`).\nFilterable Fields:\nYou can attempt to filter on any field present in the file resource dictionary.\nCommon fields include:"
            },
            "spaces": {
              "type": "string",
              "description": "Comma-separated list of spaces to search. Defaults to 'drive',\nwhich means only files in the user's Drive will be returned."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives. Defaults to False,\nmeaning shared drive operations are not supported."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. Defaults to False,\nmeaning team drive operations are not supported."
            },
            "teamDriveId": {
              "type": "string",
              "description": "ID of the team drive to search. Defaults to empty string,\nmeaning no specific team drive filtering is applied."
            },
            "includePermissionsForView": {
              "type": "string",
              "description": "Specifies which additional view's permissions to include.\nDefaults to empty string, meaning no additional permissions are included."
            },
            "includeLabels": {
              "type": "string",
              "description": "Comma-separated list of labels to include. Defaults to empty string,\nmeaning no label filtering is applied."
            }
          }
        }
      },
      "update_file_metadata_or_content": {
        "name": "update_file_metadata_or_content",
        "description": "Updates a file's metadata or content with patch semantics. \n\nThis means only the fields explicitly provided in the `body` dictionary\nwill be updated. All other file properties will remain unchanged.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to update."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "New name of the file."
                },
                "mimeType": {
                  "type": "string",
                  "description": "New MIME type of the file."
                },
                "parents": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "New list of parent folder IDs."
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  },
                  "description": "New list of permission objects."
                }
              },
              "description": "Dictionary of file properties to update with keys:",
              "required": [
                "mimeType",
                "name",
                "parents",
                "permissions"
              ]
            },
            "media_body": {
              "type": "object",
              "properties": {
                "size": {
                  "type": "integer",
                  "description": "File size in bytes."
                },
                "md5Checksum": {
                  "type": "string",
                  "description": "MD5 checksum of the file content."
                },
                "sha1Checksum": {
                  "type": "string",
                  "description": "SHA1 checksum of the file content."
                },
                "sha256Checksum": {
                  "type": "string",
                  "description": "SHA256 checksum of the file content."
                },
                "mimeType": {
                  "type": "string",
                  "description": "MIME type of the file content."
                },
                "imageMediaMetadata": {
                  "type": "object",
                  "properties": {},
                  "description": "Metadata for image files."
                },
                "videoMediaMetadata": {
                  "type": "object",
                  "properties": {},
                  "description": "Metadata for video files."
                },
                "filePath": {
                  "type": "string",
                  "description": "Path to file for content upload (creates new revision)."
                }
              },
              "description": "Dictionary containing media content properties to update with keys:",
              "required": [
                "filePath",
                "imageMediaMetadata",
                "md5Checksum",
                "mimeType",
                "sha1Checksum",
                "sha256Checksum",
                "size",
                "videoMediaMetadata"
              ]
            },
            "addParents": {
              "type": "string",
              "description": "Comma-separated list of parent IDs to add, defaults to ''."
            },
            "enforceSingleParent": {
              "type": "boolean",
              "description": "Whether to enforce single parent, defaults to False."
            },
            "removeParents": {
              "type": "string",
              "description": "Comma-separated list of parent IDs to remove, defaults to ''."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "subscribe_to_file_changes": {
        "name": "subscribe_to_file_changes",
        "description": "Subscribes to changes to a file.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to watch."
            },
            "body": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Channel ID."
                },
                "type": {
                  "type": "string",
                  "description": "Channel type."
                },
                "address": {
                  "type": "string",
                  "description": "Channel address."
                },
                "token": {
                  "type": "string",
                  "description": "Channel token."
                },
                "expiration": {
                  "type": "string",
                  "description": "Channel expiration time."
                }
              },
              "description": "Dictionary of watch properties with keys:",
              "required": [
                "address",
                "expiration",
                "id",
                "token",
                "type"
              ]
            },
            "acknowledgeAbuse": {
              "type": "boolean",
              "description": "Whether to acknowledge abuse."
            },
            "ignoreDefaultVisibility": {
              "type": "boolean",
              "description": "Whether to ignore default visibility."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives."
            },
            "includePermissionsForView": {
              "type": "string",
              "description": "Specifies which additional view's permissions to include."
            },
            "includeLabels": {
              "type": "string",
              "description": "Comma-separated list of labels to include."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "create_shared_drive": {
        "name": "create_shared_drive",
        "description": "Creates a shared drive. If requestId is provided, it's used as the drive's ID and for idempotency.\n\nOtherwise, an internal ID is generated.",
        "parameters": {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string",
              "description": "An ID, such as a random UUID. If provided, this ID is used\nas the drive's ID. If a drive with this ID already exists,\nit is returned. If None or empty, an internal ID is\ngenerated for a new drive."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "object",
                  "description": "The name of the shared drive."
                },
                "restrictions": {
                  "type": "object",
                  "description": "A dictionary of restrictions to apply to the drive, with keys:",
                  "properties": {
                    "adminManagedRestrictions": {
                      "type": "boolean",
                      "description": "Whether administrative privileges on this shared drive are required to modify restrictions."
                    },
                    "copyRequiresWriterPermission": {
                      "type": "boolean",
                      "description": "Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters."
                    },
                    "domainUsersOnly": {
                      "type": "boolean",
                      "description": "Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs."
                    },
                    "driveMembersOnly": {
                      "type": "boolean",
                      "description": "Whether access to items inside this shared drive is restricted to its members."
                    }
                  },
                  "required": [
                    "adminManagedRestrictions",
                    "copyRequiresWriterPermission",
                    "domainUsersOnly",
                    "driveMembersOnly"
                  ]
                },
                "hidden": {
                  "type": "object",
                  "description": "Whether the shared drive is hidden from default view."
                },
                "themeId": {
                  "type": "object",
                  "description": "The ID of the theme to apply to this shared drive."
                }
              },
              "description": "Dictionary of drive properties. Valid keys:"
            }
          }
        }
      },
      "delete_shared_drive": {
        "name": "delete_shared_drive",
        "description": "Permanently deletes a shared drive for which the user is an organizer.\n\nThis function permanently removes a shared drive from the user's account. The drive\nmust be identified by its unique `driveId`. For the operation to succeed, the user\nmust have the appropriate permissions (e.g., be an organizer) for the specified drive.\nOnce deleted, the drive and all of its contents are irretrievably lost.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The unique identifier of the shared drive to be deleted."
            }
          },
          "required": [
            "driveId"
          ]
        }
      },
      "get_shared_drive_metadata": {
        "name": "get_shared_drive_metadata",
        "description": "Gets a shared drive's metadata by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive."
            }
          },
          "required": [
            "driveId"
          ]
        }
      },
      "hide_shared_drive": {
        "name": "hide_shared_drive",
        "description": "Hides a shared drive from the default view.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive to hide. Must be a non-empty string."
            }
          },
          "required": [
            "driveId"
          ]
        }
      },
      "list_user_shared_drives": {
        "name": "list_user_shared_drives",
        "description": "Lists the user's shared drives.\n\nThis function returns a list of shared drives that the user is a member of.\nIt supports filtering by drive properties through the `q` parameter\nand allows for pagination using `pageSize` and `pageToken`.",
        "parameters": {
          "type": "object",
          "properties": {
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of shared drives to return per page.\nMust be an integer between 1 and 100."
            },
            "q": {
              "type": "string",
              "description": "Query string for searching shared drives. \nThe query supports the following fields and operators:\n    - Fields: 'name', 'id', 'createdTime', 'hidden', 'themeId'\n    - Operators: =, !=, <, <=, >, >=, contains, in\nYou can combine conditions with 'and' and 'or'.\nString values must be quoted. Example queries:\n    \"name = 'My Drive'\"\n    \"name contains 'Project' and hidden = false\"\n    \"createdTime >= '2023-01-01T00:00:00Z'\"\n    \"name = 'Team Drive' or themeId = 'blue-theme'\""
            },
            "pageToken": {
              "type": "string",
              "description": "(Optional) A base64-encoded token for pagination. The token encodes a JSON object with:"
            }
          }
        }
      },
      "unhide_shared_drive": {
        "name": "unhide_shared_drive",
        "description": "Restores a shared drive to the default view.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive."
            }
          },
          "required": [
            "driveId"
          ]
        }
      },
      "update_shared_drive_metadata": {
        "name": "update_shared_drive_metadata",
        "description": "Updates the metadata for a shared drive.\n\nThis function modifies an existing shared drive's metadata based on the\nprovided `body`. The drive is identified by its `driveId`.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "object",
                  "description": "The name of the shared drive."
                },
                "restrictions": {
                  "type": "object",
                  "description": "Dictionary of restrictions with keys:",
                  "properties": {
                    "adminManagedRestrictions": {
                      "type": "object",
                      "description": "Whether administrative privileges on this shared drive are required to modify restrictions."
                    },
                    "copyRequiresWriterPermission": {
                      "type": "object",
                      "description": "Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters."
                    },
                    "domainUsersOnly": {
                      "type": "object",
                      "description": "Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs."
                    },
                    "driveMembersOnly": {
                      "type": "object",
                      "description": "Whether access to items inside this shared drive is restricted to its members."
                    }
                  }
                },
                "hidden": {
                  "type": "object",
                  "description": "Whether the shared drive is hidden from default view."
                },
                "themeId": {
                  "type": "object",
                  "description": "The ID of the theme to apply to this shared drive."
                }
              },
              "description": "Dictionary of drive properties to update with keys:"
            }
          },
          "required": [
            "driveId"
          ]
        }
      },
      "create_file_comment": {
        "name": "create_file_comment",
        "description": "Creates a body on a file.\n\nThis function creates a new body on the specified Google Drive file with\ninput validation and error handling.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to comment on."
            },
            "body": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "object",
                  "description": "The plain text content of the comment."
                },
                "author": {
                  "type": "object",
                  "description": "Author information with keys:",
                  "properties": {
                    "displayName": {
                      "type": "string",
                      "description": "Display name of the author."
                    },
                    "emailAddress": {
                      "type": "string",
                      "description": "Valid email address of the author."
                    }
                  },
                  "required": [
                    "displayName",
                    "emailAddress"
                  ]
                },
                "quotedFileContent": {
                  "type": "object",
                  "description": "Quoted content with keys:",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "The quoted content text (required if quotedFileContent provided)."
                    },
                    "mimeType": {
                      "type": "string",
                      "description": "MIME type of the quoted content (required if quotedFileContent provided)."
                    }
                  },
                  "required": [
                    "mimeType",
                    "value"
                  ]
                },
                "anchor": {
                  "type": "object",
                  "description": "Anchor point for the comment."
                },
                "resolved": {
                  "type": "object",
                  "description": "Whether the comment is resolved (defaults to False)."
                }
              },
              "description": "Dictionary containing comment properties. If None,\nan empty dictionary is used. Supported keys:",
              "required": [
                "content"
              ]
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "get_file_comment": {
        "name": "get_file_comment",
        "description": "Gets a comment by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file the comment belongs to."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment to get."
            },
            "includeDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted comments."
            }
          },
          "required": [
            "commentId",
            "fileId"
          ]
        }
      },
      "list_comments": {
        "name": "list_comments",
        "description": "Lists comments for a file.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file to list comments for. Cannot be empty."
            },
            "includeDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted comments.\nIf False, deleted comments are excluded from the response. Defaults to False."
            },
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of comments to return per page.\nMust be between 1 and 100, inclusive. Defaults to 20."
            },
            "pageToken": {
              "type": "string",
              "description": "Page token for continuing a previous list request.\nProvides the starting point for pagination. Expected to be an integer string if provided.\nDefaults to an empty string."
            },
            "startModifiedTime": {
              "type": "string",
              "description": "The start time to filter comments by.\nOnly comments modified on or after this timestamp are returned.\nFormat: RFC 3339 timestamp (e.g., '2023-01-01T00:00:00Z').\nDefaults to an empty string (no time filter)."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "update_file_comment": {
        "name": "update_file_comment",
        "description": "Updates a comment with patch semantics.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file the comment belongs to."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment to update."
            },
            "body": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The content of the comment."
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "displayName": {
                      "type": "string",
                      "description": "The display name of the author."
                    },
                    "emailAddress": {
                      "type": "string",
                      "description": "The email address of the author."
                    }
                  },
                  "description": "Dictionary of author information with keys:",
                  "required": [
                    "displayName",
                    "emailAddress"
                  ]
                },
                "quotedFileContent": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "The quoted content."
                    },
                    "mimeType": {
                      "type": "string",
                      "description": "The MIME type of the quoted content."
                    }
                  },
                  "description": "Dictionary of quoted content with keys:",
                  "required": [
                    "mimeType",
                    "value"
                  ]
                },
                "anchor": {
                  "type": "string",
                  "description": "The anchor point of the comment."
                },
                "resolved": {
                  "type": "boolean",
                  "description": "Whether the comment has been resolved."
                }
              },
              "description": "Dictionary of comment properties to update with keys:",
              "required": [
                "anchor",
                "author",
                "content",
                "quotedFileContent",
                "resolved"
              ]
            }
          },
          "required": [
            "commentId",
            "fileId"
          ]
        }
      },
      "delete_file_comment": {
        "name": "delete_file_comment",
        "description": "Deletes a comment from a file in Google Drive.\n\nThis function permanently removes a comment from a file. The comment is\nidentified by its `commentId` and the `fileId` of the file it is associated\nwith. If the comment does not exist or the provided IDs are incorrect,\nan error will be raised.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file the comment belongs to."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment to delete."
            }
          },
          "required": [
            "commentId",
            "fileId"
          ]
        }
      },
      "get_drive_account_info": {
        "name": "get_drive_account_info",
        "description": "Gets information about the user's Drive account.\n\nThis function retrieves account information for the authenticated user\nfrom the Google Drive API. The response can be filtered to include\nonly specific fields using the fields parameter.",
        "parameters": {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string",
              "description": "A comma-separated list of fields to include in the response.\nUse '*' to include all fields (default).\nFor partial responses, use comma-separated field names (e.g., 'user,storageQuota').\nFor nested fields, use dot notation (e.g., 'user.displayName,storageQuota.limit').\nField names are case-sensitive and whitespace around commas is ignored."
            }
          }
        }
      },
      "create_permission": {
        "name": "create_permission",
        "description": "Creates a permission for a file or shared drive.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file or shared drive."
            },
            "body": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role granted by this permission, defaults to 'reader' (alias for 'viewer'). Possible values:\n    - 'viewer': Can view the file\n    - 'commenter': Can view and comment on the file\n    - 'editor': Can view, comment, and edit the file\n    - 'owner': Has full control over the file"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the grantee, defaults to 'user'. Possible values:\n    - 'user': Permission granted to a specific user\n    - 'group': Permission granted to a group\n    - 'domain': Permission granted to a domain\n    - 'anyone': Permission granted to anyone with the link"
                },
                "emailAddress": {
                  "type": "string",
                  "description": "The email address of the user or group to grant the permission to. This will be normalized to lowercase."
                },
                "domain": {
                  "type": "string",
                  "description": "The domain name (e.g. 'example.com') of the entity this permission refers to."
                },
                "allowFileDiscovery": {
                  "type": "boolean",
                  "description": "Whether the permission allows the file to be discovered through search, defaults to False."
                },
                "expirationTime": {
                  "type": "string",
                  "description": "The time at which this permission will expire, in RFC 3339 format. Example: `'2025-06-30T12:00:00Z'` (UTC) or `'2025-06-30T08:00:00-04:00'`."
                }
              },
              "description": "Dictionary of permission properties with keys:",
              "required": [
                "allowFileDiscovery",
                "domain",
                "emailAddress",
                "expirationTime",
                "role",
                "type"
              ]
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "delete_permission": {
        "name": "delete_permission",
        "description": "Deletes a permission.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file or shared drive."
            },
            "permissionId": {
              "type": "string",
              "description": "The ID of the permission to delete."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. Defaults to False."
            },
            "useDomainAdminAccess": {
              "type": "boolean",
              "description": "Whether to use domain admin access. Defaults to False."
            }
          },
          "required": [
            "fileId",
            "permissionId"
          ]
        }
      },
      "get_permission": {
        "name": "get_permission",
        "description": "Gets a permission by ID.\n\nRetrieves a specific permission by its ID for the specified file. The function\nsupports various access patterns including shared drives and domain admin access.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file or shared drive. Must be a non-empty string."
            },
            "permissionId": {
              "type": "string",
              "description": "The ID of the permission to retrieve. Must be a non-empty string."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether the requesting application supports both My Drives \nand shared drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. Deprecated - use \nsupportsAllDrives instead. Defaults to False."
            },
            "useDomainAdminAccess": {
              "type": "boolean",
              "description": "Issue the request as a domain administrator. If set to \ntrue, grants access if the file ID refers to a shared drive and the requester \nis an administrator of the domain to which the shared drive belongs. Defaults to False."
            }
          },
          "required": [
            "fileId",
            "permissionId"
          ]
        }
      },
      "list_permissions": {
        "name": "list_permissions",
        "description": "Lists a file's or shared drive's permissions.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file or shared drive."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether to support all drives. If True, includes permissions from all drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "Whether to support team drives. If True, includes team drive specific permissions. Defaults to False."
            },
            "useDomainAdminAccess": {
              "type": "boolean",
              "description": "Whether to use domain admin access. If True, includes domain-wide permissions. Defaults to False."
            }
          },
          "required": [
            "fileId"
          ]
        }
      },
      "update_permission": {
        "name": "update_permission",
        "description": "Updates a permission with patch semantics.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file or shared drive."
            },
            "permissionId": {
              "type": "string",
              "description": "The ID of the permission to update."
            },
            "body": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role granted by this permission. Possible values:\n    - 'viewer': Can view the file, (alias for 'reader')\n    - 'commenter': Can view and comment on the file\n    - 'editor': Can view, comment, and edit the file (alias for 'writer')\n    - 'owner': Has full control over the file"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the grantee. Possible values:\n    - 'user': Permission granted to a specific user\n    - 'group': Permission granted to a group\n    - 'domain': Permission granted to a domain\n    - 'anyone': Permission granted to anyone with the link"
                },
                "emailAddress": {
                  "type": "string",
                  "description": "The email address of the user or group."
                },
                "domain": {
                  "type": "string",
                  "description": "The domain name of the entity this permission refers to."
                },
                "allowFileDiscovery": {
                  "type": "boolean",
                  "description": "Whether the permission allows the file to be discovered through search."
                },
                "expirationTime": {
                  "type": "string",
                  "description": "The time at which this permission will expire."
                }
              },
              "description": "Dictionary of permission properties to update with keys:",
              "required": [
                "allowFileDiscovery",
                "domain",
                "emailAddress",
                "expirationTime",
                "role",
                "type"
              ]
            },
            "transferOwnership": {
              "type": "boolean",
              "description": "Whether to transfer ownership to the specified user and downgrade the current owner to a writer."
            }
          },
          "required": [
            "fileId",
            "permissionId"
          ]
        }
      },
      "get_app_details": {
        "name": "get_app_details",
        "description": "Gets a specific app.",
        "parameters": {
          "type": "object",
          "properties": {
            "appId": {
              "type": "string",
              "description": "The ID of the app to retrieve."
            }
          },
          "required": [
            "appId"
          ]
        }
      },
      "list_installed_apps": {
        "name": "list_installed_apps",
        "description": "Lists a user's installed apps.\n\nThis function retrieves all installed apps for the current user and applies\noptional filtering based on file extensions and MIME types. The languageCode\nparameter is accepted for API compatibility but does not affect the current\nimplementation.",
        "parameters": {
          "type": "object",
          "properties": {
            "appFilterExtensions": {
              "type": "string",
              "description": "A comma-separated list of file extensions \nto filter by (e.g., \"pdf,txt,docx\"). Only apps that support these extensions\nwill be returned. Defaults to '' (no filtering)."
            },
            "appFilterMimeTypes": {
              "type": "string",
              "description": "A comma-separated list of MIME types to \nfilter by (e.g., \"text/plain,application/pdf\"). Only apps that support \nthese MIME types will be returned. Defaults to '' (no filtering)."
            },
            "languageCode": {
              "type": "string",
              "description": "The language code to use for localized strings.\nCurrently unused but accepted for API compatibility. Defaults to ''."
            }
          }
        }
      },
      "stop_channel_watch": {
        "name": "stop_channel_watch",
        "description": "Stops watching resources through this channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of the channel to stop."
                },
                "resourceId": {
                  "type": "string",
                  "description": "The ID of the resource being watched."
                },
                "resourceUri": {
                  "type": "string",
                  "description": "The URI of the resource being watched."
                },
                "token": {
                  "type": "string",
                  "description": "The token used to authenticate the channel."
                },
                "expiration": {
                  "type": "string",
                  "description": "The time at which the channel will expire (RFC3339 format)."
                },
                "type": {
                  "type": "string",
                  "description": "The type of the channel."
                },
                "address": {
                  "type": "string",
                  "description": "The address where notifications are delivered."
                },
                "payload": {
                  "type": "boolean",
                  "description": "Whether to include the payload in notifications."
                },
                "params": {
                  "type": "object",
                  "properties": {},
                  "description": "Additional parameters for the channel."
                }
              },
              "description": "Dictionary of channel properties. \nIf None or empty dictionary, no action is taken. Required key:",
              "required": [
                "address",
                "expiration",
                "id",
                "params",
                "payload",
                "resourceId",
                "resourceUri",
                "token",
                "type"
              ]
            }
          }
        }
      },
      "get_changes_start_page_token": {
        "name": "get_changes_start_page_token",
        "description": "Gets the starting pageToken for listing future changes.\n\nThis method retrieves a starting page token that can be used to list changes\nto files in a user's Drive or a shared drive. The page token doesn't expire\nand should be stored for subsequent change tracking operations.",
        "parameters": {
          "type": "object",
          "properties": {
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive for which the starting \npageToken for listing future changes will be returned. Must be a valid \nshared drive ID if provided. Defaults to empty string (user's My Drive)."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether the requesting application \nsupports both My Drives and shared drives. When True, enables access \nto shared drive content. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "**DEPRECATED** - Use supportsAllDrives \ninstead. This parameter will be removed in a future version. Defaults to False."
            },
            "teamDriveId": {
              "type": "string",
              "description": "**DEPRECATED** - Use driveId instead. \nThis parameter will be removed in a future version. Defaults to empty string."
            }
          }
        }
      },
      "list_changes": {
        "name": "list_changes",
        "description": "Lists the changes for a user or shared drive.\n\nThis method retrieves a list of changes that have occurred since the specified \npage token. Changes include file additions, modifications, deletions, and \npermission changes.",
        "parameters": {
          "type": "object",
          "properties": {
            "pageToken": {
              "type": "string",
              "description": "The token for continuing a previous list request on the next page.\nThis token is obtained from a previous changes.list request or from \nchanges.getStartPageToken(). Cannot be empty."
            },
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive for which changes are returned.\nOnly changes to files within this shared drive will be returned.\nDefaults to empty string (user's My Drive)."
            },
            "includeCorpusRemovals": {
              "type": "boolean",
              "description": "Whether changes should include the file resource \nif the file is still accessible by the user at the time of the request.\nDefaults to False."
            },
            "includeItemsFromAllDrives": {
              "type": "boolean",
              "description": "Whether both My Drive and shared drive items \nshould be included in results. Defaults to False."
            },
            "includeRemoved": {
              "type": "boolean",
              "description": "Whether to include changes indicating that items have \nbeen removed from the list of changes. Defaults to True."
            },
            "includeTeamDriveItems": {
              "type": "boolean",
              "description": "**DEPRECATED** - Use includeItemsFromAllDrives \ninstead. Whether to include changes for team drive items. Defaults to False."
            },
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of changes to return per page. Must be between \n1 and 1000 inclusive. Defaults to 100."
            },
            "restrictToMyDrive": {
              "type": "boolean",
              "description": "Whether to restrict the results to changes inside \nthe My Drive hierarchy. This cannot be used together with teamDriveId or driveId.\nDefaults to False."
            },
            "spaces": {
              "type": "string",
              "description": "A comma-separated list of spaces to query within the user corpus.\nSupported values are 'drive', 'appDataFolder', and 'photos'. Defaults to 'drive'."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether the requesting application supports both \nMy Drives and shared drives. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "**DEPRECATED** - Use supportsAllDrives instead.\nWhether the requesting application supports Team Drives. Defaults to False."
            },
            "teamDriveId": {
              "type": "string",
              "description": "**DEPRECATED** - Use driveId instead. The ID of the Team Drive \nfor which changes will be returned. Defaults to empty string."
            },
            "includePermissionsForView": {
              "type": "string",
              "description": "Specifies which additional view's permissions \nto include in the response. Only 'published' is supported. Defaults to empty string."
            },
            "includeLabels": {
              "type": "string",
              "description": "A comma-separated list of IDs of labels to include in \nthe labelInfo part of the response. Defaults to empty string."
            }
          },
          "required": [
            "pageToken"
          ]
        }
      },
      "watch_changes": {
        "name": "watch_changes",
        "description": "Creates a simulated notification channel for watching changes in Google Drive.\n\nThis function simulates setting up a watch channel for changes to files in \na user's Drive or shared drive. In the simulation, it stores the channel \nconfiguration and validates the watch parameters, but does not establish \nactual real-time notifications.",
        "parameters": {
          "type": "object",
          "properties": {
            "pageToken": {
              "type": "string",
              "description": "The token for the initial page of changes to watch from.\nThis token is obtained from changes.getStartPageToken() or a previous \nchanges.list request. Cannot be empty."
            },
            "resource": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Required. Unique identifier for the channel."
                },
                "type": {
                  "type": "string",
                  "description": "Required. Channel type, typically 'web_hook'."
                },
                "address": {
                  "type": "string",
                  "description": "Required. URL where notifications are delivered."
                },
                "resourceId": {
                  "type": "string",
                  "description": "Optional. ID of the resource being watched."
                },
                "resourceUri": {
                  "type": "string",
                  "description": "Optional. URI of the resource being watched."
                },
                "token": {
                  "type": "string",
                  "description": "Optional. Token for authenticating the channel."
                },
                "expiration": {
                  "type": "string",
                  "description": "Optional. Expiration time in RFC 3339 format."
                },
                "payload": {
                  "type": "boolean",
                  "description": "Optional. Whether to include payload in notifications."
                },
                "params": {
                  "type": "object",
                  "properties": {},
                  "description": "Optional. Additional channel parameters."
                }
              },
              "description": "Dictionary of notification channel \nproperties. If None, a minimal channel will be created. Expected keys:",
              "required": [
                "address",
                "expiration",
                "id",
                "params",
                "payload",
                "resourceId",
                "resourceUri",
                "token",
                "type"
              ]
            },
            "driveId": {
              "type": "string",
              "description": "The ID of the shared drive for which changes are watched.\nOnly changes to files within this shared drive will trigger notifications.\nDefaults to empty string (user's My Drive)."
            },
            "includeCorpusRemovals": {
              "type": "boolean",
              "description": "Whether the watch should include notifications \nfor files that are removed from the corpus but still accessible.\nDefaults to False."
            },
            "includeItemsFromAllDrives": {
              "type": "boolean",
              "description": "Whether to watch changes in both My Drive \nand shared drives. Defaults to False."
            },
            "includeRemoved": {
              "type": "boolean",
              "description": "Whether to include notifications for removed items.\nDefaults to True."
            },
            "includeTeamDriveItems": {
              "type": "boolean",
              "description": "**DEPRECATED** - Use includeItemsFromAllDrives \ninstead. Whether to include changes for team drive items. Defaults to False."
            },
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of changes to return per notification. \nMust be between 1 and 1000 inclusive. Defaults to 100."
            },
            "restrictToMyDrive": {
              "type": "boolean",
              "description": "Whether to restrict notifications to changes \ninside the My Drive hierarchy only. Cannot be used with driveId or teamDriveId.\nDefaults to False."
            },
            "spaces": {
              "type": "string",
              "description": "A comma-separated list of spaces to watch for changes.\nSupported values are 'drive', 'appDataFolder', and 'photos'. Defaults to 'drive'."
            },
            "supportsAllDrives": {
              "type": "boolean",
              "description": "Whether the requesting application supports both \nMy Drives and shared drives. Required when driveId is specified. Defaults to False."
            },
            "supportsTeamDrives": {
              "type": "boolean",
              "description": "**DEPRECATED** - Use supportsAllDrives instead.\nWhether the application supports Team Drives. Defaults to False."
            },
            "teamDriveId": {
              "type": "string",
              "description": "**DEPRECATED** - Use driveId instead. The ID of the Team Drive \nto watch for changes. Defaults to empty string."
            },
            "includePermissionsForView": {
              "type": "string",
              "description": "Specifies which additional view's permissions \nto include in change notifications. Only 'published' is supported. \nDefaults to empty string."
            },
            "includeLabels": {
              "type": "string",
              "description": "A comma-separated list of label IDs to include in \nthe labelInfo part of change notifications. Defaults to empty string."
            }
          },
          "required": [
            "pageToken"
          ]
        }
      },
      "create_comment_reply": {
        "name": "create_comment_reply",
        "description": "Creates a reply to a comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment."
            },
            "body": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The content of the reply."
                },
                "displayName": {
                  "type": "string",
                  "description": "The author's display name."
                },
                "emailAddress": {
                  "type": "string",
                  "description": "The author's email address."
                },
                "photoLink": {
                  "type": "string",
                  "description": "A link to the author's profile photo."
                }
              },
              "description": "Dictionary containing the reply details with keys:",
              "required": [
                "content",
                "displayName",
                "emailAddress",
                "photoLink"
              ]
            }
          },
          "required": [
            "body",
            "commentId",
            "fileId"
          ]
        }
      },
      "delete_comment_reply": {
        "name": "delete_comment_reply",
        "description": "Deletes a reply.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment."
            },
            "replyId": {
              "type": "string",
              "description": "The ID of the reply to delete."
            }
          },
          "required": [
            "commentId",
            "fileId",
            "replyId"
          ]
        }
      },
      "get_comment_reply": {
        "name": "get_comment_reply",
        "description": "Gets a reply by ID from a comment on a file.\n\nThis function retrieves a specific reply to a comment on a Google Drive file.\nDeleted replies are excluded by default unless explicitly requested.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment."
            },
            "replyId": {
              "type": "string",
              "description": "The ID of the reply to retrieve."
            },
            "includeDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted replies in the response.\nDefaults to False. When False, deleted replies return None."
            }
          },
          "required": [
            "commentId",
            "fileId",
            "replyId"
          ]
        }
      },
      "list_comment_replies": {
        "name": "list_comment_replies",
        "description": "Lists a comment's replies.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file. Must not be empty."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment. Must not be empty."
            },
            "includeDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted replies. Defaults to False."
            },
            "pageSize": {
              "type": "integer",
              "description": "Maximum number of replies to return per page. Must be positive. Defaults to 20."
            },
            "pageToken": {
              "type": "string",
              "description": "Token for the next page of results. Defaults to an empty string."
            }
          },
          "required": [
            "commentId",
            "fileId"
          ]
        }
      },
      "update_comment_reply": {
        "name": "update_comment_reply",
        "description": "Updates a reply.",
        "parameters": {
          "type": "object",
          "properties": {
            "fileId": {
              "type": "string",
              "description": "The ID of the file."
            },
            "commentId": {
              "type": "string",
              "description": "The ID of the comment."
            },
            "replyId": {
              "type": "string",
              "description": "The ID of the reply to update."
            },
            "body": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The updated content of the reply."
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "displayName": {
                      "type": "string",
                      "description": "The author's display name."
                    },
                    "emailAddress": {
                      "type": "string",
                      "description": "The author's email address."
                    },
                    "photoLink": {
                      "type": "string",
                      "description": "A link to the author's profile photo."
                    }
                  },
                  "description": "Updated information about the author with keys:",
                  "required": [
                    "displayName",
                    "emailAddress",
                    "photoLink"
                  ]
                }
              },
              "description": "Dictionary containing the updated reply details with keys:",
              "required": [
                "author",
                "content"
              ]
            }
          },
          "required": [
            "commentId",
            "fileId",
            "replyId"
          ]
        }
      },
      "get_file_content": {
        "name": "get_file_content",
        "description": "Get file content, optionally for a specific revision.\n\nThis function retrieves the content of a file, optionally for a specific revision.\nIf a revision ID is provided, it searches the file's revisions list for the matching\nrevision and returns its content. If no revision ID is provided, it returns the current\ncontent of the file.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user retrieving the file content."
            },
            "file_id": {
              "type": "string",
              "description": "The ID of the file to retrieve content from."
            },
            "revision_id": {
              "type": "string",
              "description": "Optional revision ID to get specific revision."
            }
          },
          "required": [
            "file_id",
            "user_id"
          ]
        }
      },
      "create_file_revision": {
        "name": "create_file_revision",
        "description": "Create a new revision for a file.\n\nThis function creates a new revision for a file with the given content. It\ngenerates a unique revision ID based on the existing revisions in the file's\ndata structure, creates a revision content structure matching the expected\nJSON format, and validates the revision using the RevisionModel. The function\nthen adds the revision to the file's revisions list.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user creating the revision."
            },
            "file_id": {
              "type": "string",
              "description": "The ID of the file to which the revision is being added."
            },
            "content": {
              "type": "object",
              "description": "The content to be added to the revision."
            }
          },
          "required": [
            "content",
            "file_id",
            "user_id"
          ]
        }
      },
      "update_file_content": {
        "name": "update_file_content",
        "description": "Update file content with new bytes data.\n\nThis function updates the content of a file with new bytes data. It calculates\na new checksum for the new content, encodes it to base64, and creates a new\ncontent structure matching the expected JSON format. The function then validates\nthe new content using the FileContentModel and creates a new revision before\nupdating the file's content and size. Finally, it clears the export cache since\nthe content has changed.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user updating the file content."
            },
            "file_id": {
              "type": "string",
              "description": "The ID of the file to which content is being updated."
            },
            "new_content": {
              "type": "object",
              "description": "The new content to be added to the file."
            }
          },
          "required": [
            "file_id",
            "new_content",
            "user_id"
          ]
        }
      },
      "export_file_content": {
        "name": "export_file_content",
        "description": "Export file content to a different format.\n\nThis function exports the content of a file to a different format. It checks\nif the export is cached and returns the cached content if available. If not,\nit decodes the current content, validates the export format, and exports the\ncontent to the target MIME type. Finally, it caches the exported content and\nreturns the exported content.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user exporting the file content."
            },
            "file_id": {
              "type": "string",
              "description": "The ID of the file to export content from."
            },
            "target_mime": {
              "type": "string",
              "description": "The target MIME type for export."
            }
          },
          "required": [
            "file_id",
            "target_mime",
            "user_id"
          ]
        }
      },
      "list_file_revisions": {
        "name": "list_file_revisions",
        "description": "List all revisions for a file.\n\nThis function retrieves all revisions for a file. It returns the file's revisions\nlist, which is a list of dictionaries containing the revision information.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user retrieving the revisions."
            },
            "file_id": {
              "type": "string",
              "description": "The ID of the file to retrieve revisions from."
            }
          },
          "required": [
            "file_id",
            "user_id"
          ]
        }
      }
    },
    "youtube": {
      "list_activities": {
        "name": "list_activities",
        "description": "Retrieves a list of activities with optional filters.\n\nThis method allows fetching activities from YouTube based on various criteria such as\nchannel ID, publication date range, and region code. Activities represent various\nactions that occur on YouTube, such as uploads, likes, comments, etc.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the activity resource properties that\nthe API response will include."
            },
            "channelId": {
              "type": "string",
              "description": "The channelId parameter specifies a YouTube channel ID.\nThe API will only return that channel's activities."
            },
            "mine": {
              "type": "boolean",
              "description": "Set this parameter's value to true to retrieve a feed of\nthe authenticated user's activities."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number\nof items that should be returned in the result set."
            },
            "pageToken": {
              "type": "string",
              "description": "The pageToken parameter identifies a specific page in\nthe result set that should be returned."
            },
            "publishedAfter": {
              "type": "string",
              "description": "The publishedAfter parameter specifies the earliest\ndate and time that an activity could have occurred."
            },
            "publishedBefore": {
              "type": "string",
              "description": "The publishedBefore parameter specifies the latest\ndate and time that an activity could have occurred."
            },
            "regionCode": {
              "type": "string",
              "description": "The regionCode parameter instructs the API to select a\nvideo chart available in the specified region."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "list_video_categories": {
        "name": "list_video_categories",
        "description": "Retrieves a list of video categories with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the videoCategory resource properties that the API response will include."
            },
            "hl": {
              "type": "string",
              "description": "The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports. Currently unused!"
            },
            "id": {
              "type": "string",
              "description": "The id parameter identifies the video category that is being retrieved."
            },
            "region_code": {
              "type": "string",
              "description": "The regionCode parameter instructs the API to select a video category available in the specified region."
            },
            "max_results": {
              "type": "integer",
              "description": "The maximum number of items that should be returned in the result set."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "create_comment_thread": {
        "name": "create_comment_thread",
        "description": "Inserts a new comment thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the commentThread resource properties\nthat the API response will include. Currently, only \"snippet\" is supported."
            },
            "snippet": {
              "type": "object",
              "description": "The snippet object contains details about the comment thread.\nThis is treated as arbitrary thread metadata."
            },
            "top_level_comment": {
              "type": "object",
              "description": "The top-level comment for the thread.\nIf provided, it's expected to be a dictionary\npotentially containing an 'id' (str) key."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "list_comment_threads": {
        "name": "list_comment_threads",
        "description": "Retrieves a list of comment threads with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the commentThread resource properties that the API response will include. Cannot be empty."
            },
            "thread_id": {
              "type": "string",
              "description": "The id parameter identifies the comment thread that is being retrieved."
            },
            "channel_id": {
              "type": "string",
              "description": "The channelId parameter specifies a YouTube channel ID. The API will only return that channel's comment threads."
            },
            "video_id": {
              "type": "string",
              "description": "The videoId parameter identifies the video for which the API should return comment threads."
            },
            "all_threads_related_to_channel_id": {
              "type": "string",
              "description": "The allThreadsRelatedToChannelId parameter specifies a YouTube channel ID. The API will return all comment threads related to that channel."
            },
            "search_terms": {
              "type": "string",
              "description": "The searchTerms parameter specifies the search terms to use when filtering comment threads."
            },
            "moderation_status": {
              "type": "string",
              "description": "The moderationStatus parameter specifies the moderation status of comments to include in the response."
            },
            "order": {
              "type": "string",
              "description": "The order parameter specifies the order in which the API response should list comment threads."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set. Must be a positive integer if provided."
            },
            "page_token": {
              "type": "string",
              "description": "The pageToken parameter identifies a specific page in the result set that should be returned."
            },
            "text_format": {
              "type": "string",
              "description": "The textFormat parameter specifies the format of the text in the comments."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "delete_comment_thread": {
        "name": "delete_comment_thread",
        "description": "Deletes a comment thread by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "thread_id": {
              "type": "string",
              "description": "The ID of the comment thread to delete."
            }
          },
          "required": [
            "thread_id"
          ]
        }
      },
      "update_comment_thread": {
        "name": "update_comment_thread",
        "description": "Updates an existing comment thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "thread_id": {
              "type": "string",
              "description": "The ID of the comment thread to update."
            },
            "snippet": {
              "type": "object",
              "description": "The snippet object contains details about the comment thread."
            },
            "comments": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of comment IDs associated with the thread."
            }
          },
          "required": [
            "thread_id"
          ]
        }
      },
      "list_searches": {
        "name": "list_searches",
        "description": "Returns a collection of search results that match the query parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies a comma-separated list of one or more search resource properties."
            },
            "q": {
              "type": "string",
              "description": "The query term to search for."
            },
            "channel_id": {
              "type": "string",
              "description": "Filter results to only contain resources created by the specified channel."
            },
            "channel_type": {
              "type": "string",
              "description": "Filter results to only contain channels of a particular type."
            },
            "max_results": {
              "type": "integer",
              "description": "The maximum number of items that should be returned in the result set."
            },
            "order": {
              "type": "string",
              "description": "The order in which to sort the returned resources."
            },
            "type": {
              "type": "string",
              "description": "A comma-separated list of resource types that should be included in the search response."
            },
            "video_caption": {
              "type": "string",
              "description": "Filter videos based on the presence, absence, or type of captions."
            },
            "video_category_id": {
              "type": "string",
              "description": "Filter videos by category ID."
            },
            "video_definition": {
              "type": "string",
              "description": "Filter videos by definition (high or standard)."
            },
            "video_duration": {
              "type": "string",
              "description": "Filter videos by duration."
            },
            "video_embeddable": {
              "type": "string",
              "description": "Filter videos that can be embedded."
            },
            "video_license": {
              "type": "string",
              "description": "Filter videos by license type."
            },
            "video_syndicated": {
              "type": "string",
              "description": "Filter videos by syndication status."
            },
            "video_type": {
              "type": "string",
              "description": "Filter videos by type."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "list_channel_sections": {
        "name": "list_channel_sections",
        "description": "Retrieves a list of channel sections with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the channelSection resource properties that the API response will include.\nIt should be a comma-separated string of valid parts (e.g., \"id,snippet,contentDetails\").\nAt least one specified part must be valid. An empty string, a string consisting only of\ncommas/whitespace, or a string with no valid parts after parsing will raise an error."
            },
            "channel_id": {
              "type": "string",
              "description": "The channelId parameter specifies a YouTube channel ID.\nThe API will only return that channel's sections."
            },
            "hl": {
              "type": "string",
              "description": "The hl parameter instructs the API to retrieve localized resource metadata\nfor a specific application language that the YouTube website supports."
            },
            "section_id": {
              "type": "string",
              "description": "The id parameter specifies a comma-separated list of the YouTube channel section ID(s)\nfor the resource(s) that are being retrieved. This is expected as a single string.\nThe original core logic appears to treat this as a single ID for filtering if provided,\nrather than parsing a list of IDs from this string."
            },
            "mine": {
              "type": "boolean",
              "description": "The mine parameter can be used to instruct the API to only return channel sections\nowned by the authenticated user."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's\nauthorization credentials identify a YouTube CMS user who is acting\non behalf of the content owner specified in the parameter value."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "delete_channel_section": {
        "name": "delete_channel_section",
        "description": "Deletes a channel section from the simulated database.",
        "parameters": {
          "type": "object",
          "properties": {
            "section_id": {
              "type": "string",
              "description": "The unique identifier of the channel section to delete."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "Content owner ID for CMS user operations."
            }
          },
          "required": [
            "section_id"
          ]
        }
      },
      "insert_channel_section": {
        "name": "insert_channel_section",
        "description": "Inserts a new channel section.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the channelSection resource properties that the API response will include."
            },
            "snippet": {
              "type": "string",
              "description": "The snippet object contains details about the channel section."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. Currently not used!"
            },
            "on_behalf_of_content_owner_channel": {
              "type": "string",
              "description": "The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which the user is being added. Currently not used!"
            }
          },
          "required": [
            "part",
            "snippet"
          ]
        }
      },
      "update_channel_section": {
        "name": "update_channel_section",
        "description": "Updates a channel section.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the channelSection resource properties that the API response will include."
            },
            "section_id": {
              "type": "string",
              "description": "The ID of the channel section to update."
            },
            "snippet": {
              "type": "string",
              "description": "The snippet object contains details about the channel section."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. Currently not used !"
            }
          },
          "required": [
            "part",
            "section_id"
          ]
        }
      },
      "list_channels": {
        "name": "list_channels",
        "description": "Retrieves a list of channels with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "category_id": {
              "type": "string",
              "description": "The categoryId parameter specifies a YouTube guide category ID.\nThe API response will only include channels from that category."
            },
            "for_username": {
              "type": "string",
              "description": "The forUsername parameter specifies a YouTube username.\nThe API response will only include the channel associated with that username."
            },
            "hl": {
              "type": "string",
              "description": "The hl parameter instructs the API to retrieve localized resource metadata\nfor a specific application language that the YouTube website supports."
            },
            "channel_id": {
              "type": "string",
              "description": "The id parameter specifies a comma-separated list of the YouTube channel ID(s)\nfor the resource(s) that are being retrieved."
            },
            "managed_by_me": {
              "type": "boolean",
              "description": "The managedByMe parameter can be used to instruct the API\nto only return channels that the user is allowed to manage."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items\nthat should be returned in the result set. Must be between 1 and 50."
            },
            "mine": {
              "type": "boolean",
              "description": "The mine parameter can be used to instruct the API to only return\nchannels owned by the authenticated user."
            },
            "my_subscribers": {
              "type": "boolean",
              "description": "The mySubscribers parameter can be used to instruct the API\nto only return channels to which the authenticated user has subscribed."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the\nrequest's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified\nin the parameter value."
            }
          }
        }
      },
      "create_channel": {
        "name": "create_channel",
        "description": "Creates a new channel resource in the simulated database.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the channel resource properties that the API response will include."
            },
            "category_id": {
              "type": "string",
              "description": "The categoryId parameter specifies a YouTube guide category ID for the new channel."
            },
            "for_username": {
              "type": "string",
              "description": "The forUsername parameter specifies a YouTube username for the new channel."
            },
            "hl": {
              "type": "string",
              "description": "The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports."
            },
            "channel_id": {
              "type": "string",
              "description": "The id parameter specifies the YouTube channel ID for the new channel. Currently not used!"
            },
            "managed_by_me": {
              "type": "boolean",
              "description": "The managedByMe parameter indicates whether the channel is managed by the authenticated user."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set."
            },
            "mine": {
              "type": "boolean",
              "description": "The mine parameter indicates whether the channel is owned by the authenticated user."
            },
            "my_subscribers": {
              "type": "boolean",
              "description": "The mySubscribers parameter indicates whether the authenticated user has subscribed to the channel."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "update_channel_metadata": {
        "name": "update_channel_metadata",
        "description": "Updates metadata of a YouTube channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The unique identifier of the channel to update."
            },
            "properties": {
              "type": "object",
              "properties": {
                "categoryId": {
                  "type": "string",
                  "description": "Channel category"
                },
                "forUsername": {
                  "type": "string",
                  "description": "Channel username"
                },
                "hl": {
                  "type": "string",
                  "description": "Language setting"
                },
                "managedByMe": {
                  "type": "boolean",
                  "description": "Management status"
                },
                "mine": {
                  "type": "boolean",
                  "description": "Ownership status"
                },
                "mySubscribers": {
                  "type": "boolean",
                  "description": "Subscription status"
                },
                "onBehalfOfContentOwner": {
                  "type": "string",
                  "description": "CMS user information"
                }
              },
              "description": "Key-value pairs of channel properties to update. Valid properties include:",
              "required": [
                "categoryId",
                "forUsername",
                "hl",
                "managedByMe",
                "mine",
                "mySubscribers",
                "onBehalfOfContentOwner"
              ]
            }
          },
          "required": [
            "channel_id"
          ]
        }
      },
      "list_memberships": {
        "name": "list_memberships",
        "description": "Retrieves a list of members that match the request criteria for a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the membership resource properties that the API response will include."
            },
            "has_access_to_level": {
              "type": "string",
              "description": "The hasAccessToLevel parameter specifies the membership level that the member has access to."
            },
            "filter_by_member_channel_id": {
              "type": "string",
              "description": "The filterByMemberChannelId parameter specifies a comma-separated list of YouTube channel IDs. The API will only return memberships from those channels."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set."
            },
            "mode": {
              "type": "string",
              "description": "The mode parameter specifies the membership mode."
            },
            "page_token": {
              "type": "string",
              "description": "The pageToken parameter identifies a specific page in the result set that should be returned. (Currently not used in implementation)"
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "create_membership": {
        "name": "create_membership",
        "description": "Creates a new membership.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the membership resource properties that the API response will include."
            },
            "snippet": {
              "type": "object",
              "properties": {},
              "description": "The snippet object containing membership details."
            }
          },
          "required": [
            "part",
            "snippet"
          ]
        }
      },
      "delete_membership": {
        "name": "delete_membership",
        "description": "Deletes a membership.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the membership to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_membership": {
        "name": "update_membership",
        "description": "Updates an existing membership.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the membership resource properties that the API response will include."
            },
            "id": {
              "type": "string",
              "description": "The ID of the membership to update."
            },
            "snippet": {
              "type": "object",
              "properties": {},
              "description": "The updated snippet object containing membership details."
            }
          },
          "required": [
            "id",
            "part",
            "snippet"
          ]
        }
      },
      "set_comment_moderation_status": {
        "name": "set_comment_moderation_status",
        "description": "Sets the moderation status of a comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "comment_id": {
              "type": "string",
              "description": "The ID of the comment to moderate."
            },
            "moderation_status": {
              "type": "string",
              "description": "The new moderation status. Valid values:\n- \"heldForReview\"\n- \"published\"\n- \"rejected\""
            },
            "ban_author": {
              "type": "boolean",
              "description": "If True, bans the author of the comment when rejecting it. Default to false"
            }
          },
          "required": [
            "comment_id",
            "moderation_status"
          ]
        }
      },
      "delete_comment": {
        "name": "delete_comment",
        "description": "Deletes a comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "comment_id": {
              "type": "string",
              "description": "The ID of the comment to delete."
            }
          },
          "required": [
            "comment_id"
          ]
        }
      },
      "add_comment": {
        "name": "add_comment",
        "description": "Inserts a new comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the comment resource properties that the API response will include."
            },
            "snippet": {
              "type": "object",
              "description": "The snippet object contains details about the comment."
            },
            "moderation_status": {
              "type": "string",
              "description": "The initial moderation status for the comment.\nDefaults to \"published\"."
            },
            "banned_author": {
              "type": "boolean",
              "description": "Whether the author of the comment is banned.\nDefaults to False."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "list_comments": {
        "name": "list_comments",
        "description": "Retrieves a list of comments with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the comment resource properties that the API response will include."
            },
            "comment_id": {
              "type": "string",
              "description": "The id parameter identifies the comment that is being retrieved."
            },
            "parent_id": {
              "type": "string",
              "description": "The parentId parameter identifies the comment for which replies should be retrieved."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set."
            },
            "page_token": {
              "type": "string",
              "description": "The pageToken parameter identifies a specific page in the result set that should be returned. Currently not used !"
            },
            "text_format": {
              "type": "string",
              "description": "The textFormat parameter specifies the format of the text in the comment. Currently not used !"
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "mark_comment_as_spam": {
        "name": "mark_comment_as_spam",
        "description": "Marks a comment as spam.",
        "parameters": {
          "type": "object",
          "properties": {
            "comment_id": {
              "type": "string",
              "description": "The ID of the comment to mark as spam."
            }
          },
          "required": [
            "comment_id"
          ]
        }
      },
      "update_comment": {
        "name": "update_comment",
        "description": "Updates an existing comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "comment_id": {
              "type": "string",
              "description": "The ID of the comment to update."
            },
            "snippet": {
              "type": "object",
              "description": "The snippet object contains details about the comment."
            },
            "moderation_status": {
              "type": "string",
              "description": "The new moderation status for the comment."
            },
            "banned_author": {
              "type": "boolean",
              "description": "Whether the author of the comment is banned."
            }
          },
          "required": [
            "comment_id"
          ]
        }
      },
      "delete_caption": {
        "name": "delete_caption",
        "description": "Deletes a caption.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id parameter identifies the caption track that is being deleted."
            },
            "onBehalfOf": {
              "type": "string",
              "description": "The onBehalfOf parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the onBehalfOfContentOwner parameter. (Currently not used in implementation)"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. (Currently not used in implementation)"
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "download_caption": {
        "name": "download_caption",
        "description": "Downloads a caption track.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the caption to be downloaded."
            },
            "onBehalfOf": {
              "type": "string",
              "description": "CMS user making the request on behalf of the content owner. (Currently not used in implementation)"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "Content owner the user is acting on behalf of. (Currently not used in implementation)"
            },
            "tfmt": {
              "type": "string",
              "description": "Desired format of the caption file ('srt', 'vtt', 'sbv')."
            },
            "tlang": {
              "type": "string",
              "description": "Target language for translation (simulated)."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "insert_caption": {
        "name": "insert_caption",
        "description": "Inserts a new caption.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the caption resource properties that the API response will include."
            },
            "snippet": {
              "type": "object",
              "properties": {},
              "description": "The snippet object contains details about the caption track."
            },
            "onBehalfOf": {
              "type": "string",
              "description": "The onBehalfOf parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the onBehalfOfContentOwner parameter. (Currently not used in implementation)"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. (Currently not used in implementation)"
            },
            "sync": {
              "type": "boolean",
              "description": "The sync parameter indicates whether the caption track should be synchronized with the video. (Currently not used in implementation)"
            }
          },
          "required": [
            "part",
            "snippet"
          ]
        }
      },
      "list_captions": {
        "name": "list_captions",
        "description": "Retrieves a list of captions.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "Must be 'id' or 'snippet'."
            },
            "videoId": {
              "type": "string",
              "description": "ID of the video to retrieve captions for."
            },
            "id": {
              "type": "string",
              "description": "Specific caption ID to filter results."
            },
            "onBehalfOf": {
              "type": "string",
              "description": "CMS user making the request on behalf of the content owner. (Currently not used in implementation)"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "Content owner the user is acting on behalf of. (Currently not used in implementation)"
            }
          },
          "required": [
            "part",
            "videoId"
          ]
        }
      },
      "update_caption": {
        "name": "update_caption",
        "description": "Updates a caption resource.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the caption resource properties that the API response will include."
            },
            "id": {
              "type": "string",
              "description": "The id parameter identifies the caption track that is being updated."
            },
            "snippet": {
              "type": "object",
              "properties": {},
              "description": "The snippet object contains details about the caption track."
            },
            "onBehalfOf": {
              "type": "string",
              "description": "The onBehalfOf parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the onBehalfOfContentOwner parameter. (Currently not used in implementation)"
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. (Currently not used in implementation)"
            },
            "sync": {
              "type": "boolean",
              "description": "The sync parameter indicates whether the caption track should be synchronized with the video. (Currently not used in implementation)"
            }
          },
          "required": [
            "id",
            "part"
          ]
        }
      },
      "list_videos": {
        "name": "list_videos",
        "description": "Retrieves a list of videos with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the video resource properties that the API response will include."
            },
            "chart": {
              "type": "string",
              "description": "Set this parameter to retrieve a list of videos that match the criteria specified by the chart parameter value."
            },
            "id": {
              "type": "string",
              "description": "The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved."
            },
            "my_rating": {
              "type": "string",
              "description": "Set this parameter to retrieve a list of videos that match the criteria specified by the myRating parameter value."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set."
            },
            "page_token": {
              "type": "string",
              "description": "The pageToken parameter identifies a specific page in the result set that should be returned."
            },
            "user_id": {
              "type": "string",
              "description": "The user_id parameter is required when using my_rating parameter."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "rate_video": {
        "name": "rate_video",
        "description": "Rates a video by adjusting like/dislike counts directly.",
        "parameters": {
          "type": "object",
          "properties": {
            "video_id": {
              "type": "string",
              "description": "The ID of the video to rate."
            },
            "rating": {
              "type": "string",
              "description": "Must be one of: \"like\", \"dislike\", \"none\"."
            },
            "on_behalf_of": {
              "type": "string",
              "description": "Ignored (no user data is stored)."
            }
          },
          "required": [
            "rating",
            "video_id"
          ]
        }
      },
      "report_video_abuse": {
        "name": "report_video_abuse",
        "description": "Reports a video for abuse.",
        "parameters": {
          "type": "object",
          "properties": {
            "video_id": {
              "type": "string",
              "description": "The ID of the video to report."
            },
            "reason_id": {
              "type": "string",
              "description": "The ID of the reason for reporting the video."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The ID of the content owner on whose behalf the report is being made."
            }
          },
          "required": [
            "reason_id",
            "video_id"
          ]
        }
      },
      "delete_video": {
        "name": "delete_video",
        "description": "Deletes a video.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the video to delete."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The ID of the content owner on whose behalf the deletion is being made."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_video_metadata": {
        "name": "update_video_metadata",
        "description": "Updates a video.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the video resource properties that the API request is setting."
            },
            "body": {
              "type": "object",
              "properties": {},
              "description": "The video resource to update."
            },
            "on_behalf_of": {
              "type": "string",
              "description": "The ID of the user on whose behalf the request is being made."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The ID of the content owner on whose behalf the request is being made."
            }
          },
          "required": [
            "body",
            "part"
          ]
        }
      },
      "manage_channel_comment_count": {
        "name": "manage_channel_comment_count",
        "description": "Retrieves or sets the number of comments for the channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "comment_count": {
              "type": "integer",
              "description": "If provided, sets the comment count to this value.\nIf None, retrieves the current comment count."
            }
          }
        }
      },
      "manage_channel_subscriber_visibility": {
        "name": "manage_channel_subscriber_visibility",
        "description": "Checks whether the subscriber count is hidden.",
        "parameters": {
          "type": "object",
          "properties": {
            "hidden_subscriber_count": {
              "type": "boolean",
              "description": "If provided, sets whether the subscriber count is hidden.\nIf None, retrieves the current setting."
            }
          }
        }
      },
      "manage_channel_subscriber_count": {
        "name": "manage_channel_subscriber_count",
        "description": "Retrieves or sets the number of subscribers of the channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscriber_count": {
              "type": "integer",
              "description": "If provided, sets the subscriber count to this value.\nIf None, retrieves the current subscriber count."
            }
          }
        }
      },
      "manage_channel_video_count": {
        "name": "manage_channel_video_count",
        "description": "Retrieves or sets the number of videos uploaded to the channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "video_count": {
              "type": "integer",
              "description": "If provided, sets the video count to this value.\nIf None, retrieves the current video count."
            }
          }
        }
      },
      "manage_channel_view_count": {
        "name": "manage_channel_view_count",
        "description": "Retrieves or sets the total view count of the channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "view_count": {
              "type": "integer",
              "description": "If provided, sets the view count to this value.\nIf None, retrieves the current view count."
            }
          }
        }
      },
      "insert_channel_banner": {
        "name": "insert_channel_banner",
        "description": "Inserts a new channel banner.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel for which to insert a banner."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
            },
            "on_behalf_of_content_owner_channel": {
              "type": "string",
              "description": "The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which the user is being added."
            }
          }
        }
      },
      "create_subscription": {
        "name": "create_subscription",
        "description": "Inserts a new subscription.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the subscription resource properties that the API response will include."
            },
            "snippet": {
              "type": "object",
              "description": "The snippet object contains details about the subscription."
            }
          },
          "required": [
            "part"
          ]
        }
      },
      "delete_subscription": {
        "name": "delete_subscription",
        "description": "Deletes a subscription.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription_id": {
              "type": "string",
              "description": "The ID of the subscription to delete."
            }
          },
          "required": [
            "subscription_id"
          ]
        }
      },
      "list_subscriptions": {
        "name": "list_subscriptions",
        "description": "Retrieves a list of subscriptions with optional filters.",
        "parameters": {
          "type": "object",
          "properties": {
            "part": {
              "type": "string",
              "description": "The part parameter specifies the subscription resource properties that the API response will include."
            },
            "channel_id": {
              "type": "string",
              "description": "The channelId parameter specifies a YouTube channel ID. The API will only return that channel's subscriptions."
            },
            "subscription_id": {
              "type": "string",
              "description": "The id parameter identifies the subscription that is being retrieved."
            },
            "mine": {
              "type": "boolean",
              "description": "The mine parameter can be used to instruct the API to only return subscriptions owned by the authenticated user."
            },
            "my_recent_subscribers": {
              "type": "boolean",
              "description": "The myRecentSubscribers parameter can be used to instruct the API to only return subscriptions to the authenticated user's channel from the last 30 days."
            },
            "my_subscribers": {
              "type": "boolean",
              "description": "The mySubscribers parameter can be used to instruct the API to only return subscriptions to the authenticated user's channel."
            },
            "for_channel_id": {
              "type": "string",
              "description": "The forChannelId parameter specifies a YouTube channel ID. The API will only return subscriptions to that channel."
            },
            "max_results": {
              "type": "integer",
              "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set."
            },
            "on_behalf_of_content_owner": {
              "type": "string",
              "description": "The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value."
            },
            "on_behalf_of_content_owner_channel": {
              "type": "string",
              "description": "The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which the user is being added."
            },
            "order": {
              "type": "string",
              "description": "The order parameter specifies the order in which the API response should list subscriptions."
            },
            "page_token": {
              "type": "string",
              "description": "The pageToken parameter identifies a specific page in the result set that should be returned."
            }
          },
          "required": [
            "part"
          ]
        }
      }
    },
    "google_slides": {
      "create_presentation": {
        "name": "create_presentation",
        "description": "Create a new Google Slides presentation.\n\nThis function creates a new Google Slides presentation using the provided title.\nAn initial blank slide is typically created with the presentation.",
        "parameters": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The title of the presentation."
            }
          },
          "required": [
            "title"
          ]
        }
      },
      "get_presentation": {
        "name": "get_presentation",
        "description": "Get details about a Google Slides presentation.\n\nThis function retrieves details about a Google Slides presentation. The\n`presentationId` argument specifies which presentation to fetch. An optional\n`fields` argument can be used as a mask to specify which parts of the\npresentation data should be included in the response, allowing for more\ntargeted data retrieval.",
        "parameters": {
          "type": "object",
          "properties": {
            "presentationId": {
              "type": "string",
              "description": "The ID of the presentation to retrieve."
            },
            "fields": {
              "type": "string",
              "description": "Optional. A mask specifying which fields to include\nin the response (e.g., 'slides,pageSize')."
            }
          },
          "required": [
            "presentationId"
          ]
        }
      },
      "batch_update_presentation": {
        "name": "batch_update_presentation",
        "description": "Apply a batch of updates to a Google Slides presentation.\n\nThis function applies a series of specified update operations to a Google Slides\npresentation in a single batch request. It allows for various modifications\nsuch as creating slides, adding shapes, inserting text, deleting objects,\nupdating styles, and managing object groups, as defined by the list of `requests`.",
        "parameters": {
          "type": "object",
          "properties": {
            "presentationId": {
              "type": "string",
              "description": "The ID of the presentation to update."
            },
            "requests": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "createSlide": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "object",
                        "description": "A user-supplied object ID. If specified,\n            must be unique (5-50 chars, pattern [a-zA-Z0-9_][a-zA-Z0-9_-:]*).\n            If empty, a unique ID is generated."
                      },
                      "insertionIndex": {
                        "type": "object",
                        "description": "Optional zero-based index where to\n            insert the slides. If unspecified, created at the end."
                      },
                      "slideLayoutReference": {
                        "type": "object",
                        "description": "Layout reference\n            of the slide. If unspecified, uses a predefined BLANK layout.\n            One of 'predefinedLayout' or 'layoutId' must be provided if\n            'slideLayoutReference' itself is provided.",
                        "properties": {
                          "predefinedLayout": {
                            "type": "object",
                            "description": "A predefined layout type.\n                Enum: [\"BLANK\", \"CAPTION_ONLY\", \"TITLE\", \"TITLE_AND_BODY\",\n                \"TITLE_AND_TWO_COLUMNS\", \"TITLE_ONLY\", \"SECTION_HEADER\",\n                \"SECTION_TITLE_AND_DESCRIPTION\", \"ONE_COLUMN_TEXT\",\n                \"MAIN_POINT\", \"BIG_NUMBER\", \"PREDEFINED_LAYOUT_UNSPECIFIED\"]."
                          },
                          "layoutId": {
                            "type": "object",
                            "description": "Layout ID of one of the layouts in\n                the presentation."
                          }
                        }
                      },
                      "placeholderIdMappings": {
                        "type": "object",
                        "description": "Optional list\n            of object ID mappings from layout placeholders to slide placeholders.\n            Used only when 'slideLayoutReference' is specified. Each item is a\n            dictionary:",
                        "properties": {
                          "objectId": {
                            "type": "object",
                            "description": "User-supplied object ID for the new\n                placeholder on the slide (5-50 chars, pattern\n                [a-zA-Z0-9_][a-zA-Z0-9_-:]*). If empty, a unique ID is generated."
                          },
                          "layoutPlaceholder": {
                            "type": "object",
                            "description": "The placeholder on a\n                layout to be applied to a slide.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "The type of the placeholder. Enum: [\"TITLE\",\n                    \"BODY\", \"CENTERED_TITLE\", \"SUBTITLE\", \"DATE_AND_TIME\",\n                    \"FOOTER\", \"HEADER\", \"OBJECT\", \"CHART\", \"TABLE\", \"CLIP_ART\",\n                    \"PICTURE\", \"SLIDE_IMAGE\", \"SLIDE_NUMBER\"]."
                              },
                              "index": {
                                "type": "integer",
                                "description": "The index of the placeholder. Usually 0."
                              }
                            },
                            "required": [
                              "index",
                              "type"
                            ]
                          },
                          "layoutPlaceholderObjectId": {
                            "type": "object",
                            "description": "The object ID of the\n                placeholder on a layout."
                          }
                        }
                      }
                    },
                    "description": "Creates a new slide."
                  },
                  "createShape": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "object",
                        "description": "Optional user-supplied object ID for the\n            shape (5-50 chars, pattern [a-zA-Z0-9_][a-zA-Z0-9_-:]*).\n            If empty, a unique ID is generated."
                      },
                      "elementProperties": {
                        "type": "object",
                        "description": "Element properties\n            for the shape.",
                        "properties": {
                          "pageObjectId": {
                            "type": "object",
                            "description": "The object ID of the page where\n                the element is located."
                          },
                          "size": {
                            "type": "object",
                            "description": "The size of the page element.",
                            "properties": {
                              "width": {
                                "type": "object",
                                "description": "Width dimension.",
                                "properties": {
                                  "magnitude": {
                                    "type": "object",
                                    "description": "Magnitude of the dimension."
                                  },
                                  "unit": {
                                    "type": "object",
                                    "description": "Unit of the dimension. Enum: [\"EMU\", \"PT\"]."
                                  }
                                }
                              },
                              "height": {
                                "type": "object",
                                "description": "Height dimension.",
                                "properties": {
                                  "magnitude": {
                                    "type": "object",
                                    "description": "Magnitude of the dimension."
                                  },
                                  "unit": {
                                    "type": "object",
                                    "description": "Unit of the dimension. Enum: [\"EMU\", \"PT\"]."
                                  }
                                }
                              }
                            }
                          },
                          "transform": {
                            "type": "object",
                            "description": "The transform of the\n                page element.",
                            "properties": {
                              "scaleX": {
                                "type": "object",
                                "description": "The X scaling factor."
                              },
                              "scaleY": {
                                "type": "object",
                                "description": "The Y scaling factor."
                              },
                              "shearX": {
                                "type": "object",
                                "description": "The X shearing factor."
                              },
                              "shearY": {
                                "type": "object",
                                "description": "The Y shearing factor."
                              },
                              "translateX": {
                                "type": "object",
                                "description": "The X translation."
                              },
                              "translateY": {
                                "type": "object",
                                "description": "The Y translation."
                              },
                              "unit": {
                                "type": "object",
                                "description": "Unit for translate. Enum: [\"EMU\", \"PT\"]."
                              }
                            }
                          }
                        }
                      },
                      "shapeType": {
                        "type": "string",
                        "description": "The type of shape to create. Enum:\n            [\"TYPE_UNSPECIFIED\", \"TEXT_BOX\", \"RECTANGLE\", \"ROUND_RECTANGLE\",\n            \"ELLIPSE\", \"ARC\", \"BENT_CONNECTOR_2\", \"BENT_CONNECTOR_3\",\n            \"BENT_CONNECTOR_4\", \"BENT_CONNECTOR_5\", \"CURVED_CONNECTOR_2\",\n            \"CURVED_CONNECTOR_3\", \"CURVED_CONNECTOR_4\", \"CURVED_CONNECTOR_5\",\n            \"LINE\", \"STRAIGHT_CONNECTOR_1\", \"TRIANGLE\", \"RIGHT_TRIANGLE\",\n            \"PARALLELOGRAM\", \"TRAPEZOID\", \"DIAMOND\", \"PENTAGON\", \"HEXAGON\",\n            \"HEPTAGON\", \"OCTAGON\", \"STAR_5\", \"ARROW_EAST\", \"ARROW_NORTH_EAST\",\n            \"ARROW_NORTH\", \"SPEECH\", \"CLOUD\", \"NOTCHED_RIGHT_ARROW\"]."
                      }
                    },
                    "description": "Creates a new shape.",
                    "required": [
                      "shapeType"
                    ]
                  },
                  "insertText": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "string",
                        "description": "Object ID of the shape or table."
                      },
                      "cellLocation": {
                        "type": "object",
                        "description": "Optional table cell\n            location if inserting into a table.",
                        "properties": {
                          "rowIndex": {
                            "type": "object",
                            "description": "0-based row index."
                          },
                          "columnIndex": {
                            "type": "object",
                            "description": "0-based column index."
                          }
                        }
                      },
                      "text": {
                        "type": "string",
                        "description": "The text to insert."
                      },
                      "insertionIndex": {
                        "type": "object",
                        "description": "Optional 0-based index where text\n            will be inserted in Unicode code units."
                      }
                    },
                    "description": "Inserts text into a shape or table cell.",
                    "required": [
                      "objectId",
                      "text"
                    ]
                  },
                  "replaceAllText": {
                    "type": "object",
                    "properties": {
                      "replaceText": {
                        "type": "string",
                        "description": "The text that will replace matched text."
                      },
                      "containsText": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "The text to search for."
                          },
                          "matchCase": {
                            "type": "object",
                            "description": "Indicates if the search should be\n                case sensitive. Defaults to False."
                          },
                          "searchByRegex": {
                            "type": "object",
                            "description": "Optional. True if the find value\n                should be treated as a regular expression. Defaults to False."
                          }
                        },
                        "description": "Criteria for matching text.",
                        "required": [
                          "text"
                        ]
                      },
                      "pageObjectIds": {
                        "type": "object",
                        "description": "Optional. Limits matches to\n            page elements only on the given page IDs."
                      }
                    },
                    "description": "Replaces all instances of specified text.",
                    "required": [
                      "containsText",
                      "replaceText"
                    ]
                  },
                  "deleteObject": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "string",
                        "description": "Object ID of the page or page element to delete."
                      }
                    },
                    "description": "Deletes a page or page element.",
                    "required": [
                      "objectId"
                    ]
                  },
                  "deleteText": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "string",
                        "description": "Object ID of the shape or table."
                      },
                      "cellLocation": {
                        "type": "object",
                        "description": "Optional table cell location.",
                        "properties": {
                          "rowIndex": {
                            "type": "object",
                            "description": "0-based row index."
                          },
                          "columnIndex": {
                            "type": "object",
                            "description": "0-based column index."
                          }
                        }
                      },
                      "textRange": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of range. Enum: [\"ALL\", \"FIXED_RANGE\",\n                \"FROM_START_INDEX\", \"RANGE_TYPE_UNSPECIFIED\"]."
                          },
                          "startIndex": {
                            "type": "object",
                            "description": "Optional 0-based start index for\n                FIXED_RANGE and FROM_START_INDEX."
                          },
                          "endIndex": {
                            "type": "object",
                            "description": "Optional 0-based end index for\n                FIXED_RANGE."
                          }
                        },
                        "description": "The range of text to delete.",
                        "required": [
                          "type"
                        ]
                      }
                    },
                    "description": "Deletes text from a shape or table cell.",
                    "required": [
                      "objectId",
                      "textRange"
                    ]
                  },
                  "updateTextStyle": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "string",
                        "description": "Object ID of the shape or table with the text to be styled."
                      },
                      "cellLocation": {
                        "type": "object",
                        "description": "Optional table cell location.",
                        "properties": {
                          "rowIndex": {
                            "type": "object",
                            "description": "0-based row index."
                          },
                          "columnIndex": {
                            "type": "object",
                            "description": "0-based column index."
                          }
                        }
                      },
                      "style": {
                        "type": "object",
                        "properties": {
                          "bold": {
                            "type": "object",
                            "description": "Whether the text is bold."
                          },
                          "italic": {
                            "type": "object",
                            "description": "Whether the text is italic."
                          },
                          "underline": {
                            "type": "object",
                            "description": "Whether the text is underlined."
                          },
                          "strikethrough": {
                            "type": "object",
                            "description": "Whether the text is struck through."
                          },
                          "fontFamily": {
                            "type": "object",
                            "description": "The font family."
                          },
                          "fontSize": {
                            "type": "object",
                            "description": "The font size.",
                            "properties": {
                              "magnitude": {
                                "type": "object",
                                "description": "The magnitude of the font size."
                              },
                              "unit": {
                                "type": "object",
                                "description": "The unit of the font size. Enum: [\"PT\"]."
                              }
                            }
                          },
                          "foregroundColor": {
                            "type": "object",
                            "description": "Color of the text.\n                Structure defined by Google Slides API OptionalColor."
                          }
                        },
                        "description": "The TextStyle to apply."
                      },
                      "textRange": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of range. Enum: [\"ALL\", \"FIXED_RANGE\",\n                \"FROM_START_INDEX\", \"RANGE_TYPE_UNSPECIFIED\"]."
                          },
                          "startIndex": {
                            "type": "object",
                            "description": "Optional start index."
                          },
                          "endIndex": {
                            "type": "object",
                            "description": "Optional end index."
                          }
                        },
                        "description": "The range of text to style.",
                        "required": [
                          "type"
                        ]
                      },
                      "fields": {
                        "type": "string",
                        "description": "Field mask (e.g., 'bold,fontSize') specifying which\n            style fields to update. Use '*' for all fields."
                      }
                    },
                    "description": "Updates the styling of text within a\n        Shape or Table.",
                    "required": [
                      "fields",
                      "objectId",
                      "style",
                      "textRange"
                    ]
                  },
                  "groupObjects": {
                    "type": "object",
                    "properties": {
                      "groupObjectId": {
                        "type": "object",
                        "description": "Optional user-supplied ID for the\n            new group (5-50 chars, pattern [a-zA-Z0-9_][a-zA-Z0-9_-:]*)."
                      },
                      "childrenObjectIds": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Object IDs of the page elements to\n            group (at least 2, on the same page, not already in another group)."
                      }
                    },
                    "description": "Groups page elements.",
                    "required": [
                      "childrenObjectIds"
                    ]
                  },
                  "ungroupObjects": {
                    "type": "object",
                    "properties": {
                      "objectIds": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Object IDs of the groups to ungroup (at least 1).\n            Groups must not be inside other groups and all on the same page."
                      }
                    },
                    "description": "Ungroups objects.",
                    "required": [
                      "objectIds"
                    ]
                  },
                  "updatePageElementAltText": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "string",
                        "description": "Object ID of the page element."
                      },
                      "title": {
                        "type": "object",
                        "description": "Optional. The new alt text title. If unset,\n            existing value is maintained."
                      },
                      "description": {
                        "type": "object",
                        "description": "Optional. The new alt text description.\n            If unset, existing value is maintained."
                      }
                    },
                    "description": "Updates alt text of a page element.",
                    "required": [
                      "objectId"
                    ]
                  },
                  "updateSlideProperties": {
                    "type": "object",
                    "properties": {
                      "objectId": {
                        "type": "string",
                        "description": "Object ID of the slide."
                      },
                      "slideProperties": {
                        "type": "object",
                        "properties": {
                          "masterObjectId": {
                            "type": "object",
                            "description": "The object ID of the master slide."
                          },
                          "layoutObjectId": {
                            "type": "object",
                            "description": "The object ID of the layout slide."
                          },
                          "isSkipped": {
                            "type": "object",
                            "description": "Whether the slide is skipped in\n                show mode."
                          },
                          "notesPage": {
                            "type": "object",
                            "description": "Notes page properties.\n                Structure defined by Google Slides API NotesPage."
                          }
                        },
                        "description": "The SlideProperties to update."
                      },
                      "fields": {
                        "type": "string",
                        "description": "Field mask (e.g., 'isSkipped,notesPage.notesPageProperties')\n            specifying which slide properties to update. Use '*' for all."
                      }
                    },
                    "description": "Updates properties of a slide.",
                    "required": [
                      "fields",
                      "objectId",
                      "slideProperties"
                    ]
                  }
                },
                "required": [
                  "createShape",
                  "createSlide",
                  "deleteObject",
                  "deleteText",
                  "groupObjects",
                  "insertText",
                  "replaceAllText",
                  "ungroupObjects",
                  "updatePageElementAltText",
                  "updateSlideProperties",
                  "updateTextStyle"
                ]
              },
              "description": "A list of update requests to apply. Each object\nin the array must be one of the specified request types. Each request\nobject typically has a single key identifying the type of request (e.g.,\n'createSlide'), and its value is a dictionary containing the parameters\nfor that request. The supported request types and their structures are:\n- CreateSlideRequest: Corresponds to a dictionary with a 'createSlide' key."
            },
            "writeControl": {
              "type": "object",
              "properties": {
                "requiredRevisionId": {
                  "type": "object",
                  "description": "The revision ID of the presentation\n    required for this update. If the current revision is different, the\n    request will fail."
                },
                "targetRevisionId": {
                  "type": "object",
                  "description": "Deprecated: Use requiredRevisionId."
                }
              },
              "description": "Optional. Provides control over how\nwrite requests are executed."
            }
          },
          "required": [
            "presentationId",
            "requests"
          ]
        }
      },
      "get_page": {
        "name": "get_page",
        "description": "Get details about a specific page (slide) in a presentation.\n\nThis function gets details about a specific page (slide) in a presentation.",
        "parameters": {
          "type": "object",
          "properties": {
            "presentationId": {
              "type": "string",
              "description": "The ID of the presentation."
            },
            "pageObjectId": {
              "type": "string",
              "description": "The object ID of the page (slide) to retrieve."
            }
          },
          "required": [
            "pageObjectId",
            "presentationId"
          ]
        }
      },
      "summarize_presentation": {
        "name": "summarize_presentation",
        "description": "Extract text content from all slides in a presentation for summarization purposes.\n\nThis function processes a presentation, identified by `presentationId`, to extract\nall text content from its slides. The primary purpose of this extraction is to\ngather text for summarization. If the `include_notes` parameter is set to true,\nspeaker notes associated with the slides are also included in the extracted content.\nThe function returns a dictionary detailing the extracted text, including the\npresentation's ID, a list of text elements per slide (with optional speaker notes),\nand a fully concatenated string of all text suitable for summarization.",
        "parameters": {
          "type": "object",
          "properties": {
            "presentationId": {
              "type": "string",
              "description": "The ID of the presentation to summarize."
            },
            "include_notes": {
              "type": "boolean",
              "description": "Whether to include speaker notes in the summary (default: False)."
            }
          },
          "required": [
            "presentationId"
          ]
        }
      }
    },
    "mongodb": {
      "switch_connection": {
        "name": "switch_connection",
        "description": "Switch to a different MongoDB connection.\n\nSwitches to a different MongoDB connection. If the user has configured a\nconnection string or has previously called the connect tool, a connection\nis already established, and there is no need to call this function unless\nthe user has explicitly requested to switch to a new instance. Options for\nswitching the current MongoDB connection can be provided via the\n`connectionString` parameter. If a `connectionString` argument is not\nsupplied, the function will attempt to use a connection string from the\nexisting configuration.",
        "parameters": {
          "type": "object",
          "properties": {
            "connectionString": {
              "type": "string",
              "description": "MongoDB connection string to switch to\n(in the mongodb:// or mongodb+srv:// format). Defaults to None,\nin which case a default connection string will be used."
            }
          }
        }
      },
      "list_databases": {
        "name": "list_databases",
        "description": "List all databases for a MongoDB connection.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "drop_database": {
        "name": "drop_database",
        "description": "Removes the specified database, deleting the associated data files.\n\nThis function removes the specified database. In doing so, it deletes\nthe associated data files.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            }
          },
          "required": [
            "database"
          ]
        }
      },
      "list_collections": {
        "name": "list_collections",
        "description": "List all collections for a given database.\n\nThis function lists all collections for a given database. Collection names\nare expected to be strings.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            }
          },
          "required": [
            "database"
          ]
        }
      },
      "create_collection": {
        "name": "create_collection",
        "description": "Creates a new collection in a database.\n\nThis function creates a new collection within the specified database.\nIf the database does not already exist, it will be created automatically as part of this operation.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "rename_collection": {
        "name": "rename_collection",
        "description": "Renames a collection in a MongoDB database.\n\nThis function changes the name of an existing collection within a specified database to a new name.\nIf a collection with the `newName` already exists, the behavior is controlled by the `dropTarget`\nparameter: if `dropTarget` is true, the existing target collection is dropped before the rename;\notherwise, if the target collection exists and `dropTarget` is false, an error is raised.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "newName": {
              "type": "string",
              "description": "The new name for the collection."
            },
            "dropTarget": {
              "type": "boolean",
              "description": "If true, drops the target collection if it exists. Defaults to False."
            }
          },
          "required": [
            "collection",
            "database",
            "newName"
          ]
        }
      },
      "drop_collection": {
        "name": "drop_collection",
        "description": "Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.\n\nThis function removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "collection_schema": {
        "name": "collection_schema",
        "description": "Describe the schema for a collection.\n\nThis function describes the schema for a collection. It provides an analysis\nof the collection's schema, which is typically derived by sampling\ndocuments within that collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "collection_storage_size": {
        "name": "collection_storage_size",
        "description": "Gets the size of the collection.\n\nThis function gets the size of the collection. It retrieves detailed storage statistics for a specified collection within a database.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "collection_indexes": {
        "name": "collection_indexes",
        "description": "Describe the indexes for a collection.\n\nThis function describes the indexes for a specified collection. It provides\ndetails for each index associated with the collection, such as its version,\nthe fields it indexes along with their sort order, its unique name, and\nits namespace (typically 'database_name.collection_name').",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "create_index": {
        "name": "create_index",
        "description": "Create an index for a collection.\n\nThis function creates an index for a specified collection within a given database.\nIt uses the provided 'database' and 'collection' names, and an index\ndefinition specified by 'keys'. An optional 'name' can be given to the index.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "keys": {
              "type": "object",
              "properties": {},
              "description": "The index definition."
            },
            "name": {
              "type": "string",
              "description": "The name of the index. Defaults to None."
            }
          },
          "required": [
            "collection",
            "database",
            "keys"
          ]
        }
      },
      "find": {
        "name": "find",
        "description": "Run a find query against a MongoDB collection.\n\nThis function executes a find query against a specified MongoDB database and collection.\nIt allows for filtering documents using a query filter, specifying which fields to\nreturn using a projection, limiting the maximum number of documents returned, and\ndefining a sort order for the results. The filter, projection, and sort criteria\nshould match the syntax used in MongoDB's `db.collection.find()` and `cursor.sort()`\nmethods, respectively.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "filter": {
              "type": "object",
              "properties": {},
              "description": "The query filter, matching the syntax of the\nquery argument of db.collection.find(). Defaults to None."
            },
            "projection": {
              "type": "object",
              "properties": {},
              "description": "The projection, matching the syntax of the\nprojection argument of db.collection.find(). Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of documents to return. Defaults to 10."
            },
            "sort": {
              "type": "object",
              "properties": {},
              "description": "A document, describing the sort order, matching\nthe syntax of the sort argument of cursor.sort(). Defaults to None."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "count": {
        "name": "count",
        "description": "Gets the number of documents in a MongoDB collection.\n\nThis function counts documents in a specified collection of a\nMongoDB database. An optional query can be provided to filter\nthe documents before counting.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "query": {
              "type": "object",
              "properties": {},
              "description": "A filter/query parameter. Allows\nusers to filter the documents to count. Matches the syntax of\nthe filter argument of db.collection.count(). If None or\nomitted, all documents in the collection are counted."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      },
      "aggregate": {
        "name": "aggregate",
        "description": "Run an aggregation against a MongoDB collection.\n\nThis function runs an aggregation against a specified MongoDB collection within a given database.\nIt executes an array of aggregation pipeline stages provided as input and returns the\nresults of this aggregation.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "pipeline": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "An array of aggregation stages to execute."
            }
          },
          "required": [
            "collection",
            "database",
            "pipeline"
          ]
        }
      },
      "insert_many": {
        "name": "insert_many",
        "description": "Insert an array of documents into a MongoDB collection.\n\nMongoDB typically creates collections automatically during the first insert\noperation if they do not already exist, provided the collection name is valid\nand permissions allow.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "documents": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "The array of documents to insert.\nEach item in the list should be a dictionary representing a\nMongoDB document. The list must not be empty as per model validation."
            }
          },
          "required": [
            "collection",
            "database",
            "documents"
          ]
        }
      },
      "update_many": {
        "name": "update_many",
        "description": "Updates all documents that match the specified filter for a collection.\n\nModifies existing documents in a collection that match the filter\ncriteria. Optionally, if 'upsert' is true, a new document will be\ninserted if no documents match the filter.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "update": {
              "type": "object",
              "properties": {},
              "description": "An update document describing the\nmodifications to apply using update operator expressions (e.g.,\n'$set', '$inc')."
            },
            "filter": {
              "type": "object",
              "properties": {},
              "description": "The selection criteria for the\nupdate. If None or an empty dictionary, all documents in the\ncollection are candidates for update. Defaults to None (empty filter)."
            },
            "upsert": {
              "type": "boolean",
              "description": "Controls whether to insert a new document\nif no documents match the filter. Defaults to False."
            }
          },
          "required": [
            "collection",
            "database",
            "update"
          ]
        }
      },
      "delete_many": {
        "name": "delete_many",
        "description": "Removes all documents that match the filter from a MongoDB collection.\n\nThis function removes all documents that match the specified filter from a MongoDB collection.\nIt operates on a given database and collection, using a filter query to identify the documents for deletion.",
        "parameters": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string",
              "description": "Database name."
            },
            "collection": {
              "type": "string",
              "description": "Collection name."
            },
            "filter": {
              "type": "object",
              "properties": {},
              "description": "The query filter, specifying the deletion criteria.\nMatches the syntax of the filter argument of db.collection.deleteMany(). Defaults to None,\nwhich typically means no filter is applied (behavior might depend on MongoDB driver if filter is truly omitted or passed as empty)."
            }
          },
          "required": [
            "collection",
            "database"
          ]
        }
      }
    },
    "sapconcur": {
      "cancel_booking": {
        "name": "cancel_booking",
        "description": "Cancels an existing booking.\n\nThis function cancels an existing booking. By default, the OAuth consumer must be the booking owner.\nTravel Management Companies (TMCs) can cancel on behalf of users when registered with SAP Concur\nand possessing appropriate admin roles (Web Services Administrator or Can Administer).\nBooking records can only be updated by their original source.",
        "parameters": {
          "type": "object",
          "properties": {
            "bookingSource": {
              "type": "string",
              "description": "Unique supplier identifier configured during SAP Concur application review. Must match the booking's Supplier Name exactly."
            },
            "confirmationNumber": {
              "type": "string",
              "description": "Confirmation number of the booking to be canceled."
            },
            "userid_value": {
              "type": "string",
              "description": "SAP Concur login ID of the booking owner (required only when canceling on behalf of another user). Defaults to None."
            }
          },
          "required": [
            "bookingSource",
            "confirmationNumber"
          ]
        }
      },
      "get_location_by_id": {
        "name": "get_location_by_id",
        "description": "Retrieves details of a specific location by its ID or UUID.\n\nThis function retrieves details of a specific location by its ID or UUID.\nIt is used when the exact identifier of a Concur location is known.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Required ID or UUID of the location."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_trips_summary": {
        "name": "get_trips_summary",
        "description": "Retrieves trip summaries for a user or company.\n\nThis function retrieves trip summaries based on specified filter criteria.\nIt requires the ITINER scope for authorization. To access company-wide trip data\n(by setting `userid_value` to 'ALL'), the authenticated user must possess either\n'Web Services Administrator' or 'Can Administer' roles. All parameters for filtering\nare optional. It is important to note that this function is not recommended for\nextracting large volumes of historical data. For comprehensive company-wide data needs,\nusing Itinerary v4 is advised.",
        "parameters": {
          "type": "object",
          "properties": {
            "start_date": {
              "type": "string",
              "description": "UTC start date for trips (YYYY-MM-DD). Default: today - 30 days. Defaults to None."
            },
            "end_date": {
              "type": "string",
              "description": "UTC end date for trips (YYYY-MM-DD). Default: today + 12 months. Defaults to None."
            },
            "created_after_date": {
              "type": "string",
              "description": "UTC date for trips created on/after (YYYY-MM-DD). Defaults to None."
            },
            "created_before_date": {
              "type": "string",
              "description": "UTC date for trips created on/before (YYYY-MM-DD). Defaults to None."
            },
            "last_modified_date": {
              "type": "string",
              "description": "UTC last modified date/time of trips (format: date-time). Defaults to None."
            },
            "booking_type": {
              "type": "string",
              "description": "Filter by booking type. Possible values: 'Air', 'Car', 'Dining', 'Hotel', 'Parking', 'Rail', 'Ride'. Defaults to None."
            },
            "userid_value": {
              "type": "string",
              "description": "User's login ID or 'ALL' for company-wide access. Defaults to None(company-wide access)."
            },
            "include_metadata": {
              "type": "boolean",
              "description": "Include paging metadata in response. Defaults to False."
            },
            "items_per_page": {
              "type": "integer",
              "description": "Number of items per page (default: 200 if page provided). Defaults to None."
            },
            "include_virtual_trip": {
              "type": "integer",
              "description": "1 to include virtual trips. Possible values: 0, 1. Defaults to None (treated as 0)."
            },
            "include_canceled_trips": {
              "type": "boolean",
              "description": "Include trips with Canceled status. Defaults to False."
            },
            "include_guest_bookings": {
              "type": "boolean",
              "description": "Include guest bookings. Defaults to False."
            }
          }
        }
      },
      "create_or_update_booking": {
        "name": "create_or_update_booking",
        "description": "Creates or updates a booking in SAP Concur.\n\nThis function creates a new booking or updates an existing one. It requires\nBookingSource and RecordLocator to be provided within the 'booking' dictionary.\nIf an update operation results in a new confirmation number, any pre-existing\nbooking associated with the old confirmation number must be explicitly cancelled\nby the caller.",
        "parameters": {
          "type": "object",
          "properties": {
            "booking": {
              "type": "object",
              "properties": {
                "BookingSource": {
                  "type": "string",
                  "description": "The supplier's name. (Required)"
                },
                "RecordLocator": {
                  "type": "string",
                  "description": "Record locator for this booking (6+ alphanumeric characters). (Required)"
                },
                "Passengers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "NameFirst": {
                        "type": "string",
                        "description": "First name of passenger. (Required)"
                      },
                      "NameLast": {
                        "type": "string",
                        "description": "Last name of passenger. (Required)"
                      },
                      "NameMiddle": {
                        "type": "object",
                        "description": "Middle name of passenger."
                      },
                      "NamePrefix": {
                        "type": "object",
                        "description": "Name prefix (e.g., Mr., Ms.)."
                      },
                      "NameRemark": {
                        "type": "object",
                        "description": "Additional name details."
                      },
                      "NameSuffix": {
                        "type": "object",
                        "description": "Name suffix (e.g., Jr., Sr.)."
                      },
                      "NameTitle": {
                        "type": "object",
                        "description": "Professional title."
                      },
                      "TextName": {
                        "type": "object",
                        "description": "Full name as entered in booking tool."
                      }
                    },
                    "required": [
                      "NameFirst",
                      "NameLast"
                    ]
                  },
                  "description": "A list of passenger objects. (Required)"
                },
                "DateBookedLocal": {
                  "type": "object",
                  "description": "Booking creation date in local time (YYYY-MM-DDThh:mm:ss)."
                },
                "FormOfPaymentName": {
                  "type": "object",
                  "description": "Name of the form of payment."
                },
                "FormOfPaymentType": {
                  "type": "object",
                  "description": "Type of the form of payment."
                },
                "TicketMailingAddress": {
                  "type": "object",
                  "description": "Mailing address for tickets."
                },
                "TicketPickupLocation": {
                  "type": "object",
                  "description": "Pickup location for tickets."
                },
                "TicketPickupNumber": {
                  "type": "object",
                  "description": "Confirmation number for ticket pickup."
                },
                "Segments": {
                  "type": "object",
                  "description": "Contains travel segments. Keys are segment types ('Car', 'Air', 'Hotel').",
                  "properties": {
                    "Car": {
                      "type": "object",
                      "description": "List of car rental segments.",
                      "properties": {
                        "Vendor": {
                          "type": "string",
                          "description": "Vendor code for the car rental company."
                        },
                        "VendorName": {
                          "type": "object",
                          "description": "Full name of the car rental company."
                        },
                        "Status": {
                          "type": "object",
                          "description": "Booking status of the segment."
                        },
                        "StartDateLocal": {
                          "type": "string",
                          "description": "Start date of the car rental."
                        },
                        "EndDateLocal": {
                          "type": "string",
                          "description": "End date of the car rental."
                        },
                        "ConfirmationNumber": {
                          "type": "object",
                          "description": "Confirmation number for the car rental."
                        },
                        "StartLocation": {
                          "type": "string",
                          "description": "Pickup location for the car."
                        },
                        "EndLocation": {
                          "type": "string",
                          "description": "Drop-off location for the car."
                        },
                        "TotalRate": {
                          "type": "number",
                          "description": "Total cost of the rental."
                        },
                        "Currency": {
                          "type": "string",
                          "description": "Currency code for the rate."
                        },
                        "CarType": {
                          "type": "object",
                          "description": "Type of car rented."
                        },
                        "Baggage": {
                          "type": "object",
                          "description": "Baggage allowance for the car rental.",
                          "properties": {
                            "count": {
                              "type": "integer",
                              "description": "Number of bags, defaults to 0."
                            },
                            "weight_kg": {
                              "type": "integer",
                              "description": "Weight of the bags in kilograms, defaults to 0."
                            },
                            "nonfree_count": {
                              "type": "integer",
                              "description": "Number of non-free bags, defaults to 0."
                            }
                          },
                          "required": [
                            "count",
                            "nonfree_count",
                            "weight_kg"
                          ]
                        }
                      },
                      "required": [
                        "Currency",
                        "EndDateLocal",
                        "EndLocation",
                        "StartDateLocal",
                        "StartLocation",
                        "TotalRate",
                        "Vendor"
                      ]
                    },
                    "Air": {
                      "type": "object",
                      "description": "List of air travel segments.",
                      "properties": {
                        "Vendor": {
                          "type": "string",
                          "description": "Airline vendor code."
                        },
                        "VendorName": {
                          "type": "object",
                          "description": "Full name of the airline."
                        },
                        "Status": {
                          "type": "object",
                          "description": "Booking status of the segment."
                        },
                        "DepartureDateTimeLocal": {
                          "type": "string",
                          "description": "Local departure date and time."
                        },
                        "ArrivalDateTimeLocal": {
                          "type": "string",
                          "description": "Local arrival date and time."
                        },
                        "ConfirmationNumber": {
                          "type": "object",
                          "description": "Confirmation number for the flight."
                        },
                        "DepartureAirport": {
                          "type": "string",
                          "description": "Departure airport code."
                        },
                        "ArrivalAirport": {
                          "type": "string",
                          "description": "Arrival airport code."
                        },
                        "FlightNumber": {
                          "type": "string",
                          "description": "Flight number."
                        },
                        "AircraftType": {
                          "type": "object",
                          "description": "Type of aircraft."
                        },
                        "FareClass": {
                          "type": "object",
                          "description": "Fare class for the ticket(e.g., \"economy\", \"business\", \"first\", \"premium_economy\")."
                        },
                        "TotalRate": {
                          "type": "number",
                          "description": "Total cost of the flight."
                        },
                        "Currency": {
                          "type": "string",
                          "description": "Currency code for the rate."
                        },
                        "IsDirect": {
                          "type": "object",
                          "description": "Whether the flight is direct."
                        }
                      },
                      "required": [
                        "ArrivalAirport",
                        "ArrivalDateTimeLocal",
                        "Currency",
                        "DepartureAirport",
                        "DepartureDateTimeLocal",
                        "FlightNumber",
                        "TotalRate",
                        "Vendor"
                      ]
                    },
                    "Hotel": {
                      "type": "object",
                      "description": "List of hotel stay segments.",
                      "properties": {
                        "Vendor": {
                          "type": "string",
                          "description": "Hotel vendor code."
                        },
                        "VendorName": {
                          "type": "object",
                          "description": "Full name of the hotel."
                        },
                        "Status": {
                          "type": "object",
                          "description": "Booking status of the segment."
                        },
                        "CheckInDateLocal": {
                          "type": "string",
                          "description": "Local check-in date."
                        },
                        "CheckOutDateLocal": {
                          "type": "string",
                          "description": "Local check-out date."
                        },
                        "ConfirmationNumber": {
                          "type": "object",
                          "description": "Confirmation number for the hotel stay."
                        },
                        "HotelName": {
                          "type": "object",
                          "description": "Name of the hotel."
                        },
                        "Location": {
                          "type": "string",
                          "description": "Location of the hotel."
                        },
                        "RoomType": {
                          "type": "object",
                          "description": "Type of room booked."
                        },
                        "MealPlan": {
                          "type": "object",
                          "description": "Meal plan included."
                        },
                        "TotalRate": {
                          "type": "number",
                          "description": "Total cost of the stay."
                        },
                        "Currency": {
                          "type": "string",
                          "description": "Currency code for the rate."
                        }
                      },
                      "required": [
                        "CheckInDateLocal",
                        "CheckOutDateLocal",
                        "Currency",
                        "Location",
                        "TotalRate",
                        "Vendor"
                      ]
                    }
                  }
                },
                "Delivery": {
                  "type": "object",
                  "description": "Booking delivery method."
                },
                "Warnings": {
                  "type": "object",
                  "description": "Warnings associated with the booking."
                }
              },
              "description": "A dictionary containing the booking details.",
              "required": [
                "BookingSource",
                "Passengers",
                "RecordLocator"
              ]
            },
            "trip_id": {
              "type": "string",
              "description": "Trip identifier from query parameter."
            }
          },
          "required": [
            "booking",
            "trip_id"
          ]
        }
      },
      "list_locations": {
        "name": "list_locations",
        "description": "Retrieves details of locations valid at the user's company with optional filtering parameters.\n\nThis function retrieves details of locations valid at the user's company.\nIt allows for finding Concur locations by various optional filter\nparameters such as name, city, country, country subdivision, or\nadministrative region.",
        "parameters": {
          "type": "object",
          "properties": {
            "offset": {
              "type": "string",
              "description": "The starting point of the next set of results after the specified limit. Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "Number of records to return (default: 25). Defaults to None."
            },
            "name": {
              "type": "string",
              "description": "Common name associated with location (e.g., neighborhood, landmark, city). Defaults to None."
            },
            "city": {
              "type": "string",
              "description": "City name of the location. Defaults to None."
            },
            "countrySubdivision": {
              "type": "string",
              "description": "ISO 3166-2 country subdivision code (e.g., US-WA). Defaults to None."
            },
            "country": {
              "type": "string",
              "description": "2-letter ISO 3166-1 country code (e.g., US). Defaults to None."
            },
            "administrativeRegion": {
              "type": "string",
              "description": "Administrative region (e.g., county). Defaults to None."
            }
          }
        }
      },
      "update_reservation_baggages": {
        "name": "update_reservation_baggages",
        "description": "Updates baggage allowance for a booking with payment processing for additional bags.",
        "parameters": {
          "type": "object",
          "properties": {
            "booking_source": {
              "type": "string",
              "description": "The supplier's name that must match the booking."
            },
            "confirmation_number": {
              "type": "string",
              "description": "Record locator for the booking."
            },
            "total_baggages": {
              "type": "integer",
              "description": "Total number of bags for the booking."
            },
            "nonfree_baggages": {
              "type": "integer",
              "description": "Number of bags that require payment."
            },
            "payment_id": {
              "type": "string",
              "description": "ID of the payment method to use. Required if adding paid bags."
            }
          },
          "required": [
            "booking_source",
            "confirmation_number",
            "nonfree_baggages",
            "total_baggages"
          ]
        }
      },
      "update_reservation_flights": {
        "name": "update_reservation_flights",
        "description": "Updates flight details for a booking, handling multiple flight segments and payment processing.\n\nNote: This function preserves existing baggage information on a segment-by-segment basis.\nFor flights that match existing flight numbers and dates, the original baggage information\nis preserved. For new flights, baggage information from the first original segment is used\nas a fallback. To modify baggage information, use the update_reservation_baggages function.",
        "parameters": {
          "type": "object",
          "properties": {
            "booking_source": {
              "type": "string",
              "description": "The supplier's name that must match the booking."
            },
            "confirmation_number": {
              "type": "string",
              "description": "Record locator for the booking."
            },
            "fare_class": {
              "type": "string",
              "description": "Fare class for all flights (e.g., 'economy', 'business', 'first')."
            },
            "flights": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "flight_number": {
                    "type": "string",
                    "description": "The flight number"
                  },
                  "date": {
                    "type": "string",
                    "description": "The date of the flight in ISO format"
                  }
                },
                "required": [
                  "date",
                  "flight_number"
                ]
              },
              "description": "List of flights to update or add.\nEach flight should contain at least:"
            },
            "payment_id": {
              "type": "string",
              "description": "ID of the payment method to use for any price differences."
            }
          },
          "required": [
            "booking_source",
            "confirmation_number",
            "fare_class",
            "flights",
            "payment_id"
          ]
        }
      },
      "update_reservation_passengers": {
        "name": "update_reservation_passengers",
        "description": "Updates all passenger information in a booking.",
        "parameters": {
          "type": "object",
          "properties": {
            "booking_source": {
              "type": "string",
              "description": "The supplier's name that must match the booking."
            },
            "confirmation_number": {
              "type": "string",
              "description": "Record locator for the booking."
            },
            "passengers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name_first": {
                    "type": "string",
                    "description": "First name"
                  },
                  "name_last": {
                    "type": "string",
                    "description": "Last name"
                  },
                  "name_middle": {
                    "type": "string",
                    "description": "Middle name"
                  },
                  "name_prefix": {
                    "type": "string",
                    "description": "Name prefix (e.g., Mr., Ms.)"
                  },
                  "name_remark": {
                    "type": "string",
                    "description": "Additional name details"
                  },
                  "name_suffix": {
                    "type": "string",
                    "description": "Name suffix (e.g., Jr., Sr.)"
                  },
                  "name_title": {
                    "type": "string",
                    "description": "Professional title"
                  },
                  "text_name": {
                    "type": "string",
                    "description": "Full name as entered"
                  },
                  "pax_type": {
                    "type": "string",
                    "description": "Passenger type (ADT/CHD/INF)"
                  }
                },
                "required": [
                  "name_first",
                  "name_last",
                  "name_middle",
                  "name_prefix",
                  "name_remark",
                  "name_suffix",
                  "name_title",
                  "pax_type",
                  "text_name"
                ]
              },
              "description": "List of passengers to update.\nEach passenger should contain:"
            }
          },
          "required": [
            "booking_source",
            "confirmation_number",
            "passengers"
          ]
        }
      },
      "search_direct_flight": {
        "name": "search_direct_flight",
        "description": "Searches for direct flights between two airports.\n\nThis function searches for direct (non-stop) flights in the SAP Concur system\nbetween the specified departure and arrival airports on a specific date.",
        "parameters": {
          "type": "object",
          "properties": {
            "departure_airport": {
              "type": "string",
              "description": "Three-letter IATA airport code for departure (e.g., \"JFK\", \"LAX\")."
            },
            "arrival_airport": {
              "type": "string",
              "description": "Three-letter IATA airport code for arrival (e.g., \"LAX\", \"ORD\")."
            },
            "departure_date": {
              "type": "string",
              "description": "Departure date filter in ISO format (YYYY-MM-DD).\nOnly flights departing on this date will be returned."
            }
          },
          "required": [
            "arrival_airport",
            "departure_airport",
            "departure_date"
          ]
        }
      },
      "search_onestop_flight": {
        "name": "search_onestop_flight",
        "description": "Searches for one-stop (connecting) flights between two airports.\n\nThis function searches for flights with connections in the SAP Concur system\nbetween the specified departure and arrival airports on a specific date.",
        "parameters": {
          "type": "object",
          "properties": {
            "departure_airport": {
              "type": "string",
              "description": "Three-letter IATA airport code for departure (e.g., \"JFK\", \"LAX\")."
            },
            "arrival_airport": {
              "type": "string",
              "description": "Three-letter IATA airport code for arrival (e.g., \"LAX\", \"ORD\")."
            },
            "departure_date": {
              "type": "string",
              "description": "Departure date filter in ISO format (YYYY-MM-DD).\nOnly flights departing on this date will be returned."
            }
          },
          "required": [
            "arrival_airport",
            "departure_airport",
            "departure_date"
          ]
        }
      },
      "send_certificate": {
        "name": "send_certificate",
        "description": "Sends a certificate to a user using the notification infrastructure.\n\nThis function issues digital certificates to users for various business activities\nsuch as travel completion, expense approval, or training completion. Certificates\nare delivered via the existing notification system and stored as notifications\nwith certificate-specific context data.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier of the user to receive the certificate."
            },
            "certificate_type": {
              "type": "string",
              "description": "Type of certificate to issue. Valid types are:\n- \"travel_completion\": Certificate for completed business travel\n- \"expense_approval\": Certificate for approved expense reports  \n- \"training_completion\": Certificate for completed training\n- \"refund_voucher\": Certificate for refund vouchers issued to users\n- \"goodwill_gesture\": Certificate for goodwill gestures provided to users"
            },
            "amount": {
              "type": "number",
              "description": "Monetary amount associated with the certificate (e.g., trip cost, \napproved expense amount, training cost). Must be non-negative."
            },
            "trip_id": {
              "type": "string",
              "description": "Trip identifier when certificate is related to a specific trip.\nRequired for \"travel_completion\" certificates. Defaults to None."
            },
            "currency": {
              "type": "string",
              "description": "Currency code for the amount (e.g., \"USD\", \"EUR\", \"GBP\"). \nDefaults to \"USD\"."
            }
          },
          "required": [
            "amount",
            "certificate_type",
            "user_id"
          ]
        }
      },
      "get_reservation_details": {
        "name": "get_reservation_details",
        "description": "Retrieves reservation details for a given record locator.\n\nThis function finds a booking by its record locator and \nreturns the booking data if found.",
        "parameters": {
          "type": "object",
          "properties": {
            "record_locator": {
              "type": "string",
              "description": "The record locator of the booking."
            }
          },
          "required": [
            "record_locator"
          ]
        }
      },
      "get_user_details": {
        "name": "get_user_details",
        "description": "Retrieves user details and booking record locators for a given username.\n\nThis function searches for a user by their username and returns the\nuser's data along with their booking record locators, payment methods,\nand gift certificates if a match is found.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_name": {
              "type": "string",
              "description": "The username to search for."
            }
          },
          "required": [
            "user_name"
          ]
        }
      },
      "list_all_airports": {
        "name": "list_all_airports",
        "description": "Retrieves a dictionary of all airports with their city.\n\nThis function iterates through the locations in the database, filters for those\nwith a location_type of 'airport', and returns them in a dictionary format.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "device_actions": {
      "get_installed_apps": {
        "name": "get_installed_apps",
        "description": "Gets the list of installed application on the device.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "open_app": {
        "name": "open_app",
        "description": "Opens the requested application on the device.\n\nAlternative app names:\n - If the user wants to open \"alarms\" or \"timers\" but there is no app with an\n   obviously matching name, open any clock app, if present, as a less-preferred fallback.",
        "parameters": {
          "type": "object",
          "properties": {
            "app_name": {
              "type": "string",
              "description": "The name of the application to open.\nThis name has to exactly match one of the names produced by `get_installed_apps`."
            },
            "app_package_name": {
              "type": "string",
              "description": "The package name of the application to open."
            },
            "extras": {
              "type": "string",
              "description": "The extras in json string format to send to the application being opened.\nNote:\n* This should only be populated when opening \"Pixel Screenshots\".\n* When opening \"Pixel Screenshots\", always extract the information-seeking part of the user prompt and populate it in the extras field.\n* The key of the extras field is \"query\". The value of the extras field is the query extracted from the user prompt.\n* The query should be a full question/sentence, unless the original user prompt is too terse to infer one."
            }
          },
          "required": [
            "app_name"
          ]
        }
      },
      "open_camera": {
        "name": "open_camera",
        "description": "Opens the device's camera.\n\nThis method allows specifying which camera to use (e.g., front or rear)\nand the initial mode it should open in (e.g., photo or video mode).",
        "parameters": {
          "type": "object",
          "properties": {
            "camera_type": {
              "type": "string",
              "description": "The type of camera to open. Can be one of 'FRONT', 'REAR' or 'DEFAULT'."
            },
            "camera_operation": {
              "type": "string",
              "description": "The initial functional mode for the camera upon opening. Can be one of 'PHOTO' or 'VIDEO'."
            },
            "camera_mode": {
              "type": "string",
              "description": "Deprecated. Kept for binary compatibility."
            }
          }
        }
      },
      "open_home_screen": {
        "name": "open_home_screen",
        "description": "Navigates to home screen on the device.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "open_url": {
        "name": "open_url",
        "description": "Opens the requested url in a browser.\n\nDo not use it unless the user prompt contains a url or explicitly asks to open a website.",
        "parameters": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL to open.\nDo not include the protocol (e.g. https://) if the user prompt does not include it."
            },
            "website_name": {
              "type": "string",
              "description": "The name of the website to open. Do not include the top-level domain."
            }
          },
          "required": [
            "url"
          ]
        }
      },
      "open_websearch": {
        "name": "open_websearch",
        "description": "Opens a Google search page with the provided query in the browser (e.g. Chrome).",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query to open."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "power_off_device": {
        "name": "power_off_device",
        "description": "Powers off the device. It can only open the power options menu.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "record_video": {
        "name": "record_video",
        "description": "Records a video using the device camera.\n\nIf the user requests to record a video with a delay, ignore the delay and start recording immediately.",
        "parameters": {
          "type": "object",
          "properties": {
            "camera_type": {
              "type": "string",
              "description": "The type of camera to use. Can be one of 'FRONT', 'REAR' or 'DEFAULT'."
            },
            "self_timer_delay": {
              "type": "string",
              "description": "Deprecated. Kept for binary compatibility."
            },
            "video_duration": {
              "type": "string",
              "description": "Duration of the video recording, for example \"record a 15 second video\"."
            }
          }
        }
      },
      "restart_device": {
        "name": "restart_device",
        "description": "Restarts the device. It can only open the power options menu.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "ring_phone": {
        "name": "ring_phone",
        "description": "Sends an action to the device requesting it to remotely ring the user's paired phone.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "take_photo": {
        "name": "take_photo",
        "description": "Takes a photo using the device camera.",
        "parameters": {
          "type": "object",
          "properties": {
            "camera_type": {
              "type": "string",
              "description": "The type of camera to open. Can be one of 'FRONT', 'REAR' or 'DEFAULT'. When the user asks to take a selfie, use the value FRONT."
            },
            "self_timer_delay": {
              "type": "string",
              "description": "Delay time to start taking a photo. If the user does not specify the delay time, always provide a default value '3 seconds'."
            },
            "camera_mode": {
              "type": "string",
              "description": "The mode the camera should use when taking a picture. Can be one of 'DEFAULT' or 'PORTRAIT'."
            }
          }
        }
      },
      "take_screenshot": {
        "name": "take_screenshot",
        "description": "Takes a screenshot on the device.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "turn_off_flashlight": {
        "name": "turn_off_flashlight",
        "description": "Turns off the flashlight on the device. Nox can be used to turn off the flashlight.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "turn_on_flashlight": {
        "name": "turn_on_flashlight",
        "description": "Turns on the flashlight on the device. Lumos can be used to turn on the flashlight.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "supabase": {
      "list_organizations": {
        "name": "list_organizations",
        "description": "Lists all organizations that the user is a member of.\n\nThis function retrieves a list of all organizations of which the user is a member.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_organization": {
        "name": "get_organization",
        "description": "Gets details for an organization. Includes subscription plan.\n\nGets details for an organization. Includes subscription plan.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The organization ID."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "list_projects": {
        "name": "list_projects",
        "description": "Lists all Supabase projects for the user.\n\nThis function lists all Supabase projects for the user. It helps discover\nthe project ID of the project that the user is working on.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_project": {
        "name": "get_project",
        "description": "Gets details for a Supabase project.\n\nGets details for a Supabase project. This function retrieves information\nfor a project identified by its unique ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The project ID."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "create_project": {
        "name": "create_project",
        "description": "Creates a new Supabase project.\n\nCreates a new Supabase project. Always ask the user which organization to create the project in.\nThe project can take a few minutes to initialize - use `get_project` to check the status.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the project."
            },
            "organization_id": {
              "type": "string",
              "description": "The ID of the organization to create the project in."
            },
            "confirm_cost_id": {
              "type": "string",
              "description": "The cost confirmation ID. Call `confirm_cost` first."
            },
            "region": {
              "type": "string",
              "description": "The region to create the project in. Defaults to the closest region.\nPossible values: \"us-west-1\", \"us-east-1\", \"us-east-2\", \"ca-central-1\",\n\"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"eu-central-1\", \"eu-central-2\",\n\"eu-north-1\", \"ap-south-1\", \"ap-southeast-1\", \"ap-northeast-1\",\n\"ap-northeast-2\", \"ap-southeast-2\", \"sa-east-1\". Defaults to None."
            }
          },
          "required": [
            "confirm_cost_id",
            "name",
            "organization_id"
          ]
        }
      },
      "pause_project": {
        "name": "pause_project",
        "description": "Pauses a Supabase project.\n\nPauses a Supabase project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The ID of the project to pause."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "restore_project": {
        "name": "restore_project",
        "description": "Restores a Supabase project.\n\nThis function restores a Supabase project. It uses the provided project ID\nto identify the project to be restored.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The ID of the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "get_project_url": {
        "name": "get_project_url",
        "description": "Gets the API URL for a project.\n\nThis function gets the API URL for a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The unique identifier of the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "generate_typescript_types": {
        "name": "generate_typescript_types",
        "description": "Generates TypeScript types for a project.\n\nThis function generates TypeScript type definitions for a project, identified\nby its `project_id`. It processes the project information to produce a\nstring containing the TypeScript types.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The ID of the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "get_anon_key": {
        "name": "get_anon_key",
        "description": "Gets the anonymous API key for a project.\n\nThis function gets the anonymous API key for a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The ID of the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "get_cost": {
        "name": "get_cost",
        "description": "Gets the cost of creating a new project or branch.\n\nGets the cost of creating a new project or branch. Never assume organization as costs can be different for each.",
        "parameters": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of item for which the cost is being requested. Must be 'project' or 'branch'."
            },
            "organization_id": {
              "type": "string",
              "description": "The organization ID."
            }
          },
          "required": [
            "organization_id",
            "type"
          ]
        }
      },
      "confirm_cost": {
        "name": "confirm_cost",
        "description": "Ask the user to confirm their understanding of the cost of creating a new project or branch.\n\nThis function asks the user to confirm their understanding of the cost of creating a new project or branch.\nIt requires that `get_cost` be called first. It returns a unique ID for this confirmation,\nwhich should be passed to `create_project` or `create_branch`.",
        "parameters": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of item for which the cost is being confirmed. Must be \"project\" or \"branch\"."
            },
            "recurrence": {
              "type": "string",
              "description": "The recurrence pattern of the cost. Must be \"hourly\" or \"monthly\"."
            },
            "amount": {
              "type": "number",
              "description": "The numerical amount of the cost."
            }
          },
          "required": [
            "amount",
            "recurrence",
            "type"
          ]
        }
      },
      "create_branch": {
        "name": "create_branch",
        "description": "Creates a development branch on a Supabase project.\n\nThis function creates a development branch on a Supabase project. It applies all migrations\nfrom the main project to a fresh branch database. Production data will not carry over.\nThe branch receives its own project_id via the resulting project_ref, which should be\nused to execute queries and migrations on the branch.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The identifier of the project."
            },
            "confirm_cost_id": {
              "type": "string",
              "description": "The cost confirmation ID. Call `confirm_cost` first."
            },
            "name": {
              "type": "string",
              "description": "Name of the branch to create. Defaults to \"develop\"."
            }
          },
          "required": [
            "confirm_cost_id",
            "project_id"
          ]
        }
      },
      "list_branches": {
        "name": "list_branches",
        "description": "Lists all development branches of a Supabase project.\n\nLists all development branches of a Supabase project. This function returns\nbranch details including status which can be used to check when\noperations like merge, rebase, or reset complete.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The unique identifier for the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "delete_branch": {
        "name": "delete_branch",
        "description": "Deletes a development branch.\n\nThis function deletes a specific development branch. The branch to be deleted\nis identified by the provided `branch_id`.",
        "parameters": {
          "type": "object",
          "properties": {
            "branch_id": {
              "type": "string",
              "description": "The ID of the branch to be deleted."
            }
          },
          "required": [
            "branch_id"
          ]
        }
      },
      "merge_branch": {
        "name": "merge_branch",
        "description": "Merges migrations and edge functions from a development branch to production.\n\nThis function processes the branch identified by `branch_id` to merge its\nassociated migrations and edge functions into the production environment.\nIt returns a dictionary detailing the status of this merge operation.",
        "parameters": {
          "type": "object",
          "properties": {
            "branch_id": {
              "type": "string",
              "description": "The ID of the development branch to be merged."
            }
          },
          "required": [
            "branch_id"
          ]
        }
      },
      "reset_branch": {
        "name": "reset_branch",
        "description": "Resets migrations of a development branch.\n\nResets migrations of a development branch. Any untracked data or schema\nchanges will be lost.",
        "parameters": {
          "type": "object",
          "properties": {
            "branch_id": {
              "type": "string",
              "description": "The ID of the development branch to be reset."
            },
            "migration_version": {
              "type": "string",
              "description": "Reset your development branch to a\nspecific migration version."
            }
          },
          "required": [
            "branch_id"
          ]
        }
      },
      "rebase_branch": {
        "name": "rebase_branch",
        "description": "Rebases a development branch on production.\n\nThe function effectively runs any newer migrations from production onto this\nbranch to help handle migration drift.",
        "parameters": {
          "type": "object",
          "properties": {
            "branch_id": {
              "type": "string",
              "description": "The unique identifier of the branch to be rebased."
            }
          },
          "required": [
            "branch_id"
          ]
        }
      },
      "list_tables": {
        "name": "list_tables",
        "description": "Lists all tables in one or more schemas.\n\nThis function lists all tables found within one or more specified schemas for a given project.\nIf the `schemas` parameter is not provided, it defaults to listing tables from all available schemas\nassociated with the `project_id`.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The identifier of the project."
            },
            "schemas": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of schemas to include. Defaults to all schemas if None."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "list_extensions": {
        "name": "list_extensions",
        "description": "Lists all extensions in the database.\n\nThis function lists all extensions in the database associated with the specified project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The identifier of the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "list_migrations": {
        "name": "list_migrations",
        "description": "Lists all migrations in the database.\n\nThis function lists all migrations in the database associated with the provided project_id.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The identifier of the project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "apply_migration": {
        "name": "apply_migration",
        "description": "Applies a migration to the database.\n\nApplies a migration to the database. Use this when executing DDL operations.\nDo not hardcode references to generated IDs in data migrations.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The ID of the project."
            },
            "name": {
              "type": "string",
              "description": "The name of the migration in snake_case."
            },
            "query": {
              "type": "string",
              "description": "The SQL query to apply."
            }
          },
          "required": [
            "name",
            "project_id",
            "query"
          ]
        }
      },
      "execute_sql": {
        "name": "execute_sql",
        "description": "Executes raw SQL in the Postgres database. Use `apply_migration` instead for DDL operations.\n\nThis function simulates PostgreSQL query execution for the Supabase API simulation.\nAll operations are performed in-memory with no persistence between sessions.\n\nSupported SQL Operations:\n- SELECT queries with WHERE, JOIN, GROUP BY, HAVING, ORDER BY, LIMIT\n- INSERT statements (single and multiple rows)\n- UPDATE statements with WHERE conditions\n- DELETE statements with WHERE conditions\n- Basic DDL: CREATE TABLE, ALTER TABLE, DROP TABLE\n- Transaction commands: BEGIN, COMMIT, ROLLBACK\n- Multi-schema support (e.g., public.users, analytics.products)\n\nSupported Data Types:\n- Text types: TEXT, VARCHAR, CHAR\n- Numeric types: INTEGER, BIGINT, SMALLINT, DECIMAL, NUMERIC, REAL, DOUBLE\n- Boolean: BOOLEAN\n- Date/Time: DATE, TIME, TIMESTAMP, TIMESTAMP WITH TIME ZONE\n- UUID (stored as VARCHAR internally)\n- JSON/JSONB (stored as JSON)\n- SERIAL/BIGSERIAL types (converted to INTEGER/BIGINT, auto-increment not supported)\n\nPostgreSQL Compatibility Notes:\n- SERIAL/BIGSERIAL columns are converted to INTEGER/BIGINT (manual ID management required)\n- PostgreSQL functions like now() and uuid_generate_v4() are automatically converted\n- Foreign key constraints across different schemas are not supported\n- Type OIDs in responses are approximated based on common PostgreSQL types\n\nLimitations of this simulation:\n- PostgreSQL-specific functions are limited (e.g., array functions, full-text search)\n- Advanced features like CTEs and window functions have limited support\n- Stored procedures, functions, and triggers are not supported\n- PostgreSQL extensions (postgis, pg_trgm, etc.) are not available\n- Transaction isolation levels are not enforced\n- Constraints are partially supported (PRIMARY KEY works, CHECK constraints work, but foreign keys have limitations)\n- No support for COPY, VACUUM, ANALYZE, or other maintenance commands\n- Limited support for advanced index types (only basic indexes work)\n- Sequences and auto-increment functionality not available\n- User-defined types and domains are not supported",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The project ID."
            },
            "query": {
              "type": "string",
              "description": "The SQL query to execute."
            }
          },
          "required": [
            "project_id",
            "query"
          ]
        }
      },
      "list_edge_functions": {
        "name": "list_edge_functions",
        "description": "Lists all Edge Functions in a Supabase project.\n\nThis function lists all Edge Functions available within a specified Supabase project.\nFor each Edge Function, it provides comprehensive details including its unique\nidentifier, slug, display name, current version, operational status, and\ntimestamps indicating its creation and last update.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The identifier of the Supabase project."
            }
          },
          "required": [
            "project_id"
          ]
        }
      },
      "deploy_edge_function": {
        "name": "deploy_edge_function",
        "description": "Deploys an Edge Function to a Supabase project.\n\nThis function deploys an Edge Function to a specified Supabase project.\nIf the function already exists within the project, this operation will create\na new version of that function.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The identifier of the Supabase project."
            },
            "name": {
              "type": "string",
              "description": "The name of the function."
            },
            "files": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the file (e.g., 'index.ts', 'utils/helper.ts')."
                  },
                  "content": {
                    "type": "string",
                    "description": "The string content of the file."
                  }
                },
                "required": [
                  "content",
                  "name"
                ]
              },
              "description": "The files to upload. This should include the\nentrypoint and any relative dependencies. Each dictionary in the list\nrepresents a file and must contain the following keys:"
            },
            "entrypoint_path": {
              "type": "string",
              "description": "The entrypoint of the function.\nDefaults to \"index.ts\"."
            },
            "import_map_path": {
              "type": "string",
              "description": "The import map for the function.\nDefaults to None."
            }
          },
          "required": [
            "files",
            "name",
            "project_id"
          ]
        }
      },
      "get_logs": {
        "name": "get_logs",
        "description": "Gets logs for a Supabase project by service type.\n\nThis function retrieves logs for a specified Supabase project, filtered by service type,\nto aid in debugging application issues. It only returns logs generated within the\nlast minute. If logs older than one minute are required, the actions or tests\nthat produce these logs should be re-run to capture them.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "The ID of the Supabase project."
            },
            "service": {
              "type": "string",
              "description": "The service to fetch logs for. Must be one of 'api',\n'branch-action', 'postgres', 'edge-function', 'auth', 'storage',\n'realtime'."
            }
          },
          "required": [
            "project_id",
            "service"
          ]
        }
      }
    },
    "hubspot": {
      "get_templates": {
        "name": "get_templates",
        "description": "Get all templates. Supports paging and filtering.",
        "parameters": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "description": "The maximum number of templates to return. Default is 20."
            },
            "offset": {
              "type": "integer",
              "description": "The offset of the first template to return. Default is 0."
            },
            "deleted_at": {
              "type": "string",
              "description": "Filter by deletion timestamp in milliseconds since epoch."
            },
            "id": {
              "type": "string",
              "description": "Filter by template ID."
            },
            "is_available_for_new_content": {
              "type": "string",
              "description": "Filter by availability for new content."
            },
            "label": {
              "type": "string",
              "description": "Filter by template label."
            },
            "path": {
              "type": "string",
              "description": "Filter by template path."
            }
          }
        }
      },
      "create_template": {
        "name": "create_template",
        "description": "Create a new coded template object in Design Manager.",
        "parameters": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string",
              "description": "The source code of the template."
            },
            "created": {
              "type": "string",
              "description": "The creation date in milliseconds since epoch. Defaults to current time."
            },
            "template_type": {
              "type": "integer",
              "description": "The type of template to create. Defaults to 2 (Email template).\nValid values:\n- 2: Email template\n- 4: Page template\n- 11: Error template\n- 12: Subscription preferences template\n- 13: Backup unsubscribe page template\n- 14: Subscriptions update confirmation template\n- 19: Password prompt page template\n- 27: Search results template\n- 29: Membership login template\n- 30: Membership registration template\n- 31: Membership reset password confirmation template\n- 32: Membership reset password request template"
            },
            "category_id": {
              "type": "integer",
              "description": "The category type. Defaults to 2 (Email).\nValid values:\n- 0: Unmapped\n- 1: Landing Pages\n- 2: Email\n- 3: Blog Post\n- 4: Site Page"
            },
            "folder": {
              "type": "string",
              "description": "The folder to save the template. Defaults to '/templates/'."
            },
            "path": {
              "type": "string",
              "description": "The path to save the template. Defaults to '/home/templates/'."
            },
            "is_available_for_new_content": {
              "type": "boolean",
              "description": "Whether the template should be available for new content. Defaults to False."
            }
          },
          "required": [
            "source"
          ]
        }
      },
      "get_template_by_id": {
        "name": "get_template_by_id",
        "description": "Get a specific template by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "template_id": {
              "type": "string",
              "description": "The unique identifier of the template."
            }
          },
          "required": [
            "template_id"
          ]
        }
      },
      "update_template_by_id": {
        "name": "update_template_by_id",
        "description": "Updates a template. If not all the fields are included in the body, we will only update the included fields.",
        "parameters": {
          "type": "object",
          "properties": {
            "template_id": {
              "type": "string",
              "description": "Unique identifier for the template."
            },
            "category_id": {
              "type": "integer",
              "description": "Category type (0: Unmapped, 1: Landing Pages, 2: Email, 3: Blog Post, 4: Site Page)."
            },
            "folder": {
              "type": "string",
              "description": "The folder where the template is saved."
            },
            "template_type": {
              "type": "integer",
              "description": "Type of template (2: Email, 4: Page, 11: Error, etc.)."
            },
            "source": {
              "type": "string",
              "description": "The source code of the template."
            },
            "path": {
              "type": "string",
              "description": "The path where the template is saved."
            },
            "created": {
              "type": "string",
              "description": "Creation timestamp in milliseconds since epoch."
            },
            "deleted_at": {
              "type": "string",
              "description": "Deletion timestamp in milliseconds since epoch."
            },
            "is_available_for_new_content": {
              "type": "boolean",
              "description": "Whether the template is available for new content."
            },
            "archived": {
              "type": "boolean",
              "description": "Whether the template is archived."
            },
            "versions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "The source code of this version."
                  },
                  "version_id": {
                    "type": "string",
                    "description": "The version identifier."
                  }
                },
                "required": [
                  "source",
                  "version_id"
                ]
              },
              "description": "List of template versions.\nEach version should have:"
            }
          },
          "required": [
            "template_id"
          ]
        }
      },
      "delete_template_by_id": {
        "name": "delete_template_by_id",
        "description": "Marks the selected Template as deleted. The Template can be restored later via a POST to the restore-deleted endpoint.",
        "parameters": {
          "type": "object",
          "properties": {
            "template_id": {
              "type": "string",
              "description": "Unique identifier for the template."
            },
            "deleted_at": {
              "type": "string",
              "description": "Timestamp in milliseconds since epoch of when the template was deleted.\nIf not provided, current timestamp will be used."
            }
          },
          "required": [
            "template_id"
          ]
        }
      },
      "restore_deleted_template": {
        "name": "restore_deleted_template",
        "description": "Restores a previously deleted Template.",
        "parameters": {
          "type": "object",
          "properties": {
            "template_id": {
              "type": "string",
              "description": "Unique identifier for the template."
            }
          },
          "required": [
            "template_id"
          ]
        }
      },
      "get_forms": {
        "name": "get_forms",
        "description": "Get all Marketing Forms.",
        "parameters": {
          "type": "object",
          "properties": {
            "after": {
              "type": "string",
              "description": "The id of the form to start after."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of forms to return."
            },
            "created_at": {
              "type": "string",
              "description": "The date the form was created."
            },
            "created_at__gt": {
              "type": "string",
              "description": "The date the form was created after."
            },
            "created_at__gte": {
              "type": "string",
              "description": "The date the form was created after or equal to."
            },
            "created_at__lt": {
              "type": "string",
              "description": "The date the form was created before."
            },
            "created_at__lte": {
              "type": "string",
              "description": "The date the form was created before or equal to."
            },
            "updated_at": {
              "type": "string",
              "description": "The date the form was updated."
            },
            "updated_at__gt": {
              "type": "string",
              "description": "The date the form was updated after."
            },
            "updated_at__gte": {
              "type": "string",
              "description": "The date the form was updated after or equal to."
            },
            "updated_at__lt": {
              "type": "string",
              "description": "The date the form was updated before."
            },
            "updated_at__lte": {
              "type": "string",
              "description": "The date the form was updated before or equal to."
            },
            "name": {
              "type": "string",
              "description": "The name of the form."
            },
            "id": {
              "type": "string",
              "description": "The id of the form."
            }
          }
        }
      },
      "create_form": {
        "name": "create_form",
        "description": "Create a new Marketing Form.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the form."
            },
            "submitText": {
              "type": "string",
              "description": "The submit text of the form."
            },
            "fieldGroups": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "groupType": {
                    "type": "string",
                    "description": "The type of the field group."
                  },
                  "richTextType": {
                    "type": "string",
                    "description": "The type of rich text included. The default value is text."
                  },
                  "richText": {
                    "type": "string",
                    "description": "A block of rich text or an image. Those can be used to add extra information for the customers filling in the form. If the field group includes fields, the rich text will be displayed before the fields."
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fieldType": {
                          "type": "string",
                          "description": "The type of the field. Can be one of: email, phone, mobile_phone, single_line_text, multi_line_text, number, single_checkbox, multiple_checkboxes, dropdown, radio, datepicker, file, payment_link_radio"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the field."
                        },
                        "label": {
                          "type": "string",
                          "description": "The label of the field."
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether the field is required."
                        },
                        "placeholder": {
                          "type": "object",
                          "description": "The placeholder text of the field."
                        },
                        "defaultValue": {
                          "type": "object",
                          "description": "The default value of the field."
                        },
                        "options": {
                          "type": "object",
                          "description": "The options of the field."
                        },
                        "hidden": {
                          "type": "object",
                          "description": "Whether the field is hidden."
                        }
                      },
                      "required": [
                        "fieldType",
                        "label",
                        "name",
                        "required"
                      ]
                    },
                    "description": "The fields of the field group."
                  }
                },
                "required": [
                  "fields",
                  "groupType",
                  "richText",
                  "richTextType"
                ]
              },
              "description": "The field groups of the form."
            },
            "legalConsentOptions": {
              "type": "object",
              "properties": {
                "explicitConsentToProcess": {
                  "type": "object",
                  "description": "Explicit consent options",
                  "properties": {
                    "communicationsCheckboxes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subscriptionTypeId": {
                            "type": "integer",
                            "description": "The subscription type ID"
                          },
                          "label": {
                            "type": "string",
                            "description": "The main label for the form field"
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether this checkbox is required"
                          }
                        },
                        "required": [
                          "label",
                          "required",
                          "subscriptionTypeId"
                        ]
                      },
                      "description": "List of communication checkboxes"
                    },
                    "communicationConsentText": {
                      "type": "string",
                      "description": "Communication consent text"
                    },
                    "consentToProcessCheckboxLabel": {
                      "type": "string",
                      "description": "Label for consent checkbox"
                    },
                    "consentToProcessFooterText": {
                      "type": "string",
                      "description": "Footer text for consent"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of consent"
                    },
                    "privacyText": {
                      "type": "string",
                      "description": "Privacy text"
                    },
                    "consentToProcessText": {
                      "type": "string",
                      "description": "Consent to process text"
                    }
                  },
                  "required": [
                    "communicationConsentText",
                    "communicationsCheckboxes",
                    "consentToProcessCheckboxLabel",
                    "consentToProcessFooterText",
                    "consentToProcessText",
                    "privacyText",
                    "type"
                  ]
                },
                "implicitConsentToProcess": {
                  "type": "object",
                  "description": "Implicit consent options",
                  "properties": {
                    "communicationsCheckboxes": {
                      "type": "object",
                      "description": "List of communication checkboxes",
                      "properties": {
                        "subscriptionTypeId": {
                          "type": "integer",
                          "description": "The subscription type ID"
                        },
                        "label": {
                          "type": "string",
                          "description": "The main label for the form field"
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether this checkbox is required"
                        }
                      },
                      "required": [
                        "label",
                        "required",
                        "subscriptionTypeId"
                      ]
                    },
                    "communicationConsentText": {
                      "type": "string",
                      "description": "Communication consent text"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of consent"
                    },
                    "privacyText": {
                      "type": "string",
                      "description": "Privacy text"
                    },
                    "consentToProcessText": {
                      "type": "string",
                      "description": "Consent to process text"
                    }
                  },
                  "required": [
                    "communicationConsentText",
                    "consentToProcessText",
                    "privacyText",
                    "type"
                  ]
                },
                "legitimateInterest": {
                  "type": "object",
                  "description": "Legitimate interest options",
                  "properties": {
                    "lawfulBasis": {
                      "type": "string",
                      "description": "The lawful basis for the consent"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the legitimate interest"
                    },
                    "privacyText": {
                      "type": "string",
                      "description": "The privacy text of the legitimate interest"
                    }
                  },
                  "required": [
                    "lawfulBasis",
                    "privacyText",
                    "type"
                  ]
                }
              },
              "description": "The legal consent options of the form. Default is None."
            }
          },
          "required": [
            "fieldGroups",
            "name",
            "submitText"
          ]
        }
      },
      "get_form_by_id": {
        "name": "get_form_by_id",
        "description": "Get a Marketing Form by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "formId": {
              "type": "string",
              "description": "The id of the form."
            }
          },
          "required": [
            "formId"
          ]
        }
      },
      "update_form": {
        "name": "update_form",
        "description": "Update a Marketing Form.",
        "parameters": {
          "type": "object",
          "properties": {
            "formId": {
              "type": "string",
              "description": "The id of the form to update."
            },
            "name": {
              "type": "string",
              "description": "The new name of the form."
            },
            "submitText": {
              "type": "string",
              "description": "The new submit text of the form."
            },
            "fieldGroups": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "groupType": {
                    "type": "string",
                    "description": "The type of the field group."
                  },
                  "richTextType": {
                    "type": "string",
                    "description": "The type of rich text included. The default value is text."
                  },
                  "richText": {
                    "type": "string",
                    "description": "A block of rich text or an image. Those can be used to add extra information for the customers filling in the form. If the field group includes fields, the rich text will be displayed before the fields."
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fieldType": {
                          "type": "string",
                          "description": "The type of the field. Can be one of: email, phone, mobile_phone, single_line_text, multi_line_text, number, single_checkbox, multiple_checkboxes, dropdown, radio, datepicker, file, payment_link_radio"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the field."
                        },
                        "label": {
                          "type": "string",
                          "description": "The label of the field."
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether the field is required."
                        },
                        "placeholder": {
                          "type": "object",
                          "description": "The placeholder text of the field."
                        },
                        "defaultValue": {
                          "type": "object",
                          "description": "The default value of the field."
                        },
                        "options": {
                          "type": "object",
                          "description": "The options of the field."
                        },
                        "hidden": {
                          "type": "object",
                          "description": "Whether the field is hidden."
                        }
                      },
                      "required": [
                        "fieldType",
                        "label",
                        "name",
                        "required"
                      ]
                    },
                    "description": "The fields of the field group."
                  }
                },
                "required": [
                  "fields",
                  "groupType",
                  "richText",
                  "richTextType"
                ]
              },
              "description": "The new field groups of the form."
            },
            "legalConsentOptions": {
              "type": "object",
              "properties": {
                "explicitConsentToProcess": {
                  "type": "object",
                  "description": "Explicit consent options",
                  "properties": {
                    "communicationsCheckboxes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subscriptionTypeId": {
                            "type": "integer",
                            "description": "The subscription type ID"
                          },
                          "label": {
                            "type": "string",
                            "description": "The main label for the form field"
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether this checkbox is required"
                          }
                        },
                        "required": [
                          "label",
                          "required",
                          "subscriptionTypeId"
                        ]
                      },
                      "description": "List of communication checkboxes"
                    },
                    "communicationConsentText": {
                      "type": "string",
                      "description": "Communication consent text"
                    },
                    "consentToProcessCheckboxLabel": {
                      "type": "string",
                      "description": "Label for consent checkbox"
                    },
                    "consentToProcessFooterText": {
                      "type": "string",
                      "description": "Footer text for consent"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of consent"
                    },
                    "privacyText": {
                      "type": "string",
                      "description": "Privacy text"
                    },
                    "consentToProcessText": {
                      "type": "string",
                      "description": "Consent to process text"
                    }
                  },
                  "required": [
                    "communicationConsentText",
                    "communicationsCheckboxes",
                    "consentToProcessCheckboxLabel",
                    "consentToProcessFooterText",
                    "consentToProcessText",
                    "privacyText",
                    "type"
                  ]
                },
                "implicitConsentToProcess": {
                  "type": "object",
                  "description": "Implicit consent options",
                  "properties": {
                    "communicationsCheckboxes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subscriptionTypeId": {
                            "type": "integer",
                            "description": "The subscription type ID"
                          },
                          "label": {
                            "type": "string",
                            "description": "The main label for the form field"
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether this checkbox is required"
                          }
                        },
                        "required": [
                          "label",
                          "required",
                          "subscriptionTypeId"
                        ]
                      },
                      "description": "List of communication checkboxes"
                    },
                    "communicationConsentText": {
                      "type": "string",
                      "description": "Communication consent text"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of consent"
                    },
                    "privacyText": {
                      "type": "string",
                      "description": "Privacy text"
                    },
                    "consentToProcessText": {
                      "type": "string",
                      "description": "Consent to process text"
                    }
                  },
                  "required": [
                    "communicationConsentText",
                    "communicationsCheckboxes",
                    "consentToProcessText",
                    "privacyText",
                    "type"
                  ]
                },
                "legitimateInterest": {
                  "type": "object",
                  "description": "Legitimate interest options",
                  "properties": {
                    "lawfulBasis": {
                      "type": "string",
                      "description": "The lawful basis for the consent"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the legitimate interest"
                    },
                    "privacyText": {
                      "type": "string",
                      "description": "The privacy text of the legitimate interest"
                    }
                  },
                  "required": [
                    "lawfulBasis",
                    "privacyText",
                    "type"
                  ]
                }
              },
              "description": "The new legal consent options of the form. Default is None."
            }
          },
          "required": [
            "formId"
          ]
        }
      },
      "delete_form": {
        "name": "delete_form",
        "description": "Archive a form",
        "parameters": {
          "type": "object",
          "properties": {
            "formId": {
              "type": "string",
              "description": "The id of the form to archive."
            }
          },
          "required": [
            "formId"
          ]
        }
      },
      "get_marketing_events": {
        "name": "get_marketing_events",
        "description": "Get all marketing events.",
        "parameters": {
          "type": "object",
          "properties": {
            "occurredAfter": {
              "type": "string",
              "description": "Filter events that occurred after this timestamp."
            },
            "occurredBefore": {
              "type": "string",
              "description": "Filter events that occurred before this timestamp."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of events to return."
            },
            "after": {
              "type": "string",
              "description": "Cursor for pagination."
            }
          }
        }
      },
      "create_marketing_event": {
        "name": "create_marketing_event",
        "description": "Create a marketing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account(external system) where the event was created."
            },
            "event_name": {
              "type": "string",
              "description": "The name of the marketing event."
            },
            "event_type": {
              "type": "string",
              "description": "The type of the marketing event."
            },
            "event_organizer": {
              "type": "string",
              "description": "The organizer of the marketing event."
            },
            "start_date_time": {
              "type": "string",
              "description": "The start date and time of the marketing event."
            },
            "end_date_time": {
              "type": "string",
              "description": "The end date and time of the marketing event."
            },
            "event_description": {
              "type": "string",
              "description": "A description of the marketing event."
            },
            "event_url": {
              "type": "string",
              "description": "A URL for more information about the marketing event."
            },
            "custom_properties": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "sourceId": {
                    "type": "string",
                    "description": "Source identifier."
                  },
                  "selectedByUser": {
                    "type": "boolean",
                    "description": "Whether the property was selected by the user."
                  },
                  "sourceLabel": {
                    "type": "string",
                    "description": "Label of the source."
                  },
                  "source": {
                    "type": "string",
                    "description": "Source of the property."
                  },
                  "updatedByUserId": {
                    "type": "integer",
                    "description": "ID of the user who last updated the property."
                  },
                  "persistenceTimestamp": {
                    "type": "integer",
                    "description": "Timestamp for persistence."
                  },
                  "sourceMetadata": {
                    "type": "string",
                    "description": "Source metadata encoded as a base64 string."
                  },
                  "dataSensitivity": {
                    "type": "string",
                    "description": "Data sensitivity level."
                  },
                  "unit": {
                    "type": "string",
                    "description": "Unit of measurement."
                  },
                  "requestId": {
                    "type": "string",
                    "description": "Request identifier."
                  },
                  "isEncrypted": {
                    "type": "boolean",
                    "description": "Whether the value is encrypted."
                  },
                  "name": {
                    "type": "string",
                    "description": "Property name."
                  },
                  "useTimestampAsPersistenceTimestamp": {
                    "type": "boolean",
                    "description": "Whether to use timestamp as persistence timestamp."
                  },
                  "value": {
                    "type": "string",
                    "description": "Property value."
                  },
                  "selectedByUserTimestamp": {
                    "type": "integer",
                    "description": "Timestamp when selected by user."
                  },
                  "timestamp": {
                    "type": "integer",
                    "description": "Property timestamp."
                  },
                  "isLargeValue": {
                    "type": "boolean",
                    "description": "Whether the value is large."
                  }
                },
                "required": [
                  "dataSensitivity",
                  "isEncrypted",
                  "isLargeValue",
                  "name",
                  "persistenceTimestamp",
                  "requestId",
                  "selectedByUser",
                  "selectedByUserTimestamp",
                  "source",
                  "sourceId",
                  "sourceLabel",
                  "sourceMetadata",
                  "timestamp",
                  "unit",
                  "updatedByUserId",
                  "useTimestampAsPersistenceTimestamp",
                  "value"
                ]
              },
              "description": "Custom properties associated with the marketing event.\nEach property is a dictionary with the following structure:"
            }
          },
          "required": [
            "event_name",
            "event_organizer",
            "event_type",
            "externalAccountId",
            "externalEventId"
          ]
        }
      },
      "get_marketing_event_by_id": {
        "name": "get_marketing_event_by_id",
        "description": "Get a marketing event by its external ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account where the event was created."
            }
          },
          "required": [
            "externalAccountId",
            "externalEventId"
          ]
        }
      },
      "delete_marketing_event": {
        "name": "delete_marketing_event",
        "description": "Delete a marketing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account where the event was created."
            }
          },
          "required": [
            "externalAccountId",
            "externalEventId"
          ]
        }
      },
      "update_marketing_event": {
        "name": "update_marketing_event",
        "description": "Update a marketing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account where the event was created."
            },
            "event_name": {
              "type": "string",
              "description": "The name of the marketing event."
            },
            "event_type": {
              "type": "string",
              "description": "The type of the marketing event."
            },
            "start_date_time": {
              "type": "string",
              "description": "The start date and time of the marketing event."
            },
            "end_date_time": {
              "type": "string",
              "description": "The end date and time of the marketing event."
            },
            "event_organizer": {
              "type": "string",
              "description": "The organizer of the marketing event."
            },
            "event_description": {
              "type": "string",
              "description": "A description of the marketing event."
            },
            "event_url": {
              "type": "string",
              "description": "A URL for more information about the marketing event."
            },
            "custom_properties": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "sourceId": {
                    "type": "string",
                    "description": "Source identifier."
                  },
                  "selectedByUser": {
                    "type": "boolean",
                    "description": "Whether the property was selected by the user."
                  },
                  "sourceLabel": {
                    "type": "string",
                    "description": "Label of the source."
                  },
                  "source": {
                    "type": "string",
                    "description": "Source of the property."
                  },
                  "updatedByUserId": {
                    "type": "integer",
                    "description": "ID of the user who last updated the property."
                  },
                  "persistenceTimestamp": {
                    "type": "integer",
                    "description": "Timestamp for persistence."
                  },
                  "sourceMetadata": {
                    "type": "string",
                    "description": "Source metadata encoded as a base64 string."
                  },
                  "dataSensitivity": {
                    "type": "string",
                    "description": "Data sensitivity level."
                  },
                  "unit": {
                    "type": "string",
                    "description": "Unit of measurement."
                  },
                  "requestId": {
                    "type": "string",
                    "description": "Request identifier."
                  },
                  "isEncrypted": {
                    "type": "boolean",
                    "description": "Whether the value is encrypted."
                  },
                  "name": {
                    "type": "string",
                    "description": "Property name."
                  },
                  "useTimestampAsPersistenceTimestamp": {
                    "type": "boolean",
                    "description": "Whether to use timestamp as persistence timestamp."
                  },
                  "value": {
                    "type": "string",
                    "description": "Property value."
                  },
                  "selectedByUserTimestamp": {
                    "type": "integer",
                    "description": "Timestamp when selected by user."
                  },
                  "timestamp": {
                    "type": "integer",
                    "description": "Property timestamp."
                  },
                  "isLargeValue": {
                    "type": "boolean",
                    "description": "Whether the value is large."
                  }
                },
                "required": [
                  "dataSensitivity",
                  "isEncrypted",
                  "isLargeValue",
                  "name",
                  "persistenceTimestamp",
                  "requestId",
                  "selectedByUser",
                  "selectedByUserTimestamp",
                  "source",
                  "sourceId",
                  "sourceLabel",
                  "sourceMetadata",
                  "timestamp",
                  "unit",
                  "updatedByUserId",
                  "useTimestampAsPersistenceTimestamp",
                  "value"
                ]
              },
              "description": "Custom properties associated with the marketing event.\nEach property is a dictionary with the following structure:"
            }
          },
          "required": [
            "externalAccountId",
            "externalEventId"
          ]
        }
      },
      "cancel_marketing_event": {
        "name": "cancel_marketing_event",
        "description": "Marks an event as cancelled.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account where the event was created."
            }
          },
          "required": [
            "externalAccountId",
            "externalEventId"
          ]
        }
      },
      "create_or_update_marketing_event_attendee": {
        "name": "create_or_update_marketing_event_attendee",
        "description": "Create or update an attendee for a marketing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account where the event was created."
            },
            "email": {
              "type": "string",
              "description": "The email address of the attendee."
            },
            "joinedAt": {
              "type": "string",
              "description": "The date and time when the attendee joined the event."
            },
            "leftAt": {
              "type": "string",
              "description": "The date and time when the attendee left the event."
            }
          },
          "required": [
            "email",
            "externalAccountId",
            "externalEventId",
            "joinedAt",
            "leftAt"
          ]
        }
      },
      "get_marketing_event_attendees": {
        "name": "get_marketing_event_attendees",
        "description": "Get attendees of a marketing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of attendees to return. Default to 10. The Maximum is 100."
            },
            "after": {
              "type": "string",
              "description": "A cursor for pagination."
            }
          },
          "required": [
            "externalEventId"
          ]
        }
      },
      "delete_marketing_event_attendee": {
        "name": "delete_marketing_event_attendee",
        "description": "Remove an attendee from a marketing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "externalEventId": {
              "type": "string",
              "description": "The unique identifier for the marketing event as per the external system where the event was created."
            },
            "attendeeId": {
              "type": "string",
              "description": "The unique identifier for the attendee."
            },
            "externalAccountId": {
              "type": "string",
              "description": "The unique identifier for the account where the event was created."
            }
          },
          "required": [
            "attendeeId",
            "externalAccountId",
            "externalEventId"
          ]
        }
      },
      "send_single_email_with_template": {
        "name": "send_single_email_with_template",
        "description": "Sends a single transactional email based on a pre-existing email template.",
        "parameters": {
          "type": "object",
          "properties": {
            "template_id": {
              "type": "string",
              "description": "The ID of the pre-existing transactional email template to send."
            },
            "message": {
              "type": "object",
              "properties": {
                "to": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "Required. Email address of the recipient."
                      },
                      "name": {
                        "type": "object",
                        "description": "Name of the recipient."
                      }
                    },
                    "required": [
                      "email"
                    ]
                  },
                  "description": "Required. List of recipient objects."
                },
                "cc": {
                  "type": "object",
                  "description": "List of CC recipient objects.",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Required. Email address of the CC recipient."
                    },
                    "name": {
                      "type": "object",
                      "description": "Name of the CC recipient."
                    }
                  },
                  "required": [
                    "email"
                  ]
                },
                "bcc": {
                  "type": "object",
                  "description": "List of BCC recipient objects.",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Required. Email address of the BCC recipient."
                    },
                    "name": {
                      "type": "object",
                      "description": "Name of the BCC recipient."
                    }
                  },
                  "required": [
                    "email"
                  ]
                },
                "from": {
                  "type": "object",
                  "description": "Sender information.",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Required. Email address of the sender."
                    },
                    "name": {
                      "type": "object",
                      "description": "Name of the sender."
                    }
                  },
                  "required": [
                    "email"
                  ]
                },
                "replyTo": {
                  "type": "object",
                  "description": "List of reply-to addresses.",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Required. Reply-to email address."
                    },
                    "name": {
                      "type": "object",
                      "description": "Reply-to name."
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "description": "An object containing email content and recipient info.",
              "required": [
                "to"
              ]
            },
            "customProperties": {
              "type": "object",
              "properties": {
                "customProperty1": {
                  "type": "string",
                  "description": "Value of custom property 1."
                },
                "customProperty2": {
                  "type": "string",
                  "description": "Value of custom property 2."
                }
              },
              "description": "Custom property values for template personalization.",
              "required": [
                "customProperty1",
                "customProperty2"
              ]
            },
            "contactProperties": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "description": "First name of the contact."
                },
                "lastName": {
                  "type": "string",
                  "description": "Last name of the contact."
                }
              },
              "description": "Contact property values.",
              "required": [
                "firstName",
                "lastName"
              ]
            }
          },
          "required": [
            "message",
            "template_id"
          ]
        }
      },
      "send_transactional_email": {
        "name": "send_transactional_email",
        "description": "Sends a single transactional email.",
        "parameters": {
          "type": "object",
          "properties": {
            "message": {
              "type": "object",
              "properties": {
                "to": {
                  "type": "string",
                  "description": "Email address of the recipient."
                },
                "from": {
                  "type": "string",
                  "description": "Email address of the sender."
                },
                "subject": {
                  "type": "string",
                  "description": "Subject line of the email."
                },
                "htmlBody": {
                  "type": "string",
                  "description": "HTML content of the email."
                },
                "cc": {
                  "type": "object",
                  "description": "CC recipient email address(es)."
                },
                "bcc": {
                  "type": "object",
                  "description": "BCC recipient email address(es)."
                },
                "replyTo": {
                  "type": "object",
                  "description": "Reply-to email address."
                }
              },
              "description": "An object containing email content and recipient info.",
              "required": [
                "from",
                "htmlBody",
                "subject",
                "to"
              ]
            },
            "customProperties": {
              "type": "object",
              "properties": {},
              "description": "Custom properties for the email.\nCan include any key-value pairs for email personalization."
            }
          },
          "required": [
            "message"
          ]
        }
      },
      "get_form_global_event_subscription_definitions": {
        "name": "get_form_global_event_subscription_definitions",
        "description": "Get all global form event subscription definitions.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_form_global_event_subscription": {
        "name": "create_form_global_event_subscription",
        "description": "Creates a new webhook subscription for global form events.",
        "parameters": {
          "type": "object",
          "properties": {
            "endpoint": {
              "type": "string",
              "description": "The endpoint of the subscription definition."
            },
            "subscriptionDetails": {
              "type": "object",
              "properties": {
                "contact_id": {
                  "type": "string",
                  "description": "The id of the contact."
                },
                "subscription_id": {
                  "type": "string",
                  "description": "The id of the subscription."
                },
                "subscribed": {
                  "type": "boolean",
                  "description": "Whether the contact is subscribed to the subscription."
                },
                "opt_in_date": {
                  "type": "string",
                  "description": "The date the contact opted in to the subscription."
                }
              },
              "description": "The subscription details of the subscription definition.",
              "required": [
                "contact_id",
                "opt_in_date",
                "subscribed",
                "subscription_id"
              ]
            }
          },
          "required": [
            "endpoint",
            "subscriptionDetails"
          ]
        }
      },
      "get_form_global_event_subscriptions": {
        "name": "get_form_global_event_subscriptions",
        "description": "Gets all webhook subscriptions for global form events.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_form_global_event_subscription": {
        "name": "delete_form_global_event_subscription",
        "description": "Deletes (unsubscribes) a webhook subscription.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscriptionId": {
              "type": "integer",
              "description": "The id of the subscription definition."
            }
          },
          "required": [
            "subscriptionId"
          ]
        }
      },
      "update_form_global_event_subscription": {
        "name": "update_form_global_event_subscription",
        "description": "Updates (specifically, activates or deactivates) a webhook subscription.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscriptionId": {
              "type": "integer",
              "description": "The id of the subscription definition."
            },
            "active": {
              "type": "boolean",
              "description": "Whether the subscription definition is active."
            }
          },
          "required": [
            "active",
            "subscriptionId"
          ]
        }
      },
      "get_campaigns": {
        "name": "get_campaigns",
        "description": "Returns a list of marketing campaigns (Basic implementation).",
        "parameters": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "description": "The maximum number of campaigns to return."
            },
            "offset": {
              "type": "integer",
              "description": "The number of campaigns to skip."
            },
            "created_at": {
              "type": "string",
              "description": "Filter campaigns by creation date."
            },
            "created_at__gt": {
              "type": "string",
              "description": "Filter campaigns by creation date greater than a specific date."
            },
            "created_at__gte": {
              "type": "string",
              "description": "Filter campaigns by creation date greater than or equal to a specific date."
            },
            "created_at__lt": {
              "type": "string",
              "description": "Filter campaigns by creation date less than a specific date."
            },
            "created_at__lte": {
              "type": "string",
              "description": "Filter campaigns by creation date less than or equal to a specific date."
            },
            "updated_at": {
              "type": "string",
              "description": "Filter campaigns by update date."
            },
            "updated_at__gt": {
              "type": "string",
              "description": "Filter campaigns by update date greater than a specific date."
            },
            "updated_at__gte": {
              "type": "string",
              "description": "Filter campaigns by update date greater than or equal to a specific date."
            },
            "updated_at__lt": {
              "type": "string",
              "description": "Filter campaigns by update date less than a specific date."
            },
            "updated_at__lte": {
              "type": "string",
              "description": "Filter campaigns by update date less than or equal to a specific date."
            },
            "name": {
              "type": "string",
              "description": "Filter campaigns by name."
            },
            "name__contains": {
              "type": "string",
              "description": "Filter campaigns by name containing a specific string."
            },
            "name__icontains": {
              "type": "string",
              "description": "Filter campaigns by name containing a specific string (case insensitive)."
            },
            "name__ne": {
              "type": "string",
              "description": "Filter campaigns by name not equal to a specific string."
            },
            "id": {
              "type": "string",
              "description": "Filter campaigns by id."
            },
            "id__ne": {
              "type": "string",
              "description": "Filter campaigns by id not equal to a specific string."
            },
            "type": {
              "type": "string",
              "description": "Filter campaigns by type."
            },
            "type__ne": {
              "type": "string",
              "description": "Filter campaigns by type not equal to a specific string."
            }
          }
        }
      },
      "create_campaign": {
        "name": "create_campaign",
        "description": "Creates a new campaign.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the campaign."
            },
            "slug": {
              "type": "string",
              "description": "The slug of the campaign."
            },
            "description": {
              "type": "string",
              "description": "The description of the campaign."
            },
            "start_year": {
              "type": "integer",
              "description": "The start year of the campaign."
            },
            "start_month": {
              "type": "integer",
              "description": "The start month of the campaign."
            },
            "start_day": {
              "type": "integer",
              "description": "The start day of the campaign."
            },
            "end_year": {
              "type": "integer",
              "description": "The end year of the campaign."
            },
            "end_month": {
              "type": "integer",
              "description": "The end month of the campaign."
            },
            "end_day": {
              "type": "integer",
              "description": "The end day of the campaign."
            },
            "theme": {
              "type": "string",
              "description": "The theme of the campaign."
            },
            "resource": {
              "type": "string",
              "description": "The resource of the campaign."
            },
            "color_label": {
              "type": "string",
              "description": "The color label of the campaign."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_campaign_by_id": {
        "name": "get_campaign_by_id",
        "description": "Gets a single campaign by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "campaign_id": {
              "type": "integer",
              "description": "The id of the campaign."
            }
          },
          "required": [
            "campaign_id"
          ]
        }
      },
      "update_campaign": {
        "name": "update_campaign",
        "description": "Updates a campaign.",
        "parameters": {
          "type": "object",
          "properties": {
            "campaign_id": {
              "type": "integer",
              "description": "The id of the campaign."
            },
            "name": {
              "type": "string",
              "description": "The name of the campaign."
            },
            "slug": {
              "type": "string",
              "description": "The slug of the campaign."
            },
            "description": {
              "type": "string",
              "description": "The description of the campaign."
            },
            "start_year": {
              "type": "integer",
              "description": "The start year of the campaign."
            },
            "start_month": {
              "type": "integer",
              "description": "The start month of the campaign."
            },
            "start_day": {
              "type": "integer",
              "description": "The start day of the campaign."
            },
            "end_year": {
              "type": "integer",
              "description": "The end year of the campaign."
            },
            "end_month": {
              "type": "integer",
              "description": "The end month of the campaign."
            },
            "end_day": {
              "type": "integer",
              "description": "The end day of the campaign."
            },
            "theme": {
              "type": "string",
              "description": "The theme of the campaign."
            },
            "resource": {
              "type": "string",
              "description": "The resource of the campaign."
            },
            "color_label": {
              "type": "string",
              "description": "The color label of the campaign."
            }
          },
          "required": [
            "campaign_id"
          ]
        }
      },
      "archive_campaign": {
        "name": "archive_campaign",
        "description": "Archives a campaign. Archived campaigns aren't included in the results when listing campaigns.",
        "parameters": {
          "type": "object",
          "properties": {
            "campaign_id": {
              "type": "integer",
              "description": "The id of the campaign."
            }
          },
          "required": [
            "campaign_id"
          ]
        }
      },
      "create_marketing_email": {
        "name": "create_marketing_email",
        "description": "Creates a new marketing email.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The internal name of the email (required)."
            },
            "subject": {
              "type": "string",
              "description": "The email subject line. Default is None."
            },
            "htmlBody": {
              "type": "string",
              "description": "The HTML body of the email. Default is None."
            },
            "isTransactional": {
              "type": "boolean",
              "description": "Whether this is a transactional email. Default is False."
            },
            "status": {
              "type": "string",
              "description": "The status of the email (e.g. 'scheduled', 'sent'). Default is None."
            },
            "discount_code": {
              "type": "string",
              "description": "Discount code for promotional emails. Default is None."
            },
            "expiration": {
              "type": "string",
              "description": "Expiration date for time-limited offers. Default is None."
            },
            "launch_date": {
              "type": "string",
              "description": "Launch date for product announcements. Default is None."
            },
            "sale_end_date": {
              "type": "string",
              "description": "End date for sales promotions. Default is None."
            },
            "reward_points": {
              "type": "integer",
              "description": "Number of reward points for loyalty program emails. Default is None."
            },
            "access_code": {
              "type": "string",
              "description": "Access code for VIP or exclusive offers. Default is None."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_marketing_email_by_id": {
        "name": "get_marketing_email_by_id",
        "description": "Retrieves a marketing email by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "email_id": {
              "type": "string",
              "description": "The unique ID of the marketing email (required)."
            }
          },
          "required": [
            "email_id"
          ]
        }
      },
      "update_marketing_email": {
        "name": "update_marketing_email",
        "description": "Updates an existing marketing email.",
        "parameters": {
          "type": "object",
          "properties": {
            "email_id": {
              "type": "string",
              "description": "The unique ID of the marketing email to update (required)."
            },
            "name": {
              "type": "string",
              "description": "The internal name of the email."
            },
            "subject": {
              "type": "string",
              "description": "The email subject line."
            },
            "htmlBody": {
              "type": "string",
              "description": "The HTML body of the email."
            },
            "isTransactional": {
              "type": "boolean",
              "description": "Whether this is a transactional email."
            },
            "status": {
              "type": "string",
              "description": "The status of the email (e.g. 'scheduled', 'sent')."
            },
            "discount_code": {
              "type": "string",
              "description": "Discount code for promotional emails."
            },
            "expiration": {
              "type": "string",
              "description": "Expiration date for time-limited offers."
            },
            "launch_date": {
              "type": "string",
              "description": "Launch date for product announcements."
            },
            "sale_end_date": {
              "type": "string",
              "description": "End date for sales promotions."
            },
            "reward_points": {
              "type": "integer",
              "description": "Number of reward points for loyalty program emails."
            },
            "access_code": {
              "type": "string",
              "description": "Access code for VIP or exclusive offers."
            }
          },
          "required": [
            "email_id"
          ]
        }
      },
      "delete_marketing_email": {
        "name": "delete_marketing_email",
        "description": "Deletes a marketing email.",
        "parameters": {
          "type": "object",
          "properties": {
            "email_id": {
              "type": "string",
              "description": "The unique ID of the marketing email to delete (required)."
            }
          },
          "required": [
            "email_id"
          ]
        }
      },
      "clone_marketing_email": {
        "name": "clone_marketing_email",
        "description": "Clones an existing marketing email.",
        "parameters": {
          "type": "object",
          "properties": {
            "email_id": {
              "type": "string",
              "description": "The ID of the marketing email to clone (required)."
            },
            "name": {
              "type": "string",
              "description": "The name for the new, cloned email (required)."
            }
          },
          "required": [
            "email_id",
            "name"
          ]
        }
      }
    },
    "home_assistant": {
      "get_state": {
        "name": "get_state",
        "description": "Retrieve the current state (on/off) of a specific Home Assistant entity, such as a light or sensor, by providing its entity ID for real-time monitoring and control.",
        "parameters": {
          "type": "object",
          "properties": {
            "device_id": {
              "type": "string",
              "description": "The device ID to get state for (e.g., \"LIGHT_001\")."
            }
          },
          "required": [
            "device_id"
          ]
        }
      },
      "toggle_device": {
        "name": "toggle_device",
        "description": "Controls the state of a Home Assistant device.\n\nIf 'state' is provided, sets the device to the state if it's valid for its type.\nIf 'state' is not provided, cycles to the next allowed state for the device.\nAllowed states are 'On'/'Off' for electronic devices and\n'Open'/'Closed' or 'Locked/Unlocked' for openable items like doors and windows.",
        "parameters": {
          "type": "object",
          "properties": {
            "entity_id": {
              "type": "string",
              "description": "The entity ID to control (e.g., \"LIGHT_001\")."
            },
            "state": {
              "type": "string",
              "description": "The desired state to set.\nIf None, the device will cycle to its next allowed state. Defaults to None."
            }
          },
          "required": [
            "entity_id"
          ]
        }
      },
      "list_devices": {
        "name": "list_devices",
        "description": "Retrieve all entities in Home Assistant, optionally filtered by domain, to monitor and manage devices, automations, and system components effectively.",
        "parameters": {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "description": "Optional domain filter (e.g., light, switch, automation).\nIf not provided, returns all entities."
            }
          }
        }
      },
      "get_id_by_name": {
        "name": "get_id_by_name",
        "description": "Retrieve the device_id based on a device name.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of a device."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_device_info": {
        "name": "get_device_info",
        "description": "Retrieve all informations of a specific Home Assistant entity, such as a light or sensor, by providing its device ID for real-time monitoring and control.",
        "parameters": {
          "type": "object",
          "properties": {
            "device_id": {
              "type": "string",
              "description": "The device ID to get state for (e.g., \"LIGHT_001\")."
            }
          },
          "required": [
            "device_id"
          ]
        }
      },
      "set_device_property": {
        "name": "set_device_property",
        "description": "Update a specific Home Assistant device properties based on a dictionary containing the new attributes values, enabling automated control of connected devices and routines.",
        "parameters": {
          "type": "object",
          "properties": {
            "entity_id": {
              "type": "string",
              "description": "The entity ID to update"
            },
            "new_attributes": {
              "type": "object",
              "description": "A dictionary containing key-value pairs representing the device's properties, which can be updated (e.g., {\"state\": \"On\", \"brightness\": 70})"
            }
          },
          "required": [
            "entity_id",
            "new_attributes"
          ]
        }
      }
    },
    "jira": {
      "get_all_project_categories": {
        "name": "get_all_project_categories",
        "description": "Get all project categories.\n\nThis method returns all project categories in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_project_category_by_id": {
        "name": "get_project_category_by_id",
        "description": "Get a project category by id.\n\nThis method returns a project category by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "cat_id": {
              "type": "string",
              "description": "The id of the project category"
            }
          },
          "required": [
            "cat_id"
          ]
        }
      },
      "create_issue": {
        "name": "create_issue",
        "description": "Create a new issue in Jira.\n\nThis method creates a new issue with the specified fields. The issue will be\nassigned a unique ID and stored in the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "fields": {
              "type": "object",
              "properties": {
                "project": {
                  "type": "string",
                  "description": "The project key the issue belongs to"
                },
                "summary": {
                  "type": "string",
                  "description": "A brief description of the issue"
                },
                "description": {
                  "type": "string",
                  "description": "A detailed description of the issue"
                },
                "issuetype": {
                  "type": "string",
                  "description": "The type of issue"
                },
                "priority": {
                  "type": "string",
                  "description": "The priority of the issue"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)"
                },
                "assignee": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The assignee's username (e.g., 'jdoe')"
                    }
                  },
                  "description": "The user assigned to the issue in dictionary format. Example: {\"name\": \"jdoe\"}",
                  "required": [
                    "name"
                  ]
                }
              },
              "description": "A dictionary containing the issue fields. Required fields include:",
              "required": [
                "assignee",
                "description",
                "issuetype",
                "priority",
                "project",
                "status",
                "summary"
              ]
            }
          },
          "required": [
            "fields"
          ]
        }
      },
      "get_issue_by_id": {
        "name": "get_issue_by_id",
        "description": "Retrieve a specific issue by its ID.\n\nThis method returns detailed information about a specific issue\nidentified by its unique ID, including any attachments associated with the issue.",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_id": {
              "type": "string",
              "description": "The unique identifier of the issue to retrieve."
            }
          },
          "required": [
            "issue_id"
          ]
        }
      },
      "update_issue_by_id": {
        "name": "update_issue_by_id",
        "description": "Update an existing issue.\n\nThis method allows updating the fields of an existing issue.\nOnly the provided fields will be updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_id": {
              "type": "string",
              "description": "The unique identifier of the issue to update."
            },
            "fields": {
              "type": "object",
              "properties": {
                "summary": {
                  "type": "object",
                  "description": "The summary of the issue"
                },
                "description": {
                  "type": "object",
                  "description": "The description of the issue"
                },
                "priority": {
                  "type": "object",
                  "description": "The priority of the issue"
                },
                "status": {
                  "type": "object",
                  "description": "The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)"
                },
                "assignee": {
                  "type": "object",
                  "description": "Assignee information in dictionary format. Example: {\"name\": \"jdoe\"}",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The assignee's username (e.g., 'jdoe')"
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "issuetype": {
                  "type": "object",
                  "description": "The type of issue"
                },
                "project": {
                  "type": "object",
                  "description": "The project key"
                }
              },
              "description": "The fields to update. Can include any valid\nissue field. Expected structure if provided:"
            }
          },
          "required": [
            "issue_id"
          ]
        }
      },
      "delete_issue_by_id": {
        "name": "delete_issue_by_id",
        "description": "Delete an existing issue.\n\nThis method permanently removes an issue from the system.\nOptionally, its subtasks can be deleted as well.",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_id": {
              "type": "string",
              "description": "The unique identifier of the issue to delete."
            },
            "delete_subtasks": {
              "type": "boolean",
              "description": "Whether to delete subtasks. Defaults to False."
            }
          },
          "required": [
            "issue_id"
          ]
        }
      },
      "bulk_delete_issues": {
        "name": "bulk_delete_issues",
        "description": "Delete multiple issues in bulk.\n\nThis method allows deleting multiple issues in a single operation.\nThe operation will continue even if some issues cannot be deleted.",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_ids": {
              "type": "array",
              "description": "A list of issue IDs to delete"
            }
          },
          "required": [
            "issue_ids"
          ]
        }
      },
      "assign_issue_to_user": {
        "name": "assign_issue_to_user",
        "description": "Assign an issue to a user.\n\nThis method assigns an issue to a specific user. The assignee can be\na user or can be set to null to unassign the issue (handled by how 'assignee' dict is populated).",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_id": {
              "type": "string",
              "description": "The unique identifier of the issue to assign."
            },
            "assignee": {
              "type": "object",
              "description": "The assignee information. Must contain:",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The assignee's username (e.g., 'jdoe')."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "assignee",
            "issue_id"
          ]
        }
      },
      "perform_bulk_issue_operations": {
        "name": "perform_bulk_issue_operations",
        "description": "Perform bulk operations on multiple issues.\n\nThis method allows performing operations on multiple issues in a single\nrequest. The operations are processed in the order they are provided.",
        "parameters": {
          "type": "object",
          "properties": {
            "issueUpdates": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "A dictionary containing the bulk operations to perform."
            }
          },
          "required": [
            "issueUpdates"
          ]
        }
      },
      "search_issues_for_picker": {
        "name": "search_issues_for_picker",
        "description": "Search for issues based on a query string and/or JQL.\n\nThis method searches for issues based on a text query string and/or JQL (Jira Query Language).\nThe search is case-insensitive for text queries. JQL filtering is applied first, then text filtering.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The text query string to search for in issue summaries and IDs.\nIf None, no text filtering will be applied.\nAn empty string \"\" will generally match all issues."
            },
            "currentJQL": {
              "type": "string",
              "description": "JQL expression to filter issues before applying text search.\nIf provided, only issues matching the JQL will be considered.\nSupports all standard JQL operators and functions."
            }
          }
        }
      },
      "get_issue_create_metadata": {
        "name": "get_issue_create_metadata",
        "description": "Get the create metadata for projects and issue types.\n\nThis method returns metadata about projects and their available issue types\nthat can be used for creating new issues. The response can be filtered by\nproject keys and issue type names.",
        "parameters": {
          "type": "object",
          "properties": {
            "projectKeys": {
              "type": "string",
              "description": "Project keys to filter the results. \nIf None, all projects are returned. This parameter accepts a \ncomma-separated list of project keys. Specifying a project \nthat does not exist is not an error, but it will not be in the results."
            },
            "issueTypeNames": {
              "type": "string",
              "description": "Issue type names to filter the results.\nIf None, all issue types are returned. This parameter accepts a \ncomma-separated list of issue type names. Specifying an issue type \nthat does not exist is not an error."
            }
          }
        }
      },
      "get_all_permission_schemes": {
        "name": "get_all_permission_schemes",
        "description": "Get all permission schemes.\n\nThis method returns all permission schemes in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_permission_scheme_by_id": {
        "name": "get_permission_scheme_by_id",
        "description": "Get a permission scheme by id.\n\nThis method returns a permission scheme by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "scheme_id": {
              "type": "string",
              "description": "The id of the permission scheme to get"
            }
          },
          "required": [
            "scheme_id"
          ]
        }
      },
      "get_all_statuses": {
        "name": "get_all_statuses",
        "description": "Get all statuses.\n\nThis method returns all statuses in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_status_by_id": {
        "name": "get_status_by_id",
        "description": "Get a status by id.\n\nThis method returns a status by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "status_id": {
              "type": "string",
              "description": "The id of the status"
            }
          },
          "required": [
            "status_id"
          ]
        }
      },
      "get_all_security_levels": {
        "name": "get_all_security_levels",
        "description": "Get all security levels.\n\nThis method returns all security levels in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_security_level_by_id": {
        "name": "get_security_level_by_id",
        "description": "Get a security level by id.\n\nThis method returns a security level by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "sec_id": {
              "type": "string",
              "description": "The id of the security level"
            }
          },
          "required": [
            "sec_id"
          ]
        }
      },
      "search_issues_jql": {
        "name": "search_issues_jql",
        "description": "Search for issues based on JQL query.",
        "parameters": {
          "type": "object",
          "properties": {
            "jql": {
              "type": "string",
              "description": "The JQL query to search for issues.\nStrings with spaces must be enclosed in single (') or double (\") quotes.\nCommonly searchable fields include:\n- `id` / `key` (e.g., `id = \"ISSUE-123\"`)\n- `project` (e.g., `project = \"DEMO\"`)\n- `summary` (e.g., `summary ~ \"critical bug\"` or `summary = \"Exact phrase\"`)\n- `description` (e.g., `description ~ \"detailed steps\"`)\n- `priority` (e.g., `priority = \"High\"`)\n- `assignee`:\n    - The `assignee` field is stored as a dictionary with a `name` field (e.g., `{\"name\": \"jdoe\"}`), but can be queried directly using the username: `assignee = \"jdoe\"`.\n    - The JQL parser automatically extracts the `name` field from the assignee dictionary for comparison.\n    - The `name` field corresponds to the user's `name` field from the users table (not email or display name).\n    - Dot notation queries (e.g., `assignee.name = \"jdoe\"`) are **NOT supported** by the current JQL parser.\n- `created` (e.g., `created >= \"2024-01-01\"`)\n- `issuetype` (e.g., `issuetype = \"Bug\"`)\n- `status` (e.g., `status = \"Open\"`)\n\nSupported operators:\n- `=` (equals), `!=` (not equals)\n- `~` (contains), `!~` (does not contain)\n- `<`, `<=`, `>`, `>=` (comparison operators for dates/numbers)\n- `IN` (e.g., `priority IN (\"High\", \"Critical\")`)\n- `NOT IN` (e.g., `status NOT IN (\"Closed\", \"Done\")`)\n- `IS EMPTY`, `IS NOT EMPTY` (for null/empty checks)\n- `IS NULL`, `IS NOT NULL` (aliases for empty checks)\n- `EMPTY`, `NULL` (legacy empty checks)\n\nCombining conditions:\n- Use `AND` and `OR` for multiple conditions (e.g., `project = \"WebApp\" AND status = \"Open\" OR priority = \"High\"`).\n- `AND` has higher precedence than `OR`.\n- Parentheses `()` for explicit grouping of conditions are supported (e.g., `(project = \"WebApp\" OR project = \"API\") AND status = \"Open\"`).\n\nOrdering results:\n- Use `ORDER BY fieldName [ASC|DESC]` (e.g., `ORDER BY created DESC`).\n\nThe exact fields and operators supported depend on the JQL parsing and evaluation logic implemented in the simulation."
            },
            "start_at": {
              "type": "integer",
              "description": "The index of the first issue to return. Defaults to 0."
            },
            "max_results": {
              "type": "integer",
              "description": "The maximum number of issues to return. Defaults to 50."
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of fields to return. Defaults to None (all fields)."
            },
            "expand": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of fields to expand. Defaults to None."
            },
            "validate_query": {
              "type": "boolean",
              "description": "Whether to validate the JQL query. Defaults to True."
            }
          }
        }
      },
      "create_project_component": {
        "name": "create_project_component",
        "description": "Create a new component in a Jira project.\n\nThis method creates a new component within a specified project. Components\nare used to group issues within a project and can be assigned to specific\nteam members.",
        "parameters": {
          "type": "object",
          "properties": {
            "project": {
              "type": "string",
              "description": "The key of the project where the component will be created.\nMust be a non-empty string."
            },
            "name": {
              "type": "string",
              "description": "The name of the component.\nMust be a non-empty string with a maximum length of 255 characters."
            },
            "description": {
              "type": "string",
              "description": "A description of the component's purpose.\nMaximum length is 1000 characters. None if not provided."
            }
          },
          "required": [
            "name",
            "project"
          ]
        }
      },
      "get_component_by_id": {
        "name": "get_component_by_id",
        "description": "Retrieve a component by its ID.\n\nThis method returns detailed information about a specific component\nidentified by its unique ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "comp_id": {
              "type": "string",
              "description": "The unique identifier of the component to retrieve."
            }
          },
          "required": [
            "comp_id"
          ]
        }
      },
      "update_component_by_id": {
        "name": "update_component_by_id",
        "description": "Update an existing component.\n\nThis method allows updating the name and/or description of an existing\ncomponent. At least one of name or description must be provided.",
        "parameters": {
          "type": "object",
          "properties": {
            "comp_id": {
              "type": "string",
              "description": "The unique identifier of the component to update."
            },
            "name": {
              "type": "string",
              "description": "The new name for the component. Defaults to None and maximum length is 255 characters."
            },
            "description": {
              "type": "string",
              "description": "The new description for the component\nMaximum length is 1000 characters.\nDefaults to None."
            }
          },
          "required": [
            "comp_id"
          ]
        }
      },
      "delete_component_by_id": {
        "name": "delete_component_by_id",
        "description": "Delete a component from a project.\n\nThis method permanently removes a component from a project. Optionally,\nissues assigned to the component can be moved to another component.",
        "parameters": {
          "type": "object",
          "properties": {
            "comp_id": {
              "type": "string",
              "description": "The unique identifier of the component to delete"
            },
            "moveIssuesTo": {
              "type": "string",
              "description": "The ID of the component to move\nexisting issues to. If not provided, issues will remain\nunassigned. Defaults to None."
            }
          },
          "required": [
            "comp_id"
          ]
        }
      },
      "get_user_avatars_by_username": {
        "name": "get_user_avatars_by_username",
        "description": "Get all avatars that are visible to the current user.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username of the user to get avatars for."
            }
          },
          "required": [
            "username"
          ]
        }
      },
      "get_application_properties": {
        "name": "get_application_properties",
        "description": "Retrieve application properties from Jira.\n\nThis method allows fetching either all application properties or a specific property\nby its key. Application properties are system-wide settings that control various\naspects of Jira's behavior.",
        "parameters": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the specific property to retrieve. If not provided,\nall application properties will be returned."
            },
            "permissionLevel": {
              "type": "string",
              "description": "The permission level required to access the property.\nIf not provided, all properties will be returned."
            },
            "keyFilter": {
              "type": "string",
              "description": "A filter to apply to the property keys. If not provided,\nall properties will be returned."
            }
          }
        }
      },
      "update_application_property_by_id": {
        "name": "update_application_property_by_id",
        "description": "Update an application property in Jira.\n\nThis method allows modifying the value of an existing application property\nor creating a new one if it doesn't exist.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the property to update"
            },
            "value": {
              "type": "string",
              "description": "The new value to set for the property"
            }
          },
          "required": [
            "id",
            "value"
          ]
        }
      },
      "get_all_priorities": {
        "name": "get_all_priorities",
        "description": "Get all priorities.\n\nThis method returns all priorities in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_priority_by_id": {
        "name": "get_priority_by_id",
        "description": "Get a priority by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "priority_id": {
              "type": "string",
              "description": "The id of the priority to get. Must be a non-empty string."
            }
          },
          "required": [
            "priority_id"
          ]
        }
      },
      "get_all_status_categories": {
        "name": "get_all_status_categories",
        "description": "Get all status categories.\n\nThis method returns all status categories in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_status_category_by_id": {
        "name": "get_status_category_by_id",
        "description": "Get a status category by id.\n\nThis method returns a status category by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "cat_id": {
              "type": "string",
              "description": "The id of the status category"
            }
          },
          "required": [
            "cat_id"
          ]
        }
      },
      "get_all_issue_types": {
        "name": "get_all_issue_types",
        "description": "Retrieve all issue types from Jira.\n\nThis method returns a list of all issue types defined in the system.\nIssue types are used to categorize and manage issues in Jira.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_issue_type_by_id": {
        "name": "get_issue_type_by_id",
        "description": "Retrieve a specific issue type by its ID.\n\nThis method returns detailed information about a specific issue type\nidentified by its unique ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "type_id": {
              "type": "string",
              "description": "The unique identifier of the issue type to retrieve. Must be a non-empty string."
            }
          },
          "required": [
            "type_id"
          ]
        }
      },
      "create_issue_type": {
        "name": "create_issue_type",
        "description": "Create a new issue type in Jira.\n\nThis method creates a new issue type with the specified name and description.\nThe issue type will be assigned a unique ID and stored in the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the issue type. Cannot be empty."
            },
            "description": {
              "type": "string",
              "description": "The description of the issue type. Cannot be empty."
            },
            "type": {
              "type": "string",
              "description": "The type of issue type to create (default is \"standard\").\nExpected values are \"standard\" or \"subtask\". \nAny other value provided is treated as \"standard\" by the code."
            }
          },
          "required": [
            "description",
            "name"
          ]
        }
      },
      "get_user_by_username_or_account_id": {
        "name": "get_user_by_username_or_account_id",
        "description": "Get a user by username or account_id(key).\n\nThis function retrieves a single user from the database. It prioritizes\nthe `account_id` if both identifiers are provided. If no user is found\nmatching the given criteria, it will raise a `UserNotFoundError`.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username of the user to retrieve. This is deprecated."
            },
            "account_id": {
              "type": "string",
              "description": "The account ID (key) of the user to retrieve."
            }
          }
        }
      },
      "create_user": {
        "name": "create_user",
        "description": "Create a new user with all required fields.\n\nThis function validates the input payload to ensure it contains the necessary\nuser details and that the email is not already in use. On success, it\npopulates a user object with a mix of provided data and sensible defaults.",
        "parameters": {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The username for the new user. (Required)"
                },
                "emailAddress": {
                  "type": "string",
                  "description": "The user's primary email address. (Required)"
                },
                "displayName": {
                  "type": "string",
                  "description": "The name to display in the UI. (Required)"
                },
                "profile": {
                  "type": "object",
                  "description": "A dictionary for profile info.",
                  "properties": {
                    "bio": {
                      "type": "string",
                      "description": "The user's biography."
                    },
                    "joined": {
                      "type": "string",
                      "description": "The date the user joined."
                    }
                  }
                },
                "groups": {
                  "type": "object",
                  "description": "A list of group names."
                },
                "drafts": {
                  "type": "object",
                  "description": "A list of draft objects.\n    - Each object is a dict with the keys:",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the draft."
                    },
                    "subject": {
                      "type": "string",
                      "description": "The subject of the draft."
                    },
                    "body": {
                      "type": "string",
                      "description": "The content of the draft."
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "The creation timestamp of the draft."
                    }
                  },
                  "required": [
                    "body",
                    "id",
                    "subject",
                    "timestamp"
                  ]
                },
                "messages": {
                  "type": "object",
                  "description": "A list of message objects.\n    - Each object is a dict with the keys:",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the message."
                    },
                    "from": {
                      "type": "string",
                      "description": "The sender's email address."
                    },
                    "to": {
                      "type": "string",
                      "description": "The recipient's email address."
                    },
                    "subject": {
                      "type": "string",
                      "description": "The subject of the message."
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "The timestamp of the message."
                    }
                  },
                  "required": [
                    "from",
                    "id",
                    "subject",
                    "timestamp",
                    "to"
                  ]
                },
                "threads": {
                  "type": "object",
                  "description": "A list of thread objects.\n    - Each object is a dict with the keys:",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique ID of the thread."
                    },
                    "messageIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "A list of message IDs in the thread."
                    }
                  },
                  "required": [
                    "id",
                    "messageIds"
                  ]
                },
                "labels": {
                  "type": "object",
                  "description": "A list of label strings."
                },
                "settings": {
                  "type": "object",
                  "description": "A dictionary for user settings.",
                  "properties": {
                    "theme": {
                      "type": "string",
                      "description": "The user's theme preference."
                    },
                    "notifications": {
                      "type": "boolean",
                      "description": "The user's notification preference."
                    }
                  }
                },
                "history": {
                  "type": "object",
                  "description": "A list of history event objects.\n    - Each object is a dict with the keys:",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "The action performed."
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "The timestamp of the action."
                    }
                  },
                  "required": [
                    "action",
                    "timestamp"
                  ]
                },
                "watch": {
                  "type": "object",
                  "description": "A list of watched item IDs."
                },
                "sendAs": {
                  "type": "object",
                  "description": "A list of alias objects.\n    - Each object is a dict with the keys:",
                  "properties": {
                    "alias": {
                      "type": "string",
                      "description": "The email alias."
                    },
                    "default": {
                      "type": "boolean",
                      "description": "Whether this is the default alias."
                    }
                  },
                  "required": [
                    "alias",
                    "default"
                  ]
                }
              },
              "description": "A dictionary containing the user's details.",
              "required": [
                "displayName",
                "emailAddress",
                "name"
              ]
            }
          },
          "required": [
            "payload"
          ]
        }
      },
      "delete_user_by_username_or_key": {
        "name": "delete_user_by_username_or_key",
        "description": "Delete a user by username or key.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username of the user to delete."
            },
            "key": {
              "type": "string",
              "description": "The key of the user to delete."
            }
          }
        }
      },
      "find_users": {
        "name": "find_users",
        "description": "Finds users by a string search against their name, display name, and email.\n\nThis function provides a general-purpose search for users and supports\npagination and filtering by active status. The search is case-insensitive.",
        "parameters": {
          "type": "object",
          "properties": {
            "search_string": {
              "type": "string",
              "description": "The search string to match against user fields name, display name, and email"
            },
            "startAt": {
              "type": "integer",
              "description": "The index of the first user to return. Defaults to 0."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of users to return. Defaults to 50 (maximum allowed value is 1000). \nIf you specify a value that is higher than 1000, your search results will be truncated."
            },
            "includeActive": {
              "type": "boolean",
              "description": "If True, active users are included. Defaults to True."
            },
            "includeInactive": {
              "type": "boolean",
              "description": "If True, inactive users are included. Defaults to False."
            }
          },
          "required": [
            "search_string"
          ]
        }
      },
      "get_group_by_name": {
        "name": "get_group_by_name",
        "description": "Retrieve a specific group by its name.\n\nThis method returns detailed information about a specific group\nidentified by its name. Groups in Jira are used to manage user permissions\nand access control.",
        "parameters": {
          "type": "object",
          "properties": {
            "groupname": {
              "type": "string",
              "description": "The name of the group to retrieve. Cannot be empty or whitespace-only."
            }
          },
          "required": [
            "groupname"
          ]
        }
      },
      "update_group_members_by_name": {
        "name": "update_group_members_by_name",
        "description": "Update the members of an existing group.\n\nThis method allows updating the list of users in a specific group.\nThe group must exist before it can be updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "groupname": {
              "type": "string",
              "description": "The name of the group to update"
            },
            "users": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of usernames to add to the group"
            }
          },
          "required": [
            "groupname",
            "users"
          ]
        }
      },
      "create_group": {
        "name": "create_group",
        "description": "Create a new group.\n\nThis method creates a new group with the specified name. The group\nwill initially have no members.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the group to create."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "delete_group_by_name": {
        "name": "delete_group_by_name",
        "description": "Delete an existing group.\n\nThis method permanently removes a group from the system. All users\nin the group will lose their group-based permissions.",
        "parameters": {
          "type": "object",
          "properties": {
            "groupname": {
              "type": "string",
              "description": "The name of the group to delete"
            }
          },
          "required": [
            "groupname"
          ]
        }
      },
      "create_issue_link": {
        "name": "create_issue_link",
        "description": "Create a new issue link in Jira.\n\nThis method creates a new issue link between two issues. The link will be\nassigned a unique ID and stored in the system. Both issues must exist in\nthe database for the link to be created successfully.",
        "parameters": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of issue link to create. Must be a non-empty string."
            },
            "inwardIssue": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the inward issue. Must be a non-empty string."
                }
              },
              "description": "The inward issue reference containing:",
              "required": [
                "key"
              ]
            },
            "outwardIssue": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the outward issue. Must be a non-empty string."
                }
              },
              "description": "The outward issue reference containing:",
              "required": [
                "key"
              ]
            }
          },
          "required": [
            "inwardIssue",
            "outwardIssue",
            "type"
          ]
        }
      },
      "get_all_dashboards": {
        "name": "get_all_dashboards",
        "description": "Retrieve a list of dashboards from Jira.\n\nThis method returns a list of all dashboards in the system, with optional\npagination support. Dashboards are used to display various Jira data and\nmetrics in a customizable layout.",
        "parameters": {
          "type": "object",
          "properties": {
            "startAt": {
              "type": "integer",
              "description": "The index of the first dashboard to return.\nDefaults to 0."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of dashboards to return.\nIf not specified, all dashboards will be returned."
            }
          }
        }
      },
      "get_dashboard_by_id": {
        "name": "get_dashboard_by_id",
        "description": "Retrieve a specific dashboard by its ID.\n\nThis method returns detailed information about a specific dashboard\nidentified by its unique ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "dash_id": {
              "type": "string",
              "description": "The unique identifier of the dashboard to retrieve"
            }
          },
          "required": [
            "dash_id"
          ]
        }
      },
      "get_all_issue_link_types": {
        "name": "get_all_issue_link_types",
        "description": "Retrieve all issue link types from Jira.\n\nThis method returns a list of all issue link types defined in the system.\nIssue link types are used to categorize and manage relationships between issues.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_issue_link_type_by_id": {
        "name": "get_issue_link_type_by_id",
        "description": "Retrieve a specific issue link type by its ID.\n\nThis method returns detailed information about a specific issue link type\nidentified by its unique ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "link_type_id": {
              "type": "string",
              "description": "The unique identifier of the issue link type to retrieve"
            }
          },
          "required": [
            "link_type_id"
          ]
        }
      },
      "get_server_info": {
        "name": "get_server_info",
        "description": "Get server information.\n\nThis method returns information about the server.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_all_resolutions": {
        "name": "get_all_resolutions",
        "description": "Get all resolutions.\n\nThis method returns all resolutions in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_resolution_by_id": {
        "name": "get_resolution_by_id",
        "description": "Get a resolution by id.\n\nThis method returns a resolution by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "res_id": {
              "type": "string",
              "description": "The id of the resolution. Must be a non-empty string."
            }
          },
          "required": [
            "res_id"
          ]
        }
      },
      "get_all_settings": {
        "name": "get_all_settings",
        "description": "Get all settings.\n\nThis method returns all settings in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_all_permissions": {
        "name": "get_all_permissions",
        "description": "Get all permissions.\n\nThis method returns all permissions in the system.\nNot available in the real world API.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_version_by_id": {
        "name": "get_version_by_id",
        "description": "Get a version by ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "ver_id": {
              "type": "string",
              "description": "The ID of the version to get."
            }
          },
          "required": [
            "ver_id"
          ]
        }
      },
      "create_version": {
        "name": "create_version",
        "description": "Create a new version.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the version."
            },
            "description": {
              "type": "string",
              "description": "The description of the version."
            },
            "archived": {
              "type": "boolean",
              "description": "Whether the version is archived."
            },
            "released": {
              "type": "boolean",
              "description": "Whether the version is released."
            },
            "release_date": {
              "type": "string",
              "description": "The release date of the version."
            },
            "user_release_date": {
              "type": "string",
              "description": "The user release date of the version."
            },
            "project": {
              "type": "string",
              "description": "The project of the version."
            },
            "project_id": {
              "type": "integer",
              "description": "The project ID of the version."
            }
          }
        }
      },
      "delete_version_by_id": {
        "name": "delete_version_by_id",
        "description": "Delete a version.",
        "parameters": {
          "type": "object",
          "properties": {
            "ver_id": {
              "type": "string",
              "description": "The ID of the version to delete."
            },
            "move_fix_issues_to": {
              "type": "string",
              "description": "The ID of the version to move the fixed issues to, currently not used."
            },
            "move_affected_issues_to": {
              "type": "string",
              "description": "The ID of the version to move the affected issues to, currently not used."
            }
          },
          "required": [
            "ver_id"
          ]
        }
      },
      "get_version_related_issue_counts_by_id": {
        "name": "get_version_related_issue_counts_by_id",
        "description": "Get the related issue counts for a version.",
        "parameters": {
          "type": "object",
          "properties": {
            "ver_id": {
              "type": "string",
              "description": "The ID of the version to get the related issue counts for."
            }
          },
          "required": [
            "ver_id"
          ]
        }
      },
      "create_or_get_webhooks": {
        "name": "create_or_get_webhooks",
        "description": "Create or get webhooks.",
        "parameters": {
          "type": "object",
          "properties": {
            "webhooks": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "description": "The webhooks to create or get."
            }
          },
          "required": [
            "webhooks"
          ]
        }
      },
      "get_all_webhooks": {
        "name": "get_all_webhooks",
        "description": "Get all webhooks.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_webhooks_by_ids": {
        "name": "delete_webhooks_by_ids",
        "description": "Delete webhooks.",
        "parameters": {
          "type": "object",
          "properties": {
            "webhookIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The IDs of the webhooks to delete."
            }
          },
          "required": [
            "webhookIds"
          ]
        }
      },
      "find_groups_for_picker": {
        "name": "find_groups_for_picker",
        "description": "Search for groups matching a query string.\n\nThis method searches for groups whose names contain the specified query string.\nThe search is case-insensitive and returns all matching group names. This is useful\nfor implementing group picker functionality in the UI.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search string to match against group names.\nIf None or not provided, all groups will be returned.\nMust be a string if provided."
            }
          }
        }
      },
      "create_project": {
        "name": "create_project",
        "description": "Create a new project.\n\nThis method creates a new project with the given key and name.",
        "parameters": {
          "type": "object",
          "properties": {
            "proj_key": {
              "type": "string",
              "description": "The key of the project. Cannot be empty."
            },
            "proj_name": {
              "type": "string",
              "description": "The name of the project. Cannot be empty."
            }
          },
          "required": [
            "proj_key",
            "proj_name"
          ]
        }
      },
      "get_all_projects": {
        "name": "get_all_projects",
        "description": "Get all projects.\n\nThis method returns all projects in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_project_by_key": {
        "name": "get_project_by_key",
        "description": "Get a project by key.\n\nThis method retrieves a specific project using its key.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_key": {
              "type": "string",
              "description": "The key of the project. Cannot be empty."
            }
          },
          "required": [
            "project_key"
          ]
        }
      },
      "get_project_avatars_by_key": {
        "name": "get_project_avatars_by_key",
        "description": "Get all avatars for a project.\n\nNote: This returns all avatars with type 'project'",
        "parameters": {
          "type": "object",
          "properties": {
            "project_key": {
              "type": "string",
              "description": "The key of the project. Must be a non-empty string."
            }
          },
          "required": [
            "project_key"
          ]
        }
      },
      "get_project_components_by_key": {
        "name": "get_project_components_by_key",
        "description": "Get all components for a project.\n\nThis method returns all components for a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_key": {
              "type": "string",
              "description": "The key of the project."
            }
          },
          "required": [
            "project_key"
          ]
        }
      },
      "delete_project_by_key": {
        "name": "delete_project_by_key",
        "description": "Delete a project.\n\nThis method deletes a project.",
        "parameters": {
          "type": "object",
          "properties": {
            "project_key": {
              "type": "string",
              "description": "The key of the project"
            }
          },
          "required": [
            "project_key"
          ]
        }
      },
      "get_all_filters": {
        "name": "get_all_filters",
        "description": "Retrieve all filters from Jira.\n\nThis method returns a list of all filters in the system. Filters in Jira\nare used to save and share search queries, allowing users to quickly\naccess commonly used issue searches.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_filter_by_id": {
        "name": "get_filter_by_id",
        "description": "Retrieve a specific filter by its ID.\n\nThis method returns detailed information about a specific filter\nidentified by its unique ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter_id": {
              "type": "string",
              "description": "The unique identifier of the filter to retrieve"
            }
          },
          "required": [
            "filter_id"
          ]
        }
      },
      "update_filter_by_id": {
        "name": "update_filter_by_id",
        "description": "Update an existing filter.\n\nThis method allows updating the name and/or JQL query of an existing\nfilter. At least one of name or jql must be provided.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter_id": {
              "type": "string",
              "description": "The unique identifier of the filter to update"
            },
            "name": {
              "type": "string",
              "description": "The new name for the filter. Defaults to None."
            },
            "jql": {
              "type": "string",
              "description": "The new JQL query for the filter. Defaults to None."
            },
            "description": {
              "type": "string",
              "description": "Description of the filter. Defaults to None."
            },
            "favorite": {
              "type": "boolean",
              "description": "Whether the filter is a favorite. Defaults to None."
            },
            "editable": {
              "type": "boolean",
              "description": "Whether the filter is editable. Defaults to None."
            }
          },
          "required": [
            "filter_id"
          ]
        }
      },
      "get_current_user_preferences": {
        "name": "get_current_user_preferences",
        "description": "Get the current user's preferences.\n\nThis method returns the preferences of the current user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "update_current_user_preferences": {
        "name": "update_current_user_preferences",
        "description": "Update the current user's preferences.\n\nThis method updates the preferences of the current user.",
        "parameters": {
          "type": "object",
          "properties": {
            "value": {
              "type": "object",
              "properties": {
                "theme": {
                  "type": "object",
                  "description": "The theme of the current user"
                },
                "notifications": {
                  "type": "object",
                  "description": "The notifications of the current user"
                }
              },
              "description": "The preferences to update"
            }
          },
          "required": [
            "value"
          ]
        }
      },
      "get_all_roles": {
        "name": "get_all_roles",
        "description": "Get all roles.\n\nThis method returns all roles in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_role_by_id": {
        "name": "get_role_by_id",
        "description": "Get a role by id.\n\nThis method returns a role by id.",
        "parameters": {
          "type": "object",
          "properties": {
            "role_id": {
              "type": "string",
              "description": "The id of the role"
            }
          },
          "required": [
            "role_id"
          ]
        }
      },
      "get_current_user_permissions": {
        "name": "get_current_user_permissions",
        "description": "Get the current user's permissions.\n\nThis method returns the permissions of the current user from the database.\nThe permissions are returned as a list of permission keys that the user has access to.",
        "parameters": {
          "type": "object",
          "properties": {
            "projectKey": {
              "type": "string",
              "description": "The key of the project to check permissions for. Defaults to None."
            },
            "issueKey": {
              "type": "string",
              "description": "The key of the issue to check permissions for. Defaults to None."
            }
          }
        }
      },
      "upload_avatar": {
        "name": "upload_avatar",
        "description": "Upload a new avatar to Jira.\n\nThis method allows uploading a new avatar image to be used in Jira.\nThe avatar can be used for users, projects, or other entities.",
        "parameters": {
          "type": "object",
          "properties": {
            "filetype": {
              "type": "string",
              "description": "The type of avatar being uploaded. Must be one of:\n- \"user\": For user avatars\n- \"project\": For project avatars\n- \"system\": For system-wide avatars"
            },
            "filename": {
              "type": "string",
              "description": "The name of the file being uploaded"
            }
          },
          "required": [
            "filename",
            "filetype"
          ]
        }
      },
      "upload_temporary_avatar": {
        "name": "upload_temporary_avatar",
        "description": "Upload a temporary avatar to Jira.\n\nThis method allows uploading a temporary avatar that can be used for preview\nbefore making it permanent. Temporary avatars are typically used during the\navatar selection process.",
        "parameters": {
          "type": "object",
          "properties": {
            "filetype": {
              "type": "string",
              "description": "The type of avatar being uploaded. Must be one of:\n- \"user\": For user avatars\n- \"project\": For project avatars\n- \"system\": For system-wide avatars"
            },
            "filename": {
              "type": "string",
              "description": "The name of the file being uploaded"
            }
          },
          "required": [
            "filename",
            "filetype"
          ]
        }
      },
      "crop_temporary_avatar": {
        "name": "crop_temporary_avatar",
        "description": "Crop a temporary avatar in Jira.\n\nThis method allows cropping a temporary avatar to the desired dimensions\nbefore making it permanent. This is typically used after uploading a\ntemporary avatar to adjust its appearance.",
        "parameters": {
          "type": "object",
          "properties": {
            "cropDimensions": {
              "type": "object",
              "description": "A dictionary containing the crop dimensions:",
              "properties": {
                "x": {
                  "type": "integer",
                  "description": "The x-coordinate of the top-left corner"
                },
                "y": {
                  "type": "integer",
                  "description": "The y-coordinate of the top-left corner"
                },
                "width": {
                  "type": "integer",
                  "description": "The width of the crop area"
                },
                "height": {
                  "type": "integer",
                  "description": "The height of the crop area"
                }
              },
              "required": [
                "height",
                "width",
                "x",
                "y"
              ]
            }
          },
          "required": [
            "cropDimensions"
          ]
        }
      },
      "validate_license": {
        "name": "validate_license",
        "description": "Validate a license.\n\nThis method validates a license.",
        "parameters": {
          "type": "object",
          "properties": {
            "license": {
              "type": "string",
              "description": "The license to validate"
            }
          },
          "required": [
            "license"
          ]
        }
      },
      "get_jql_autocomplete_suggestions": {
        "name": "get_jql_autocomplete_suggestions",
        "description": "Get JQL autocomplete data.\n\nThis method returns JQL autocomplete data.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "start_reindex": {
        "name": "start_reindex",
        "description": "Start a reindex operation in Jira.\n\nThis method initiates a reindex operation which rebuilds the search indexes in Jira.\nThe reindex can be performed in either FOREGROUND or BACKGROUND mode.",
        "parameters": {
          "type": "object",
          "properties": {
            "reindex_type": {
              "type": "string",
              "description": "The type of reindex to perform.\n- \"FOREGROUND\": Reindex runs in the foreground, blocking other operations\n- \"BACKGROUND\": Reindex runs in the background, allowing other operations\nDefaults to \"FOREGROUND\"."
            }
          }
        }
      },
      "get_reindex_status": {
        "name": "get_reindex_status",
        "description": "Get the current status of the reindex operation.\n\nThis method returns information about any ongoing reindex operation,\nincluding whether it is currently running and its type.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_all_application_roles": {
        "name": "get_all_application_roles",
        "description": "Retrieve all application roles from Jira.\n\nThis method returns a list of all application roles defined in the system.\nApplication roles are used to control access to specific Jira features and functionality.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_application_role_by_key": {
        "name": "get_application_role_by_key",
        "description": "Retrieve a specific application role by its key.\n\nThis method returns detailed information about a specific application role\nidentified by its unique key.",
        "parameters": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The unique identifier of the application role to retrieve"
            }
          },
          "required": [
            "key"
          ]
        }
      },
      "get_all_workflows": {
        "name": "get_all_workflows",
        "description": "Get all workflows.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_attachment_metadata": {
        "name": "get_attachment_metadata",
        "description": "Get attachment metadata without file content.\n\nReturns metadata information for an attachment without the actual file data.\nThis is useful for getting file information (name, size, type, etc.) without \ndownloading the entire attachment content. The response includes a content URL \nfor retrieving the actual file data separately.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the attachment. Must be a positive \ninteger or a string representation of a positive integer."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_attachment": {
        "name": "delete_attachment",
        "description": "Delete an attachment and remove all references from issues.\n\nPermanently removes an attachment from the system, including the file data \nand all references to it from issues. This operation cannot be undone.\nThe function performs a complete cleanup by removing both the attachment \nrecord and all issue references to ensure data consistency.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the attachment to delete.\nMust be a positive integer or a string representation of a positive integer."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "add_attachment": {
        "name": "add_attachment",
        "description": "Add an attachment to an issue from a file path.\n\nCreates a new attachment associated with the specified issue by reading\na file from the filesystem. Automatically handles MIME type detection,\nfile size validation, encoding, and checksum generation. The attachment\nis stored in the database with full metadata and the issue is updated\nto reference the new attachment.",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_id_or_key": {
              "type": "string",
              "description": "The unique identifier or key of the target issue.\nMust be a non-empty string that exists in the database."
            },
            "file_path": {
              "type": "string",
              "description": "Filesystem path to the file to attach. The file will\nbe read from disk and the filename will be extracted from the path."
            }
          },
          "required": [
            "file_path",
            "issue_id_or_key"
          ]
        }
      },
      "list_issue_attachments": {
        "name": "list_issue_attachments",
        "description": "List all attachments associated with an issue.\n\nRetrieves metadata for all attachments that are currently associated with the\nspecified issue. The function automatically handles orphaned references by\nskipping attachments that were deleted but still have references in the issue.\nReturns an empty list if the issue has no attachments. The attachments are\nreturned in the order they appear in the issue's attachment list.",
        "parameters": {
          "type": "object",
          "properties": {
            "issue_id_or_key": {
              "type": "string",
              "description": "The unique identifier or key of the issue to query.\nMust be a non-empty string that exists in the database."
            }
          },
          "required": [
            "issue_id_or_key"
          ]
        }
      },
      "download_attachment": {
        "name": "download_attachment",
        "description": "Download attachment content to a local file in the current directory.\n\nDownloads the specified attachment and saves it to the current directory using\nthe attachment's original filename. This function handles both binary and text \nattachments, automatically detecting the appropriate encoding and writing method \nbased on the attachment's stored encoding format.\n\nThe function retrieves the attachment data directly from the database and\nthen processes it according to its encoding:\n- Base64 encoded attachments are decoded and written as binary files\n- Text attachments are written directly as UTF-8 text files",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the attachment to download.\nCan be provided as an integer or string representation of the attachment ID.\nMust be a positive integer that exists in the database."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_attachment_content": {
        "name": "get_attachment_content",
        "description": "Get attachment content as binary data.\n\nRetrieves the raw binary content of an attachment without saving it to disk.\nThis function decodes the stored attachment data and returns it as binary content.\nThe content is returned as bytes that can be used directly by applications for processing, \nstreaming, or further manipulation.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the attachment to retrieve.\nCan be provided as an integer or string representation of the attachment ID.\nMust be a positive integer that exists in the database."
            }
          },
          "required": [
            "id"
          ]
        }
      }
    },
    "github": {
      "get_authenticated_user": {
        "name": "get_authenticated_user",
        "description": "Get details of the authenticated user.\n\nGets details of the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_issue_content": {
        "name": "get_issue_content",
        "description": "Gets the contents of an issue within a repository.\n\nThis function retrieves detailed information about a specific issue identified\nby its number, belonging to the specified repository and owner. The returned\ndictionary is a direct representation of the data for the found issue.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The username of the account that owns the repository.\nMust be a non-empty string."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository. Must be a non-empty string."
            },
            "issue_number": {
              "type": "integer",
              "description": "The number that identifies the issue. Must be a positive integer."
            }
          },
          "required": [
            "issue_number",
            "owner",
            "repo"
          ]
        }
      },
      "get_issue_comments": {
        "name": "get_issue_comments",
        "description": "Get comments for a GitHub issue.\n\nThis function gets comments for a GitHub issue. The issue is identified using\nthe provided repository owner, repository name, and issue number.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "issue_number": {
              "type": "integer",
              "description": "The number of the issue."
            }
          },
          "required": [
            "issue_number",
            "owner",
            "repo"
          ]
        }
      },
      "create_issue": {
        "name": "create_issue",
        "description": "Create a new issue in a GitHub repository.\n\nThis function facilitates the creation of a new issue within a designated GitHub repository.\nIt accepts details such as the issue's title, an optional body, optional assignees,\nand optional labels to initialize the issue.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "title": {
              "type": "string",
              "description": "The title for the new issue."
            },
            "body": {
              "type": "string",
              "description": "The contents of the issue."
            },
            "assignees": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of GitHub logins to assign to this issue."
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label names to add to this issue."
            }
          },
          "required": [
            "owner",
            "repo",
            "title"
          ]
        }
      },
      "add_issue_comment": {
        "name": "add_issue_comment",
        "description": "Add a comment to an issue.\n\nThis function adds a comment to a specific issue. It takes the repository's\nowner, the repository name, the issue number, and the comment's body content\nas input. Upon successful execution, it provides a dictionary containing\ndetails of the newly created comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "issue_number": {
              "type": "integer",
              "description": "The number that identifies the issue."
            },
            "body": {
              "type": "string",
              "description": "The content of the comment."
            }
          },
          "required": [
            "body",
            "issue_number",
            "owner",
            "repo"
          ]
        }
      },
      "list_repository_issues": {
        "name": "list_repository_issues",
        "description": "List and filter repository issues.\n\nLists and filters issues for a specified repository. This function allows\nretrieval of issues based on criteria such as their state (e.g., open,\nclosed, all), associated labels, and a 'since' timestamp indicating the\nminimum update time. The results can be sorted by fields like 'created',\n'updated', or 'comments', in either ascending ('asc') or descending\n('desc') order. Pagination is supported through 'page' and 'per_page'\nparameters to manage the volume of returned data.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "state": {
              "type": "string",
              "description": "The state of the issues to return (e.g., 'open',\n'closed', 'all')."
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label names to filter issues by."
            },
            "sort": {
              "type": "string",
              "description": "The criteria for sorting the issues (e.g., 'created',\n'updated', 'comments')."
            },
            "direction": {
              "type": "string",
              "description": "The direction of sorting (e.g., 'asc', 'desc')."
            },
            "since": {
              "type": "string",
              "description": "An ISO 8601 timestamp to filter issues updated at\nor after this time."
            },
            "page": {
              "type": "integer",
              "description": "The page number for paginated results."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of issues to return per page."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "update_issue": {
        "name": "update_issue",
        "description": "Update an existing issue in a GitHub repository.\n\nThis function updates an existing issue within a specified GitHub repository.\nIt allows modification of the issue's title, body, state (open or closed),\nassociated labels, assigned users, and milestone. The title and body can\nbe cleared by passing `None`. Labels and assignees are replaced if new lists\nare provided; an empty list clears them.\nThe `updated_at` timestamp is always modified on a successful call.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. Case-insensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository. Case-insensitive."
            },
            "issue_number": {
              "type": "integer",
              "description": "The number that identifies the issue. Must be positive."
            },
            "title": {
              "type": "string",
              "description": "The new title for the issue. If `None` (default or explicit),\nthe title is cleared (set to `None`)."
            },
            "body": {
              "type": "string",
              "description": "The new contents of the issue. If `None` (default or explicit),\nthe body is cleared (set to `None`)."
            },
            "state": {
              "type": "string",
              "description": "The new state (\"open\" or \"closed\"). If `None` (default),\nthe state is not changed."
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of label names to apply. Replaces existing labels.\n- If `None` (default): Labels are not changed.\n- If `[]` (empty list): All labels are removed.\n- If list of strings: These become the new labels. Each name must exist.\nRequires push access."
            },
            "assignees": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of assignee logins. Replaces existing assignees.\nThe first login becomes the primary assignee.\n- If `None` (default): Assignees are not changed.\n- If `[]` (empty list): All assignees are removed.\n- If list of logins: These become the new assignees. Each login must exist.\nRequires push access."
            },
            "milestone": {
              "type": "integer",
              "description": "The number of the milestone to assign.\n- If `None` (default or explicitly passed as `None`): Removes the current milestone.\n- If an integer: Assigns to this milestone. Must exist.\nRequires push access for any change to the milestone (setting or removing)."
            }
          },
          "required": [
            "issue_number",
            "owner",
            "repo"
          ]
        }
      },
      "get_pull_request_details": {
        "name": "get_pull_request_details",
        "description": "Get details of a specific pull request.\n\nThis function gets details of a specific pull request. It uses the provided\nowner, repository name, and pull request number to identify and retrieve\nthe comprehensive details of the pull request.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number that identifies the pull request."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "list_repository_pull_requests": {
        "name": "list_repository_pull_requests",
        "description": "List and filter repository pull requests.\n\nThis function lists and filters pull requests for a specified repository.\nIt allows querying for pull requests based on their state (open, closed, or all).\nResults can be sorted by various criteria such as creation date,\nupdate date, popularity (number of comments), or by identifying long-running\npull requests. The direction of sorting (ascending or descending) can also be\nspecified. Pagination options are available to control the number of results\nper page and to fetch specific pages of results, facilitating the handling of\nlarge datasets.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "state": {
              "type": "string",
              "description": "Filter by state. Possible values: 'open', 'closed', 'all'. Default: 'open'."
            },
            "sort": {
              "type": "string",
              "description": "What to sort results by. 'popularity' will sort by the number of comments. 'long-running' will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. Possible values: 'created', 'updated', 'popularity', 'long-running'. Default: 'created'."
            },
            "direction": {
              "type": "string",
              "description": "The direction of the sort. Possible values: 'asc', 'desc'. Default: 'desc' when 'sort' is 'created' or not specified, otherwise 'asc'."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page (max 100). For more information, see \"Using pagination in the REST API.\" Default: 30."
            },
            "page": {
              "type": "integer",
              "description": "The page number of the results to fetch. For more information, see \"Using pagination in the REST API.\" Default: 1."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "merge_pull_request": {
        "name": "merge_pull_request",
        "description": "Merge a pull request.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number identifying the pull request."
            },
            "commit_title": {
              "type": "string",
              "description": "An optional title for the merge commit."
            },
            "commit_message": {
              "type": "string",
              "description": "An optional message for the merge commit."
            },
            "merge_method": {
              "type": "string",
              "description": "An optional merge method to use."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "get_pull_request_files": {
        "name": "get_pull_request_files",
        "description": "Get the list of files changed in a pull request.\n\nThis function retrieves the list of files changed in a specified pull request.\nThe pull request is identified using the `owner` of the repository,\nthe `repo` name, and the `pull_number`.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number of the pull request."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "get_pull_request_status": {
        "name": "get_pull_request_status",
        "description": "Get the combined status of all status checks for a pull request.\n\nThis function retrieves the combined status of all status checks for a specified pull request.\nThe pull request is identified by its owner, repository, and pull number.\nThe returned status includes an overall state, commit SHA, total check count,\nand a detailed list of individual status checks.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number identifying the pull request."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "update_pull_request_branch": {
        "name": "update_pull_request_branch",
        "description": "Update a pull request branch with the latest changes from the base branch.\n\nThis function updates a pull request branch by incorporating the most recent changes\nfrom its base branch. If an `expected_head_sha` is provided, the update\nwill only proceed if this SHA matches the current head of the pull request's\nbranch, ensuring the update is based on the expected state.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name\nis not case sensitive."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number that identifies the pull request."
            },
            "expected_head_sha": {
              "type": "string",
              "description": "The expected SHA of the pull request's HEAD\nref. This is the most recent commit on the pull request's branch. If the\nexpected SHA does not match the pull request's HEAD, you will receive a\n422 Unprocessable Entity status. You can use the \"List commits\" endpoint\nto find the most recent commit SHA. Default: SHA of the pull request's\ncurrent HEAD ref."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "get_pull_request_review_comments": {
        "name": "get_pull_request_review_comments",
        "description": "Get the review comments on a pull request.\n\nRetrieves all review comments associated with a specific pull request.\nThe pull request is identified by the repository owner's identifier,\nthe repository name, and the pull request number.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The login name or identifier of the repository owner."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number identifying the pull request."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "get_pull_request_reviews": {
        "name": "get_pull_request_reviews",
        "description": "Lists all reviews for a specified pull request.\n\nLists all reviews for a specified pull request. The list of reviews returns in chronological order.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number that identifies the pull request. Must be a positive integer."
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "create_pull_request_review": {
        "name": "create_pull_request_review",
        "description": "Creates a review on a specified pull request.\n\nThis function simulates the GitHub API endpoint for creating a pull request review.\nIt allows for submitting reviews with different states (APPROVE, REQUEST_CHANGES, COMMENT, PENDING),\nan optional body text, and an array of inline draft review comments.\n\nThe creation of a review with states other than PENDING typically triggers notifications.\nPull request reviews created in the PENDING state (when the `event` parameter is\nleft blank or not provided) are not considered \"submitted\" and therefore do not\ninclude the `submitted_at` property in the response until they are explicitly submitted\nvia a separate action (not part of this function).",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number that identifies the pull request within the repository."
            },
            "commit_id": {
              "type": "string",
              "description": "The SHA of the commit to which the review applies.\nIf not provided, the review applies to the latest commit on the pull request's head branch.\nSpecifying an older commit SHA might result in comments being outdated if subsequent\ncommits modify the commented lines."
            },
            "body": {
              "type": "string",
              "description": "The main body text of the pull request review.\nThis field is **required** if the `event` is 'REQUEST_CHANGES' or 'COMMENT'.\nIt can be an empty string."
            },
            "event": {
              "type": "string",
              "description": "The review action to perform. Valid values are:\n- 'APPROVE': Submits an approving review.\n- 'REQUEST_CHANGES': Submits a review requesting changes. Requires `body`.\n- 'COMMENT': Submits a general comment review. Requires `body`.\nIf `event` is `None` or an empty string, the review is created in a 'PENDING' state\nand is not considered submitted."
            },
            "comments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Required. The relative path to the file being commented on."
                  },
                  "body": {
                    "type": "string",
                    "description": "Required. The text of the review comment."
                  },
                  "position": {
                    "type": "object",
                    "description": "The line index in the diff hunk to which the comment applies.\n  This is mutually exclusive with `line` for specifying a single-line comment location;\n  one of them must be provided if not a multi-line comment on the file.\n  Must be >= 1."
                  },
                  "line": {
                    "type": "object",
                    "description": "The line number in the file's diff that the comment applies to.\n  For a multi-line comment, this is the last line of the range.\n  This is mutually exclusive with `position` for single-line comments. Must be >= 1."
                  },
                  "side": {
                    "type": "object",
                    "description": "The side of the diff to which the comment applies.\n  Can be 'LEFT' or 'RIGHT'. Defaults to 'RIGHT' if `line` is provided. Only used for line-level\n  comments."
                  },
                  "start_line": {
                    "type": "object",
                    "description": "For a multi-line comment, the first line of the\n  comment's range. Requires `line` to also be provided. Must be <= `line` and >= 1."
                  },
                  "start_side": {
                    "type": "object",
                    "description": "For a multi-line comment, the side of the diff\n  for the `start_line`. Can be 'LEFT' or 'RIGHT'. Defaults to the value of `side`\n  if `start_line` is provided and `start_side` is not. Requires `start_line`."
                  }
                },
                "required": [
                  "body",
                  "path"
                ]
              },
              "description": "An array of draft review comment objects to be\nincluded with this review. Each comment dictionary in the list should conform to the\nfollowing structure and validations (see `PullRequestReviewCommentInput` model):"
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "create_pull_request": {
        "name": "create_pull_request",
        "description": "Create a new pull request.\n\nThis function creates a new pull request in the specified repository.\nIt requires the owner of the repository, the repository name, the title for the pull request,\nthe head branch (the branch with the proposed changes), and the base branch (the branch\ninto which the changes will be merged). Optional parameters include the body of the\npull request, whether it should be a draft, and whether maintainers can modify it.\nThe function returns details of the created pull request.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "title": {
              "type": "string",
              "description": "The title of the new pull request."
            },
            "head": {
              "type": "string",
              "description": "The name of the branch where your changes are implemented."
            },
            "base": {
              "type": "string",
              "description": "The name of the branch you want the changes pulled into."
            },
            "body": {
              "type": "string",
              "description": "The contents of the pull request. Defaults to None."
            },
            "draft": {
              "type": "boolean",
              "description": "Indicates whether the pull request is a draft. Defaults to False."
            },
            "maintainer_can_modify": {
              "type": "boolean",
              "description": "Indicates whether maintainers can modify the pull request.\nDefaults to False."
            }
          },
          "required": [
            "base",
            "head",
            "owner",
            "repo",
            "title"
          ]
        }
      },
      "add_pull_request_review_comment": {
        "name": "add_pull_request_review_comment",
        "description": "Add a review comment to a pull request or reply to an existing comment.\n\nThis function adds a review comment to a specified pull request or replies to an\nexisting comment. Depending on whether it's a new comment or a reply,\ndifferent parameters are required. For new comments, context like commit SHA,\nfile path, and line number may be necessary. For replies, the ID of the\nparent comment is used to inherit context.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository. The name is not case sensitive."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number that identifies the pull request."
            },
            "body": {
              "type": "string",
              "description": "The text of the review comment."
            },
            "commit_id": {
              "type": "string",
              "description": "The SHA of the commit to comment on. Required if\n`in_reply_to` is not provided and the comment is not a reply."
            },
            "path": {
              "type": "string",
              "description": "The relative path to the file that necessitates a comment.\nRequired if `in_reply_to` is not provided and the comment is not a reply."
            },
            "line": {
              "type": "integer",
              "description": "The line of the blob in the pull request diff that the\ncomment applies to. For a multi-line comment, this is the last line\nof the range. Required for new line-level comments (when `subject_type`\nis 'line' or inferred as such)."
            },
            "side": {
              "type": "string",
              "description": "The side of the diff to comment on. Valid values are\n'LEFT' (for the old version) or 'RIGHT' (for the new version).\nDefaults to 'RIGHT' if `line` is provided. Only used for line-level\ncomments."
            },
            "start_line": {
              "type": "integer",
              "description": "For a multi-line comment, the first line of the\nrange. `line` should be the end line. Only used for line-level comments."
            },
            "start_side": {
              "type": "string",
              "description": "The side of the diff for `start_line`. Valid values\nare 'LEFT' or 'RIGHT'. Defaults to the `side` parameter if not\nprovided. Only used for multi-line comments."
            },
            "subject_type": {
              "type": "string",
              "description": "The type of subject for the comment. Valid values\nare 'line' or 'file'. If 'file', line-specific parameters (`line`,\n`side`, `start_line`, `start_side`) are ignored. If 'line', they are\nused. If not provided, the API may infer based on other parameters\n(e.g., presence of `line`)."
            },
            "in_reply_to": {
              "type": "integer",
              "description": "The ID of an existing comment to which this\ncomment is a reply. If provided, parameters like `commit_id`, `path`,\n`line`, `side`, `start_line`, `start_side`, and `subject_type` are\ntypically ignored as the reply inherits context from the parent comment."
            }
          },
          "required": [
            "body",
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "update_pull_request": {
        "name": "update_pull_request",
        "description": "Update an existing pull request in a GitHub repository.\n\nUpdates an existing pull request in a GitHub repository. This function allows\nfor updating attributes of a pull request such as its title, body, state\n(e.g., 'open' or 'closed'), the base branch it targets, and whether\nmaintainers are permitted to make modifications to it.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "pull_number": {
              "type": "integer",
              "description": "The number identifying the pull request."
            },
            "title": {
              "type": "string",
              "description": "The new title for the pull request. Defaults to None."
            },
            "body": {
              "type": "string",
              "description": "The new body content for the pull request. Defaults to None."
            },
            "state": {
              "type": "string",
              "description": "The new state of the pull request (e.g., 'open' or 'closed').\nDefaults to None."
            },
            "base": {
              "type": "string",
              "description": "The name of the branch to which the changes are proposed\n(the base branch). Defaults to None."
            },
            "maintainer_can_modify": {
              "type": "boolean",
              "description": "Specifies whether maintainers can modify\nthe pull request. Defaults to False. (Note: If explicitly passed as None,\nthis field will not be updated. If not passed, it defaults to False,\nimplying an update to False if current value is different.)"
            }
          },
          "required": [
            "owner",
            "pull_number",
            "repo"
          ]
        }
      },
      "create_or_update_repository_file": {
        "name": "create_or_update_repository_file",
        "description": "Create or update a single file in a repository.\n\nThis function creates a new file or updates an existing file at a specified\npath within a given repository. It requires the repository owner's identifier,\nthe repository name, the file's path, a commit message, and the file's\ncontent. Optional parameters include the branch name and, for file updates,\nthe SHA of the existing file blob to ensure the correct file version is modified.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository (e.g., username or organization name)."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "path": {
              "type": "string",
              "description": "The path to the file in the repository."
            },
            "message": {
              "type": "string",
              "description": "The commit message."
            },
            "content": {
              "type": "string",
              "description": "The new file content, base64 encoded."
            },
            "branch": {
              "type": "string",
              "description": "The branch name. If not provided, the operation\ntypically targets the repository's default branch. Defaults to None."
            },
            "sha": {
              "type": "string",
              "description": "The blob SHA of the file being replaced. This is\nrequired if updating an existing file and is used to prevent conflicts\nby ensuring the file has not changed since the SHA was obtained.\nDefaults to None."
            }
          },
          "required": [
            "content",
            "message",
            "owner",
            "path",
            "repo"
          ]
        }
      },
      "list_repository_branches": {
        "name": "list_repository_branches",
        "description": "List branches in a GitHub repository.\n\nLists branches in a GitHub repository, sorted by name. This function allows for pagination\nof the results.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository. Must not be empty."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository. Must not be empty."
            },
            "page": {
              "type": "integer",
              "description": "The page number of the results to fetch. Defaults to 1.\nMust be a positive integer if provided."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page. Defaults to 30.\nMust be a positive integer if provided."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "push_repository_files": {
        "name": "push_repository_files",
        "description": "Push multiple files in a single commit.\n\nThis function pushes multiple files in a single commit. It uses the provided\nrepository owner's username, repository name, target branch name, a list of\nfiles (each defined by its path and content), and a commit message to\nperform the operation.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The username of the account that owns the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "branch": {
              "type": "string",
              "description": "The name of the branch to push the files to."
            },
            "files": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The full path of the file within the repository."
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the file."
                  }
                },
                "required": [
                  "content",
                  "path"
                ]
              },
              "description": "A list of dictionaries, where each dictionary\nrepresents a file to be pushed. Each dictionary must contain the\nfollowing keys:"
            },
            "message": {
              "type": "string",
              "description": "The commit message for the push operation."
            }
          },
          "required": [
            "branch",
            "files",
            "message",
            "owner",
            "repo"
          ]
        }
      },
      "create_repository": {
        "name": "create_repository",
        "description": "Create a new GitHub repository.\n\nCreates a new GitHub repository. The user specifies the name for the\nrepository and can optionally provide a description, set its visibility,\nand choose to auto-initialize it.\n\nDefault Repository Settings:\n    The following features are enabled by default for new repositories:\n    - has_issues: True (Issues are enabled)\n    - has_projects: True (Projects are enabled)\n    - has_downloads: True (Downloads are enabled)\n    - has_wiki: True (Wiki is enabled)\n    - has_pages: False (GitHub Pages are disabled)\n    - allow_forking: True (Repository can be forked)\n    - archived: False (Repository is not archived)\n    - disabled: False (Repository is not disabled)\n    - is_template: False (Repository is not a template)\n    - web_commit_signoff_required: False (Commit signoff not required)\n    - visibility: \"public\" or \"private\" (based on private parameter)",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name for the new repository."
            },
            "description": {
              "type": "string",
              "description": "An optional description for the repository. Defaults to None."
            },
            "private": {
              "type": "boolean",
              "description": "If True, the repository will be private. Defaults to False."
            },
            "auto_init": {
              "type": "boolean",
              "description": "If True, creates an initial commit, potentially with a README. Defaults to False."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_repository_file_contents": {
        "name": "get_repository_file_contents",
        "description": "Get contents of a file or directory.\n\nThis function retrieves the content of a specified file or directory within a\nrepository. The nature of the returned data depends on whether the specified\npath points to a file or a directory.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "path": {
              "type": "string",
              "description": "The path to the file or directory within the repository."
            },
            "ref": {
              "type": "string",
              "description": "An optional Git reference (e.g., a branch name,\ntag, or commit SHA) specifying the version of the content to retrieve.\nDefaults to None."
            }
          },
          "required": [
            "owner",
            "path",
            "repo"
          ]
        }
      },
      "fork_repository": {
        "name": "fork_repository",
        "description": "Fork a repository.\n\nCreates a fork for the authenticated user. The user should have \n`Administration` repository permissions (write) to set up and configure the new repository (users fork) under the users account.\n`Contents` repository permissions (read) to read the `Contents` of the original repository to get all the data.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the `.git` extension. The name is not case sensitive."
            },
            "organization": {
              "type": "string",
              "description": "Optional parameter to specify the organization name if forking into an organization."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "create_repository_branch": {
        "name": "create_repository_branch",
        "description": "Create a new branch.\n\nThis function establishes a new branch of development within the repository.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "branch": {
              "type": "string",
              "description": "The name of the new branch to create."
            },
            "sha": {
              "type": "string",
              "description": "The SHA of the commit from which the new branch will be created."
            }
          },
          "required": [
            "branch",
            "owner",
            "repo",
            "sha"
          ]
        }
      },
      "list_repository_commits": {
        "name": "list_repository_commits",
        "description": "Get a list of commits of a branch in a repository.\n\nThis function gets a list of commits of a branch in a repository.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "sha": {
              "type": "string",
              "description": "The commit SHA, branch name, or tag name to list commits from."
            },
            "path": {
              "type": "string",
              "description": "Only commits containing this file path will be returned."
            },
            "page": {
              "type": "integer",
              "description": "Page number of the results to fetch for pagination."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page for pagination."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "get_repository_commit_details": {
        "name": "get_repository_commit_details",
        "description": "Get details for a commit from a repository.\n\nThis function gets details for a commit from a repository. The `page` and\n`per_page` parameters can be used to paginate the list of files affected\nby the commit, which is part of the returned details.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "sha": {
              "type": "string",
              "description": "The SHA of the commit to retrieve."
            },
            "page": {
              "type": "integer",
              "description": "Page number for paginating the list of files affected by the commit. Defaults to None."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of files to return per page when paginating. Defaults to None."
            }
          },
          "required": [
            "owner",
            "repo",
            "sha"
          ]
        }
      },
      "search_repository_code": {
        "name": "search_repository_code",
        "description": "Search for code within repositories.\n\nSearches for query terms inside of files. This method returns up to 100 results per page.\nThe query can contain any combination of search keywords and qualifiers.\n\nNote: Due to the complexity of searching code, there are a few restrictions:\n- Only the default branch is considered. In most cases, this will be the master branch.\n- Only files smaller than 384 KB are searchable.\n- You must always include at least one search term when searching source code.\n  For example, searching for language:go is not valid, while amazing language:go is.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query string. Can contain any combination of search keywords and qualifiers.\nExamples:\n- `\"addClass in:file language:js repo:jquery/jquery\"`: Find files containing 'addClass' in the jquery/jquery repository\n- `\"repo:octocat/Spoon-Knife css\"`: Find instances of 'css' in the octocat/Spoon-Knife repository\n- `\"shogun user:heroku language:ruby\"`: Find 'shogun' in Ruby files from heroku's repositories\n- `\"function size:>10000 language:python\"`: Find Python files containing 'function' larger than 10 KB\n\nSupported qualifiers:\n- `in:file,path`: Search in file contents and/or file paths. If not specified, searches in both.\n- `language:LANGUAGE`: Filter by programming language (based on file extension).\n    Supported languages: javascript (js), python (py), ruby (rb), go, java, c++ (cpp),\n    typescript (ts), php, c# (cs), html, css, shell (sh), markdown (md).\n- `repo:owner/repository`: Restrict search to a specific repository.\n- `user:USERNAME`, `org:USERNAME`: Search within a user's or organization's repositories.\n- `size:n`: Filter by file size (in bytes). Can use `>`, `<`, `>=`, `<=`, and `..` ranges.\n- `path:PATH`: Filter by file path.\n- `extension:EXTENSION`: Filter by file extension.\n- `is:public`, `is:private`: Filter by repository visibility.\n- `fork:true`, `fork:only`: Include forked repositories in the search."
            },
            "sort": {
              "type": "string",
              "description": "This field is closing down. Can only be 'indexed', which indicates how recently a file has been indexed.\nDefault is 'best match'."
            },
            "order": {
              "type": "string",
              "description": "This field is closing down. The direction to sort. Can be 'asc' or 'desc'.\nOnly used when 'sort' is specified. Default is 'desc'."
            },
            "page": {
              "type": "integer",
              "description": "Page number of the results to fetch. Default is 1."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page (max 100). Default is 30."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "search_repositories": {
        "name": "search_repositories",
        "description": "Search for GitHub repositories.\n\nFind repositories via various criteria. This method returns up to 100 results per page.\nThe query can contain any combination of search keywords and qualifiers to narrow down the results.\n\nWhen no sort is specified, results are sorted by best match.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query string. Can contain any combination of search keywords and qualifiers.\nFor example: `q=tetris+language:assembly+fork:true+stars:>=100`.\nSupported qualifiers:\n- `in:name,description`\n- `size:>=N`, `size:N..M`\n- `forks:N`, `stars:N`, `watchers:N` (with ranges)\n- `user:USERNAME`, `org:USERNAME`\n- `language:LANGUAGE`\n- `created:DATE`, `pushed:DATE`, `updated:DATE` (with ranges)\n- `is:public`, `is:private`, `is:archived`, `is:template`\n- `fork:true`, `fork:only`"
            },
            "sort": {
              "type": "string",
              "description": "The field to sort by. Can be `stars`, `forks`, `updated`. Defaults to `None`."
            },
            "order": {
              "type": "string",
              "description": "The direction to sort. Can be `asc` or `desc`. Defaults to `desc`."
            },
            "page": {
              "type": "integer",
              "description": "Page number of the results to fetch. Defaults to 1."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page (max 100). Defaults to 30."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "search_users": {
        "name": "search_users",
        "description": "Search for GitHub users.\n\nFind users via various criteria. This method returns up to 100 results per page.\nThe query can contain any combination of search keywords and qualifiers to narrow down the results.\n\nWhen no sort is specified, results are sorted by best match.",
        "parameters": {
          "type": "object",
          "properties": {
            "q": {
              "type": "string",
              "description": "The search query string. Can contain any combination of search keywords and qualifiers.\nFor example: `q=tom+repos:>42+followers:>1000`.\nSupported qualifiers:\n- `in:login,name,email`: Restricts search to specified fields.\n- `repos:n`: Filters by repository count. Can use `>`, `<`, `>=`, `<=`, and `..` ranges.\n- `followers:n`: Filters by follower count. Can use `>`, `<`, `>=`, `<=`, and `..` ranges.\n- `created:YYYY-MM-DD`: Filters by creation date. Can use `>`, `<`, `>=`, `<=`, and `..` ranges.\n- `location:LOCATION`: Filters by location in the user's profile.\n- `type:user|org`: Restricts search to users or organizations.\n- `language:LANGUAGE`: Filters by the predominant language in the user's repositories."
            },
            "sort": {
              "type": "string",
              "description": "The field to sort the search results by. Can be one of 'followers', 'repositories', 'joined'.\nDefaults to 'None' (best match)."
            },
            "order": {
              "type": "string",
              "description": "The order of sorting ('asc' or 'desc'). Defaults to 'desc'."
            },
            "page": {
              "type": "integer",
              "description": "The page number for paginated results. Defaults to 1."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results to return per page (max 100). Defaults to 30."
            }
          },
          "required": [
            "q"
          ]
        }
      },
      "search_issues_and_pull_requests": {
        "name": "search_issues_and_pull_requests",
        "description": "Search for issues and pull requests.\n\nFinds issues and pull requests by searching against a query string.\nThe query can contain any combination of search keywords and qualifiers.\n\nSupported qualifiers:\n- `is:issue` or `is:pr`: Filters for either issues or pull requests.\n- `repo:owner/repository`: Restricts the search to a specific repository.\n- `author:username`: Finds items created by a specific user.\n- `assignee:username`: Finds items assigned to a specific user.\n- `label:\"label name\"`: Filters by a specific label. Use quotes for labels with spaces.\n- `state:open` or `state:closed`: Filters by the state.\n- `in:title,body`: Searches for keywords in the title, body, or both.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query string, including any qualifiers."
            },
            "sort": {
              "type": "string",
              "description": "The field to sort by. Can be 'created', 'updated', or 'comments'.\nDefaults to `None` (best-match)."
            },
            "order": {
              "type": "string",
              "description": "The direction to sort. Can be 'asc' or 'desc'. Defaults to 'desc'."
            },
            "page": {
              "type": "integer",
              "description": "Page number of the results to fetch. Defaults to 1."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page (max 100). Defaults to 30."
            }
          },
          "required": [
            "query"
          ]
        }
      }
    },
    "figma": {
      "get_figma_data": {
        "name": "get_figma_data",
        "description": "Retrieves data for a Figma file, optionally scoped to a specific node.\n\nThis function retrieves data for a Figma file. If a `node_id` is provided,\ndata retrieval focuses on that specific node; otherwise, data for all\ntop-level nodes (e.g., canvases/pages) in the file is returned. The function\nfetches metadata about the file, detailed information about the relevant nodes\n(including their properties and any child nodes in a recursive structure),\nand global styles defined within the file.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_key": {
              "type": "string",
              "description": "The unique identifier of the Figma file."
            },
            "node_id": {
              "type": "string",
              "description": "The unique identifier of a specific node within\nthe file. If provided, the 'nodes' field in the response will be\nfocused on this node. If omitted, data for all top-level nodes\n(e.g., canvases/pages) in the file is returned."
            }
          },
          "required": [
            "file_key"
          ]
        }
      },
      "download_figma_images": {
        "name": "download_figma_images",
        "description": "Downloads images for specified nodes from a Figma file to a local path.\n\nThis version simulates the download by copying files from a local './files/'\ndirectory to the `local_path` destination. It assumes source files in './files/'\nare named based on their 'node_id' (e.g., '{node_id}.png'). The 'file_name'\nparameter in the input 'nodes' specifies the desired name for the output file.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_key": {
              "type": "string",
              "description": "The unique identifier of the Figma file (used for context)."
            },
            "nodes": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "node_id": {
                    "type": "string",
                    "description": "The unique identifier of the node. The corresponding\n               source image in './files/' is assumed to be named\n               based on this ID (e.g., '{node_id}.png')."
                  },
                  "file_name": {
                    "type": "string",
                    "description": "The desired file name for the downloaded image\n                 to be saved in `local_path` (e.g., 'image.png')."
                  }
                },
                "required": [
                  "file_name",
                  "node_id"
                ]
              },
              "description": "A list of nodes to \"download\" as images.\nEach item must be a dictionary with:"
            },
            "local_path": {
              "type": "string",
              "description": "The local directory path where the images should be saved."
            }
          },
          "required": [
            "file_key",
            "local_path",
            "nodes"
          ]
        }
      },
      "move_node": {
        "name": "move_node",
        "description": "Move a node to a new position in Figma.\n\nThis function moves a node, identified by node_id, to a new position\nin Figma defined by the x and y coordinates. Upon success, it\nreturns a status message.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier of the node to be moved."
            },
            "x": {
              "type": "number",
              "description": "The new x-coordinate for the node's position."
            },
            "y": {
              "type": "number",
              "description": "The new y-coordinate for the node's position."
            }
          },
          "required": [
            "node_id",
            "x",
            "y"
          ]
        }
      },
      "clone_node": {
        "name": "clone_node",
        "description": "Clone an existing node (represented as a dict) in Figma.\n\nThis function clones an existing node. It takes the `node_id`\nof the node to be cloned and optionally new `x` and `y` coordinates\nfor the clone's position. It returns basic information about the newly\ncreated cloned node. All node and document structures are assumed to be dictionaries.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The identifier of the node to be cloned."
            },
            "x": {
              "type": "number",
              "description": "The optional x-coordinate for the cloned node's position."
            },
            "y": {
              "type": "number",
              "description": "The optional y-coordinate for the cloned node's position."
            }
          },
          "required": [
            "node_id"
          ]
        }
      },
      "resize_node": {
        "name": "resize_node",
        "description": "Resize a node in Figma.\n\nThis function resizes a specified node in Figma to a target width and height.\nThe actual dimensions of the node after the resize operation, as detailed\nin the returned dictionary's `final_width` and `final_height` fields, may\ndiffer from the requested `width` and `height`. This potential discrepancy\nis due to Figma's layout engine constraints, which can include factors\nlike minimum/maximum dimensions, aspect ratio locks, or constraints\nimposed by parent elements.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier of the Figma node to be resized."
            },
            "width": {
              "type": "number",
              "description": "The target new width for the node in pixels. Must be a non-negative value."
            },
            "height": {
              "type": "number",
              "description": "The target new height for the node in pixels. Must be a non-negative value."
            }
          },
          "required": [
            "height",
            "node_id",
            "width"
          ]
        }
      },
      "delete_node": {
        "name": "delete_node",
        "description": "Delete a node from Figma.\n\nDeletes a node from Figma using its unique identifier. This function\ntakes the unique identifier of the Figma node to be deleted and returns\nan operation status message indicating successful deletion of the node.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier of the Figma node to be deleted."
            }
          },
          "required": [
            "node_id"
          ]
        }
      },
      "get_styles": {
        "name": "get_styles",
        "description": "Get all styles from the current Figma document.\n\nThis function retrieves all styles defined in the current Figma document.\nEach style is represented as a dictionary containing its properties.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_rectangle": {
        "name": "create_rectangle",
        "description": "Create a new rectangle in Figma.\n\nCreates a new rectangle in Figma. The position is defined by the x and y\ncoordinates of its top-left corner on the canvas. The dimensions are\nspecified by its width and height, which must be positive values.\nAn optional name can be assigned to the new rectangle layer. The rectangle\ncan be parented to an existing node using `parent_id`; if not provided,\nit is added to the current page.",
        "parameters": {
          "type": "object",
          "properties": {
            "x": {
              "type": "number",
              "description": "The x-coordinate of the top-left corner of the rectangle on the canvas."
            },
            "y": {
              "type": "number",
              "description": "The y-coordinate of the top-left corner of the rectangle on the canvas."
            },
            "width": {
              "type": "number",
              "description": "The width of the rectangle. Must be a positive value."
            },
            "height": {
              "type": "number",
              "description": "The height of the rectangle. Must be a positive value."
            },
            "name": {
              "type": "string",
              "description": "An optional name for the new rectangle layer."
            },
            "parent_id": {
              "type": "string",
              "description": "The optional ID of an existing node to parent the\nnew rectangle to. If not provided, the rectangle is added to the current page."
            }
          },
          "required": [
            "height",
            "width",
            "x",
            "y"
          ]
        }
      },
      "set_fill_color": {
        "name": "set_fill_color",
        "description": "Set the fill color of a node in Figma can be TextNode or FrameNode.\n\nThis function sets the fill color of a specified node in Figma. The node\ncan be either a TextNode or a FrameNode. The color is specified using\nred (r), green (g), blue (b), and optionally alpha (a) components.\nEach of these color components must have a value between 0.0 and 1.0,\ninclusive. If the alpha (a) component is omitted or provided as null\n(None in Python), it defaults to 1.0, representing full opacity.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier for the Figma node whose fill\ncolor is to be set. This can be a TextNode or FrameNode."
            },
            "r": {
              "type": "number",
              "description": "The red component of the RGBA color. Value must be\nbetween 0.0 and 1.0 inclusive."
            },
            "g": {
              "type": "number",
              "description": "The green component of the RGBA color. Value must be\nbetween 0.0 and 1.0 inclusive."
            },
            "b": {
              "type": "number",
              "description": "The blue component of the RGBA color. Value must be\nbetween 0.0 and 1.0 inclusive."
            },
            "a": {
              "type": "number",
              "description": "The alpha (opacity) component of the RGBA color.\nValue must be between 0.0 and 1.0 inclusive. If omitted or\nnull, it defaults to 1.0 (fully opaque)."
            }
          },
          "required": [
            "b",
            "g",
            "node_id",
            "r"
          ]
        }
      },
      "delete_multiple_nodes": {
        "name": "delete_multiple_nodes",
        "description": "Delete multiple nodes from Figma at once.\n\nThis function deletes multiple nodes from Figma simultaneously. Based on a\nprovided list of node identifiers, it attempts to delete each corresponding\nnode. The function then returns a detailed status of these operations,\nspecifying which nodes were successfully deleted and, for those that were\nnot, the reasons for the failure.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of unique identifiers for the nodes to be deleted from Figma."
            }
          },
          "required": [
            "node_ids"
          ]
        }
      },
      "set_text_content": {
        "name": "set_text_content",
        "description": "Set the text content of an existing text node in Figma.\n\nThis function sets the text content of an existing text node in Figma. It uses the `node_id` to identify the specific Figma node and applies the new `text` as its content.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier of the Figma node to modify."
            },
            "text": {
              "type": "string",
              "description": "The new text content to set for the node."
            }
          }
        }
      },
      "set_stroke_color": {
        "name": "set_stroke_color",
        "description": "Set the stroke color of a node in Figma.\n\nThis function sets the stroke color for a specified node within Figma. It requires the node's unique identifier (`node_id`) and the `red`, `green`, and `blue` components for the RGBA stroke color, where each component value must be between 0.0 and 1.0 inclusive.\nThe `alpha` component, representing opacity, can also be provided (0.0 for fully transparent, 1.0 for fully opaque); if not specified, it defaults to 1.0.\nOptionally, the `stroke_weight` (thickness of the stroke) can be set using a non-negative value. If `stroke_weight` is not provided, the node's existing stroke weight will be maintained, or a default weight might be used if a stroke is being added to a node that does not currently have one.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier of the Figma node whose stroke color is to be set."
            },
            "red": {
              "type": "number",
              "description": "The red component of the RGBA stroke color. Value must be between 0.0 and 1.0 inclusive."
            },
            "green": {
              "type": "number",
              "description": "The green component of the RGBA stroke color. Value must be between 0.0 and 1.0 inclusive."
            },
            "blue": {
              "type": "number",
              "description": "The blue component of the RGBA stroke color. Value must be between 0.0 and 1.0 inclusive."
            },
            "alpha": {
              "type": "number",
              "description": "The alpha (opacity) component of the RGBA stroke color. Value must be between 0.0 (fully transparent) and 1.0 (fully opaque). If not provided, defaults to 1.0 (fully opaque)."
            },
            "stroke_weight": {
              "type": "number",
              "description": "The thickness of the stroke. Must be a non-negative value. If provided, this weight will be applied. If not provided, the node's existing stroke weight will be maintained, or a default weight might be used if adding a stroke to a node that doesn't currently have one."
            }
          },
          "required": [
            "blue",
            "green",
            "node_id",
            "red"
          ]
        }
      },
      "set_layout_mode": {
        "name": "set_layout_mode",
        "description": "Set the layout mode and wrap behavior of a frame in Figma.\n\nThis function sets the layout mode for a specified Figma frame node, identified by `node_id`.\nThe `layout_mode` parameter determines the primary layout direction and accepts 'NONE', 'HORIZONTAL', or 'VERTICAL'.\nThe `layout_wrap` parameter is optional and defines the wrap behavior for auto-layout, accepting 'NO_WRAP' or 'WRAP'.\nThis `layout_wrap` parameter is only applicable if `layout_mode` is 'HORIZONTAL' or 'VERTICAL'.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The unique identifier of the Figma node (frame) whose layout mode is to be set."
            },
            "layout_mode": {
              "type": "string",
              "description": "The layout mode to apply. Must be one of the values from LayoutModeEnum."
            },
            "layout_wrap": {
              "type": "string",
              "description": "The wrap behavior for auto-layout. Must be one of the values\nfrom LayoutWrapEnum if provided. This parameter is optional and only applies if\n`layout_mode` is 'HORIZONTAL' or 'VERTICAL'."
            }
          },
          "required": [
            "layout_mode",
            "node_id"
          ]
        }
      },
      "get_local_components": {
        "name": "get_local_components",
        "description": "Get all local components from the Figma document for current file.\n\nThis function retrieves all local components that are defined within the Figma document for current file.\nIt returns a list where each item is a dictionary representing a local component.\nEach dictionary contains details for the component, including its unique identifier ('id'),\na unique 'key' for API usage or instance creation, its user-defined 'name', an\noptional 'description', an optional 'componentSetId' if the component is part of\na component set (variants), and the 'parentId' indicating the page or frame\nthat contains the main component definition.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "scan_nodes_by_types": {
        "name": "scan_nodes_by_types",
        "description": "Scan for child nodes with specific types in the selected Figma node.\n\nThis function scans for child nodes with specific types within the Figma node\nidentified by `node_id`. It searches through the descendants of the specified\ncontainer node and returns a list of nodes that match the types provided in\nthe `types` list. Each found node is represented as a dictionary containing\nits basic information.",
        "parameters": {
          "type": "object",
          "properties": {
            "node_id": {
              "type": "string",
              "description": "The ID of the Figma node to be scanned for descendant nodes."
            },
            "types": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of node type strings (e.g., 'RECTANGLE', 'TEXT')\nto filter the search. Only nodes of these types will be returned."
            }
          },
          "required": [
            "node_id",
            "types"
          ]
        }
      },
      "get_selection": {
        "name": "get_selection",
        "description": "Get information about the current selection in Figma.\n\nGets information about the current selection in Figma. This function returns\na list of dictionaries, where each dictionary represents a currently\nselected node. Each dictionary provides a summary of the node, including\nits unique identifier ('id'), name ('name'), type ('type'), and the ID\nof its parent node ('parentId').",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_node_info": {
        "name": "get_node_info",
        "description": "Get detailed information about a specific node in Figma.\n\nGets detailed information about a specific node in Figma.",
        "parameters": {
          "type": "object",
          "properties": {
            "nodeId": {
              "type": "string",
              "description": "The unique identifier of the Figma node to retrieve."
            }
          },
          "required": [
            "nodeId"
          ]
        }
      },
      "get_annotations": {
        "name": "get_annotations",
        "description": "Get all annotations in the current document or specific node.\n\nThis function retrieves all annotations. If the `nodeId` parameter is provided,\nit fetches annotations specifically for the node identified by that ID.\nIf `nodeId` is omitted, the function returns annotations from the entire\ncurrent document. If the `includeCategories` parameter is true, and an\nannotation has a 'categoryId', the full category object is included with\nthat annotation's details.",
        "parameters": {
          "type": "object",
          "properties": {
            "nodeId": {
              "type": "string",
              "description": "The ID of a specific node for which to retrieve\nannotations. If omitted, annotations from the entire current document\nare returned."
            },
            "includeCategories": {
              "type": "boolean",
              "description": "If true, the full category object\nwill be included for each annotation that has a 'categoryId'.\nDefaults to false if not provided."
            }
          }
        }
      },
      "set_annotation": {
        "name": "set_annotation",
        "description": "Create or update an annotation.\n\nThis function creates a new annotation or updates an existing one. It associates an\nannotation with a specific `nodeId`. The annotation's content is provided via\n`labelMarkdown`. Optionally, an `annotationId` can be specified for updates,\na `categoryId` for classification, and custom `properties` can be added.\nThe function returns a dictionary containing details of the created or updated\nannotation.",
        "parameters": {
          "type": "object",
          "properties": {
            "nodeId": {
              "type": "string",
              "description": "The ID of the node to which this annotation is attached."
            },
            "labelMarkdown": {
              "type": "string",
              "description": "The content of the annotation, formatted as Markdown."
            },
            "annotationId": {
              "type": "string",
              "description": "The unique identifier of the annotation to update.\nIf `None`, a new annotation will be created. Defaults to `None`."
            },
            "categoryId": {
              "type": "string",
              "description": "The ID of an existing category to assign to this\nannotation. Defaults to `None`."
            },
            "properties": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Property name."
                  },
                  "value": {
                    "type": "object",
                    "description": "Property value."
                  }
                },
                "required": [
                  "name",
                  "value"
                ]
              },
              "description": "A list of custom key-value\nproperties to associate with the annotation. Each dictionary in the list\nshould contain the following keys:"
            }
          },
          "required": [
            "labelMarkdown",
            "nodeId"
          ]
        }
      },
      "create_frame": {
        "name": "create_frame",
        "description": "Create a new frame in Figma.\n\nThis function creates a new frame in Figma. It allows specifying the frame's\nposition (x, y), dimensions (width, height), name, parent node, fill color,\nstroke properties, and various auto-layout configurations.",
        "parameters": {
          "type": "object",
          "properties": {
            "x": {
              "type": "number",
              "description": "The x-coordinate of the frame's top-left corner on the canvas."
            },
            "y": {
              "type": "number",
              "description": "The y-coordinate of the frame's top-left corner on the canvas."
            },
            "width": {
              "type": "number",
              "description": "The width of the frame."
            },
            "height": {
              "type": "number",
              "description": "The height of the frame."
            },
            "name": {
              "type": "string",
              "description": "Optional name for the new frame."
            },
            "parent_id": {
              "type": "string",
              "description": "Optional ID of the parent node (e.g., another\nframe, page, component) to create the frame within. If not provided,\nthe frame is created on the current page."
            },
            "fill_color": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of paint, e.g., 'SOLID'."
                },
                "color": {
                  "type": "object",
                  "properties": {
                    "r": {
                      "type": "number",
                      "description": "Red component (0.0 to 1.0)."
                    },
                    "g": {
                      "type": "number",
                      "description": "Green component (0.0 to 1.0)."
                    },
                    "b": {
                      "type": "number",
                      "description": "Blue component (0.0 to 1.0)."
                    },
                    "a": {
                      "type": "number",
                      "description": "Alpha component (0.0 to 1.0)."
                    }
                  },
                  "description": "A dictionary defining the RGBA color.",
                  "required": [
                    "a",
                    "b",
                    "g",
                    "r"
                  ]
                }
              },
              "description": "Optional properties for a single fill.\nThis should be a dictionary conforming to Figma's Paint object structure.\nFor a solid color, an example structure is:\n`{'type': 'SOLID', 'color': {'r': 0.5, 'g': 0.5, 'b': 0.5, 'a': 1.0}}`.\nKnown keys for a solid color fill:",
              "required": [
                "color",
                "type"
              ]
            },
            "stroke_color": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of paint, e.g., 'SOLID'."
                },
                "color": {
                  "type": "object",
                  "properties": {
                    "r": {
                      "type": "number",
                      "description": "Red component (0.0 to 1.0)."
                    },
                    "g": {
                      "type": "number",
                      "description": "Green component (0.0 to 1.0)."
                    },
                    "b": {
                      "type": "number",
                      "description": "Blue component (0.0 to 1.0)."
                    },
                    "a": {
                      "type": "number",
                      "description": "Alpha component (0.0 to 1.0)."
                    }
                  },
                  "description": "A dictionary defining the RGBA color.",
                  "required": [
                    "a",
                    "b",
                    "g",
                    "r"
                  ]
                }
              },
              "description": "Optional properties for a single stroke.\nThis should be a dictionary conforming to Figma's Paint object structure\nfor the stroke color and type. For a solid color, an example structure is:\n`{'type': 'SOLID', 'color': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'a': 1.0}}`.\nKnown keys for a solid color stroke:",
              "required": [
                "color",
                "type"
              ]
            },
            "stroke_weight": {
              "type": "number",
              "description": "Optional stroke weight (thickness) for the\nframe. Applied if `stroke_color` is also provided."
            },
            "layout_mode": {
              "type": "string",
              "description": "Enables auto-layout and sets its direction.\nValid values: \"NONE\", \"HORIZONTAL\", \"VERTICAL\"."
            },
            "layout_wrap": {
              "type": "string",
              "description": "Specifies wrap behavior for auto-layout when\n`layout_mode` is HORIZONTAL or VERTICAL. Valid values: \"NO_WRAP\", \"WRAP\".\nRequires `layout_mode` to be set."
            },
            "padding_top": {
              "type": "number",
              "description": "Top padding for an auto-layout frame.\nRequires `layout_mode` to be set to HORIZONTAL or VERTICAL."
            },
            "padding_right": {
              "type": "number",
              "description": "Right padding for an auto-layout frame.\nRequires `layout_mode` to be set to HORIZONTAL or VERTICAL."
            },
            "padding_bottom": {
              "type": "number",
              "description": "Bottom padding for an auto-layout frame.\nRequires `layout_mode` to be set to HORIZONTAL or VERTICAL."
            },
            "padding_left": {
              "type": "number",
              "description": "Left padding for an auto-layout frame.\nRequires `layout_mode` to be set to HORIZONTAL or VERTICAL."
            },
            "primary_axis_align_items": {
              "type": "string",
              "description": "Alignment of items along the\nprimary axis (horizontal for `layout_mode` HORIZONTAL, vertical for\nVERTICAL). Valid values: \"MIN\", \"MAX\", \"CENTER\", \"SPACE_BETWEEN\".\nRequires `layout_mode` to be set to HORIZONTAL or VERTICAL."
            },
            "counter_axis_align_items": {
              "type": "string",
              "description": "Alignment of items along the\ncounter axis (vertical for `layout_mode` HORIZONTAL, horizontal for\nVERTICAL). Valid values: \"MIN\", \"MAX\", \"CENTER\", \"BASELINE\" (for text).\nRequires `layout_mode` to be set to HORIZONTAL or VERTICAL."
            },
            "layout_sizing_horizontal": {
              "type": "string",
              "description": "Optional horizontal resizing\nbehavior for the frame when it is a child of an auto-layout parent.\nValid values: \"FIXED\" (default), \"HUG\", \"FILL\"."
            },
            "layout_sizing_vertical": {
              "type": "string",
              "description": "Optional vertical resizing\nbehavior for the frame when it is a child of an auto-layout parent.\nValid values: \"FIXED\" (default), \"HUG\", \"FILL\"."
            },
            "item_spacing": {
              "type": "number",
              "description": "Optional spacing between items in an\nauto-layout frame. Requires `layout_mode` to be HORIZONTAL or VERTICAL."
            }
          },
          "required": [
            "height",
            "width",
            "x",
            "y"
          ]
        }
      },
      "set_current_file": {
        "name": "set_current_file",
        "description": "Finds a file by its key in the DB and sets it as the current_file.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_key": {
              "type": "string",
              "description": "The fileKey of the file to set as the current file.\nMust be a non-empty string."
            }
          },
          "required": [
            "file_key"
          ]
        }
      },
      "create_text": {
        "name": "create_text",
        "description": "Create a new text element in Figma.\n\nThis function creates a new text element on the Figma canvas. It positions\nthe text element using the provided `x` and `y` coordinates and sets its\ncontent using the `text` string. Optional styling attributes such as\n`font_size`, `font_weight`, and `font_color` (as a Figma Paint object)\ncan be applied. The created text layer can be assigned an optional `name`\nand can be parented under an existing container node specified by `parent_id`.\nIf `parent_id` is not provided, the text node is added to the current page.\nThe function returns a dictionary containing information about the newly\ncreated text node.",
        "parameters": {
          "type": "object",
          "properties": {
            "x": {
              "type": "number",
              "description": "The x-coordinate for the text node's position on the canvas."
            },
            "y": {
              "type": "number",
              "description": "The y-coordinate for the text node's position on the canvas."
            },
            "text": {
              "type": "string",
              "description": "The text content to display. Cannot be empty."
            },
            "font_size": {
              "type": "number",
              "description": "The font size of the text in pixels. Must be a\npositive value if provided. Defaults to Figma's standard size if\nnot provided."
            },
            "font_weight": {
              "type": "number",
              "description": "The font weight of the text (e.g., 400.0 for\nregular, 700.0 for bold). Defaults to Figma's standard weight if\nnot provided. Must be a positive value if provided."
            },
            "font_color": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of paint (e.g., 'SOLID')."
                },
                "color": {
                  "type": "object",
                  "properties": {
                    "r": {
                      "type": "number",
                      "description": "The red color component (0.0-1.0 range)."
                    },
                    "g": {
                      "type": "number",
                      "description": "The green color component (0.0-1.0 range)."
                    },
                    "b": {
                      "type": "number",
                      "description": "The blue color component (0.0-1.0 range)."
                    },
                    "a": {
                      "type": "number",
                      "description": "The alpha (opacity) component (0.0-1.0 range)."
                    }
                  },
                  "description": "A dictionary defining the color's RGBA components.",
                  "required": [
                    "a",
                    "b",
                    "g",
                    "r"
                  ]
                }
              },
              "description": "The color of the text, specified as a\nFigma Paint object. Example: `{'type': 'SOLID', 'color': {'r': 0, 'g': 0, 'b': 0, 'a': 1}}`.\nDefaults to Figma's standard color if not provided.\nExpected keys:",
              "required": [
                "color",
                "type"
              ]
            },
            "name": {
              "type": "string",
              "description": "An optional name for the created text layer in Figma.\nIf None, the `text` content will be used as the name."
            },
            "parent_id": {
              "type": "string",
              "description": "The ID of an existing container node (valid container type accepts:\nFRAME, GROUP, COMPONENT, INSTANCE, CANVAS) to parent the new text node under. If not provided,\nthe text node will be added to the current page."
            }
          },
          "required": [
            "text",
            "x",
            "y"
          ]
        }
      }
    },
    "github_actions": {
      "list_workflows": {
        "name": "list_workflows",
        "description": "List workflows in a GitHub repository.\n\nThis function lists workflows in a GitHub repository. It allows for pagination\nto retrieve workflows in chunks.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "page": {
              "type": "integer",
              "description": "Page number of the results to fetch. Defaults to 1."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page (max 100). Defaults to 30."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "get_workflow": {
        "name": "get_workflow",
        "description": "Get details of a specific workflow.\n\nGets details of a specific workflow.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository."
            },
            "workflow_id": {
              "type": "string",
              "description": "The identifier of the workflow.\nThis can be the workflow's integer ID (as a string)\nor its filename (e.g., \"main.yml\" or \".github/workflows/main.yml\")."
            }
          },
          "required": [
            "owner",
            "repo",
            "workflow_id"
          ]
        }
      },
      "get_workflow_usage": {
        "name": "get_workflow_usage",
        "description": "Get usage statistics of a workflow.\n\nThis function retrieves the billable usage statistics for a specific workflow,\nbroken down by operating system.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "workflow_id": {
              "type": "integer",
              "description": "The ID of the workflow (as an positive integer) or the workflow's filename\n(as a string, e.g., 'ci.yml')."
            }
          },
          "required": [
            "owner",
            "repo",
            "workflow_id"
          ]
        }
      },
      "list_workflow_runs": {
        "name": "list_workflow_runs",
        "description": "List all workflow runs for a repository or a specific workflow.\n\nThis function lists workflow runs for a given repository. It supports\nfiltering by various attributes of the workflow run such as the triggering actor,\nbranch, event, status, creation date, and associated workflow ID.\nIt also allows for excluding runs triggered by pull requests and filtering by\na specific check suite ID. Pagination is supported via page and per_page\nparameters. Datetime fields in the response are ISO 8601 formatted strings\nwith a 'Z' suffix indicating UTC.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "workflow_id": {
              "type": "integer",
              "description": "Filters runs by a specific workflow ID or workflow file name."
            },
            "actor": {
              "type": "string",
              "description": "Filters runs by the login of the actor who initiated them."
            },
            "branch": {
              "type": "string",
              "description": "Filters runs by the branch they ran on."
            },
            "event": {
              "type": "string",
              "description": "Filters runs by the event that triggered them."
            },
            "status": {
              "type": "string",
              "description": "Filters runs by their current status. Valid values include:\n'queued', 'in_progress', 'completed', 'action_required',\n'cancelled', 'failure', 'neutral', 'skipped', 'stale',\n'success', 'timed_out', 'waiting', 'requested', 'pending'."
            },
            "created": {
              "type": "string",
              "description": "Filters runs by their creation date or date range.\nSupported formats:\n- 'YYYY-MM-DD': For runs created on this specific day.\n- '>=YYYY-MM-DD': For runs created on or after this date.\n- '<=YYYY-MM-DD': For runs created on or before this date.\n- 'YYYY-MM-DD..YYYY-MM-DD': For runs created within this inclusive range."
            },
            "exclude_pull_requests": {
              "type": "boolean",
              "description": "If true, runs triggered by 'pull_request' events are excluded. Defaults to false."
            },
            "check_suite_id": {
              "type": "integer",
              "description": "Filters runs by the ID of an associated check suite."
            },
            "page": {
              "type": "integer",
              "description": "Page number for pagination, starting at 1. Defaults to 1."
            },
            "per_page": {
              "type": "integer",
              "description": "Number of results per page for pagination. Defaults to 30, maximum is 100."
            }
          },
          "required": [
            "owner",
            "repo"
          ]
        }
      },
      "get_workflow_run": {
        "name": "get_workflow_run",
        "description": "Get details of a specific workflow run.\n\nThis function retrieves detailed information for a specific workflow run.\nIt takes the repository owner's name, the repository name, and the unique\nidentifier of the workflow run as input. The function returns a dictionary\ncontaining comprehensive details about the workflow run, including its\nstatus, timing, associated commit, involved actors, and the repository\nit belongs to. Datetime fields within the response are ISO 8601 formatted strings\nwith a 'Z' suffix indicating UTC.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "run_id": {
              "type": "integer",
              "description": "The unique identifier of the workflow run."
            }
          },
          "required": [
            "owner",
            "repo",
            "run_id"
          ]
        }
      },
      "get_workflow_run_jobs": {
        "name": "get_workflow_run_jobs",
        "description": "Get jobs for a specific workflow run.\n\nGets jobs for a specific workflow run, identified by owner, repository, and run ID.\nThe function allows filtering jobs by their status and paginating through the results.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "run_id": {
              "type": "integer",
              "description": "The unique identifier of the workflow run."
            },
            "filter": {
              "type": "string",
              "description": "Filters jobs by their status. Valid values: 'latest' (default)\nreturns the latest job for each job name, 'all' returns all jobs for the run.\nDefaults to 'latest'."
            },
            "page": {
              "type": "integer",
              "description": "Page number of the results to fetch. Starts at 1. Defaults to 1."
            },
            "per_page": {
              "type": "integer",
              "description": "The number of results per page (maximum 100). Defaults to 30."
            }
          },
          "required": [
            "owner",
            "repo",
            "run_id"
          ]
        }
      },
      "trigger_workflow": {
        "name": "trigger_workflow",
        "description": "Triggers a workflow dispatch event for a given workflow.\n\nThis function simulates the triggering of a workflow, corresponding\nto a 'workflow_dispatch' event. It creates a new workflow run record\nin the database and returns an acknowledgement.\n\nThe actor initiating this workflow is hardcoded because, in this context,\nauthentication details (and thus the specific user) are not available.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension."
            },
            "workflow_id": {
              "type": "string",
              "description": "The ID of the workflow or the workflow file name\n(e.g., 'main.yaml', 'ci.yml')."
            },
            "ref": {
              "type": "string",
              "description": "The Git reference for the workflow. This can be a branch name\n(e.g., 'main'), a tag name (e.g., 'v1.0.0'), or a commit SHA."
            },
            "inputs": {
              "type": "object",
              "properties": {},
              "description": "Input parameters to pass to the workflow. These correspond\nto the 'inputs' defined in the workflow's 'on.workflow_dispatch'\ntrigger. If the workflow does not expect inputs, this can be\nomitted or an empty dictionary."
            }
          },
          "required": [
            "owner",
            "ref",
            "repo",
            "workflow_id"
          ]
        }
      },
      "cancel_workflow_run": {
        "name": "cancel_workflow_run",
        "description": "Cancel a workflow run.\n\nhis function cancels a workflow run. It uses the `owner` of the repository,\nthe `repo` name, and the `run_id` to identify the specific workflow run\nto be cancelled.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. This is typically the username or organization name. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository. The name is not case sensitive."
            },
            "run_id": {
              "type": "integer",
              "description": "The unique identifier of the workflow run to be cancelled."
            }
          },
          "required": [
            "owner",
            "repo",
            "run_id"
          ]
        }
      },
      "rerun_workflow": {
        "name": "rerun_workflow",
        "description": "Re-run a workflow run.\n\nThis API endpoint allows re-running a previously executed workflow run.\nIt creates a new workflow run attempt based on the original run's configuration.\nThe new run will start in a 'queued' state.",
        "parameters": {
          "type": "object",
          "properties": {
            "owner": {
              "type": "string",
              "description": "The account owner of the repository. The name is not case sensitive."
            },
            "repo": {
              "type": "string",
              "description": "The name of the repository without the .git extension. The name is not case sensitive."
            },
            "run_id": {
              "type": "integer",
              "description": "The unique identifier of the workflow run to re-run."
            }
          },
          "required": [
            "owner",
            "repo",
            "run_id"
          ]
        }
      }
    },
    "zendesk": {
      "create_organization": {
        "name": "create_organization",
        "description": "Creates a new organization.\n\nAdds a new organization to the database if the provided ID does not already exist.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_id": {
              "type": "integer",
              "description": "The unique identifier for the organization."
            },
            "name": {
              "type": "string",
              "description": "The name of the organization."
            },
            "industry": {
              "type": "string",
              "description": "The industry of the organization. Defaults to None."
            },
            "location": {
              "type": "string",
              "description": "The location of the organization. Defaults to None."
            },
            "domain_names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of domain names associated with the organization.\nDefaults to None."
            }
          },
          "required": [
            "name",
            "organization_id"
          ]
        }
      },
      "list_organizations": {
        "name": "list_organizations",
        "description": "Lists all organizations in the database.\n\nReturns a list of all organizations in the database.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_organization_details": {
        "name": "get_organization_details",
        "description": "Shows details of a specific organization.\n\nReturns the details of an organization based on its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_id": {
              "type": "integer",
              "description": "The unique identifier for the organization."
            }
          },
          "required": [
            "organization_id"
          ]
        }
      },
      "update_organization": {
        "name": "update_organization",
        "description": "Updates an existing organization.\n\nUpdates the details of an organization based on its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_id": {
              "type": "integer",
              "description": "The unique identifier for the organization."
            },
            "name": {
              "type": "string",
              "description": "The new name of the organization. Defaults to None."
            },
            "domain_names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of domain names associated with the organization. Defaults to None."
            }
          },
          "required": [
            "organization_id"
          ]
        }
      },
      "delete_organization": {
        "name": "delete_organization",
        "description": "Deletes an existing organization.\n\nDeletes an organization based on its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_id": {
              "type": "integer",
              "description": "The unique identifier for the organization."
            }
          },
          "required": [
            "organization_id"
          ]
        }
      },
      "create_ticket": {
        "name": "create_ticket",
        "description": "Creates a new ticket.\n\nThis function creates a new ticket. The request body must contain a 'ticket'\nobject. Within the 'ticket' object, 'requester_id' (or 'requester' if\ncreating a new user) and a 'comment' object (which must include a 'body')\nare typically required fields for successful ticket creation.",
        "parameters": {
          "type": "object",
          "properties": {
            "ticket": {
              "type": "object",
              "properties": {
                "assignee_email": {
                  "type": "object",
                  "description": "Write only. The email address of the\n    agent to assign the ticket to."
                },
                "assignee_id": {
                  "type": "object",
                  "description": "The agent currently assigned to the ticket."
                },
                "attribute_value_ids": {
                  "type": "object",
                  "description": "Write only. An array of the\n    IDs of attribute values to be associated with the ticket."
                },
                "brand_id": {
                  "type": "object",
                  "description": "The id of the brand this ticket is\n    associated with."
                },
                "collaborator_ids": {
                  "type": "object",
                  "description": "The ids of users currently\n    CC'ed on the ticket."
                },
                "collaborators": {
                  "type": "object",
                  "description": "POST requests only.\n    Users to add as cc's when creating a ticket. Each item is a\n    dictionary with the following keys:",
                  "properties": {
                    "user_id": {
                      "type": "object",
                      "description": "ID of an existing user."
                    },
                    "name": {
                      "type": "object",
                      "description": "Name of a new or existing user."
                    },
                    "email": {
                      "type": "object",
                      "description": "Email of a new or existing user."
                    }
                  }
                },
                "comment": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "The plain text body of the comment. Mandatory for new\n        tickets."
                    },
                    "html_body": {
                      "type": "object",
                      "description": "The HTML body of the comment. If both\n        body and html_body are present, html_body is ignored."
                    },
                    "public": {
                      "type": "object",
                      "description": "Whether the comment is public (true) or\n        internal (false). Defaults to true."
                    },
                    "uploads": {
                      "type": "object",
                      "description": "An array of attachment tokens\n        received from the Uploads API."
                    },
                    "author_id": {
                      "type": "object",
                      "description": "ID of the agent or end user who is the\n        author of the comment."
                    }
                  },
                  "description": "Write only. An object that adds a comment\n    to the ticket. This dictionary must contain a 'body' key.",
                  "required": [
                    "body"
                  ]
                },
                "custom_fields": {
                  "type": "object",
                  "description": "Custom fields for the\n    ticket. Each object in the list must have an 'id' and 'value'.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The ID of the custom field."
                    },
                    "value": {
                      "type": "object",
                      "description": "The value for the custom field."
                    }
                  },
                  "required": [
                    "id",
                    "value"
                  ]
                },
                "custom_status_id": {
                  "type": "object",
                  "description": "The custom ticket status id of the\n    ticket."
                },
                "due_at": {
                  "type": "object",
                  "description": "If this is a ticket of type 'task' it has a\n    due date. Due date format uses ISO 8601 format."
                },
                "email_cc_ids": {
                  "type": "object",
                  "description": "The ids of agents or end users\n    currently CC'ed on the ticket. Ignored when CCs and followers\n    is not enabled."
                },
                "email_ccs": {
                  "type": "object",
                  "description": "Write only. An array of\n    objects that represents agent or end users email CCs to add or\n    delete from the ticket. Each item is a dictionary with keys:",
                  "properties": {
                    "user_id": {
                      "type": "object",
                      "description": "ID of the user."
                    },
                    "user_email": {
                      "type": "object",
                      "description": "Email of the user."
                    },
                    "action": {
                      "type": "object",
                      "description": "Action to perform. Possible values: \"put\",\n        \"delete\"."
                    }
                  }
                },
                "external_id": {
                  "type": "object",
                  "description": "An id you can use to link Zendesk Support\n    tickets to local records."
                },
                "follower_ids": {
                  "type": "object",
                  "description": "The ids of agents currently\n    following the ticket. Ignored when CCs and followers is not\n    enabled."
                },
                "followers": {
                  "type": "object",
                  "description": "Write only. An array of\n    objects that represents agent followers to add or delete from\n    the ticket. Each item is a dictionary with keys:",
                  "properties": {
                    "user_id": {
                      "type": "object",
                      "description": "ID of the user."
                    },
                    "user_email": {
                      "type": "object",
                      "description": "Email of the user."
                    },
                    "action": {
                      "type": "object",
                      "description": "Action to perform. Possible values: \"put\",\n        \"delete\"."
                    }
                  }
                },
                "group_id": {
                  "type": "object",
                  "description": "The group this ticket is assigned to."
                },
                "macro_id": {
                  "type": "object",
                  "description": "Write only. A macro ID to be recorded in\n    the ticket audit."
                },
                "macro_ids": {
                  "type": "object",
                  "description": "POST requests only. List of macro IDs\n    to be recorded in the ticket audit."
                },
                "metadata": {
                  "type": "object",
                  "description": "Write only. Metadata for the audit.",
                  "properties": {
                    "system": {
                      "type": "object",
                      "description": "System-related metadata."
                    },
                    "custom": {
                      "type": "object",
                      "description": "Custom metadata."
                    }
                  }
                },
                "organization_id": {
                  "type": "object",
                  "description": "The organization of the requester."
                },
                "priority": {
                  "type": "object",
                  "description": "The urgency with which the ticket should be\n    addressed. Possible values: \"urgent\", \"high\", \"normal\", \"low\"."
                },
                "problem_id": {
                  "type": "object",
                  "description": "For tickets of type 'incident', the ID of\n    the problem the incident is linked to."
                },
                "raw_subject": {
                  "type": "object",
                  "description": "The dynamic content placeholder, if\n    present, or the 'subject' value, if not."
                },
                "recipient": {
                  "type": "object",
                  "description": "The original recipient e-mail address of\n    the ticket."
                },
                "requester": {
                  "type": "object",
                  "description": "POST requests only. Used to\n    create a new requester with the ticket.",
                  "properties": {
                    "name": {
                      "type": "object",
                      "description": "Name of the new requester."
                    },
                    "email": {
                      "type": "object",
                      "description": "Email of the new requester."
                    },
                    "locale_id": {
                      "type": "object",
                      "description": "Locale ID for the new requester."
                    }
                  }
                },
                "requester_id": {
                  "type": "integer",
                  "description": "The user who requested this ticket. Mandatory if\n    'requester' object is not used to create a new user."
                },
                "safe_update": {
                  "type": "object",
                  "description": "Write only. Optional boolean for\n    protecting against ticket update collisions."
                },
                "sharing_agreement_ids": {
                  "type": "object",
                  "description": "The ids of the sharing\n    agreements used for this ticket."
                },
                "status": {
                  "type": "object",
                  "description": "The state of the ticket. Possible values: \"new\",\n    \"open\", \"pending\", \"hold\", \"solved\", \"closed\"."
                },
                "subject": {
                  "type": "object",
                  "description": "The value of the subject field for this ticket."
                },
                "submitter_id": {
                  "type": "object",
                  "description": "The user who submitted the ticket."
                },
                "tags": {
                  "type": "object",
                  "description": "The array of tags applied to this ticket."
                },
                "ticket_form_id": {
                  "type": "object",
                  "description": "Enterprise only. The id of the ticket\n    form to render for the ticket."
                },
                "type": {
                  "type": "object",
                  "description": "The type of this ticket. Possible values:\n    \"problem\", \"incident\", \"question\", \"task\"."
                },
                "updated_stamp": {
                  "type": "object",
                  "description": "Write only. Datetime of last update\n    received from API. Used with safe_update. (ISO 8601 format)."
                },
                "via": {
                  "type": "object",
                  "description": "Describes how the ticket was created.",
                  "properties": {
                    "channel": {
                      "type": "object",
                      "description": "The channel through which the ticket was\n        created."
                    },
                    "source": {
                      "type": "object",
                      "description": "Source details.",
                      "properties": {
                        "rel": {
                          "type": "object",
                          "description": "Relation type."
                        }
                      }
                    }
                  }
                },
                "via_followup_source_id": {
                  "type": "object",
                  "description": "POST requests only. The id of\n    a closed ticket when creating a follow-up ticket."
                },
                "via_id": {
                  "type": "object",
                  "description": "Write only. Internal ID for 'via' object."
                },
                "voice_comment": {
                  "type": "object",
                  "description": "Write only. See Creating\n    voicemail ticket.",
                  "properties": {
                    "recording_url": {
                      "type": "object",
                      "description": "URL of the voice recording."
                    }
                  }
                }
              },
              "description": "The ticket object to create. This dictionary must\ncontain 'requester_id' and 'comment' keys. Its structure is as follows:",
              "required": [
                "comment",
                "requester_id"
              ]
            }
          },
          "required": [
            "ticket"
          ]
        }
      },
      "list_tickets": {
        "name": "list_tickets",
        "description": "Lists all tickets in the database.\n\nReturns a list of all tickets in the database.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_ticket_details": {
        "name": "get_ticket_details",
        "description": "Shows details of a specific ticket.\n\nReturns the details of a ticket based on its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "ticket_id": {
              "type": "integer",
              "description": "The unique identifier for the ticket."
            }
          },
          "required": [
            "ticket_id"
          ]
        }
      },
      "update_ticket": {
        "name": "update_ticket",
        "description": "Updates an existing ticket.\n\nUpdates the details of a ticket based on its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "ticket_id": {
              "type": "integer",
              "description": "The unique identifier for the ticket."
            },
            "subject": {
              "type": "string",
              "description": "The new subject of the ticket. Defaults to None."
            },
            "comment_body": {
              "type": "string",
              "description": "The new body of the comment. Defaults to None."
            },
            "priority": {
              "type": "string",
              "description": "The new priority of the ticket. Defaults to None."
            },
            "ticket_type": {
              "type": "string",
              "description": "The new type of the ticket. Defaults to None."
            },
            "status": {
              "type": "string",
              "description": "The new status of the ticket. Defaults to None."
            }
          },
          "required": [
            "ticket_id"
          ]
        }
      },
      "delete_ticket": {
        "name": "delete_ticket",
        "description": "Deletes an existing ticket.\n\nDeletes a ticket based on its unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "ticket_id": {
              "type": "integer",
              "description": "The unique identifier for the ticket."
            }
          },
          "required": [
            "ticket_id"
          ]
        }
      },
      "create_user": {
        "name": "create_user",
        "description": "Creates a new user.\n\nAdds a new user to the database if the provided ID does not already exist.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "integer",
              "description": "The unique identifier for the user."
            },
            "name": {
              "type": "string",
              "description": "The name of the user."
            },
            "email": {
              "type": "string",
              "description": "The email address of the user."
            },
            "role": {
              "type": "string",
              "description": "The role of the user. Defaults to \"end-user\"."
            }
          },
          "required": [
            "email",
            "name",
            "user_id"
          ]
        }
      },
      "list_users": {
        "name": "list_users",
        "description": "Lists all users in the database.\n\nReturns a list of all users in the database.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_user_details": {
        "name": "get_user_details",
        "description": "Shows details of a specific user.\n\nReturns the details of a user based on their unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "integer",
              "description": "The unique identifier for the user."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "update_user": {
        "name": "update_user",
        "description": "Updates an existing user.\n\nUpdates the details of a user based on their unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "integer",
              "description": "The unique identifier for the user."
            },
            "name": {
              "type": "string",
              "description": "The new name of the user. Defaults to None."
            },
            "email": {
              "type": "string",
              "description": "The new email address of the user. Defaults to None."
            },
            "role": {
              "type": "string",
              "description": "The new role of the user. Defaults to None."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "delete_user": {
        "name": "delete_user",
        "description": "Deletes an existing user.\n\nDeletes a user based on their unique identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "integer",
              "description": "The unique identifier for the user."
            }
          },
          "required": [
            "user_id"
          ]
        }
      }
    },
    "mysql": {
      "mysql_query": {
        "name": "mysql_query",
        "description": "Execute SQL and return a content envelope.",
        "parameters": {
          "type": "object",
          "properties": {
            "sql": {
              "type": "string",
              "description": "Non-empty SQL string."
            }
          },
          "required": [
            "sql"
          ]
        }
      },
      "get_resources_list": {
        "name": "get_resources_list",
        "description": "Enumerate every user database and its tables.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_resource": {
        "name": "get_resource",
        "description": "Return column schema for a table resource.",
        "parameters": {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "description": "Resource URI in the form '<db>/<table>/schema'."
            }
          },
          "required": [
            "uri"
          ]
        }
      }
    },
    "reddit": {
      "create_or_update_subreddit_widget": {
        "name": "create_or_update_subreddit_widget",
        "description": "Creates or updates a subreddit widget.",
        "parameters": {
          "type": "object",
          "properties": {
            "widget_data": {
              "type": "object",
              "properties": {},
              "description": "The widget configuration data. The format varies based on the widget kind:\n- For 'image' widgets:\n    {\n        \"data\": [\n            {\n                \"height\": int,\n                \"linkUrl\": str (optional),\n                \"url\": str,\n                \"width\": int,\n            },\n            ...\n        ],\n        \"kind\": \"image\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'calendar' widgets:\n    {\n        \"configuration\": {\n            \"numEvents\": int (1-50, default: 10),\n            \"showDate\": bool,\n            \"showDescription\": bool,\n            \"showLocation\": bool,\n            \"showTime\": bool,\n            \"showTitle\": bool,\n        },\n        \"googleCalendarId\": str (email),\n        \"kind\": \"calendar\",\n        \"requiresSync\": bool,\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'textarea' widgets:\n    {\n        \"kind\": \"textarea\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n        \"text\": str (markdown),\n    }\n- For 'menu' widgets:\n    {\n        \"data\": [\n            {\n                \"text\": str (max 20 chars),\n                \"url\": str,\n            }\n            OR\n            {\n                \"children\": [\n                    {\n                        \"text\": str (max 20 chars),\n                        \"url\": str,\n                    },\n                    ...\n                ],\n                \"text\": str (max 20 chars),\n            },\n            ...\n        ],\n        \"kind\": \"menu\",\n        \"showWiki\": bool,\n    }\n- For 'button' widgets:\n    {\n        \"buttons\": [\n            {\n                \"color\": str (6-digit hex),\n                \"fillColor\": str (6-digit hex),\n                \"hoverState\": {\n                    \"color\": str (6-digit hex),\n                    \"fillColor\": str (6-digit hex),\n                    \"kind\": \"text\",\n                    \"text\": str (max 30 chars),\n                    \"textColor\": str (6-digit hex),\n                }\n                OR\n                {\n                    \"height\": int,\n                    \"imageUrl\": str,\n                    \"kind\": \"image\",\n                    \"width\": int,\n                },\n                \"kind\": \"text\",\n                \"text\": str (max 30 chars),\n                \"textColor\": str (6-digit hex),\n                \"url\": str,\n            }\n            OR\n            {\n                \"height\": int,\n                \"hoverState\": {\n                    \"color\": str (6-digit hex),\n                    \"fillColor\": str (6-digit hex),\n                    \"kind\": \"text\",\n                    \"text\": str (max 30 chars),\n                    \"textColor\": str (6-digit hex),\n                }\n                OR\n                {\n                    \"height\": int,\n                    \"imageUrl\": str,\n                    \"kind\": \"image\",\n                    \"width\": int,\n                },\n                \"imageUrl\": str,\n                \"kind\": \"image\",\n                \"linkUrl\": str,\n                \"text\": str (max 30 chars),\n                \"width\": int,\n            },\n            ...\n        ],\n        \"description\": str (markdown),\n        \"kind\": \"button\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'community-list' widgets:\n    {\n        \"data\": [\n            str (subreddit name),\n            ...\n        ],\n        \"kind\": \"community-list\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'custom' widgets:\n    {\n        \"css\": str (max 100000 chars),\n        \"height\": int (50-500),\n        \"imageData\": [\n            {\n                \"height\": int,\n                \"name\": str (max 20 chars),\n                \"url\": str,\n                \"width\": int,\n            },\n            ...\n        ],\n        \"kind\": \"custom\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n        \"text\": str (markdown),\n    }\n- For 'post-flair' widgets:\n    {\n        \"display\": str (\"cloud\" or \"list\"),\n        \"kind\": \"post-flair\",\n        \"order\": [\n            str (flair template ID),\n            ...\n        ],\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }"
            }
          },
          "required": [
            "widget_data"
          ]
        }
      },
      "delete_subreddit_widget": {
        "name": "delete_subreddit_widget",
        "description": "Deletes a specific widget.",
        "parameters": {
          "type": "object",
          "properties": {
            "widget_id": {
              "type": "string",
              "description": "The identifier of the widget to delete."
            }
          },
          "required": [
            "widget_id"
          ]
        }
      },
      "get_widget_image_s3_upload_lease": {
        "name": "get_widget_image_s3_upload_lease",
        "description": "Acquires and returns an upload lease to an S3 temporary bucket for widget image uploads.",
        "parameters": {
          "type": "object",
          "properties": {
            "filepath": {
              "type": "string",
              "description": "The name and extension of the image file (e.g. \"widget.png\")."
            },
            "mimetype": {
              "type": "string",
              "description": "The MIME type of the image (e.g. \"image/png\")."
            }
          },
          "required": [
            "filepath",
            "mimetype"
          ]
        }
      },
      "reorder_subreddit_widgets": {
        "name": "reorder_subreddit_widgets",
        "description": "Reorders widgets within a specified section.",
        "parameters": {
          "type": "object",
          "properties": {
            "section": {
              "type": "string",
              "description": "The section name (e.g., \"sidebar\")."
            },
            "ordered_widgets": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An ordered list of widget IDs."
            }
          },
          "required": [
            "ordered_widgets",
            "section"
          ]
        }
      },
      "get_all_subreddit_widgets": {
        "name": "get_all_subreddit_widgets",
        "description": "Retrieves all widgets configured for a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_oauth_scopes": {
        "name": "get_oauth_scopes",
        "description": "Retrieves all available OAuth scopes and their descriptions.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_moderator_note": {
        "name": "delete_moderator_note",
        "description": "Deletes a moderator note.",
        "parameters": {
          "type": "object",
          "properties": {
            "note_id": {
              "type": "string",
              "description": "The identifier of the note to delete."
            }
          },
          "required": [
            "note_id"
          ]
        }
      },
      "get_recent_moderator_notes_for_user": {
        "name": "get_recent_moderator_notes_for_user",
        "description": "Retrieves recent moderator notes for a user in a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string",
              "description": "The username for whom to retrieve notes."
            },
            "subreddit": {
              "type": "string",
              "description": "The subreddit identifier."
            }
          },
          "required": [
            "subreddit",
            "user"
          ]
        }
      },
      "get_search": {
        "name": "get_search",
        "description": "Searches for content based on the provided query and parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "q": {
              "type": "string",
              "description": "The search query string (maximum 512 characters)."
            },
            "after": {
              "type": "string",
              "description": "A cursor for paginating results after a certain point. Defaults to None."
            },
            "before": {
              "type": "string",
              "description": "A cursor for paginating results before a certain point. Defaults to None."
            },
            "category": {
              "type": "string",
              "description": "The category to filter search results by (maximum 5 characters). Defaults to None."
            },
            "count": {
              "type": "integer",
              "description": "The number of results already seen. Defaults to 0."
            },
            "include_facets": {
              "type": "boolean",
              "description": "Whether to include facet information in the results. Defaults to False."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return (must be between 1 and 100). Defaults to 25."
            },
            "restrict_sr": {
              "type": "boolean",
              "description": "Whether to restrict the search to the current subreddit (if applicable). Defaults to False."
            },
            "show": {
              "type": "string",
              "description": "A string to filter results by a specific type (e.g., 'all'). Defaults to None."
            },
            "sort": {
              "type": "string",
              "description": "The sorting method for results ('relevance', 'hot', 'top', 'new', 'comments'). Defaults to \"relevance\"."
            },
            "sr_detail": {
              "type": "boolean",
              "description": "Whether to include detailed information about the subreddit. Defaults to False."
            },
            "t": {
              "type": "string",
              "description": "The time filter for top or controversial sorts ('hour', 'day', 'week', 'month', 'year', 'all'). Defaults to None."
            },
            "type": {
              "type": "string",
              "description": "Comma-separated string of types to search for ('sr', 'link', 'user'). Defaults to None (all types)."
            }
          },
          "required": [
            "q"
          ]
        }
      },
      "get_best_posts": {
        "name": "get_best_posts",
        "description": "Retrieves the best posts ranked by the algorithm.",
        "parameters": {
          "type": "object",
          "properties": {
            "after": {
              "type": "string",
              "description": "The fullname anchor for pagination."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of posts to return."
            }
          }
        }
      },
      "get_posts_by_id": {
        "name": "get_posts_by_id",
        "description": "Retrieves posts by their fullnames.",
        "parameters": {
          "type": "object",
          "properties": {
            "names": {
              "type": "string",
              "description": "A comma-separated list of post fullnames."
            }
          },
          "required": [
            "names"
          ]
        }
      },
      "get_post_comments": {
        "name": "get_post_comments",
        "description": "Retrieves comments for a post identified by its article ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "article": {
              "type": "string",
              "description": "The article ID or slug."
            }
          },
          "required": [
            "article"
          ]
        }
      },
      "get_controversial_posts": {
        "name": "get_controversial_posts",
        "description": "Retrieves posts that are currently controversial.",
        "parameters": {
          "type": "object",
          "properties": {
            "after": {
              "type": "string",
              "description": "The fullname anchor for pagination."
            }
          }
        }
      },
      "find_duplicate_posts": {
        "name": "find_duplicate_posts",
        "description": "Finds duplicate posts for a given article.",
        "parameters": {
          "type": "object",
          "properties": {
            "article": {
              "type": "string",
              "description": "The ID of the original post."
            }
          },
          "required": [
            "article"
          ]
        }
      },
      "get_hot_posts": {
        "name": "get_hot_posts",
        "description": "Retrieves hot posts from the front page.",
        "parameters": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "description": "The maximum number of posts to return."
            }
          }
        }
      },
      "get_new_posts": {
        "name": "get_new_posts",
        "description": "Retrieves the newest posts.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_rising_posts": {
        "name": "get_rising_posts",
        "description": "Retrieves posts that are rapidly gaining popularity.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_top_posts": {
        "name": "get_top_posts",
        "description": "Retrieves the top posts.",
        "parameters": {
          "type": "object",
          "properties": {
            "t": {
              "type": "string",
              "description": "The timeframe (e.g., day, week)."
            }
          }
        }
      },
      "get_sorted_posts": {
        "name": "get_sorted_posts",
        "description": "Retrieves posts sorted by a specified method.",
        "parameters": {
          "type": "object",
          "properties": {
            "sort": {
              "type": "string",
              "description": "The sorting category (e.g., hot, new, rising)."
            }
          },
          "required": [
            "sort"
          ]
        }
      },
      "bulk_mark_modmail_as_read": {
        "name": "bulk_mark_modmail_as_read",
        "description": "Marks multiple modmail conversations as read.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of modmail conversation IDs."
            }
          },
          "required": [
            "conversation_ids"
          ]
        }
      },
      "get_modmail_conversations": {
        "name": "get_modmail_conversations",
        "description": "Retrieves a list of modmail conversations.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_modmail_conversation_details": {
        "name": "get_modmail_conversation_details",
        "description": "Retrieves details of a specific modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "approve_modmail_conversation": {
        "name": "approve_modmail_conversation",
        "description": "Approves a modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "archive_modmail_conversation": {
        "name": "archive_modmail_conversation",
        "description": "Archives a modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "disapprove_modmail_conversation": {
        "name": "disapprove_modmail_conversation",
        "description": "Disapproves a modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "remove_modmail_conversation_highlight": {
        "name": "remove_modmail_conversation_highlight",
        "description": "Removes a highlight marker from a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "mute_user_in_modmail_conversation": {
        "name": "mute_user_in_modmail_conversation",
        "description": "Mutes the user in a modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "temp_ban_user_via_modmail": {
        "name": "temp_ban_user_via_modmail",
        "description": "Temporarily bans a user via modmail.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "unarchive_modmail_conversation": {
        "name": "unarchive_modmail_conversation",
        "description": "Unarchives a modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "unban_user_via_modmail": {
        "name": "unban_user_via_modmail",
        "description": "Revokes a ban issued via modmail.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "unmute_user_in_modmail_conversation": {
        "name": "unmute_user_in_modmail_conversation",
        "description": "Unmutes a user in a modmail conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_id": {
              "type": "string",
              "description": "The ID of the modmail conversation."
            }
          },
          "required": [
            "conversation_id"
          ]
        }
      },
      "mark_modmail_conversations_as_read": {
        "name": "mark_modmail_conversations_as_read",
        "description": "Marks specified modmail conversations as read.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of modmail conversation IDs."
            }
          },
          "required": [
            "conversation_ids"
          ]
        }
      },
      "mark_modmail_conversations_as_unread": {
        "name": "mark_modmail_conversations_as_unread",
        "description": "Marks specified modmail conversations as unread.",
        "parameters": {
          "type": "object",
          "properties": {
            "conversation_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of modmail conversation IDs."
            }
          },
          "required": [
            "conversation_ids"
          ]
        }
      },
      "get_unread_modmail_conversation_count": {
        "name": "get_unread_modmail_conversation_count",
        "description": "Retrieves the count of unread modmail conversations.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "clear_flair_templates": {
        "name": "clear_flair_templates",
        "description": "Clears all flair templates (user or link) in a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "flair_type": {
              "type": "string",
              "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
            }
          },
          "required": [
            "flair_type"
          ]
        }
      },
      "delete_user_flair": {
        "name": "delete_user_flair",
        "description": "Removes flair from a specific user.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username whose flair is to be removed."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "delete_flair_template": {
        "name": "delete_flair_template",
        "description": "Deletes a flair template by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "template_id": {
              "type": "string",
              "description": "The ID of the flair template to delete."
            }
          },
          "required": [
            "template_id"
          ]
        }
      },
      "set_user_flair": {
        "name": "set_user_flair",
        "description": "Sets or updates a user's flair.",
        "parameters": {
          "type": "object",
          "properties": {
            "api_type": {
              "type": "string",
              "description": "Must be \"json\"."
            },
            "name": {
              "type": "string",
              "description": "The username for which to set flair."
            },
            "flair_template_id": {
              "type": "string",
              "description": "The ID of the flair template (if using one)."
            },
            "text": {
              "type": "string",
              "description": "Custom flair text if not using a template."
            }
          },
          "required": [
            "api_type",
            "name"
          ]
        }
      },
      "reorder_flair_templates": {
        "name": "reorder_flair_templates",
        "description": "Reorders the existing flair templates.",
        "parameters": {
          "type": "object",
          "properties": {
            "flair_type": {
              "type": "string",
              "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
            },
            "template_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An ordered list of flair template IDs."
            }
          },
          "required": [
            "flair_type",
            "template_ids"
          ]
        }
      },
      "configure_flair_settings": {
        "name": "configure_flair_settings",
        "description": "Configures overall flair settings.",
        "parameters": {
          "type": "object",
          "properties": {
            "flair_enabled": {
              "type": "boolean",
              "description": "Indicates if flair is enabled."
            },
            "flair_position": {
              "type": "string",
              "description": "The position of flair (e.g., \"left\" or \"right\")."
            }
          }
        }
      },
      "set_user_flairs_via_csv": {
        "name": "set_user_flairs_via_csv",
        "description": "Processes CSV input to set multiple user flairs.",
        "parameters": {
          "type": "object",
          "properties": {
            "flair_csv": {
              "type": "string",
              "description": "A CSV-formatted string with flair data."
            }
          },
          "required": [
            "flair_csv"
          ]
        }
      },
      "get_flair_list": {
        "name": "get_flair_list",
        "description": "Retrieves a paginated list of users and their flair.",
        "parameters": {
          "type": "object",
          "properties": {
            "after": {
              "type": "string",
              "description": "The fullname anchor for pagination."
            },
            "name": {
              "type": "string",
              "description": "A filter by username."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of users to return."
            }
          }
        }
      },
      "get_flair_options": {
        "name": "get_flair_options",
        "description": "Retrieves available flair options for a link or user.",
        "parameters": {
          "type": "object",
          "properties": {
            "link": {
              "type": "string",
              "description": "The fullname of the link."
            },
            "name": {
              "type": "string",
              "description": "The username."
            }
          }
        }
      },
      "create_or_update_flair_template": {
        "name": "create_or_update_flair_template",
        "description": "Creates or updates a flair template.",
        "parameters": {
          "type": "object",
          "properties": {
            "flair_type": {
              "type": "string",
              "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
            },
            "text": {
              "type": "string",
              "description": "The flair text."
            }
          },
          "required": [
            "flair_type",
            "text"
          ]
        }
      },
      "create_or_update_flair_template_v2": {
        "name": "create_or_update_flair_template_v2",
        "description": "Creates or updates a flair template with advanced options.",
        "parameters": {
          "type": "object",
          "properties": {
            "flair_type": {
              "type": "string",
              "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
            },
            "text": {
              "type": "string",
              "description": "The flair text."
            }
          },
          "required": [
            "flair_type",
            "text"
          ]
        }
      },
      "select_link_flair": {
        "name": "select_link_flair",
        "description": "Applies a chosen link flair template to a post.",
        "parameters": {
          "type": "object",
          "properties": {
            "link": {
              "type": "string",
              "description": "The fullname of the post."
            },
            "flair_template_id": {
              "type": "string",
              "description": "The ID of the flair template."
            }
          },
          "required": [
            "flair_template_id",
            "link"
          ]
        }
      },
      "set_flair_enabled_status": {
        "name": "set_flair_enabled_status",
        "description": "Enables or disables flair in a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "api_type": {
              "type": "string",
              "description": "Must be \"json\"."
            },
            "flair_enabled": {
              "type": "boolean",
              "description": "True to enable flair, False to disable."
            }
          },
          "required": [
            "api_type",
            "flair_enabled"
          ]
        }
      },
      "get_global_announcements": {
        "name": "get_global_announcements",
        "description": "Retrieves a list of global announcements.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "hide_announcements": {
        "name": "hide_announcements",
        "description": "Hides one or more announcements from the authenticated user's feed.",
        "parameters": {
          "type": "object",
          "properties": {
            "announcement_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of announcement IDs to hide."
            }
          },
          "required": [
            "announcement_ids"
          ]
        }
      },
      "mark_announcements_as_read": {
        "name": "mark_announcements_as_read",
        "description": "Marks one or more announcements as read.",
        "parameters": {
          "type": "object",
          "properties": {
            "announcement_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of announcement IDs to mark as read."
            }
          },
          "required": [
            "announcement_ids"
          ]
        }
      },
      "mark_all_announcements_as_read": {
        "name": "mark_all_announcements_as_read",
        "description": "Marks all global announcements as read.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_unread_announcements": {
        "name": "get_unread_announcements",
        "description": "Retrieves a list of announcements not yet read by the user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_saved_filter_path": {
        "name": "delete_saved_filter_path",
        "description": "Deletes a saved filter path.",
        "parameters": {
          "type": "object",
          "properties": {
            "filterpath": {
              "type": "string",
              "description": "The filter path identifier."
            }
          },
          "required": [
            "filterpath"
          ]
        }
      },
      "remove_subreddit_from_filter_path": {
        "name": "remove_subreddit_from_filter_path",
        "description": "Removes a subreddit from a saved filter path.",
        "parameters": {
          "type": "object",
          "properties": {
            "filterpath": {
              "type": "string",
              "description": "The filter path identifier."
            },
            "srname": {
              "type": "string",
              "description": "The subreddit name to remove."
            }
          },
          "required": [
            "filterpath",
            "srname"
          ]
        }
      },
      "copy_multireddit": {
        "name": "copy_multireddit",
        "description": "Copies an existing multireddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "frm": {
              "type": "string",
              "description": "The source multireddit path."
            },
            "to": {
              "type": "string",
              "description": "The destination path for the copy."
            }
          },
          "required": [
            "frm",
            "to"
          ]
        }
      },
      "get_my_multireddits": {
        "name": "get_my_multireddits",
        "description": "Retrieves the authenticated user's multireddits.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_multireddit": {
        "name": "delete_multireddit",
        "description": "Deletes a multireddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "multipath": {
              "type": "string",
              "description": "The multireddit path."
            }
          },
          "required": [
            "multipath"
          ]
        }
      },
      "get_multireddit_description": {
        "name": "get_multireddit_description",
        "description": "Retrieves the description of a multireddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "multipath": {
              "type": "string",
              "description": "The multireddit path."
            }
          },
          "required": [
            "multipath"
          ]
        }
      },
      "remove_subreddit_from_multireddit": {
        "name": "remove_subreddit_from_multireddit",
        "description": "Removes a subreddit from a multireddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "multipath": {
              "type": "string",
              "description": "The multireddit path."
            },
            "srname": {
              "type": "string",
              "description": "The subreddit name to remove."
            }
          },
          "required": [
            "multipath",
            "srname"
          ]
        }
      },
      "get_my_identity": {
        "name": "get_my_identity",
        "description": "Retrieves the identity details of the currently authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_my_blocked_users": {
        "name": "get_my_blocked_users",
        "description": "Retrieves a list of users blocked by the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_my_friends": {
        "name": "get_my_friends",
        "description": "Retrieves a list of friends for the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_my_karma_breakdown": {
        "name": "get_my_karma_breakdown",
        "description": "Retrieves a breakdown of the authenticated user's subreddit karma.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_my_preferences": {
        "name": "get_my_preferences",
        "description": "Retrieves the preference settings of the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {
            "fields": {
              "type": "string",
              "description": "A comma-separated list of specific preference fields to return.\nIf None, returns all preferences."
            }
          }
        }
      },
      "update_my_preferences": {
        "name": "update_my_preferences",
        "description": "Updates the preference settings of the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {
            "new_preferences": {
              "type": "object",
              "properties": {},
              "description": "A dictionary containing the preference fields to update."
            }
          },
          "required": [
            "new_preferences"
          ]
        }
      },
      "get_my_trophies": {
        "name": "get_my_trophies",
        "description": "Retrieves the trophies (awards) earned by the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_detailed_blocked_users": {
        "name": "get_detailed_blocked_users",
        "description": "Retrieves detailed information about blocked users.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_detailed_friends_info": {
        "name": "get_detailed_friends_info",
        "description": "Retrieves detailed information about friends.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_my_messaging_preferences": {
        "name": "get_my_messaging_preferences",
        "description": "Retrieves the messaging preferences of the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_my_trusted_users": {
        "name": "get_my_trusted_users",
        "description": "Retrieves the trusted user list for the authenticated user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_preferences_by_category": {
        "name": "get_preferences_by_category",
        "description": "Retrieves specific preference details from various preference categories.",
        "parameters": {
          "type": "object",
          "properties": {
            "where": {
              "type": "string",
              "description": "The preference category to retrieve (e.g., \"blocked\", \"friends\")."
            }
          },
          "required": [
            "where"
          ]
        }
      },
      "get_live_threads_by_id": {
        "name": "get_live_threads_by_id",
        "description": "Retrieves data for multiple live threads by their fullnames.",
        "parameters": {
          "type": "object",
          "properties": {
            "names": {
              "type": "string",
              "description": "A comma-separated list of live thread fullnames."
            }
          },
          "required": [
            "names"
          ]
        }
      },
      "create_live_thread": {
        "name": "create_live_thread",
        "description": "Creates a new live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The title of the new live thread."
            }
          },
          "required": [
            "title"
          ]
        }
      },
      "get_featured_live_thread": {
        "name": "get_featured_live_thread",
        "description": "Retrieves the currently featured live thread.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "accept_live_thread_contributor_invite": {
        "name": "accept_live_thread_contributor_invite",
        "description": "Accepts an invitation to contribute to a live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "thread": {
              "type": "string",
              "description": "The ID of the live thread."
            }
          },
          "required": [
            "thread"
          ]
        }
      },
      "close_live_thread": {
        "name": "close_live_thread",
        "description": "Closes a live thread to stop further updates.",
        "parameters": {
          "type": "object",
          "properties": {
            "thread": {
              "type": "string",
              "description": "The ID of the live thread."
            }
          },
          "required": [
            "thread"
          ]
        }
      },
      "delete_live_thread_update": {
        "name": "delete_live_thread_update",
        "description": "Deletes a specific update from a live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "update_id": {
              "type": "string",
              "description": "The ID of the update to delete."
            }
          },
          "required": [
            "update_id"
          ]
        }
      },
      "edit_live_thread_settings": {
        "name": "edit_live_thread_settings",
        "description": "Updates the settings or title of a live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "The new description for the live thread."
            }
          }
        }
      },
      "hide_live_thread_discussion": {
        "name": "hide_live_thread_discussion",
        "description": "Hides the discussion thread associated with a live thread.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "invite_live_thread_contributor": {
        "name": "invite_live_thread_contributor",
        "description": "Invites a new contributor to a live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username of the invitee."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "leave_live_thread_contributor_role": {
        "name": "leave_live_thread_contributor_role",
        "description": "Removes contributor status from the current user.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "report_live_thread": {
        "name": "report_live_thread",
        "description": "Reports a live thread for rule violations.",
        "parameters": {
          "type": "object",
          "properties": {
            "thread": {
              "type": "string",
              "description": "The ID of the live thread."
            }
          },
          "required": [
            "thread"
          ]
        }
      },
      "remove_live_thread_contributor": {
        "name": "remove_live_thread_contributor",
        "description": "Removes a contributor from a live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username of the contributor to remove."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "revoke_live_thread_contributor_invite": {
        "name": "revoke_live_thread_contributor_invite",
        "description": "Revokes a pending contributor invite.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username of the invite to revoke."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "set_live_thread_contributor_permissions": {
        "name": "set_live_thread_contributor_permissions",
        "description": "Updates permissions for an existing contributor.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username of the contributor."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "strike_live_thread_update": {
        "name": "strike_live_thread_update",
        "description": "Marks a live thread update as erroneous.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the update to strike."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unhide_live_thread_discussion": {
        "name": "unhide_live_thread_discussion",
        "description": "Unhides the discussion thread associated with a live thread.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "add_live_thread_update": {
        "name": "add_live_thread_update",
        "description": "Adds a new update to the live thread feed.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "string",
              "description": "The text content of the update."
            }
          },
          "required": [
            "body"
          ]
        }
      },
      "get_live_thread_details": {
        "name": "get_live_thread_details",
        "description": "Retrieves details about a specific live thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "thread": {
              "type": "string",
              "description": "The ID of the live thread."
            }
          },
          "required": [
            "thread"
          ]
        }
      },
      "get_live_thread_metadata": {
        "name": "get_live_thread_metadata",
        "description": "Retrieves metadata about a live thread.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_moderated_items_by_category": {
        "name": "get_moderated_items_by_category",
        "description": "Retrieves moderated listings for a specific category.",
        "parameters": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "The moderation category (e.g., \"spam\")."
            }
          },
          "required": [
            "location"
          ]
        }
      },
      "accept_moderator_invite": {
        "name": "accept_moderator_invite",
        "description": "Accepts an invitation to moderate a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "approve_item": {
        "name": "approve_item",
        "description": "Approves a post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item to approve."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "distinguish_item": {
        "name": "distinguish_item",
        "description": "Distinguishes a moderator's post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            },
            "how": {
              "type": "string",
              "description": "The method of distinction (e.g., \"yes\", \"no\", \"admin\")."
            }
          },
          "required": [
            "how",
            "id"
          ]
        }
      },
      "ignore_item_reports": {
        "name": "ignore_item_reports",
        "description": "Ignores future reports on a specific item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "leave_contributor_status": {
        "name": "leave_contributor_status",
        "description": "Removes the current user from contributor status.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "leave_moderator_status": {
        "name": "leave_moderator_status",
        "description": "Removes the current user from moderator status.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "remove_item": {
        "name": "remove_item",
        "description": "Removes a post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item to remove."
            },
            "spam": {
              "type": "boolean",
              "description": "Indicates if the item should be marked as spam."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "show_removed_comment": {
        "name": "show_removed_comment",
        "description": "Re-approves a comment that was removed.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the comment."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "snooze_item_reports": {
        "name": "snooze_item_reports",
        "description": "Snoozes reports on a specific item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unignore_item_reports": {
        "name": "unignore_item_reports",
        "description": "Stops ignoring reports on a specific item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unsnooze_item_reports": {
        "name": "unsnooze_item_reports",
        "description": "Unsnoozes reports, resuming notifications.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_post_crowd_control_level": {
        "name": "update_post_crowd_control_level",
        "description": "Updates the crowd control level for a post.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            },
            "level": {
              "type": "integer",
              "description": "The new crowd control level."
            }
          },
          "required": [
            "id",
            "level"
          ]
        }
      },
      "get_subreddit_stylesheet": {
        "name": "get_subreddit_stylesheet",
        "description": "Retrieves the subreddit's stylesheet code.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "block_user": {
        "name": "block_user",
        "description": "Blocks a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "account_id": {
              "type": "string",
              "description": "The account ID of the user to block."
            }
          },
          "required": [
            "account_id"
          ]
        }
      },
      "add_friend": {
        "name": "add_friend",
        "description": "Adds a user as a friend.",
        "parameters": {
          "type": "object",
          "properties": {
            "api_type": {
              "type": "string",
              "description": "Must be \"json\"."
            },
            "name": {
              "type": "string",
              "description": "The username to add as a friend."
            }
          },
          "required": [
            "api_type",
            "name"
          ]
        }
      },
      "report_user": {
        "name": "report_user",
        "description": "Reports a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string",
              "description": "The username to report."
            },
            "reason": {
              "type": "string",
              "description": "The reason for reporting."
            }
          },
          "required": [
            "user"
          ]
        }
      },
      "set_user_permissions": {
        "name": "set_user_permissions",
        "description": "Sets permissions for a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username for whom to set permissions."
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of permissions to grant."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "remove_friend": {
        "name": "remove_friend",
        "description": "Removes a friend relationship.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username to unfriend."
            },
            "type": {
              "type": "string",
              "description": "The relationship type (e.g., \"friend\")."
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "get_user_data_by_account_ids": {
        "name": "get_user_data_by_account_ids",
        "description": "Retrieves user data for specified account IDs.",
        "parameters": {
          "type": "object",
          "properties": {
            "ids": {
              "type": "string",
              "description": "A comma-separated list of account IDs."
            }
          },
          "required": [
            "ids"
          ]
        }
      },
      "check_username_availability": {
        "name": "check_username_availability",
        "description": "Checks if a username is available.",
        "parameters": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string",
              "description": "The username to check."
            }
          },
          "required": [
            "user"
          ]
        }
      },
      "remove_friend_by_username": {
        "name": "remove_friend_by_username",
        "description": "Removes a friend relationship.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username to remove."
            }
          },
          "required": [
            "username"
          ]
        }
      },
      "get_user_trophies": {
        "name": "get_user_trophies",
        "description": "Retrieves trophies for a specified user.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The target username."
            }
          },
          "required": [
            "username"
          ]
        }
      },
      "get_user_profile_info": {
        "name": "get_user_profile_info",
        "description": "Retrieves profile information for a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username."
            }
          },
          "required": [
            "username"
          ]
        }
      },
      "add_wiki_page_editor": {
        "name": "add_wiki_page_editor",
        "description": "Adds a user to the wiki editors list for a page.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            },
            "username": {
              "type": "string",
              "description": "The username to grant editing access."
            }
          },
          "required": [
            "page",
            "username"
          ]
        }
      },
      "remove_wiki_page_editor": {
        "name": "remove_wiki_page_editor",
        "description": "Removes a user from the wiki editors list.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            },
            "username": {
              "type": "string",
              "description": "The username to remove from editors."
            }
          },
          "required": [
            "page",
            "username"
          ]
        }
      },
      "perform_wiki_editor_action": {
        "name": "perform_wiki_editor_action",
        "description": "Performs an action to add or remove a wiki editor.",
        "parameters": {
          "type": "object",
          "properties": {
            "act": {
              "type": "string",
              "description": "\"add\" or \"del\" to modify wiki editors."
            }
          },
          "required": [
            "act"
          ]
        }
      },
      "edit_wiki_page_content": {
        "name": "edit_wiki_page_content",
        "description": "Edits the content of a wiki page.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            },
            "content": {
              "type": "string",
              "description": "The new content in raw markdown."
            }
          },
          "required": [
            "content",
            "page"
          ]
        }
      },
      "hide_wiki_page_revision": {
        "name": "hide_wiki_page_revision",
        "description": "Hides a specific revision from the wiki history.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            },
            "revision": {
              "type": "string",
              "description": "The revision ID to hide."
            }
          },
          "required": [
            "page",
            "revision"
          ]
        }
      },
      "revert_wiki_page_to_revision": {
        "name": "revert_wiki_page_to_revision",
        "description": "Reverts a wiki page to a previous revision.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            },
            "revision": {
              "type": "string",
              "description": "The revision ID to revert to."
            }
          },
          "required": [
            "page",
            "revision"
          ]
        }
      },
      "get_wiki_page_discussions": {
        "name": "get_wiki_page_discussions",
        "description": "Retrieves discussion links related to a wiki page.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            }
          },
          "required": [
            "page"
          ]
        }
      },
      "get_all_wiki_pages": {
        "name": "get_all_wiki_pages",
        "description": "Retrieves a list of wiki pages for a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_wiki_page_revisions": {
        "name": "get_wiki_page_revisions",
        "description": "Retrieves revisions for a specific wiki page.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            }
          },
          "required": [
            "page"
          ]
        }
      },
      "get_wiki_page_settings": {
        "name": "get_wiki_page_settings",
        "description": "Retrieves the settings for a specific wiki page.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            }
          },
          "required": [
            "page"
          ]
        }
      },
      "get_wiki_page_content": {
        "name": "get_wiki_page_content",
        "description": "Retrieves the content of a wiki page.",
        "parameters": {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "The name of the wiki page."
            }
          },
          "required": [
            "page"
          ]
        }
      },
      "check_captcha_requirement": {
        "name": "check_captcha_requirement",
        "description": "Checks if CAPTCHA is required for user requests.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "add_post_to_collection": {
        "name": "add_post_to_collection",
        "description": "Adds a post to an existing collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The unique identifier of the collection."
            },
            "link_fullname": {
              "type": "string",
              "description": "The fullname of the post to add."
            }
          },
          "required": [
            "collection_id",
            "link_fullname"
          ]
        }
      },
      "get_collection_info": {
        "name": "get_collection_info",
        "description": "Retrieves information about a specific collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The unique identifier of the collection."
            }
          },
          "required": [
            "collection_id"
          ]
        }
      },
      "create_collection": {
        "name": "create_collection",
        "description": "Creates a new collection in a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The title of the new collection."
            },
            "sr_fullname": {
              "type": "string",
              "description": "The fullname of the subreddit."
            }
          },
          "required": [
            "sr_fullname",
            "title"
          ]
        }
      },
      "delete_collection": {
        "name": "delete_collection",
        "description": "Deletes an existing collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The identifier of the collection to delete."
            }
          },
          "required": [
            "collection_id"
          ]
        }
      },
      "remove_post_from_collection": {
        "name": "remove_post_from_collection",
        "description": "Removes a post from a collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "link_fullname": {
              "type": "string",
              "description": "The fullname of the post to remove."
            },
            "collection_id": {
              "type": "string",
              "description": "The identifier of the collection."
            }
          },
          "required": [
            "collection_id",
            "link_fullname"
          ]
        }
      },
      "reorder_collection_posts": {
        "name": "reorder_collection_posts",
        "description": "Reorders the posts in a collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The identifier of the collection."
            },
            "link_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of comma separated link_ids in the order to set them in."
            }
          },
          "required": [
            "collection_id",
            "link_ids"
          ]
        }
      },
      "get_subreddit_collections": {
        "name": "get_subreddit_collections",
        "description": "Retrieves collections for a specific subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "sr_fullname": {
              "type": "string",
              "description": "The fullname of the subreddit."
            }
          },
          "required": [
            "sr_fullname"
          ]
        }
      },
      "update_collection_description": {
        "name": "update_collection_description",
        "description": "Updates the description of a collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The collection identifier."
            },
            "description": {
              "type": "string",
              "description": "The new description text."
            }
          },
          "required": [
            "collection_id",
            "description"
          ]
        }
      },
      "update_collection_display_layout": {
        "name": "update_collection_display_layout",
        "description": "Updates the display layout of a collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The collection identifier."
            },
            "display_layout": {
              "type": "string",
              "description": "The new layout style (e.g., GALLERY, TIMELINE)."
            }
          },
          "required": [
            "collection_id",
            "display_layout"
          ]
        }
      },
      "update_collection_title": {
        "name": "update_collection_title",
        "description": "Changes the title of a collection.",
        "parameters": {
          "type": "object",
          "properties": {
            "collection_id": {
              "type": "string",
              "description": "The collection identifier."
            },
            "title": {
              "type": "string",
              "description": "The new title for the collection."
            }
          },
          "required": [
            "collection_id",
            "title"
          ]
        }
      },
      "add_subreddit_emoji": {
        "name": "add_subreddit_emoji",
        "description": "Adds a new emoji to a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "subreddit": {
              "type": "string",
              "description": "The name of the subreddit."
            },
            "name": {
              "type": "string",
              "description": "Name of the emoji to be created. It can be alphanumeric without any special characters except '-' & '_' and cannot exceed 24 characters."
            },
            "s3_key": {
              "type": "string",
              "description": "S3 key of the uploaded image which can be obtained from the S3 url. This is of the form subreddit/hash_value."
            },
            "mod_flair_only": {
              "type": "boolean",
              "description": "Whether the emoji is only available for moderator flair. Defaults to False."
            },
            "post_flair_allowed": {
              "type": "boolean",
              "description": "Whether the emoji can be used in post flair. Defaults to True."
            },
            "user_flair_allowed": {
              "type": "boolean",
              "description": "Whether the emoji can be used in user flair. Defaults to True."
            },
            "css": {
              "type": "string",
              "description": "CSS styling for the emoji."
            }
          },
          "required": [
            "name",
            "s3_key",
            "subreddit"
          ]
        }
      },
      "delete_subreddit_emoji": {
        "name": "delete_subreddit_emoji",
        "description": "Removes an existing emoji from a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "subreddit": {
              "type": "string",
              "description": "The name of the subreddit."
            },
            "emoji_name": {
              "type": "string",
              "description": "The name of the emoji to delete."
            }
          },
          "required": [
            "emoji_name",
            "subreddit"
          ]
        }
      },
      "get_emoji_s3_upload_lease": {
        "name": "get_emoji_s3_upload_lease",
        "description": "Acquires and returns an upload lease to an S3 temporary bucket.",
        "parameters": {
          "type": "object",
          "properties": {
            "filepath": {
              "type": "string",
              "description": "The name and extension of the image file (e.g. \"image1.png\")."
            },
            "mimetype": {
              "type": "string",
              "description": "The MIME type of the image (e.g. \"image/png\")."
            }
          },
          "required": [
            "filepath",
            "mimetype"
          ]
        }
      },
      "set_subreddit_emoji_custom_size": {
        "name": "set_subreddit_emoji_custom_size",
        "description": "Sets a custom display size for a subreddit emoji.",
        "parameters": {
          "type": "object",
          "properties": {
            "emoji_name": {
              "type": "string",
              "description": "The name of the emoji."
            },
            "width": {
              "type": "integer",
              "description": "The desired width in pixels."
            },
            "height": {
              "type": "integer",
              "description": "The desired height in pixels."
            }
          },
          "required": [
            "emoji_name",
            "height",
            "width"
          ]
        }
      },
      "get_all_subreddit_emojis": {
        "name": "get_all_subreddit_emojis",
        "description": "Retrieves all emojis for a specified subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "subreddit": {
              "type": "string",
              "description": "The name of the subreddit."
            }
          },
          "required": [
            "subreddit"
          ]
        }
      },
      "block_user_via_message": {
        "name": "block_user_via_message",
        "description": "Blocks a user based on a messaging context.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the message or user context."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "collapse_messages": {
        "name": "collapse_messages",
        "description": "Collapses one or more messages in the inbox.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of message IDs to collapse."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "compose_message": {
        "name": "compose_message",
        "description": "Composes and sends a new private message.",
        "parameters": {
          "type": "object",
          "properties": {
            "to": {
              "type": "string",
              "description": "The recipient's identifier or email. Cannot be empty or consist only of whitespace."
            },
            "subject": {
              "type": "string",
              "description": "The subject of the message. Cannot be empty or consist only of whitespace."
            },
            "text": {
              "type": "string",
              "description": "The body text of the message. Cannot be empty or consist only of whitespace."
            }
          },
          "required": [
            "subject",
            "text",
            "to"
          ]
        }
      },
      "delete_message": {
        "name": "delete_message",
        "description": "Deletes a message permanently.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the message to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "mark_all_messages_as_read": {
        "name": "mark_all_messages_as_read",
        "description": "Marks all messages in the inbox as read.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "mark_messages_as_read": {
        "name": "mark_messages_as_read",
        "description": "Marks specified messages as read.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of message IDs."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unblock_subreddit_messaging": {
        "name": "unblock_subreddit_messaging",
        "description": "Unblocks a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "uncollapse_messages": {
        "name": "uncollapse_messages",
        "description": "Uncollapses one or more messages in the inbox.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of message IDs."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "mark_messages_as_unread": {
        "name": "mark_messages_as_unread",
        "description": "Marks specified messages as unread.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of message IDs."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_inbox_messages": {
        "name": "get_inbox_messages",
        "description": "Retrieves messages from the inbox.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "submit_comment": {
        "name": "submit_comment",
        "description": "Submits a new comment or reply to a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "parent": {
              "type": "string",
              "description": "The fullname of the parent post or comment."
            },
            "text": {
              "type": "string",
              "description": "The comment text in raw markdown."
            }
          },
          "required": [
            "parent",
            "text"
          ]
        }
      },
      "delete_post_or_comment": {
        "name": "delete_post_or_comment",
        "description": "Deletes a post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "edit_post_or_comment_text": {
        "name": "edit_post_or_comment_text",
        "description": "Edits the text of a comment or self-post.",
        "parameters": {
          "type": "object",
          "properties": {
            "thing_id": {
              "type": "string",
              "description": "The fullname of the post or comment."
            },
            "text": {
              "type": "string",
              "description": "The new text content in raw markdown."
            }
          },
          "required": [
            "text",
            "thing_id"
          ]
        }
      },
      "follow_or_unfollow_post": {
        "name": "follow_or_unfollow_post",
        "description": "Follows or unfollows a post to receive notifications.",
        "parameters": {
          "type": "object",
          "properties": {
            "fullname": {
              "type": "string",
              "description": "The fullname of the post."
            },
            "follow": {
              "type": "boolean",
              "description": "True to follow, False to unfollow."
            }
          },
          "required": [
            "follow",
            "fullname"
          ]
        }
      },
      "hide_posts": {
        "name": "hide_posts",
        "description": "Hides one or more posts from the user's front page.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of post fullnames to hide."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_items_info": {
        "name": "get_items_info",
        "description": "Retrieves information about posts or comments by fullname or URL.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "A comma-separated list of fullnames."
            },
            "url": {
              "type": "string",
              "description": "A URL to look up posts referencing it."
            }
          }
        }
      },
      "lock_item": {
        "name": "lock_item",
        "description": "Locks a post or comment to prevent further replies.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item to lock."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "mark_post_nsfw": {
        "name": "mark_post_nsfw",
        "description": "Marks a post as Not Safe For Work (NSFW).",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_more_comments": {
        "name": "get_more_comments",
        "description": "Retrieves additional comments omitted by pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "link_id": {
              "type": "string",
              "description": "The fullname of the parent post."
            },
            "children": {
              "type": "string",
              "description": "A comma-separated list of child comment IDs to retrieve."
            }
          },
          "required": [
            "children",
            "link_id"
          ]
        }
      },
      "report_item": {
        "name": "report_item",
        "description": "Reports a post or comment for review.",
        "parameters": {
          "type": "object",
          "properties": {
            "thing_id": {
              "type": "string",
              "description": "The fullname of the item to report."
            },
            "reason": {
              "type": "string",
              "description": "A short explanation for the report."
            }
          },
          "required": [
            "thing_id"
          ]
        }
      },
      "save_item": {
        "name": "save_item",
        "description": "Saves a post or comment to the user's saved list.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item to save."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "toggle_item_replies": {
        "name": "toggle_item_replies",
        "description": "Enables or disables replies for a post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            },
            "state": {
              "type": "boolean",
              "description": "True to enable replies, False to disable."
            }
          },
          "required": [
            "id",
            "state"
          ]
        }
      },
      "set_post_contest_mode": {
        "name": "set_post_contest_mode",
        "description": "Enables or disables contest mode for a post.",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "boolean",
              "description": "True to enable contest mode, False to disable."
            },
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id",
            "state"
          ]
        }
      },
      "set_post_sticky_status": {
        "name": "set_post_sticky_status",
        "description": "Stickies or unstickies a post in a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "num": {
              "type": "integer",
              "description": "The sticky slot number."
            },
            "state": {
              "type": "boolean",
              "description": "True to sticky, False to unsticky."
            },
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id",
            "state"
          ]
        }
      },
      "set_post_suggested_sort": {
        "name": "set_post_suggested_sort",
        "description": "Sets the suggested comment sort order for a post.",
        "parameters": {
          "type": "object",
          "properties": {
            "sort": {
              "type": "string",
              "description": "The sort order (e.g., \"top\", \"new\")."
            },
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "mark_post_spoiler": {
        "name": "mark_post_spoiler",
        "description": "Marks a post as containing spoilers.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "store_recent_visits": {
        "name": "store_recent_visits",
        "description": "Stores a record of the user's recent post or comment visits.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "submit_post": {
        "name": "submit_post",
        "description": "Submits a new link or text post into a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "The type of post (\"link\" or \"self\")."
            },
            "sr": {
              "type": "string",
              "description": "The subreddit to which the post is submitted."
            },
            "title": {
              "type": "string",
              "description": "The title of the post."
            },
            "text": {
              "type": "string",
              "description": "The text body for a self-post. Required when kind is \"self\"."
            },
            "url": {
              "type": "string",
              "description": "The URL for a link post. Required when kind is \"link\"."
            },
            "nsfw": {
              "type": "boolean",
              "description": "Whether the post is Not Safe For Work. Defaults to False."
            },
            "spoiler": {
              "type": "boolean",
              "description": "Whether the post contains spoilers. Defaults to False."
            }
          },
          "required": [
            "kind",
            "sr",
            "title"
          ]
        }
      },
      "unhide_posts": {
        "name": "unhide_posts",
        "description": "Unhides posts that were previously hidden.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of post fullnames to unhide."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unlock_item": {
        "name": "unlock_item",
        "description": "Unlocks a previously locked post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unmark_post_nsfw": {
        "name": "unmark_post_nsfw",
        "description": "Removes the NSFW tag from a post.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unsave_item": {
        "name": "unsave_item",
        "description": "Unsaves a post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item to unsave."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "unmark_post_spoiler": {
        "name": "unmark_post_spoiler",
        "description": "Removes the spoiler tag from a post.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the post."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "vote_on_item": {
        "name": "vote_on_item",
        "description": "Casts or revokes a vote on a post or comment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The fullname of the item."
            },
            "dir": {
              "type": "integer",
              "description": "The vote direction (-1 for downvote, 0 for remove, +1 for upvote)."
            }
          },
          "required": [
            "dir",
            "id"
          ]
        }
      },
      "get_users_by_category": {
        "name": "get_users_by_category",
        "description": "Retrieves user lists based on a specified category.",
        "parameters": {
          "type": "object",
          "properties": {
            "where": {
              "type": "string",
              "description": "The category (e.g., \"banned\", \"moderators\")."
            }
          },
          "required": [
            "where"
          ]
        }
      },
      "delete_subreddit_banner": {
        "name": "delete_subreddit_banner",
        "description": "Deletes the subreddit's banner image.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_subreddit_header": {
        "name": "delete_subreddit_header",
        "description": "Deletes the subreddit's header image.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_subreddit_icon": {
        "name": "delete_subreddit_icon",
        "description": "Deletes the subreddit's icon image.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_subreddit_stylesheet_image": {
        "name": "delete_subreddit_stylesheet_image",
        "description": "Deletes a subreddit stylesheet image.",
        "parameters": {
          "type": "object",
          "properties": {
            "img_name": {
              "type": "string",
              "description": "The name or key of the image to remove."
            }
          },
          "required": [
            "img_name"
          ]
        }
      },
      "recommend_related_subreddits": {
        "name": "recommend_related_subreddits",
        "description": "Suggests related subreddits based on provided names.",
        "parameters": {
          "type": "object",
          "properties": {
            "srnames": {
              "type": "string",
              "description": "A comma-separated list of subreddit names."
            }
          },
          "required": [
            "srnames"
          ]
        }
      },
      "search_subreddit_names": {
        "name": "search_subreddit_names",
        "description": "Checks for subreddit name availability or suggests names.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search term for subreddit names."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "search_subreddits_by_title_description": {
        "name": "search_subreddits_by_title_description",
        "description": "Searches for subreddits by title and description.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search keyword(s)."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "create_or_edit_subreddit": {
        "name": "create_or_edit_subreddit",
        "description": "Creates or edits a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the subreddit."
            },
            "title": {
              "type": "string",
              "description": "The title of the subreddit."
            }
          },
          "required": [
            "name",
            "title"
          ]
        }
      },
      "get_subreddit_submit_text": {
        "name": "get_subreddit_submit_text",
        "description": "Retrieves the submission text (sidebar text) for a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "sr": {
              "type": "string",
              "description": "The name of the subreddit."
            }
          },
          "required": [
            "sr"
          ]
        }
      },
      "update_subreddit_stylesheet": {
        "name": "update_subreddit_stylesheet",
        "description": "Updates the subreddit's stylesheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "The operation (typically \"save\")."
            },
            "stylesheet_contents": {
              "type": "string",
              "description": "The new stylesheet code."
            }
          },
          "required": [
            "op",
            "stylesheet_contents"
          ]
        }
      },
      "subscribe_or_unsubscribe_subreddit": {
        "name": "subscribe_or_unsubscribe_subreddit",
        "description": "Subscribes or unsubscribes the user from a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "Either \"sub\" or \"unsub\"."
            },
            "sr_name": {
              "type": "string",
              "description": "The name of the subreddit."
            }
          },
          "required": [
            "action",
            "sr_name"
          ]
        }
      },
      "upload_subreddit_stylesheet_image": {
        "name": "upload_subreddit_stylesheet_image",
        "description": "Uploads an image for a subreddit's stylesheet.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name/key for the image."
            },
            "file": {
              "type": "object",
              "properties": {},
              "description": "The image file data."
            }
          },
          "required": [
            "file",
            "name"
          ]
        }
      },
      "get_subreddit_post_requirements": {
        "name": "get_subreddit_post_requirements",
        "description": "Retrieves submission requirements for a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "subreddit": {
              "type": "string",
              "description": "The name of the subreddit."
            }
          },
          "required": [
            "subreddit"
          ]
        }
      },
      "get_subreddit_info": {
        "name": "get_subreddit_info",
        "description": "Retrieves information about a specific subreddit.",
        "parameters": {
          "type": "object",
          "properties": {
            "subreddit": {
              "type": "string",
              "description": "The name of the subreddit."
            }
          },
          "required": [
            "subreddit"
          ]
        }
      },
      "get_subreddit_editing_settings": {
        "name": "get_subreddit_editing_settings",
        "description": "Retrieves the subreddit editing settings.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_subreddit_traffic_stats": {
        "name": "get_subreddit_traffic_stats",
        "description": "Retrieves traffic statistics for a subreddit.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_subreddit_sidebar": {
        "name": "get_subreddit_sidebar",
        "description": "Retrieves the sidebar content for the subreddit.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_stickied_post_ids": {
        "name": "get_stickied_post_ids",
        "description": "Retrieves the identifiers of stickied posts.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_default_subreddits": {
        "name": "get_default_subreddits",
        "description": "Retrieves the list of default subreddits.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_popular_subreddits": {
        "name": "get_popular_subreddits",
        "description": "Retrieves popular subreddits.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "confluence": {
      "create_content": {
        "name": "create_content",
        "description": "Creates new content.\n\nThis function creates a new content item (page, blogpost, comment, etc.) with the specified\ndetails and stores it in the database. It handles both basic content creation and special\ncases like comments with ancestor relationships.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Content type (e.g., 'page', 'blogpost', 'comment')"
                },
                "title": {
                  "type": "string",
                  "description": "Content title"
                },
                "spaceKey": {
                  "type": "string",
                  "description": "Space key where content will be created"
                },
                "status": {
                  "type": "string",
                  "description": "Content status (default: 'current')"
                },
                "version": {
                  "type": "object",
                  "description": "Content version object with 'number' key",
                  "properties": {
                    "number": {
                      "type": "integer",
                      "description": "Version number (default: 1)"
                    },
                    "minorEdit": {
                      "type": "boolean",
                      "description": "Flag indicating a minor edit (default: False)"
                    }
                  },
                  "required": [
                    "minorEdit",
                    "number"
                  ]
                },
                "body": {
                  "type": "object",
                  "description": "Content body with storage format, structured as:",
                  "properties": {
                    "storage": {
                      "type": "object",
                      "description": "A dictionary with:",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The content value in storage format."
                        },
                        "representation": {
                          "type": "string",
                          "description": "The representation type (e.g., \"storage\")"
                        }
                      },
                      "required": [
                        "representation",
                        "value"
                      ]
                    }
                  },
                  "required": [
                    "storage"
                  ]
                },
                "createdBy": {
                  "type": "string",
                  "description": "Username of the creator (default: 'unknown')"
                },
                "postingDay": {
                  "type": "object",
                  "description": "Posting day for blog posts in \"YYYY-MM-DD\" format"
                }
              },
              "description": "Dictionary containing content details\nRequired fields:",
              "required": [
                "body",
                "createdBy",
                "spaceKey",
                "status",
                "title",
                "type",
                "version"
              ]
            }
          },
          "required": [
            "body"
          ]
        }
      },
      "get_content_details": {
        "name": "get_content_details",
        "description": "Retrieves content by its unique identifier.\n\nThis function fetches a content item from the database using its ID. It can optionally\nfilter the content by its status to ensure the content matches the expected state.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content to retrieve. Must be a non-empty string."
            },
            "status": {
              "type": "string",
              "description": "The expected status of the content. If provided,\nthe function will verify that the content's status matches this value.\nMust be a string if provided."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "update_content": {
        "name": "update_content",
        "description": "Updates existing content.\n\nThis function updates an existing content item with new values.\nVersioning is managed automatically: the version is incremented by one (defaulting to 1 if no version is set).\nThe update payload should not include a version object (any provided version data is ignored).\n\nSpecial behavior:\n  - **Restoring a trashed page:**\n    To restore content that is \"trashed\", the update request must set its status to \"current\". In that case,\n    only the version is incremented and the status updated to \"current\". No other fields are modified.\n  - **Deleting a draft:**\n    If the update is intended to delete a draft (signaled by `query_status=\"draft\"`), then the draft is removed and\n    the content's body is replaced with the provided body. (Updating a draft is not supported.)",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the content to update. (Docstring uses 'content_id' but param is 'id')"
            },
            "body": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "New content title."
                },
                "status": {
                  "type": "string",
                  "description": "New content status."
                },
                "body": {
                  "type": "object",
                  "description": "New content body."
                },
                "space": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Space key."
                    }
                  },
                  "description": "New space object containing a \"key\" field.",
                  "required": [
                    "key"
                  ]
                },
                "ancestors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of ancestor IDs."
                }
              },
              "description": "Dictionary containing updated content details.\nOptional fields:",
              "required": [
                "ancestors",
                "body",
                "space",
                "status",
                "title"
              ]
            }
          },
          "required": [
            "body",
            "id"
          ]
        }
      },
      "delete_content": {
        "name": "delete_content",
        "description": "Deletes a content item from the system.\n\nThis function simulates the deletion of a content item based on its type and status,\nfollowing these cases:\n  1. If the content is trashable (default) and its status is \"current\":\n     The content is trashed by updating its status to \"trashed\" (simulating a soft delete).\n  2. If the content is trashable, its status is \"trashed\", and the query parameter \"status\"\n     is set to \"trashed\":\n     The content is purged (permanently deleted) from the database.\n  3. If the content is not trashable:\n     The content is immediately deleted permanently regardless of its status.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content to delete."
            },
            "status": {
              "type": "string",
              "description": "The query parameter \"status\" from the request.\nWhen set to \"trashed\" in the purge scenario, indicates that the content should be\npermanently deleted."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "search_content_cql": {
        "name": "search_content_cql",
        "description": "Searches for content using Confluence Query Language (CQL) with pagination support.\n\nThis function performs a search across all content items using the provided CQL query.\nIt supports complex queries with logical operators and field comparisons, and returns\npaginated results.",
        "parameters": {
          "type": "object",
          "properties": {
            "cql": {
              "type": "string",
              "description": "The CQL query string to use for searching. The query can include:\n- Field comparisons (e.g., \"type='page'\", \"space=\"TEST\"\")\n- Logical operators (AND, OR, NOT)\n- Parentheses for grouping\n- Comparison operators (=, !=, >, <, >=, <=, ~, !~)\nAllowed fields:\n    - Ancestor, Container, Content, Created, Creator, Contributor\n    - Favourite/favorite, ID, Label, Last modified, Macro, Mention\n    - Parent, Space, Space category, Space key, Space title, Space type\n    - Text, Title, Type, Watcher, status"
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination. Defaults to 0. Must be non-negative."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return. Defaults to 25. Must be non-negative."
            }
          },
          "required": [
            "cql"
          ]
        }
      },
      "get_content_list": {
        "name": "get_content_list",
        "description": "Returns a paginated list of content filtered by the specified parameters.\n\nThis function retrieves all content from the database and applies filters based\non the provided arguments. The results are paginated using the start and limit parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of content (e.g., \"page\", \"blogpost\", \"comment\").\nOnly content matching this type is returned. If None, no filtering is applied."
            },
            "spaceKey": {
              "type": "string",
              "description": "The key of the space in which the content is located.\nOnly content in the specified space is returned."
            },
            "title": {
              "type": "string",
              "description": "The title of the content. Filters to content with a matching title. Required if type is \"page\"."
            },
            "status": {
              "type": "string",
              "description": "The status of the content (e.g., \"current\", \"trashed\", or \"any\").\nDefaults to \"current\". If explicitly set to None, it's treated like \"current\" by the core logic.\nIf \"any\", the status filter is ignored."
            },
            "postingDay": {
              "type": "string",
              "description": "The posting day of the content. This filter is only applied\nif the content type is \"blogpost\". Format: yyyy-mm-dd. Example: \"2024-01-01\"."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include in the\nreturned content objects. Supported values:\n- space: Expands the space field with space key\n- version: Expands the version information\n- history: Expands the content history"
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination. Defaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return. Defaults to 25."
            }
          }
        }
      },
      "get_content_history": {
        "name": "get_content_history",
        "description": "Returns the history of a piece of content.\n\nThis method returns the metadata regarding creation and versioning for the content item\nidentified by the given id. It uses a global history store (DB[\"history\"]) that is updated\nwhenever content is created or updated. Each history record includes the version number,\ncreatedBy, createdDate, and lastUpdated timestamp.\n\nThe returned structure is a dictionary with the following keys:\n    - id (str): The unique identifier of the content.\n    - results (List[Dict[str, Any]]): An ordered list (ascending by version number) of history records.\n        Each record contains:\n          - version (int): The version number.\n          - createdBy (str): The user that created or updated that version.\n          - createdDate (str): The ISO timestamp when that version was created.\n          - lastUpdated (str): The ISO timestamp when that version was last updated.\n    - latest (Dict[str, Any]): The latest version record.\n    - createdBy (str): The creator from the latest record.\n    - createdDate (str): The creation date from the latest record.\n    - previousVersion (Optional[Dict[str, Any]]): The previous version record, if available.\n    - nextVersion (Optional[Dict[str, Any]]): Always None, since the current version is the latest.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the content."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to expand\n(e.g., \"previousVersion,nextVersion,lastUpdated\").\nThis parameter is not used to filter the output in this simulation."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_content_children": {
        "name": "get_content_children",
        "description": "Returns a mapping of direct children content grouped by type.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the parent content."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include.\nThis parameter is not utilized in this simulation. Defaults to None."
            },
            "parentVersion": {
              "type": "integer",
              "description": "The version number of the parent content. This is included\nfor potential version-related logic, but is not used in the simulation. Defaults to 0."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_content_children_by_type": {
        "name": "get_content_children_by_type",
        "description": "Returns direct children content of a specified type.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the parent content."
            },
            "child_type": {
              "type": "string",
              "description": "The type of child content to retrieve (e.g., \"page\", \"blogpost\", \"comment\", \"attachment\")."
            },
            "expand": {
              "type": "string",
              "description": "Additional fields to include in the result. Not used in this simulation.\nDefaults to None."
            },
            "parentVersion": {
              "type": "integer",
              "description": "The version of the parent content. Provided for potential future use; not used\nin this simulation. Defaults to 0."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination. Defaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of child content items to return. Defaults to 25."
            }
          },
          "required": [
            "child_type",
            "id"
          ]
        }
      },
      "get_content_comments": {
        "name": "get_content_comments",
        "description": "Returns the comments associated with a specific content item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the parent content."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include in the\nreturned comment objects. Not utilized in this simulation. Defaults to None."
            },
            "parentVersion": {
              "type": "integer",
              "description": "The version of the parent content. This parameter is provided for\ncompleteness but is not used in this simulation. Defaults to 0."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination. Defaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of comment objects to return. Defaults to 25."
            },
            "location": {
              "type": "string",
              "description": "An optional parameter to specify a location filter within the\ncontent hierarchy. Not used in this simulation. Defaults to None."
            },
            "depth": {
              "type": "string",
              "description": "An optional parameter to control the depth of comment retrieval.\nNot used in this simulation. Defaults to None."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "create_content_attachments": {
        "name": "create_content_attachments",
        "description": "Creates new attachments for a specific content item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the parent content."
            },
            "file": {
              "type": "object",
              "description": "The file object to attach."
            },
            "comment": {
              "type": "string",
              "description": "A comment describing the attachment. Defaults to None."
            },
            "minorEdit": {
              "type": "boolean",
              "description": "Whether this is a minor edit. Defaults to False."
            }
          },
          "required": [
            "file",
            "id"
          ]
        }
      },
      "update_attachment_metadata": {
        "name": "update_attachment_metadata",
        "description": "Updates the metadata of an existing attachment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the parent content."
            },
            "attachmentId": {
              "type": "string",
              "description": "The unique identifier of the attachment to update."
            },
            "body": {
              "type": "object",
              "properties": {},
              "description": "The updated metadata for the attachment."
            }
          },
          "required": [
            "attachmentId",
            "body",
            "id"
          ]
        }
      },
      "update_attachment_data": {
        "name": "update_attachment_data",
        "description": "Updates the binary data of an existing attachment.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the parent content."
            },
            "attachmentId": {
              "type": "string",
              "description": "The unique identifier of the attachment to update."
            },
            "file": {
              "type": "object",
              "description": "The new file object to replace the existing attachment."
            },
            "comment": {
              "type": "string",
              "description": "A comment describing the update."
            },
            "minorEdit": {
              "type": "boolean",
              "description": "Whether this is a minor edit."
            }
          },
          "required": [
            "attachmentId",
            "file",
            "id"
          ]
        }
      },
      "get_content_descendants": {
        "name": "get_content_descendants",
        "description": "Returns all descendants of a content item, grouped by type.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the parent content."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include.\nNot used in this simulation."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of descendants to return per type."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_content_descendants_by_type": {
        "name": "get_content_descendants_by_type",
        "description": "Returns descendants of a specific type for a content item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the parent content."
            },
            "type": {
              "type": "string",
              "description": "The type of descendants to retrieve (e.g., \"page\", \"blogpost\", \"comment\", \"attachment\")."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include.\nNot used in this simulation."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of descendants to return."
            }
          },
          "required": [
            "id",
            "type"
          ]
        }
      },
      "get_content_labels": {
        "name": "get_content_labels",
        "description": "Returns a paginated list of content labels. If a prefix is provided,\n\nit filters labels that start with the given prefix.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the content to get labels for."
            },
            "prefix": {
              "type": "string",
              "description": "Optional prefix to filter labels by."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination. Must be non-negative."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of labels to return. Must be positive."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "add_content_labels": {
        "name": "add_content_labels",
        "description": "Adds labels to a content item. If the content does not have existing labels,\n\na new entry is created. Returns the updated list of labels.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the content to add labels to."
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of labels to add."
            }
          },
          "required": [
            "id",
            "labels"
          ]
        }
      },
      "delete_content_labels": {
        "name": "delete_content_labels",
        "description": "Deletes labels from a content item. If a specific label is provided,\n\nonly that label is deleted. Otherwise, all labels are deleted.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the content from which labels should be deleted."
            },
            "label": {
              "type": "string",
              "description": "Optional specific label to delete."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_content_properties": {
        "name": "get_content_properties",
        "description": "Returns a paginated list of content properties for the specified content.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content"
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of properties to expand"
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination"
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of properties to return"
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "create_content_property": {
        "name": "create_content_property",
        "description": "Creates a new property for a specified content item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content"
            },
            "body": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The property key"
                },
                "value": {
                  "type": "object",
                  "properties": {
                    "some": {
                      "type": "string",
                      "description": "The property value"
                    }
                  },
                  "description": "The property value, any key-value pair",
                  "required": [
                    "some"
                  ]
                }
              },
              "description": "A JSON object containing the property key and value",
              "required": [
                "key",
                "value"
              ]
            }
          },
          "required": [
            "body",
            "id"
          ]
        }
      },
      "get_content_property_details": {
        "name": "get_content_property_details",
        "description": "Retrieves a specific property of a content item by its key.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content"
            },
            "key": {
              "type": "string",
              "description": "The key of the property to retrieve"
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list to expand the property details"
            }
          },
          "required": [
            "id",
            "key"
          ]
        }
      },
      "update_content_property": {
        "name": "update_content_property",
        "description": "Updates an existing content property with a new value and an incremented version.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content"
            },
            "key": {
              "type": "string",
              "description": "The key of the property to update"
            },
            "body": {
              "type": "object",
              "properties": {},
              "description": "A JSON object containing the updated property value and new version"
            }
          },
          "required": [
            "body",
            "id",
            "key"
          ]
        }
      },
      "delete_content_property": {
        "name": "delete_content_property",
        "description": "Deletes a property from a content item identified by its key.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content."
            },
            "key": {
              "type": "string",
              "description": "The key of the property to delete"
            }
          },
          "required": [
            "id",
            "key"
          ]
        }
      },
      "create_content_property_for_key": {
        "name": "create_content_property_for_key",
        "description": "Creates a new content property for a specified key when the version is 1.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the content."
            },
            "key": {
              "type": "string",
              "description": "The key for the property."
            },
            "body": {
              "type": "object",
              "properties": {},
              "description": "A JSON object representing the property, including version=1"
            }
          },
          "required": [
            "body",
            "id",
            "key"
          ]
        }
      },
      "get_content_restrictions_by_operation": {
        "name": "get_content_restrictions_by_operation",
        "description": "Retrieves all restrictions for a content item, grouped by operation type.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the content item."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include.\nThis parameter is not utilized in this simulation. Defaults to None."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "get_content_restrictions_for_operation": {
        "name": "get_content_restrictions_for_operation",
        "description": "Retrieves restrictions for a specific operation on a content item.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the content item."
            },
            "operationKey": {
              "type": "string",
              "description": "The operation type (e.g., \"read\" or \"update\")."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of additional fields to include.\nThis parameter is not utilized in this simulation. Defaults to None."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination. Defaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return. Defaults to 100."
            }
          },
          "required": [
            "id",
            "operationKey"
          ]
        }
      },
      "convert_content_body": {
        "name": "convert_content_body",
        "description": "Converts a content body from one format to another.",
        "parameters": {
          "type": "object",
          "properties": {
            "to": {
              "type": "string",
              "description": "The target format to convert to. Valid values are:\n- \"view\": For viewing the content.\n- \"export_view\": For exporting the content.\n- \"editor\": For editing the content.\n- \"storage\": For storing the content."
            },
            "body": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The current content format type."
                },
                "value": {
                  "type": "string",
                  "description": "The actual content value."
                },
                "representation": {
                  "type": "string",
                  "description": "The current representation of the content."
                }
              },
              "description": "The content body to convert, containing:",
              "required": [
                "representation",
                "type",
                "value"
              ]
            }
          },
          "required": [
            "body",
            "to"
          ]
        }
      },
      "search_content": {
        "name": "search_content",
        "description": "Search for content based on a CQL query.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The CQL query to search for"
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of properties to expand"
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination (default: 0)"
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return (default: 100)"
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "get_spaces": {
        "name": "get_spaces",
        "description": "Returns a paginated list of all spaces.\n\nRetrieves a list of space dictionaries for the provided parameters.",
        "parameters": {
          "type": "object",
          "properties": {
            "spaceKey": {
              "type": "string",
              "description": "A unique identifier to filter spaces by.\nDefaults to None."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination.\nDefaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of spaces to return.\nDefaults to 25."
            }
          }
        }
      },
      "create_space": {
        "name": "create_space",
        "description": "Creates a new space.\n\nCreates and returns a new space dictionary from the provided data.\nNote: If 'name' or 'description' are not provided in the body, Pydantic model\nvalidation ensures they default to an empty string.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The unique identifier for the space. (Mandatory)"
                },
                "name": {
                  "type": "string",
                  "description": "The display name of the space."
                },
                "description": {
                  "type": "object",
                  "description": "An optional description of the space."
                }
              },
              "description": "A dictionary containing:",
              "required": [
                "key",
                "name"
              ]
            }
          },
          "required": [
            "body"
          ]
        }
      },
      "create_private_space": {
        "name": "create_private_space",
        "description": "Creates a new private space.\n\nThis function behaves identically to create_space and returns a new private space dictionary.",
        "parameters": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The unique identifier for the space."
                },
                "name": {
                  "type": "string",
                  "description": "The display name of the space."
                },
                "description": {
                  "type": "object",
                  "description": "An optional description of the space."
                }
              },
              "description": "A dictionary containing:",
              "required": [
                "key",
                "name"
              ]
            }
          },
          "required": [
            "body"
          ]
        }
      },
      "update_space": {
        "name": "update_space",
        "description": "Updates an existing space.\n\nUpdates and returns a space dictionary for the space specified by spaceKey.",
        "parameters": {
          "type": "object",
          "properties": {
            "spaceKey": {
              "type": "string",
              "description": "The unique identifier of the space to update."
            },
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The new display name of the space."
                },
                "description": {
                  "type": "string",
                  "description": "The new description of the space."
                }
              },
              "description": "A dictionary containing the fields to update:",
              "required": [
                "description",
                "name"
              ]
            }
          },
          "required": [
            "body",
            "spaceKey"
          ]
        }
      },
      "delete_space": {
        "name": "delete_space",
        "description": "Deletes a space and tracks the deletion task.\n\nDeletes the space identified by spaceKey and returns a task dictionary that tracks the deletion process.\nNote: The deletion task is simulated and marked as complete immediately.",
        "parameters": {
          "type": "object",
          "properties": {
            "spaceKey": {
              "type": "string",
              "description": "The unique identifier of the space to delete."
            }
          },
          "required": [
            "spaceKey"
          ]
        }
      },
      "get_space_details": {
        "name": "get_space_details",
        "description": "Retrieves details about a specific space.\n\nReturns the space dictionary for the provided spaceKey.",
        "parameters": {
          "type": "object",
          "properties": {
            "spaceKey": {
              "type": "string",
              "description": "The unique identifier of the space."
            }
          },
          "required": [
            "spaceKey"
          ]
        }
      },
      "get_space_content": {
        "name": "get_space_content",
        "description": "Retrieves the content within a specific space.\n\nReturns a list of content item dictionaries for the space identified by spaceKey.\nNote: The 'depth' and 'expand' parameters are included for API compatibility but are not fully implemented.",
        "parameters": {
          "type": "object",
          "properties": {
            "spaceKey": {
              "type": "string",
              "description": "The unique identifier of the space. Must be a non-empty string."
            },
            "depth": {
              "type": "string",
              "description": "The depth of content to retrieve. Defaults to None."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of properties to expand. Defaults to None."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination.\nDefaults to 0. Must be a non-negative integer."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of content items to return.\nDefaults to 25. Must be a positive integer."
            }
          },
          "required": [
            "spaceKey"
          ]
        }
      },
      "get_space_content_by_type": {
        "name": "get_space_content_by_type",
        "description": "Retrieves content of a specific type within a space.\n\nReturns a list of content item dictionaries matching the specified type for the given spaceKey.\nNote: The function first retrieves all content for the space and then filters by type.\n      The 'depth' and 'expand' parameters are accepted for API compatibility but are not fully implemented.",
        "parameters": {
          "type": "object",
          "properties": {
            "spaceKey": {
              "type": "string",
              "description": "The unique identifier of the space."
            },
            "depth": {
              "type": "string",
              "description": "The depth of content to retrieve. Defaults to None."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of properties to expand. Defaults to None."
            },
            "type": {
              "type": "string",
              "description": "The type of content to filter (e.g., \"page\", \"blogpost\")."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination after filtering.\nDefaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of content items to return after filtering.\nDefaults to 25."
            }
          },
          "required": [
            "spaceKey",
            "type"
          ]
        }
      },
      "get_long_tasks": {
        "name": "get_long_tasks",
        "description": "Returns a paginated list of all long-running tasks.\n\nRetrieves a list of task dictionaries for all long-running tasks.\nNote: The 'expand' parameter is accepted for API compatibility but is not currently processed.",
        "parameters": {
          "type": "object",
          "properties": {
            "expand": {
              "type": "string",
              "description": "A comma-separated list of properties to expand.\nDefaults to None.\nNote: Not implemented."
            },
            "start": {
              "type": "integer",
              "description": "The starting index for pagination.\nDefaults to 0."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of tasks to return.\nDefaults to 100."
            }
          }
        }
      },
      "get_long_task_details": {
        "name": "get_long_task_details",
        "description": "Returns a specific long-running task by its ID.\n\nRetrieves the long-running task dictionary that matches the provided task ID.\nNote: The 'expand' parameter is accepted for API compatibility but is not currently processed.",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the task."
            },
            "expand": {
              "type": "string",
              "description": "A comma-separated list of properties to expand.\nDefaults to None."
            }
          },
          "required": [
            "id"
          ]
        }
      }
    },
    "phone": {
      "make_call": {
        "name": "make_call",
        "description": "Make a call to a single recipient with exactly one phone number endpoint.\n\nTo resolve the phone number endpoint, you may have to call one or more tools\nprior to calling this operation. Before calling this operation, always check\nif the Geofencing Policy applies. If there is a recipient with more than one\nphone number endpoints, ask the user for the intended endpoint by invoking\nshow_call_recipient_choices. Do not call this operation until the user has\nchosen a single recipient with exactly one phone number endpoint.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": "object",
              "properties": {
                "contact_id": {
                  "type": "object",
                  "description": "Unique identifier for the contact"
                },
                "contact_name": {
                  "type": "object",
                  "description": "Name of the contact"
                },
                "contact_endpoints": {
                  "type": "object",
                  "description": "List of endpoints for the contact"
                },
                "contact_photo_url": {
                  "type": "object",
                  "description": "URL to the contact's profile photo"
                },
                "recipient_type": {
                  "type": "object",
                  "description": "Type of recipient (\"CONTACT\", \"BUSINESS\", \"DIRECT\", \"VOICEMAIL\")"
                },
                "address": {
                  "type": "object",
                  "description": "Address of the recipient"
                },
                "distance": {
                  "type": "object",
                  "description": "Distance to the recipient"
                }
              },
              "description": "The recipient of the phone call. Contains:"
            },
            "on_speakerphone": {
              "type": "boolean",
              "description": "If True, the phone call will be placed on the\nspeakerphone. Defaults to False."
            },
            "recipient_name": {
              "type": "string",
              "description": "The recipient's name."
            },
            "recipient_phone_number": {
              "type": "string",
              "description": "The phone number of the\nrecipient to make the call to, e.g. \"+11234567890\"."
            },
            "recipient_photo_url": {
              "type": "string",
              "description": "The url to the profile photo\nof the recipient."
            }
          }
        }
      },
      "prepare_call": {
        "name": "prepare_call",
        "description": "Prepare a call to one or more recipients, given provided recipient information.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contact_id": {
                    "type": "object",
                    "description": "Unique identifier for the contact"
                  },
                  "contact_name": {
                    "type": "object",
                    "description": "Name of the contact"
                  },
                  "contact_endpoints": {
                    "type": "object",
                    "description": "List of endpoints for the contact"
                  },
                  "contact_photo_url": {
                    "type": "object",
                    "description": "URL to the contact's profile photo"
                  },
                  "recipient_type": {
                    "type": "object",
                    "description": "Type of recipient (\"CONTACT\", \"BUSINESS\", \"DIRECT\", \"VOICEMAIL\")"
                  },
                  "address": {
                    "type": "object",
                    "description": "Address of the recipient"
                  },
                  "distance": {
                    "type": "object",
                    "description": "Distance to the recipient"
                  }
                }
              },
              "description": "A list of recipient objects to\nprepare call cards for. Each recipient dict contains:"
            }
          }
        }
      },
      "show_call_recipient_choices": {
        "name": "show_call_recipient_choices",
        "description": "Show a list of one or more recipients to the user to choose from.\n\nThis operation uses a UI component to show the list of choices. You do not\nneed to enumerate the list of choices in your final response. If you call\nthis operation, you may not call other operations from this tool before\ndrafting the final response.\n\nInvoke this operation in the following scenarios:\n    * There are multiple recipients (contacts or businesses) to choose from.\n    * There are multiple phone number endpoints for a business to choose from.\n    * There are multiple phone number endpoints for a single contact to choose from.\n    * There is a single contact recipient with `confidence_level` LOW.\n    * The Geofencing Policy applies.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipients": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "contact_id": {
                    "type": "object",
                    "description": "Unique identifier for the contact"
                  },
                  "contact_name": {
                    "type": "object",
                    "description": "Name of the contact"
                  },
                  "contact_endpoints": {
                    "type": "object",
                    "description": "List of endpoints for the contact"
                  },
                  "contact_photo_url": {
                    "type": "object",
                    "description": "URL to the contact's profile photo"
                  },
                  "recipient_type": {
                    "type": "object",
                    "description": "Type of recipient (\"CONTACT\", \"BUSINESS\", \"DIRECT\", \"VOICEMAIL\")"
                  },
                  "address": {
                    "type": "object",
                    "description": "Address of the recipient"
                  },
                  "distance": {
                    "type": "object",
                    "description": "Distance to the recipient"
                  }
                }
              },
              "description": "A list of recipient objects to\ndisplay as choices. Each recipient dict contains:"
            }
          }
        }
      },
      "show_call_recipient_not_found_or_specified": {
        "name": "show_call_recipient_not_found_or_specified",
        "description": "Show a message to the user when the call recipient is not found or not specified.\n\nYou must attempt to search for a recipient before calling this operation.\nCall this operation when no match is found for a recipient, or when the user\nexpresses an intent to call without specifying a recipient.",
        "parameters": {
          "type": "object",
          "properties": {
            "contact_name": {
              "type": "string",
              "description": "The recipient name that was searched for."
            }
          }
        }
      }
    },
    "sdm": {
      "list_structures": {
        "name": "list_structures",
        "description": "Lists all the structures.\n\nMakes a GET call to retrieve a list of all structures that the user has authorized\nfor a given enterprise. The response typically includes a collection of structure objects.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_device_info": {
        "name": "get_device_info",
        "description": "Retrieves information about an authorized device.",
        "parameters": {
          "type": "object",
          "properties": {
            "device_id": {
              "type": "string",
              "description": "The unique identifier of the device within the enterprise."
            },
            "project_id": {
              "type": "string",
              "description": "The unique identifier of the enterprise or project."
            }
          },
          "required": [
            "device_id",
            "project_id"
          ]
        }
      },
      "get_events_list": {
        "name": "get_events_list",
        "description": "Returns a list of events that were triggered.",
        "parameters": {
          "type": "object",
          "properties": {
            "device_id": {
              "type": "string",
              "description": "Optional unique identifier of a device to filter events. For example, \"CAM_001\"."
            },
            "event_type": {
              "type": "string",
              "description": "Optional event_type to filter events.\nShould be one of: \"Motion\", \"Person\", \"Sound\" or \"Chime\".\nIt also accepts formats such as: \"sdm.devices.events.CameraMotion.Motion\".\nIf no device_id or event_type provided, returns all events."
            }
          }
        }
      },
      "list_devices": {
        "name": "list_devices",
        "description": "Makes a GET call to retrieve a list of all devices that the user has authorized\n\nfor a given enterprise. The response typically includes a collection of device objects.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "execute_command": {
        "name": "execute_command",
        "description": "Executes a command on a specific device managed by the enterprise.",
        "parameters": {
          "type": "object",
          "properties": {
            "device_id": {
              "type": "string",
              "description": "The unique identifier of the device within the enterprise. For example, \"CAM_001\""
            },
            "project_id": {
              "type": "string",
              "description": "The unique identifier of the enterprise or project."
            },
            "command_request": {
              "type": "object",
              "description": "The command request payload, Contains the keys:",
              "properties": {
                "command": {
                  "type": "string",
                  "description": "The name of the command to execute. One of the following (followed by a brief explanation):\n    - sdm.devices.commands.generate_camera_event_image (retrieve the image from a camera through a triggered event)\n    - sdm.devices.commands.generate_rtsp_stream (start the rtsp stream mode of a camera)\n    - sdm.devices.commands.stop_rtsp_stream (stop the rtsp stream mode of a camera)\n    - sdm.devices.commands.generate_image_from_rtsp_stream (retrieve the image from a camera through its ongoing rtsp stream)\n    - sdm.devices.commands.generate_web_rtc_stream (start the web_rtc stream mode of a camera)\n    - sdm.devices.commands.stop_web_rtc_stream (stop the web_rtc stream mode of a camera)\n    - sdm.devices.commands.generate_image_from_web_rtc_stream (retrieve the image from a camera through its ongoing web_rtc stream)"
                },
                "params": {
                  "type": "object",
                  "description": "Each command may have its own parameters, represented by key, value dictionaries. If None, the command does not have params. Use these as reference:\n    - sdm.devices.commands.generate_camera_event_image: \n        - event_id: (str): The ID of the triggered event.\n    - sdm.devices.commands.generate_rtsp_stream: \n        - None.\n    - sdm.devices.commands.stop_rtsp_stream:\n        - stream_extension_token: (str): The extension token of the stream to stop.\n    - sdm.devices.commands.generate_image_from_rtsp_stream: \n        - rtsp_url: (str): The RTSP URL of the stream.\n    - sdm.devices.commands.generate_web_rtc_stream:\n        - offer_sdp: (str): The SDP of the offer.\n    - sdm.devices.commands.stop_web_rtc_stream:\n        - stream_media_session_id: (str): The media session ID of the stream to stop.\n    - sdm.devices.commands.generate_image_from_web_rtc_stream:\n        - answer_sdp: (str): The SDP of the answer."
                }
              },
              "required": [
                "command",
                "params"
              ]
            }
          },
          "required": [
            "command_request",
            "device_id",
            "project_id"
          ]
        }
      }
    },
    "salesforce": {
      "create_event": {
        "name": "create_event",
        "description": "Creates a new event.",
        "parameters": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "The name of the event."
            },
            "Subject": {
              "type": "string",
              "description": "The subject of the event."
            },
            "StartDateTime": {
              "type": "string",
              "description": "Start time of the event."
            },
            "EndDateTime": {
              "type": "string",
              "description": "End time of the event."
            },
            "Description": {
              "type": "string",
              "description": "Description of the event."
            },
            "Location": {
              "type": "string",
              "description": "Location of the event."
            },
            "IsAllDayEvent": {
              "type": "boolean",
              "description": "Whether the event is all day."
            },
            "OwnerId": {
              "type": "string",
              "description": "ID of the event owner."
            },
            "WhoId": {
              "type": "string",
              "description": "ID of the related contact."
            },
            "WhatId": {
              "type": "string",
              "description": "ID of the related record."
            }
          }
        }
      },
      "delete_event": {
        "name": "delete_event",
        "description": "Deletes an event.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "string",
              "description": "The ID of the event to delete."
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "describe_event_layout": {
        "name": "describe_event_layout",
        "description": "Describes the layout of an event.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "string",
              "description": "The ID of the event to describe."
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "describe_event_object": {
        "name": "describe_event_object",
        "description": "Describes the object (Event).",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_deleted_events": {
        "name": "get_deleted_events",
        "description": "Retrieves deleted events.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_updated_events": {
        "name": "get_updated_events",
        "description": "Retrieves updated events.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "query_events": {
        "name": "query_events",
        "description": "Queries events based on specified criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "criteria": {
              "type": "object",
              "properties": {
                "Subject": {
                  "type": "string",
                  "description": "The subject of the event."
                },
                "IsAllDayEvent": {
                  "type": "boolean",
                  "description": "Whether the event is all day."
                },
                "StartDateTime": {
                  "type": "string",
                  "description": "Start time of the event."
                },
                "EndDateTime": {
                  "type": "string",
                  "description": "End time of the event."
                },
                "Description": {
                  "type": "string",
                  "description": "Description of the event."
                },
                "Location": {
                  "type": "string",
                  "description": "Location of the event."
                },
                "OwnerId": {
                  "type": "string",
                  "description": "ID of the event owner."
                }
              },
              "description": "Key-value pairs to filter events. Example:",
              "required": [
                "Description",
                "EndDateTime",
                "IsAllDayEvent",
                "Location",
                "OwnerId",
                "StartDateTime",
                "Subject"
              ]
            }
          }
        }
      },
      "retrieve_event_details": {
        "name": "retrieve_event_details",
        "description": "Retrieves details of a specific event.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "string",
              "description": "The ID of the event to retrieve."
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "search_events": {
        "name": "search_events",
        "description": "Searches for events based on specified search criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "search_term": {
              "type": "string",
              "description": "The term to search for in event fields."
            }
          },
          "required": [
            "search_term"
          ]
        }
      },
      "undelete_event": {
        "name": "undelete_event",
        "description": "Restores a deleted event. (Place holder - no actual deletion tracking).",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "string",
              "description": "The ID of the event to undelete."
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "update_event": {
        "name": "update_event",
        "description": "Updates an existing event.",
        "parameters": {
          "type": "object",
          "properties": {
            "event_id": {
              "type": "string",
              "description": "The ID of the event to update."
            },
            "Name": {
              "type": "string",
              "description": "The name of the event."
            },
            "Subject": {
              "type": "string",
              "description": "The subject of the event."
            },
            "StartDateTime": {
              "type": "string",
              "description": "Start time of the event."
            },
            "EndDateTime": {
              "type": "string",
              "description": "End time of the event."
            },
            "Description": {
              "type": "string",
              "description": "Description of the event."
            },
            "Location": {
              "type": "string",
              "description": "Location of the event."
            },
            "IsAllDayEvent": {
              "type": "boolean",
              "description": "Whether the event is all day."
            },
            "OwnerId": {
              "type": "string",
              "description": "ID of the event owner."
            },
            "WhoId": {
              "type": "string",
              "description": "ID of the related contact."
            },
            "WhatId": {
              "type": "string",
              "description": "ID of the related record."
            }
          },
          "required": [
            "event_id"
          ]
        }
      },
      "upsert_event": {
        "name": "upsert_event",
        "description": "Creates or updates an event.",
        "parameters": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "The name of the event."
            },
            "Id": {
              "type": "string",
              "description": "Event ID (required for update)."
            },
            "Subject": {
              "type": "string",
              "description": "The subject of the event."
            },
            "StartDateTime": {
              "type": "string",
              "description": "Start time of the event."
            },
            "EndDateTime": {
              "type": "string",
              "description": "End time of the event."
            },
            "Description": {
              "type": "string",
              "description": "Description of the event."
            },
            "Location": {
              "type": "string",
              "description": "Location of the event."
            },
            "IsAllDayEvent": {
              "type": "boolean",
              "description": "Whether the event is all day."
            },
            "OwnerId": {
              "type": "string",
              "description": "ID of the event owner."
            },
            "WhoId": {
              "type": "string",
              "description": "ID of the related contact."
            },
            "WhatId": {
              "type": "string",
              "description": "ID of the related record."
            }
          }
        }
      },
      "execute_soql_query": {
        "name": "execute_soql_query",
        "description": "Executes a SOQL-like query against the in-memory database.\n\nThe query string is first URL-decoded. \nThe parser has specific behaviors and improved parsing logic as detailed below.",
        "parameters": {
          "type": "object",
          "properties": {
            "q": {
              "type": "string",
              "description": "The SOQL-like query string. Example:\n\"SELECT Name, Location FROM Event WHERE Location = 'Boardroom' ORDER BY Name ASC OFFSET 0 LIMIT 5\""
            }
          },
          "required": [
            "q"
          ]
        }
      },
      "parse_where_clause_conditions": {
        "name": "parse_where_clause_conditions",
        "description": "Parse the conditions in the WHERE clause.\n\nHandles '=', 'IN', 'LIKE', and 'CONTAINS'.",
        "parameters": {
          "type": "object",
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of condition strings to parse. Example:\n- \"Subject = 'Meeting'\"\n- \"IsAllDayEvent = true\"\n- \"Location IN ('Boardroom', 'Conference Room')\"\n- \"Description LIKE '%important%'\"\n- \"Subject CONTAINS 'review'\""
            }
          },
          "required": [
            "conditions"
          ]
        }
      },
      "create_task": {
        "name": "create_task",
        "description": "Creates a new task.",
        "parameters": {
          "type": "object",
          "properties": {
            "Priority": {
              "type": "string",
              "description": "Priority of the task (required)."
            },
            "Status": {
              "type": "string",
              "description": "Status of the task (required)."
            },
            "Id": {
              "type": "string",
              "description": "Custom ID for the task. If not provided, a UUID will be generated."
            },
            "Name": {
              "type": "string",
              "description": "The name of the task."
            },
            "Subject": {
              "type": "string",
              "description": "The subject of the task."
            },
            "Description": {
              "type": "string",
              "description": "Description of the task."
            },
            "ActivityDate": {
              "type": "string",
              "description": "Due date of the task."
            },
            "DueDate": {
              "type": "string",
              "description": "Alternative field for task due date."
            },
            "OwnerId": {
              "type": "string",
              "description": "ID of the task owner."
            },
            "WhoId": {
              "type": "string",
              "description": "ID of the related contact."
            },
            "WhatId": {
              "type": "string",
              "description": "ID of the related record."
            },
            "IsReminderSet": {
              "type": "boolean",
              "description": "Whether reminder is set."
            },
            "ReminderDateTime": {
              "type": "string",
              "description": "Reminder date and time."
            }
          },
          "required": [
            "Priority",
            "Status"
          ]
        }
      },
      "delete_task": {
        "name": "delete_task",
        "description": "Deletes a task.",
        "parameters": {
          "type": "object",
          "properties": {
            "task_id": {
              "type": "string",
              "description": "The ID of the task to delete."
            }
          },
          "required": [
            "task_id"
          ]
        }
      },
      "describe_task_layout": {
        "name": "describe_task_layout",
        "description": "Describes the layout of a task.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "describe_task_object": {
        "name": "describe_task_object",
        "description": "Describes Task SObjects.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_deleted_tasks": {
        "name": "get_deleted_tasks",
        "description": "Retrieves deleted tasks.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_updated_tasks": {
        "name": "get_updated_tasks",
        "description": "Retrieves updated tasks.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "query_tasks": {
        "name": "query_tasks",
        "description": "Queries tasks based on specified criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "criteria": {
              "type": "object",
              "properties": {},
              "description": "Key-value pairs to filter tasks.\nIf provided, the dictionary structure is validated. Example:\n{\n    \"Subject\": Optional[str],\n    \"Priority\": Optional[str],\n    \"Status\": Optional[str],\n    \"ActivityDate\": Optional[str] # e.g., \"2024-01-01\"\n}\nAll keys within the criteria dictionary are optional."
            }
          }
        }
      },
      "retrieve_task_details": {
        "name": "retrieve_task_details",
        "description": "Retrieves a task.",
        "parameters": {
          "type": "object",
          "properties": {
            "task_id": {
              "type": "string",
              "description": "The ID of the task to retrieve."
            }
          },
          "required": [
            "task_id"
          ]
        }
      },
      "search_tasks": {
        "name": "search_tasks",
        "description": "Searches for tasks based on specified search criteria.",
        "parameters": {
          "type": "object",
          "properties": {
            "search_term": {
              "type": "string",
              "description": "The term to search for in task fields."
            }
          },
          "required": [
            "search_term"
          ]
        }
      },
      "undelete_task": {
        "name": "undelete_task",
        "description": "Recovers deleted tasks. (Placeholder - no actual deletion tracking).",
        "parameters": {
          "type": "object",
          "properties": {
            "task_id": {
              "type": "string",
              "description": "The ID of the task to undelete."
            }
          },
          "required": [
            "task_id"
          ]
        }
      },
      "update_task": {
        "name": "update_task",
        "description": "Updates a task.",
        "parameters": {
          "type": "object",
          "properties": {
            "task_id": {
              "type": "string",
              "description": "The ID of the task to update."
            },
            "Name": {
              "type": "string",
              "description": "The name of the task."
            },
            "Subject": {
              "type": "string",
              "description": "The subject of the task."
            },
            "Priority": {
              "type": "string",
              "description": "Priority of the task."
            },
            "Status": {
              "type": "string",
              "description": "Status of the task."
            },
            "Description": {
              "type": "string",
              "description": "Description of the task."
            },
            "ActivityDate": {
              "type": "string",
              "description": "Due date of the task."
            },
            "OwnerId": {
              "type": "string",
              "description": "ID of the task owner."
            },
            "WhoId": {
              "type": "string",
              "description": "ID of the related contact."
            },
            "WhatId": {
              "type": "string",
              "description": "ID of the related record."
            },
            "IsReminderSet": {
              "type": "boolean",
              "description": "Whether reminder is set."
            },
            "ReminderDateTime": {
              "type": "string",
              "description": "Reminder date and time."
            }
          },
          "required": [
            "task_id"
          ]
        }
      },
      "upsert_task": {
        "name": "upsert_task",
        "description": "Creates or updates a task.",
        "parameters": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "string",
              "description": "Task ID (required for update)."
            },
            "Name": {
              "type": "string",
              "description": "The name of the task."
            },
            "Subject": {
              "type": "string",
              "description": "The subject of the task."
            },
            "Priority": {
              "type": "string",
              "description": "Priority of the task."
            },
            "Status": {
              "type": "string",
              "description": "Status of the task."
            },
            "Description": {
              "type": "string",
              "description": "Description of the task."
            },
            "ActivityDate": {
              "type": "string",
              "description": "Due date of the task."
            },
            "OwnerId": {
              "type": "string",
              "description": "ID of the task owner."
            },
            "WhoId": {
              "type": "string",
              "description": "ID of the related contact."
            },
            "WhatId": {
              "type": "string",
              "description": "ID of the related record."
            },
            "IsReminderSet": {
              "type": "boolean",
              "description": "Whether reminder is set."
            },
            "ReminderDateTime": {
              "type": "string",
              "description": "Reminder date and time."
            }
          }
        }
      }
    },
    "slack": {
      "get_message_reactions": {
        "name": "get_message_reactions",
        "description": "Gets reactions for a specific message in a channel.\n\nThis function is used to get reactions for a specific message in a channel.\nIt can return either a summary of the reactions or all the reaction details.\nIf full is True, it returns all the reaction details.\nIf full is False, it returns a summary of the reactions.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "ID of the channel. Cannot be empty."
            },
            "message_ts": {
              "type": "string",
              "description": "The timestamp of the message to get reactions for.\nThis should be a string representation of a Unix timestamp with\nup to 6 decimal places for microsecond precision. Cannot be empty."
            },
            "full": {
              "type": "boolean",
              "description": "If true, return all reaction details. Defaults to False."
            }
          },
          "required": [
            "channel_id",
            "message_ts"
          ]
        }
      },
      "add_reaction_to_message": {
        "name": "add_reaction_to_message",
        "description": "Adds a reaction to a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID. Must be a non-empty string."
            },
            "channel_id": {
              "type": "string",
              "description": "ID of the channel. Must be a non-empty string."
            },
            "name": {
              "type": "string",
              "description": "Reaction (emoji) name. Must be a non-empty string."
            },
            "message_ts": {
              "type": "string",
              "description": "Timestamp of the message. This should be a string\nrepresentation of a Unix timestamp with up to 6 decimal places\nfor microsecond precision. Must be a non-empty string."
            }
          },
          "required": [
            "channel_id",
            "message_ts",
            "name",
            "user_id"
          ]
        }
      },
      "list_user_reactions": {
        "name": "list_user_reactions",
        "description": "Lists reactions made by a user (or all users if user_id is None).",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "Show reactions made by this user. Defaults to None (all users).\nIf provided, must be a non-empty string."
            },
            "full": {
              "type": "boolean",
              "description": "If true, return all reaction details. Defaults to False."
            },
            "cursor": {
              "type": "string",
              "description": "Parameter for pagination. Defaults to None.\nIf provided, must be a string that can be parsed as a non-negative integer."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of items to return. Defaults to 100.\nMust be a positive integer."
            }
          }
        }
      },
      "remove_reaction_from_message": {
        "name": "remove_reaction_from_message",
        "description": "Removes a reaction from a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID. Must be a non-empty string."
            },
            "name": {
              "type": "string",
              "description": "Reaction (emoji) name. Must be a non-empty string."
            },
            "channel_id": {
              "type": "string",
              "description": "ID of the channel. Must be a non-empty string."
            },
            "message_ts": {
              "type": "string",
              "description": "Timestamp of the message. Must be a non-empty string."
            }
          },
          "required": [
            "channel_id",
            "message_ts",
            "name",
            "user_id"
          ]
        }
      },
      "get_file_info": {
        "name": "get_file_info",
        "description": "Get information about a file.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_id": {
              "type": "string",
              "description": "The ID of the file to get info for. Must be a non-empty string."
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor for comments. Must be a string representing a non-negative integer. Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of comments to return. Must be a positive integer. Defaults to 100."
            }
          },
          "required": [
            "file_id"
          ]
        }
      },
      "share_file": {
        "name": "share_file",
        "description": "Shares an existing file into specified channels.\n\nThis function allows sharing a file that already exists in the Slack workspace\nto one or more channels. The file must exist in the files database and all\nspecified channels must be valid.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_id": {
              "type": "string",
              "description": "The ID of the file to share. Must be a non-empty string."
            },
            "channel_ids": {
              "type": "string",
              "description": "Comma-separated list of channel IDs to share the file with.\nMust be a non-empty string with valid channel IDs."
            }
          },
          "required": [
            "channel_ids",
            "file_id"
          ]
        }
      },
      "add_remote_file": {
        "name": "add_remote_file",
        "description": "Add a remote file to the Slack workspace.\n\nThis function registers an external file in Slack's database, allowing it to be referenced\nand shared within the Slack workspace. The file itself remains hosted externally.",
        "parameters": {
          "type": "object",
          "properties": {
            "external_id": {
              "type": "string",
              "description": "A unique identifier for the file in the external system.\nMust be a non-empty string."
            },
            "external_url": {
              "type": "string",
              "description": "The URL where the file can be accessed.\nMust be a non-empty string."
            },
            "title": {
              "type": "string",
              "description": "The display title for the file in Slack.\nMust be a non-empty string."
            },
            "filetype": {
              "type": "string",
              "description": "The type/extension of the file (e.g., \"pdf\", \"docx\").\nMust be a non-empty string if provided. Defaults to None."
            },
            "indexable_file_contents": {
              "type": "string",
              "description": "Text content that can be indexed for search.\nMust be a non-empty string if provided. Defaults to None."
            }
          },
          "required": [
            "external_id",
            "external_url",
            "title"
          ]
        }
      },
      "delete_file": {
        "name": "delete_file",
        "description": "Deletes a file from the Slack workspace.\n\nThis function permanently removes a file from the Slack workspace, including\nfrom all channels where it was shared.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_id": {
              "type": "string",
              "description": "The ID of the file to delete. Must be a non-empty string."
            }
          },
          "required": [
            "file_id"
          ]
        }
      },
      "upload_file": {
        "name": "upload_file",
        "description": "Upload a file to Slack.\n\nIt supports uploading files either by providing content directly or by specifying a file path.\nThe function automatically detects file types, MIME types, and handles both text and binary files.\nFiles are subject to a 50MB size limit.",
        "parameters": {
          "type": "object",
          "properties": {
            "channels": {
              "type": "string",
              "description": "Comma-separated list of channel IDs where the file will be shared.\nMust be valid channel IDs if provided."
            },
            "content": {
              "type": "string",
              "description": "File contents as a string. If both content and file_path are provided,\ncontent takes precedence. Subject to 50MB size limit."
            },
            "file_path": {
              "type": "string",
              "description": "Path to a local file to upload. The file will be read and its\ncontent will be processed based on the file type (text or binary). Subject to 50MB size limit."
            },
            "filename": {
              "type": "string",
              "description": "Name of the file. If not provided and file_path is given,\nthe filename will be extracted from the file path."
            },
            "filetype": {
              "type": "string",
              "description": "File type identifier (e.g., 'pdf', 'txt', 'jpg').\nIf not provided, it will be auto-detected from the filename or file path."
            },
            "initial_comment": {
              "type": "string",
              "description": "Initial comment to add with the file."
            },
            "thread_ts": {
              "type": "string",
              "description": "Timestamp of parent message to reply to in a thread."
            },
            "title": {
              "type": "string",
              "description": "Title of the file. If not provided, defaults to filename."
            }
          }
        }
      },
      "finish_external_file_upload": {
        "name": "finish_external_file_upload",
        "description": "Finishes an external file upload started with `get_external_upload_url()`.",
        "parameters": {
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Required. The ID of the file to update."
                  },
                  "title": {
                    "type": "object",
                    "description": "Optional. The new title for the file."
                  }
                },
                "required": [
                  "id"
                ]
              },
              "description": "List of file object dictionaries. Each dictionary must contain:"
            },
            "channel_id": {
              "type": "string",
              "description": "Channel ID where the file will be shared."
            },
            "initial_comment": {
              "type": "string",
              "description": "Initial comment for the file."
            },
            "thread_ts": {
              "type": "string",
              "description": "Parent message timestamp for threading."
            }
          },
          "required": [
            "files"
          ]
        }
      },
      "list_files": {
        "name": "list_files",
        "description": "Lists files, optionally filtered by channel, user, and time.\n\nThis function retrieves files from the Slack workspace with optional filtering capabilities.\nFiles can be filtered by channel, user, timestamp range, and file types. Results are paginated\nfor efficient data retrieval.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "Filter files shared in a specific channel. Must be a valid channel ID if provided."
            },
            "user_id": {
              "type": "string",
              "description": "Filter files uploaded by a specific user. Must be a valid user ID if provided."
            },
            "ts_from": {
              "type": "string",
              "description": "Filter files created after this timestamp (inclusive). Must be a Unix timestamp string if provided."
            },
            "ts_to": {
              "type": "string",
              "description": "Filter files created before this timestamp (inclusive). Must be a Unix timestamp string if provided."
            },
            "types": {
              "type": "string",
              "description": "Comma-separated list of file types to filter by (e.g., \"pdf,docx,jpg\")."
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor for retrieving additional results. Must be a string representing a non-negative integer."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of files to return per page. Must be a positive integer. Defaults to 100."
            }
          }
        }
      },
      "remove_remote_file": {
        "name": "remove_remote_file",
        "description": "Remove a remote file and clean up all of its references.\n\nExactly **one** identifier must be supplied \u2013 either a Slack-generated\n``file_id`` *or* the external ``external_id`` that was provided when the\nfile was first registered.  When the target is found the file record is\ndeleted from the workspace's internal storage and its identifier is\nremoved from every channel that had access to the file.",
        "parameters": {
          "type": "object",
          "properties": {
            "file_id": {
              "type": "string",
              "description": "The unique Slack-generated ID of the file to remove."
            },
            "external_id": {
              "type": "string",
              "description": "The creator-defined GUID that was supplied when the remote file\nwas added via :pyfunc:`add_remote_file` or the external upload\nflow."
            }
          }
        }
      },
      "get_external_upload_url": {
        "name": "get_external_upload_url",
        "description": "Generates a URL for uploading an external file to Slack.\n\nThis function initiates the file upload process by providing a secure,\ntemporary URL to which the file data can be sent. It takes basic file\ninformation, such as its name and size, and returns a unique file ID\nand the corresponding upload URL. It also starts a 1-minute timer to\nautomatically delete the file record if the upload is not completed.",
        "parameters": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string",
              "description": "The name of the file to be uploaded."
            },
            "length": {
              "type": "integer",
              "description": "The size of the file in bytes."
            },
            "alt_txt": {
              "type": "string",
              "description": "A description of the file used for\naccessibility purposes (e.g., by screen readers)."
            },
            "snippet_type": {
              "type": "string",
              "description": "The specific type of snippet, which\ncan be used to influence how the file is displayed."
            }
          },
          "required": [
            "filename",
            "length"
          ]
        }
      },
      "leave_conversation": {
        "name": "leave_conversation",
        "description": "Leaves a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID of the user leaving the conversation."
            },
            "channel": {
              "type": "string",
              "description": "Conversation to leave."
            }
          },
          "required": [
            "channel",
            "user_id"
          ]
        }
      },
      "invite_to_conversation": {
        "name": "invite_to_conversation",
        "description": "Invites users to a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "The ID of the channel to invite users to. Must be a non-empty string."
            },
            "users": {
              "type": "string",
              "description": "A comma separated list of user IDs. Must be a non-empty string."
            },
            "force": {
              "type": "boolean",
              "description": "Continue inviting valid users even if some are invalid. Defaults to False."
            }
          },
          "required": [
            "channel",
            "users"
          ]
        }
      },
      "archive_conversation": {
        "name": "archive_conversation",
        "description": "Archives a conversation by setting its archived status and closing it.\n\nArchiving a conversation marks it as archived (is_archived=True) and closes it \n(is_open=False) in the database. Archived conversations are typically hidden \nfrom regular channel lists and are no longer actively used.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "ID of conversation to archive. Must be a non-empty string."
            }
          },
          "required": [
            "channel"
          ]
        }
      },
      "join_conversation": {
        "name": "join_conversation",
        "description": "Joins an existing conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID of the user joining the conversation."
            },
            "channel": {
              "type": "string",
              "description": "ID of conversation to join."
            }
          },
          "required": [
            "channel",
            "user_id"
          ]
        }
      },
      "kick_from_conversation": {
        "name": "kick_from_conversation",
        "description": "Removes a user from a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "ID of conversation to remove user from."
            },
            "user_id": {
              "type": "string",
              "description": "ID of user to remove from conversation."
            }
          },
          "required": [
            "channel",
            "user_id"
          ]
        }
      },
      "mark_conversation_read": {
        "name": "mark_conversation_read",
        "description": "Sets the read cursor in a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Channel or conversation ID."
            },
            "ts": {
              "type": "string",
              "description": "Timestamp of the message to mark as read."
            }
          },
          "required": [
            "channel",
            "ts"
          ]
        }
      },
      "get_conversation_history": {
        "name": "get_conversation_history",
        "description": "Fetches a conversation's history of messages and events.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Conversation ID. Must be a non-empty string."
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor. Defaults to None. If provided, must be a base64-encoded string\nwith the format \"user:{user_id}\" (e.g., \"dXNlcjpleGFtcGxlSWQxMjM=\" for \"user:exampleId123\").\nThis matches Slack's cursor format for consistent pagination."
            },
            "include_all_metadata": {
              "type": "boolean",
              "description": "Return all metadata. Defaults to False. Must be a boolean."
            },
            "inclusive": {
              "type": "boolean",
              "description": "Include messages with oldest/latest timestamps.\nDefaults to False. Must be a boolean."
            },
            "latest": {
              "type": "string",
              "description": "Only messages before this timestamp.\nDefaults to None (current time). If provided, must be a string in Unix timestamp format\nwith exactly 6 decimal places for microsecond precision (e.g. \"1688683055.556679\").\nThe timestamp must be a valid Unix timestamp that can be converted to a float."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of items to return. Defaults to 100. Must be an integer between 1 and 999."
            },
            "oldest": {
              "type": "string",
              "description": "Only messages after this timestamp. Defaults to \"0\". Must be a string in Unix timestamp format\nwith exactly 6 decimal places for microsecond precision (e.g. \"1688683055.556679\").\nThe timestamp must be a valid Unix timestamp that can be converted to a float."
            }
          },
          "required": [
            "channel"
          ]
        }
      },
      "open_conversation": {
        "name": "open_conversation",
        "description": "Opens or resumes a conversation between users.\n\nThis function opens or resumes a conversation between users. When return_im=False (default), \nthe function returns minimal channel information containing only the channel ID. This is useful \nwhen you just need to reference the channel without needing its full metadata. The function can \neither resume an existing conversation by channel ID or create a new one with specified users.\nNote: Returns existing conversation if same user combination already exists.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Resume a conversation by supplying a channel ID. \nDefaults to None."
            },
            "prevent_creation": {
              "type": "boolean",
              "description": "Prevents creating a new conversation. \nDefaults to False."
            },
            "return_im": {
              "type": "boolean",
              "description": "If True, returns the full channel definition including all metadata. \nIf False, returns minimal channel information. Defaults to False."
            },
            "users": {
              "type": "string",
              "description": "Comma-separated list of users. Defaults to None."
            }
          }
        }
      },
      "list_channels": {
        "name": "list_channels",
        "description": "Lists all channels in a Slack team.",
        "parameters": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "Paginate through collections of data. Must be a string\nrepresenting a non-negative integer if provided. Defaults to None."
            },
            "exclude_archived": {
              "type": "boolean",
              "description": "Set to true to exclude archived channels from the list.\nDefaults to False."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of items to return. Must be between 1 and 1000.\nDefaults to 100."
            },
            "team_id": {
              "type": "string",
              "description": "Encoded team id to list channels in. Defaults to None."
            },
            "types": {
              "type": "string",
              "description": "Mix and match channel types by providing a comma-separated list of any\ncombination of public_channel, private_channel, mpim, im.\nDefaults to \"public_channel\"."
            }
          }
        }
      },
      "close_conversation": {
        "name": "close_conversation",
        "description": "Closes a direct message or multi-person direct message.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Conversation to close."
            }
          },
          "required": [
            "channel"
          ]
        }
      },
      "rename_conversation": {
        "name": "rename_conversation",
        "description": "Renames a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "ID of conversation to rename."
            },
            "name": {
              "type": "string",
              "description": "New name for conversation."
            }
          },
          "required": [
            "channel",
            "name"
          ]
        }
      },
      "get_conversation_members": {
        "name": "get_conversation_members",
        "description": "Retrieve members of a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "ID of the conversation."
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor encoded in base64 in format \"user:{user_id}\". Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of items to return. Defaults to 100. Must be positive and cannot exceed 10000."
            }
          },
          "required": [
            "channel"
          ]
        }
      },
      "create_channel": {
        "name": "create_channel",
        "description": "Initiates a public or private channel-based conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the channel. Must be a non-empty string."
            },
            "is_private": {
              "type": "boolean",
              "description": "Create a private channel. Defaults to False. Must be a boolean."
            },
            "team_id": {
              "type": "string",
              "description": "Encoded team id. Defaults to None. Must be a string if provided."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "set_conversation_purpose": {
        "name": "set_conversation_purpose",
        "description": "Sets the channel description.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Channel to set the description of."
            },
            "purpose": {
              "type": "string",
              "description": "The description of the channel."
            }
          },
          "required": [
            "channel",
            "purpose"
          ]
        }
      },
      "set_conversation_topic": {
        "name": "set_conversation_topic",
        "description": "Sets the topic for a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Conversation to set the topic of."
            },
            "topic": {
              "type": "string",
              "description": "The new topic string."
            }
          },
          "required": [
            "channel",
            "topic"
          ]
        }
      },
      "get_conversation_replies": {
        "name": "get_conversation_replies",
        "description": "Retrieve a thread of messages posted to a conversation.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Conversation ID."
            },
            "ts": {
              "type": "string",
              "description": "Timestamp of the parent message or a message in the thread."
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor. Defaults to None."
            },
            "include_all_metadata": {
              "type": "boolean",
              "description": "Return all metadata. Defaults to False. Note: This parameter is currently not implemented and has no effect on the response."
            },
            "inclusive": {
              "type": "boolean",
              "description": "Include messages with oldest/latest timestamps.\nDefaults to False."
            },
            "latest": {
              "type": "string",
              "description": "Only messages before this timestamp.\nDefaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of items to return. Defaults to 1000."
            },
            "oldest": {
              "type": "string",
              "description": "Only messages after this timestamp. Defaults to \"0\"."
            }
          },
          "required": [
            "channel",
            "ts"
          ]
        }
      },
      "create_user_group": {
        "name": "create_user_group",
        "description": "Creates a new User Group.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the User Group. Must be a non-empty string."
            },
            "handle": {
              "type": "string",
              "description": "A mention handle for the User Group. Must be a string if provided."
            },
            "team_id": {
              "type": "string",
              "description": "ID of the team the User Group belongs to. Must be a string if provided."
            },
            "description": {
              "type": "string",
              "description": "Description of the User Group. Must be a string if provided."
            },
            "channel_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of channel IDs to include in the User Group.\nIf provided, must be a list of strings."
            },
            "created_at": {
              "type": "string",
              "description": "Timestamp when the User Group was created.\nDefaults to current time as a string."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_user_groups": {
        "name": "list_user_groups",
        "description": "Lists all User Groups for a team.",
        "parameters": {
          "type": "object",
          "properties": {
            "team_id": {
              "type": "string",
              "description": "ID of the team to list User Groups for."
            },
            "include_disabled": {
              "type": "boolean",
              "description": "Include disabled User Groups. Defaults to False."
            },
            "include_count": {
              "type": "boolean",
              "description": "Include the number of users. Defaults to False."
            },
            "include_users": {
              "type": "boolean",
              "description": "Include the list of user IDs. Defaults to False."
            }
          }
        }
      },
      "update_user_group": {
        "name": "update_user_group",
        "description": "Updates an existing User Group.",
        "parameters": {
          "type": "object",
          "properties": {
            "usergroup_id": {
              "type": "string",
              "description": "The ID of the User Group to update."
            },
            "name": {
              "type": "string",
              "description": "New name for the User Group. Must be a non-empty string if provided."
            },
            "handle": {
              "type": "string",
              "description": "New handle for the User Group. Must be a non-empty string if provided."
            },
            "description": {
              "type": "string",
              "description": "New description for the User Group. Must be a string if provided."
            },
            "channel_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "New list of channel IDs. Must be a list of strings if provided."
            },
            "date_update": {
              "type": "string",
              "description": "Timestamp when the User Group was last updated. Must be a string if provided."
            }
          },
          "required": [
            "usergroup_id"
          ]
        }
      },
      "disable_user_group": {
        "name": "disable_user_group",
        "description": "Disables a User Group.",
        "parameters": {
          "type": "object",
          "properties": {
            "usergroup_id": {
              "type": "string",
              "description": "The ID of the User Group to disable."
            },
            "date_delete": {
              "type": "string",
              "description": "Timestamp string when the User Group was deleted.\nIf None, current time will be used."
            }
          },
          "required": [
            "usergroup_id"
          ]
        }
      },
      "enable_user_group": {
        "name": "enable_user_group",
        "description": "Enables a User Group.\n\nThis method enables a user group that has been disabled.\nIt resets the disabled flag and the deleted timestamp.\nIt also resets the user who deleted it.",
        "parameters": {
          "type": "object",
          "properties": {
            "usergroup_id": {
              "type": "string",
              "description": "The ID of the User Group to enable."
            }
          },
          "required": [
            "usergroup_id"
          ]
        }
      },
      "search_messages": {
        "name": "search_messages",
        "description": "Searches for messages matching a query.\n\nThe query is a space-separated string of terms and filters. Text terms are\nmatched against the message's content. By default, all text terms must be\npresent in the message (AND logic).",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query. The structure is a space-separated string\nof terms and filters. Supported filters are:\n- `from:@<user>`: Restricts the search to messages from a specific user.\n- `in:#<channel>`: Restricts the search to a specific channel.\n- `has:link`: Narrows search to messages that contain a URL.\n- `has:reaction`: Narrows search to messages that have a reaction.\n- `has:star`: Narrows search to messages that have been starred.\n- `before:YYYY-MM-DD`: Filters for messages sent before a specific date.\n- `after:YYYY-MM-DD`: Filters for messages sent after a specific date.\n- `during:YYYY-MM-DD`: Filters for messages on a specific date. Also\n  supports `YYYY` for a year or `YYYY-MM` for a month.\n- `-<word>`: Excludes messages containing the specified word.\n- `some*`: Wildcard support for partial word matching.\n- `OR`: When used between text terms (e.g., \"hello OR world\"), the\n  logic changes to match messages containing any of the terms."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "search_files": {
        "name": "search_files",
        "description": "Searches for files matching a query.\n\nThe query is a space-separated string of terms and filters. Text terms are\nmatched against the file's name and title. If multiple text terms are\nprovided, a match occurs if any term is found (OR logic).",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query. The structure is a space-separated string\nof terms and filters. Supported filters for files are:\n- `in:#<channel>`: Restricts the search to a specific channel.\n- `filetype:<type>`: Narrows search to a specific file type (e.g., 'pdf', 'image').\n- `has:star`: Narrows search to files that have been starred.\nNote: Date filters, user filters (`from:`), exclusion (`-`), and\nwildcards (`*`) are not applicable to file searches."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "search_all_content": {
        "name": "search_all_content",
        "description": "Searches for messages and files matching a query.\n\nThis function executes a search across both messages and files using a single\nquery. The query is a space-separated string of terms and filters. Filters\nare applied to the resource type they are relevant to (e.g., `filetype:`\nonly applies to files).",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query. The structure is a space-separated string\nof terms and filters.\n\nFor Text Terms:\n- In Messages: Matched against message content. Default logic is AND,\n  but `OR` can be used to match any term.\n- In Files: Matched against the file's name and title. The logic is\n  always OR (any term match).\n\nSupported Filters:\n- `in:#<channel>`: (Messages & Files) Restricts search to a channel.\n- `has:star`: (Messages & Files) Narrows to starred items.\n- `from:@<user>`: (Messages-only) Restricts to messages from a user.\n- `has:link`: (Messages-only) Narrows to messages containing a URL.\n- `has:reaction`: (Messages-only) Narrows to messages with reactions.\n- `before:`, `after:`, `during:`: (Messages-only) Date-based filters.\n- `-<word>`: (Messages-only) Excludes messages with the word.\n- `some*`: (Messages-only) Wildcard support.\n- `filetype:<type>`: (Files-only) Narrows to a specific file type."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "send_me_message": {
        "name": "send_me_message",
        "description": "Share a me message into a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID."
            },
            "channel": {
              "type": "string",
              "description": "Channel to send message to. Must be a non-empty string."
            },
            "text": {
              "type": "string",
              "description": "Text of the message to send. Must be a non-empty string."
            }
          },
          "required": [
            "channel",
            "text",
            "user_id"
          ]
        }
      },
      "delete_chat_message": {
        "name": "delete_chat_message",
        "description": "Deletes a message from a specified channel by its timestamp.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "The unique identifier of the channel containing the message."
            },
            "ts": {
              "type": "string",
              "description": "A Unix timestamp with fractional seconds representing the message to be deleted."
            }
          },
          "required": [
            "channel",
            "ts"
          ]
        }
      },
      "delete_scheduled_message": {
        "name": "delete_scheduled_message",
        "description": "Deletes a scheduled message from a specified channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "The unique identifier of the channel containing the scheduled message."
            },
            "scheduled_message_id": {
              "type": "string",
              "description": "The unique ID of the scheduled message."
            }
          },
          "required": [
            "channel",
            "scheduled_message_id"
          ]
        }
      },
      "post_ephemeral_message": {
        "name": "post_ephemeral_message",
        "description": "Sends an ephemeral message to a user in a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Channel to send the message to. Can't be empty."
            },
            "user": {
              "type": "string",
              "description": "User to send the message to. Can't be empty."
            },
            "attachments": {
              "type": "string",
              "description": "JSON-based array of structured attachments. Must be a string if provided."
            },
            "blocks": {
              "type": "array",
              "description": "A JSON-based array of structured blocks. Must be a list if provided."
            },
            "text": {
              "type": "string",
              "description": "Message text. Must be a string if provided."
            },
            "as_user": {
              "type": "boolean",
              "description": "Pass true to post the message as the authed user. Must be a boolean if provided."
            },
            "icon_emoji": {
              "type": "string",
              "description": "Emoji to use as the icon. Must be a string if provided."
            },
            "icon_url": {
              "type": "string",
              "description": "URL to an image to use as the icon. Must be a string if provided."
            },
            "link_names": {
              "type": "boolean",
              "description": "Find and link channel names and usernames. Must be a boolean if provided."
            },
            "markdown_text": {
              "type": "string",
              "description": "Message text formatted in markdown. Must be a string if provided."
            },
            "parse": {
              "type": "string",
              "description": "Change how messages are treated. Must be a string if provided."
            },
            "thread_ts": {
              "type": "string",
              "description": "Provide another message's ts value to post this message in a thread. Must be a string if provided."
            },
            "username": {
              "type": "string",
              "description": "Set your bot's or your user name. Must be a string if provided."
            }
          },
          "required": [
            "channel",
            "user"
          ]
        }
      },
      "post_chat_message": {
        "name": "post_chat_message",
        "description": "Sends a message to a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Channel ID. Must be a non-empty string."
            },
            "ts": {
              "type": "string",
              "description": "Message timestamp. Must be a string if provided."
            },
            "attachments": {
              "type": "string",
              "description": "JSON-based array of structured attachments. Must be a string if provided."
            },
            "blocks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              },
              "description": "A JSON-based array of structured blocks.\nIf provided, must be a list of dictionaries. Each dictionary's structure\nis validated by BlockItemStructure."
            },
            "text": {
              "type": "string",
              "description": "Message text. Must be a string if provided."
            },
            "as_user": {
              "type": "boolean",
              "description": "Post as user (legacy). Must be a boolean if provided."
            },
            "icon_emoji": {
              "type": "string",
              "description": "Emoji to use as the icon. Must be a string if provided."
            },
            "icon_url": {
              "type": "string",
              "description": "URL to an image to use as the icon. Must be a string if provided."
            },
            "link_names": {
              "type": "boolean",
              "description": "Find and link user groups. Must be a boolean if provided."
            },
            "markdown_text": {
              "type": "string",
              "description": "Message text formatted in markdown. Must be a string if provided."
            },
            "metadata": {
              "type": "string",
              "description": "JSON object with event_type and event_payload fields. Must be a string if provided."
            },
            "mrkdwn": {
              "type": "boolean",
              "description": "Disable Slack markup parsing. Must be a boolean if provided."
            },
            "parse": {
              "type": "string",
              "description": "Change how messages are treated. Must be a string if provided."
            },
            "reply_broadcast": {
              "type": "boolean",
              "description": "Make reply visible to everyone. Must be a boolean if provided."
            },
            "thread_ts": {
              "type": "string",
              "description": "Provide another message's ts value to make this message a reply. Must be a string if provided."
            },
            "unfurl_links": {
              "type": "boolean",
              "description": "Enable unfurling of primarily text-based content. Must be a boolean if provided."
            },
            "unfurl_media": {
              "type": "boolean",
              "description": "Disable unfurling of media content. Must be a boolean if provided."
            },
            "username": {
              "type": "string",
              "description": "Set your bot's user name. Must be a string if provided."
            }
          },
          "required": [
            "channel"
          ]
        }
      },
      "list_scheduled_messages": {
        "name": "list_scheduled_messages",
        "description": "Returns a list of scheduled messages.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "The channel of the scheduled messages. Defaults to None."
            },
            "cursor": {
              "type": "string",
              "description": "For pagination purposes. Should be a string representing a non-negative integer. Defaults to None."
            },
            "latest": {
              "type": "string",
              "description": "A Unix timestamp string (integer or float representation) of the latest value in the time range. Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of original entries to return. Must be a non-negative integer. Defaults to None."
            },
            "oldest": {
              "type": "string",
              "description": "A Unix timestamp string (integer or float representation) of the oldest value in the time range. Defaults to None."
            },
            "team_id": {
              "type": "string",
              "description": "encoded team id to list channels in, required if org token is used. Defaults to None."
            }
          }
        }
      },
      "schedule_chat_message": {
        "name": "schedule_chat_message",
        "description": "Schedules a message to be sent to a channel.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID."
            },
            "channel": {
              "type": "string",
              "description": "Channel to send the message to."
            },
            "post_at": {
              "type": "integer",
              "description": "Unix timestamp for when to send the message. Must be positive.\nCan be provided as int, float, or numeric string."
            },
            "attachments": {
              "type": "string",
              "description": "JSON-formatted string representing an array of structured attachments."
            },
            "blocks": {
              "type": "array",
              "description": "A list of structured block objects (dictionaries)."
            },
            "text": {
              "type": "string",
              "description": "Message text."
            },
            "as_user": {
              "type": "boolean",
              "description": "Post as the authed user. Defaults to False."
            },
            "link_names": {
              "type": "boolean",
              "description": "Find and link user groups. Defaults to False."
            },
            "markdown_text": {
              "type": "string",
              "description": "Message text formatted in markdown."
            },
            "metadata": {
              "type": "string",
              "description": "JSON-formatted string representing an object with 'event_type' (str)\nand 'event_payload' (dict) fields."
            },
            "parse": {
              "type": "string",
              "description": "Change how messages are treated."
            },
            "reply_broadcast": {
              "type": "boolean",
              "description": "Whether reply should be made visible to everyone. Defaults to False."
            },
            "thread_ts": {
              "type": "string",
              "description": "Provide another message's ts value to make this message a reply."
            },
            "unfurl_links": {
              "type": "boolean",
              "description": "Enable unfurling of primarily text-based content. Defaults to True."
            },
            "unfurl_media": {
              "type": "boolean",
              "description": "Disable unfurling of media content. Defaults to False."
            }
          },
          "required": [
            "channel",
            "post_at",
            "user_id"
          ]
        }
      },
      "update_chat_message": {
        "name": "update_chat_message",
        "description": "Updates a message.",
        "parameters": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "string",
              "description": "Channel containing the message."
            },
            "ts": {
              "type": "string",
              "description": "Timestamp of the message to be updated."
            },
            "attachments": {
              "type": "string",
              "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
            },
            "blocks": {
              "type": "string",
              "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
            },
            "text": {
              "type": "string",
              "description": "The updated message text."
            },
            "as_user": {
              "type": "boolean",
              "description": "Update the message as the authed user."
            },
            "file_ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of new file ids that will be sent with this message."
            },
            "link_names": {
              "type": "boolean",
              "description": "Find and link channel names and usernames."
            },
            "markdown_text": {
              "type": "string",
              "description": "Message text formatted in markdown."
            },
            "parse": {
              "type": "string",
              "description": "Change how messages are treated."
            },
            "reply_broadcast": {
              "type": "boolean",
              "description": "Broadcast an existing thread reply."
            }
          },
          "required": [
            "channel",
            "ts"
          ]
        }
      },
      "update_user_group_members": {
        "name": "update_user_group_members",
        "description": "Update the list of users for a User Group.",
        "parameters": {
          "type": "object",
          "properties": {
            "usergroup": {
              "type": "string",
              "description": "The encoded ID of the User Group to update."
            },
            "users": {
              "type": "string",
              "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
            },
            "include_count": {
              "type": "boolean",
              "description": "Include the number of users in the User Group. Defaults to False."
            },
            "date_update": {
              "type": "string",
              "description": "Timestamp when the User Group was last updated. If None or empty, \nthe current timestamp will be used."
            }
          },
          "required": [
            "usergroup",
            "users"
          ]
        }
      },
      "list_user_group_members": {
        "name": "list_user_group_members",
        "description": "Lists all users in a User Group.",
        "parameters": {
          "type": "object",
          "properties": {
            "usergroup_id": {
              "type": "string",
              "description": "The ID of the User Group."
            },
            "include_disabled": {
              "type": "boolean",
              "description": "Include disabled users. Defaults to False."
            }
          },
          "required": [
            "usergroup_id"
          ]
        }
      },
      "delete_reminder": {
        "name": "delete_reminder",
        "description": "Deletes a reminder.",
        "parameters": {
          "type": "object",
          "properties": {
            "reminder_id": {
              "type": "string",
              "description": "The ID of the reminder. Must be a non-empty string."
            }
          },
          "required": [
            "reminder_id"
          ]
        }
      },
      "get_reminder_info": {
        "name": "get_reminder_info",
        "description": "Gets information about a reminder.",
        "parameters": {
          "type": "object",
          "properties": {
            "reminder_id": {
              "type": "string",
              "description": "The ID of the reminder. Must be a non-empty string."
            }
          },
          "required": [
            "reminder_id"
          ]
        }
      },
      "complete_reminder": {
        "name": "complete_reminder",
        "description": "Marks a reminder as complete.",
        "parameters": {
          "type": "object",
          "properties": {
            "reminder_id": {
              "type": "string",
              "description": "The ID of the reminder. Must be a non-empty string."
            },
            "complete_ts": {
              "type": "string",
              "description": "Timestamp for when it was completed. Must be a non-empty string representing a valid numeric timestamp."
            }
          },
          "required": [
            "complete_ts",
            "reminder_id"
          ]
        }
      },
      "list_reminders": {
        "name": "list_reminders",
        "description": "Lists all reminders created by or for a given user.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID. Must be a non-empty string."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "add_reminder": {
        "name": "add_reminder",
        "description": "Creates a reminder with comprehensive input validation.\n\nValidation Logic:\n    1. Type validation: user_id, text, and ts must be strings; channel_id must be string or None\n    2. Empty string validation: user_id and text cannot be empty strings\n    3. Timestamp validation: ts cannot be empty and must represent a valid numeric value\n    4. User existence validation: user_id must exist in the database",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID to remind. Must be a non-empty string."
            },
            "text": {
              "type": "string",
              "description": "The content of the reminder. Must be a non-empty string."
            },
            "ts": {
              "type": "string",
              "description": "When this reminder should happen (unix timestamp as a string).\nMust be a non-empty string representing a number (e.g., \"1678886400\" or \"1678886400.5\")."
            },
            "channel_id": {
              "type": "string",
              "description": "Channel ID to remind in. Defaults to None.\nIf provided as a string, it can be empty (unlike user_id and text)."
            }
          },
          "required": [
            "text",
            "ts",
            "user_id"
          ]
        }
      },
      "list_user_conversations": {
        "name": "list_user_conversations",
        "description": "Lists conversations the specified user may access.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user whose conversations to list."
            },
            "cursor": {
              "type": "string",
              "description": "Paginate through collections of data by setting the cursor parameter to the next_cursor attribute returned by a previous request's response. Default value fetches the first page."
            },
            "exclude_archived": {
              "type": "boolean",
              "description": "Set to true to exclude archived channels from the list. Defaults to False."
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. Default is 100."
            },
            "types": {
              "type": "string",
              "description": "Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "set_user_presence": {
        "name": "set_user_presence",
        "description": "Manually sets a user's presence.\n\nThis function updates the presence status for a specified user, setting it\nto either 'active' or 'away'. It directly modifies the user's record in\nthe database. Upon successful execution, it confirms the operation was\nsuccessful.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user to update. Cannot be an empty string."
            },
            "presence": {
              "type": "string",
              "description": "The new presence status. Must be either 'active' or 'away'."
            }
          },
          "required": [
            "presence",
            "user_id"
          ]
        }
      },
      "set_user_photo": {
        "name": "set_user_photo",
        "description": "Sets a user's profile photo.\n\nThis function updates the profile photo for a specified user. It takes a\nuser ID and a base64-encoded string representing the new image.\nOptionally, cropping parameters can be provided to specify how the image\nshould be cropped. The function updates the user's record in the\ndatabase with the new image and cropping information.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user to update. Cannot be an empty string."
            },
            "image": {
              "type": "string",
              "description": "A base64-encoded string of the image data. Cannot be empty."
            },
            "crop_x": {
              "type": "integer",
              "description": "The x-coordinate for the top-left corner of the crop.\nMust be a non-negative integer if provided."
            },
            "crop_y": {
              "type": "integer",
              "description": "The y-coordinate for the top-left corner of the crop.\nMust be a non-negative integer if provided."
            },
            "crop_w": {
              "type": "integer",
              "description": "The width of the crop box.\nMust be a non-negative integer if provided."
            }
          },
          "required": [
            "image",
            "user_id"
          ]
        }
      },
      "delete_user_photo": {
        "name": "delete_user_photo",
        "description": "Deletes the profile photo for a user.\n\nThis function removes the profile picture for a specified user. It\nidentifies the user by their ID and deletes the associated image data,\nincluding any cropping information, from their profile.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user whose photo should be deleted."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "get_user_info": {
        "name": "get_user_info",
        "description": "Gets information about a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID to get info on."
            },
            "include_locale": {
              "type": "boolean",
              "description": "Whether to include locale. Defaults to False."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "get_user_presence": {
        "name": "get_user_presence",
        "description": "Gets user presence information.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID to get presence info on. Defaults to the authed user."
            }
          }
        }
      },
      "set_user_profile": {
        "name": "set_user_profile",
        "description": "Set a user's profile information.",
        "parameters": {
          "type": "object",
          "properties": {
            "profile": {
              "type": "object",
              "properties": {
                "display_name": {
                  "type": "object",
                  "description": "The user's display name"
                },
                "real_name": {
                  "type": "object",
                  "description": "The user's real name"
                },
                "email": {
                  "type": "object",
                  "description": "The user's email address. Must contain '@' character if provided"
                },
                "phone": {
                  "type": "object",
                  "description": "The user's phone number. Must contain only digits, spaces, hyphens, and '+' if provided"
                },
                "status_emoji": {
                  "type": "object",
                  "description": "The user's status emoji"
                },
                "status_text": {
                  "type": "object",
                  "description": "The user's status text"
                },
                "title": {
                  "type": "object",
                  "description": "The user's title"
                },
                "team": {
                  "type": "object",
                  "description": "The user's team"
                },
                "skype": {
                  "type": "object",
                  "description": "The user's Skype handle"
                },
                "first_name": {
                  "type": "object",
                  "description": "The user's first name"
                },
                "last_name": {
                  "type": "object",
                  "description": "The user's last name"
                }
              },
              "description": "Dictionary of profile fields to set. Must contain valid profile fields:"
            },
            "user_id": {
              "type": "string",
              "description": "ID of user to change. Must be a non-empty string."
            }
          },
          "required": [
            "profile",
            "user_id"
          ]
        }
      },
      "list_users": {
        "name": "list_users",
        "description": "Lists all users in a Slack team.",
        "parameters": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "Pagination cursor encoded in base64 in format \"user:{user_id}\". Must be a valid base64 string if provided."
            },
            "include_locale": {
              "type": "boolean",
              "description": "Include locale information. Defaults to False."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of items to return. Must be positive and no larger than 1000. Defaults to 100."
            },
            "team_id": {
              "type": "string",
              "description": "Team ID to filter users by. Must be a non-empty string if provided."
            }
          }
        }
      },
      "get_user_identity": {
        "name": "get_user_identity",
        "description": "Get a user's identity information.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "User ID. Must be a non-empty string."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "lookup_user_by_email": {
        "name": "lookup_user_by_email",
        "description": "Find a user with an email address.",
        "parameters": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "An email address belonging to a user. Must be a non-empty string."
            }
          },
          "required": [
            "email"
          ]
        }
      },
      "invite_admin_user": {
        "name": "invite_admin_user",
        "description": "Invites a user to a Slack workspace.",
        "parameters": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Email address of the user to invite. Must be a non-empty string\nand a valid email format."
            },
            "channel_ids": {
              "type": "string",
              "description": "Comma-separated list of channel IDs to add the user to.\nIf provided, must be a string. Defaults to None."
            },
            "real_name": {
              "type": "string",
              "description": "Full name of the user. If provided, must be a string.\nif not provided it is extracted from the email."
            },
            "team_id": {
              "type": "string",
              "description": "ID of the team to invite the user to. If provided, must be a string.\nDefaults to None."
            }
          },
          "required": [
            "email"
          ]
        }
      }
    },
    "tiktok": {
      "get_business_profile_data": {
        "name": "get_business_profile_data",
        "description": "Get profile data of a TikTok account, including analytics and insights.",
        "parameters": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "description": "Access token authorized by TikTok creators."
            },
            "business_id": {
              "type": "string",
              "description": "Application specific unique identifier for the TikTok account."
            },
            "start_date": {
              "type": "string",
              "description": "Query start date in YYYY-MM-DD format. Defaults to None."
            },
            "end_date": {
              "type": "string",
              "description": "Query end date in YYYY-MM-DD format. Defaults to None."
            },
            "fields": {
              "type": "array",
              "description": "List of requested fields to include in the response. Defaults to None.\n- username\n- display_name\n- profile\n- analytics\n- settings"
            }
          },
          "required": [
            "access_token",
            "business_id"
          ]
        }
      },
      "get_business_publish_status": {
        "name": "get_business_publish_status",
        "description": "Get the publishing status of a TikTok video or photo post.\n\nThis endpoint allows you to check the current status of a post publishing task,\nincluding whether it has completed successfully or is still in progress.",
        "parameters": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "description": "Access token authorized by TikTok creators."
            },
            "business_id": {
              "type": "string",
              "description": "Application specific unique identifier for the TikTok account."
            },
            "publish_id": {
              "type": "string",
              "description": "Unique identifier for a post publishing task."
            }
          },
          "required": [
            "access_token",
            "business_id",
            "publish_id"
          ]
        }
      },
      "publish_business_video": {
        "name": "publish_business_video",
        "description": "Publish a public video post to a TikTok account.\n\nThis endpoint allows you to upload and publish a video to your TikTok account with various\ncustomization options for the post's visibility and interaction settings.",
        "parameters": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "description": "Access token authorized by TikTok creators."
            },
            "content_type": {
              "type": "string",
              "description": "Must be \"application/json\"."
            },
            "business_id": {
              "type": "string",
              "description": "Application specific unique identifier for the TikTok account."
            },
            "video_url": {
              "type": "string",
              "description": "URL of the video to be published."
            },
            "post_info": {
              "type": "object",
              "description": "Additional information about the post.",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the video."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the video."
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of tags for the video."
                },
                "thumbnail_url": {
                  "type": "string",
                  "description": "URL of the thumbnail for the video."
                },
                "thumbnail_offset": {
                  "type": "integer",
                  "description": "Time offset in seconds for video thumbnail."
                },
                "is_ai_generated": {
                  "type": "boolean",
                  "description": "Whether the content is AI-generated."
                }
              },
              "required": [
                "description",
                "is_ai_generated",
                "tags",
                "thumbnail_offset",
                "thumbnail_url",
                "title"
              ]
            },
            "caption": {
              "type": "string",
              "description": "Caption text for the video. Defaults to None."
            },
            "is_brand_organic": {
              "type": "boolean",
              "description": "Whether the post is organic branded content. Defaults to False."
            },
            "is_branded_content": {
              "type": "boolean",
              "description": "Whether the post is branded content. Defaults to False."
            },
            "disable_comment": {
              "type": "boolean",
              "description": "Whether to disable comments. Defaults to False."
            },
            "disable_duet": {
              "type": "boolean",
              "description": "Whether to disable duet feature. Defaults to False."
            },
            "disable_stitch": {
              "type": "boolean",
              "description": "Whether to disable stitch feature. Defaults to False."
            },
            "thumbnail_offset": {
              "type": "integer",
              "description": "Time offset in seconds for video thumbnail. Defaults to 0."
            },
            "is_ai_generated": {
              "type": "boolean",
              "description": "Whether the content is AI-generated. Defaults to False."
            },
            "upload_to_draft": {
              "type": "boolean",
              "description": "Whether to save as draft instead of publishing. Defaults to False."
            }
          },
          "required": [
            "access_token",
            "business_id",
            "content_type",
            "post_info",
            "video_url"
          ]
        }
      }
    },
    "blender": {
      "run_python_script_in_blender": {
        "name": "run_python_script_in_blender",
        "description": "Execute arbitrary Python code in Blender simulation environment.\n\nAllows access to functions/classes from dynamically discovered API modules \n(in the same directory as this file, e.g., object.py, scene.py),\nclasses from SimulationEngine.models, and the _simulation_db object.\n\nThis function facilitates the execution of arbitrary Python code within Blender.\nIt operates on a step-by-step basis, meaning the provided code should be\nbroken into smaller, manageable chunks. The 'code' parameter accepts the\nPython code string for execution.",
        "parameters": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Code."
            }
          },
          "required": [
            "code"
          ]
        }
      },
      "get_hyper3d_status": {
        "name": "get_hyper3d_status",
        "description": "Check if Hyper3D Rodin integration is enabled in Blender.\n\nThis function checks if Hyper3D Rodin integration is enabled in Blender.\nIt returns a message indicating whether Hyper3D Rodin features are available.\nThe function is also instructed not to emphasize the key type in the returned\nmessage, but to silently remember it.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "generate_hyper3d_model_via_text": {
        "name": "generate_hyper3d_model_via_text",
        "description": "Generate 3D asset using Hyper3D by giving description of the desired asset, and import the asset into Blender.\n\nThe 3D asset has built-in materials. The generated model has a normalized size, so re-scaling after generation can be useful.",
        "parameters": {
          "type": "object",
          "properties": {
            "text_prompt": {
              "type": "string",
              "description": "A short description of the desired model in **English**."
            },
            "bbox_condition": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "Optional. If given, it has to be a list of floats of length 3. Controls the ratio between [Length, Width, Height] of the model."
            }
          },
          "required": [
            "text_prompt"
          ]
        }
      },
      "generate_hyper3d_model_via_images": {
        "name": "generate_hyper3d_model_via_images",
        "description": "Generate 3D asset using Hyper3D by giving images of the wanted asset, and import the generated asset into Blender.\n\nThis function generates a 3D asset using Hyper3D by providing images of the\ndesired asset, and subsequently imports the generated asset into Blender.\nThe 3D asset created comes with built-in materials. The model generated\nhas a normalized size, so re-scaling might be beneficial after generation.\nOnly one of `input_image_paths` or `input_image_urls` should be provided\nat a time, depending on the current mode of Hyper3D Rodin.",
        "parameters": {
          "type": "object",
          "properties": {
            "input_image_paths": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The **absolute** paths of input\nimages. Even if only one image is provided, wrap it into a list.\nRequired if Hyper3D Rodin in MAIN_SITE mode. Defaults to None."
            },
            "input_image_urls": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The URLs of input images. Even\nif only one image is provided, wrap it into a list. Required if\nHyper3D Rodin in FAL_AI mode. Defaults to None."
            },
            "bbox_condition": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Optional. If given, it has to be a\nlist of ints of length 3. Controls the ratio between\n[Length, Width, Height] of the model. Defaults to None."
            }
          }
        }
      },
      "poll_hyper3d_rodin_job_status": {
        "name": "poll_hyper3d_rodin_job_status",
        "description": "Check if the Hyper3D Rodin generation task is completed.\n\nThis function checks the status of a Hyper3D Rodin generation task. Its behavior\nand the interpretation of status depend on the operational mode, inferred from\nwhich identifier (`subscription_key` or `request_id`) is provided.\n\nFor Hyper3D Rodin mode MAIN_SITE (when `subscription_key` is provided):\nThe function assesses completion based on a list of statuses related to the job.\nThe task is considered done if all these statuses are \"Done\". If \"Failed\"\nappears among the statuses, the generating process has failed. This function\nis designed for polling; callers should only proceed if the statuses are\nfinally determined (e.g., \"Done\" or \"Canceled\").\n\nFor Hyper3D Rodin mode FAL_AI (when `request_id` is provided):\nThe function assesses completion based on the overall generation task status.\nThe task is considered done if this status is \"COMPLETED\". The task is\nin progress if the status is \"IN_PROGRESS\". If a status other than\n\"COMPLETED\", \"IN_PROGRESS\", or \"IN_QUEUE\" is encountered, the generating\nprocess might have failed. This function is designed for polling; callers\nshould only proceed if the status is finally determined (e.g., \"COMPLETED\"\nor a recognized failed state).",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription_key": {
              "type": "string",
              "description": "The subscription_key given in the generate model step,\nused for polling in MAIN_SITE mode. Defaults to None."
            },
            "request_id": {
              "type": "string",
              "description": "The request_id given in the generate model step,\nused for polling in FAL_AI mode. Defaults to None."
            }
          }
        }
      },
      "import_hyper3d_generated_asset": {
        "name": "import_hyper3d_generated_asset",
        "description": "Import the asset generated by Hyper3D Rodin after the generation task is completed.\n\nThis function imports an asset generated by Hyper3D Rodin. It requires specific identifiers\n(`task_uuid` or `request_id`) based on the Hyper3D Rodin mode used for generation.\nOnly one of these identifiers should be provided. The function's output details\nthe success of the import operation.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the object in scene."
            },
            "task_uuid": {
              "type": "string",
              "description": "For Hyper3D Rodin mode MAIN_SITE: The task_uuid given in the generate model step. Defaults to string \"null\"."
            },
            "request_id": {
              "type": "string",
              "description": "For Hyper3D Rodin mode FAL_AI: The request_id given in the generate model step. Defaults to string \"null\"."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "get_object_info": {
        "name": "get_object_info",
        "description": "Get detailed information about a specific object in the Blender scene.\n\nThis function gets detailed information about a specific object in the Blender scene.",
        "parameters": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "The name of the object to get information about."
            }
          },
          "required": [
            "object_name"
          ]
        }
      },
      "set_object_texture": {
        "name": "set_object_texture",
        "description": "Apply a previously downloaded Polyhaven texture to an object.",
        "parameters": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "Name of the object to apply the texture to."
            },
            "texture_id": {
              "type": "string",
              "description": "ID of the Polyhaven texture to apply (must be downloaded first)."
            }
          },
          "required": [
            "object_name",
            "texture_id"
          ]
        }
      },
      "get_polyhaven_categories": {
        "name": "get_polyhaven_categories",
        "description": "Get a list of categories for a specific asset type on Polyhaven.",
        "parameters": {
          "type": "object",
          "properties": {
            "asset_type": {
              "type": "string",
              "description": "The type of asset to get categories for \n(hdris, textures, models, all). Defaults to \"hdris\"."
            }
          }
        }
      },
      "search_polyhaven_assets": {
        "name": "search_polyhaven_assets",
        "description": "Search for assets on Polyhaven with optional filtering.\n\nThis function searches for assets on Polyhaven. It allows specifying the\n`asset_type` (such as 'hdris', 'textures', 'models', or 'all') and an\noptional comma-separated list of `categories` for filtering. The function\nreturns a list of matching assets, where each asset includes basic\ninformation.",
        "parameters": {
          "type": "object",
          "properties": {
            "asset_type": {
              "type": "object",
              "description": "Asset Type. Defaults to \"all\". Type validation is handled internally."
            },
            "categories": {
              "type": "object",
              "description": "Categories. Defaults to None. Type validation is handled internally."
            }
          }
        }
      },
      "download_polyhaven_asset": {
        "name": "download_polyhaven_asset",
        "description": "This function downloads a Polyhaven asset, identified by its `asset_id` and `asset_type`, and imports it into Blender.",
        "parameters": {
          "type": "object",
          "properties": {
            "asset_id": {
              "type": "string",
              "description": "The ID of the asset to download."
            },
            "asset_type": {
              "type": "string",
              "description": "The type of asset (hdris, textures, models)."
            },
            "resolution": {
              "type": "string",
              "description": "The resolution to download (e.g., 1k, 2k, 4k). Defaults to \"1k\"."
            },
            "file_format": {
              "type": "string",
              "description": "Optional file format (e.g., hdr, exr for HDRIs; jpg, png for textures; gltf, fbx for models). Defaults to None."
            }
          },
          "required": [
            "asset_id",
            "asset_type"
          ]
        }
      },
      "get_polyhaven_status": {
        "name": "get_polyhaven_status",
        "description": "Checks if PolyHaven integration is enabled in Blender and returns a message indicating whether\n\nPolyHaven features are available.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "get_scene_info": {
        "name": "get_scene_info",
        "description": "Get detailed information about the current Blender scene.\n\nThis function retrieves comprehensive information about the current Blender scene.\nThe details encompass the scene's name, counts of cameras, objects, and\nlights, the name of the active camera if one exists, settings for the world\nenvironment including ambient and horizon colors, and various rendering\nconfigurations like the engine, resolution, and output filepath.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "instagram": {
      "create_user": {
        "name": "create_user",
        "description": "Creates a new user with a given ID, name, and username.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier for the user."
            },
            "name": {
              "type": "string",
              "description": "The name of the user."
            },
            "username": {
              "type": "string",
              "description": "The username of the user."
            }
          },
          "required": [
            "name",
            "user_id",
            "username"
          ]
        }
      },
      "get_user_details": {
        "name": "get_user_details",
        "description": "Retrieves information about a specific user.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier of the user to retrieve. Cannot be empty."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "list_all_users": {
        "name": "list_all_users",
        "description": "Lists all users in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_user": {
        "name": "delete_user",
        "description": "Deletes a specified user from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier of the user to delete."
            }
          },
          "required": [
            "user_id"
          ]
        }
      },
      "get_user_id_by_username": {
        "name": "get_user_id_by_username",
        "description": "Searches for a user by their username and returns the corresponding user ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "The username to look up in the system.\nThis field cannot be an empty string or contain only whitespace."
            }
          },
          "required": [
            "username"
          ]
        }
      },
      "create_media_post": {
        "name": "create_media_post",
        "description": "Creates a new media post associated with a user.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user who owns the media. Must be a non-empty string."
            },
            "image_url": {
              "type": "string",
              "description": "URL of the media image. Must be a non-empty string."
            },
            "caption": {
              "type": "string",
              "description": "Caption or description for the media. Must be a string.\nDefaults to \"\"."
            }
          },
          "required": [
            "image_url",
            "user_id"
          ]
        }
      },
      "list_all_media_posts": {
        "name": "list_all_media_posts",
        "description": "Lists all media posts in the system.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "delete_media_post": {
        "name": "delete_media_post",
        "description": "Deletes a specified media post from the system.",
        "parameters": {
          "type": "object",
          "properties": {
            "media_id": {
              "type": "string",
              "description": "The unique identifier of the media post to delete.\nMust be a non-empty string."
            }
          },
          "required": [
            "media_id"
          ]
        }
      },
      "add_comment_to_media": {
        "name": "add_comment_to_media",
        "description": "Adds a comment to a media post.",
        "parameters": {
          "type": "object",
          "properties": {
            "media_id": {
              "type": "string",
              "description": "The ID of the media post being commented on."
            },
            "user_id": {
              "type": "string",
              "description": "The ID of the user making the comment."
            },
            "message": {
              "type": "string",
              "description": "The comment text."
            }
          },
          "required": [
            "media_id",
            "message",
            "user_id"
          ]
        }
      },
      "list_media_comments": {
        "name": "list_media_comments",
        "description": "Lists all comments on a specific media post.",
        "parameters": {
          "type": "object",
          "properties": {
            "media_id": {
              "type": "string",
              "description": "The ID of the media post to retrieve comments for."
            }
          },
          "required": [
            "media_id"
          ]
        }
      }
    },
    "notifications": {
      "get_notifications": {
        "name": "get_notifications",
        "description": "Get Android notifications with optional filtering.",
        "parameters": {
          "type": "object",
          "properties": {
            "sender_name": {
              "type": "string",
              "description": "Filter notifications by sender/group name. \nMust be a non-empty string with maximum length of 256 characters if provided."
            },
            "app_name": {
              "type": "string",
              "description": "Filter notifications by application name.\nMust be a non-empty string with maximum length of 256 characters if provided."
            },
            "unread": {
              "type": "boolean",
              "description": "If True (default), fetches only unread notifications and marks them as read.\nIf False, fetches only read notifications without changing their read status."
            }
          }
        }
      },
      "reply_notification": {
        "name": "reply_notification",
        "description": "Reply to a notification with confirmation.",
        "parameters": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Unique bundle identifier to reply to. Must be a non-empty string\nwith maximum length of 256 characters."
            },
            "message_body": {
              "type": "string",
              "description": "The reply message text. Must be a non-empty string."
            },
            "recipient_name": {
              "type": "string",
              "description": "Display name of the recipient. Must be a non-empty string\nwith maximum length of 256 characters."
            },
            "app_name": {
              "type": "string",
              "description": "Optional application name for the reply.\nMust be a non-empty string with maximum length of 256 characters if provided."
            },
            "app_package_name": {
              "type": "string",
              "description": "Optional package name. This parameter is not used \nin the current implementation but is validated for API compatibility.\nMust be a non-empty string with maximum length of 256 characters if provided."
            }
          },
          "required": [
            "key",
            "message_body",
            "recipient_name"
          ]
        }
      },
      "reply_notification_message_or_contact_missing": {
        "name": "reply_notification_message_or_contact_missing",
        "description": "Handle cases where message body or recipient is missing.\n\nThis function is called when a reply attempt is made without\nproviding the necessary information (message body or recipient name).",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "gmail": {
      "trash_thread": {
        "name": "trash_thread",
        "description": "Moves the specified thread to the trash.\n\nThis operation marks the thread and all messages within it as trashed.\nIt utilizes the `Messages.trash` function for each message in the thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the thread to trash. Defaults to ''."
            }
          }
        }
      },
      "untrash_thread": {
        "name": "untrash_thread",
        "description": "Removes the specified thread from the trash.\n\nThis operation restores the thread and all messages within it from the trash.\nIt utilizes the `Messages.untrash` function for each message in the thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the thread to untrash. Defaults to ''."
            }
          }
        }
      },
      "delete_thread": {
        "name": "delete_thread",
        "description": "Immediately and permanently deletes the specified thread.\n\nThis operation cannot be undone. It removes the thread and all associated\nmessages from the user's mailbox permanently.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the thread to delete. Defaults to ''."
            }
          }
        }
      },
      "get_thread": {
        "name": "get_thread",
        "description": "Gets the specified thread.\n\nRetrieves the details of a specific thread identified by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the thread to retrieve. Defaults to ''."
            },
            "format": {
              "type": "string",
              "description": "The format to return the messages in. Accepted values are:\n- 'full': Returns the full message data including body and all fields\n- 'metadata': Returns message ID, labels, and headers (either specified or default)\n- 'minimal': Returns only message ID and labels\n- 'raw': Returns the full message data (same as 'full' in this implementation)\nDefaults to 'full'."
            },
            "metadata_headers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of headers to include when format is set\nto 'metadata'. If None, includes default headers (Subject, From, To, Date).\nCase-insensitive matching is used for common headers. Defaults to None."
            }
          }
        }
      },
      "list_threads": {
        "name": "list_threads",
        "description": "Lists the threads in the user's mailbox.\n\nRetrieves a list of threads matching the specified query criteria.\nNote: Query parameters (`q`, `labelIds`, `include_spam_trash`, `page_token`)\nare included for API compatibility but are not fully implemented.\nThe filtering based on these parameters is not performed.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of threads to return. Defaults to 100.\nActual results might be fewer if less threads exist. The maximum allowed value is 500."
            },
            "page_token": {
              "type": "string",
              "description": "Page token to retrieve a specific page of results.\nDefaults to ''. (Currently ignored)."
            },
            "q": {
              "type": "string",
              "description": "Only return threads matching the specified query. Supports the same\nquery format as the Gmail search box. Defaults to ''. (Currently ignored)."
            },
            "labelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Only return threads with labels that match all of the specified\nlabel IDs in uppercase. Defaults to None. (Currently ignored)."
            },
            "include_spam_trash": {
              "type": "boolean",
              "description": "Include threads from SPAM and TRASH in the results.\nDefaults to False. (Currently ignored)."
            }
          }
        }
      },
      "modify_thread_labels": {
        "name": "modify_thread_labels",
        "description": "Modifies the labels applied to the specified thread.\n\nAdds or removes labels from all messages within the specified thread.\nIt utilizes the `Messages.modify` function for each message in the thread.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me' can be used to indicate the authenticated user."
            },
            "id": {
              "type": "string",
              "description": "The ID of the thread to modify."
            },
            "addLabelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of IDs of labels to add to this message. You can add up to 100 labels with each update."
            },
            "removeLabelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of IDs of labels to remove from this message. You can remove up to 100 labels with each update."
            }
          }
        }
      },
      "get_user_profile": {
        "name": "get_user_profile",
        "description": "Gets the user's Gmail profile information.\n\nRetrieves the profile data associated with the specified user ID from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "watch_user_mailbox": {
        "name": "watch_user_mailbox",
        "description": "Set up or update a watch on the user's mailbox.\n\nStores the watch request configuration for the specified user.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "request": {
              "type": "object",
              "properties": {},
              "description": "An optional dictionary containing the watch request body.\nThe exact structure depends on the watch configuration requirements.\nDefaults to None, resulting in an empty watch configuration."
            }
          }
        }
      },
      "stop_mailbox_watch": {
        "name": "stop_mailbox_watch",
        "description": "Stop receiving push notifications for the user's mailbox.\n\nClears the stored watch configuration for the specified user.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "check_user_exists": {
        "name": "check_user_exists",
        "description": "Checks if a user exists in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The ID of the user to check."
            }
          },
          "required": [
            "userId"
          ]
        }
      },
      "create_user": {
        "name": "create_user",
        "description": "Creates a new user entry in the database.\n\nInitializes the data structure for a new user, including profile,\nempty containers for drafts, messages, threads, labels, settings, history,\nand watch configuration.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The unique identifier for the new user."
            },
            "profile": {
              "type": "object",
              "properties": {},
              "description": "A dictionary containing the initial profile information.\nIt must contain an 'emailAddress' (str) key. Other keys are permitted but ignored\nby this function's core logic beyond validation of 'emailAddress'.\nExample: {\"emailAddress\": \"user@example.com\", \"displayName\": \"John Doe\"}"
            }
          },
          "required": [
            "profile",
            "userId"
          ]
        }
      },
      "create_label": {
        "name": "create_label",
        "description": "Creates a new label.\n\nGenerates a unique ID for the new label and adds it to the user's list\nof labels in the database. The label properties are taken from the `label`\nargument. If no properties are provided, default values are used.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "label": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The display name of the label in uppercase."
                },
                "messageListVisibility": {
                  "type": "string",
                  "description": "The visibility of messages with this label in the message list.\n    Must be one of: 'show', 'hide'. Defaults to 'show'."
                },
                "labelListVisibility": {
                  "type": "string",
                  "description": "The visibility of the label in the label list.\n    Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'. Defaults to 'labelShow'."
                },
                "type": {
                  "type": "string",
                  "description": "The owner type for the label. Must be 'user' for custom labels.\n    Defaults to 'user'. (Note: 'system' is also a valid type internally)."
                },
                "color": {
                  "type": "object",
                  "properties": {
                    "textColor": {
                      "type": "string",
                      "description": "The text color of the label, represented as hex string."
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "The background color represented as hex string #RRGGBB."
                    }
                  },
                  "description": "The color to assign to the label with keys:",
                  "required": [
                    "backgroundColor",
                    "textColor"
                  ]
                }
              },
              "description": "An optional dictionary containing the properties for the new label with keys:",
              "required": [
                "color",
                "labelListVisibility",
                "messageListVisibility",
                "name",
                "type"
              ]
            }
          }
        }
      },
      "delete_label": {
        "name": "delete_label",
        "description": "Immediately and permanently deletes the specified label.\n\nRemoves the label identified by the given ID from the user's list of labels.\nThis operation cannot be undone.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the label to delete. Defaults to ''."
            }
          }
        }
      },
      "get_label": {
        "name": "get_label",
        "description": "Gets the specified label.\n\nRetrieves the label resource identified by the given ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the label to retrieve. Defaults to ''."
            }
          }
        }
      },
      "list_labels": {
        "name": "list_labels",
        "description": "Lists all labels in the user's mailbox.\n\nRetrieves a list of all label resources associated with the specified user.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "update_label": {
        "name": "update_label",
        "description": "Updates the specified label.\n\nModifies an existing label identified by its ID using the properties\nprovided in the label argument. This performs a full update, replacing\nthe existing label properties with the new ones.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the label to update. Defaults to ''."
            },
            "label": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The display name of the label. For system labels, will be automatically converted to uppercase."
                },
                "labelListVisibility": {
                  "type": "string",
                  "description": "The visibility of the label in the label list.\n    Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'."
                },
                "messageListVisibility": {
                  "type": "string",
                  "description": "The visibility of the label in the message list.\n    Must be one of: 'show', 'hide'."
                },
                "type": {
                  "type": "string",
                  "description": "The owner type for the label. Must be 'user' for custom labels.\n    System labels cannot have their type changed."
                },
                "color": {
                  "type": "object",
                  "description": "The color to assign to the label with keys:",
                  "properties": {
                    "textColor": {
                      "type": "string",
                      "description": "The text color of the label, represented as hex string."
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "The background color represented as hex string #RRGGBB."
                    }
                  },
                  "required": [
                    "backgroundColor",
                    "textColor"
                  ]
                }
              },
              "description": "An optional dictionary containing the updated properties for the\nlabel with keys:",
              "required": [
                "labelListVisibility",
                "messageListVisibility",
                "name",
                "type"
              ]
            }
          }
        }
      },
      "patch_label": {
        "name": "patch_label",
        "description": "Updates the specified label. Alias for update.\n\nThis function is an alias for the `update` function. It modifies an\nexisting label identified by its ID using the properties provided in the\n`label` argument. This performs a full update, replacing the existing\nlabel properties with the new ones.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the label to update/patch. Defaults to ''."
            },
            "label": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The display name of the label."
                },
                "messageListVisibility": {
                  "type": "string",
                  "description": "The visibility of messages with this label\n      in the message list. Must be one of: 'show', 'hide'."
                },
                "labelListVisibility": {
                  "type": "string",
                  "description": "The visibility of the label in the label list.\n      Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'."
                },
                "type": {
                  "type": "string",
                  "description": "The owner type for the label. Must be one of: 'user', 'system'."
                },
                "messagesTotal": {
                  "type": "integer",
                  "description": "The total number of messages with the label."
                },
                "messagesUnread": {
                  "type": "integer",
                  "description": "The number of unread messages with the label."
                },
                "threadsTotal": {
                  "type": "integer",
                  "description": "The total number of threads with the label."
                },
                "threadsUnread": {
                  "type": "integer",
                  "description": "The number of unread threads with the label."
                },
                "color": {
                  "type": "object",
                  "properties": {
                    "textColor": {
                      "type": "string",
                      "description": "The text color of the label, represented as hex string."
                    },
                    "backgroundColor": {
                      "type": "string",
                      "description": "The background color represented as hex string #RRGGBB."
                    }
                  },
                  "description": "The color assigned to the label with keys:",
                  "required": [
                    "backgroundColor",
                    "textColor"
                  ]
                }
              },
              "description": "An optional dictionary containing the properties to update\nthe label. Defaults to None, which results in an empty dictionary.\nOptional fields:",
              "required": [
                "color",
                "labelListVisibility",
                "messageListVisibility",
                "messagesTotal",
                "messagesUnread",
                "name",
                "threadsTotal",
                "threadsUnread",
                "type"
              ]
            }
          }
        }
      },
      "create_draft": {
        "name": "create_draft",
        "description": "Creates a new draft message.\n\nCreates a new draft with the DRAFT label. The draft message content is taken from the `draft`\nargument. If no draft content is provided, an empty draft is created.\n\nAttachment size limits are enforced: individual attachments cannot exceed 25MB,\nand the total message size (including all attachments) cannot exceed 100MB.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "draft": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The draft ID. Auto-generated if not provided."
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "threadId": {
                      "type": "object",
                      "description": "The ID of the thread this message belongs to."
                    },
                    "raw": {
                      "type": "object",
                      "description": "The entire message represented as a base64url-encoded string\n              (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments\n              (e.g., as multipart MIME). Individual attachments are limited to 25MB each, with\n              a total message size limit of 100MB. Optional; if not provided, the message will be \n              constructed from 'sender', 'recipient', 'subject', 'body', etc."
                    },
                    "labelIds": {
                      "type": "object",
                      "description": "List of label IDs applied to this message."
                    },
                    "snippet": {
                      "type": "object",
                      "description": "A short part of the message text."
                    },
                    "historyId": {
                      "type": "object",
                      "description": "The ID of the last history record that modified this message."
                    },
                    "internalDate": {
                      "type": "object",
                      "description": "The internal message creation timestamp (epoch ms)."
                    },
                    "sizeEstimate": {
                      "type": "object",
                      "description": "Estimated size in bytes of the message."
                    },
                    "sender": {
                      "type": "object",
                      "description": "The email address of the sender."
                    },
                    "recipient": {
                      "type": "object",
                      "description": "The email address of the recipient."
                    },
                    "subject": {
                      "type": "object",
                      "description": "The message subject."
                    },
                    "body": {
                      "type": "object",
                      "description": "The message body text."
                    },
                    "isRead": {
                      "type": "object",
                      "description": "Whether the message has been read."
                    },
                    "date": {
                      "type": "object",
                      "description": "The date this message was created."
                    },
                    "payload": {
                      "type": "object",
                      "description": "The parsed email structure with keys:",
                      "properties": {
                        "mimeType": {
                          "type": "string",
                          "description": "The MIME type of the message."
                        },
                        "parts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mimeType": {
                                "type": "string",
                                "description": "The MIME type of the part."
                              },
                              "filename": {
                                "type": "object",
                                "description": "The filename for attachment parts."
                              },
                              "body": {
                                "type": "object",
                                "properties": {
                                  "attachmentId": {
                                    "type": "string",
                                    "description": "The attachment ID reference."
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "The size of the attachment in bytes (max 25MB per attachment)."
                                  }
                                },
                                "description": "The body content with keys:",
                                "required": [
                                  "attachmentId",
                                  "size"
                                ]
                              }
                            },
                            "required": [
                              "body",
                              "mimeType"
                            ]
                          },
                          "description": "List of message parts for attachments:"
                        }
                      },
                      "required": [
                        "mimeType",
                        "parts"
                      ]
                    }
                  },
                  "description": "The message object with keys:"
                }
              },
              "description": "An optional dictionary containing the draft message details with keys:",
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "list_drafts": {
        "name": "list_drafts",
        "description": "Lists the drafts in the user's mailbox.\n\nRetrieves a list of draft messages for the specified user, optionally\nfiltered by a query string. Supports basic filtering based on `from:`, `to:`,\n`subject:`, `body:`, `label:`, and general keywords in the query `q`.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of drafts to return. Must be positive.\nDefaults to 100."
            },
            "q": {
              "type": "string",
              "description": "Query string to filter drafts. Supports terms like `from:`, `to:`,\n`subject:`, `body:`, `label:`, and keywords. Defaults to ''.\n\nExamples:\n    - \"from:john@example.com\" - Find drafts from john@example.com\n    - \"to:team@company.com\" - Find drafts to team@company.com\n    - \"subject:meeting\" - Find drafts with \"meeting\" in the subject\n    - \"body:project\" - Find drafts containing \"project\" in the body\n    - \"label:important\" - Find drafts with the \"important\" label\n    - \"from:john@example.com subject:meeting\" - Combine multiple filters"
            }
          }
        }
      },
      "update_draft": {
        "name": "update_draft",
        "description": "Replaces a draft's content.\n\nUpdates an existing draft message identified by its ID with the content\nprovided in the `draft` argument. If the draft with the specified ID\ndoes not exist, it returns None.\nEnsures the 'DRAFT' label is present on the updated message.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the draft to update."
            },
            "draft": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "object",
                      "description": "The immutable ID of the message."
                    },
                    "threadId": {
                      "type": "object",
                      "description": "The ID of the thread this message belongs to."
                    },
                    "raw": {
                      "type": "object",
                      "description": "The entire message represented as a base64url-encoded string\n              (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments\n              (e.g., as multipart MIME). Optional; if not provided, the message will be constructed from 'sender', 'recipient', 'subject', 'body', etc."
                    },
                    "labelIds": {
                      "type": "object",
                      "description": "List of label IDs applied to this message. If provided,\n      replaces all existing labels except 'DRAFT' (which is always preserved). The 'INBOX' label\n      is explicitly removed if present in the input list."
                    },
                    "snippet": {
                      "type": "object",
                      "description": "A short part of the message text."
                    },
                    "historyId": {
                      "type": "object",
                      "description": "The ID of the last history record that modified this message."
                    },
                    "internalDate": {
                      "type": "object",
                      "description": "The internal message creation timestamp (epoch ms)."
                    },
                    "sizeEstimate": {
                      "type": "object",
                      "description": "Estimated size in bytes of the message."
                    },
                    "sender": {
                      "type": "object",
                      "description": "The email address of the sender."
                    },
                    "recipient": {
                      "type": "object",
                      "description": "The email address of the recipient."
                    },
                    "subject": {
                      "type": "object",
                      "description": "The message subject."
                    },
                    "body": {
                      "type": "object",
                      "description": "The message body text."
                    },
                    "isRead": {
                      "type": "object",
                      "description": "Whether the message has been read."
                    },
                    "date": {
                      "type": "object",
                      "description": "The date this message was created."
                    },
                    "payload": {
                      "type": "object",
                      "description": "The parsed email structure with keys:",
                      "properties": {
                        "mimeType": {
                          "type": "string",
                          "description": "The MIME type of the message."
                        },
                        "parts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mimeType": {
                                "type": "string",
                                "description": "The MIME type of the part."
                              },
                              "filename": {
                                "type": "object",
                                "description": "The filename for attachment parts."
                              },
                              "body": {
                                "type": "object",
                                "properties": {
                                  "attachmentId": {
                                    "type": "string",
                                    "description": "The attachment ID reference."
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "The size of the attachment in bytes."
                                  }
                                },
                                "description": "The body content with keys:",
                                "required": [
                                  "attachmentId",
                                  "size"
                                ]
                              }
                            },
                            "required": [
                              "body",
                              "mimeType"
                            ]
                          },
                          "description": "List of message parts for attachments:"
                        }
                      },
                      "required": [
                        "mimeType",
                        "parts"
                      ]
                    }
                  },
                  "description": "The message updates with keys:"
                }
              },
              "description": "An optional dictionary containing the updated draft message content with keys:",
              "required": [
                "message"
              ]
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "delete_draft": {
        "name": "delete_draft",
        "description": "Immediately and permanently deletes the specified draft.\n\nRemoves the draft message identified by the given ID from the user's\nmailbox. Also cleans up any attachments that are no longer referenced\nafter the draft deletion.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the draft to delete. Defaults to ''."
            }
          }
        }
      },
      "get_draft": {
        "name": "get_draft",
        "description": "Gets the specified draft.\n\nRetrieves the draft message identified by the given ID.\nThe format parameter determines what data is returned:\n- 'minimal': Returns only email message ID and labels\n- 'full': Returns the full email message data with parsed body content\n- 'raw': Returns the full email message data with body content in raw field\n- 'metadata': Returns only email message ID, labels, and email headers",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the draft to retrieve. Defaults to ''."
            },
            "format": {
              "type": "string",
              "description": "The format to return the message in. One of 'minimal',\n'full', 'raw', or 'metadata'. Defaults to 'full'."
            }
          }
        }
      },
      "send_draft": {
        "name": "send_draft",
        "description": "Sends the specified draft.\n\nSends the message associated with a draft. If the `draft` argument contains\nan `id` corresponding to an existing draft, that draft is sent and then\ndeleted. If no `id` is provided, or the `id` doesn't match an existing\ndraft, the message content within the `draft` argument (specifically\n`draft['message']['raw']`) is sent directly using `Messages.send`.\n\nAttachment size limits are enforced: individual attachments cannot exceed 25MB,\nand the total message size (including all attachments) cannot exceed 100MB.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "draft": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "object",
                  "description": "The ID of an existing draft to send."
                },
                "message": {
                  "type": "object",
                  "description": "The message content to send directly with keys:",
                  "properties": {
                    "threadId": {
                      "type": "object",
                      "description": "The ID of the thread this message belongs to."
                    },
                    "raw": {
                      "type": "object",
                      "description": "The entire message represented as a base64url-encoded string\n              (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments\n              (e.g., as multipart MIME). Individual attachments are limited to 25MB each, with\n              a total message size limit of 100MB. Optional; if not provided, the message will be \n              constructed from 'sender', 'recipient', 'subject', 'body', etc."
                    },
                    "internalDate": {
                      "type": "object",
                      "description": "The internal message creation timestamp (epoch ms)."
                    },
                    "labelIds": {
                      "type": "object",
                      "description": "List of label IDs applied to this message."
                    },
                    "snippet": {
                      "type": "object",
                      "description": "A short part of the message text."
                    },
                    "historyId": {
                      "type": "object",
                      "description": "The ID of the last history record that modified this message."
                    },
                    "sizeEstimate": {
                      "type": "object",
                      "description": "Estimated size in bytes of the message."
                    },
                    "sender": {
                      "type": "object",
                      "description": "The email address of the sender."
                    },
                    "recipient": {
                      "type": "object",
                      "description": "The email address of the recipient."
                    },
                    "subject": {
                      "type": "object",
                      "description": "The message subject."
                    },
                    "body": {
                      "type": "object",
                      "description": "The message body text."
                    },
                    "isRead": {
                      "type": "object",
                      "description": "Whether the message has been read."
                    },
                    "date": {
                      "type": "object",
                      "description": "The message date."
                    },
                    "payload": {
                      "type": "object",
                      "description": "The parsed email structure with keys:",
                      "properties": {
                        "mimeType": {
                          "type": "string",
                          "description": "The MIME type of the message."
                        },
                        "parts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "mimeType": {
                                "type": "string",
                                "description": "The MIME type of the part."
                              },
                              "filename": {
                                "type": "object",
                                "description": "The filename for attachment parts."
                              },
                              "body": {
                                "type": "object",
                                "properties": {
                                  "attachmentId": {
                                    "type": "string",
                                    "description": "The attachment ID reference."
                                  },
                                  "size": {
                                    "type": "integer",
                                    "description": "The size of the attachment in bytes (max 25MB per attachment)."
                                  }
                                },
                                "description": "The body content with keys:",
                                "required": [
                                  "attachmentId",
                                  "size"
                                ]
                              }
                            },
                            "required": [
                              "body",
                              "mimeType"
                            ]
                          },
                          "description": "List of message parts for attachments:"
                        }
                      },
                      "required": [
                        "mimeType",
                        "parts"
                      ]
                    }
                  }
                }
              },
              "description": "An optional dictionary containing the draft to send with keys:"
            }
          }
        }
      },
      "list_history_records": {
        "name": "list_history_records",
        "description": "Lists the history of all changes to the given mailbox.\n\nRetrieves a list of mailbox history records for the specified user.\nNote: Filtering parameters (`start_history_id`, `label_id`,\n`history_types`) and pagination (`page_token`) are included\nfor API compatibility but are not fully implemented. The function currently returns\nstored history records up to `max_results`.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "max_results": {
              "type": "integer",
              "description": "The maximum number of history records to return.\nDefaults to 100."
            },
            "page_token": {
              "type": "string",
              "description": "Page token to retrieve a specific page of results.\nDefaults to ''. (Currently ignored)."
            },
            "start_history_id": {
              "type": "string",
              "description": "Returns history records after the specified\n`start_history_id`. Defaults to ''. (Currently ignored)."
            },
            "label_id": {
              "type": "string",
              "description": "History records specific to the specified label in uppercase.\nDefaults to ''. (Currently ignored)."
            },
            "history_types": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "History types to retrieve. Defaults to None.\n(Currently ignored)."
            }
          }
        }
      },
      "get_auto_forwarding_settings": {
        "name": "get_auto_forwarding_settings",
        "description": "Gets the auto-forwarding setting for the specified user.\n\nRetrieves the current auto-forwarding configuration associated with the\nuser's account from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "update_auto_forwarding_settings": {
        "name": "update_auto_forwarding_settings",
        "description": "Updates the auto-forwarding setting for the specified user.\n\nModifies the auto-forwarding configuration for the user's account based\non the provided `auto_forwarding_settings`. Only the fields present in the\ninput dictionary are updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "auto_forwarding_settings": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether to enable auto-forwarding."
                },
                "emailAddress": {
                  "type": "string",
                  "description": "Valid email address to forward messages to."
                },
                "disposition": {
                  "type": "string",
                  "description": "How to handle forwarded messages.\n  Valid values: 'dispositionUnspecified', 'leaveInInbox', 'archive', 'trash', 'markRead'."
                }
              },
              "description": "An optional dictionary containing \nthe settings to update with keys:",
              "required": [
                "disposition",
                "emailAddress",
                "enabled"
              ]
            }
          }
        }
      },
      "get_vacation_settings": {
        "name": "get_vacation_settings",
        "description": "Gets the vacation responder settings for the specified user.\n\nRetrieves the current vacation auto-reply configuration associated with the\nuser's account from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "update_vacation_settings": {
        "name": "update_vacation_settings",
        "description": "Updates the vacation responder settings for the specified user.\n\nModifies the vacation auto-reply configuration for the user's account based\non the provided `vacation_settings`. Only the fields present in the input\ndictionary are updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "vacation_settings": {
              "type": "object",
              "properties": {
                "enableAutoReply": {
                  "type": "boolean",
                  "description": "Whether to enable vacation auto-reply."
                },
                "responseSubject": {
                  "type": "string",
                  "description": "Subject line of the auto-reply message."
                },
                "responseBodyHtml": {
                  "type": "string",
                  "description": "HTML body of the auto-reply message."
                }
              },
              "description": "An optional dictionary containing the vacation settings\nto update with keys:",
              "required": [
                "enableAutoReply",
                "responseBodyHtml",
                "responseSubject"
              ]
            }
          }
        }
      },
      "get_imap_settings": {
        "name": "get_imap_settings",
        "description": "Gets the IMAP settings for the specified user.\n\nRetrieves the current IMAP configuration associated with the user's account\nfrom the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "update_imap_settings": {
        "name": "update_imap_settings",
        "description": "Updates the IMAP settings for the specified user.\n\nModifies the IMAP configuration for the user's account based on the provided\n`imap_settings`. Only the fields present in the input dictionary are updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "imap_settings": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether to enable IMAP access."
                },
                "autoExpunge": {
                  "type": "boolean",
                  "description": "Whether to automatically expunge messages."
                },
                "expungeBehavior": {
                  "type": "string",
                  "description": "How to handle expunged messages."
                }
              },
              "description": "An optional dictionary containing the IMAP settings to update with keys:",
              "required": [
                "autoExpunge",
                "enabled",
                "expungeBehavior"
              ]
            }
          }
        }
      },
      "get_language_settings": {
        "name": "get_language_settings",
        "description": "Gets the language settings for the specified user.\n\nRetrieves the current language configuration (e.g., display language)\nassociated with the user's account from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "update_language_settings": {
        "name": "update_language_settings",
        "description": "Updates the language settings for the specified user.\n\nModifies the language configuration for the user's account based on the\nprovided `language_settings`. Only the fields present in the input dictionary\nare updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "language_settings": {
              "type": "object",
              "properties": {
                "displayLanguage": {
                  "type": "string",
                  "description": "The language code for display (e.g., 'en-US' for English)."
                }
              },
              "description": "An optional dictionary containing the language settings\nto update with keys:",
              "required": [
                "displayLanguage"
              ]
            }
          }
        }
      },
      "get_pop_settings": {
        "name": "get_pop_settings",
        "description": "Gets the POP settings for the specified user.\n\nRetrieves the current POP (Post Office Protocol) configuration associated\nwith the user's account from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "update_pop_settings": {
        "name": "update_pop_settings",
        "description": "Updates the POP settings for the specified user.\n\nModifies the POP configuration for the user's account based on the provided\n`pop_settings`. Only the fields present in the input dictionary are updated.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "pop_settings": {
              "type": "object",
              "properties": {
                "accessWindow": {
                  "type": "string",
                  "description": "The range of messages accessible via POP.\n                      Valid values: 'accessWindowUnspecified', 'disabled', 'fromNowOn', 'allMail'"
                },
                "disposition": {
                  "type": "string",
                  "description": "How to handle messages after POP access.\n                     Valid values: 'dispositionUnspecified', 'leaveInInbox', 'archive', 'trash', 'markRead'"
                }
              },
              "description": "An optional dictionary containing the POP settings to update with keys:",
              "required": [
                "accessWindow",
                "disposition"
              ]
            }
          }
        }
      },
      "list_send_as_smime_info": {
        "name": "list_send_as_smime_info",
        "description": "Lists the S/MIME info for a specific 'Send as' alias.\n\nRetrieves all S/MIME certificate configurations associated with the given\nuser ID and 'Send as' email address from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias.\nDefaults to ''."
            }
          }
        }
      },
      "get_send_as_smime_info": {
        "name": "get_send_as_smime_info",
        "description": "Gets the specified S/MIME info for a specific 'Send as' alias.\n\nRetrieves a specific S/MIME certificate configuration identified by its ID,\nassociated with the given user ID and 'Send as' email address.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias.\nDefaults to ''."
            },
            "smime_id": {
              "type": "string",
              "description": "The ID of the S/MIME info to retrieve. Defaults to ''."
            }
          }
        }
      },
      "insert_send_as_smime_info": {
        "name": "insert_send_as_smime_info",
        "description": "Inserts a new S/MIME info configuration for the specified 'Send as' alias.\n\nCreates and stores a new S/MIME certificate configuration. Generates a\nunique ID for the new S/MIME info.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias to associate\nthe S/MIME info with. Defaults to ''."
            },
            "smime": {
              "type": "object",
              "properties": {
                "encryptedKey": {
                  "type": "string",
                  "description": "The encrypted key for the S/MIME certificate."
                }
              },
              "description": "An optional dictionary containing the S/MIME properties with keys:",
              "required": [
                "encryptedKey"
              ]
            }
          }
        }
      },
      "update_send_as_smime_info": {
        "name": "update_send_as_smime_info",
        "description": "Updates the specified S/MIME info.\n\nModifies an existing S/MIME certificate configuration identified by its ID.\nThis performs a full update, replacing existing properties.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias associated\nwith the S/MIME info. Defaults to ''."
            },
            "id": {
              "type": "string",
              "description": "The ID of the S/MIME info to update. Defaults to ''."
            },
            "smime": {
              "type": "object",
              "properties": {
                "encryptedKey": {
                  "type": "string",
                  "description": "The encrypted key for the S/MIME certificate."
                }
              },
              "description": "An optional dictionary containing the updated S/MIME properties with keys:",
              "required": [
                "encryptedKey"
              ]
            }
          }
        }
      },
      "patch_send_as_smime_info": {
        "name": "patch_send_as_smime_info",
        "description": "Updates the specified S/MIME info. Alias for update.\n\nThis function is an alias for the `update` function. It modifies an\nexisting S/MIME certificate configuration. Note: Implemented as a full update.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias. Defaults to ''."
            },
            "id": {
              "type": "string",
              "description": "The ID of the S/MIME info to update/patch. Defaults to ''."
            },
            "smime": {
              "type": "object",
              "properties": {
                "encryptedKey": {
                  "type": "string",
                  "description": "The encrypted key for the S/MIME certificate."
                }
              },
              "description": "An optional dictionary containing the properties to update with keys:",
              "required": [
                "encryptedKey"
              ]
            }
          }
        }
      },
      "delete_send_as_smime_info": {
        "name": "delete_send_as_smime_info",
        "description": "Deletes the specified S/MIME certificate configuration.\n\nRemoves the S/MIME info identified by its ID from the specified\n'Send as' alias configuration.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias from which\nto delete the S/MIME info. Defaults to ''."
            },
            "id": {
              "type": "string",
              "description": "The ID of the S/MIME info to delete. Defaults to ''."
            }
          }
        }
      },
      "set_default_send_as_smime_info": {
        "name": "set_default_send_as_smime_info",
        "description": "Sets the specified S/MIME certificate as the default for the alias.\n\nMarks the S/MIME info identified by `id` as the default configuration\nfor the given 'Send as' alias, removing the default status from any other\nS/MIME configurations for that alias.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias. Defaults to ''."
            },
            "id": {
              "type": "string",
              "description": "The ID of the S/MIME info to set as default. Defaults to ''."
            }
          }
        }
      },
      "list_send_as_aliases": {
        "name": "list_send_as_aliases",
        "description": "Lists the 'Send as' aliases for the specified user.\n\nRetrieves all custom 'from' addresses (aliases) associated with the user's\naccount from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            }
          }
        }
      },
      "get_send_as_alias": {
        "name": "get_send_as_alias",
        "description": "Gets the specified 'Send as' alias configuration.\n\nRetrieves the details of a specific custom 'from' address (alias)\nidentified by its email address.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias to retrieve.\nDefaults to ''."
            }
          }
        }
      },
      "create_send_as_alias": {
        "name": "create_send_as_alias",
        "description": "Creates a new 'Send as' alias configuration.\n\nAdds a custom 'from' address (alias) to the user's account. The alias\nemail address is used as the key. The verification status is\ntypically set based on domain policies or user actions, but may default\nto 'accepted' in some implementations.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as": {
              "type": "object",
              "properties": {
                "sendAsEmail": {
                  "type": "string",
                  "description": "The email address for the alias."
                },
                "displayName": {
                  "type": "string",
                  "description": "The display name for the alias."
                },
                "replyToAddress": {
                  "type": "string",
                  "description": "The reply-to address."
                },
                "signature": {
                  "type": "string",
                  "description": "The email signature for the alias."
                }
              },
              "description": "An optional dictionary containing the properties for the new\nalias with keys:",
              "required": [
                "displayName",
                "replyToAddress",
                "sendAsEmail",
                "signature"
              ]
            }
          }
        }
      },
      "update_send_as_alias": {
        "name": "update_send_as_alias",
        "description": "Updates the specified 'Send as' alias configuration.\n\nModifies an existing custom 'from' address (alias) identified by its email\naddress, using the properties provided in the `send_as` argument.\nThis performs a full update.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias to update.\nDefaults to ''."
            },
            "send_as": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "The display name for the alias."
                },
                "replyToAddress": {
                  "type": "string",
                  "description": "The reply-to address."
                },
                "signature": {
                  "type": "string",
                  "description": "The email signature for the alias."
                }
              },
              "description": "An optional dictionary containing the updated properties with keys:",
              "required": [
                "displayName",
                "replyToAddress",
                "signature"
              ]
            }
          }
        }
      },
      "patch_send_as_alias": {
        "name": "patch_send_as_alias",
        "description": "Updates the specified 'Send as' alias configuration. Alias for update.\n\nThis function is an alias for the `update` function. It modifies an\nexisting alias. Note: This implementation performs patch as a full update.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the alias to update/patch.\nDefaults to ''."
            },
            "send_as": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "description": "The display name for the alias."
                },
                "replyToAddress": {
                  "type": "string",
                  "description": "The reply-to address."
                },
                "signature": {
                  "type": "string",
                  "description": "The email signature for the alias."
                }
              },
              "description": "An optional dictionary containing the properties to update with keys:",
              "required": [
                "displayName",
                "replyToAddress",
                "signature"
              ]
            }
          }
        }
      },
      "delete_send_as_alias": {
        "name": "delete_send_as_alias",
        "description": "Deletes the specified 'Send as' alias.\n\nRemoves a custom 'from' address (alias) identified by its email address\nfrom the user's account.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias to delete.\nDefaults to ''."
            }
          }
        }
      },
      "verify_send_as_alias": {
        "name": "verify_send_as_alias",
        "description": "Verifies the specified 'Send as' alias.\n\nInitiates the verification process for a custom 'from' address. If the alias\nexists and requires verification (e.g., status is 'pending'), its status\nmay be updated to 'accepted' upon successful verification.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "send_as_email": {
              "type": "string",
              "description": "The email address of the 'Send as' alias to verify.\nDefaults to ''."
            }
          }
        }
      },
      "trash_message": {
        "name": "trash_message",
        "description": "Moves the specified message to the trash.\n\nAdds the 'TRASH' label to the message identified by the given ID.\nIf the message already has the 'TRASH' label, it remains unchanged.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the message to trash. Defaults to ''."
            }
          }
        }
      },
      "untrash_message": {
        "name": "untrash_message",
        "description": "Removes the specified message from the trash.\n\nRemoves the 'TRASH' label (uppercase) from the message.\nIf the message does not have 'TRASH', it remains unchanged.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the message to untrash. Defaults to ''."
            }
          }
        }
      },
      "delete_message": {
        "name": "delete_message",
        "description": "Immediately and permanently deletes the specified message.\n\nRemoves the message identified by the given ID from the user's mailbox.\nThis operation cannot be undone. Also cleans up any attachments that\nare no longer referenced after the message deletion.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the message to delete. Defaults to ''."
            }
          }
        }
      },
      "batch_delete_messages": {
        "name": "batch_delete_messages",
        "description": "Deletes many messages simultaneously.\n\nPermanently deletes all messages identified by the IDs in the provided list.\nAlso cleans up any attachments that are no longer referenced after the\nmessage deletions.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of message IDs to delete. Defaults to None."
            }
          }
        }
      },
      "import_message": {
        "name": "import_message",
        "description": "Imports a message into the mailbox, applying specified labels.\n\nCreates a new message entry in the database with a generated ID.\nPrimarily uses the `raw` content if provided in `msg`. Adds the 'DELETED'\nlabel if the `deleted` flag is True.\nNote: `internal_date_source`, `never_mark_spam`, and `process_for_calendar`\nare included for API compatibility but are ignored in this implementation.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "msg": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "string",
                  "description": "Raw message content."
                }
              },
              "description": "An optional dictionary containing the message data with keys:",
              "required": [
                "raw"
              ]
            },
            "internal_date_source": {
              "type": "string",
              "description": "Specifies how to determine the internal date.\nDefaults to 'dateHeader'. (Currently ignored)."
            },
            "never_mark_spam": {
              "type": "boolean",
              "description": "Whether to prevent the message from being marked as spam.\nDefaults to False. (Currently ignored)."
            },
            "process_for_calendar": {
              "type": "boolean",
              "description": "Whether to process calendar invitations.\nDefaults to False. (Currently ignored)."
            },
            "deleted": {
              "type": "boolean",
              "description": "Mark the imported message as deleted. Defaults to False."
            }
          }
        }
      },
      "insert_message": {
        "name": "insert_message",
        "description": "Directly inserts a message into the mailbox.\n\nSimilar to `import_`, but typically used for messages composed by the user\n(e.g., drafts). Creates a new message with generated ID and thread ID.\nPopulates fields based on the `msg` dictionary. Adds 'INBOX' and 'UNREAD'\nlabels by default, and 'DELETED' if the flag is set.\n\nAttachment size limits are enforced: individual attachments cannot exceed 25MB,\nand the total message size (including all attachments) cannot exceed 100MB.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "msg": {
              "type": "object",
              "properties": {
                "threadId": {
                  "type": "string",
                  "description": "Thread ID for the message."
                },
                "raw": {
                  "type": "object",
                  "description": "The entire message represented as a base64url-encoded string\n        (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments\n        (e.g., as multipart MIME). Individual attachments are limited to 25MB each, with\n        a total message size limit of 100MB. Optional; if not provided, the message will be \n        constructed from 'sender', 'recipient', 'subject', 'body', etc."
                },
                "sender": {
                  "type": "string",
                  "description": "Sender email address."
                },
                "recipient": {
                  "type": "string",
                  "description": "Recipient email address."
                },
                "subject": {
                  "type": "string",
                  "description": "Message subject."
                },
                "body": {
                  "type": "string",
                  "description": "Message body."
                },
                "date": {
                  "type": "string",
                  "description": "Message date."
                },
                "internalDate": {
                  "type": "string",
                  "description": "Internal date of the message."
                },
                "isRead": {
                  "type": "boolean",
                  "description": "Whether the message has been read."
                },
                "labelIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of labels to apply to the message in uppercase."
                }
              },
              "description": "An optional dictionary containing the message data with keys:",
              "required": [
                "body",
                "date",
                "internalDate",
                "isRead",
                "labelIds",
                "recipient",
                "sender",
                "subject",
                "threadId"
              ]
            },
            "internal_date_source": {
              "type": "string",
              "description": "Determines how the message's `internalDate` is set if `internalDate` is not provided or is None in the `msg` payload.\nIf `msg` contains a non-None `internalDate` field, that value is used directly (expected as a string Unix timestamp). Otherwise, this parameter applies:"
            },
            "deleted": {
              "type": "boolean",
              "description": "Mark the inserted message as deleted. Defaults to False."
            }
          }
        }
      },
      "get_message": {
        "name": "get_message",
        "description": "Gets the specified message.\n\nRetrieves the message resource identified by the given ID. The response format\ncan be customized using the format parameter.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the message to retrieve. Defaults to ''."
            },
            "format": {
              "type": "string",
              "description": "The format to return the message in. Must be one of:\n- 'minimal': Returns only email message ID and labels\n- 'full': Returns the full email message data with body content\n- 'raw': Returns the full email message data with raw field (RFC 2822 compliant and may include attachments (e.g., as multipart MIME))\n- 'metadata': Returns only email message ID, labels, and email headers\nDefaults to 'full'."
            },
            "metadata_headers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of headers to include when format='metadata'.\nAll elements in the list must be strings. Defaults to None."
            }
          }
        }
      },
      "send_message": {
        "name": "send_message",
        "description": "Sends the specified message to the specified recipient.\n\nProcesses RFC 2822 MIME messages by parsing the base64url-encoded raw message\nto extract headers and payload structure. Automatically extracts and stores\nany attachments, creating the proper Gmail API payload structure with parts references.\n\nAttachment size limits are enforced: individual attachments cannot exceed 25MB,\nand the total message size (including all attachments) cannot exceed 100MB.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "msg": {
              "type": "object",
              "properties": {
                "raw": {
                  "type": "object",
                  "description": "The entire message represented as a base64url-encoded string\n              (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments\n              (e.g., as multipart MIME). Individual attachments are limited to 25MB each, with\n              a total message size limit of 100MB. Optional; if not provided, the message will be \n              constructed from 'sender', 'recipient', 'subject', 'body', etc."
                },
                "threadId": {
                  "type": "string",
                  "description": "Thread ID to assign to the message. If not specified,\n                   a new thread will be created. Defaults to auto-generated."
                },
                "labelIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of label IDs to apply to the message.\n                         The 'SENT' label is automatically applied."
                },
                "sender": {
                  "type": "string",
                  "description": "Sender email address."
                },
                "recipient": {
                  "type": "string",
                  "description": "Recipient email address."
                },
                "subject": {
                  "type": "string",
                  "description": "Message subject line."
                },
                "body": {
                  "type": "string",
                  "description": "Plain text message body."
                },
                "date": {
                  "type": "string",
                  "description": "Message date in RFC 2822 format."
                },
                "internalDate": {
                  "type": "string",
                  "description": "Internal timestamp as milliseconds since epoch."
                },
                "isRead": {
                  "type": "boolean",
                  "description": "Whether the message has been read."
                }
              },
              "description": "An optional dictionary containing the message data with keys:",
              "required": [
                "body",
                "date",
                "internalDate",
                "isRead",
                "labelIds",
                "recipient",
                "sender",
                "subject",
                "threadId"
              ]
            }
          }
        }
      },
      "list_messages": {
        "name": "list_messages",
        "description": "Lists the messages in the user's mailbox.\n\nRetrieves a list of messages matching the specified query criteria.\nSupports filtering based on whether the message has the `TRASH` or `SPAM` label,\nand using `q` (keywords, from:, to:, label:, subject:, attachment:) and `labelIds`.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user ID. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "max_results": {
              "type": "integer",
              "description": "Maximum number of messages to return. Defaults to 100."
            },
            "q": {
              "type": "string",
              "description": "Query string for filtering messages. Strings with spaces must be enclosed\nin single (') or double (\") quotes. Supports space-delimited tokens\n(each one filters the current result set). Supported tokens:\n- `from:<email>`       Exact sender address (case-insensitive)\n- `to:<email>`         Exact recipient address (case-insensitive)\n- `label:<LABEL_ID>`   Uppercase label ID\n- `subject:<text>`     Substring match in the subject (case-insensitive)\n- `<keyword>`          Substring match in subject, body, sender or recipient (case-insensitive)\n- `\"<phrase>\"`         Exact phrase match in subject or body (case-insensitive)\n\nFilters are combined by implicit AND; token order does not matter.\nExamples:\n    # Messages from bob@example.com with \"report\" in the subject\n    q='from:bob@example.com subject:report'\n    # Messages mentioning the exact phrase \"urgent fix\"\n    q='\"urgent fix\"'"
            },
            "labelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of label IDs required on messages. Defaults to None."
            },
            "include_spam_trash": {
              "type": "boolean",
              "description": "Include messages from SPAM and TRASH.\nDefaults to False."
            }
          }
        }
      },
      "modify_message_labels": {
        "name": "modify_message_labels",
        "description": "Modifies the labels on the specified message.\n\nAdds or removes labels from the message identified by the given ID. All labels are handled\ncase-insensitively and stored in their uppercase form. The function enforces label exclusivity\nrules where INBOX is mutually exclusive with SENT, DRAFT, and TRASH. Adding SENT, DRAFT, or TRASH\nwill automatically remove INBOX, while adding INBOX will only succeed if none of SENT, DRAFT, or\nTRASH are present. All labels are converted to uppercase before processing, duplicates are\nautomatically removed, and labels are stored in a sorted list for consistency. Custom labels can\nbe added alongside system labels.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "id": {
              "type": "string",
              "description": "The ID of the message to modify. Defaults to ''."
            },
            "addLabelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label names to add. Label names are handled\ncase-insensitively and stored in their uppercase form. Defaults to None."
            },
            "removeLabelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label names to remove. Label names are handled\ncase-insensitively and stored in their uppercase form. Defaults to None."
            }
          }
        }
      },
      "batch_modify_message_labels": {
        "name": "batch_modify_message_labels",
        "description": "Modifies the labels on multiple messages simultaneously.\n\nApplies the specified label modifications (add/remove) to all messages\nidentified by the IDs in the provided list.",
        "parameters": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "ids": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of message IDs to modify. Defaults to None or an empty list."
            },
            "addLabelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label IDs to add. Label IDs are handled\ncase-insensitively and stored in their uppercase form. Defaults to None."
            },
            "removeLabelIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of label IDs to remove. Label IDs are handled\ncase-insensitively and stored in their uppercase form. Defaults to None."
            }
          }
        }
      },
      "get_message_attachment": {
        "name": "get_message_attachment",
        "description": "Gets the specified message attachment.\n\nRetrieves the content of a specific attachment identified by its ID from the\nglobal attachments collection. This implementation validates inputs comprehensively\nand optionally verifies that the attachment is referenced in the specified message.",
        "parameters": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The user's email address. The special value 'me'\ncan be used to indicate the authenticated user. Defaults to 'me'."
            },
            "message_id": {
              "type": "string",
              "description": "The ID of the message containing the attachment. Must be a non-empty string.\nDefaults to ''."
            },
            "id": {
              "type": "string",
              "description": "The ID of the attachment to retrieve. Must be a non-empty string.\nDefaults to ''."
            }
          }
        }
      }
    },
    "whatsapp": {
      "search_contacts": {
        "name": "search_contacts",
        "description": "Search WhatsApp contacts by name or phone number.\n\nThis function searches WhatsApp contacts by name or phone number.\nIt uses the provided query term to match against contact names or phone numbers.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search term to match against contact names or phone numbers."
            }
          },
          "required": [
            "query"
          ]
        }
      },
      "get_contact_chats": {
        "name": "get_contact_chats",
        "description": "Get all WhatsApp chats involving the contact.\n\nThis function retrieves all WhatsApp chats that involve the contact specified by their JID.\nThe number of chats returned can be controlled using `limit`, and `page` allows for\nfetching subsequent sets of chats.",
        "parameters": {
          "type": "object",
          "properties": {
            "jid": {
              "type": "string",
              "description": "The contact's JID to search for."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of chats to return. Defaults to 20."
            },
            "page": {
              "type": "integer",
              "description": "Page number for pagination. Defaults to 0."
            }
          },
          "required": [
            "jid"
          ]
        }
      },
      "list_chats": {
        "name": "list_chats",
        "description": "Get WhatsApp chats matching specified criteria.\n\nThis function retrieves WhatsApp chats based on specified criteria.\nThese criteria include an optional search term to filter chats by name or\nJID, a limit on the maximum number of chats to return, a page number\nfor pagination, an option to include the last message in each chat,\nand a field to sort results by (either \"last_active\" or \"name\").",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Optional search term to filter chats by name or JID.\nDefaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of chats to return. Defaults to 20."
            },
            "page": {
              "type": "integer",
              "description": "Page number for pagination. Defaults to 0."
            },
            "include_last_message": {
              "type": "boolean",
              "description": "Whether to include the last message in each chat.\nDefaults to True."
            },
            "sort_by": {
              "type": "string",
              "description": "Field to sort results by, either \"last_active\" or \"name\".\nDefaults to \"last_active\"."
            }
          }
        }
      },
      "get_chat": {
        "name": "get_chat",
        "description": "Get WhatsApp chat metadata by JID.\n\nThis function retrieves metadata for a WhatsApp chat identified by its\nJabber Identifier (JID). It can also include the last message of the\nchat if specified.",
        "parameters": {
          "type": "object",
          "properties": {
            "chat_jid": {
              "type": "string",
              "description": "The JID of the chat to retrieve."
            },
            "include_last_message": {
              "type": "boolean",
              "description": "Whether to include the last message (default True)."
            }
          },
          "required": [
            "chat_jid"
          ]
        }
      },
      "get_direct_chat_by_contact": {
        "name": "get_direct_chat_by_contact",
        "description": "Get WhatsApp chat metadata by sender phone number.\n\nThis function retrieves metadata for a direct WhatsApp chat associated with a\nspecific sender's phone number.",
        "parameters": {
          "type": "object",
          "properties": {
            "sender_phone_number": {
              "type": "string",
              "description": "The phone number to search for."
            }
          },
          "required": [
            "sender_phone_number"
          ]
        }
      },
      "get_last_interaction": {
        "name": "get_last_interaction",
        "description": "Gets the most recent WhatsApp message involving the contact.\n\nThis function gets the most recent WhatsApp message that was either sent to\nor received from the contact specified by the JID.",
        "parameters": {
          "type": "object",
          "properties": {
            "jid": {
              "type": "string",
              "description": "The JID of the contact to search for."
            }
          },
          "required": [
            "jid"
          ]
        }
      },
      "list_messages": {
        "name": "list_messages",
        "description": "Get WhatsApp messages matching specified criteria with optional context.",
        "parameters": {
          "type": "object",
          "properties": {
            "after": {
              "type": "string",
              "description": "ISO 8601 datetime string. Only return messages after this time."
            },
            "before": {
              "type": "string",
              "description": "ISO 8601 datetime string. Only return messages before this time."
            },
            "sender_phone_number": {
              "type": "string",
              "description": "Filter messages by sender's phone number."
            },
            "chat_jid": {
              "type": "string",
              "description": "Filter messages by chat JID (must contain '@')."
            },
            "query": {
              "type": "string",
              "description": "Search for messages containing this text (case-insensitive)."
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of messages to return. Defaults to 20."
            },
            "page": {
              "type": "integer",
              "description": "Page number for pagination (0-based). Defaults to 0."
            },
            "include_context": {
              "type": "boolean",
              "description": "Whether to include surrounding messages. Defaults to True."
            },
            "context_before": {
              "type": "integer",
              "description": "Number of messages to include before each match. Defaults to 1."
            },
            "context_after": {
              "type": "integer",
              "description": "Number of messages to include after each match. Defaults to 1."
            }
          }
        }
      },
      "get_message_context": {
        "name": "get_message_context",
        "description": "Get context around a specific WhatsApp message.\n\nThis function retrieves context around a specific WhatsApp message. It allows specifying the number of messages to fetch before and after the identified target message, aiding in understanding the conversation flow around that particular message.",
        "parameters": {
          "type": "object",
          "properties": {
            "message_id": {
              "type": "string",
              "description": "The ID of the message to get context for."
            },
            "before": {
              "type": "integer",
              "description": "Number of messages to include before the target message. Defaults to 5."
            },
            "after": {
              "type": "integer",
              "description": "Number of messages to include after the target message. Defaults to 5."
            }
          },
          "required": [
            "message_id"
          ]
        }
      },
      "send_message": {
        "name": "send_message",
        "description": "Send a WhatsApp message to a person or group.\n\nThis function sends a WhatsApp message to a specified person or group.\nFor group chats, the JID (Jabber ID) must be used as the recipient identifier.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": "string",
              "description": "The recipient - either a phone number with country code\nbut no + or other symbols, or a JID (e.g.,\n'123456789@s.whatsapp.net' or a group JID like\n'123456789@g.us')."
            },
            "message": {
              "type": "string",
              "description": "The message text to send."
            }
          },
          "required": [
            "message",
            "recipient"
          ]
        }
      },
      "send_file": {
        "name": "send_file",
        "description": "Send a file such as a picture, raw audio, video or document via WhatsApp to the specified recipient.\n\nThis function sends various types of media files (images, videos, documents, audio) to a WhatsApp contact or group.\nThe file type is automatically detected based on the file extension and MIME type.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": "string",
              "description": "The recipient - either a phone number with country code but no + or other symbols, or a JID (e.g., \"123456789@s.whatsapp.net\" or a group JID like \"123456789@g.us\")."
            },
            "media_path": {
              "type": "string",
              "description": "The absolute path to the media file to send."
            },
            "caption": {
              "type": "string",
              "description": "Optional caption text to accompany the media file."
            }
          },
          "required": [
            "media_path",
            "recipient"
          ]
        }
      },
      "send_audio_message": {
        "name": "send_audio_message",
        "description": "Send any audio file as a WhatsApp audio message to the specified recipient.\n\nFor group messages, the JID is used for the recipient. If an error occurs due to ffmpeg not being installed or conversion failing, an attempt is made to send the original file as a generic audio message. The function sends the audio file specified by `media_path`; this file is converted to Opus .ogg if it is not already a .ogg file.",
        "parameters": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": "string",
              "description": "The recipient - either a phone number with country code but no + or other symbols, or a JID (e.g., \"123456789@s.whatsapp.net\" or a group JID like \"123456789@g.us\")."
            },
            "media_path": {
              "type": "string",
              "description": "The absolute path to the audio file to send (will be converted to Opus .ogg if it's not a .ogg file)."
            }
          },
          "required": [
            "media_path",
            "recipient"
          ]
        }
      },
      "download_media": {
        "name": "download_media",
        "description": "Download media from a WhatsApp message and get the local file path.\n\nThis function downloads media content from a specific WhatsApp message. It uses the provided message ID and chat JID to locate the message, attempts to retrieve its media, and if successful, saves the media to a local file. The function then returns a dictionary detailing the outcome of this operation, including the success status, a message, and the path to the downloaded file.",
        "parameters": {
          "type": "object",
          "properties": {
            "message_id": {
              "type": "string",
              "description": "The ID of the message containing the media."
            },
            "chat_jid": {
              "type": "string",
              "description": "The JID of the chat containing the message."
            }
          },
          "required": [
            "chat_jid",
            "message_id"
          ]
        }
      }
    },
    "linkedin": {
      "get_organizations_by_vanity_name": {
        "name": "get_organizations_by_vanity_name",
        "description": "Retrieves organization(s) by vanity name with optional field projection and pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "query_field": {
              "type": "string",
              "description": "Query parameter expected to be 'vanityName'."
            },
            "vanity_name": {
              "type": "string",
              "description": "The organization's vanity name to search for."
            },
            "projection": {
              "type": "string",
              "description": "Field projection syntax for controlling which fields to return.\nThe projection string should consist of comma-separated field names and may optionally\nbe enclosed in parentheses. Defaults to None."
            },
            "start": {
              "type": "integer",
              "description": "Starting index for pagination. Defaults to 0."
            },
            "count": {
              "type": "integer",
              "description": "Number of items to return. Defaults to 10."
            }
          },
          "required": [
            "query_field",
            "vanity_name"
          ]
        }
      },
      "create_organization": {
        "name": "create_organization",
        "description": "Creates a new organization in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_data": {
              "type": "object",
              "properties": {
                "vanityName": {
                  "type": "string",
                  "description": "Organization's vanity name (e.g., 'global-tech')."
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "localized": {
                      "type": "object",
                      "properties": {
                        "en_US": {
                          "type": "string",
                          "description": "English (US) localized name."
                        }
                      },
                      "description": "Dictionary with locale keys mapping to the localized name, keys are locale codes in the format <language>_<COUNTRY>, for example:",
                      "required": [
                        "en_US"
                      ]
                    },
                    "preferredLocale": {
                      "type": "object",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country code (e.g., 'US')."
                        },
                        "language": {
                          "type": "string",
                          "description": "Language code (e.g., 'en')."
                        }
                      },
                      "description": "tells you which language/country version LinkedIn considers the \"main\" or \"default\" for that particular localized content.Dictionary with keys:",
                      "required": [
                        "country",
                        "language"
                      ]
                    }
                  },
                  "description": "Localized organization name with keys:",
                  "required": [
                    "localized",
                    "preferredLocale"
                  ]
                },
                "primaryOrganizationType": {
                  "type": "string",
                  "description": "Type of organization ('COMPANY' or 'SCHOOL')."
                }
              },
              "description": "Dictionary containing the new organization's data with keys:",
              "required": [
                "name",
                "primaryOrganizationType",
                "vanityName"
              ]
            }
          },
          "required": [
            "organization_data"
          ]
        }
      },
      "update_organization_by_id": {
        "name": "update_organization_by_id",
        "description": "Updates an existing organization's data in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_id": {
              "type": "string",
              "description": "Unique identifier of the organization to update."
            },
            "organization_data": {
              "type": "object",
              "properties": {
                "vanityName": {
                  "type": "string",
                  "description": "Updated vanity name (e.g., 'global-tech')."
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "localized": {
                      "type": "object",
                      "properties": {
                        "en_US": {
                          "type": "string",
                          "description": "English (US) localized name."
                        }
                      },
                      "description": "Dictionary with locale keys mapping to the localized name:",
                      "required": [
                        "en_US"
                      ]
                    },
                    "preferredLocale": {
                      "type": "object",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country code (e.g., 'US')."
                        },
                        "language": {
                          "type": "string",
                          "description": "Language code (e.g., 'en')."
                        }
                      },
                      "description": "tells you which language/country version LinkedIn considers the \"main\" or \"default\" for that particular localized content. Dictionary with keys:",
                      "required": [
                        "country",
                        "language"
                      ]
                    }
                  },
                  "description": "Updated localized organization name with keys:",
                  "required": [
                    "localized",
                    "preferredLocale"
                  ]
                },
                "primaryOrganizationType": {
                  "type": "string",
                  "description": "Updated type of organization ('COMPANY' or 'SCHOOL')."
                }
              },
              "description": "Dictionary containing the updated organization data with keys:",
              "required": [
                "name",
                "primaryOrganizationType",
                "vanityName"
              ]
            }
          },
          "required": [
            "organization_data",
            "organization_id"
          ]
        }
      },
      "delete_organization_by_id": {
        "name": "delete_organization_by_id",
        "description": "Deletes an organization from the database by its ID.",
        "parameters": {
          "type": "object",
          "properties": {
            "organization_id": {
              "type": "string",
              "description": "Unique identifier of the organization to delete."
            }
          },
          "required": [
            "organization_id"
          ]
        }
      },
      "delete_organization_by_vanity_name": {
        "name": "delete_organization_by_vanity_name",
        "description": "Deletes organization(s) from the database by vanity name.",
        "parameters": {
          "type": "object",
          "properties": {
            "query_field": {
              "type": "string",
              "description": "Query parameter expected to be 'vanityName'."
            },
            "vanity_name": {
              "type": "string",
              "description": "The organization's vanity name to delete."
            }
          },
          "required": [
            "query_field",
            "vanity_name"
          ]
        }
      },
      "get_organization_acls_by_role_assignee": {
        "name": "get_organization_acls_by_role_assignee",
        "description": "Retrieves ACL records by roleAssignee URN with optional field projection and pagination. Retrieve information about the roles and permissions that a specific LinkedIn member (the \"role assignee\") has within one or more organizations on LinkedIn",
        "parameters": {
          "type": "object",
          "properties": {
            "query_field": {
              "type": "string",
              "description": "Query parameter expected to be 'roleAssignee'."
            },
            "role_assignee": {
              "type": "string",
              "description": "URN of the person whose ACL records are requested."
            },
            "projection": {
              "type": "string",
              "description": "Field projection syntax for controlling which fields to return.\nThe projection string should consist of comma-separated field names and may optionally\nbe enclosed in parentheses. Defaults to None."
            },
            "start": {
              "type": "integer",
              "description": "Starting index for pagination. Defaults to 0."
            },
            "count": {
              "type": "integer",
              "description": "Number of items to return. Defaults to 10."
            }
          },
          "required": [
            "query_field",
            "role_assignee"
          ]
        }
      },
      "create_organization_acl": {
        "name": "create_organization_acl",
        "description": "Creates a new organization ACL record in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "acl_data": {
              "type": "object",
              "properties": {
                "roleAssignee": {
                  "type": "string",
                  "description": "URN of the person to assign the role to (e.g., 'urn:li:person:1')."
                },
                "role": {
                  "type": "string",
                  "description": "Role to assign to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR')."
                },
                "organization": {
                  "type": "string",
                  "description": "URN of the organization (e.g., 'urn:li:organization:1')."
                },
                "state": {
                  "type": "string",
                  "description": "Initial state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED')."
                }
              },
              "description": "Dictionary containing the new ACL record data with keys:",
              "required": [
                "organization",
                "role",
                "roleAssignee",
                "state"
              ]
            }
          },
          "required": [
            "acl_data"
          ]
        }
      },
      "update_organization_acl": {
        "name": "update_organization_acl",
        "description": "Updates an existing organization ACL record in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "acl_id": {
              "type": "string",
              "description": "Unique identifier of the ACL record to update."
            },
            "acl_data": {
              "type": "object",
              "properties": {
                "roleAssignee": {
                  "type": "string",
                  "description": "Updated URN of the person assigned the role (e.g., 'urn:li:person:1')."
                },
                "role": {
                  "type": "string",
                  "description": "Updated role assigned to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR')."
                },
                "organization": {
                  "type": "string",
                  "description": "Updated URN of the organization (e.g., 'urn:li:organization:1')."
                },
                "state": {
                  "type": "string",
                  "description": "Updated state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED')."
                }
              },
              "description": "Dictionary containing the updated ACL data with keys:",
              "required": [
                "organization",
                "role",
                "roleAssignee",
                "state"
              ]
            }
          },
          "required": [
            "acl_data",
            "acl_id"
          ]
        }
      },
      "delete_organization_acl": {
        "name": "delete_organization_acl",
        "description": "Deletes an organization ACL record from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "acl_id": {
              "type": "string",
              "description": "Unique identifier of the ACL record to delete."
            }
          },
          "required": [
            "acl_id"
          ]
        }
      },
      "create_post": {
        "name": "create_post",
        "description": "Creates a new post in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "post_data": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "string",
                  "description": "URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1')."
                },
                "commentary": {
                  "type": "string",
                  "description": "Content of the post."
                },
                "visibility": {
                  "type": "string",
                  "description": "Visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER')."
                }
              },
              "description": "Dictionary containing the new post data with keys:",
              "required": [
                "author",
                "commentary",
                "visibility"
              ]
            }
          },
          "required": [
            "post_data"
          ]
        }
      },
      "get_post_by_id": {
        "name": "get_post_by_id",
        "description": "Retrieves a post by its identifier with optional field projection.",
        "parameters": {
          "type": "object",
          "properties": {
            "post_id": {
              "type": "string",
              "description": "Unique identifier of the post to retrieve."
            },
            "projection": {
              "type": "string",
              "description": "Field projection syntax for controlling which fields to return.\nThe projection string should consist of comma-separated field names and may optionally\nbe enclosed in parentheses. Defaults to None."
            },
            "start": {
              "type": "integer",
              "description": "Starting index for pagination. Defaults to 0. Must be non-negative."
            },
            "count": {
              "type": "integer",
              "description": "Number of items to return. Defaults to 10. Must be positive."
            }
          },
          "required": [
            "post_id"
          ]
        }
      },
      "find_posts_by_author": {
        "name": "find_posts_by_author",
        "description": "Searches for and lists posts based on the provided author identifier with pagination.",
        "parameters": {
          "type": "object",
          "properties": {
            "author": {
              "type": "string",
              "description": "The identifier of the author (e.g., \"urn:li:person:1\" or \"urn:li:organization:1\") used to filter posts."
            },
            "start": {
              "type": "integer",
              "description": "Starting index for pagination. Must be a non-negative integer. Defaults to 0."
            },
            "count": {
              "type": "integer",
              "description": "Maximum number of posts to return. Must be a non-negative integer. Defaults to 10."
            }
          },
          "required": [
            "author"
          ]
        }
      },
      "update_post": {
        "name": "update_post",
        "description": "Updates an existing post in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "post_id": {
              "type": "string",
              "description": "Unique identifier of the post to update."
            },
            "post_data": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "string",
                  "description": "Updated URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1')."
                },
                "commentary": {
                  "type": "string",
                  "description": "Updated content of the post."
                },
                "visibility": {
                  "type": "string",
                  "description": "Updated visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER')."
                }
              },
              "description": "Dictionary containing the updated post data with keys:",
              "required": [
                "author",
                "commentary",
                "visibility"
              ]
            }
          },
          "required": [
            "post_data",
            "post_id"
          ]
        }
      },
      "delete_post_by_id": {
        "name": "delete_post_by_id",
        "description": "Deletes a post from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "post_id": {
              "type": "string",
              "description": "Unique identifier of the post to delete."
            }
          },
          "required": [
            "post_id"
          ]
        }
      },
      "get_my_profile": {
        "name": "get_my_profile",
        "description": "Retrieves the authenticated member's profile data from the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "projection": {
              "type": "string",
              "description": "Field projection syntax for controlling which fields to return.\nThe projection string should consist of comma-separated field names and may optionally\nbe enclosed in parentheses. Defaults to None."
            }
          }
        }
      },
      "create_my_profile": {
        "name": "create_my_profile",
        "description": "Creates a new member profile and sets it as the current authenticated member.",
        "parameters": {
          "type": "object",
          "properties": {
            "person_data": {
              "type": "object",
              "properties": {
                "localizedFirstName": {
                  "type": "string",
                  "description": "Member's first name."
                },
                "localizedLastName": {
                  "type": "string",
                  "description": "Member's last name."
                },
                "vanityName": {
                  "type": "string",
                  "description": "URL-friendly version of the member's name."
                },
                "firstName": {
                  "type": "object",
                  "properties": {
                    "localized": {
                      "type": "object",
                      "properties": {
                        "en_US": {
                          "type": "string",
                          "description": "English (US) localized name."
                        }
                      },
                      "description": "Dictionary with locale keys mapping to the localized name:",
                      "required": [
                        "en_US"
                      ]
                    },
                    "preferredLocale": {
                      "type": "object",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country code (e.g., 'US')."
                        },
                        "language": {
                          "type": "string",
                          "description": "Language code (e.g., 'en')."
                        }
                      },
                      "description": "Dictionary with keys:",
                      "required": [
                        "country",
                        "language"
                      ]
                    }
                  },
                  "description": "Localized first name with keys:",
                  "required": [
                    "localized",
                    "preferredLocale"
                  ]
                },
                "lastName": {
                  "type": "object",
                  "properties": {
                    "localized": {
                      "type": "object",
                      "properties": {
                        "en_US": {
                          "type": "string",
                          "description": "English (US) localized name."
                        }
                      },
                      "description": "Dictionary with locale keys mapping to the localized name:",
                      "required": [
                        "en_US"
                      ]
                    },
                    "preferredLocale": {
                      "type": "object",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country code (e.g., 'US')."
                        },
                        "language": {
                          "type": "string",
                          "description": "Language code (e.g., 'en')."
                        }
                      },
                      "description": "Dictionary with keys:",
                      "required": [
                        "country",
                        "language"
                      ]
                    }
                  },
                  "description": "Localized last name with keys:",
                  "required": [
                    "localized",
                    "preferredLocale"
                  ]
                }
              },
              "description": "Dictionary containing the new member's profile data with keys:",
              "required": [
                "firstName",
                "lastName",
                "localizedFirstName",
                "localizedLastName",
                "vanityName"
              ]
            }
          },
          "required": [
            "person_data"
          ]
        }
      },
      "update_my_profile": {
        "name": "update_my_profile",
        "description": "Updates the authenticated member's profile data in the database.",
        "parameters": {
          "type": "object",
          "properties": {
            "person_data": {
              "type": "object",
              "properties": {
                "localizedFirstName": {
                  "type": "string",
                  "description": "Updated first name."
                },
                "localizedLastName": {
                  "type": "string",
                  "description": "Updated last name."
                },
                "vanityName": {
                  "type": "string",
                  "description": "URL-friendly version of the member's name."
                },
                "firstName": {
                  "type": "object",
                  "properties": {
                    "localized": {
                      "type": "object",
                      "properties": {
                        "en_US": {
                          "type": "string",
                          "description": "English (US) localized name."
                        }
                      },
                      "description": "Dictionary with locale keys mapping to the localized name:",
                      "required": [
                        "en_US"
                      ]
                    },
                    "preferredLocale": {
                      "type": "object",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country code (e.g., 'US')."
                        },
                        "language": {
                          "type": "string",
                          "description": "Language code (e.g., 'en')."
                        }
                      },
                      "description": "Dictionary with keys:",
                      "required": [
                        "country",
                        "language"
                      ]
                    }
                  },
                  "description": "Localized first name with keys:",
                  "required": [
                    "localized",
                    "preferredLocale"
                  ]
                },
                "lastName": {
                  "type": "object",
                  "properties": {
                    "localized": {
                      "type": "object",
                      "properties": {
                        "en_US": {
                          "type": "string",
                          "description": "English (US) localized name."
                        }
                      },
                      "description": "Dictionary with locale keys mapping to the localized name:",
                      "required": [
                        "en_US"
                      ]
                    },
                    "preferredLocale": {
                      "type": "object",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country code (e.g., 'US')."
                        },
                        "language": {
                          "type": "string",
                          "description": "Language code (e.g., 'en')."
                        }
                      },
                      "description": "Dictionary with keys:",
                      "required": [
                        "country",
                        "language"
                      ]
                    }
                  },
                  "description": "Localized last name with keys:",
                  "required": [
                    "localized",
                    "preferredLocale"
                  ]
                }
              },
              "description": "Dictionary containing the updated member profile data with keys:",
              "required": [
                "firstName",
                "lastName",
                "localizedFirstName",
                "localizedLastName",
                "vanityName"
              ]
            }
          },
          "required": [
            "person_data"
          ]
        }
      },
      "delete_my_profile": {
        "name": "delete_my_profile",
        "description": "Deletes the authenticated member's profile from the database.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "stripe": {
      "create_customer": {
        "name": "create_customer",
        "description": "This tool creates a customer in Stripe.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the customer."
            },
            "email": {
              "type": "string",
              "description": "The email of the customer."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_customers": {
        "name": "list_customers",
        "description": "This function fetches a list of Customers from Stripe. It processes an optional `limit`\n\nto control the number of customers retrieved and an optional `email` to filter\ncustomers by their email address in a case-sensitive manner.",
        "parameters": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "email": {
              "type": "string",
              "description": "A case-sensitive filter on the list based on the customer's email field. The value must be a string."
            }
          }
        }
      },
      "create_product": {
        "name": "create_product",
        "description": "This tool will create a product in Stripe.\n\nThis function creates a product in Stripe. It accepts a name for the product,\nwhich is mandatory, and an optional description to further detail the product.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the product."
            },
            "description": {
              "type": "string",
              "description": "The description of the product."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "list_products": {
        "name": "list_products",
        "description": "This tool will fetch a list of Products from Stripe.\n\nThis tool fetches a list of Products from Stripe. It takes one optional argument, `limit`, to specify the number of products to return.",
        "parameters": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."
            }
          }
        }
      },
      "create_price": {
        "name": "create_price",
        "description": "This tool will create a price in Stripe.\n\nThis function creates a new price. If a product has not already been\nspecified, a product should be created first. It uses the provided product ID,\nunit amount (in cents), and currency to define the new price.",
        "parameters": {
          "type": "object",
          "properties": {
            "product": {
              "type": "string",
              "description": "The ID of the product to create the price for."
            },
            "currency": {
              "type": "string",
              "description": "The currency of the price."
            },
            "unit_amount": {
              "type": "integer",
              "description": "The unit amount of the price in cents. Non negative integer. Defaults to None."
            }
          },
          "required": [
            "currency",
            "product"
          ]
        }
      },
      "list_prices": {
        "name": "list_prices",
        "description": "This tool will fetch a list of Prices from Stripe.\n\nThis function fetches a list of Prices from Stripe. It takes two optional arguments:\n`product`, the ID of the product to list prices for, and `limit`, the number of prices to return.",
        "parameters": {
          "type": "object",
          "properties": {
            "product": {
              "type": "string",
              "description": "The ID of the product to list prices for. Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100. Defaults to 10."
            }
          }
        }
      },
      "create_payment_link": {
        "name": "create_payment_link",
        "description": "Creates a payment link in Stripe.\n\nThis function creates a payment link in Stripe. It takes the ID of the price\nto create the payment link for and the quantity of the product to include\nin the payment link.",
        "parameters": {
          "type": "object",
          "properties": {
            "price": {
              "type": "string",
              "description": "The ID of the price to create the payment link for."
            },
            "quantity": {
              "type": "integer",
              "description": "The quantity of the product to include."
            }
          },
          "required": [
            "price",
            "quantity"
          ]
        }
      },
      "create_invoice": {
        "name": "create_invoice",
        "description": "This tool will create an invoice in Stripe.\n\nThis tool creates an invoice in Stripe. It takes the ID of the customer (`customer`) for whom to create the invoice, and an optional number of days (`days_until_due`) until the invoice is due.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer": {
              "type": "string",
              "description": "The ID of the customer to create the invoice for."
            },
            "days_until_due": {
              "type": "integer",
              "description": "The number of days until the invoice is due."
            }
          },
          "required": [
            "customer"
          ]
        }
      },
      "create_invoice_item": {
        "name": "create_invoice_item",
        "description": "This tool will create an invoice item in Stripe.\n\nThis function creates an invoice item in Stripe. It uses the provided customer ID,\nprice ID, and invoice ID to define the new invoice item's associations and\nlink it to the respective customer, product/service price, and invoice.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer": {
              "type": "string",
              "description": "The ID of the customer to create the invoice item for."
            },
            "price": {
              "type": "string",
              "description": "The ID of the price for the item."
            },
            "invoice": {
              "type": "string",
              "description": "The ID of the invoice to create the item for."
            }
          },
          "required": [
            "customer",
            "invoice",
            "price"
          ]
        }
      },
      "finalize_invoice": {
        "name": "finalize_invoice",
        "description": "This tool will finalize an invoice in Stripe.\n\nThis function finalizes an invoice in Stripe. It takes the ID of the invoice to finalize as an argument.",
        "parameters": {
          "type": "object",
          "properties": {
            "invoice": {
              "type": "string",
              "description": "The ID of the invoice to finalize."
            }
          },
          "required": [
            "invoice"
          ]
        }
      },
      "retrieve_balance": {
        "name": "retrieve_balance",
        "description": "Retrieves the balance from Stripe.\n\nThis function retrieves the balance from Stripe. It takes no input.",
        "parameters": {
          "type": "object",
          "properties": {}
        }
      },
      "create_refund": {
        "name": "create_refund",
        "description": "This tool will refund a payment intent in Stripe.\n\nIt takes three arguments:\n- payment_intent (str): The ID of the payment intent to refund.\n- amount (int, optional): The amount to refund in cents.\n- reason (str, optional): The reason for the refund.",
        "parameters": {
          "type": "object",
          "properties": {
            "payment_intent": {
              "type": "string",
              "description": "The ID of the PaymentIntent to refund."
            },
            "amount": {
              "type": "integer",
              "description": "The amount to refund in cents."
            },
            "reason": {
              "type": "string",
              "description": "The reason for the refund."
            }
          },
          "required": [
            "payment_intent"
          ]
        }
      },
      "list_payment_intents": {
        "name": "list_payment_intents",
        "description": "This tool will list payment intents in Stripe.\n\nThis function lists payment intents in Stripe. It takes an optional customer ID\nto list payment intents for a specific customer, and an optional limit to specify\nthe number of payment intents to return.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer": {
              "type": "string",
              "description": "The ID of the customer to list payment intents for."
            },
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            }
          }
        }
      },
      "list_subscriptions": {
        "name": "list_subscriptions",
        "description": "This tool will list all subscriptions in Stripe.\n\nThis function lists all subscriptions in Stripe. It allows for filtering the\nsubscriptions based on customer ID, price ID, status, and limiting the\nnumber of results returned.",
        "parameters": {
          "type": "object",
          "properties": {
            "customer": {
              "type": "string",
              "description": "The ID of the customer to list subscriptions for."
            },
            "price": {
              "type": "string",
              "description": "The ID of the price to list subscriptions for."
            },
            "status": {
              "type": "string",
              "description": "The status of the subscriptions to retrieve. Possible\nvalues: 'active', 'past_due', 'unpaid', 'canceled', 'incomplete',\n'incomplete_expired', 'trialing', 'all'."
            },
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned.\nLimit can range between 1 and 100."
            }
          }
        }
      },
      "cancel_subscription": {
        "name": "cancel_subscription",
        "description": "Cancels a subscription in Stripe.\n\nThis function cancels a subscription in Stripe. It requires the ID of the\nsubscription to be canceled, which is passed as an argument.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The ID of the subscription to cancel."
            }
          },
          "required": [
            "subscription"
          ]
        }
      },
      "update_subscription": {
        "name": "update_subscription",
        "description": "This tool will update an existing subscription in Stripe. If changing an\n\nexisting subscription item, the existing subscription item has to be set\nto deleted and the new one has to be added.",
        "parameters": {
          "type": "object",
          "properties": {
            "subscription": {
              "type": "string",
              "description": "The ID of the subscription to update."
            },
            "proration_behavior": {
              "type": "string",
              "description": "Determines how to handle prorations\nwhen the subscription items change. Options: 'create_prorations',\n'always_invoice', 'none_implicit', 'none'."
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the subscription item to modify."
                  },
                  "price": {
                    "type": "string",
                    "description": "The ID of the price to switch to."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of the plan to subscribe to."
                  },
                  "deleted": {
                    "type": "boolean",
                    "description": "Whether to delete this item."
                  }
                },
                "required": [
                  "deleted",
                  "id",
                  "price",
                  "quantity"
                ]
              },
              "description": "A list of subscription items to\nupdate, add, or remove. Each item in the list is a dictionary that\ncan contain the following keys:"
            }
          },
          "required": [
            "subscription"
          ]
        }
      },
      "list_coupons": {
        "name": "list_coupons",
        "description": "This tool will fetch a list of Coupons from Stripe.\n\nThis function fetches a list of Coupons from Stripe. It takes one optional argument,\n`limit`, which is an integer used to specify the number of coupons to return.",
        "parameters": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            }
          }
        }
      },
      "create_coupon": {
        "name": "create_coupon",
        "description": "This function creates a coupon in Stripe. The discount can be specified either as a percentage off via `percent_off`\n\nor as a fixed amount off via `amount_off`. It is essential that only one of these, `percent_off` or `amount_off`,\nis used to define the discount; providing values for both, or values for neither\nthat define a valid discount, will result in an error. If `amount_off` is used as the discount method,\nthe `currency` parameter must also be appropriately set (it defaults to 'USD').\nThe function also supports optional parameters to define the coupon's duration. The `duration`\nparameter specifies how long the discount remains active and accepts 'once', 'repeating', or 'forever'\n(defaulting to 'once'). If `duration` is 'repeating', the `duration_in_months` parameter is\nrequired to indicate the number of months the coupon applies.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the coupon displayed to customers on invoices or receipts."
            },
            "amount_off": {
              "type": "integer",
              "description": "A positive integer representing the amount to subtract from an\ninvoice total. This parameter is required by the function signature."
            },
            "currency": {
              "type": "string",
              "description": "Three-letter ISO code for the currency of the `amount_off`\nparameter (e.g., 'USD', 'EUR'). This is required if `amount_off` is used to\nspecify the discount and `percent_off` is not provided. Defaults to 'USD'."
            },
            "duration": {
              "type": "string",
              "description": "Specifies how long the discount will last. Valid values\nare 'once', 'repeating', or 'forever'. Defaults to 'once'."
            },
            "percent_off": {
              "type": "number",
              "description": "A positive float greater than or equal to 0 and less than or\nequal to 100, representing the percentage discount the coupon will apply.\nIf provided, this defines the coupon's discount instead of `amount_off`."
            },
            "duration_in_months": {
              "type": "integer",
              "description": "If `duration` is 'repeating', this specifies\nthe number of months the discount will apply."
            }
          },
          "required": [
            "amount_off",
            "name"
          ]
        }
      },
      "update_dispute": {
        "name": "update_dispute",
        "description": "Updates a dispute, allowing for the submission of evidence to aid in its resolution.\n\nThis function is used to update a specific dispute. When a dispute is received, it is generally best to first contact the customer.\nIf this does not resolve the issue, this function allows for the submission of evidence to support your position in the dispute.\nEvidence provided can be immediately submitted to the bank or staged on the dispute for later submission, based on the `submit` parameter.\nUpdating any field in the `evidence` hash will submit all fields in that hash for review.",
        "parameters": {
          "type": "object",
          "properties": {
            "dispute": {
              "type": "string",
              "description": "The ID of the dispute to update."
            },
            "evidence": {
              "type": "object",
              "properties": {
                "cancellation_policy_disclosure": {
                  "type": "object",
                  "description": "An explanation of how and when the customer was shown your refund policy prior to purchase."
                },
                "duplicate_charge_explanation": {
                  "type": "object",
                  "description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate."
                },
                "uncategorized_text": {
                  "type": "object",
                  "description": "Any additional evidence or statements."
                }
              },
              "description": "Evidence to upload, to respond to a dispute.\nUpdating any field in the hash will submit all fields in the hash for review.\nExpected keys:"
            },
            "submit": {
              "type": "boolean",
              "description": "Whether to immediately submit evidence to the bank. If false, evidence is staged on the dispute."
            }
          },
          "required": [
            "dispute"
          ]
        }
      },
      "list_disputes": {
        "name": "list_disputes",
        "description": "This function fetches a list of disputes in Stripe. It allows filtering the\n\ndisputes based on an associated charge ID or PaymentIntent ID, and limiting\nthe number of results.",
        "parameters": {
          "type": "object",
          "properties": {
            "charge": {
              "type": "string",
              "description": "Only return disputes associated to the charge\nspecified by this charge ID."
            },
            "payment_intent": {
              "type": "string",
              "description": "Only return disputes associated to the\nPaymentIntent specified by this PaymentIntent ID. Defaults to None."
            },
            "limit": {
              "type": "integer",
              "description": "A limit on the number of objects to be returned. Limit can\nrange between 1 and 100, and the default is 10."
            }
          }
        }
      }
    }
  }
}