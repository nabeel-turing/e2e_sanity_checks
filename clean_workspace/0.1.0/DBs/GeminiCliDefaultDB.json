{
  "workspace_root": "/home/user/project",
  "cwd": "/home/user/project",
  "file_system": {
    "/home/user/project": {
      "path": "/home/user/project",
      "is_directory": true,
      "content_lines": [],
      "size_bytes": 0,
      "last_modified": "2025-01-15T10:30:00Z"
    },
    "/home/user/project/.gitignore": {
      "path": "/home/user/project/.gitignore",
      "is_directory": false,
      "content_lines": [
        "node_modules/\n",
        "*.log\n",
        ".env\n",
        "dist/\n",
        "__pycache__/\n",
        "*.pyc\n"
      ],
      "size_bytes": 56,
      "last_modified": "2025-01-15T10:32:00Z"
    },
    "/home/user/project/.geminiignore": {
      "path": "/home/user/project/.geminiignore",
      "is_directory": false,
      "content_lines": [
        "# Gemini CLI ignore patterns\n",
        "node_modules/\n",
        "*.log\n",
        ".git/\n",
        "dist/\n",
        "build/\n",
        "__pycache__/\n",
        "*.pyc\n",
        ".DS_Store\n"
      ],
      "size_bytes": 102,
      "last_modified": "2025-01-15T10:32:30Z"
    },
    "/home/user/project/.gemini": {
      "path": "/home/user/project/.gemini",
      "is_directory": true,
      "content_lines": [],
      "size_bytes": 0,
      "last_modified": "2025-07-09T00:00:00Z"
    },
    "/home/user/project/README.md": {
      "path": "/home/user/project/README.md",
      "is_directory": false,
      "content_lines": [
        "# Sample Workspace\n",
        "\n",
        "This is a minimal workspace for the gemini_cli API simulation.\n",
        "\n",
        "## Features\n",
        "\n",
        "- File system operations\n",
        "- Content management\n",
        "- Developer tools integration\n"
      ],
      "size_bytes": 163,
      "last_modified": "2025-01-15T10:35:00Z"
    },
    "/home/user/project/package.json": {
      "path": "/home/user/project/package.json",
      "is_directory": false,
      "content_lines": [
        "{\n",
        "  \"name\": \"sample-project\",\n",
        "  \"version\": \"1.0.0\",\n",
        "  \"description\": \"A sample project for gemini-cli testing\",\n",
        "  \"main\": \"src/main.js\",\n",
        "  \"scripts\": {\n",
        "    \"start\": \"node src/main.js\",\n",
        "    \"test\": \"jest\"\n",
        "  },\n",
        "  \"dependencies\": {\n",
        "    \"express\": \"^4.18.0\"\n",
        "  },\n",
        "  \"devDependencies\": {\n",
        "    \"jest\": \"^29.0.0\"\n",
        "  }\n",
        "}\n"
      ],
      "size_bytes": 340,
      "last_modified": "2025-01-15T10:33:00Z"
    },
    "/home/user/project/src": {
      "path": "/home/user/project/src",
      "is_directory": true,
      "content_lines": [],
      "size_bytes": 0,
      "last_modified": "2025-01-15T10:31:00Z"
    },
    "/home/user/project/src/main.py": {
      "path": "/home/user/project/src/main.py",
      "is_directory": false,
      "content_lines": [
        "#!/usr/bin/env python3\n",
        "\"\"\"Main entry point for the sample application.\"\"\"\n",
        "\n",
        "import sys\n",
        "import os\n",
        "\n",
        "\n",
        "def main():\n",
        "    \"\"\"Main function that prints a greeting.\"\"\"\n",
        "    print(\"Hello from Gemini simulation!\")\n",
        "    print(f\"Python version: {sys.version}\")\n",
        "    print(f\"Current directory: {os.getcwd()}\")\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n"
      ],
      "size_bytes": 356,
      "last_modified": "2025-01-15T10:40:00Z"
    },
    "/home/user/project/src/utils.py": {
      "path": "/home/user/project/src/utils.py",
      "is_directory": false,
      "content_lines": [
        "\"\"\"Utility functions for the sample application.\"\"\"\n",
        "\n",
        "from typing import Any, Dict, List\n",
        "\n",
        "\n",
        "def format_data(data: Dict[str, Any]) -> str:\n",
        "    \"\"\"Format data dictionary as a readable string.\"\"\"\n",
        "    return '\\n'.join(f\"{k}: {v}\" for k, v in data.items())\n",
        "\n",
        "\n",
        "def validate_input(value: str) -> bool:\n",
        "    \"\"\"Validate input string is not empty.\"\"\"\n",
        "    return bool(value and value.strip())\n",
        "\n",
        "\n",
        "def process_list(items: List[str]) -> List[str]:\n",
        "    \"\"\"Process a list of strings by stripping whitespace.\"\"\"\n",
        "    return [item.strip() for item in items if item.strip()]\n"
      ],
      "size_bytes": 506,
      "last_modified": "2025-01-15T10:38:00Z"
    },
    "/home/user/project/docs": {
      "path": "/home/user/project/docs",
      "is_directory": true,
      "content_lines": [],
      "size_bytes": 0,
      "last_modified": "2025-01-15T10:36:00Z"
    },
    "/home/user/project/docs/api.md": {
      "path": "/home/user/project/docs/api.md",
      "is_directory": false,
      "content_lines": [
        "# API Documentation\n",
        "\n",
        "## Overview\n",
        "\n",
        "This document describes the API endpoints available in this application.\n",
        "\n",
        "## Endpoints\n",
        "\n",
        "### GET /health\n",
        "\n",
        "Returns the health status of the application.\n",
        "\n",
        "**Response:**\n",
        "```json\n",
        "{\n",
        "  \"status\": \"healthy\",\n",
        "  \"timestamp\": \"2025-01-15T10:00:00Z\"\n",
        "}\n",
        "```\n"
      ],
      "size_bytes": 318,
      "last_modified": "2025-01-15T10:37:00Z"
    },
    "/home/user/project/tests": {
      "path": "/home/user/project/tests",
      "is_directory": true,
      "content_lines": [],
      "size_bytes": 0,
      "last_modified": "2025-01-15T10:34:00Z"
    },
    "/home/user/project/tests/test_main.py": {
      "path": "/home/user/project/tests/test_main.py",
      "is_directory": false,
      "content_lines": [
        "\"\"\"Tests for main module.\"\"\"\n",
        "\n",
        "import unittest\n",
        "from unittest.mock import patch\n",
        "import sys\n",
        "import os\n",
        "\n",
        "# Add src to path for imports\n",
        "sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))\n",
        "\n",
        "from main import main\n",
        "\n",
        "\n",
        "class TestMain(unittest.TestCase):\n",
        "    \"\"\"Test cases for main function.\"\"\"\n",
        "\n",
        "    @patch('builtins.print')\n",
        "    def test_main_prints_greeting(self, mock_print):\n",
        "        \"\"\"Test that main function prints expected output.\"\"\"\n",
        "        main()\n",
        "        mock_print.assert_called()\n",
        "        \n",
        "        # Check that at least one call contains our greeting\n",
        "        calls = [str(call) for call in mock_print.call_args_list]\n",
        "        greeting_found = any('Hello from Gemini simulation!' in call for call in calls)\n",
        "        self.assertTrue(greeting_found)\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    unittest.main()\n"
      ],
      "size_bytes": 893,
      "last_modified": "2025-01-15T10:39:00Z"
    }
  },
  "memory_storage": {},
  "shell_config": {},
  "last_edit_params": null,
  "background_processes": {},
  "tool_metrics": {},
  "gitignore_patterns": [
    "node_modules/",
    ".git/",
    "*.log",
    ".env",
    "dist/",
    "build/",
    "__pycache__/",
    "*.pyc",
    ".DS_Store",
    "*.tmp",
    "*.temp",
    "bower_components/",
    ".svn/",
    ".hg/"
  ],
  "_created": "2025-01-15T10:30:00Z"
}