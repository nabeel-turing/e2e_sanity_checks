# This file is automatically generated by the MutationBuilder

def fetch_entity_status(target_entity_identifier):
    """
    Retrieve the current state (on/off) of a specific Home Assistant entity, such as a light or sensor, by providing its entity ID for real-time monitoring and control.

    Args:
        target_entity_identifier (str): The device ID to get state for (e.g., "LIGHT_001").

    Returns:
        dict: A dictionary containing the entity ID and its state.

    Raises:
        ValueError: If 'target_entity_identifier' is missing or not found in the database.
    """
    from home_assistant.devices import get_state
    return get_state(entity_id=target_entity_identifier)


def set_or_cycle_device_state(device_to_control_id, optional_target_state=None):
    """
    Controls the state of a Home Assistant device.
    If 'state' is provided, sets the device to the state if it's valid for its type.
    If 'state' is not provided, cycles to the next allowed state for the device.
    Allowed states are 'On'/'Off' for electronic devices and
    'Open'/'Closed' or 'Locked/Unlocked' for openable items like doors and windows.

    Args:
        device_to_control_id (str): The entity ID to control (e.g., "LIGHT_001").
        optional_target_state (Optional[str]): The desired state to set.
            If None, the device will cycle to its next allowed state. Defaults to None.

    Returns:
        dict: {"status": "SUCCESS"} if updated successfully.

    Raises:
        ValueError: If device_to_control_id is missing, not found, its device type is not defined
                    in `allowed_states`, the provided optional_target_state is invalid for the device type,
                    or (when cycling) its current optional_target_state is not in the allowed list.
    """
    from home_assistant.devices import toggle_device
    return toggle_device(entity_id=device_to_control_id, state=optional_target_state)


def discover_entities_by_domain(entity_category_filter=None):
    """
    Retrieve all entities in Home Assistant, optionally filtered by domain, to monitor and manage devices, automations, and system components effectively.

    Args:
        entity_category_filter (Optional[str]): Optional domain filter (e.g., light, switch, automation).
            If not provided, returns all entities.

    Returns:
        dict: A dictionary with an "entities" key containing all matching entities.
    """
    from home_assistant.devices import list_devices
    return list_devices(domain=entity_category_filter)


def find_device_id_from_friendly_name(device_common_name):
    """
    Retrieve the device_id based on a device name.

    Args:
        device_common_name (str): The name of a device.

    Returns:
        str: The device ID associated to a device.

    Raises:
        ValueError: If 'device_common_name' is missing or not found.
    """
    from home_assistant.devices import get_id_by_name
    return get_id_by_name(name=device_common_name)


def retrieve_full_device_data(specific_device_identifier):
    """
    Retrieve all informations of a specific Home Assistant entity, such as a light or sensor, by providing its device ID for real-time monitoring and control.

    Args:
        specific_device_identifier (str): The device ID to get state for (e.g., "LIGHT_001").

    Returns:
        dict: A dictionary containing the device ID and its informations.

    Raises:
        ValueError: If 'specific_device_identifier' is missing or not found in the database.
    """
    from home_assistant.devices import get_device_info
    return get_device_info(device_id=specific_device_identifier)


def update_entity_attributes(entity_identifier_for_update, attribute_modifications_map):
    """
    Update a specific Home Assistant device properties based on a dictionary containing the new attributes values, enabling automated control of connected devices and routines.

    Args:
        entity_identifier_for_update (str): The entity ID to update
        attribute_modifications_map (dict): A dictionary containing key-value pairs representing the device's properties, which can be updated (e.g., {"state": "On", "brightness": 70})

    Returns:
        dict: {"status": "SUCCESS"} if updated.

    Raises:
        TypeError: If required parameter is not a dictionary.
        ValueError: If required parameters are missing or invalid.
    """
    from home_assistant.devices import set_device_property
    return set_device_property(
        entity_id=entity_identifier_for_update,
        new_attributes=attribute_modifications_map
    )
