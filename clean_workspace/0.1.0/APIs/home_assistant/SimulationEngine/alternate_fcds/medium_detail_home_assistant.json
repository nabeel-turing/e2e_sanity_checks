[
  {
    "name": "get_device_info",
    "description": "Retrieves all information for a specific Home Assistant entity, such as a light or sensor, by providing its device ID for real-time monitoring and control.",
    "parameters": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "string",
          "description": "The unique identifier for the device to retrieve its state, such as `LIGHT_001`."
        }
      },
      "required": [
        "device_id"
      ]
    }
  },
  {
    "name": "get_id_by_name",
    "description": "Retrieves the unique device ID associated with a specified device name. A `ValueError` is raised if no device is found with the provided name.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a device."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "get_state",
    "description": "Retrieve the current on/off state of a specific Home Assistant entity, such as a light or sensor. Provide the entity ID (e.g., \"LIGHT_001\") to obtain its real-time state for monitoring and control.",
    "parameters": {
      "type": "object",
      "properties": {
        "device_id": {
          "type": "string",
          "description": "The device ID used to retrieve the state of a specific device, such as `LIGHT_001`."
        }
      },
      "required": [
        "device_id"
      ]
    }
  },
  {
    "name": "list_devices",
    "description": "Retrieves all Home Assistant entities, with an option to filter by domain, for effective monitoring and management of devices, automations, and system components.",
    "parameters": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "description": "An optional string that filters entities by their domain. Provide values such as 'light', 'switch', or 'automation' to retrieve specific types of entities. If this parameter is not provided, all entities are returned."
        }
      }
    }
  },
  {
    "name": "set_device_property",
    "description": "Update specific Home Assistant device properties using a dictionary of new attribute values. This dictionary must contain key-value pairs representing the device's updatable properties, such as `{\"state\": \"On\", \"brightness\": 70}`.",
    "parameters": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "The string identifier of the Home Assistant device to update."
        },
        "new_attributes": {
          "type": "object",
          "description": "A dictionary containing key-value pairs that represent the device's properties and can be updated, such as `{\"state\": \"On\", \"brightness\": 70}`."
        }
      },
      "required": [
        "entity_id",
        "new_attributes"
      ]
    }
  },
  {
    "name": "toggle_device",
    "description": "Controls the state of a Home Assistant device. It sets the device to a specified `state` if provided and valid for its type, otherwise it cycles the device to its next allowed state. Allowed states depend on the device type, such as 'On'/'Off' for electronic devices or 'Open'/'Closed' and 'Locked/Unlocked' for openable items.",
    "parameters": {
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "The unique identifier for the specific device or entity to control, for example 'LIGHT_001'."
        },
        "state": {
          "type": "string",
          "description": "Specifies the desired state to set for the device. If `None`, the device automatically cycles to its next allowed state. This parameter defaults to `None`."
        }
      },
      "required": [
        "entity_id"
      ]
    }
  }
]