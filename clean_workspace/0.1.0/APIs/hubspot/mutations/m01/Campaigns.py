# This file is automatically generated by the MutationBuilder

def search_for_marketing_campaigns(
    query_result_limit=None,
    query_result_offset=None,
    filter_by_creation_timestamp=None,
    filter_created_after_timestamp=None,
    filter_created_from_timestamp=None,
    filter_created_before_timestamp=None,
    filter_created_until_timestamp=None,
    filter_by_update_timestamp=None,
    filter_updated_after_timestamp=None,
    filter_updated_from_timestamp=None,
    filter_updated_before_timestamp=None,
    filter_updated_until_timestamp=None,
    filter_by_campaign_title=None,
    filter_name_with_substring=None,
    filter_name_with_case_insensitive_substring=None,
    filter_name_not_matching=None,
    filter_by_campaign_identifier=None,
    filter_id_not_matching=None,
    filter_by_campaign_category=None,
    filter_type_not_matching=None
):
    """
    Returns a list of marketing campaigns (Basic implementation).

    Args:
        query_result_limit(Optional[int]): The maximum number of campaigns to return.
        query_result_offset(Optional[int]): The number of campaigns to skip.
        filter_by_creation_timestamp(Optional[str]): Filter campaigns by creation date.
        filter_created_after_timestamp(Optional[str]): Filter campaigns by creation date greater than a specific date.
        filter_created_from_timestamp(Optional[str]): Filter campaigns by creation date greater than or equal to a specific date.
        filter_created_before_timestamp(Optional[str]): Filter campaigns by creation date less than a specific date.
        filter_created_until_timestamp(Optional[str]): Filter campaigns by creation date less than or equal to a specific date.
        filter_by_update_timestamp(Optional[str]): Filter campaigns by update date.
        filter_updated_after_timestamp(Optional[str]): Filter campaigns by update date greater than a specific date.
        filter_updated_from_timestamp(Optional[str]): Filter campaigns by update date greater than or equal to a specific date.
        filter_updated_before_timestamp(Optional[str]): Filter campaigns by update date less than a specific date.
        filter_updated_until_timestamp(Optional[str]): Filter campaigns by update date less than or equal to a specific date.
        filter_by_campaign_title(Optional[str]): Filter campaigns by name.
        filter_name_with_substring(Optional[str]): Filter campaigns by name containing a specific string.
        filter_name_with_case_insensitive_substring(Optional[str]): Filter campaigns by name containing a specific string (case insensitive).
        filter_name_not_matching(Optional[str]): Filter campaigns by name not equal to a specific string.
        filter_by_campaign_identifier(Optional[str]): Filter campaigns by id.
        filter_id_not_matching(Optional[str]): Filter campaigns by id not equal to a specific string.
        filter_by_campaign_category(Optional[str]): Filter campaigns by type.
        filter_type_not_matching(Optional[str]): Filter campaigns by type not equal to a specific string.

    Returns:
        Dict[str, Any]: A dictionary containing the following keys:
        - results(List[Dict[str, Any]]): A list of campaigns matching the filter criteria.
            - id(str): The id of the campaign.
            - name(str): The name of the campaign.
            - type(str): The type of the campaign.
            - start_date(str): The start date of the campaign.
            - end_date(str): The end date of the campaign.
            - status(str): The status of the campaign.
            - budget(float): The budget of the campaign.
            - target_audience(str): The target audience of the campaign.
            - utm_campaign(str): The utm campaign of the campaign.
            - slug(str): The slug of the campaign.
            - description(str): The description of the campaign.
            - start_year(int): The start year of the campaign.
            - start_month(int): The start month of the campaign.
            - start_day(int): The start day of the campaign.
            - end_year(int): The end year of the campaign.
            - end_month(int): The end month of the campaign.
            - end_day(int): The end day of the campaign.
            - theme(str): The theme of the campaign.
            - resource(str): The resource of the campaign.
            - color_label(str): The color label of the campaign.
            - total(int): The total number of campaigns matching the filter criteria.
            - limit(int): The maximum number of campaigns to return.
            - offset(int): The number of campaigns to skip.
    """
    from hubspot.Campaigns import get_campaigns
    return get_campaigns(
        limit=query_result_limit,
        offset=query_result_offset,
        created_at=filter_by_creation_timestamp,
        created_at__gt=filter_created_after_timestamp,
        created_at__gte=filter_created_from_timestamp,
        created_at__lt=filter_created_before_timestamp,
        created_at__lte=filter_created_until_timestamp,
        updated_at=filter_by_update_timestamp,
        updated_at__gt=filter_updated_after_timestamp,
        updated_at__gte=filter_updated_from_timestamp,
        updated_at__lt=filter_updated_before_timestamp,
        updated_at__lte=filter_updated_until_timestamp,
        name=filter_by_campaign_title,
        name__contains=filter_name_with_substring,
        name__icontains=filter_name_with_case_insensitive_substring,
        name__ne=filter_name_not_matching,
        id=filter_by_campaign_identifier,
        id__ne=filter_id_not_matching,
        type=filter_by_campaign_category,
        type__ne=filter_type_not_matching
    )


def launch_new_marketing_initiative(
    new_campaign_title,
    campaign_web_slug=None,
    initiative_summary=None,
    initiative_start_year=None,
    initiative_start_month=None,
    initiative_start_day=None,
    initiative_end_year=None,
    initiative_end_month=None,
    initiative_end_day=None,
    campaign_design_theme=None,
    associated_campaign_resource=None,
    campaign_organisational_color_tag=None
):
    """
    Creates a new campaign.

    Args:
        new_campaign_title(str): The name of the campaign.
        campaign_web_slug(Optional[str]): The slug of the campaign.
        initiative_summary(Optional[str]): The description of the campaign.
        initiative_start_year(Optional[int]): The start year of the campaign.
        initiative_start_month(Optional[int]): The start month of the campaign.
        initiative_start_day(Optional[int]): The start day of the campaign.
        initiative_end_year(Optional[int]): The end year of the campaign.
        initiative_end_month(Optional[int]): The end month of the campaign.
        initiative_end_day(Optional[int]): The end day of the campaign.
        campaign_design_theme(Optional[str]): The theme of the campaign.
        associated_campaign_resource(Optional[str]): The resource of the campaign.
        campaign_organisational_color_tag(Optional[str]): The color label of the campaign.

    Returns:
        Dict[str, Any]: A dictionary containing the following keys:
        - id(str): The id of the campaign.
        - name(str): The name of the campaign.
        - type(str): The type of the campaign.
        - slug(str): The slug of the campaign.
        - description(str): The description of the campaign.
        - start_year(int): The start year of the campaign.
        - start_month(int): The start month of the campaign.
        - start_day(int): The start day of the campaign.
        - end_year(int): The end year of the campaign.
        - end_month(int): The end month of the campaign.
        - end_day(int): The end day of the campaign.
        - theme(str): The theme of the campaign.
        - resource(str): The resource of the campaign.
        - color_label(str): The color label of the campaign.
    """
    from hubspot.Campaigns import create_campaign
    return create_campaign(
        name=new_campaign_title,
        slug=campaign_web_slug,
        description=initiative_summary,
        start_year=initiative_start_year,
        start_month=initiative_start_month,
        start_day=initiative_start_day,
        end_year=initiative_end_year,
        end_month=initiative_end_month,
        end_day=initiative_end_day,
        theme=campaign_design_theme,
        resource=associated_campaign_resource,
        color_label=campaign_organisational_color_tag
    )


def fetch_campaign_details_by_id(marketing_campaign_id):
    """
    Gets a single campaign by its ID.

    Args:
        marketing_campaign_id(int): The id of the campaign.

    Returns:
        Optional[Dict[str, Any]]: A dictionary containing the following keys if the campaign exists:
        - id(str): The id of the campaign.
        - name(str): The name of the campaign.
        - type(str): The type of the campaign.
        - start_date(str): The start date of the campaign.
        - end_date(str): The end date of the campaign.
        - status(str): The status of the campaign.
        - budget(float): The budget of the campaign.
        - target_audience(str): The target audience of the campaign.
        - utm_campaign(str): The utm campaign of the campaign.
        - slug(str): The slug of the campaign.
        - description(str): The description of the campaign.
        - start_year(int): The start year of the campaign.
        - start_month(int): The start month of the campaign.
        - start_day(int): The start day of the campaign.
        - end_year(int): The end year of the campaign.
        - end_month(int): The end month of the campaign.
        - end_day(int): The end day of the campaign.
        - theme(str): The theme of the campaign.
        - resource(str): The resource of the campaign.
        - color_label(str): The color label of the campaign.
    """
    from hubspot.Campaigns import get_campaign
    return get_campaign(campaign_id=marketing_campaign_id)


def revise_marketing_initiative(
    campaign_identifier_to_update,
    updated_campaign_title=None,
    new_campaign_web_slug=None,
    revised_initiative_description=None,
    new_initiative_start_year=None,
    new_initiative_start_month=None,
    new_initiative_start_day=None,
    new_initiative_end_year=None,
    new_initiative_end_month=None,
    new_initiative_end_day=None,
    updated_campaign_theme=None,
    new_associated_campaign_resource=None,
    new_campaign_color_tag=None
):
    """
    Updates a campaign.

    Args:
        campaign_identifier_to_update(int): The id of the campaign.
        updated_campaign_title(Optional[str]): The name of the campaign.
        new_campaign_web_slug(Optional[str]): The slug of the campaign.
        revised_initiative_description(Optional[str]): The description of the campaign.
        new_initiative_start_year(Optional[int]): The start year of the campaign.
        new_initiative_start_month(Optional[int]): The start month of the campaign.
        new_initiative_start_day(Optional[int]): The start day of the campaign.
        new_initiative_end_year(Optional[int]): The end year of the campaign.
        new_initiative_end_month(Optional[int]): The end month of the campaign.
        new_initiative_end_day(Optional[int]): The end day of the campaign.
        updated_campaign_theme(Optional[str]): The theme of the campaign.
        new_associated_campaign_resource(Optional[str]): The resource of the campaign.
        new_campaign_color_tag(Optional[str]): The color label of the campaign.

    Returns:
        Optional[Dict[str, Any]]: A dictionary containing the following keys if the campaign exists:
        - id(str): The id of the campaign.
        - name(str): The name of the campaign.
        - type(str): The type of the campaign.
        - slug(str): The slug of the campaign.
        - description(str): The description of the campaign.
        - start_year(int): The start year of the campaign.
        - start_month(int): The start month of the campaign.
        - start_day(int): The start day of the campaign.
        - end_year(int): The end year of the campaign.
        - end_month(int): The end month of the campaign.
        - end_day(int): The end day of the campaign.
        - theme(str): The theme of the campaign.
        - resource(str): The resource of the campaign.
        - color_label(str): The color label of the campaign.
    """
    from hubspot.Campaigns import update_campaign
    return update_campaign(
        campaign_id=campaign_identifier_to_update,
        name=updated_campaign_title,
        slug=new_campaign_web_slug,
        description=revised_initiative_description,
        start_year=new_initiative_start_year,
        start_month=new_initiative_start_month,
        start_day=new_initiative_start_day,
        end_year=new_initiative_end_year,
        end_month=new_initiative_end_month,
        end_day=new_initiative_end_day,
        theme=updated_campaign_theme,
        resource=new_associated_campaign_resource,
        color_label=new_campaign_color_tag
    )


def shelve_marketing_initiative(campaign_id_to_be_archived):
    """
    Archives a campaign. Archived campaigns aren't included in the results when listing campaigns.

    Args:
        campaign_id_to_be_archived(int): The id of the campaign.

    Returns:
        bool: True if the campaign was archived, False otherwise.
    """
    from hubspot.Campaigns import archive_campaign
    return archive_campaign(campaign_id=campaign_id_to_be_archived)
