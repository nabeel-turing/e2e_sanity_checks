# This file is automatically generated by the MutationBuilder

def plan_journey(
    end_location,
    start_location=None,
    transportation_method=None,
    intermediate_stops=None,
    route_restrictions=None,
    start_point_hint=None,
    end_point_hint=None,
    search_on_the_way=None,
    leave_at_timestamp=None,
    arrive_by_timestamp=None
):
    """
    Find directions between two places.

    This function generates intelligent route analysis and returns structured direction data.
    All inputs are validated using Pydantic models.

    Args:
        end_location (str): The destination place (required).
        start_location (Optional[str]): The origin place. If not provided, will use "current location" 
                                Can be empty if origin is not found in user query.
        transportation_method (Optional[str]): The travel mode to use. Supported values: driving, walking, 
                                   bicycling, transit, bus, rail, subway, train, tram. 
                                   Defaults to "driving" if not specified.
        intermediate_stops (Optional[List[str]]): A list of locations to pass through or stop over at, 
                                       e.g. ["Googleplex, Mountain View, CA", "Computer History Museum, Mountain View, CA"]
        route_restrictions (Optional[List[str]]): A list of features to avoid for the routes. Supports: tolls, 
                                   highways, ferries, indoor. e.g. ["tolls", "highways", "ferries"]
        start_point_hint (Optional[Union[str, Dict[str, Any]]]): Location bias for origin. 
                                                                     Can be a place name string, coordinate dict 
                                                                     {"latitude": float, "longitude": float}, or string names of environment variables:
                                                                     - "MY_HOME": User's home location from environment
                                                                     - "MY_LOCATION": User's current location from environment  
                                                                     - "MY_WORK": User's work location from environment
        end_point_hint (Optional[Union[str, Dict[str, Any]]]): Location bias for destination. 
                                                                         Can be a place name string, coordinate dict 
                                                                         {"latitude": float, "longitude": float}, or string names of environment variables:
                                                                         - "MY_HOME": User's home location from environment
                                                                         - "MY_LOCATION": User's current location from environment
                                                                         - "MY_WORK": User's work location from environment
        search_on_the_way (Optional[bool]): Whether to search along the route (currently unsupported).
        leave_at_timestamp (Optional[int]): Desired time of departure in seconds since Unix epoch. 
                                       Cannot be used with arrival_time.
        arrive_by_timestamp (Optional[int]): Desired time of arrival in seconds since Unix epoch. 
                                     Cannot be used with departure_time.

    Returns:
        Dict[str, Any]: Direction summary containing:
            - map_url (str): URL to view the route on Google Maps
            - travel_mode (str): The travel mode used for the route
            - routes (List[Dict]): List of route options with details including:
                - distance (str): Route distance (e.g., "37.8 miles")
                - duration (str): Estimated travel time (e.g., "45m")
                - start_address (str): Starting address
                - end_address (str): Destination address
                - mode (str): Travel mode for this route
                - route_id (str): Unique route identifier
                - steps (List[str]): Turn-by-turn directions
                - summary (str): Route summary
                - url (str): Direct link to this route

    Raises:
        ValueError: If both leave_at_timestamp and arrive_by_timestamp are specified
        ValueError: If invalid transportation_method is provided
        ValueError: If invalid route_restrictions features are provided
        ValueError: If input validation fails (empty intermediate_stops, invalid times, etc.)
        ParseError: If JSON parsing from API response fails
        NotImplementedError: If API response cannot be parsed as valid JSON
        ValidationError: If response data doesn't match expected schema
        UndefinedLocationError: If UserLocation environment variable is not set
    """
    from google_maps_live.directions import find_directions
    return find_directions(
        destination=end_location,
        origin=start_location,
        travel_mode=transportation_method,
        waypoints=intermediate_stops,
        avoid=route_restrictions,
        origin_location_bias=start_point_hint,
        destination_location_bias=end_point_hint,
        search_along_route=search_on_the_way,
        departure_time=leave_at_timestamp,
        arrival_time=arrive_by_timestamp
    )


def get_route_from_here(
    target_destination,
    mode_of_travel=None,
    stops_en_route=None,
    exclusions_for_route=None,
    current_location_hint=None,
    target_location_hint=None
):
    """
    Navigate from current location to a destination.

    This function is similar to find_directions but specifically designed for navigation
    from the user's current location. It generates intelligent route analysis
    and returns structured direction data. All inputs are validated using Pydantic models.

    Note: This function assumes "current location" as the starting point.
    For real-world applications, you would need to provide actual GPS coordinates.

    Args:
        target_destination (str): The destination place (required).
        mode_of_travel (Optional[str]): The travel mode to use. Supported values: driving, walking, 
                                   bicycling, transit, bus, rail, subway, train, tram. 
                                   Defaults to "driving" if not specified.
        stops_en_route (Optional[List[str]]): A list of locations to pass through or stop over at, 
                                       e.g. ["Googleplex, Mountain View, CA", "Computer History Museum, Mountain View, CA"]
        exclusions_for_route (Optional[List[str]]): A list of features to avoid for the routes. Supports: tolls, 
                                   highways, ferries, indoor. e.g. ["tolls", "highways", "ferries"]
        current_location_hint (Optional[Union[str, Dict[str, Any]]]): Location bias for origin. 
                                                                     Can be a place name string, coordinate dict 
                                                                     {"latitude": float, "longitude": float}, or string names of environment variables:
                                                                     - "MY_HOME": User's home location from environment
                                                                     - "MY_LOCATION": User's current location from environment  
                                                                     - "MY_WORK": User's work location from environment
        target_location_hint (Optional[Union[str, Dict[str, Any]]]): Location bias for destination. 
                                                                         Can be a place name string, coordinate dict 
                                                                         {"latitude": float, "longitude": float}, or string names of environment variables:
                                                                         - "MY_HOME": User's home location from environment
                                                                         - "MY_LOCATION": User's current location from environment
                                                                         - "MY_WORK": User's work location from environment

    Returns:
        Dict[str, Any]: Direction summary containing:
            - map_url (str): URL to view the route on Google Maps
            - travel_mode (str): The travel mode used for the route
            - routes (List[Dict]): List of route options with details including:
                - distance (str): Route distance (e.g., "37.8 miles")
                - duration (str): Estimated travel time (e.g., "45m")
                - start_address (str): Starting address (current location)
                - end_address (str): Destination address
                - mode (str): Travel mode for this route
                - route_id (str): Unique route identifier
                - steps (List[str]): Turn-by-turn directions
                - summary (str): Route summary
                - url (str): Direct link to this route

    Raises:
        ValueError: If invalid mode_of_travel is provided
        ValueError: If invalid exclusions_for_route features are provided
        ValueError: If input validation fails (empty stops_en_route, etc.)
        ParseError: If JSON parsing from API response fails
        NotImplementedError: If API response cannot be parsed as valid JSON
        ValidationError: If response data doesn't match expected schema
        UndefinedLocationError: If UserLocation environment variable is not set
    """
    from google_maps_live.directions import navigate
    return navigate(
        destination=target_destination,
        travel_mode=mode_of_travel,
        waypoints=stops_en_route,
        avoid=exclusions_for_route,
        origin_location_bias=current_location_hint,
        destination_location_bias=target_location_hint
    )
