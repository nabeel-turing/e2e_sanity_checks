# This file is automatically generated by the MutationBuilder

def execute_shell_command(command_string_to_run, run_as_background_process=False):
    """
    Executes the provided terminal command in the current workspace context.

    Use this function to run shell commands. You need to provide the exact
    command string to be executed. Note that commands like 'cd', 'pwd', and
    environment commands ('export', 'unset', 'env') are handled internally;
    other commands are executed externally and may modify the workspace files.

    IMPORTANT: For any command that expects user interaction or uses a pager
    (like git diff, git log, less, more, etc.), you MUST append
    ' | cat' to the command string yourself before passing it to this function.
    Failure to do so will cause the command to hang or fail.

    For commands that are intended to run for a long time or indefinitely
    (e.g., starting a server, running a watch process), set the
    `is_background` parameter to True.

    Args:
        command_string_to_run (str): The exact terminal command string to execute. Remember
                       to append ' | cat' for interactive/pager commands.
        run_as_background_process (bool, optional): Set to True to run the command as a
            background process (e.g., for servers or watchers). Defaults to False,
            running the command in the foreground and waiting for completion.

    Returns:
        Dict[str, Any]: A dictionary describing the outcome:
            - 'message' (str): A status message about the execution.
            - 'stdout' (str): Captured standard output (foreground only).
            - 'stderr' (str): Captured standard error (foreground only).
            - 'returncode' (Optional[int]): The command's exit code
                                           (foreground only).
            - 'pid' (Optional[int]): The process ID if run in the background.

    Raises:
        ValueError: If workspace_root is not configured or the command_string_to_run string is empty/invalid.
        CommandExecutionError: If a command_string_to_run fails to launch, `cd` fails, or a foreground command_string_to_run returns a non-zero exit code.
    """
    from terminal.terminalAPI import run_command
    return run_command(command=command_string_to_run, is_background=run_as_background_process)
