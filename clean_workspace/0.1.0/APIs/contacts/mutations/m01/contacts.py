# This file is automatically generated by the MutationBuilder

def fetch_contact_list(contact_name_filter=None, result_limit=100):
    """
    List all contacts or filter by name.

    Lists all your Google contacts or filters them by name.

    Args:
        contact_name_filter (Optional[str]): String to filter contacts by name. If None, all contacts are returned.
        result_limit (Optional[int]): Maximum number of contacts to return (default: 100).

    Returns:
        Dict[str, Any]: A dictionary containing the list of contacts.
            - contacts (List[Dict[str, Any]]): A list of contact objects matching
              the query. Each contact object can contain the following keys:
                - resourceName (str): The unique identifier for the contact.
                - etag (str): An entity tag for the resource, used for caching.
                - names (List[Dict[str, str]]): A list of name objects, where
                  each object may contain 'givenName' and 'familyName'.
                - emailAddresses (List[Dict[str, Any]]): A list of email objects,
                  where each object may contain the email 'value', 'type' (e.g.,
                  'home', 'work'), and a boolean 'primary' flag.
                - phoneNumbers (List[Dict[str, Any]]): A list of phone number
                  objects, where each object may contain the phone 'value', 'type',
                  and a boolean 'primary' flag.
                - organizations (List[Dict[str, str]]): A list of organization
                  objects, where each object may contain the company 'name' and
                  job 'title'.

    Raises:
        ValidationError: If input arguments fail validation.
        ContactsCollectionNotFoundError: If the contacts collection doesn't exist in the database.
    """
    from contacts.contacts import list_contacts
    return list_contacts(name_filter=contact_name_filter, max_results=result_limit)


def add_new_person(first_name, last_name=None, email_address=None, phone_number=None):
    """
    Creates a new contact in your Google Contacts.

    This function creates a new contact entry in Google Contacts using the provided personal details.

    Args:
        first_name (str): First name of the contact.
        last_name (Optional[str]): Last name of the contact.
        email_address (Optional[str]): Email address of the contact.
        phone_number (Optional[str]): Phone number of the contact.

    Returns:
        Dict[str, Any]: A dictionary detailing the outcome of the creation operation.
            - "status" (str): Indicates the result of the operation, typically "success".
            - "message" (str): A human-readable summary of the action taken.
            - "contact" (Dict[str, Any]): The complete dictionary object for the newly
              created contact, including its server-assigned `resourceName` and `etag`. Contains the following fields:
                - "resourceName" (str): The unique identifier for the contact.
                - "etag" (str): An identifier for the current state of the contact.
                - "names" (List[Dict[str, str]]): A list of name objects, each containing:
                    - "givenName" (str): The contact's first name.
                    - "familyName" (str): The contact's last name.
                - "emailAddresses" (List[Dict[str, Any]]): A list of email objects, each containing:
                    - "value" (str): The email address.
                    - "type" (str): The type of email (e.g., 'home', 'work').
                    - "primary" (bool): True if this is the primary email.
                - "organizations" (List[Dict[str, str]]): A list of organization objects, each containing:
                    - "name" (str): The name of the organization.
                    - "title" (str): The job title.
                    - "department" (str, optional): The department name.
                - "phoneNumbers" (List[Dict[str, Any]]): A list of phone number objects, each containing:
                    - "value" (str): The phone number.
                    - "type" (str): The type of phone number (e.g., 'mobile', 'work').
                    - "primary" (bool): True if this is the primary number.
                - "whatsapp" (Dict[str, Any]): A dictionary containing WhatsApp-specific information:
                    - "jid" (str): The WhatsApp ID for the contact.
                    - "name_in_address_book" (str): The name of the contact in the address book.
                    - "profile_name" (str): The profile name of the contact.
                    - "phone_number" (str): The phone number of the contact.
                    - "is_whatsapp_user" (bool): A flag indicating if the contact is a WhatsApp user.
                - "phone" (Dict[str, Any]): A dictionary containing phone-specific information:
                    - "contact_id" (str): The ID of the contact.
                    - "contact_name" (str): The name of the contact.
                    - "recipient_type" (str): The type of recipient (always "CONTACT").
                    - "contact_endpoints" (List[Dict[str, Any]]): A list of contact endpoints.
                        - "endpoint_type" (str): The type of endpoint (always "PHONE_NUMBER").
                        - "endpoint_value" (str): The value of the endpoint (the phone number).
                        - "endpoint_label" (str): The label of the endpoint (always "mobile").

    Raises:
        ValidationError: If input arguments fail validation (e.g., empty first_name, invalid email_address, or duplicate email_address).
    """
    from contacts.contacts import create_contact
    return create_contact(
        given_name=first_name,
        family_name=last_name,
        email=email_address,
        phone=phone_number
    )


def lookup_person_details(contact_lookup_key):
    """
    Retrieves detailed information about a specific contact.

    This function gets a contact by their resource name or email address, retrieving detailed information for that specific contact.

    Args:
        contact_lookup_key (str): Resource name (`people/*`) or email address of the contact.

    Returns:
        Dict[str, Any]: A dictionary containing the contact's information with the
            following structure:
            - `resourceName` (str): The unique identifier for the contact.
            - `etag` (str): An identifier for the current state of the contact.
            - `names` (List[Dict]): A list of name objects, each containing:
                - `givenName` (str): The contact's first name.
                - `familyName` (str): The contact's last name.
            - `emailAddresses` (List[Dict]): A list of email objects, each containing:
                - `value` (str): The email address.
                - `type` (str): The type of email (e.g., 'home', 'work').
                - `primary` (bool): True if this is the primary email.
            - `phoneNumbers` (List[Dict], optional): A list of phone number objects, each containing:
                - `value` (str): The phone number.
                - `type` (str): The type of phone number (e.g., 'mobile', 'work').
                - `primary` (bool): True if this is the primary number.
            - `organizations` (List[Dict], optional): A list of organization objects, each containing:
                - `name` (str): The name of the organization.
                - `title` (str): The job title.
                - `department` (str, optional): The department name.
            - `isWorkspaceUser` (bool, optional): True if the contact is a workspace user
              (typically for directory contacts).

    Raises:
        ValidationError: If the input contact_lookup_key is invalid.
        ContactNotFoundError: If no contact is found for the given contact_lookup_key.
        PydanticValidationError: If the fetched contact data fails structure validation.
    """
    from contacts.contacts import get_contact
    return get_contact(identifier=contact_lookup_key)


def modify_contact_info(
    contact_resource_id,
    new_given_name=None,
    new_family_name=None,
    updated_email=None,
    updated_phone_number=None
):
    """
    Updates an existing contact with new information.

    This function updates an existing contact by applying the provided new details. At least one optional parameter must be provided to perform an update.

    Args:
        contact_resource_id (str): Contact resource name (`people/*`).
        new_given_name (Optional[str]): Updated first name.
        new_family_name (Optional[str]): Updated last name.
        updated_email (Optional[str]): Updated email address.
        updated_phone_number (Optional[str]): Updated phone number.

    Returns:
        Dict[str, Any]: A dictionary representing the fully updated contact object. The structure includes:
            - 'resourceName' (str): The unique identifier for the contact (e.g., "people/c123...").
            - 'etag' (str): A unique string identifying the current state of the contact. This changes after every update.
            - 'names' (List[Dict[str, str]]): A list of name objects. Each object contains:
                - 'givenName' (str): The contact's first name.
                - 'familyName' (str): The contact's last name.
            - 'emailAddresses' (List[Dict[str, Any]]): A list of email objects. Each object can contain:
                - 'value' (str): The email address.
                - 'type' (str): The category of the email (e.g., 'home', 'work').
                - 'primary' (bool): A flag indicating if it's the primary email.
            - 'phoneNumbers' (List[Dict[str, Any]]): A list of phone number objects. Each object can contain:
                - 'value' (str): The phone number string.
                - 'type' (str): The category of the phone number (e.g., 'mobile', 'work').
                - 'primary' (bool): A flag indicating if it's the primary phone number.
            - Other fields like 'organizations' may be present depending on the contact's original data.

    Raises:
        custom_errors.ValidationError: If input arguments fail validation.
        custom_errors.ContactNotFoundError: If the contact does not exist.
        PydanticValidationError: If the structure of the returned contact is invalid.
    """
    from contacts.contacts import update_contact
    return update_contact(
        resource_name=contact_resource_id,
        given_name=new_given_name,
        family_name=new_family_name,
        email=updated_email,
        phone=updated_phone_number
    )


def remove_contact_entry(contact_id_to_delete):
    """
    Deletes a contact by resource name from your Google Contacts.

    This function deletes a contact from Google Contacts using its specified resource name. Directory contacts or 'otherContacts' cannot be deleted via this method.

    Args:
        contact_id_to_delete (str): Contact resource name (`people/*`) to delete.

    Returns:
        Dict[str, Any]: A dictionary containing the function's results. The structure includes:
            - "status" (str): Indicates the result of the operation, typically "success".
            - "message" (str): A human-readable summary of the action taken.

    Raises:
        ValidationError: If input arguments fail validation.
        ContactNotFoundError: If the contact is not found in the database.
    """
    from contacts.contacts import delete_contact
    return delete_contact(resource_name=contact_id_to_delete)


def find_contacts_by_keyword(search_term, max_search_results=10):
    """
    Search contacts by name, email, or phone number.

    This function searches for contacts using a provided search term. The number of results returned can be limited.

    Args:
        search_term (str): Search term to find in contacts; matches against names, emails, and phone numbers.
        max_search_results (Optional[int]): Maximum number of results to return (default: 10). Must be a positive integer.

    Returns:
        Dict[str, List[Dict[str, Any]]]: A dictionary containing the search results.
            The dictionary has the following key:
            - "results" (List[Dict[str, Any]]): A list of contact objects matching the query.
              Each object is a dictionary with a structure like the following:
              - `resourceName` (str): The unique server-assigned identifier for the contact.
              - `etag` (str): An opaque identifier for a specific version of the contact.
              - `names` (List[Dict[str, str]]): A list of name objects, each with
                keys like `givenName` and `familyName`.
              - `emailAddresses` (List[Dict[str, Any]]): A list of email objects, each with
                a `value` (the email address), a `type` (e.g., 'home', 'work'), and an
                optional `primary` boolean flag.
              - `phoneNumbers` (List[Dict[str, Any]]): A list of phone number objects,
                each with a `value` (the number), a `type` (e.g., 'mobile'), and an
                optional `primary` boolean flag.
              - `organizations` (List[Dict[str, str]]): A list of organization objects,
                each with keys like `name` and `title`.
              Note: Not all fields are guaranteed to be present in every contact object.

    Raises:
        ValidationError: If input arguments fail validation.
        DataIntegrityError: If the fetched contact data has an invalid structure.
    """
    from contacts.contacts import search_contacts
    return search_contacts(query=search_term, max_results=max_search_results)


def fetch_organization_members(user_filter_query=None, directory_page_size=50):
    """
    Lists Google Workspace users in your organization's directory.

    This function lists users from the Google Workspace directory. It allows for
    filtering the results based on a search term and controlling the number of
    users returned in a single request.

    Args:
        user_filter_query (Optional[str]): Search term to find specific users. The search
            looks through names, email addresses, and phone numbers.
        directory_page_size (Optional[int]): Maximum number of results to return.
            Must be a positive integer. Defaults to 50.

    Returns:
        Dict[str, List[Dict[str, Any]]]: A dictionary where the key 'users'
            contains a list of user profile dictionaries. Each dictionary
            represents a Google Workspace user and has the following structure:
            - 'resourceName' (str): The unique identifier for the user.
            - 'etag' (str): An ETag for the resource, used for optimistic
              concurrency.
            - 'isWorkspaceUser' (bool): Flag indicating if this is a
              Workspace user. Always true in this function's results.
            - 'names' (List[Dict[str, str]]): A list of name objects,
              typically containing one object with 'givenName' and 'familyName'.
            - 'emailAddresses' (List[Dict[str, Any]]): A list of email objects,
              each containing the 'value' (the email address) and a 'primary'
              boolean flag.
            - 'organizations' (List[Dict[str, Any]]): A list of organization
              objects, detailing the user's role, with keys like 'name',
              'title', 'department', and a 'primary' boolean flag.

    Raises:
        ValidationError: If input arguments fail validation.
        DataIntegrityError: If the fetched workspace user data has an invalid structure.
    """
    from contacts.contacts import list_workspace_users
    return list_workspace_users(query=user_filter_query, max_results=directory_page_size)


def query_corporate_directory(employee_search_term, max_directory_results=20):
    """
    Performs a targeted search of your organization's Google Workspace directory.

    Searches for people in the Google Workspace directory.

    Args:
        employee_search_term (str): Search term to find directory members by name, email, or phone number.
        max_directory_results (Optional[int]): Maximum number of results to return.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary represents a
        person found in the directory. Each dictionary has the following structure:
            - `resourceName` (str): The unique, server-assigned resource name for the person.
            - `etag` (str): An opaque identifier for the resource's current state, used for caching.
            - `names` (List[Dict]): A list of name objects. Typically contains one primary entry with:
                - `givenName` (str): The person's first name.
                - `familyName` (str): The person's last name.
            - `emailAddresses` (List[Dict]): A list of email address objects, each with:
                - `value` (str): The email address.
                - `primary` (bool): A flag indicating if this is the primary email.
            - `organizations` (List[Dict]): A list of organization objects, each with:
                - `name` (str): The name of the organization (e.g., "YourCompany").
                - `title` (str): The person's job title.
                - `department` (str): The department the person belongs to.
                - `primary` (bool): A flag indicating if this is the primary organization.
            - `isWorkspaceUser` (bool): A boolean flag that is true if the contact is a Google Workspace user.

    Raises:
        ValidationError: If input arguments fail validation.
        DataIntegrityError: If the data retrieved from the directory fails structure validation.
    """
    from contacts.contacts import search_directory
    return search_directory(query=employee_search_term, max_results=max_directory_results)


def retrieve_interaction_contacts(suggested_contacts_limit=50):
    """
    Retrieves contacts from the 'Other contacts' section.

    Retrieves contacts from the 'Other contacts' section, which contains people you have interacted with but not explicitly added to your contacts.

    Args:
        suggested_contacts_limit (Optional[int]): Maximum number of results to return. Must be a positive integer. Defaults to 50.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary represents an 'other' contact. The dictionary has the following structure:
            - `resourceName` (str): The unique identifier for the contact, e.g., "otherContacts/c098...".
            - `etag` (str): An identifier for the current state of the contact.
            - `names` (List[Dict[str, str]]): A list of dictionaries containing name details.
                - `givenName` (str): The contact's first name.
                - `familyName` (str): The contact's last name.
            - `emailAddresses` (List[Dict[str, Any]]): A list of dictionaries for email addresses.
                - `value` (str): The email address string.
                - `type` (str): The type of email (e.g., 'work', 'home').
                - `primary` (bool): True if this is the primary email.
            - `phoneNumbers` (List[Dict[str, Any]]): A list of phone numbers, if available.
                - `value` (str): The phone number string.
                - `type` (str): The type of phone number (e.g., 'mobile', 'work').
                - `primary` (bool): True if this is the primary number.

    Raises:
        ValidationError: If input arguments fail validation.
        ContactsCollectionNotFoundError: If the 'otherContacts' collection doesn't exist in the database.
        DataIntegrityError: If the fetched contact data has an invalid structure.
    """
    from contacts.contacts import get_other_contacts
    return get_other_contacts(max_results=suggested_contacts_limit)
