# This file is automatically generated by the MutationBuilder

def register_new_profile(new_profile_id, personal_name, account_handle):
    """
    Creates a new user with a given ID, name, and username.

    Args:
        new_profile_id (str): The unique identifier for the user.
        personal_name (str): The name of the user.
        account_handle (str): The username of the user.

    Returns:
        Dict[str, Any]: On successful creation, a dictionary containing the user's details:
            - "id" (str): The user's unique identifier.
            - "name" (str): The user's name.
            - "username" (str): The user's username.

    Raises:
        TypeError: If `new_profile_id`, `personal_name`, or `account_handle` is not a string.
        ValueError: If `new_profile_id`, `personal_name`, or `account_handle` is an empty string.
        UserAlreadyExistsError: If a user with the given `new_profile_id` already exists.
    """
    from instagram.User import create_user
    return create_user(user_id=new_profile_id, name=personal_name, username=account_handle)


def fetch_account_information(target_profile_id):
    """
    Retrieves information about a specific user.

    Args:
        target_profile_id (str): The unique identifier of the user to retrieve. Cannot be empty.

    Returns:
        Dict[str, Any]:
        - If the user does not exist (after passing input validation), returns a dictionary
          with the key "error" and the value "User not found."
        - On successful retrieval, returns a dictionary with the following keys and value types:
            - id (str): The user's unique identifier
            - name (str): The user's name
            - username (str): The user's username

    Raises:
        TypeError: If target_profile_id is not a string.
        ValueError: If target_profile_id is an empty string.
    """
    from instagram.User import get_user
    return get_user(user_id=target_profile_id)


def enumerate_all_accounts():
    """
    Lists all users in the system.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary contains:
            - id (str): The user's unique identifier
            - name (str): The user's name
            - username (str): The user's username
    """
    from instagram.User import list_users
    return list_users()


def purge_user_profile(profile_id_for_removal):
    """
    Deletes a specified user from the system.

    Args:
        profile_id_for_removal (str): The unique identifier of the user to delete.

    Returns:
        Dict[str, Any]:
        - If user_id is missing, returns a dictionary with the key "error" and the value "Field user_id cannot be empty."
        - If the user does not exist, returns a dictionary with the key "error" and the value "User not found."
        - On successful deletion, returns a dictionary with the key "success" and the value True.
    """
    from instagram.User import delete_user
    return delete_user(user_id=profile_id_for_removal)


def find_profile_id_by_handle(search_handle):
    """
    Searches for a user by their username and returns the corresponding user ID.

    Args:
        search_handle (str): The username to look up in the system.
                        This field cannot be an empty string or contain only whitespace.

    Returns:
        str: The user ID as a string if a user with the given username is found.
             If no user is found with the given username, this function returns
             the literal string "User not found" (as per original core logic).

    Raises:
        TypeError: If 'search_handle' is not a string.
        EmptyUsernameError: If 'search_handle' is an empty string or consists only of whitespace.
    """
    from instagram.User import get_user_id_by_username
    return get_user_id_by_username(username=search_handle)
