# This file is automatically generated by the MutationBuilder

def fetch_group_details(group_resource_id, member_limit_per_group=None, group_fields_to_return=None):
    """
    Get a single contact group by resource name.

    This method retrieves a specific contact group from the user's Google Contacts.
    The resource name is a unique identifier that follows the format "contactGroups/{groupId}".

    Args:
        group_resource_id (str): The resource name of the contact group to retrieve. Must start with "contactGroups/".
                            Example: "contactGroups/family"
        member_limit_per_group (Optional[int]): The maximum number of members to return per group.
                                   Must be between 1 and 1000. If not specified, all members are returned.
        group_fields_to_return (Optional[str]): Comma-separated list of group fields to include in the response.
                                     Valid fields: name, groupType, memberResourceNames, memberCount,
                                     resourceName, etag, created, updated. If not specified, all fields are returned.

    Returns:
        Dict[str, Any]: A dictionary containing the contact group data with the following structure:
            {
                "resourceName": "contactGroups/family",
                "etag": "etag_family_group",
                "name": "Family",
                "groupType": "USER_CONTACT_GROUP",
                "memberResourceNames": ["people/123456789", "people/987654321"],
                "memberCount": 2,
                "created": "2023-01-20T08:00:00Z",
                "updated": "2024-01-10T16:30:00Z"
            }

    Raises:
        ValueError: If the resource name is invalid or the contact group is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.contact_groups import get
    return get(
        resource_name=group_resource_id,
        max_members=member_limit_per_group,
        group_fields=group_fields_to_return
    )


def establish_new_contact_group(new_group_information):
    """
    Create a new contact group.

    This method creates a new contact group in the user's Google Contacts.
    The contact group must have a name. The resource name is automatically generated.

    Args:
        new_group_information (Dict[str, Any]): Dictionary containing contact group information. Must include:
            - name (str): The name of the contact group (required)
            Optional fields:
            - groupType (str): The type of contact group. Defaults to "USER_CONTACT_GROUP".
                              Valid values: "USER_CONTACT_GROUP", "SYSTEM_CONTACT_GROUP"
            - memberResourceNames (List[str]): List of resource names of contacts to add to the group.
                                              Each resource name must start with "people/".

    Returns:
        Dict[str, Any]: A dictionary containing the created contact group data with the following structure:
            {
                "resourceName": "contactGroups/123456789",
                "etag": "etag_123456789",
                "name": "Family",
                "groupType": "USER_CONTACT_GROUP",
                "memberResourceNames": ["people/123456789", "people/987654321"],
                "memberCount": 2,
                "created": "2024-01-15T10:30:00Z",
                "updated": "2024-01-15T10:30:00Z"
            }

    Raises:
        ValueError: If required fields are missing or invalid.
        ValidationError: If the input data fails validation.
    """
    from google_people.contact_groups import create
    return create(contact_group_data=new_group_information)


def amend_contact_group_info(group_id_to_modify, updated_group_details, fields_to_be_updated=None):
    """
    Update an existing contact group.

    This method updates an existing contact group in the user's Google Contacts.
    You can update all fields or specify only certain fields to update using the update_group_fields parameter.

    Args:
        group_id_to_modify (str): The resource name of the contact group to update. Must start with "contactGroups/".
                            Example: "contactGroups/family"
        updated_group_details (Dict[str, Any]): Dictionary containing updated contact group information.
                                            Only the fields you want to update need to be included.
        fields_to_be_updated (Optional[str]): Comma-separated list of group fields to update.
                                            If specified, only these fields will be updated.
                                            If not specified, all provided fields will be updated.
                                            Valid fields: name, groupType, memberResourceNames

    Returns:
        Dict[str, Any]: A dictionary containing the updated contact group data with the same structure
                       as the create response, but with updated timestamps.

    Raises:
        ValueError: If the resource name is invalid or the contact group is not found.
        ValidationError: If the input parameters fail validation.

    Example:
        >>> update_data = {
        ...     "name": "Extended Family",
        ...     "memberResourceNames": ["people/123456789", "people/987654321", "people/555666777"]
        ... }
        >>> update("contactGroups/family", update_data, "name,memberResourceNames")
        {
            "resourceName": "contactGroups/family",
            "etag": "etag_updated_family",
            "name": "Extended Family",
            "groupType": "USER_CONTACT_GROUP",
            "memberResourceNames": ["people/123456789", "people/987654321", "people/555666777"],
            "memberCount": 3,
            "updated": "2024-01-15T14:20:00Z"
        }
    """
    from google_people.contact_groups import update
    return update(
        resource_name=group_id_to_modify,
        contact_group_data=updated_group_details,
        update_group_fields=fields_to_be_updated
    )


def remove_contact_group(group_resource_to_delete, also_delete_group_members=None):
    """
    Delete a contact group.

    This method permanently deletes a contact group from the user's Google Contacts.
    Optionally, it can also delete all contacts that are members of the group.
    The deletion cannot be undone.

    Args:
        group_resource_to_delete (str): The resource name of the contact group to delete. Must start with "contactGroups/".
                            Example: "contactGroups/family"
        also_delete_group_members (Optional[bool]): Whether to delete the contacts in the group.
                                        If True, all contacts that are members of the group will be deleted.
                                        If False or None, only the group is deleted, contacts remain.
                                        Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing deletion confirmation with the following structure:
            {
                "success": True,
                "deletedResourceName": "contactGroups/family",
                "message": "Contact group deleted successfully",
                "deletedContacts": False
            }

    Raises:
        ValueError: If the resource name is invalid or the contact group is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.contact_groups import delete
    return delete(resource_name=group_resource_to_delete, delete_contacts=also_delete_group_members)


def get_all_user_groups(
    page_item_count=None,
    next_page_identifier=None,
    incremental_sync_key=None,
    group_properties_to_display=None
):
    """
    List all contact groups owned by the authenticated user.

    This method retrieves a list of all contact groups that the authenticated user owns.
    The response can be paginated and supports field filtering.

    Args:
        page_item_count (Optional[int]): The number of contact groups to include in the response.
                                  Must be between 1 and 1000. Defaults to 100.
        next_page_identifier (Optional[str]): A page token, received from a previous response.
                                   Used for pagination.
        incremental_sync_key (Optional[str]): A sync token, received from a previous response.
                                   Used for incremental sync.
        group_properties_to_display (Optional[str]): Comma-separated list of group fields to include in the response.
                                     Valid fields: name, groupType, memberResourceNames, memberCount,
                                     resourceName, etag, created, updated. If not specified, all fields are returned.

    Returns:
        Dict[str, Any]: A dictionary containing the list of contact groups with the following structure:
            {
                "contactGroups": [
                    {
                        "resourceName": "contactGroups/family",
                        "etag": "etag_family_group",
                        "name": "Family",
                        "groupType": "USER_CONTACT_GROUP",
                        "memberResourceNames": ["people/123456789"],
                        "memberCount": 1,
                        "created": "2023-01-20T08:00:00Z",
                        "updated": "2024-01-10T16:30:00Z"
                    }
                ],
                "nextPageToken": "next_page_token_string",
                "nextSyncToken": "sync_token_string",
                "totalItems": 3
            }

    Raises:
        ValueError: If parameters are invalid.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.contact_groups import list
    return list(
        page_size=page_item_count,
        page_token=next_page_identifier,
        sync_token=incremental_sync_key,
        group_fields=group_properties_to_display
    )


def update_group_membership(target_group_resource_name, membership_change_payload):
    """
    Modify the members of a contact group.

    This method allows you to add or remove contacts from a contact group.
    You can specify which contacts to add and/or remove in a single request.

    Args:
        target_group_resource_name (str): The resource name of the contact group to modify. Must start with "contactGroups/".
                            Example: "contactGroups/family"
        membership_change_payload (Dict[str, Any]): Dictionary containing the modification request with the following structure:
            {
                "resourceNamesToAdd": ["people/123456789", "people/987654321"],  # Optional
                "resourceNamesToRemove": ["people/555666777"]  # Optional
            }
            - resourceNamesToAdd: List of resource names of contacts to add to the group
            - resourceNamesToRemove: List of resource names of contacts to remove from the group
            Each resource name must start with "people/".

    Returns:
        Dict[str, Any]: A dictionary containing the modification result with the following structure:
            {
                "resourceName": "contactGroups/family",
                "etag": "etag_updated_family",
                "memberCount": 2,
                "notFoundResourceNames": []
            }

    Raises:
        ValueError: If the resource name is invalid or the contact group is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.contact_groups import modify_members
    return modify_members(
        resource_name=target_group_resource_name,
        request_data=membership_change_payload
    )
