# This file is automatically generated by the MutationBuilder

def retrieve_person_by_id(person_resource_identifier, fields_to_return=None, data_source_types=None):
    """
    Get a single person by resource name.

    This method retrieves a specific person from the user's contacts using their resource name.
    The resource name is a unique identifier that follows the format "people/{personId}".

    Args:
        person_resource_identifier (str): The resource name of the person to retrieve. Must start with "people/".
                            Example: "people/123456789"
        fields_to_return (Optional[str]): Comma-separated list of person fields to include in the response.
                                      Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                      organizations, birthdays, photos, urls, userDefined, resourceName,
                                      etag, created, updated. If not specified, all fields are returned.
        data_source_types (Optional[List[str]]): List of sources to retrieve data from. Valid sources include
                                      "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT",
                                      "READ_SOURCE_TYPE_DOMAIN_PROFILE", "READ_SOURCE_TYPE_DIRECTORY".

    Returns:
        Dict[str, Any]: A dictionary containing the person data with the following structure:
            {
                "resourceName": "people/123456789",
                "etag": "etag_123456789",
                "names": [...],
                "emailAddresses": [...],
                "phoneNumbers": [...],
                "addresses": [...],
                "organizations": [...],
                "birthdays": [...],
                "photos": [...],
                "urls": [...],
                "userDefined": [...],
                "created": "2023-01-15T10:30:00Z",
                "updated": "2024-01-15T14:20:00Z"
            }

    Raises:
        ValueError: If the resource name is invalid or the person is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import get_contact
    return get_contact(
        resource_name=person_resource_identifier,
        person_fields=fields_to_return,
        sources=data_source_types
    )


def add_new_person(new_contact_details):
    """
    Create a new person contact.

    This method creates a new contact in the user's Google Contacts. The contact must have
    at least one name and one email address. The resource name is automatically generated.

    Args:
        new_contact_details (Dict[str, Any]): Dictionary containing person information. Must include:
            - names (List[Dict]): At least one name object with displayName, givenName, or familyName
            - emailAddresses (List[Dict]): At least one email address object with value
            Optional fields:
            - phoneNumbers (List[Dict]): Phone number objects
            - addresses (List[Dict]): Address objects
            - organizations (List[Dict]): Organization objects
            - birthdays (List[Dict]): Birthday objects
            - photos (List[Dict]): Photo objects
            - urls (List[Dict]): URL objects
            - userDefined (List[Dict]): User-defined field objects

    Returns:
        Dict[str, Any]: A dictionary containing the created person data with the following structure:
            {
                "resourceName": "people/123456789",
                "etag": "etag_123456789",
                "names": [...],
                "emailAddresses": [...],
                "phoneNumbers": [...],
                "addresses": [...],
                "organizations": [...],
                "birthdays": [...],
                "photos": [...],
                "urls": [...],
                "userDefined": [...],
                "created": "2024-01-15T10:30:00Z",
                "updated": "2024-01-15T10:30:00Z"
            }

    Raises:
        ValueError: If required fields are missing or invalid.
        ValidationError: If the input data fails validation.
    """
    from google_people.people import create_contact
    return create_contact(person_data=new_contact_details)


def modify_existing_person(contact_to_update_id, updated_person_attributes, fields_to_modify=None):
    """
    Update an existing person contact.

    This method updates an existing contact in the user's Google Contacts. You can update
    all fields or specify only certain fields to update using the update_person_fields parameter.

    Args:
        contact_to_update_id (str): The resource name of the person to update. Must start with "people/".
                            Example: "people/123456789"
        updated_person_attributes (Dict[str, Any]): Dictionary containing updated person information.
                                     Only the fields you want to update need to be included.
        fields_to_modify (Optional[str]): Comma-separated list of person fields to update.
                                             If specified, only these fields will be updated.
                                             If not specified, all provided fields will be updated.
                                             Valid fields: names, emailAddresses, phoneNumbers,
                                             addresses, organizations, birthdays, photos, urls, userDefined

    Returns:
        Dict[str, Any]: A dictionary containing the updated person data with the same structure
                       as the create_contact response, but with updated timestamps.

    Raises:
        ValueError: If the resource name is invalid or the person is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import update_contact
    return update_contact(
        resource_name=contact_to_update_id,
        person_data=updated_person_attributes,
        update_person_fields=fields_to_modify
    )


def remove_person_record(person_id_to_delete):
    """
    Delete a person contact.

    This method permanently deletes a contact from the user's Google Contacts.
    The deletion cannot be undone.

    Args:
        person_id_to_delete (str): The resource name of the person to delete. Must start with "people/".
                            Example: "people/123456789"

    Returns:
        Dict[str, Any]: A dictionary containing deletion confirmation with the following structure:
            {
                "success": True,
                "deletedResourceName": "people/123456789",
                "message": "Person deleted successfully"
            }

    Raises:
        ValueError: If the resource name is invalid or the person is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import delete_contact
    return delete_contact(resource_name=person_id_to_delete)


def fetch_contact_list(
    owner_resource_name='people/me',
    contact_properties_to_include=None,
    results_per_page=None,
    pagination_cursor=None,
    connection_sorting_preference=None,
    previous_sync_state_token=None,
    include_new_sync_token=None
):
    """
    List people in the authenticated user's contacts (connections).

    This method retrieves a list of people in the authenticated user's contacts.
    The response can be paginated and supports various sorting options.

    Args:
        owner_resource_name (str, optional): The resource name to return connections for.
                                      Defaults to "people/me" (the authenticated user).
                                      Must start with "people/".
        contact_properties_to_include (Optional[str]): Comma-separated list of person fields to include in the response.
                                      Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                      organizations, birthdays, photos, urls, userDefined, resourceName,
                                      etag, created, updated.
        results_per_page (Optional[int]): The number of connections to include in the response.
                                  Must be between 1 and 1000. Defaults to 100.
        pagination_cursor (Optional[str]): A page token, received from a previous response.
                                   Used for pagination.
        connection_sorting_preference (Optional[str]): The order in which the connections should be sorted.
                                   Valid values: "LAST_MODIFIED_ASCENDING", "LAST_MODIFIED_DESCENDING",
                                   "FIRST_NAME_ASCENDING", "LAST_NAME_ASCENDING".
        previous_sync_state_token (Optional[str]): A sync token, returned by a previous call.
                                   Used for incremental sync.
        include_new_sync_token (Optional[bool]): Whether the response should include a sync token.
                                            Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing the list of connections with the following structure:
            {
                "connections": [
                    {
                        "resourceName": "people/123456789",
                        "etag": "etag_123456789",
                        "names": [...],
                        "emailAddresses": [...],
                        ...
                    }
                ],
                "nextPageToken": "next_page_token_string",
                "totalItems": 150,
                "nextSyncToken": "sync_token_string"
            }

    Raises:
        ValueError: If the resource name is invalid or parameters are invalid.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import list_connections
    return list_connections(
        resource_name=owner_resource_name,
        person_fields=contact_properties_to_include,
        page_size=results_per_page,
        page_token=pagination_cursor,
        sort_order=connection_sorting_preference,
        sync_token=previous_sync_state_token,
        request_sync_token=include_new_sync_token
    )


def find_contacts_by_query(search_term, fields_to_show_in_results=None, search_data_locations=None):
    """
    Search for people in the authenticated user's contacts.

    This method searches through the authenticated user's contacts using a plain-text query.
    The search is performed across names, email addresses, and other contact information.

    Args:
        search_term (str): The plain-text query for the request. Must not be empty and cannot exceed 1000 characters.
                     The search is case-insensitive and performs partial matching.
        fields_to_show_in_results (Optional[str]): A field mask to restrict which fields on each person are returned.
                                  Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                  organizations, birthdays, photos, urls, userDefined, resourceName,
                                  etag, created, updated.
        search_data_locations (Optional[List[str]]): List of sources to retrieve data from. Valid sources include
                                      "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT",
                                      "READ_SOURCE_TYPE_DOMAIN_PROFILE", "READ_SOURCE_TYPE_DIRECTORY".

    Returns:
        Dict[str, Any]: A dictionary containing the search results with the following structure:
            {
                "results": [
                    {
                        "resourceName": "people/123456789",
                        "etag": "etag_123456789",
                        "names": [...],
                        "emailAddresses": [...],
                        ...
                    }
                ],
                "totalItems": 5
            }

    Raises:
        ValueError: If the search_term is empty or invalid.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import search_people
    return search_people(
        query=search_term,
        read_mask=fields_to_show_in_results,
        sources=search_data_locations
    )


def retrieve_multiple_contacts(list_of_person_ids, contact_data_to_fetch=None, information_sources_list=None):
    """
    Get a collection of people by resource names.

    This method retrieves multiple people from the user's contacts in a single request.
    This is more efficient than making multiple individual get_contact calls.

    Args:
        list_of_person_ids (List[str]): List of resource names of the people to retrieve.
                                   Must contain between 1 and 50 resource names.
                                   Each resource name must start with "people/".
                                   Example: ["people/123456789", "people/987654321"]
        contact_data_to_fetch (Optional[str]): Comma-separated list of person fields to include in the response.
                                      Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                      organizations, birthdays, photos, urls, userDefined, resourceName,
                                      etag, created, updated.
        information_sources_list (Optional[List[str]]): List of sources to retrieve data from. Valid sources include
                                      "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT",
                                      "READ_SOURCE_TYPE_DOMAIN_PROFILE", "READ_SOURCE_TYPE_DIRECTORY".

    Returns:
        Dict[str, Any]: A dictionary containing the batch of people with the following structure:
            {
                "responses": [
                    {
                        "resourceName": "people/123456789",
                        "etag": "etag_123456789",
                        "names": [...],
                        "emailAddresses": [...],
                        ...
                    }
                ],
                "notFound": ["people/999999999"],
                "totalItems": 2
            }

    Raises:
        ValueError: If list_of_person_ids is empty or contains invalid resource names.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import get_batch_get
    return get_batch_get(
        resource_names=list_of_person_ids,
        person_fields=contact_data_to_fetch,
        sources=information_sources_list
    )


def fetch_organization_user(
    directory_person_resource_id,
    user_profile_fields_to_get=None,
    data_origin_list=None
):
    """
    Get a single directory person by resource name.

    This method retrieves a specific person from the Google Workspace directory.
    Directory people are users in your organization's Google Workspace domain.

    Args:
        directory_person_resource_id (str): The resource name of the directory person to retrieve.
                            Must start with "directoryPeople/".
                            Example: "directoryPeople/123456789"
        user_profile_fields_to_get (Optional[str]): A field mask to restrict which fields on each person are returned.
                                  Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                  organizations, birthdays, photos, urls, userDefined, resourceName,
                                  etag, created, updated.
        data_origin_list (Optional[List[str]]): List of sources to retrieve data from. Valid sources include
                                      "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT",
                                      "READ_SOURCE_TYPE_DOMAIN_PROFILE", "READ_SOURCE_TYPE_DIRECTORY".

    Returns:
        Dict[str, Any]: A dictionary containing the directory person data with the same structure
                       as a regular person, but sourced from the directory.

    Raises:
        ValueError: If the resource name is invalid or the directory person is not found.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import get_directory_person
    return get_directory_person(
        resource_name=directory_person_resource_id,
        read_mask=user_profile_fields_to_get,
        sources=data_origin_list
    )


def browse_organization_directory(
    fields_to_include_for_each_person=None,
    directory_page_limit=None,
    directory_page_cursor=None,
    directory_sync_token=None,
    should_request_sync_token=None
):
    """
    List directory people in the organization.

    This method retrieves a list of people from the Google Workspace directory.
    Directory people are users in your organization's Google Workspace domain.

    Args:
        fields_to_include_for_each_person (Optional[str]): A field mask to restrict which fields on each person are returned.
                                  Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                  organizations, birthdays, photos, urls, userDefined, resourceName,
                                  etag, created, updated.
        directory_page_limit (Optional[int]): The number of directory people to include in the response.
                                  Must be between 1 and 1000. Defaults to 100.
        directory_page_cursor (Optional[str]): A page token, received from a previous response.
                                   Used for pagination.
        directory_sync_token (Optional[str]): A sync token, received from a previous response.
                                   Used for incremental sync.
        should_request_sync_token (Optional[bool]): Whether the response should include a sync token.
                                            Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing the list of directory people with the following structure:
            {
                "people": [
                    {
                        "resourceName": "directoryPeople/123456789",
                        "etag": "etag_dir_123456789",
                        "names": [...],
                        "emailAddresses": [...],
                        ...
                    }
                ],
                "nextPageToken": "next_page_token_string",
                "totalItems": 50,
                "nextSyncToken": "sync_token_string"
            }

    Raises:
        ValueError: If fields_to_include_for_each_person is not provided or parameters are invalid.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import list_directory_people
    return list_directory_people(
        read_mask=fields_to_include_for_each_person,
        page_size=directory_page_limit,
        page_token=directory_page_cursor,
        sync_token=directory_sync_token,
        request_sync_token=should_request_sync_token
    )


def query_organization_directory(
    directory_search_term,
    directory_result_field_mask=None,
    search_page_size=None,
    search_page_token=None,
    search_domain_sources=None
):
    """
    Search for directory people in the organization.

    This method searches through the Google Workspace directory using a plain-text query.
    The search is performed across names, email addresses, and organization information.

    Args:
        directory_search_term (str): The plain-text query for the request. Must not be empty and cannot exceed 1000 characters.
                     The search is case-insensitive and performs partial matching.
        directory_result_field_mask (Optional[str]): A field mask to restrict which fields on each person are returned.
                                  Valid fields: names, emailAddresses, phoneNumbers, addresses,
                                  organizations, birthdays, photos, urls, userDefined, resourceName,
                                  etag, created, updated.
        search_page_size (Optional[int]): The number of directory people to include in the response.
                                  Must be between 1 and 1000. Defaults to 100.
        search_page_token (Optional[str]): A page token, received from a previous response.
                                   Used for pagination.
        search_domain_sources (Optional[List[str]]): List of sources to retrieve data from. Valid sources include
                                      "READ_SOURCE_TYPE_PROFILE", "READ_SOURCE_TYPE_CONTACT",
                                      "READ_SOURCE_TYPE_DOMAIN_PROFILE", "READ_SOURCE_TYPE_DIRECTORY".

    Returns:
        Dict[str, Any]: A dictionary containing the search results with the following structure:
            {
                "results": [
                    {
                        "resourceName": "directoryPeople/123456789",
                        "etag": "etag_dir_123456789",
                        "names": [...],
                        "emailAddresses": [...],
                        ...
                    }
                ],
                "nextPageToken": "next_page_token_string",
                "totalItems": 5
            }

    Raises:
        ValueError: If the directory_search_term is empty or directory_result_field_mask is not provided.
        ValidationError: If the input parameters fail validation.
    """
    from google_people.people import search_directory_people
    return search_directory_people(
        query=directory_search_term,
        read_mask=directory_result_field_mask,
        page_size=search_page_size,
        page_token=search_page_token,
        sources=search_domain_sources
    )
