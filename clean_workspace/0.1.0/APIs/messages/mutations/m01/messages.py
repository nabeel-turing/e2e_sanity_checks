# This file is automatically generated by the MutationBuilder

def dispatch_sms_mms_message(
    target_contact,
    text_content,
    attached_media_files=None,
    require_user_approval=True,
    legacy_contact_name=None,
    legacy_contact_phone=None,
    legacy_contact_avatar_url=None
):
    """
    Send a message to a recipient containing a single endpoint.

    This method sends a message to a recipient via SMS/MMS. Always invoke this method 
    with `get_confirmation=True`. The method validates the recipient has exactly one 
    endpoint before sending the message.

    Args:
        target_contact (Union[Dict[str, Any], Recipient]): The recipient object containing 
            contact information. Must have exactly one endpoint for sending messages.
            Expected structure:
            - contact_id (Optional[str]): Unique identifier for the contact
            - contact_name (str): The name of the contact (required)
            - contact_endpoints (List[Dict]): List with exactly one endpoint containing:
                - endpoint_type (str): Must be "PHONE_NUMBER"
                - endpoint_value (str): The phone number
                - endpoint_label (Optional[str]): Label for the endpoint
            - contact_photo_url (Optional[str]): URL to the contact's photo
        text_content (str): The text message content to send to the recipient. 
            This field must be non-empty. Should use correct grammar, capitalization, 
            and punctuation. If the message body contains a list of items, format 
            it as a bulleted list with asterisks.
        attached_media_files (Optional[List[Union[Dict[str, Any], MediaAttachment]]]): 
            Metadata associated with media payload. Currently only supports images.
            Each attachment should contain:
            - media_id (str): Unique identifier of the media
            - media_type (str): Type of media, defaults to "IMAGE"
            - source (str): Source of media ("IMAGE_RETRIEVAL", "IMAGE_GENERATION", 
              "IMAGE_UPLOAD", or "GOOGLE_PHOTO")
        require_user_approval (bool): Whether to get confirmation before sending. 
            Defaults to True and should always be True per OpenAPI spec.
        legacy_contact_name (Optional[str]): The recipient's name (legacy parameter).
        legacy_contact_phone (Optional[str]): The phone number of the recipient 
            (legacy parameter).
        legacy_contact_avatar_url (Optional[str]): URL to the profile photo of the recipient 
            (legacy parameter).

    Returns:
        Dict[str, Any]: A dictionary containing the operation result with:
            - status (str): "success" if the message was sent successfully
            - sent_message_id (str): Unique identifier for the sent message
            - emitted_action_count (int): Number of actions generated (always 1)
            - action_card_content_passthrough (Optional[str]): Additional content metadata

    Raises:
        TypeError: If target_contact is not a dict or Recipient object, if text_content 
            is not a string, if attached_media_files is not a list when provided, or 
            if require_user_approval is not a boolean.
        ValueError: If text_content is empty, if target_contact is missing required fields,
            if target_contact has more than one endpoint, if phone number validation fails,
            or if media attachment validation fails.
        InvalidRecipientError: If the target_contact object is malformed or missing 
            required contact information.
        MessageBodyRequiredError: If the message body is empty or None.
        InvalidPhoneNumberError: If the phone number format is invalid.
        InvalidMediaAttachmentError: If media attachment data is malformed.
    """
    from messages.messages import send_chat_message
    return send_chat_message(
        recipient=target_contact,
        message_body=text_content,
        media_attachments=attached_media_files,
        get_confirmation=require_user_approval,
        recipient_name=legacy_contact_name,
        recipient_phone_number=legacy_contact_phone,
        recipient_photo_url=legacy_contact_avatar_url
    )


def stage_message_for_sending(message_content_to_prepare, candidate_recipients):
    """
    Prepare to send a message to one or more candidate recipients via SMS/MMS.

    This method prepares message cards that show information and can be interacted 
    with to send messages. It validates the message body and recipient list but 
    does not actually send any messages.

    Args:
        message_content_to_prepare (str): The text message content to send to the recipients.
            Must be a non-empty string.
        candidate_recipients (List[Union[Dict[str, Any], Recipient]]): List of recipient 
            objects. Each recipient should contain:
            - contact_id (Optional[str]): Unique identifier for the contact
            - contact_name (str): The name of the contact (required)
            - contact_endpoints (List[Dict]): List of endpoints for the contact
            - contact_photo_url (Optional[str]): URL to the contact's photo

    Returns:
        Dict[str, Any]: A dictionary containing the preparation result with:
            - status (str): "prepared" indicating the message was prepared
            - sent_message_id (Optional[str]): Always None for prepare operations
            - emitted_action_count (int): Number of actions generated (always 0)
            - action_card_content_passthrough (Optional[str]): Additional content metadata

    Raises:
        TypeError: If message_content_to_prepare is not a string or if candidate_recipients is not a list.
        ValueError: If message_content_to_prepare is empty or if candidate_recipients list is empty.
        InvalidRecipientError: If any recipient object is malformed or missing 
            required contact information.
        MessageBodyRequiredError: If the message body is empty or None.
    """
    from messages.messages import prepare_chat_message
    return prepare_chat_message(
        message_body=message_content_to_prepare,
        recipients=candidate_recipients
    )


def present_recipient_options(selectable_contacts, prefilled_message_text=None):
    """
    Display potential recipients in a card for user selection.

    This method displays a list of one or more recipients that the user can choose 
    to send a message to. It is used when there are multiple recipients or when 
    a single recipient has multiple endpoints, requiring user clarification.

    Args:
        selectable_contacts (List[Union[Dict[str, Any], Recipient]]): List of possible 
            recipients to send the message to. Each recipient should contain:
            - contact_id (Optional[str]): Unique identifier for the contact
            - contact_name (str): The name of the contact (required)
            - contact_endpoints (List[Dict]): List of endpoints for the contact
            - contact_photo_url (Optional[str]): URL to the contact's photo
        prefilled_message_text (Optional[str]): The text message content to send to the 
            recipient. This may be left empty if the user has not specified 
            this already.

    Returns:
        Dict[str, Any]: A dictionary containing the display result with:
            - status (str): "choices_displayed" indicating choices were shown
            - sent_message_id (Optional[str]): Always None for choice operations
            - emitted_action_count (int): Number of actions generated (always 0)
            - action_card_content_passthrough (Optional[str]): Additional content metadata

    Raises:
        TypeError: If selectable_contacts is not a list or if prefilled_message_text is not a string 
            when provided.
        ValueError: If selectable_contacts list is empty.
        InvalidRecipientError: If any recipient object is malformed or missing 
            required contact information.
    """
    from messages.messages import show_message_recipient_choices
    return show_message_recipient_choices(
        recipients=selectable_contacts,
        message_body=prefilled_message_text
    )


def prompt_for_message_content(designated_contact):
    """
    Display recipient and ask user for message body.

    This method displays the recipient in a card shown to the user, with the intent 
    to ask the user to provide the message body. It is used when there is a single 
    recipient with a single endpoint, but the user has not specified a message body.

    Args:
        designated_contact (Union[Dict[str, Any], Recipient]): The recipient to send the 
            message to. The recipient is auxiliary information that is displayed 
            in the card shown to the user. Should contain:
            - contact_id (Optional[str]): Unique identifier for the contact
            - contact_name (str): The name of the contact (required)
            - contact_endpoints (List[Dict]): List of endpoints for the contact
            - contact_photo_url (Optional[str]): URL to the contact's photo

    Returns:
        Dict[str, Any]: A dictionary containing the request result with:
            - status (str): "asking_for_message_body" indicating body was requested
            - sent_message_id (Optional[str]): Always None for request operations
            - emitted_action_count (int): Number of actions generated (always 0)
            - action_card_content_passthrough (Optional[str]): Additional content metadata

    Raises:
        TypeError: If designated_contact is not a dict or Recipient object.
        ValueError: If designated_contact is None or missing required fields.
        InvalidRecipientError: If the designated_contact object is malformed or missing 
            required contact information.
    """
    from messages.messages import ask_for_message_body
    return ask_for_message_body(recipient=designated_contact)


def notify_recipient_lookup_failure(searched_contact_name=None, accompanying_message_text=None):
    """
    Inform the user that the message recipient is not found or not specified.

    This method is used to inform the user that the message recipient is not found 
    or not specified. It is invoked when there are no contacts returned from contact 
    search or when the user has not specified a contact name in the query.

    Args:
        searched_contact_name (Optional[str]): The recipient name that was searched for.
            May be None if no name was provided in the search.
        accompanying_message_text (Optional[str]): The text message content to send to the 
            recipient. This may be left empty if the user has not specified 
            this already.

    Returns:
        Dict[str, Any]: A dictionary containing the notification result with:
            - status (str): "recipient_not_found" indicating no recipient was found
            - sent_message_id (Optional[str]): Always None for notification operations
            - emitted_action_count (int): Number of actions generated (always 0)
            - action_card_content_passthrough (Optional[str]): Additional content metadata

    Raises:
        TypeError: If searched_contact_name is not a string when provided, or if accompanying_message_text 
            is not a string when provided.
    """
    from messages.messages import show_message_recipient_not_found_or_specified
    return show_message_recipient_not_found_or_specified(
        contact_name=searched_contact_name,
        message_body=accompanying_message_text
    )
