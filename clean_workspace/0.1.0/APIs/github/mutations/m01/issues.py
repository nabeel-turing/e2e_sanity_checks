# This file is automatically generated by the MutationBuilder

def retrieve_issue_details(repository_owner_login, repository_name_str, issue_identifier_num):
    """
    Gets the contents of an issue within a repository.

    This function retrieves detailed information about a specific issue identified
    by its number, belonging to the specified repository and owner. The returned
    dictionary is a direct representation of the data for the found issue.

    Args:
        repository_owner_login (str): The username of the account that owns the repository.
            Must be a non-empty string.
        repository_name_str (str): The name of the repository. Must be a non-empty string.
        issue_identifier_num (int): The number that identifies the issue. Must be a positive integer.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the issue.
            The expected structure includes:
            id (int): The unique ID of the issue.
            node_id (str): The global node ID of the issue.
            repository_id (int): ID of the repository this issue belongs to.
            number (int): Issue number, unique per repository.
            title (str): The title of the issue.
            user (Dict[str, Any]): The user who created the issue. This dictionary
                contains the following fields:
                login (str): Username of the user.
                id (int): User ID of the user.
                node_id (Optional[str]): Global node ID of the user.
                type (Optional[str]): Type of account, e.g., 'User' or 'Organization'.
                site_admin (Optional[bool]): Whether the user is a site administrator.
            labels (List[Dict[str, Any]]): A list of labels associated with the issue.
                Each dictionary in the list represents a label and contains the
                following fields:
                id (int): Label ID.
                node_id (str): Global node ID of the label.
                repository_id (int): ID of the repository this label belongs to.
                name (str): Label name.
                color (str): Label color (hex code).
                description (Optional[str]): Label description.
                default (Optional[bool]): Whether this is a default label.
            state (str): State of the issue; either 'open' or 'closed'.
            locked (bool): Whether the issue is locked.
            assignee (Optional[Dict[str, Any]]): The user assigned to the issue (if any).
                If present, this dictionary contains the following fields:
                login (str): Username of the assignee.
                id (int): User ID of the assignee.
                node_id (Optional[str]): Global node ID of the assignee.
                type (Optional[str]): Type of account, e.g., 'User' or 'Organization'.
                site_admin (Optional[bool]): Whether the assignee is a site administrator.
            assignees (List[Dict[str, Any]]): A list of users assigned to the issue.
                Each dictionary in the list represents an assignee and contains the
                following fields:
                login (str): Username of the assignee.
                id (int): User ID of the assignee.
                node_id (Optional[str]): Global node ID of the assignee.
                type (Optional[str]): Type of account, e.g., 'User' or 'Organization'.
                site_admin (Optional[bool]): Whether the assignee is a site administrator.
            milestone (Optional[Dict[str, Any]]): The milestone associated with the issue (if any).
                If present, this dictionary contains the following fields:
                id (int): Milestone ID.
                node_id (str): Global node ID of the milestone.
                repository_id (int): ID of the repository this milestone belongs to.
                number (int): The number of the milestone, unique per repository.
                title (str): Milestone title.
                description (Optional[str]): Milestone description.
                creator (Optional[Dict[str, Any]]): The user who created the milestone.
                    If present, this dictionary contains:
                    login (str): Username of the creator.
                    id (int): User ID of the creator.
                    node_id (Optional[str]): Global node ID of the creator.
                    type (Optional[str]): Type of account, e.g., 'User' or 'Organization'.
                    site_admin (Optional[bool]): Whether the creator is a site administrator.
                open_issues (int): Number of open issues in this milestone.
                closed_issues (int): Number of closed issues in this milestone.
                state (str): State of the milestone (e.g., 'open', 'closed').
                created_at (str): ISO 8601 timestamp of when the milestone was created.
                updated_at (str): ISO 8601 timestamp of when the milestone was last updated.
                closed_at (Optional[str]): ISO 8601 timestamp of when the milestone was closed.
                due_on (Optional[str]): ISO 8601 timestamp of when the milestone is due.
            comments (int): The number of comments on the issue.
            created_at (str): ISO 8601 timestamp of when the issue was created.
            updated_at (str): ISO 8601 timestamp of when the issue was last updated.
            closed_at (Optional[str]): ISO 8601 timestamp of when the issue was closed.
            body (Optional[str]): The content of the issue.
            author_association (str): The relationship of the issue author to the
                repository. Possible values are: "COLLABORATOR", "CONTRIBUTOR",
                "FIRST_TIMER", "FIRST_TIME_CONTRIBUTOR", "MANNEQUIN", "MEMBER",
                "NONE", "OWNER".
            active_lock_reason (Optional[str]): The active lock reason if the issue is locked.
            reactions (Optional[Dict[str, Any]]): A dictionary summarizing the reactions to the issue.
                If present, this dictionary typically includes fields such as:
                url (str): URL to the reactions API endpoint for this issue.
                total_count (int): Total number of reactions.
                "+1" (int): Count of '+1' (thumbs up) reactions.
                "-1" (int): Count of '-1' (thumbs down) reactions.
                laugh (int): Count of 'laugh' reactions.
                hooray (int): Count of 'hooray' reactions.
                confused (int): Count of 'confused' reactions.
                heart (int): Count of 'heart' reactions.
                rocket (int): Count of 'rocket' reactions.
                eyes (int): Count of 'eyes' reactions.
            score (Optional[float]): Search score if the issue was retrieved from search results.

    Raises:
        TypeError: If any of the input arguments are of an incorrect type.
        ValueError: If `repository_owner_login` or `repository_name_str` are empty strings, or if `issue_identifier_num` is not positive.
        NotFoundError: If the repository or issue does not exist.
    """
    from github.issues import get_issue
    return get_issue(
        owner=repository_owner_login,
        repo=repository_name_str,
        issue_number=issue_identifier_num
    )


def fetch_all_issue_comments(repo_account_holder, target_repository_name, specific_issue_id):
    """
    Get comments for a GitHub issue.

    This function gets comments for a GitHub issue. The issue is identified using
    the provided repository owner, repository name, and issue number.

    Args:
        repo_account_holder (str): The owner of the repository.
        target_repository_name (str): The name of the repository.
        specific_issue_id (int): The number of the issue.

    Returns:
        List[Dict[str, Any]]: A list of comment objects for the issue. Each dictionary
            in the list represents a comment and has the following structure:
            id (int): The unique ID of the comment.
            node_id (str): The global node ID of the comment.
            user (Dict[str, Any]): Details of the user who created the comment. This
                dictionary contains the following keys:
                login (str): Username of the comment author.
                id (int): User ID of the comment author.
            created_at (str): ISO 8601 timestamp indicating when the comment was
                created.
            updated_at (str): ISO 8601 timestamp indicating when the comment was
                last updated.
            author_association (str): The relationship of the comment author to the
                repository (e.g., 'OWNER', 'MEMBER', 'CONTRIBUTOR', 'NONE').
            body (str): The textual content of the comment.

    Raises:
        NotFoundError: If the repository or issue does not exist.
        ValidationError: If input parameters for update are invalid.
    """
    from github.issues import get_issue_comments
    return get_issue_comments(
        owner=repo_account_holder,
        repo=target_repository_name,
        issue_number=specific_issue_id
    )


def open_new_github_issue(
    organization_or_user_name,
    project_repository_name,
    new_issue_title,
    issue_description_text=None,
    assigned_user_logins=None,
    issue_category_labels=None
):
    """
    Create a new issue in a GitHub repository.

    This function facilitates the creation of a new issue within a designated GitHub repository.
    It accepts details such as the issue's title, an optional body, optional assignees,
    and optional labels to initialize the issue.

    Args:
        organization_or_user_name (str): The owner of the repository.
        project_repository_name (str): The name of the repository.
        new_issue_title (str): The title for the new issue.
        issue_description_text (Optional[str]): The contents of the issue.
        assigned_user_logins (Optional[List[str]]): A list of GitHub logins to assign to this issue.
        issue_category_labels (Optional[List[str]]): A list of label names to add to this issue.

    Returns:
        Dict[str, Any]: A dictionary containing details of the created issue with the following keys:
            id (int): The unique ID of the issue.
            node_id (str): The global node ID of the issue.
            number (int): The issue number within the repository.
            title (str): The title of the issue.
            user (Dict[str, Any]): The user who created the issue. The dictionary contains:
                login (str): Username.
                id (int): User ID.
                node_id (str): The global node ID of the user.
                type (str): The type of the account (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            labels (List[Dict[str, Any]]): A list of labels associated with the issue. Each dictionary in the list contains:
                id (int): Label ID.
                node_id (str): The global node ID of the label.
                name (str): Label name.
                color (str): Label color (hex code).
                description (Optional[str]): Label description.
                default (bool): Whether this is a default label.
            state (str): The state of the issue (e.g., 'open', 'closed').
            locked (bool): Whether the issue is locked.
            assignee (Optional[Dict[str, Any]]): The user assigned to the issue (if any). If present, the dictionary contains:
                login (str): Username.
                id (int): User ID.
                node_id (str): The global node ID of the user.
                type (str): The type of the account (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            assignees (List[Dict[str, Any]]): A list of users assigned to the issue. Each dictionary in the list contains:
                login (str): Username.
                id (int): User ID.
                node_id (str): The global node ID of the user.
                type (str): The type of the account (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            milestone (Optional[Dict[str, Any]]): The milestone associated with the issue. If present, the dictionary contains:
                id (int): Milestone ID.
                node_id (str): The global node ID of the milestone.
                number (int): Milestone number.
                title (str): Milestone title.
                description (Optional[str]): Milestone description.
                creator (Dict[str, Any]): The user who created the milestone. The dictionary contains:
                    login (str): Username.
                    id (int): User ID.
                    node_id (str): The global node ID of the user.
                    type (str): The type of the account (e.g., 'User').
                    site_admin (bool): Whether the user is a site administrator.
                open_issues (int): The number of open issues in this milestone.
                closed_issues (int): The number of closed issues in this milestone.
                state (str): State of the milestone (e.g., 'open', 'closed').
                created_at (str): ISO 8601 timestamp of when the milestone was created.
                updated_at (str): ISO 8601 timestamp of when the milestone was last updated.
                closed_at (Optional[str]): ISO 8601 timestamp of when the milestone was closed.
                due_on (Optional[str]): ISO 8601 timestamp of the milestone due date.
            comments (int): The number of comments on the issue.
            created_at (str): ISO 8601 timestamp of when the issue was created.
            updated_at (str): ISO 8601 timestamp of when the issue was last updated.
            closed_at (Optional[str]): ISO 8601 timestamp of when the issue was closed (null if open).
            body (Optional[str]): The content/body of the issue.
            author_association (str): The relationship of the issue author to the repository (e.g., 'OWNER', 'MEMBER', 'CONTRIBUTOR', 'NONE').

    Raises:
        NotFoundError: If the repository does not exist.
        ValidationError: If required fields (e.g., new_issue_title) are missing or invalid.
        ForbiddenError: If the user does not have permission to create issues in the repository.
        RuntimeError: If no authenticated user is found or if the authenticated user cannot be found in the database.
    """
    from github.issues import create_issue
    return create_issue(
        owner=organization_or_user_name,
        repo=project_repository_name,
        title=new_issue_title,
        body=issue_description_text,
        assignees=assigned_user_logins,
        labels=issue_category_labels
    )


def post_comment_to_issue(
    repository_owner_username,
    affected_repository,
    target_issue_number,
    comment_content_markdown
):
    """
    Add a comment to an issue.

    This function adds a comment to a specific issue. It takes the repository's
    owner, the repository name, the issue number, and the comment's body content
    as input. Upon successful execution, it provides a dictionary containing
    details of the newly created comment.

    Args:
        repository_owner_username (str): The owner of the repository.
        affected_repository (str): The name of the repository.
        target_issue_number (int): The number that identifies the issue.
        comment_content_markdown (str): The content of the comment.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly created comment.
            It includes the following fields:
            id (int): The unique ID of the comment.
            node_id (str): The global node ID of the comment.
            user (Dict[str, Any]): The user who created the comment. This dictionary
                contains:
                login (str): Username of the user.
                id (int): User ID of the user.
            created_at (str): ISO 8601 timestamp of when the comment was created.
            updated_at (str): ISO 8601 timestamp of when the comment was last
                updated.
            author_association (str): The relationship of the comment author to the
                repository (e.g., 'OWNER', 'MEMBER', 'CONTRIBUTOR', 'NONE').
            body (str): The content of the comment.

    Raises:
        NotFoundError: If the repository or issue does not exist.
        ValidationError: If the comment comment_content_markdown is missing or invalid.
        ForbiddenError: If the user does not have permission to comment on the issue.
    """
    from github.issues import add_issue_comment
    return add_issue_comment(
        owner=repository_owner_username,
        repo=affected_repository,
        issue_number=target_issue_number,
        body=comment_content_markdown
    )


def find_repository_issues_by_filter(
    repo_container_owner,
    repo_identifier_name,
    issue_status_filter=None,
    filter_by_label_names=None,
    issue_sort_criterion=None,
    sorting_order_direction=None,
    updated_after_timestamp=None,
    pagination_page_number=None,
    items_per_page_count=None
):
    """
    List and filter repository issues.

    Lists and filters issues for a specified repository. This function allows
    retrieval of issues based on criteria such as their state (e.g., open,
    closed, all), associated labels, and a 'since' timestamp indicating the
    minimum update time. The results can be sorted by fields like 'created',
    'updated', or 'comments', in either ascending ('asc') or descending
    ('desc') order. Pagination is supported through 'page' and 'per_page'
    parameters to manage the volume of returned data.

    Args:
        repo_container_owner (str): The owner of the repository.
        repo_identifier_name (str): The name of the repository.
        issue_status_filter (Optional[str]): The state of the issues to return (e.g., 'open',
            'closed', 'all').
        filter_by_label_names (Optional[List[str]]): A list of label names to filter issues by.
        issue_sort_criterion (Optional[str]): The criteria for sorting the issues (e.g., 'created',
            'updated', 'comments').
        sorting_order_direction (Optional[str]): The direction of sorting (e.g., 'asc', 'desc').
        updated_after_timestamp (Optional[str]): An ISO 8601 timestamp to filter issues updated at
            or after this time.
        pagination_page_number (Optional[int]): The page number for paginated results.
        items_per_page_count (Optional[int]): The number of issues to return per page.

    Returns:
      List[Dict[str, Any]]: A list of dictionaries, where each dictionary
        represents an issue matching the filter criteria. Each issue
        dictionary contains the following keys:
        id (int): The unique ID of the issue.
        node_id (str): The global node ID of the issue.
        number (int): The issue number within the repository.
        title (str): The title of the issue.
        user (Dict[str, Any]): The user who created the issue. This
            dictionary contains the following keys:
            login (str): Username.
            id (int): User ID.
            node_id (str): The global node ID of the user.
            type (str): Type of user (e.g., 'User', 'Bot').
            site_admin (bool): Whether the user is a site administrator.
        labels (List[Dict[str, Any]]): A list of labels associated with the
            issue. Each dictionary in this list represents a label and
            contains the following keys:
            id (int): Label ID.
            node_id (str): The global node ID of the label.
            name (str): Label name.
            color (str): Label color (hex code).
            description (Optional[str]): Label description.
            default (bool): Indicates if this is a default label.
        state (str): The state of the issue (e.g., 'open', 'closed').
        locked (bool): Whether the issue is locked.
        active_lock_reason (Optional[str]): The reason for locking the
            issue, if applicable.
        assignee (Optional[Dict[str, Any]]): The user assigned to this issue
            (if any). If present, this dictionary contains the following
            keys:
            login (str): Username.
            id (int): User ID.
            node_id (str): The global node ID of the user.
            type (str): Type of user (e.g., 'User', 'Bot').
            site_admin (bool): Whether the user is a site administrator.
        assignees (List[Dict[str, Any]]): A list of users assigned to this
            issue. Each user dictionary in this list contains the
            following keys:
            login (str): Username.
            id (int): User ID.
            node_id (str): The global node ID of the user.
            type (str): Type of user (e.g., 'User', 'Bot').
            site_admin (bool): Whether the user is a site administrator.
        milestone (Optional[Dict[str, Any]]): The milestone associated with
            the issue (if any). If present, this dictionary contains the
            following keys:
            id (int): Milestone ID.
            node_id (str): The global node ID of the milestone.
            number (int): Milestone number within the repository.
            title (str): Milestone title.
            description (Optional[str]): Milestone description.
            creator (Dict[str, Any]): The user who created the milestone.
                This dictionary contains the following keys:
                login (str): Username.
                id (int): User ID.
                node_id (str): The global node ID of the user.
                type (str): Type of user (e.g., 'User', 'Bot').
                site_admin (bool): Whether the user is a site administrator.
            open_issues (int): Number of open issues in this milestone.
            closed_issues (int): Number of closed issues in this milestone.
            state (str): State of the milestone (e.g., 'open', 'closed').
            created_at (str): ISO 8601 timestamp of when the milestone
                was created.
            updated_at (str): ISO 8601 timestamp of when the milestone
                was last updated.
            closed_at (Optional[str]): ISO 8601 timestamp of when the
                milestone was closed.
            due_on (Optional[str]): ISO 8601 timestamp of the milestone
                due date.
        comments (int): The number of comments on the issue.
        created_at (str): ISO 8601 timestamp of when the issue was created.
        updated_at (str): ISO 8601 timestamp of when the issue was last
            updated.
        closed_at (Optional[str]): ISO 8601 timestamp of when the issue was
            closed.
        body (Optional[str]): The content/description of the issue.
        reactions (Dict[str, Any]): Reaction summary. This dictionary
            contains the following keys:
            total_count (int): Total number of reactions.
            '+1' (int): Number of '+1' reactions.
            '-1' (int): Number of '-1' reactions.
            laugh (int): Number of 'laugh' reactions.
            hooray (int): Number of 'hooray' reactions.
            confused (int): Number of 'confused' reactions.
            heart (int): Number of 'heart' reactions.
            rocket (int): Number of 'rocket' reactions.
            eyes (int): Number of 'eyes' reactions.
        author_association (str): The relationship of the issue author to
            the repository (e.g., 'OWNER', 'MEMBER', 'COLLABORATOR',
            'CONTRIBUTOR', 'FIRST_TIMER', 'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN', 'NONE').

    Raises:
        NotFoundError: If the repository does not exist.
        ValidationError: If filter parameters are invalid.
    """
    from github.issues import list_issues
    return list_issues(
        owner=repo_container_owner,
        repo=repo_identifier_name,
        state=issue_status_filter,
        labels=filter_by_label_names,
        sort=issue_sort_criterion,
        direction=sorting_order_direction,
        since=updated_after_timestamp,
        page=pagination_page_number,
        per_page=items_per_page_count
    )


def modify_existing_issue(
    repository_account_owner,
    repository_to_update_in,
    issue_to_modify_id,
    updated_issue_title=None,
    revised_issue_body=None,
    new_issue_state=None,
    replacement_label_list=None,
    new_assignee_logins=None,
    target_milestone_number=None
):
    """
    Update an existing issue in a GitHub repository.

    This function updates an existing issue within a specified GitHub repository.
    It allows modification of the issue's title, body, state (open or closed),
    associated labels, assigned users, and milestone. The title and body can
    be cleared by passing `None`. Labels and assignees are replaced if new lists
    are provided; an empty list clears them.
    The `updated_at` timestamp is always modified on a successful call.

    Args:
        repository_account_owner (str): The account owner of the repository. Case-insensitive.
        repository_to_update_in (str): The name of the repository. Case-insensitive.
        issue_to_modify_id (int): The number that identifies the issue. Must be positive.
        updated_issue_title (Optional[str]): The new title for the issue. If `None` (default or explicit),
            the title is cleared (set to `None`).
        revised_issue_body (Optional[str]): The new contents of the issue. If `None` (default or explicit),
            the body is cleared (set to `None`).
        new_issue_state (Optional[str]): The new state ("open" or "closed"). If `None` (default),
            the state is not changed.
        replacement_label_list (Optional[List[str]]): List of label names to apply. Replaces existing labels.
            - If `None` (default): Labels are not changed.
            - If `[]` (empty list): All labels are removed.
            - If list of strings: These become the new labels. Each name must exist.
            Requires push access.
        new_assignee_logins (Optional[List[str]]): List of assignee logins. Replaces existing assignees.
            The first login becomes the primary assignee.
            - If `None` (default): Assignees are not changed.
            - If `[]` (empty list): All assignees are removed.
            - If list of logins: These become the new assignees. Each login must exist.
            Requires push access.
        target_milestone_number (Optional[int]): The number of the milestone to assign.
            - If `None` (default or explicitly passed as `None`): Removes the current milestone.
            - If an integer: Assigns to this milestone. Must exist.
            Requires push access for any change to the milestone (setting or removing).

    Returns:
        Dict[str, Any]: Details of the updated issue. Contains:
            id (int): Unique ID of the issue.
            node_id (str): GraphQL node ID.
            number (int): Issue number within the repository.
            title (Optional[str]): Title of the issue.
            user (Dict[str, Any]): Creator of the issue.
                login (str): Username.
                id (int): User ID.
                node_id (str): User's GraphQL node ID.
                type (str): User type (e.g., "User").
                site_admin (bool): Whether the user is a site administrator.
            labels (List[Dict[str, Any]]): Associated labels. Each label:
                id (int): Label ID.
                node_id (str): Label's GraphQL node ID.
                name (str): Label name.
                color (str): Label color (hex code).
                description (Optional[str]): Label description.
                default (bool): Whether it's a default label.
            state (str): Current state ("open" or "closed").
            locked (bool): Whether the issue is locked.
            assignee (Optional[Dict[str, Any]]): Primary assignee (if any). Same structure as `user` fields.
            assignees (List[Dict[str, Any]]): All assigned users. Each with same structure as `user` fields.
            milestone (Optional[Dict[str, Any]]): Associated milestone. If present:
                id (int): Milestone ID.
                node_id (str): Milestone's GraphQL node ID.
                number (int): Milestone number.
                title (str): Milestone title.
                description (Optional[str]): Milestone description.
                creator (Dict[str, Any]): User who created the milestone. Same structure as `user` fields.
                open_issues (int): Count of open issues in this milestone.
                closed_issues (int): Count of closed issues in this milestone.
                state (str): Milestone state ("open" or "closed").
                created_at (str): ISO 8601 timestamp of creation.
                updated_at (str): ISO 8601 timestamp of last update.
                due_on (Optional[str]): ISO 8601 timestamp of due date.
                closed_at (Optional[str]): ISO 8601 timestamp of closure.
            comments (int): Number of comments.
            created_at (str): ISO 8601 timestamp of issue creation.
            updated_at (str): ISO 8601 timestamp of issue last update.
            closed_at (Optional[str]): ISO 8601 timestamp of issue closure (if closed).
            body (Optional[str]): Content of the issue.
            author_association (str): Relationship of issue creator to repository (e.g., "OWNER", "CONTRIBUTOR").

    Raises:
        NotFoundError: If repository or issue is not found.
        ForbiddenError: If user lacks permission to update.
        ValidationError: If input parameters are invalid.
    """
    from github.issues import update_issue
    return update_issue(
        owner=repository_account_owner,
        repo=repository_to_update_in,
        issue_number=issue_to_modify_id,
        title=updated_issue_title,
        body=revised_issue_body,
        state=new_issue_state,
        labels=replacement_label_list,
        assignees=new_assignee_logins,
        milestone=target_milestone_number
    )


def find_issues_and_prs(
    search_query_string,
    results_sort_field=None,
    results_sort_direction='desc',
    current_page_of_results=1,
    page_size_limit=30
):
    """
    Search for issues and pull requests.

    Finds issues and pull requests by searching against a query string.
    The query can contain any combination of search keywords and qualifiers.

    Supported qualifiers:
    - `is:issue` or `is:pr`: Filters for either issues or pull requests.
    - `repo:owner/repository`: Restricts the search to a specific repository.
    - `author:username`: Finds items created by a specific user.
    - `assignee:username`: Finds items assigned to a specific user.
    - `label:"label name"`: Filters by a specific label. Use quotes for labels with spaces.
    - `state:open` or `state:closed`: Filters by the state.
    - `in:title,body`: Searches for keywords in the title, body, or both.

    Args:
        search_query_string (str): The search query string, including any qualifiers.
        results_sort_field (Optional[str]): The field to sort by. Can be 'created', 'updated', or 'comments'.
            Defaults to `None` (best-match).
        results_sort_direction (str): The direction to sort. Can be 'asc' or 'desc'. Defaults to 'desc'.
        current_page_of_results (int): Page number of the results to fetch. Defaults to 1.
        page_size_limit (int): The number of results per page (max 100). Defaults to 30.

    Returns:
        Dict[str, Any]: A dictionary containing the search results, with the following keys:
            - total_count (int): The total number of issues found.
            - incomplete_results (bool): Indicates if the search timed out. Always False in this simulation.
            - items (List[Dict[str, Any]]): A list of issue objects matching the search criteria.
              Each issue object contains:
                - id (int): Unique identifier for the issue.
                - node_id (str): Global identifier for the node.
                - number (int): The number of the issue within its repository.
                - title (str): The title of the issue.
                - user (Dict[str, Any]): Details of the user who created the issue.
                    - login (str): The username of the creator.
                    - id (int): The unique identifier for the creator.
                - labels (List[Dict[str, Any]]): A list of labels associated with the issue.
                    - name (str): The name of the label.
                    - color (str): The hexadecimal color code of the label.
                - state (str): The current state of the issue (e.g., 'open', 'closed').
                - assignee (Optional[Dict[str, Any]]): Details of the user assigned to the issue.
                    - login (str): The username of the assignee.
                    - id (int): The unique identifier for the assignee.
                - comments (int): The number of comments on the issue.
                - created_at (str): The timestamp (ISO 8601 format) of when the issue was created.
                - updated_at (str): The timestamp (ISO 8601 format) of when the issue was last updated.
                - score (float): The search relevance score for the issue.

    Raises:
        custom_errors.InvalidInputError: If the search search_query_string is missing or invalid,
            or if pagination parameters are incorrect.
    """
    from github.issues import search_issues
    return search_issues(
        query=search_query_string,
        sort=results_sort_field,
        order=results_sort_direction,
        page=current_page_of_results,
        per_page=page_size_limit
    )
