# This file is automatically generated by the MutationBuilder

def fetch_pull_request_data(pr_repository_owner, pr_repository_name, pull_request_id_number):
    """
    Get details of a specific pull request.
    This function gets details of a specific pull request. It uses the provided
    owner, repository name, and pull request number to identify and retrieve
    the comprehensive details of the pull request.
    Args:
        pr_repository_owner (str): The account owner of the repository.
        pr_repository_name (str): The name of the repository.
        pull_request_id_number (int): The number that identifies the pull request.
    Returns:
        Dict[str, Any]: A dictionary containing the details of the pull request. Fields include:
            id (int): The unique ID of the PR.
            node_id (str): The global node ID of the PR.
            number (int): The PR number within the repository.
            title (str): The title of the PR.
            user (Dict[str, Any]): The user who created the PR. Contains fields:
                login (str): Username.
                id (int): User ID.
                node_id (str): Global node ID for the user.
                type (str): Type of user (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            labels (List[Dict[str, Any]]): A list of labels associated with the PR. Each label object in the list contains fields:
                id (int): Label ID.
                node_id (str): Global node ID for the label.
                name (str): The name of the label.
                color (str): The color of the label (hex code).
                description (Optional[str]): A short description of the label.
                default (bool): Whether this is a default label.
            state (str): The state of the PR (e.g., 'open', 'closed', 'merged').
            locked (bool): Whether the PR is locked.
            assignee (Optional[Dict[str, Any]]): The user assigned to the PR. If present, contains fields:
                login (str): Username.
                id (int): User ID.
                node_id (str): Global node ID for the user.
                type (str): Type of user (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            assignees (List[Dict[str, Any]]): A list of users assigned to the PR. Each user object in the list contains fields:
                login (str): Username.
                id (int): User ID.
                node_id (str): Global node ID for the user.
                type (str): Type of user (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            milestone (Optional[Dict[str, Any]]): The milestone associated with the PR. If present, contains fields:
                id (int): Milestone ID.
                node_id (str): Global node ID for the milestone.
                number (int): The number of the milestone.
                title (str): The title of the milestone.
                description (Optional[str]): A description of the milestone.
                creator (Dict[str, Any]): The user who created the milestone. Contains fields:
                    login (str): Username.
                    id (int): User ID.
                    node_id (str): Global node ID for the user.
                    type (str): Type of user (e.g., 'User').
                    site_admin (bool): Whether the user is a site administrator.
                open_issues (int): The number of open issues in this milestone.
                closed_issues (int): The number of closed issues in this milestone.
                state (str): The state of the milestone (e.g., 'open', 'closed').
                created_at (str): ISO 8601 timestamp of when the milestone was created.
                updated_at (str): ISO 8601 timestamp of when the milestone was last updated.
                due_on (Optional[str]): ISO 8601 timestamp of the milestone's due date.
                closed_at (Optional[str]): ISO 8601 timestamp of when the milestone was closed.
            created_at (str): ISO 8601 timestamp of when the PR was created.
            updated_at (str): ISO 8601 timestamp of when the PR was last updated.
            closed_at (Optional[str]): ISO 8601 timestamp of when the PR was closed.
            merged_at (Optional[str]): ISO 8601 timestamp of when the PR was merged.
            body (Optional[str]): The content of the PR.
            author_association (str): The relationship of the PR author to the repository (e.g., 'OWNER', 'MEMBER', 'COLLABORATOR', 'CONTRIBUTOR', 'FIRST_TIMER', 'FIRST_TIME_CONTRIBUTOR', 'MANNEQUIN', 'NONE').
            draft (bool): Whether the PR is a draft.
            merged (bool): Whether the PR has been merged.
            mergeable (Optional[bool]): Whether the PR can be merged.
            rebaseable (Optional[bool]): Whether the PR can be rebased.
            mergeable_state (str): The state of mergeability (e.g., 'clean', 'dirty', 'unknown', 'blocked', 'behind', 'unstable').
            merged_by (Optional[Dict[str, Any]]): The user who merged the PR. If present, contains fields:
                login (str): Username.
                id (int): User ID.
                node_id (str): Global node ID for the user.
                type (str): Type of user (e.g., 'User').
                site_admin (bool): Whether the user is a site administrator.
            comments (int): Number of issue-style comments on the PR.
            review_comments (int): Number of review comments on the PR.
            commits (int): Number of commits in the PR.
            additions (int): Number of added lines.
            deletions (int): Number of deleted lines.
            changed_files (int): Number of files changed.
            head (Dict[str, Any]): Details of the head branch. Contains fields:
                label (str): A human-readable label for the branch (e.g., 'octocat:new-topic').
                ref (str): Branch name.
                sha (str): Commit SHA of the head of the branch.
                user (Dict[str, Any]): The user who owns the repository of the head branch. Contains fields:
                    login (str): Username.
                    id (int): User ID.
                    node_id (str): Global node ID for the user.
                    type (str): Type of user (e.g., 'User').
                    site_admin (bool): Whether the user is a site administrator.
                repo (Dict[str, Any]): The repository of the head branch. Contains fields:
                    id (int): Repository ID.
                    node_id (str): Global node ID for the repository.
                    name (str): The name of the repository.
                    full_name (str): The full name of the repository (owner/name).
                    private (bool): Whether the repository is private.
                    owner (Dict[str, Any]): The owner of the repository. Contains fields:
                        login (str): Username.
                        id (int): User ID.
                        node_id (str): Global node ID for the user.
                        type (str): Type of user (e.g., 'User').
                        site_admin (bool): Whether the user is a site administrator.
                    description (Optional[str]): A description of the repository.
                    fork (bool): Whether the repository is a fork.
                    created_at (str): ISO 8601 timestamp of when the repository was created.
                    updated_at (str): ISO 8601 timestamp of when the repository was last updated.
                    pushed_at (str): ISO 8601 timestamp of the last push.
                    size (int): The size of the repository in kilobytes.
                    stargazers_count (int): Number of stargazers.
                    watchers_count (int): Number of watchers.
                    language (Optional[str]): The primary language of the repository.
                    has_issues (bool): Whether issues are enabled.
                    has_projects (bool): Whether projects are enabled.
                    has_downloads (bool): Whether downloads are enabled.
                    has_wiki (bool): Whether the wiki is enabled.
                    has_pages (bool): Whether GitHub Pages are enabled.
                    forks_count (int): Number of forks.
                    archived (bool): Whether the repository is archived.
                    disabled (bool): Whether the repository is disabled.
                    open_issues_count (int): Number of open issues.
                    license (Optional[Dict[str, Any]]): License information. If present, contains fields:
                        key (str): License key (e.g., 'mit').
                        name (str): License name (e.g., 'MIT License').
                        spdx_id (str): SPDX identifier for the license.
                    allow_forking (bool): Whether forking is allowed.
                    is_template (bool): Whether this repository is a template repository.
                    web_commit_signoff_required (bool): Whether web commit signoff is required.
                    topics (List[str]): A list of topics associated with the repository.
                    visibility (str): Visibility of the repository (e.g., 'public', 'private', 'internal').
                    forks (int): Number of forks (alias for forks_count).
                    open_issues (int): Number of open issues (alias for open_issues_count).
                    watchers (int): Number of watchers (alias for watchers_count).
                    default_branch (str): The default branch of the repository.
            base (Dict[str, Any]): Details of the base branch. Contains fields:
                label (str): A human-readable label for the branch (e.g., 'octocat:main').
                ref (str): Branch name.
                sha (str): Commit SHA of the head of the base branch.
                user (Dict[str, Any]): The user who owns the repository of the base branch. Contains fields:
                    login (str): Username.
                    id (int): User ID.
                    node_id (str): Global node ID for the user.
                    type (str): Type of user (e.g., 'User').
                    site_admin (bool): Whether the user is a site administrator.
                repo (Dict[str, Any]): The repository of the base branch. Contains fields:
                    id (int): Repository ID.
                    node_id (str): Global node ID for the repository.
                    name (str): The name of the repository.
                    full_name (str): The full name of the repository (owner/name).
                    private (bool): Whether the repository is private.
                    owner (Dict[str, Any]): The owner of the repository. Contains fields:
                        login (str): Username.
                        id (int): User ID.
                        node_id (str): Global node ID for the user.
                        type (str): Type of user (e.g., 'User').
                        site_admin (bool): Whether the user is a site administrator.
                    description (Optional[str]): A description of the repository.
                    fork (bool): Whether the repository is a fork.
                    created_at (str): ISO 8601 timestamp of when the repository was created.
                    updated_at (str): ISO 8601 timestamp of when the repository was last updated.
                    pushed_at (str): ISO 8601 timestamp of the last push.
                    size (int): The size of the repository in kilobytes.
                    stargazers_count (int): Number of stargazers.
                    watchers_count (int): Number of watchers.
                    language (Optional[str]): The primary language of the repository.
                    has_issues (bool): Whether issues are enabled.
                    has_projects (bool): Whether projects are enabled.
                    has_downloads (bool): Whether downloads are enabled.
                    has_wiki (bool): Whether the wiki is enabled.
                    has_pages (bool): Whether GitHub Pages are enabled.
                    forks_count (int): Number of forks.
                    archived (bool): Whether the repository is archived.
                    disabled (bool): Whether the repository is disabled.
                    open_issues_count (int): Number of open issues.
                    license (Optional[Dict[str, Any]]): License information. If present, contains fields:
                        key (str): License key (e.g., 'mit').
                        name (str): License name (e.g., 'MIT License').
                        spdx_id (str): SPDX identifier for the license.
                    allow_forking (bool): Whether forking is allowed.
                    is_template (bool): Whether this repository is a template repository.
                    web_commit_signoff_required (bool): Whether web commit signoff is required.
                    topics (List[str]): A list of topics associated with the repository.
                    visibility (str): Visibility of the repository (e.g., 'public', 'private', 'internal').
                    forks (int): Number of forks (alias for forks_count).
                    open_issues (int): Number of open issues (alias for open_issues_count).
                    watchers (int): Number of watchers (alias for watchers_count).
                    default_branch (str): The default branch of the repository.
    Raises:
        ValueError: If any of the input parameters are invalid.
        NotFoundError: If the repository or pull request does not exist.
    """
    from github.pull_requests import get_pull_request
    return get_pull_request(
        owner=pr_repository_owner,
        repo=pr_repository_name,
        pull_number=pull_request_id_number
    )


def query_repository_pull_requests(
    target_owner_login,
    source_repository_identifier,
    pull_request_state_filter='open',
    pull_request_sort_key='created',
    sort_flow_direction='desc',
    page_result_limit=30,
    page_index_to_fetch=1
):
    """
    List and filter repository pull requests.

    This function lists and filters pull requests for a specified repository.
    It allows querying for pull requests based on their state (open, closed, or all).
    Results can be sorted by various criteria such as creation date,
    update date, popularity (number of comments), or by identifying long-running
    pull requests. The direction of sorting (ascending or descending) can also be
    specified. Pagination options are available to control the number of results
    per page and to fetch specific pages of results, facilitating the handling of
    large datasets.

    Args:
        target_owner_login (str): The account owner of the repository. The name is not case sensitive.
        source_repository_identifier (str): The name of the repository without the .git extension. The name is not case sensitive.
        pull_request_state_filter (Optional[str]): Filter by state. Possible values: 'open', 'closed', 'all'. Default: 'open'.
        pull_request_sort_key (Optional[str]): What to sort results by. 'popularity' will sort by the number of comments. 'long-running' will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. Possible values: 'created', 'updated', 'popularity', 'long-running'. Default: 'created'.
        sort_flow_direction (Optional[str]): The direction of the sort. Possible values: 'asc', 'desc'. Default: 'desc' when 'sort' is 'created' or not specified, otherwise 'asc'.
        page_result_limit (Optional[int]): The number of results per page (max 100). For more information, see "Using pagination in the REST API." Default: 30.
        page_index_to_fetch (Optional[int]): The page number of the results to fetch. For more information, see "Using pagination in the REST API." Default: 1.

    Returns:
        List[Dict[str, Any]]: A list of pull request dictionaries matching the filter criteria.

    Raises:
        NotFoundError: If the repository does not exist.
        ValidationError: If filter parameters are invalid.
        RateLimitError: If the API rate limit is exceeded.
    """
    from github.pull_requests import list_pull_requests
    return list_pull_requests(
        owner=target_owner_login,
        repo=source_repository_identifier,
        state=pull_request_state_filter,
        sort=pull_request_sort_key,
        direction=sort_flow_direction,
        per_page=page_result_limit,
        page=page_index_to_fetch
    )


def execute_pull_request_merge(
    repo_owner_for_merge,
    repo_name_for_merge,
    pr_number_to_merge,
    merge_commit_subject=None,
    merge_commit_description=None,
    merge_strategy_type=None
):
    """
    Merge a pull request.


    Args:
        repo_owner_for_merge (str): The owner of the repository.
        repo_name_for_merge (str): The name of the repository.
        pr_number_to_merge (int): The number identifying the pull request.
        merge_commit_subject (Optional[str]): An optional title for the merge commit.
        merge_commit_description (Optional[str]): An optional message for the merge commit.
        merge_strategy_type (Optional[str]): An optional merge method to use.

    Returns:
        Dict[str, Any]: A dictionary confirming the merge status. It contains the following fields:
            sha (str): The SHA (Secure Hash Algorithm) identifier of the merge commit.
            merged (bool): Indicates if the merge was successfully completed (True) or not (False).
            message (str): A human-readable message describing the outcome of the merge attempt (e.g., 'Pull Request successfully merged', 'Merge conflict').

    Raises:
        NotFoundError: If the repository or pull request does not exist.
        MethodNotAllowedError: If the pull request is not mergeable (e.g., conflicts, checks pending).
        ConflictError: If the merge cannot be performed due to conflicts or if the head commit of the pull request has changed since the merge was initiated.
        ValidationError: If the merge method is invalid, or other input parameters are incorrect or missing.
        ForbiddenError: If the authenticated user does not have permission to merge the pull request.
    """
    from github.pull_requests import merge_pull_request
    return merge_pull_request(
        owner=repo_owner_for_merge,
        repo=repo_name_for_merge,
        pull_number=pr_number_to_merge,
        commit_title=merge_commit_subject,
        commit_message=merge_commit_description,
        merge_method=merge_strategy_type
    )


def list_changed_files_in_pr(pull_request_repo_owner, pull_request_repo_name, target_pull_request_num):
    """
    Get the list of files changed in a pull request.

    This function retrieves the list of files changed in a specified pull request.
    The pull request is identified using the `owner` of the repository,
    the `repo` name, and the `pull_number`.

    Args:
        pull_request_repo_owner (str): The owner of the repository.
        pull_request_repo_name (str): The name of the repository.
        target_pull_request_num (int): The number of the pull request.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary details a file
            changed in the pull request. Each dictionary has the following keys:
            sha (str): The SHA (Secure Hash Algorithm) identifier of the file blob.
            filename (str): The relative path of the file within the repository.
            status (str): The status of the file ('added', 'modified', 'removed', or 'renamed').
            additions (int): The number of lines added to the file.
            deletions (int): The number of lines deleted from the file.
            changes (int): The total number of lines changed in the file (sum of additions and deletions).
            patch (Optional[str]): The patch data for the file. May be null for binary files or when not available.
            previous_filename (str): The previous filename (only present for renamed files).

    Raises:
        ValidationError: If the input parameters are invalid.
        NotFoundError: If the repository or pull request does not exist.
    """
    from github.pull_requests import get_pull_request_files
    return get_pull_request_files(
        owner=pull_request_repo_owner,
        repo=pull_request_repo_name,
        pull_number=target_pull_request_num
    )


def check_pr_combined_status(repository_holder_login, repository_context_name, pull_request_identifier):
    """
    Get the combined status of all status checks for a pull request.

    This function retrieves the combined status of all status checks for a specified pull request.
    The pull request is identified by its owner, repository, and pull number.
    The returned status includes an overall state, commit SHA, total check count,
    and a detailed list of individual status checks.

    Args:
        repository_holder_login (str): The owner of the repository.
        repository_context_name (str): The name of the repository.
        pull_request_identifier (int): The number identifying the pull request.

    Returns:
        Dict[str, Any]: A dictionary representing the combined status of a commit. It contains the following keys:
            state (str): The overall status (e.g., 'pending', 'success', 'failure', 'error').
            sha (str): The SHA of the commit for which status is reported.
            total_count (int): The total number of status checks.
            statuses (List[Dict[str, Any]]): A list of individual status check objects. Each dictionary
                in this list details a specific status check and contains the following fields:
                state (str): State of the specific check (e.g., 'pending', 'success', 'failure', 'error').
                context (str): The name or identifier of the status check service (e.g., 'ci/travis-ci', 'lint').
                description (Optional[str]): A short human-readable description of the status provided by the service.

    Raises:
        NotFoundError: If the repository or pull request (or its head commit) does not exist.
        ValidationError: If any of the input parameter is Invalid.
    """
    from github.pull_requests import get_pull_request_status
    return get_pull_request_status(
        owner=repository_holder_login,
        repo=repository_context_name,
        pull_number=pull_request_identifier
    )


def sync_pr_branch_with_base(
    repo_owner_for_sync,
    repo_name_for_sync,
    pr_number_to_update,
    current_head_commit_sha=None
):
    """
    Update a pull request branch with the latest changes from the base branch.

    This function updates a pull request branch by incorporating the most recent changes
    from its base branch. If an `expected_head_sha` is provided, the update
    will only proceed if this SHA matches the current head of the pull request's
    branch, ensuring the update is based on the expected state.

    Args:
        repo_owner_for_sync (str): The account owner of the repository. The name is not case sensitive.
        repo_name_for_sync (str): The name of the repository without the .git extension. The name
            is not case sensitive.
        pr_number_to_update (int): The number that identifies the pull request.
        current_head_commit_sha (Optional[str]): The expected SHA of the pull request's HEAD
            ref. This is the most recent commit on the pull request's branch. If the
            expected SHA does not match the pull request's HEAD, you will receive a
            422 Unprocessable Entity status. You can use the "List commits" endpoint
            to find the most recent commit SHA. Default: SHA of the pull request's
            current HEAD ref.

    Returns:
        Dict[str, str]: A dictionary confirming the branch update request. It contains
            the following key:
          message (str): A human-readable message indicating the status of the update
              request, such as confirmation of acceptance or scheduling (e.g.,
              'Accepted', 'Update scheduled').

    Raises:
        NotFoundError: If the repository or pull request does not exist.
        ConflictError: If the branch update cannot be performed (e.g., merge conflicts,
            or if `current_head_commit_sha` does not match the current head of the pull
            request's branch).
        ForbiddenError: If the user does not have sufficient permissions to update the
            pull request branch, or if branch protection rules prevent the update.
    """
    from github.pull_requests import update_pull_request_branch
    return update_pull_request_branch(
        owner=repo_owner_for_sync,
        repo=repo_name_for_sync,
        pull_number=pr_number_to_update,
        expected_head_sha=current_head_commit_sha
    )


def fetch_pr_review_discussions(review_repo_owner_id, review_repo_name_id, pull_req_number_for_comments):
    """
    Get the review comments on a pull request.

    Retrieves all review comments associated with a specific pull request.
    The pull request is identified by the repository owner's identifier,
    the repository name, and the pull request number.

    Args:
        review_repo_owner_id (str): The login name or identifier of the repository owner.
        review_repo_name_id (str): The name of the repository.
        pull_req_number_for_comments (int): The number identifying the pull request.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary represents a review comment
        for the pull request. Each dictionary contains the following keys:
            id (int): The unique ID of the comment.
            node_id (str): The global node ID of the comment.
            pull_request_review_id (int): The ID of the review this comment belongs to.
            user (Dict[str, Any]): The user who created the comment. It includes the following keys:
                login (str): The login name of the user.
                id (int): The unique ID of the user.
            body (str): The text of the comment.
            commit_id (str): The SHA of the commit the comment is on.
            path (str): The relative path of the file commented on.
            position (Optional[int]): The line index in the diff to which the comment applies.
            original_position (int): The original line index in the diff.
            diff_hunk (str): The diff hunk where the comment appears.
            created_at (str): ISO 8601 timestamp of when the comment was created.
            updated_at (str): ISO 8601 timestamp of when the comment was last updated.
            author_association (str): The relationship of the comment author to the repository.
            start_line (Optional[int]): The first line of the range of the comment (if multi-line).
            original_start_line (Optional[int]): Original first line of the range.
            start_side (Optional[str]): The side of the diff to which the first line of the comment
                                      applies (e.g., 'LEFT' or 'RIGHT').
            line (Optional[int]): The line of the blob to which the comment applies.
            original_line (Optional[int]): Original line of the blob.
            side (Optional[str]): The side of the diff to which the comment applies (e.g., 'LEFT' or 'RIGHT').

    Raises:
        NotFoundError: If the repository or pull request does not exist.
        ValidationError: If any of the input parameters is invalid.
    """
    from github.pull_requests import get_pull_request_comments
    return get_pull_request_comments(
        owner=review_repo_owner_id,
        repo=review_repo_name_id,
        pull_number=pull_req_number_for_comments
    )


def retrieve_all_pr_reviews(account_owner_name, repository_name_context, pull_request_number_id):
    """
    Lists all reviews for a specified pull request.

    Lists all reviews for a specified pull request. The list of reviews returns in chronological order.

    Args:
        account_owner_name (str): The account owner of the repository. The name is not case sensitive.
        repository_name_context (str): The name of the repository without the .git extension. The name is not case sensitive.
        pull_request_number_id (int): The number that identifies the pull request. Must be a positive integer.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary represents a review
            for the pull request. Each dictionary has the following keys:
            id (int): The unique ID of the review.
            node_id (str): The global node ID of the review.
            user (Dict[str, Any]): A dictionary representing the user who submitted the review. This
                dictionary contains:
                login (str): The username of the user.
                id (int): The unique ID of the user.
            body (Optional[str]): The body of the review.
            state (str): The state of the review (e.g., 'APPROVED', 'CHANGES_REQUESTED',
                         'COMMENTED', 'DISMISSED', 'PENDING').
            commit_id (str): The SHA of the commit that the review pertains to.
            submitted_at (Optional[str]): ISO 8601 timestamp of when the review was submitted.
            author_association (str): The relationship of the reviewer to the repository.

    Raises:
        TypeError: If 'account_owner_name' or 'repository_name_context' is not a string, or if 'pull_request_number_id' is not an integer.
        ValueError: If 'pull_request_number_id' is not a positive integer.
        NotFoundError: If the repository or pull request does not exist.
    """
    from github.pull_requests import get_pull_request_reviews
    return get_pull_request_reviews(
        owner=account_owner_name,
        repo=repository_name_context,
        pull_number=pull_request_number_id
    )


def submit_pull_request_feedback(
    pr_review_repo_owner,
    pr_review_repo_name,
    subject_pull_request_id,
    target_commit_hash=None,
    review_summary_text=None,
    review_action_type=None,
    inline_review_remarks=None
):
    """
    Creates a review on a specified pull request.

    This function simulates the GitHub API endpoint for creating a pull request review.
    It allows for submitting reviews with different states (APPROVE, REQUEST_CHANGES, COMMENT, PENDING),
    an optional body text, and an array of inline draft review comments.

    The creation of a review with states other than PENDING typically triggers notifications.
    Pull request reviews created in the PENDING state (when the `event` parameter is
    left blank or not provided) are not considered "submitted" and therefore do not
    include the `submitted_at` property in the response until they are explicitly submitted
    via a separate action (not part of this function).

    Args:
        pr_review_repo_owner (str): The account owner of the repository. The name is not case sensitive.
        pr_review_repo_name (str): The name of the repository without the .git extension. The name is not case sensitive.
        subject_pull_request_id (int): The number that identifies the pull request within the repository.
        target_commit_hash (Optional[str]): The SHA of the commit to which the review applies.
            If not provided, the review applies to the latest commit on the pull request's head branch.
            Specifying an older commit SHA might result in comments being outdated if subsequent
            commits modify the commented lines.
        review_summary_text (Optional[str]): The main body text of the pull request review.
            This field is **required** if the `event` is 'REQUEST_CHANGES' or 'COMMENT'.
            It can be an empty string.
        review_action_type (Optional[str]): The review action to perform. Valid values are:
            - 'APPROVE': Submits an approving review.
            - 'REQUEST_CHANGES': Submits a review requesting changes. Requires `body`.
            - 'COMMENT': Submits a general comment review. Requires `body`.
            If `event` is `None` or an empty string, the review is created in a 'PENDING' state
            and is not considered submitted.
        inline_review_remarks (Optional[List[Dict[str, Any]]]): An array of draft review comment objects to be
            included with this review. Each comment dictionary in the list should conform to the
            following structure and validations (see `PullRequestReviewCommentInput` model):
            - path (str): Required. The relative path to the file being commented on.
            - body (str): Required. The text of the review comment.
            - position (Optional[int]): The line index in the diff hunk to which the comment applies.
              This is mutually exclusive with `line` for specifying a single-line comment location;
              one of them must be provided if not a multi-line comment on the file.
              Must be >= 1.
            - line (Optional[int]): The line number in the file's diff that the comment applies to.
              For a multi-line comment, this is the last line of the range.
              This is mutually exclusive with `position` for single-line comments. Must be >= 1.
            - side (Optional[str]): The side of the diff to which the comment applies.
              Can be 'LEFT' or 'RIGHT'. Defaults to 'RIGHT' if `line` is provided. Only used for line-level
              comments.
            - start_line (Optional[int]): For a multi-line comment, the first line of the
              comment's range. Requires `line` to also be provided. Must be <= `line` and >= 1.
            - start_side (Optional[str]): For a multi-line comment, the side of the diff
              for the `start_line`. Can be 'LEFT' or 'RIGHT'. Defaults to the value of `side`
              if `start_line` is provided and `start_side` is not. Requires `start_line`.

    Returns:
        Dict[str, Any]: A dictionary representing the created pull request review, structured
            according to the `PullRequestReview` Pydantic model. Key fields include:
            - id (int): The unique identifier for the review.
            - node_id (str): The GraphQL node ID for the review.
            - pull_request_id (int): The ID of the pull request to which this review belongs.
            - user (Dict[str, Any]): A simplified representation of the user who created the review,
              containing:
                - id (int): The user's unique ID.
                - login (str): The user's login name.
            - body (Optional[str]): The body text of the review. Will be present, even if None.
            - state (str): The state of the review (e.g., "APPROVED", "PENDING", "COMMENTED",
              "CHANGES_REQUESTED").
            - commit_id (str): The SHA of the commit to which this review applies.
            - submitted_at (Optional[str]): An ISO 8601 timestamp string (e.g., "2023-01-15T10:30:00Z")
              indicating when the review was submitted. This field is `None` if the review's
              `state` is 'PENDING'.
            - author_association (str): Indicates the relationship of the review author to the
              repository (e.g., "OWNER", "MEMBER", "COLLABORATOR", "CONTRIBUTOR", "NONE").

    Raises:
        TypeError: If `pr_review_repo_owner`, `pr_review_repo_name` are not strings, or `subject_pull_request_id` is not an integer.
        NotFoundError: If the specified repository, pull request, or (if provided) `target_commit_hash`
            cannot be found. Also raised for non-positive `subject_pull_request_id`.
        ValidationError: If input parameters are invalid (e.g., unknown `review_action_type` type, missing
            `review_summary_text` for certain events, malformed `inline_review_remarks` array or objects within it,
            invalid `target_commit_hash` format).
        ForbiddenError: If the authenticated user does not have permission to create a review
            on the pull request (e.g., lacks write access and is not the PR author).
        UnprocessableEntityError: If the review cannot be created due to a business logic
            violation, such as attempting to review a locked pull request or referencing
            a commit that doesn't exist in the repository.
    """
    from github.pull_requests import create_pull_request_review
    return create_pull_request_review(
        owner=pr_review_repo_owner,
        repo=pr_review_repo_name,
        pull_number=subject_pull_request_id,
        commit_id=target_commit_hash,
        body=review_summary_text,
        event=review_action_type,
        comments=inline_review_remarks
    )


def initiate_pull_request(
    target_repo_owner,
    target_repo_name,
    pull_request_subject,
    source_branch_name,
    destination_branch_name,
    pull_request_description=None,
    is_draft_pr=False,
    allow_maintainer_edits=False
):
    """
    Create a new pull request.

    This function creates a new pull request in the specified repository.
    It requires the owner of the repository, the repository name, the title for the pull request,
    the head branch (the branch with the proposed changes), and the base branch (the branch
    into which the changes will be merged). Optional parameters include the body of the
    pull request, whether it should be a draft, and whether maintainers can modify it.
    The function returns details of the created pull request.

    Args:
        target_repo_owner (str): The account owner of the repository. The name is not case sensitive.
        target_repo_name (str): The name of the repository without the .git extension. The name is not case sensitive.
        pull_request_subject (str): The title of the new pull request.
        source_branch_name (str): The name of the branch where your changes are implemented.
        destination_branch_name (str): The name of the branch you want the changes pulled into.
        pull_request_description (Optional[str]): The contents of the pull request. Defaults to None.
        is_draft_pr (Optional[bool]): Indicates whether the pull request is a draft. Defaults to False.
        allow_maintainer_edits (Optional[bool]): Indicates whether maintainers can modify the pull request.
            Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly created pull request with the following keys:
            id (int): The unique identifier of the pull request.
            number (int): The pull request number, unique within the repository.
            title (str): The title of the pull request.
            body (Optional[str]): The description or body content of the pull request.
            state (str): The current state of the pull request (e.g., 'open').
            draft (bool): Indicates if the pull request is a draft.
            maintainer_can_modify (bool): Indicates if maintainers are allowed to modify the pull request.
            user (Dict[str, Any]): Details of the user who created the pull request.
                login (str): The username of the creator.
                id (int): The unique identifier for the user.
                type (str): The type of the account (e.g., 'User', 'Bot').
            head (Dict[str, Any]): Details of the head branch (the branch with the proposed changes).
                label (str): The user-friendly label for the head branch (e.g., 'owner:feature-branch').
                ref (str): The reference of the head branch (e.g., 'feature-branch').
                sha (str): The commit SHA of the head branch.
                repo (Dict[str, Any]): Details of the repository containing the head branch.
                    id (int): Repository ID.
                    name (str): Repository name.
                    full_name (str): Full repository name (e.g., 'owner/repo-name').
                    private (bool): Whether the repository is private.
                    owner (Dict[str, Any]): Repository owner details.
                        login (str): The username of the owner.
                        id (int): The unique identifier for the owner.
                        type (str): The type of the account (e.g., 'User', 'Organization').
            base (Dict[str, Any]): Details of the base branch (the branch the changes will be merged into).
                label (str): The user-friendly label for the base branch (e.g., 'owner:main').
                ref (str): The reference of the base branch (e.g., 'main').
                sha (str): The commit SHA of the base branch.
                repo (Dict[str, Any]): Details of the repository containing the base branch.
                    id (int): Repository ID.
                    name (str): Repository name.
                    full_name (str): Full repository name (e.g., 'owner/repo-name').
                    private (bool): Whether the repository is private.
                    owner (Dict[str, Any]): Repository owner details.
                        login (str): The username of the owner.
                        id (int): The unique identifier for the owner.
                        type (str): The type of the account (e.g., 'User', 'Organization').
            created_at (str): Timestamp indicating when the pull request was created (ISO 8601 format).
            updated_at (str): Timestamp indicating when the pull request was last updated (ISO 8601 format).

    Raises:
        NotFoundError: If the repository, source_branch_name branch, or destination_branch_name branch does not exist.
        ValidationError: If required fields (pull_request_subject, source_branch_name, destination_branch_name) are missing or invalid.
        UnprocessableEntityError: If a PR already exists for these branches or if there are no commits
            between source_branch_name and destination_branch_name.
        ForbiddenError: If the user does not have permission to create pull requests.
        pydantic.ValidationError: If the data is not valid while saving it to DB
    """
    from github.pull_requests import create_pull_request
    return create_pull_request(
        owner=target_repo_owner,
        repo=target_repo_name,
        title=pull_request_subject,
        head=source_branch_name,
        base=destination_branch_name,
        body=pull_request_description,
        draft=is_draft_pr,
        maintainer_can_modify=allow_maintainer_edits
    )


def post_pr_line_comment(
    repository_account_login,
    repository_slug,
    pull_request_index,
    comment_text_content,
    comment_commit_sha=None,
    file_path_for_comment=None,
    diff_line_number=None,
    diff_side_to_comment=None,
    multi_line_comment_start=None,
    multi_line_start_side=None,
    comment_target_type=None,
    parent_comment_id=None
):
    """
    Add a review comment to a pull request or reply to an existing comment.

    This function adds a review comment to a specified pull request or replies to an
    existing comment. Depending on whether it's a new comment or a reply,
    different parameters are required. For new comments, context like commit SHA,
    file path, and line number may be necessary. For replies, the ID of the
    parent comment is used to inherit context.

    Args:
        repository_account_login (str): The account owner of the repository. The name is not case sensitive.
        repository_slug (str): The name of the repository. The name is not case sensitive.
        pull_request_index (int): The number that identifies the pull request.
        comment_text_content (str): The text of the review comment.
        comment_commit_sha (Optional[str]): The SHA of the commit to comment on. Required if
            `in_reply_to` is not provided and the comment is not a reply.
        file_path_for_comment (Optional[str]): The relative path to the file that necessitates a comment.
            Required if `in_reply_to` is not provided and the comment is not a reply.
        diff_line_number (Optional[int]): The line of the blob in the pull request diff that the
            comment applies to. For a multi-line comment, this is the last line
            of the range. Required for new line-level comments (when `subject_type`
            is 'line' or inferred as such).
        diff_side_to_comment (Optional[str]): The side of the diff to comment on. Valid values are
            'LEFT' (for the old version) or 'RIGHT' (for the new version).
            Defaults to 'RIGHT' if `line` is provided. Only used for line-level
            comments.
        multi_line_comment_start (Optional[int]): For a multi-line comment, the first line of the
            range. `line` should be the end line. Only used for line-level comments.
        multi_line_start_side (Optional[str]): The side of the diff for `start_line`. Valid values
            are 'LEFT' or 'RIGHT'. Defaults to the `side` parameter if not
            provided. Only used for multi-line comments.
        comment_target_type (Optional[str]): The type of subject for the comment. Valid values
            are 'line' or 'file'. If 'file', line-specific parameters (`line`,
            `side`, `start_line`, `start_side`) are ignored. If 'line', they are
            used. If not provided, the API may infer based on other parameters
            (e.g., presence of `line`).
        parent_comment_id (Optional[int]): The ID of an existing comment to which this
            comment is a reply. If provided, parameters like `commit_id`, `path`,
            `line`, `side`, `start_line`, `start_side`, and `subject_type` are
            typically ignored as the reply inherits context from the parent comment.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly created review comment.
            This dictionary has the following keys:
            id (int): The unique identifier for the comment.
            pull_request_review_id (Optional[int]): The ID of the review this comment
                is part of. Null if it's a standalone comment not submitted as
                part of a pull request review.
            user (Dict[str, Any]): Object containing details about the commenter. This
                dictionary includes the following keys:
                login (str): The username of the commenter.
                id (int): The unique identifier for the user.
                type (str): The type of account (e.g., 'User', 'Bot').
            body (str): The text content of the comment.
            commit_id (str): The SHA of the commit to which the comment pertains.
            path (str): The relative path of the file commented on.
            position (Optional[int]): The line index in the diff to which the comment
                pertains (lines down in the diff hunk). Null if the comment is on
                a file or if position is not applicable.
            created_at (str): The ISO 8601 timestamp for when the comment was created.
            updated_at (str): The ISO 8601 timestamp for when the comment was last
                updated.

    Raises:
        NotFoundError: If the specified `repository_account_login`/`repository_slug`, `pull_request_index`, `comment_commit_sha`
            (if provided for a new comment), or `parent_comment_id` (if provided for
            a reply) does not exist.
        ValidationError: If required input parameters are missing or invalid. For
            example, `comment_text_content` is always required. If `parent_comment_id` is not
            provided (i.e., creating a new comment, not a reply), then
            `comment_commit_sha` and `file_path_for_comment` are typically required. For new diff_line_number-level
            comments, `diff_line_number` is also required. Parameters may also be invalid
            if their types are incorrect or values are out of supported
            range/format.
        UnprocessableEntityError: If the comment cannot be posted (e.g., the `diff_line_number`
            is not part of the diff, or the `file_path_for_comment` is not part of the diff for
            the given `comment_commit_sha`).
        ForbiddenError: If the authenticated user does not have permission to create
            a comment on the pull request.
    """
    from github.pull_requests import add_pull_request_review_comment
    return add_pull_request_review_comment(
        owner=repository_account_login,
        repo=repository_slug,
        pull_number=pull_request_index,
        body=comment_text_content,
        commit_id=comment_commit_sha,
        path=file_path_for_comment,
        line=diff_line_number,
        side=diff_side_to_comment,
        start_line=multi_line_comment_start,
        start_side=multi_line_start_side,
        subject_type=comment_target_type,
        in_reply_to=parent_comment_id
    )


def modify_pull_request_attributes(
    repo_owner_to_update,
    repo_name_to_update,
    pr_id_to_modify,
    new_pull_request_title=None,
    updated_pull_request_body=None,
    new_pull_request_status=None,
    new_base_branch_name=None,
    can_maintainer_edit_flag=False
):
    """
    Update an existing pull request in a GitHub repository.

    Updates an existing pull request in a GitHub repository. This function allows
    for updating attributes of a pull request such as its title, body, state
    (e.g., 'open' or 'closed'), the base branch it targets, and whether
    maintainers are permitted to make modifications to it.

    Args:
        repo_owner_to_update (str): The owner of the repository.
        repo_name_to_update (str): The name of the repository.
        pr_id_to_modify (int): The number identifying the pull request.
        new_pull_request_title (Optional[str]): The new title for the pull request. Defaults to None.
        updated_pull_request_body (Optional[str]): The new body content for the pull request. Defaults to None.
        new_pull_request_status (Optional[str]): The new state of the pull request (e.g., 'open' or 'closed').
            Defaults to None.
        new_base_branch_name (Optional[str]): The name of the branch to which the changes are proposed
            (the base branch). Defaults to None.
        can_maintainer_edit_flag (Optional[bool]): Specifies whether maintainers can modify
            the pull request. Defaults to False. (Note: If explicitly passed as None,
            this field will not be updated. If not passed, it defaults to False,
            implying an update to False if current value is different.)


    Returns:
        Dict[str, Any]: A dictionary containing the details of the updated pull request.
            Key fields that can be directly updated via this method include title,
            body, state, base, and maintainer_can_modify. The dictionary
            structure includes the following fields (among others; this list is
            representative and omits URL-based fields):
            id (int): Unique identifier for the pull request.
            number (int): Pull request number within the repository.
            state (str): The state of the pull request (e.g., 'open', 'closed').
            title (str): The title of the pull request.
            body (Optional[str]): The body text of the pull request.
            user (Dict[str, Any]): The user who created the pull request. Contains fields such as:
                login (str): Username of the user.
                id (int): Unique identifier for the user.
                type (str): Type of the user (e.g., 'User', 'Bot').
            created_at (str): ISO 8601 timestamp for when the pull request was created.
            updated_at (str): ISO 8601 timestamp for when the pull request was last updated.
            closed_at (Optional[str]): ISO 8601 timestamp for when the pull request was closed.
            merged_at (Optional[str]): ISO 8601 timestamp for when the pull request was merged.
            base (Dict[str, Any]): Details of the base branch. Contains fields such as:
                label (str): The label of the base branch (e.g., 'owner:main').
                ref (str): The reference of the base branch (e.g., 'main').
                sha (str): The SHA of the commit at the tip of the base branch.
                repo (Dict[str, Any]): The repository of the base branch. Contains fields such as:
                    id (int): Unique identifier of the repository.
                    name (str): Name of the repository.
                    full_name (str): Full name of the repository (e.g., 'owner/repo').
                    private (bool): Whether the repository is private.
            head (Dict[str, Any]): Details of the head branch. Contains fields such as:
                label (str): The label of the head branch.
                ref (str): The reference of the head branch.
                sha (str): The SHA of the commit at the tip of the head branch.
                repo (Dict[str, Any]): The repository of the head branch (may be null if fork was deleted). Contains fields such as:
                    id (int): Unique identifier of the repository.
                    name (str): Name of the repository.
                    full_name (str): Full name of the repository.
                    private (bool): Whether the repository is private.
            draft (bool): Whether the pull request is a draft.
            merged (bool): Whether the pull request has been merged.
            mergeable (Optional[bool]): Whether the pull request is mergeable.
            mergeable_state (str): State of the mergeability check (e.g., 'clean', 'dirty', 'unknown').
            merged_by (Optional[Dict[str, Any]]): The user who merged the pull request. Contains fields such as:
                login (str): Username of the user.
                id (int): Unique identifier for the user.
                type (str): Type of the user.
            comments_count (int): Number of issue comments on the pull request.
            review_comments_count (int): Number of commit comments on the pull request.
            maintainer_can_modify (bool): Indicates whether maintainers can modify the pull request.
            commits_count (int): Number of commits in the pull request.
            additions_count (int): Number of lines added in the pull request.
            deletions_count (int): Number of lines deleted in the pull request.
            changed_files_count (int): Number of files changed in the pull request.

    Raises:
        NotFoundError: If the repository or pull request does not exist.
        ValidationError: If input parameters for update are invalid (e.g., invalid
            new_pull_request_status value, such as attempting to set a new_pull_request_status other than 'open'
            or 'closed').
        UnprocessableEntityError: If the update cannot be applied (e.g., trying to
            change new_base_branch_name to an invalid branch, or a merge conflict prevents
            the update).
        ForbiddenError: If the user does not have permission to update the pull request.
    """
    from github.pull_requests import update_pull_request
    return update_pull_request(
        owner=repo_owner_to_update,
        repo=repo_name_to_update,
        pull_number=pr_id_to_modify,
        title=new_pull_request_title,
        body=updated_pull_request_body,
        state=new_pull_request_status,
        base=new_base_branch_name,
        maintainer_can_modify=can_maintainer_edit_flag
    )
