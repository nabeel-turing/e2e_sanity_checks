# This file is automatically generated by the MutationBuilder

def commit_file_change(
    repo_owner_login,
    repository_to_modify,
    target_file_path,
    commit_summary_message,
    file_content_base64,
    target_branch_for_commit=None,
    previous_file_blob_sha=None
):
    """
    Create or update a single file in a repository.

    This function creates a new file or updates an existing file at a specified
    path within a given repository. It requires the repository owner's identifier,
    the repository name, the file's path, a commit message, and the file's
    content. Optional parameters include the branch name and, for file updates,
    the SHA of the existing file blob to ensure the correct file version is modified.

    Args:
        repo_owner_login (str): The account owner of the repository (e.g., username or organization name).
        repository_to_modify (str): The name of the repository.
        target_file_path (str): The path to the file in the repository.
        commit_summary_message (str): The commit message.
        file_content_base64 (str): The new file content, base64 encoded.
        target_branch_for_commit (Optional[str]): The branch name. If not provided, the operation
            typically targets the repository's default branch. Defaults to None.
        previous_file_blob_sha (Optional[str]): The blob SHA of the file being replaced. This is
            required if updating an existing file and is used to prevent conflicts
            by ensuring the file has not changed since the SHA was obtained.
            Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing details about the commit and the file.
            It has the following top-level keys:
            content (Dict[str, Any]): Details of the created/updated file. This dictionary contains:
                name (str): The name of the file.
                path (str): The path of the file in the repository.
                sha (str): The SHA (blob) of the file content.
                size (int): The size of the file in bytes.
                type (str): The type of the object, typically 'file'.
            commit (Dict[str, Any]): Details of the commit that created/updated the file. This dictionary contains:
                sha (str): The SHA of the commit.
                message (str): The commit message.
                author (Dict[str, Any]): The author of the commit. This dictionary contains:
                    name (str): The name of the author.
                    email (str): The email address of the author.
                    date (str): The timestamp of the authorship, in ISO 8601 format (e.g., 'YYYY-MM-DDTHH:MM:SSZ').
                committer (Dict[str, Any]): The committer of the commit. This dictionary contains:
                    name (str): The name of the committer.
                    email (str): The email address of the committer.
                    date (str): The timestamp of the commit, in ISO 8601 format (e.g., 'YYYY-MM-DDTHH:MM:SSZ').

    Raises:
        NotFoundError: If the repository or target_branch_for_commit (if specified) does not exist.
        ValidationError: If required fields (target_file_path, commit_summary_message, file_content_base64) are missing
            or if file_content_base64 is not base64 encoded.
        ConflictError: If updating a file and the provided 'previous_file_blob_sha' does not match
            the latest file SHA (blob SHA).
        ForbiddenError: If the user does not have write access to the repository
            (e.g., repository is archived or target_branch_for_commit is protected).
    """
    from github.repositories import create_or_update_file
    return create_or_update_file(
        owner=repo_owner_login,
        repo=repository_to_modify,
        path=target_file_path,
        message=commit_summary_message,
        content=file_content_base64,
        branch=target_branch_for_commit,
        sha=previous_file_blob_sha
    )


def enumerate_repo_branches(
    repository_owner_id,
    repository_name_for_branches,
    results_page_index=None,
    results_per_page_limit=None
):
    """
    List branches in a GitHub repository.

    Lists branches in a GitHub repository, sorted by name. This function allows for pagination
    of the results.

    Args:
        repository_owner_id (str): The owner of the repository. Must not be empty.
        repository_name_for_branches (str): The name of the repository. Must not be empty.
        results_page_index (Optional[int]): The page number of the results to fetch. Defaults to 1.
                             Must be a positive integer if provided.
        results_per_page_limit (Optional[int]): The number of results per page. Defaults to 30.
                                 Must be a positive integer if provided.

    Returns:
        List[Dict[str, Any]]: A list of branch objects from the repository, sorted by name.
            Each dictionary in the list represents a branch object and has the following fields:
            name (str): The name of the branch.
            commit (Dict[str, Any]): A dictionary representing the latest commit on this
                branch. This dictionary contains at least the following field:
                sha (str): The SHA identifier of the commit.
            protected (bool): A boolean indicating if the branch is protected.

    Raises:
        NotFoundError: If the repository does not exist.
        ValueError: If 'repository_owner_id' or 'repository_name_for_branches' are empty, or if 'results_page_index' or 'results_per_page_limit'
                    are provided and are not positive integers.
    """
    from github.repositories import list_branches
    return list_branches(
        owner=repository_owner_id,
        repo=repository_name_for_branches,
        page=results_page_index,
        per_page=results_per_page_limit
    )


def commit_multiple_files(
    repo_owner_for_push,
    repo_name_for_push,
    destination_branch_for_push,
    file_changes_list,
    batch_commit_message
):
    """
    Push multiple files in a single commit.

    This function pushes multiple files in a single commit. It uses the provided
    repository owner's username, repository name, target branch name, a list of
    files (each defined by its path and content), and a commit message to
    perform the operation.

    Args:
        repo_owner_for_push (str): The username of the account that owns the repository.
        repo_name_for_push (str): The name of the repository.
        destination_branch_for_push (str): The name of the branch to push the files to.
        file_changes_list (List[Dict[str, str]]): A list of dictionaries, where each dictionary
            represents a file to be pushed. Each dictionary must contain the
            following keys:
            path (str): The full path of the file within the repository.
            content (str): The content of the file.
        batch_commit_message (str): The commit message for the push operation.

    Returns:
        Dict[str, Any]: Details of the successful push operation, including commit
            information. It contains the following fields:
            commit_sha (str): The SHA of the new commit created.
            tree_sha (str): The SHA of the new tree object representing the repository state.
            message (str): A confirmation message regarding the push.

    Raises:
        NotFoundError: If the repository or destination_branch_for_push does not exist, or if the
            repo_owner_for_push (acting as committer) is not found in the Users table.
        ValidationError: If 'file_changes_list' list is empty, file structure is invalid
            (e.g., missing 'path' or 'content' in a file dictionary),
            or batch_commit_message is missing.
        ConflictError: If the push cannot be fast-forwarded or if there are
            conflicts with recent changes on the destination_branch_for_push.
    """
    from github.repositories import push_files
    return push_files(
        owner=repo_owner_for_push,
        repo=repo_name_for_push,
        branch=destination_branch_for_push,
        files=file_changes_list,
        message=batch_commit_message
    )


def initialize_new_repository(
    new_repository_name,
    repository_summary_text=None,
    is_private_repository=False,
    should_auto_initialize=False
):
    """
    Create a new GitHub repository.

    Creates a new GitHub repository. The user specifies the name for the
    repository and can optionally provide a description, set its visibility,
    and choose to auto-initialize it.

    Default Repository Settings:
        The following features are enabled by default for new repositories:
        - has_issues: True (Issues are enabled)
        - has_projects: True (Projects are enabled)
        - has_downloads: True (Downloads are enabled)
        - has_wiki: True (Wiki is enabled)
        - has_pages: False (GitHub Pages are disabled)
        - allow_forking: True (Repository can be forked)
        - archived: False (Repository is not archived)
        - disabled: False (Repository is not disabled)
        - is_template: False (Repository is not a template)
        - web_commit_signoff_required: False (Commit signoff not required)
        - visibility: "public" or "private" (based on private parameter)

    Args:
        new_repository_name (str): The name for the new repository.
        repository_summary_text (Optional[str]): An optional description for the repository. Defaults to None.
        is_private_repository (Optional[bool]): If True, the repository will be private. Defaults to False.
        should_auto_initialize (Optional[bool]): If True, creates an initial commit, potentially with a README. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly created repository with the following keys:
            id (int): Unique identifier for the repository.
            node_id (str): A globally unique identifier for the repository node.
            name (str): The name of the repository.
            full_name (str): The full name of the repository, including the owner (e.g., 'owner/repo').
            private (bool): Indicates whether the repository is private.
            owner (Dict[str, Any]): Details of the repository owner. Key non-URL fields include:
            login (str): the owner's username.
            id (int): the owner's unique ID.
            type (str): e.g., 'User' or 'Organization'.
            description (str): A short description of the repository.
            fork (bool): Indicates if the repository is a fork. This will be false for newly created repositories.
            created_at (str): The ISO 8601 timestamp for when the repository was created.
            updated_at (str): The ISO 8601 timestamp for when the repository was last updated.
            pushed_at (str): The ISO 8601 timestamp for when the repository was last pushed to.
            default_branch (str): The name of the default branch (e.g., 'main'). This is typically present if 'auto_init' was true during creation.

    Raises:
        ValidationError: If required inputs are missing (e.g., repository new_repository_name) or if inputs are malformed (e.g., invalid characters in the new_repository_name).
        UnprocessableEntityError: If the repository cannot be created due to semantic reasons, such as the repository new_repository_name already existing for the user/organization, or other server-side validation failures not related to input format.
        ForbiddenError: If the authenticated user does not have the necessary permissions to create a repository (e.g., insufficient rights for an organization, or account restriction).
    """
    from github.repositories import create_repository
    return create_repository(
        name=new_repository_name,
        description=repository_summary_text,
        private=is_private_repository,
        auto_init=should_auto_initialize
    )


def fetch_repository_path_content(
    repository_owner_handle,
    target_repo_slug,
    content_path_in_repo,
    git_reference_pointer=None
):
    """
    Get contents of a file or directory.

    This function retrieves the content of a specified file or directory within a
    repository. The nature of the returned data depends on whether the specified
    path points to a file or a directory.

    Args:
        repository_owner_handle (str): The owner of the repository.
        target_repo_slug (str): The name of the repository.
        content_path_in_repo (str): The path to the file or directory within the repository.
        git_reference_pointer (Optional[str]): An optional Git reference (e.g., a branch name,
            tag, or commit SHA) specifying the version of the content to retrieve.
            Defaults to None.

    Returns:
        Union[Dict[str, Any], List[Dict[str, Any]]]: The content of the specified path.
        If the path points to a file, this will be a dictionary containing file
        details with the following keys:
            type (str): The type of content, typically 'file'.
            encoding (str): The encoding of the file content, e.g., 'base64'.
            size (int): The size of the file in bytes.
            name (str): The name of the file.
            path (str): The path of the file within the repository.
            content (str): The content of the file, typically base64 encoded.
            sha (str): The Git blob SHA of the file.
        If the path points to a directory, this will be a list of dictionaries.
        Each dictionary in the list represents a file or directory entry and
        contains the following keys:
            type (str): The type of item, either 'file' or 'dir'.
            size (int): The size of the item in bytes. For directories, this may
                        represent the size of the tree object or be 0.
            name (str): The name of the file or directory.
            path (str): The path of the file or directory within the repository.
            sha (str): The Git blob SHA (for files) or tree SHA (for directories).

    Raises:
        ValidationError: If repository_owner_handle, target_repo_slug, or content_path_in_repo are empty.
        NotFoundError: If the repository, branch/git_reference_pointer, or content_path_in_repo does not exist.
    """
    from github.repositories import get_file_contents
    return get_file_contents(
        owner=repository_owner_handle,
        repo=target_repo_slug,
        path=content_path_in_repo,
        ref=git_reference_pointer
    )


def create_repository_fork(source_repository_owner, source_repository_name, target_organization_name=None):
    """
    Fork a repository.

    Creates a fork for the authenticated user. The user should have 
    `Administration` repository permissions (write) to set up and configure the new repository (users fork) under the users account.
    `Contents` repository permissions (read) to read the `Contents` of the original repository to get all the data.

    Args:
        source_repository_owner (str): The account owner of the repository. The name is not case sensitive.
        source_repository_name (str): The name of the repository without the `.git` extension. The name is not case sensitive.
        target_organization_name (Optional[str]): Optional parameter to specify the organization name if forking into an organization.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly forked repository. The structure includes the following fields:
            id (int): The unique identifier for the repository.
            name (str): The name of the repository.
            full_name (str): The full name of the repository, in the format 'owner_login/repository_name'.
            owner (Dict[str, Any]): An object describing the owner of the forked repository. It includes the following sub-fields:
                login (str): The login name of the owner.
                id (int): The unique identifier of the owner.
                type (str): The type of owner (e.g., 'User', 'Organization').
            private (bool): True if the repository is private, false otherwise.
            description (Optional[str]): A short description of the repository.
            fork (bool): True, indicating that this repository is a fork.

    Raises:
        TypeError: If any of the input arguments do not match their expected types.
        RuntimeError: If the authenticated user cannot be resolved from the DB.
        NotFoundError: If the source repository does not exist or target target_organization_name does not exist.
        UnprocessableEntityError: If the repository has already been forked by the user/target_organization_name, or other fork restrictions apply.
        ForbiddenError: If the user does not have permission to read the source repository, 
                        if forking is disabled on the source, or if the user cannot create 
                        repositories in the target target_organization_name.
    """
    from github.repositories import fork_repository
    return fork_repository(
        owner=source_repository_owner,
        repo=source_repository_name,
        organization=target_organization_name
    )


def establish_new_branch(
    repo_owner_for_branching,
    repo_name_for_branching,
    new_branch_name_to_create,
    source_commit_sha_for_branch
):
    """
    Create a new branch.

        This function establishes a new branch of development within the repository.

    Args:
        repo_owner_for_branching (str): The account owner of the repository.
        repo_name_for_branching (str): The name of the repository.
        new_branch_name_to_create (str): The name of the new branch to create.
        source_commit_sha_for_branch (str): The SHA of the commit from which the new branch will be created.

    Returns:
        Dict[str, Any]: A dictionary containing branch creation details with the following keys:
            ref (str): The full Git ref (e.g., 'refs/heads/new-branch').
            node_id (str): The global node ID for the ref.
            object (Dict[str, Any]): Details of the Git object this ref points to. This dictionary contains the following keys:
                type (str): The type of the Git object, usually 'commit'.
                sha (str): The SHA of the commit the new branch points to.

    Raises:
        NotFoundError: If the repository or the source 'source_commit_sha_for_branch' does not exist.
        UnprocessableEntityError: If the new_branch_name_to_create already exists, if the 'source_commit_sha_for_branch' is not a valid commit SHA,
                                  or if the new_branch_name_to_create name is invalid.
    """
    from github.repositories import create_branch
    return create_branch(
        owner=repo_owner_for_branching,
        repo=repo_name_for_branching,
        branch=new_branch_name_to_create,
        sha=source_commit_sha_for_branch
    )


def get_commit_history(
    repo_owner_for_commits,
    repo_name_for_commits,
    branch_or_commit_ref=None,
    filter_commits_by_path=None,
    commit_list_page=None,
    commits_per_page=None
):
    """
    Get a list of commits of a branch in a repository.

    This function gets a list of commits of a branch in a repository.
    Args:
        repo_owner_for_commits (str): The owner of the repository.
        repo_name_for_commits (str): The name of the repository.
        branch_or_commit_ref (Optional[str]): The commit SHA, branch name, or tag name to list commits from.
        filter_commits_by_path (Optional[str]): Only commits containing this file path will be returned.
        commit_list_page (Optional[int]): Page number of the results to fetch for pagination.
        commits_per_page (Optional[int]): The number of results per page for pagination.

    Returns:
        List[Dict[str, Any]]: A list of commit objects. Each dictionary in this list
            represents a commit and has the following keys:
            sha (str): The SHA (Secure Hash Algorithm) identifier of the commit.
            node_id (str): The global node ID of the commit.
            commit (Dict[str, Any]): Core commit information. Contains the following fields:
                author (Dict[str, Any]): Details of the original author of the commit
                    (not necessarily the committer). Contains the following fields:
                    name (str): The name of the git author.
                    email (str): The email of the git author.
                    date (str): The timestamp (ISO 8601 format) when this commit
                        was authored.
                committer (Dict[str, Any]): Details of the user who committed the
                    changes. Contains the following fields:
                    name (str): The name of the git committer.
                    email (str): The email of the git committer.
                    date (str): The timestamp (ISO 8601 format) when this commit
                        was committed.
                message (str): The commit message.
                tree (Dict[str, Any]): Details of the tree object associated with this
                    commit. Contains the following fields:
                    sha (str): The SHA of the tree object.
                comment_count (int): The number of comments on the commit.
            author (Optional[Dict[str, Any]]): The GitHub user account that authored the
                commit, if linked to a GitHub account. This can be null if the
                author is not a GitHub user or if the commit author information is
                forged. Contains the following fields:
                login (str): The GitHub username of the author.
                id (int): The unique GitHub ID of the author.
                node_id (str): The global node ID of the author.
                gravatar_id (str): The Gravatar ID for the user (note: this is an
                    ID, not a URL).
                type (str): The type of GitHub account (e.g., 'User', 'Bot').
                site_admin (bool): Indicates if the user is a site administrator
                    on GitHub.
            committer (Optional[Dict[str, Any]]): The GitHub user account that committed
                the changes, if linked to a GitHub account. This can be null if the
                committer is not a GitHub user or if the committer information is
                forged. Contains the following fields:
                login (str): The GitHub username of the committer.
                id (int): The unique GitHub ID of the committer.
                node_id (str): The global node ID of the committer.
                gravatar_id (str): The Gravatar ID for the user (note: this is an
                    ID, not a URL).
                type (str): The type of GitHub account (e.g., 'User', 'Bot').
                site_admin (bool): Indicates if the user is a site administrator
                    on GitHub.
            parents (List[Dict[str, Any]]): A list of parent commit objects. Each parent
                object (a dictionary) in this list contains:
                sha (str): The SHA of a parent commit.
                node_id (str): The global node ID of the parent commit.

    Raises:
        NotFoundError: If the repository doesn't exist, specified SHA/branch/tag isn't found, 
                       filter_commits_by_path doesn't exist, default branch is not configured, or the starting
                       commit SHA cannot be determined.
    """
    from github.repositories import list_commits
    return list_commits(
        owner=repo_owner_for_commits,
        repo=repo_name_for_commits,
        sha=branch_or_commit_ref,
        path=filter_commits_by_path,
        page=commit_list_page,
        per_page=commits_per_page
    )


def retrieve_single_commit_data(
    commit_repo_owner,
    commit_repo_name,
    commit_hash_to_fetch,
    file_list_page_number=None,
    files_per_page_limit=None
):
    """
    Get details for a commit from a repository.

    This function gets details for a commit from a repository. The `page` and
    `per_page` parameters can be used to paginate the list of files affected
    by the commit, which is part of the returned details.

    Args:
        commit_repo_owner (str): The owner of the repository.
        commit_repo_name (str): The name of the repository.
        commit_hash_to_fetch (str): The SHA of the commit to retrieve.
        file_list_page_number (Optional[int]): Page number for paginating the list of files affected by the commit. Defaults to None.
        files_per_page_limit (Optional[int]): The number of files to return per page when paginating. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing details for a specific commit. It includes the following keys:
            sha (str): The SHA of the commit.
            node_id (str): The global node ID of the commit.
            commit (Dict[str, Any]): The raw commit details, containing:
                author (Dict[str, Any]): Details of the original author of the commit:
                    name (str): Author's name.
                    email (str): Author's email address.
                    date (str): Timestamp of when the commit was authored (ISO 8601 format).
                committer (Dict[str, Any]): Details of the person who committed the changes:
                    name (str): Committer's name.
                    email (str): Committer's email address.
                    date (str): Timestamp of when the commit was made (ISO 8601 format).
                message (str): The commit message.
                tree (Dict[str, Any]): Information about the commit's tree:
                    sha (str): The SHA of the tree object.
            author (Optional[Dict[str, Any]]): The GitHub user who authored the commit (if linked to a GitHub account).
                If present, contains:
                    login (str): The GitHub login of the author.
                    id (int): The GitHub ID of the author.
            committer (Optional[Dict[str, Any]]): The GitHub user who committed the changes (if linked to a GitHub account).
                If present, contains:
                    login (str): The GitHub login of the committer.
                    id (int): The GitHub ID of the committer.
            parents (List[Dict[str, Any]]): A list of parent commit objects. Each object in the list contains:
                sha (str): The SHA of the parent commit.
            stats (Optional[Dict[str, Any]]): Commit statistics. If present, contains:
                total (int): Total number of changes (additions + deletions).
                additions (int): Number of lines added.
                deletions (int): Number of lines deleted.
            files (Optional[List[Dict[str, Any]]]): A list of files affected by this commit. This list may be
                paginated if 'page' and 'per_page' parameters are used in the request. Each file
                object in the list contains:
                sha (str): Blob SHA of the file.
                filename (str): Name and path of the file.
                status (str): Status of the file in this commit (e.g., 'added', 'modified', 'removed', 'renamed').
                additions (int): Number of additions made to this file.
                deletions (int): Number of deletions made from this file.
                changes (int): Total number of changes in this file.
                patch (Optional[str]): The patch data (diff) for the file, detailing the changes.

    Raises:
        NotFoundError: If the repository or commit SHA does not exist.
    """
    from github.repositories import get_commit
    return get_commit(
        owner=commit_repo_owner,
        repo=commit_repo_name,
        sha=commit_hash_to_fetch,
        page=file_list_page_number,
        per_page=files_per_page_limit
    )


def find_code_in_repositories(
    code_search_expression,
    code_search_sort_field='best match',
    code_search_sort_order='desc',
    search_results_page=1,
    search_results_per_page=30
):
    """
    Search for code within repositories.

    Searches for query terms inside of files. This method returns up to 100 results per page.
    The query can contain any combination of search keywords and qualifiers.

    Note: Due to the complexity of searching code, there are a few restrictions:
    - Only the default branch is considered. In most cases, this will be the master branch.
    - Only files smaller than 384 KB are searchable.
    - You must always include at least one search term when searching source code.
      For example, searching for language:go is not valid, while amazing language:go is.

    Args:
        code_search_expression (str): The search query string. Can contain any combination of search keywords and qualifiers.
            Examples:
            - `"addClass in:file language:js repo:jquery/jquery"`: Find files containing 'addClass' in the jquery/jquery repository
            - `"repo:octocat/Spoon-Knife css"`: Find instances of 'css' in the octocat/Spoon-Knife repository
            - `"shogun user:heroku language:ruby"`: Find 'shogun' in Ruby files from heroku's repositories
            - `"function size:>10000 language:python"`: Find Python files containing 'function' larger than 10 KB

            Supported qualifiers:
            - `in:file,path`: Search in file contents and/or file paths. If not specified, searches in both.
            - `language:LANGUAGE`: Filter by programming language (based on file extension).
                Supported languages: javascript (js), python (py), ruby (rb), go, java, c++ (cpp),
                typescript (ts), php, c# (cs), html, css, shell (sh), markdown (md).
            - `repo:owner/repository`: Restrict search to a specific repository.
            - `user:USERNAME`, `org:USERNAME`: Search within a user's or organization's repositories.
            - `size:n`: Filter by file size (in bytes). Can use `>`, `<`, `>=`, `<=`, and `..` ranges.
            - `path:PATH`: Filter by file path.
            - `extension:EXTENSION`: Filter by file extension.
            - `is:public`, `is:private`: Filter by repository visibility.
            - `fork:true`, `fork:only`: Include forked repositories in the search.
        code_search_sort_field (str): This field is closing down. Can only be 'indexed', which indicates how recently a file has been indexed.
            Default is 'best match'.
        code_search_sort_order (str): This field is closing down. The direction to sort. Can be 'asc' or 'desc'.
            Only used when 'sort' is specified. Default is 'desc'.
        search_results_page (int): Page number of the results to fetch. Default is 1.
        search_results_per_page (int): The number of results per page (max 100). Default is 30.

    Returns:
        Dict[str, Any]: A dictionary containing the search results with the following keys:
            total_count (int): The total number of matching files found.
            incomplete_results (bool): Indicates if the search timed out before finding all results.
            items (List[Dict[str, Any]]): A list of code search result items. Each item contains:
                name (str): The name of the file.
                path (str): The path of the file within the repository.
                sha (str): The SHA (blob) of the file.
                url (str): The API URL to get the file contents.
                git_url (str): The git blob URL.
                html_url (str): The URL to view the file in a web browser.
                repository (Dict[str, Any]): Details about the repository containing the file:
                    id (int): The repository ID.
                    node_id (str): The global node ID of the repository.
                    name (str): The repository name.
                    full_name (str): The full name of the repository (owner/repo).
                    owner (Dict[str, Any]): Details about the repository owner:
                        login (str): The owner's username.
                        id (int): The owner's ID.
                        node_id (str): The owner's global node ID.
                        type (str): The type of owner (User/Organization).
                        site_admin (bool): Whether the owner is a site admin.
                    private (bool): Whether the repository is private.
                    description (str): The repository description.
                    fork (bool): Whether the repository is a fork.
                score (float): The search relevance score.

    Raises:
        InvalidInputError: If the search code_search_expression is missing or invalid, or if pagination parameters are malformed, not positive integers, or out of acceptable range.
        RateLimitError: If the request exceeds the rate limit. Rate limits for search API:
            - Authenticated requests: 30 requests per minute
            - Unauthenticated requests: 10 requests per minute
    """
    from github.repositories import search_code
    return search_code(
        query=code_search_expression,
        sort=code_search_sort_field,
        order=code_search_sort_order,
        page=search_results_page,
        per_page=search_results_per_page
    )


def discover_repositories_by_query(
    repository_search_term,
    repo_search_sort_key=None,
    repo_search_sort_direction='desc',
    repository_page_number=1,
    repositories_per_page=30
):
    """
    Search for GitHub repositories.

    Find repositories via various criteria. This method returns up to 100 results per page.
    The query can contain any combination of search keywords and qualifiers to narrow down the results.

    When no sort is specified, results are sorted by best match.

    Args:
        repository_search_term (str): The search query string. Can contain any combination of search keywords and qualifiers.
            For example: `q=tetris+language:assembly+fork:true+stars:>=100`.
            Supported qualifiers:
            - `in:name,description`
            - `size:>=N`, `size:N..M`
            - `forks:N`, `stars:N`, `watchers:N` (with ranges)
            - `user:USERNAME`, `org:USERNAME`
            - `language:LANGUAGE`
            - `created:DATE`, `pushed:DATE`, `updated:DATE` (with ranges)
            - `is:public`, `is:private`, `is:archived`, `is:template`
            - `fork:true`, `fork:only`
        repo_search_sort_key (Optional[str]): The field to sort by. Can be `stars`, `forks`, `updated`. Defaults to `None`.
        repo_search_sort_direction (str): The direction to sort. Can be `asc` or `desc`. Defaults to `desc`.
        repository_page_number (int): Page number of the results to fetch. Defaults to 1.
        repositories_per_page (int): The number of results per page (max 100). Defaults to 30.

    Returns:
        Dict[str, Any]: A dictionary containing a `search_results` object with the repository search results.
            The `search_results` object has the following keys:
            - total_count (int): The total number of repositories matching the search query.
            - incomplete_results (bool): Indicates whether the search timed out before all results could be gathered.
            - items (List[Dict[str, Any]]): A list of repository objects. Each repository object has the following structure:
                - id (int): The unique identifier for the repository.
                - node_id (str): A global identifier for the repository.
                - name (str): The name of the repository.
                - full_name (str): The full name of the repository, in 'owner_login/repository_name' format.
                - private (bool): Indicates whether the repository is private.
                - owner (Dict[str, Any]): An object describing the owner of the repository, containing:
                    - login (str): The owner's username.
                    - id (int): The unique identifier for the owner.
                    - node_id (str): A global identifier for the owner.
                    - type (str): The type of owner (e.g., 'User', 'Organization').
                    - site_admin (bool): Indicates if the owner is a site administrator.
                - description (Optional[str]): A description of the repository. Null if not provided.
                - fork (bool): Indicates whether the repository is a fork of another repository.
                - created_at (str): The timestamp (ISO 8601 format) for when the repository was created.
                - updated_at (str): The timestamp (ISO 8601 format) for when the repository was last updated.
                - pushed_at (str): The timestamp (ISO 8601 format) for when the repository was last pushed to.
                - stargazers_count (int): The number of users who have starred the repository.
                - watchers_count (int): The number of users watching the repository.
                - forks_count (int): The number of times the repository has been forked.
                - open_issues_count (int): The number of open issues in the repository.
                - language (Optional[str]): The primary programming language of the repository. Null if not detected.
                - score (float): The relevance score assigned to the repository by the search algorithm.

    Raises:
        InvalidInputError: If the repository_search_term is invalid or pagination parameters are incorrect.
    """
    from github.repositories import search_repositories
    return search_repositories(
        query=repository_search_term,
        sort=repo_search_sort_key,
        order=repo_search_sort_direction,
        page=repository_page_number,
        per_page=repositories_per_page
    )
