# This file is automatically generated by the MutationBuilder

def fetch_current_user_profile():
    """
    Get details of the authenticated user.

    Gets details of the authenticated user.

    Returns:
        Dict[str, Any]: A dictionary containing the authenticated user's details with the following keys:
            login (str): The user's username.
            id (int): The unique ID of the user.
            node_id (str): The global node ID of the user.
            name (Optional[str]): The user's full name.
            email (Optional[str]): The user's publicly visible email address.
            company (Optional[str]): The user's company.
            location (Optional[str]): The user's location.
            bio (Optional[str]): The user's biography.
            public_repos (int): The number of public repositories.
            public_gists (int): The number of public gists.
            followers (int): The number of followers.
            following (int): The number of users the user is following.
            created_at (str): ISO 8601 timestamp for when the account was created.
            updated_at (str): ISO 8601 timestamp for when the account was last updated.
            type (str): The type of account, e.g., 'User' or 'Organization'.

    Raises:
        AuthenticationError: If the request is not authenticated or if the authenticated user cannot be found.
    """
    from github.users import get_me
    return get_me()


def find_github_users(
    user_search_query,
    user_sort_criteria=None,
    user_sort_order='desc',
    user_results_page_num=1,
    users_per_result_page=30
):
    """
    Search for GitHub users.

    Find users via various criteria. This method returns up to 100 results per page.
    The query can contain any combination of search keywords and qualifiers to narrow down the results.

    When no sort is specified, results are sorted by best match.

    Args:
        user_search_query (str): The search query string. Can contain any combination of search keywords and qualifiers.
            For example: `q=tom+repos:>42+followers:>1000`.
            Supported qualifiers:
            - `in:login,name,email`: Restricts search to specified fields.
            - `repos:n`: Filters by repository count. Can use `>`, `<`, `>=`, `<=`, and `..` ranges.
            - `followers:n`: Filters by follower count. Can use `>`, `<`, `>=`, `<=`, and `..` ranges.
            - `created:YYYY-MM-DD`: Filters by creation date. Can use `>`, `<`, `>=`, `<=`, and `..` ranges.
            - `location:LOCATION`: Filters by location in the user's profile.
            - `type:user|org`: Restricts search to users or organizations.
            - `language:LANGUAGE`: Filters by the predominant language in the user's repositories.
        user_sort_criteria (Optional[str]): The field to sort the search results by. Can be one of 'followers', 'repositories', 'joined'.
            Defaults to 'None' (best match).
        user_sort_order (str): The order of sorting ('asc' or 'desc'). Defaults to 'desc'.
        user_results_page_num (int): The page number for paginated results. Defaults to 1.
        users_per_result_page (int): The number of results to return per page (max 100). Defaults to 30.

    Returns:
        Dict[str, Any]: A dictionary containing user search results with the following keys:
            total_count (int): The total number of users found.
            incomplete_results (bool): Indicates if the search timed out before finding all results.
            items (List[Dict[str, Any]]): A list of user objects matching the search criteria. Each user object in the list has the following fields:
                login (str): The user's username.
                id (int): The unique ID of the user.
                node_id (str): The global node ID of the user.
                type (str): The type of account, e.g., 'User' or 'Organization'.
                score (float): The search score associated with the user.

    Raises:
        InvalidInputError: If the search query 'user_search_query' is missing or invalid, or if pagination parameters are incorrect.
        RateLimitError: If the API rate limit is exceeded.
    """
    from github.users import search_users
    return search_users(
        q=user_search_query,
        sort=user_sort_criteria,
        order=user_sort_order,
        page=user_results_page_num,
        per_page=users_per_result_page
    )
