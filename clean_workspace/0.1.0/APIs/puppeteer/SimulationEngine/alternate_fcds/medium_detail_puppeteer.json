[
  {
    "name": "click",
    "description": "Clicks an element on the current page, locating it via a CSS selector. It waits for the element to be visible and ensures it is clickable (not obscured, disabled, or hidden) for the operation to succeed.",
    "parameters": {
      "type": "object",
      "properties": {
        "selector": {
          "type": "string",
          "description": "A string representing the CSS selector for the element to be clicked. The selector must be a valid and non-empty CSS selector."
        }
      },
      "required": [
        "selector"
      ]
    }
  },
  {
    "name": "fill",
    "description": "Fills an input field by locating it with a CSS selector and entering the specified value. It waits for the target element to become visible and editable before proceeding. The operation requires the target to be an input field, textarea, or any other editable element.",
    "parameters": {
      "type": "object",
      "properties": {
        "selector": {
          "type": "string",
          "description": "A CSS selector string that identifies the target input element to fill."
        },
        "value": {
          "type": "string",
          "description": "The string value to enter into the target input field. This parameter must be a non-empty string."
        }
      },
      "required": [
        "selector",
        "value"
      ]
    }
  },
  {
    "name": "navigate",
    "description": "Opens a new browser context and navigates to the specified URL. It validates the URL format and initializes a browser session before loading the page.",
    "parameters": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to which the browser navigates. It must be a valid HTTP or HTTPS URL."
        },
        "launch_options": {
          "type": "object",
          "properties": {},
          "description": "A dictionary (`Dict[str, Any]`) containing configuration options for launching the browser. Common options include headless mode, viewport size, and user agent settings."
        },
        "allow_dangerous": {
          "type": "boolean",
          "description": "Specifies whether to allow navigation to potentially unsafe URLs. This boolean parameter defaults to `False` for security."
        }
      },
      "required": [
        "url"
      ]
    }
  },
  {
    "name": "screenshot",
    "description": "Captures a screenshot of the current page or a specific element, identified by a given name. If a CSS selector is provided, it screenshots the matching element; otherwise, it captures the entire page. Customize dimensions using the `width` and `height` parameters, which default to 800 and 600 pixels respectively.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A string that specifies the name for the screenshot. The name cannot be empty and must be a valid filename component."
        },
        "selector": {
          "type": "string",
          "description": "A CSS selector string used to specify a particular element on the page for the screenshot. If this parameter is omitted, the entire current page is captured."
        },
        "width": {
          "type": "integer",
          "description": "The width of the screenshot, measured in pixels. It must be a positive integer and defaults to 800."
        },
        "height": {
          "type": "integer",
          "description": "The height of the screenshot in pixels. It must be a positive integer and defaults to 600."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "select_option",
    "description": "Selects an option within a dropdown element by locating it using a CSS selector. This function waits for the target select element to be visible and confirms it is a `<select>` element with available options. The option is selected if its `value` attribute or text content matches the provided value.",
    "parameters": {
      "type": "object",
      "properties": {
        "selector": {
          "type": "string",
          "description": "A CSS selector used to locate the target `<select>` HTML element. This element must be a valid select dropdown for the operation to succeed."
        },
        "value": {
          "type": "string",
          "description": "Specifies the value or text content of the option to be selected. This can match either the option's `value` attribute or its visible text content."
        }
      },
      "required": [
        "selector",
        "value"
      ]
    }
  }
]