# This file is automatically generated by the MutationBuilder

def amend_products_in_unprocessed_order(
    unprocessed_order_ref,
    original_item_codes,
    replacement_item_codes,
    financial_account_for_price_difference
):
    """
    Modify items in a pending order to new items of the same product type.

    For a pending order, this function can only be called once. The agent needs
    to explain the exchange detail and ask for explicit user confirmation
    (yes/no) to proceed.

    Args:
        unprocessed_order_ref (str): The order id, such as '#W0000000'. Be careful there is a '#'
            symbol at the beginning of the order id.
        original_item_codes (List[str]): The item ids to be modified, each such as '1008292230'.
            There could be duplicate items in the list.
        replacement_item_codes (List[str]): The item ids to be modified for, each such as
            '1008292230'. There could be duplicate items in the list. Each new
            item id should match the item id in the same position and be of the
            same product.
        financial_account_for_price_difference (str): The payment method id to pay or receive refund for
            the item price difference, such as 'gift_card_0000000' or
            'credit_card_0000000'. These can be looked up from the user or
            order details.

    Returns:
        Dict[str, Any]: A dictionary representing the updated order with the following fields:
            - order_id (str): The ID of the order.
            - user_id (str): The ID of the user who placed the order.
            - address (Dict[str, str]): The shipping address for the order.
                - address1 (str): The first line of the address.
                - address2 (str): The second line of the address.
                - city (str): The city of the address.
                - country (str): The country of the address.
                - state (str): The state of the address.
                - zip (str): The zip code of the address.
            - items (List[Dict[str, Any]]): A list of items in the order.
                - name (str): The name of the item.
                - product_id (str): The ID of the product.
                - item_id (str): The ID of the item.
                - price (float): The price of the item.
                - options (Dict[str, str]): The options for the item.
            - fulfillments (List[Dict[str, List[str]]]): A list of fulfillments for the order.
                - tracking_id (List[str]): A list of tracking IDs for the fulfillment.
                - item_ids (List[str]): A list of item IDs in the fulfillment.
            - status (str): The status of the order.
            - payment_history (List[Dict[str, Any]]): A list of payment transactions for the order.
                - transaction_type (str): The type of transaction.
                - amount (float): The amount of the transaction.
                - payment_method_id (str): The ID of the payment method.

    Raises:
        OrderNotFoundError: If the order is not found.
        NonPendingOrderError: If the order is not pending.
        ItemNotFoundError: If an item to be modified is not found.
        ItemMismatchError: If the number of items to be modified does not match.
        ItemNotAvailableError: If the new item is not available.
        PaymentMethodNotFoundError: If the payment method is not found.
        InsufficientGiftCardBalanceError: If the gift card balance is insufficient.
        InvalidInputError: If the input is invalid.
    """
    from retail.modify_pending_order_items_tool import modify_pending_order_items
    return modify_pending_order_items(
        order_id=unprocessed_order_ref,
        item_ids=original_item_codes,
        new_item_ids=replacement_item_codes,
        payment_method_id=financial_account_for_price_difference
    )
