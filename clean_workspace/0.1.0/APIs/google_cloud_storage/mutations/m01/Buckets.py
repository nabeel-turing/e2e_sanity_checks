# This file is automatically generated by the MutationBuilder

def erase_storage_bucket(
    bucket_to_delete_name,
    require_metageneration_match=None,
    require_metageneration_mismatch=None
):
    """
    Deletes an empty bucket.

    Deletions are permanent unless soft delete is enabled on the bucket. This function
    checks for metageneration match conditions and ensures the bucket is empty before deletion.

    Args:
        bucket_to_delete_name (str): Name of the bucket to delete.
        require_metageneration_match (Optional[str]): If set, deletes only if the bucket's metageneration
            matches this value.
        require_metageneration_mismatch (Optional[str]): If set, deletes only if the bucket's metageneration
            does not match this value.

    Returns:
        Dict[str, Any]:
        - A `message` key indicating success with the following value
            - bucket deleted successfully

    Raises:
        TypeError: If 'bucket_to_delete_name' is not a string, or if 'require_metageneration_match' or
                   'require_metageneration_mismatch' are provided and are not strings.
        BucketNotFoundError: If the specified bucket_to_delete_name does not exist in the DB.
        MetagenerationMismatchError: If 'require_metageneration_match' or 'require_metageneration_mismatch'
                                     conditions are not met.
        BucketNotEmptyError: If the bucket_to_delete_name is not empty and cannot be deleted.
    """
    from google_cloud_storage.Buckets import delete
    return delete(
        bucket=bucket_to_delete_name,
        if_metageneration_match=require_metageneration_match,
        if_metageneration_not_match=require_metageneration_mismatch
    )


def recover_bucket_from_soft_delete(
    bucket_to_restore_name,
    target_bucket_generation,
    response_data_view='full',
    billing_project_id=None
):
    """
    Restores a soft-deleted bucket.

    This function restores a bucket only if it exists, is soft-deleted, and its generation
    matches the provided generation value.

    Args:
        bucket_to_restore_name (str): Name of the bucket to restore.
        target_bucket_generation (str): The generation of the bucket for verification.
        response_data_view (str): Set of properties to return
            One of:
            -"full" (default)
            -"noAcl"
        billing_project_id (Optional[str]): The project to be billed for the request; required for Requester Pays buckets.

    Returns:
        Dict[str, Any]:
        - An `error` key indicating an error describing why the restore
          did not occur with one of the following values:
            - bucket not found
            - bucket is not soft deleted
            - generation mismatch
        - On success, returns a dictionary with:
            - message (str): bucket restored successfully
            - bucket (Dict[str, Any]): Restored bucket metadata, including:
                - acl (List[BucketAccessControl])
                - billing (Dict[str, bool]):
                    - requesterPays (bool)
                - cors (List[Dict[str, Any]]):
                    - maxAgeSeconds (int)
                    - method (List[str])
                    - origin (List[str])
                    - responseHeader (List[str])
                - customPlacementConfig (Dict[str, List[str]]):
                    - dataLocations (List[str])
                - defaultEventBasedHold (bool)
                - defaultObjectAcl (List[ObjectAccessControl])
                - encryption (Dict[str, str]):
                    - defaultKmsKeyName (str)
                - etag (str)
                - hierarchicalNamespace (Dict[str, bool]):
                    - enabled (bool)
                - iamConfiguration (Dict[str, Any]):
                    - bucketPolicyOnly (Dict[str, Any]):
                        - enabled (bool)
                        - lockedTime (str)
                    - uniformBucketLevelAccess (Dict[str, Any]):
                        - enabled (bool)
                        - lockedTime (str)
                    - publicAccessPrevention (str)
                - id (str)
                - ipFilter (Dict[str, Any]):
                    - mode (str)
                    - publicNetworkSource (Dict[str, List[str]]):
                        - allowedIpCidrRanges (List[str])
                    - vpcNetworkSources (List[Dict[str, Any]]):
                        - network (str)
                        - allowedIpCidrRanges (List[str])
                - kind (str)
                - labels (Dict[str, str])
                - lifecycle (Dict[str, List[Dict[str, Any]]]):
                    - rule:
                        - action (Dict[str, str]):
                            - type (str)
                            - storageClass (str)
                        - condition (Dict[str, Any]):
                            - age (int)
                            - createdBefore (str)
                            - customTimeBefore (str)
                            - daysSinceCustomTime (int)
                            - daysSinceNoncurrentTime (int)
                            - isLive (bool)
                            - matchesPattern (str)
                            - matchesPrefix (List[str])
                            - matchesSuffix (List[str])
                            - matchesStorageClass (List[str])
                            - noncurrentTimeBefore (str)
                            - numNewerVersions (int)
                - autoclass (Dict[str, Any]):
                    - enabled (bool)
                    - toggleTime (str)
                    - terminalStorageClass (str)
                    - terminalStorageClassUpdateTime (str)
                - location (str)
                - locationType (str)
                - logging (Dict[str, str]):
                    - logBucket (str)
                    - logObjectPrefix (str)
                - generation (str)
                - metageneration (str)
                - name (str)
                - owner (Dict[str, str]):
                    - entity (str)
                    - entityId (str)
                - projectNumber (str)
                - retentionPolicy (Dict[str, Any]):
                    - effectiveTime (str)
                    - isLocked (bool)
                    - retentionPeriod (str)
                - objectRetention (Dict[str, str]):
                    - mode (str)
                - rpo (str)
                - selfLink (str)
                - softDeletePolicy (Dict[str, str]):
                    - retentionDurationSeconds (str)
                    - effectiveTime (str)
                - storageClass (str)
                - timeCreated (str)
                - updated (str)
                - softDeleteTime (str)
                - hardDeleteTime (str)
                - versioning (Dict[str, bool]):
                    - enabled (bool)
                - website (Dict[str, str]):
                    - mainPageSuffix (str)
                    - notFoundPage (str)
                - satisfiesPZS (bool)
                - satisfiesPZI (bool)
    """
    from google_cloud_storage.Buckets import restore
    return restore(
        bucket=bucket_to_restore_name,
        generation=target_bucket_generation,
        projection=response_data_view,
        user_project=billing_project_id
    )


def start_bucket_relocation(bucket_to_move_name):
    """
    Initiates a long-running Relocate Bucket operation on the specified bucket.

    Args:
        bucket_to_move_name (str): Name of the bucket to be relocated.

    Returns:
        Dict[str, Any]:
        - On error:
            - "error" (str): "Bucket not found"
        - On success:
            - dictionary with the following keys:
                - done (bool): False â€” indicates the operation is in progress.
                - error (dict): Present only if an error occurred. Matches GoogleRpcStatus schema:
                    - code (int) : The status code, which should be an enum value of google.rpc.Code.
                    - message (str) : A developer-facing error message, which should be in English.
                    - details (list[dict]) : A list of messages that carry the error details. There is a common set of message types for APIs to use.
                - metadata (dict): Optional metadata related to the operation.
                - name (str): Unique operation name, e.g., operations/relocate-bucket-<bucket>.
                - response (dict): Result returned when operation completes.
                - selfLink (str): URI of the operation resource.
                - kind (str): Always "storage#operation".
    """
    from google_cloud_storage.Buckets import relocate
    return relocate(bucket=bucket_to_move_name)


def retrieve_bucket_information(
    target_bucket_name,
    bucket_version_generation_to_fetch=None,
    fetch_if_soft_deleted=False,
    conditional_metageneration_match=None,
    conditional_metageneration_mismatch=None,
    metadata_detail_level='noAcl'
):
    """
    Returns metadata for the specified bucket.

    This function supports conditional fetches based on metageneration and supports
    retrieval of soft-deleted buckets if specified.

    Args:
        target_bucket_name (str): Name of the bucket to retrieve metadata for.
        bucket_version_generation_to_fetch (Optional[str]): If specified, fetches the version of the bucket
            matching this generation. Required if soft_deleted is True.
        fetch_if_soft_deleted (bool): If True, retrieves the soft-deleted version of the bucket.
        conditional_metageneration_match (Optional[str]): Returns metadata only if the bucket's
            metageneration matches this value.
        conditional_metageneration_mismatch (Optional[str]): Returns metadata only if the bucket's
            metageneration does not match this value.
        metadata_detail_level (str): Set of properties to return. Acceptable values:
            - "full": Includes all properties.
            - "noAcl": Excludes owner, acl, and defaultObjectAcl. Default is "noAcl".

    Returns:
        Dict[str, Any]: On a successful call, returns a dictionary containing the bucket resource.
            - "bucket" (Dict[str, Any]): A dictionary with the bucket's metadata. If 'projection' is "noAcl" (the default), `acl` and `defaultObjectAcl` are omitted. The structure includes:
                - acl (List[BucketAccessControl])
                - billing (Dict[str, bool]):
                    - requesterPays (bool)
                - cors (List[Dict[str, Any]]):
                    - maxAgeSeconds (int)
                    - method (List[str])
                    - origin (List[str])
                    - responseHeader (List[str])
                - customPlacementConfig (Dict[str, List[str]]):
                    - dataLocations (List[str])
                - defaultEventBasedHold (bool)
                - defaultObjectAcl (List[ObjectAccessControl])
                - encryption (Dict[str, str]):
                    - defaultKmsKeyName (str)
                - etag (str)
                - hierarchicalNamespace (Dict[str, bool]):
                    - enabled (bool)
                - iamConfiguration (Dict[str, Any]):
                    - bucketPolicyOnly (Dict[str, Any]):
                        - enabled (bool)
                        - lockedTime (str)
                    - uniformBucketLevelAccess (Dict[str, Any]):
                        - enabled (bool)
                        - lockedTime (str)
                    - publicAccessPrevention (str)
                - id (str)
                - ipFilter (Dict[str, Any]):
                    - mode (str)
                    - publicNetworkSource (Dict[str, List[str]]):
                        - allowedIpCidrRanges (List[str])
                    - vpcNetworkSources (List[Dict[str, Any]]):
                        - network (str)
                        - allowedIpCidrRanges (List[str])
                - kind (str)
                - labels (Dict[str, str])
                - lifecycle (Dict[str, List[Dict[str, Any]]]):
                    - rule:
                        - action (Dict[str, str]):
                            - type (str)
                            - storageClass (str)
                        - condition (Dict[str, Any]):
                            - age (int)
                            - createdBefore (str)
                            - customTimeBefore (str)
                            - daysSinceCustomTime (int)
                            - daysSinceNoncurrentTime (int)
                            - isLive (bool)
                            - matchesPattern (str)
                            - matchesPrefix (List[str])
                            - matchesSuffix (List[str])
                            - matchesStorageClass (List[str])
                            - noncurrentTimeBefore (str)
                            - numNewerVersions (int)
                - autoclass (Dict[str, Any]):
                    - enabled (bool)
                    - toggleTime (str)
                    - terminalStorageClass (str)
                    - terminalStorageClassUpdateTime (str)
                - location (str)
                - locationType (str)
                - logging (Dict[str, str]):
                    - logBucket (str)
                    - logObjectPrefix (str)
                - generation (str)
                - metageneration (str)
                - name (str)
                - owner (Dict[str, str]):
                    - entity (str)
                    - entityId (str)
                - projectNumber (str)
                - retentionPolicy (Dict[str, Any]):
                    - effectiveTime (str)
                    - isLocked (bool)
                    - retentionPeriod (str)
                - objectRetention (Dict[str, str]):
                    - mode (str)
                - rpo (str)
                - selfLink (str)
                - softDeletePolicy (Dict[str, str]):
                    - retentionDurationSeconds (str)
                    - effectiveTime (str)
                - storageClass (str)
                - timeCreated (str)
                - updated (str)
                - softDeleteTime (str)
                - hardDeleteTime (str)
                - versioning (Dict[str, bool]):
                    - enabled (bool)
                - website (Dict[str, str]):
                    - mainPageSuffix (str)
                    - notFoundPage (str)
                - satisfiesPZS (bool)
                - satisfiesPZI (bool)

    Raises:
        TypeError: If any argument is of an incorrect type.
        InvalidProjectionValueError: If 'metadata_detail_level' is not one of "full" or "noAcl".
        MissingGenerationError: If 'fetch_if_soft_deleted' is True but 'bucket_version_generation_to_fetch' is not provided.
        BucketNotFoundError: If the specified target_bucket_name does not exist.
        NotSoftDeletedError: If 'fetch_if_soft_deleted' is True but the target_bucket_name is not soft-deleted.
        GenerationMismatchError: If 'fetch_if_soft_deleted' is True and the provided 'bucket_version_generation_to_fetch' 
                                  does not match the target_bucket_name's bucket_version_generation_to_fetch.
        MetagenerationMismatchError: If 'conditional_metageneration_match' or
                                     'conditional_metageneration_mismatch' conditions are not met.
    """
    from google_cloud_storage.Buckets import get
    return get(
        bucket=target_bucket_name,
        generation=bucket_version_generation_to_fetch,
        soft_deleted=fetch_if_soft_deleted,
        if_metageneration_match=conditional_metageneration_match,
        if_metageneration_not_match=conditional_metageneration_mismatch,
        projection=metadata_detail_level
    )


def retrieve_bucket_iam_policy(
    bucket_identifier,
    requested_iam_policy_version=None,
    requester_pays_project_id=None
):
    """
    Returns an IAM policy for the specified bucket.

    Args:
        bucket_identifier (str): Name of the bucket whose IAM policy is being requested.
        requested_iam_policy_version (Optional[int]): The desired IAM policy format version
            to be returned. Must be >= 1 if specified.
        requester_pays_project_id (Optional[str]): The project to be billed for this request. Required for
            Requester Pays buckets.

    Returns:
        Dict[str, Any]:
        - On error:
            - An "error" Keyword with one of the following values:
                - bucket not found
                - invalid policy version
        - On success:
            - iamPolicy (Dict[str, Any]): A policy object describing access control for the bucket.
                - bindings (List[Dict[str, Any]]): List of role-member mappings with optional condition:
                    - role (str): The IAM role string (e.g. roles/storage.admin).
                    - members (List[str]): List of member identifiers (e.g. user:alice@example.com).
                    - condition (Optional[Dict[str, Any]]): An optional condition that restricts when the binding is applied.
                    Includes:
                        - title (str): Short label for the expression.
                        - description (str): Optional description of the expression's intent.
                        - expression (str): Common Expression Language (CEL) syntax string.
                        - location (str): Optional location string for debugging (e.g., file or position).
                - etag (str): HTTP 1.1 entity tag for the policy.
                - kind (str): Resource kind, always "storage#policy".
                - resourceId (str): The resource ID the policy applies to.
                - version (int): IAM policy format version.
    """
    from google_cloud_storage.Buckets import getIamPolicy
    return getIamPolicy(
        bucket=bucket_identifier,
        options_requested_policy_version=requested_iam_policy_version,
        user_project=requester_pays_project_id
    )


def get_bucket_physical_layout(bucket_name_for_layout, permission_check_prefix=None):
    """
    Returns the storage layout configuration for the specified bucket.

    This operation requires the `storage.objects.list` permission. If a `prefix` is specified,
    it can be used to restrict access validation under that specific prefix.

    Args:
        bucket_name_for_layout (str): Name of the bucket whose storage layout is to be retrieved.
        permission_check_prefix (Optional[str]): Optional prefix used for permission checks. Useful when the caller
            only has permission under a specific path within the bucket.

    Returns:
        Dict[str, Any]:
        - On error:
            - An "error" Keyword with the following value:
                - "Bucket not found"
        - On success:
            - storageLayout (Dict[str, Any]) with the following keys:
                - bucket (str): The name of the bucket.
                - customPlacementConfig (Dict[str, List[str]]):
                    - dataLocations (List[str]): Regional locations where data is placed.
                - hierarchicalNamespace (Dict[str, bool]):
                    - enabled (bool): True if hierarchical namespace is enabled.
                - kind (str): Always "storage#storageLayout".
                - location (str): The physical location of the bucket.
                - locationType (str): Type of location configuration (e.g., multi-region, region).
    """
    from google_cloud_storage.Buckets import getStorageLayout
    return getStorageLayout(bucket=bucket_name_for_layout, prefix=permission_check_prefix)


def provision_new_storage_container(
    owning_project_identifier,
    container_creation_spec=None,
    canned_container_access_policy=None,
    default_object_access_template=None,
    response_data_view_level='noAcl',
    chargeable_project_id=None,
    activate_object_retention_on_creation=False
):
    """
    Creates a new bucket.

    Args:
        owning_project_identifier (str): A valid API project identifier.
        container_creation_spec (Optional[Dict[str, Any]]): A dictionary representing the bucket properties
            to create. Will be validated against the BucketRequest model. If not provided, a default
            bucket with auto-generated name will be created. Supported keys:
            - name (str): Bucket name (required if provided)
            - storageClass (str): Storage class (STANDARD, NEARLINE, COLDLINE, ARCHIVE, etc.)
            - location (str): Bucket location
            - billing (Dict[str, bool]): Billing configuration
                - requesterPays (bool): Whether requester pays is enabled
            - cors (List[Dict[str, Any]]): CORS configuration rules
                - maxAgeSeconds (int): Max age for preflight cache
                - method (List[str]): HTTP methods allowed
                - origin (List[str]): Origins allowed
                - responseHeader (List[str]): Headers allowed in response
            - customPlacementConfig (Dict[str, List[str]]): Custom dual region placement
                - dataLocations (List[str]): List of regional locations
            - hierarchicalNamespace (Dict[str, bool]): Hierarchical namespace config
                - enabled (bool): Whether hierarchical namespace is enabled
            - iamConfiguration (Dict[str, Any]): IAM configuration
                - uniformBucketLevelAccess (Dict[str, Any]): Uniform bucket-level access config
                    - enabled (bool): Whether enabled
                    - lockedTime (str): When it was locked (RFC 3339 format)
                - bucketPolicyOnly (Dict[str, Any]): Legacy bucket policy only config
                    - enabled (bool): Whether enabled
                    - lockedTime (str): When it was locked (RFC 3339 format)
                - publicAccessPrevention (str): Public access prevention ("inherited" or "enforced")
            - ipFilter (Dict[str, Any]): IP filter configuration
                - mode (str): Filter mode ("Enabled" or "Disabled")
                - publicNetworkSource (Dict[str, List[str]]): Public network sources
                    - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
                - vpcNetworkSources (List[Dict[str, Any]]): VPC network sources
                    - network (str): VPC network resource name
                    - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
            - lifecycle (Dict[str, List[Dict[str, Any]]]): Lifecycle management rules
                - rule (List[Dict[str, Any]]): List of lifecycle rules
                    - action (Dict[str, str]): Action to take
                        - type (str): Action type (Delete, SetStorageClass, AbortIncompleteMultipartUpload)
                        - storageClass (str): Target storage class for SetStorageClass action
                    - condition (Dict[str, Any]): Conditions for applying the rule
                        - age (int): Age of object in days
                        - createdBefore (str): Date in RFC 3339 format
                        - customTimeBefore (str): Date in RFC 3339 format
                        - daysSinceCustomTime (int): Days since custom time
                        - daysSinceNoncurrentTime (int): Days since noncurrent time
                        - isLive (bool): Whether object is live
                        - matchesPattern (str): Regular expression pattern
                        - matchesPrefix (List[str]): Object name prefixes
                        - matchesSuffix (List[str]): Object name suffixes
                        - matchesStorageClass (List[str]): Storage classes to match
                        - noncurrentTimeBefore (str): Date in RFC 3339 format
                        - numNewerVersions (int): Number of newer versions
            - autoclass (Dict[str, Any]): Autoclass configuration
                - enabled (bool): Whether autoclass is enabled
                - toggleTime (str): Time autoclass was toggled (RFC 3339 format)
                - terminalStorageClass (str): Terminal storage class (NEARLINE or ARCHIVE)
                - terminalStorageClassUpdateTime (str): Time terminal class was updated (RFC 3339)
            - versioning (Dict[str, bool]): Versioning configuration
                - enabled (bool): Whether versioning is enabled
            - website (Dict[str, str]): Website configuration
                - mainPageSuffix (str): Main page suffix (e.g., "index.html")
                - notFoundPage (str): 404 page (e.g., "404.html")
            - logging (Dict[str, str]): Access logging configuration
                - logBucket (str): Destination bucket for logs
                - logObjectPrefix (str): Prefix for log objects
            - retentionPolicy (Dict[str, Any]): Retention policy
                - effectiveTime (str): When policy became effective (RFC 3339 format)
                - isLocked (bool): Whether policy is locked
                - retentionPeriod (str): Retention period in seconds
            - objectRetention (Dict[str, str]): Object retention configuration
                - mode (str): Object retention mode
            - softDeletePolicy (Dict[str, str]): Soft delete policy
                - retentionDurationSeconds (str): Retention duration in seconds
                - effectiveTime (str): When policy became effective (RFC 3339 format)
            - encryption (Dict[str, str]): Encryption configuration
                - defaultKmsKeyName (str): Default KMS key resource name
            - owner (Dict[str, str]): Bucket owner information
                - entity (str): Owner entity
                - entityId (str): Owner entity ID
            - labels (Dict[str, str]): User-defined labels (key-value pairs)
            - defaultEventBasedHold (bool): Default event-based hold for new objects
            - rpo (str): Recovery Point Objective ("DEFAULT" or "ASYNC_TURBO")
            - locationType (str): Type of location (e.g., "region", "dual-region")
            - projectNumber (str): Project number bucket belongs to
            - satisfiesPZS (bool): Whether bucket satisfies Zone Separation
            - satisfiesPZI (bool): Whether bucket satisfies Zone Isolation
            Defaults to None.
        canned_container_access_policy (Optional[str]): Apply a predefined set of access controls to this bucket.
            Valid values:
            - "authenticatedRead": Project team owners get OWNER access, allAuthenticatedUsers get READER access
            - "private": Project team owners get OWNER access
            - "projectPrivate": Project team members get access according to their roles
            - "publicRead": Project team owners get OWNER access, allUsers get READER access
            - "publicReadWrite": Project team owners get OWNER access, allUsers get WRITER access
            Defaults to None.
        default_object_access_template (Optional[str]): Apply a predefined set of default object
            access controls to this bucket. Valid values:
            - "authenticatedRead": Object owner gets OWNER access, allAuthenticatedUsers get READER access
            - "bucketOwnerFullControl": Object owner gets OWNER access, project team owners get OWNER access
            - "bucketOwnerRead": Object owner gets OWNER access, project team owners get READER access
            - "private": Object owner gets OWNER access
            - "projectPrivate": Object owner gets OWNER access, project team members get access according to roles
            - "publicRead": Object owner gets OWNER access, allUsers get READER access
            Defaults to None.
        response_data_view_level (str): Set of properties to return in the response. Valid values:
            - "full": Include all properties
            - "noAcl": Omit owner, acl and defaultObjectAcl properties
            Defaults to "noAcl".
        chargeable_project_id (Optional[str]): The project to be billed for this request. Required for
            Requester Pays buckets. Defaults to None.
        activate_object_retention_on_creation (bool): If True, enables object retention on the bucket.
            Defaults to False.

    Returns:
        Dict[str, Any]:
        - On success (if projection is "full" otherwise `acl` and `defaultObjectAcl` are omitted):
            - "bucket" (Dict[str, Any]) with the following keys:
                - name (str): Bucket name
                - id (str): Bucket ID
                - kind (str): Resource kind (always "storage#bucket")
                - storageClass (str): Current storage class
                - location (str): Bucket location
                - metageneration (str): Current metageneration (incremented after update)
                - generation (str): Bucket generation
                - timeCreated (str): Creation time (RFC 3339 format)
                - updated (str): Last update time (RFC 3339 format)
                - etag (str): Entity tag for the bucket
                - projectNumber (str): Project number
                - acl (List[Dict[str, Any]]): Access control list (omitted if projection="noAcl")
                    - bucket (str): Name of the bucket
                    - domain (str): Domain associated with the entity
                    - email (str): Email address associated with the entity
                    - entity (str): The entity holding the permission
                    - entityId (str): ID for the entity
                    - etag (str): HTTP 1.1 Entity tag for the access-control entry
                    - id (str): ID of the access-control entry
                    - kind (str): Always "storage#bucketAccessControl"
                    - projectTeam (Dict[str, str]): Project team associated with entity
                        - projectNumber (str): Project number
                        - team (str): Team name
                    - role (str): Access permission for the entity
                    - selfLink (str): Link to this access-control entry
                - defaultObjectAcl (List[Dict[str, Any]]): Default object ACL (omitted if projection="noAcl")
                    - bucket (str): Name of the bucket
                    - domain (str): Domain associated with the entity
                    - email (str): Email address associated with the entity
                    - entity (str): The entity holding the permission
                    - entityId (str): ID for the entity
                    - etag (str): HTTP 1.1 Entity tag for the access-control entry
                    - generation (str): Content generation of the object
                    - id (str): ID of the access-control entry
                    - kind (str): Always "storage#objectAccessControl"
                    - object (str): Name of the object
                    - projectTeam (Dict[str, str]): Project team associated with entity
                        - projectNumber (str): Project number
                        - team (str): Team name
                    - role (str): Access permission for the entity
                    - selfLink (str): Link to this access-control entry
                - billing (Dict[str, bool]): Billing configuration
                    - requesterPays (bool): Whether requester pays is enabled
                - cors (List[Dict[str, Any]]): CORS configuration rules
                    - maxAgeSeconds (int): Max age for preflight cache
                    - method (List[str]): HTTP methods allowed
                    - origin (List[str]): Origins allowed
                    - responseHeader (List[str]): Headers allowed in response
                - versioning (Dict[str, bool]): Versioning configuration
                    - enabled (bool): Whether versioning is enabled
                - lifecycle (Dict[str, List[Dict[str, Any]]]): Lifecycle configuration
                    - rule (List[Dict[str, Any]]): List of lifecycle rules
                        - action (Dict[str, str]): Action to take
                            - type (str): Action type (Delete, SetStorageClass, etc.)
                            - storageClass (str): Target storage class for SetStorageClass
                        - condition (Dict[str, Any]): Conditions for applying the rule
                            - age (int): Age of object in days
                            - createdBefore (str): Date in RFC 3339 format
                            - customTimeBefore (str): Date in RFC 3339 format
                            - daysSinceCustomTime (int): Days since custom time
                            - daysSinceNoncurrentTime (int): Days since noncurrent time
                            - isLive (bool): Whether object is live
                            - matchesPattern (str): Regular expression pattern
                            - matchesPrefix (List[str]): Object name prefixes
                            - matchesSuffix (List[str]): Object name suffixes
                            - matchesStorageClass (List[str]): Storage classes to match
                            - noncurrentTimeBefore (str): Date in RFC 3339 format
                            - numNewerVersions (int): Number of newer versions
                - customPlacementConfig (Dict[str, List[str]]): Custom dual region placement
                    - dataLocations (List[str]): List of regional locations
                - hierarchicalNamespace (Dict[str, bool]): Hierarchical namespace config
                    - enabled (bool): Whether hierarchical namespace is enabled
                - iamConfiguration (Dict[str, Any]): IAM configuration
                    - uniformBucketLevelAccess (Dict[str, Any]): Uniform bucket-level access config
                        - enabled (bool): Whether enabled
                        - lockedTime (str): When it was locked (RFC 3339 format)
                    - bucketPolicyOnly (Dict[str, Any]): Legacy bucket policy only config
                        - enabled (bool): Whether enabled
                        - lockedTime (str): When it was locked (RFC 3339 format)
                    - publicAccessPrevention (str): Public access prevention setting
                - ipFilter (Dict[str, Any]): IP filter configuration
                    - mode (str): Filter mode ("Enabled" or "Disabled")
                    - publicNetworkSource (Dict[str, List[str]]): Public network sources
                        - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
                    - vpcNetworkSources (List[Dict[str, Any]]): VPC network sources
                        - network (str): VPC network resource name
                        - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
                - autoclass (Dict[str, Any]): Autoclass configuration
                    - enabled (bool): Whether autoclass is enabled
                    - toggleTime (str): Time autoclass was toggled (RFC 3339 format)
                    - terminalStorageClass (str): Terminal storage class (NEARLINE or ARCHIVE)
                    - terminalStorageClassUpdateTime (str): Time terminal class was updated (RFC 3339)
                - website (Dict[str, str]): Website configuration
                    - mainPageSuffix (str): Main page suffix (e.g., "index.html")
                    - notFoundPage (str): 404 page (e.g., "404.html")
                - logging (Dict[str, str]): Access logging configuration
                    - logBucket (str): Destination bucket for logs
                    - logObjectPrefix (str): Prefix for log objects
                - retentionPolicy (Dict[str, Any]): Retention policy
                    - effectiveTime (str): When policy became effective (RFC 3339 format)
                    - isLocked (bool): Whether policy is locked
                    - retentionPeriod (str): Retention period in seconds
                - objectRetention (Dict[str, str]): Object retention configuration
                    - mode (str): Object retention mode
                - softDeletePolicy (Dict[str, str]): Soft delete policy
                    - retentionDurationSeconds (str): Retention duration in seconds
                    - effectiveTime (str): When policy became effective (RFC 3339 format)
                - encryption (Dict[str, str]): Encryption configuration
                    - defaultKmsKeyName (str): Default KMS key resource name
                - owner (Dict[str, str]): Bucket owner information
                    - entity (str): Owner entity
                    - entityId (str): Owner entity ID
                - labels (Dict[str, str]): User-defined labels (key-value pairs)
                - defaultEventBasedHold (bool): Default event-based hold for new objects
                - rpo (str): Recovery Point Objective ("DEFAULT" or "ASYNC_TURBO")
                - locationType (str): Type of location (e.g., "region", "dual-region")
                - satisfiesPZS (bool): Whether bucket satisfies Zone Separation
                - satisfiesPZI (bool): Whether bucket satisfies Zone Isolation
                - enableObjectRetention (bool): Whether object retention is enabled

    Raises:
        ValueError: If container_creation_spec validation fails, bucket name is missing, or bucket already exists.
        TypeError: If container_creation_spec is not a dictionary.
    """
    from google_cloud_storage.Buckets import insert
    return insert(
        project=owning_project_identifier,
        bucket_request=container_creation_spec,
        predefinedAcl=canned_container_access_policy,
        predefined_default_object_acl=default_object_access_template,
        projection=response_data_view_level,
        user_project=chargeable_project_id,
        enableObjectRetention=activate_object_retention_on_creation
    )


def enumerate_project_buckets(
    project_id_to_query,
    page_size_limit=1000,
    pagination_cursor=None,
    bucket_name_filter_prefix=None,
    include_soft_deleted_only=False,
    result_set_projection='noAcl',
    billing_project_for_request=None
):
    """
    Retrieves a list of buckets for a given project.

    Args:
        project_id_to_query (str): A valid API project identifier.
        page_size_limit (int): Maximum number of buckets to return. Defaults to 1000.
        pagination_cursor (Optional[str]): Token indicating the starting point for the next page of results.
        bucket_name_filter_prefix (Optional[str]): Filter to include only buckets whose names begin with this prefix.
        include_soft_deleted_only (bool): If True, only returns soft-deleted buckets.
        result_set_projection (str): Properties to return for each bucket. Allowed values:
            - "full": Include all properties.
            - "noAcl": Exclude ACL-related properties. Default is "noAcl".
        billing_project_for_request (Optional[str]): The project to be billed for the request.

    Returns:
        Dict[str, Any]:
        - items (List[Dict[str, Any]]): List of matching bucket metadata dictionaries.
            - list of dictionaries with the following keys(if projection is not "full" the keys acl and defaultObjectAcl are omitted):
                - acl (List[BucketAccessControl])
                - billing (Dict[str, bool]):
                    - requesterPays (bool)
                - cors (List[Dict[str, Any]]):
                    - maxAgeSeconds (int)
                    - method (List[str])
                    - origin (List[str])
                    - responseHeader (List[str])
                - customPlacementConfig (Dict[str, List[str]]):
                    - dataLocations (List[str])
                - defaultEventBasedHold (bool)
                - defaultObjectAcl (List[ObjectAccessControl])
                - encryption (Dict[str, str]):
                    - defaultKmsKeyName (str)
                - etag (str)
                - hierarchicalNamespace (Dict[str, bool]):
                    - enabled (bool)
                - iamConfiguration (Dict[str, Any]):
                    - bucketPolicyOnly (Dict[str, Any]):
                        - enabled (bool)
                        - lockedTime (str)
                    - uniformBucketLevelAccess (Dict[str, Any]):
                        - enabled (bool)
                        - lockedTime (str)
                    - publicAccessPrevention (str)
                - id (str)
                - ipFilter (Dict[str, Any]):
                    - mode (str)
                    - publicNetworkSource (Dict[str, List[str]]):
                        - allowedIpCidrRanges (List[str])
                    - vpcNetworkSources (List[Dict[str, Any]]):
                        - network (str)
                        - allowedIpCidrRanges (List[str])
                - kind (str)
                - labels (Dict[str, str])
                - lifecycle (Dict[str, List[Dict[str, Any]]]):
                    - rule:
                        - action (Dict[str, str]):
                            - type (str)
                            - storageClass (str)
                        - condition (Dict[str, Any]):
                            - age (int)
                            - createdBefore (str)
                            - customTimeBefore (str)
                            - daysSinceCustomTime (int)
                            - daysSinceNoncurrentTime (int)
                            - isLive (bool)
                            - matchesPattern (str)
                            - matchesPrefix (List[str])
                            - matchesSuffix (List[str])
                            - matchesStorageClass (List[str])
                            - noncurrentTimeBefore (str)
                            - numNewerVersions (int)
                - autoclass (Dict[str, Any]):
                    - enabled (bool)
                    - toggleTime (str)
                    - terminalStorageClass (str)
                    - terminalStorageClassUpdateTime (str)
                - location (str)
                - locationType (str)
                - logging (Dict[str, str]):
                    - logBucket (str)
                    - logObjectPrefix (str)
                - generation (str)
                - metageneration (str)
                - name (str)
                - owner (Dict[str, str]):
                    - entity (str)
                    - entityId (str)
                - projectNumber (str)
                - retentionPolicy (Dict[str, Any]):
                    - effectiveTime (str)
                    - isLocked (bool)
                    - retentionPeriod (str)
                - objectRetention (Dict[str, str]):
                    - mode (str)
                - rpo (str)
                - selfLink (str)
                - softDeletePolicy (Dict[str, str]):
                    - retentionDurationSeconds (str)
                    - effectiveTime (str)
                - storageClass (str)
                - timeCreated (str)
                - updated (str)
                - softDeleteTime (str)
                - hardDeleteTime (str)
                - versioning (Dict[str, bool]):
                    - enabled (bool)
                - website (Dict[str, str]):
                    - mainPageSuffix (str)
                    - notFoundPage (str)
                - satisfiesPZS (bool)
                - satisfiesPZI (bool)

        - nextPageToken (Optional[str]): Token for the next page of results, if available.
    """
    from google_cloud_storage.Buckets import list
    return list(
        project=project_id_to_query,
        max_results=page_size_limit,
        page_token=pagination_cursor,
        prefix=bucket_name_filter_prefix,
        soft_deleted=include_soft_deleted_only,
        projection=result_set_projection,
        user_project=billing_project_for_request
    )


def finalize_bucket_retention_policy(
    bucket_name_to_lock,
    required_metageneration_for_lock,
    billing_project_on_requester_pays=None
):
    """
    Locks retention policy on a bucket.

    This operation sets the `retentionPolicyLocked` flag to True, preventing future changes
    to the retention policy. The action is conditional on the bucket's current metageneration
    matching the specified value.

    Args:
        bucket_name_to_lock (str): Name of the bucket on which to lock the retention policy.
        required_metageneration_for_lock (str): Locks only if the bucket's metageneration matches this value.
        billing_project_on_requester_pays (Optional[str]): The project to be billed for the request. Required for
            Requester Pays buckets.

    Returns:
        Dict[str, Any]:
        - On error:
            - 'error' keyword with one of the following values:
                - bucket not found
                - metageneration mismatch
        - On success:
            - "bucket" keyword with the following value:
                - dictionary with the following keys:
                    - acl (List[BucketAccessControl])
                    - billing (Dict[str, bool]):
                        - requesterPays (bool)
                    - cors (List[Dict[str, Any]]):
                        - maxAgeSeconds (int)
                        - method (List[str])
                        - origin (List[str])
                        - responseHeader (List[str])
                    - customPlacementConfig (Dict[str, List[str]]):
                        - dataLocations (List[str])
                    - defaultEventBasedHold (bool)
                    - defaultObjectAcl (List[ObjectAccessControl])
                    - encryption (Dict[str, str]):
                        - defaultKmsKeyName (str)
                    - etag (str)
                    - hierarchicalNamespace (Dict[str, bool]):
                        - enabled (bool)
                    - iamConfiguration (Dict[str, Any]):
                        - bucketPolicyOnly (Dict[str, Any]):
                            - enabled (bool)
                            - lockedTime (str)
                        - uniformBucketLevelAccess (Dict[str, Any]):
                            - enabled (bool)
                            - lockedTime (str)
                        - publicAccessPrevention (str)
                    - id (str)
                    - ipFilter (Dict[str, Any]):
                        - mode (str)
                        - publicNetworkSource (Dict[str, List[str]]):
                            - allowedIpCidrRanges (List[str])
                        - vpcNetworkSources (List[Dict[str, Any]]):
                            - network (str)
                            - allowedIpCidrRanges (List[str])
                    - kind (str)
                    - labels (Dict[str, str])
                    - lifecycle (Dict[str, List[Dict[str, Any]]]):
                        - rule:
                            - action (Dict[str, str]):
                                - type (str)
                                - storageClass (str)
                            - condition (Dict[str, Any]):
                                - age (int)
                                - createdBefore (str)
                                - customTimeBefore (str)
                                - daysSinceCustomTime (int)
                                - daysSinceNoncurrentTime (int)
                                - isLive (bool)
                                - matchesPattern (str)
                                - matchesPrefix (List[str])
                                - matchesSuffix (List[str])
                                - matchesStorageClass (List[str])
                                - noncurrentTimeBefore (str)
                                - numNewerVersions (int)
                    - autoclass (Dict[str, Any]):
                        - enabled (bool)
                        - toggleTime (str)
                        - terminalStorageClass (str)
                        - terminalStorageClassUpdateTime (str)
                    - location (str)
                    - locationType (str)
                    - logging (Dict[str, str]):
                        - logBucket (str)
                        - logObjectPrefix (str)
                    - generation (str)
                    - metageneration (str)
                    - name (str)
                    - owner (Dict[str, str]):
                        - entity (str)
                        - entityId (str)
                    - projectNumber (str)
                    - retentionPolicy (Dict[str, Any]):
                        - effectiveTime (str)
                        - isLocked (bool)
                        - retentionPeriod (str)
                    - objectRetention (Dict[str, str]):
                        - mode (str)
                    - rpo (str)
                    - selfLink (str)
                    - softDeletePolicy (Dict[str, str]):
                        - retentionDurationSeconds (str)
                        - effectiveTime (str)
                    - storageClass (str)
                    - timeCreated (str)
                    - updated (str)
                    - softDeleteTime (str)
                    - hardDeleteTime (str)
                    - versioning (Dict[str, bool]):
                        - enabled (bool)
                    - website (Dict[str, str]):
                        - mainPageSuffix (str)
                        - notFoundPage (str)
                    - satisfiesPZS (bool)
                    - satisfiesPZI (bool)
    """
    from google_cloud_storage.Buckets import lockRetentionPolicy
    return lockRetentionPolicy(
        bucket=bucket_name_to_lock,
        if_metageneration_match=required_metageneration_for_lock,
        user_project=billing_project_on_requester_pays
    )


def modify_storage_container_properties(
    container_to_modify_name,
    apply_if_metadata_version_is=None,
    apply_if_metadata_version_is_not=None,
    revised_container_access_policy=None,
    revised_default_object_access_template=None,
    returned_property_set=None,
    billed_project_for_patch=None,
    container_attribute_changes=None
):
    """
    Patches a bucket.

    Changes to the bucket are readable immediately after writing, but configuration changes
    may take time to propagate. This operation may be conditional on metageneration match.
    Only the fields specified in bucket_request are updated; other fields remain unchanged.

    Args:
        container_to_modify_name (str): Name of the bucket to update.
        apply_if_metadata_version_is (Optional[str]): Makes the patch conditional on whether the
            bucket's current metageneration matches this value. Defaults to None.
        apply_if_metadata_version_is_not (Optional[str]): Makes the patch conditional on whether the
            bucket's current metageneration does not match this value. Defaults to None.
        revised_container_access_policy (Optional[str]): Apply a predefined set of access controls to the bucket.
            Valid values:
            - "authenticatedRead": Project team owners get OWNER access, allAuthenticatedUsers get READER access
            - "private": Project team owners get OWNER access
            - "projectPrivate": Project team members get access according to their roles
            - "publicRead": Project team owners get OWNER access, allUsers get READER access
            - "publicReadWrite": Project team owners get OWNER access, allUsers get WRITER access
            Defaults to None.
        revised_default_object_access_template (Optional[str]): Apply a predefined set of default object
            access controls to the bucket. Valid values:
            - "authenticatedRead": Object owner gets OWNER access, allAuthenticatedUsers get READER access
            - "bucketOwnerFullControl": Object owner gets OWNER access, project team owners get OWNER access
            - "bucketOwnerRead": Object owner gets OWNER access, project team owners get READER access
            - "private": Object owner gets OWNER access
            - "projectPrivate": Object owner gets OWNER access, project team members get access according to roles
            - "publicRead": Object owner gets OWNER access, allUsers get READER access
            Defaults to None.
        returned_property_set (Optional[str]): Set of properties to return in the response. Valid values:
            - "full": Include all properties
            - "noAcl": Omit owner, acl and defaultObjectAcl properties
            Defaults to None (returns all properties).
        billed_project_for_patch (Optional[str]): The project to be billed for this request. Required for
            Requester Pays buckets. Defaults to None.
        container_attribute_changes (Optional[Dict[str, Any]]): A dictionary representing the bucket properties
            to update. Will be validated against the BucketRequest model. Supported keys:
            - name (str): Bucket name
            - storageClass (str): Storage class (STANDARD, NEARLINE, COLDLINE, ARCHIVE, etc.)
            - location (str): Bucket location
            - billing (Dict[str, bool]): Billing configuration
                - requesterPays (bool): Whether requester pays is enabled
            - cors (List[Dict[str, Any]]): CORS configuration rules
                - maxAgeSeconds (int): Max age for preflight cache
                - method (List[str]): HTTP methods allowed
                - origin (List[str]): Origins allowed
                - responseHeader (List[str]): Headers allowed in response
            - customPlacementConfig (Dict[str, List[str]]): Custom dual region placement
                - dataLocations (List[str]): List of regional locations
            - hierarchicalNamespace (Dict[str, bool]): Hierarchical namespace config
                - enabled (bool): Whether hierarchical namespace is enabled
            - iamConfiguration (Dict[str, Any]): IAM configuration
                - uniformBucketLevelAccess (Dict[str, Any]): Uniform bucket-level access config
                    - enabled (bool): Whether enabled
                    - lockedTime (str): When it was locked (RFC 3339 format)
                - bucketPolicyOnly (Dict[str, Any]): Legacy bucket policy only config
                    - enabled (bool): Whether enabled
                    - lockedTime (str): When it was locked (RFC 3339 format)
                - publicAccessPrevention (str): Public access prevention ("inherited" or "enforced")
            - ipFilter (Dict[str, Any]): IP filter configuration
                - mode (str): Filter mode ("Enabled" or "Disabled")
                - publicNetworkSource (Dict[str, List[str]]): Public network sources
                    - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
                - vpcNetworkSources (List[Dict[str, Any]]): VPC network sources
                    - network (str): VPC network resource name
                    - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
            - lifecycle (Dict[str, List[Dict[str, Any]]]): Lifecycle management rules
                - rule (List[Dict[str, Any]]): List of lifecycle rules
                    - action (Dict[str, str]): Action to take
                        - type (str): Action type (Delete, SetStorageClass, AbortIncompleteMultipartUpload)
                        - storageClass (str): Target storage class for SetStorageClass action
                    - condition (Dict[str, Any]): Conditions for applying the rule
                        - age (int): Age of object in days
                        - createdBefore (str): Date in RFC 3339 format
                        - customTimeBefore (str): Date in RFC 3339 format
                        - daysSinceCustomTime (int): Days since custom time
                        - daysSinceNoncurrentTime (int): Days since noncurrent time
                        - isLive (bool): Whether object is live
                        - matchesPattern (str): Regular expression pattern
                        - matchesPrefix (List[str]): Object name prefixes
                        - matchesSuffix (List[str]): Object name suffixes
                        - matchesStorageClass (List[str]): Storage classes to match
                        - noncurrentTimeBefore (str): Date in RFC 3339 format
                        - numNewerVersions (int): Number of newer versions
            - autoclass (Dict[str, Any]): Autoclass configuration
                - enabled (bool): Whether autoclass is enabled
                - toggleTime (str): Time autoclass was toggled (RFC 3339 format)
                - terminalStorageClass (str): Terminal storage class (NEARLINE or ARCHIVE)
                - terminalStorageClassUpdateTime (str): Time terminal class was updated (RFC 3339)
            - versioning (Dict[str, bool]): Versioning configuration
                - enabled (bool): Whether versioning is enabled
            - website (Dict[str, str]): Website configuration
                - mainPageSuffix (str): Main page suffix (e.g., "index.html")
                - notFoundPage (str): 404 page (e.g., "404.html")
            - logging (Dict[str, str]): Access logging configuration
                - logBucket (str): Destination bucket for logs
                - logObjectPrefix (str): Prefix for log objects
            - retentionPolicy (Dict[str, Any]): Retention policy
                - effectiveTime (str): When policy became effective (RFC 3339 format)
                - isLocked (bool): Whether policy is locked
                - retentionPeriod (str): Retention period in seconds
            - objectRetention (Dict[str, str]): Object retention configuration
                - mode (str): Object retention mode
            - softDeletePolicy (Dict[str, str]): Soft delete policy
                - retentionDurationSeconds (str): Retention duration in seconds
                - effectiveTime (str): When policy became effective (RFC 3339 format)
            - encryption (Dict[str, str]): Encryption configuration
                - defaultKmsKeyName (str): Default KMS key resource name
            - owner (Dict[str, str]): Bucket owner information
                - entity (str): Owner entity
                - entityId (str): Owner entity ID
            - labels (Dict[str, str]): User-defined labels (key-value pairs)
            - defaultEventBasedHold (bool): Default event-based hold for new objects
            - rpo (str): Recovery Point Objective ("DEFAULT" or "ASYNC_TURBO")
            - locationType (str): Type of location (e.g., "region", "dual-region")
            - projectNumber (str): Project number bucket belongs to
            - satisfiesPZS (bool): Whether bucket satisfies Zone Separation
            - satisfiesPZI (bool): Whether bucket satisfies Zone Isolation
            Defaults to None.

    Returns:
        Tuple[Dict[str, Any], int]: A tuple containing:
            - Dictionary with bucket metadata (filtered by projection if specified):
                - name (str): Bucket name
                - id (str): Bucket ID
                - kind (str): Resource kind (always "storage#bucket")
                - storageClass (str): Current storage class
                - location (str): Bucket location
                - metageneration (str): Current metageneration (incremented after update)
                - generation (str): Bucket generation
                - timeCreated (str): Creation time (RFC 3339 format)
                - updated (str): Last update time (RFC 3339 format)
                - etag (str): Entity tag for the bucket
                - projectNumber (str): Project number
                - acl (List[Dict[str, Any]]): Access control list (omitted if projection="noAcl")
                    - bucket (str): Name of the bucket
                    - domain (str): Domain associated with the entity
                    - email (str): Email address associated with the entity
                    - entity (str): The entity holding the permission
                    - entityId (str): ID for the entity
                    - etag (str): HTTP 1.1 Entity tag for the access-control entry
                    - id (str): ID of the access-control entry
                    - kind (str): Always "storage#bucketAccessControl"
                    - projectTeam (Dict[str, str]): Project team associated with entity
                        - projectNumber (str): Project number
                        - team (str): Team name
                    - role (str): Access permission for the entity
                    - selfLink (str): Link to this access-control entry
                - defaultObjectAcl (List[Dict[str, Any]]): Default object ACL (omitted if projection="noAcl")
                    - bucket (str): Name of the bucket
                    - domain (str): Domain associated with the entity
                    - email (str): Email address associated with the entity
                    - entity (str): The entity holding the permission
                    - entityId (str): ID for the entity
                    - etag (str): HTTP 1.1 Entity tag for the access-control entry
                    - generation (str): Content generation of the object
                    - id (str): ID of the access-control entry
                    - kind (str): Always "storage#objectAccessControl"
                    - object (str): Name of the object
                    - projectTeam (Dict[str, str]): Project team associated with entity
                        - projectNumber (str): Project number
                        - team (str): Team name
                    - role (str): Access permission for the entity
                    - selfLink (str): Link to this access-control entry
                - billing (Dict[str, bool]): Billing configuration
                    - requesterPays (bool): Whether requester pays is enabled
                - cors (List[Dict[str, Any]]): CORS configuration rules
                    - maxAgeSeconds (int): Max age for preflight cache
                    - method (List[str]): HTTP methods allowed
                    - origin (List[str]): Origins allowed
                    - responseHeader (List[str]): Headers allowed in response
                - versioning (Dict[str, bool]): Versioning configuration
                    - enabled (bool): Whether versioning is enabled
                - lifecycle (Dict[str, List[Dict[str, Any]]]): Lifecycle configuration
                    - rule (List[Dict[str, Any]]): List of lifecycle rules
                        - action (Dict[str, str]): Action to take
                            - type (str): Action type (Delete, SetStorageClass, etc.)
                            - storageClass (str): Target storage class for SetStorageClass
                        - condition (Dict[str, Any]): Conditions for applying the rule
                            - age (int): Age of object in days
                            - createdBefore (str): Date in RFC 3339 format
                            - customTimeBefore (str): Date in RFC 3339 format
                            - daysSinceCustomTime (int): Days since custom time
                            - daysSinceNoncurrentTime (int): Days since noncurrent time
                            - isLive (bool): Whether object is live
                            - matchesPattern (str): Regular expression pattern
                            - matchesPrefix (List[str]): Object name prefixes
                            - matchesSuffix (List[str]): Object name suffixes
                            - matchesStorageClass (List[str]): Storage classes to match
                            - noncurrentTimeBefore (str): Date in RFC 3339 format
                            - numNewerVersions (int): Number of newer versions
                - customPlacementConfig (Dict[str, List[str]]): Custom dual region placement
                    - dataLocations (List[str]): List of regional locations
                - hierarchicalNamespace (Dict[str, bool]): Hierarchical namespace config
                    - enabled (bool): Whether hierarchical namespace is enabled
                - iamConfiguration (Dict[str, Any]): IAM configuration
                    - uniformBucketLevelAccess (Dict[str, Any]): Uniform bucket-level access config
                        - enabled (bool): Whether enabled
                        - lockedTime (str): When it was locked (RFC 3339 format)
                    - bucketPolicyOnly (Dict[str, Any]): Legacy bucket policy only config
                        - enabled (bool): Whether enabled
                        - lockedTime (str): When it was locked (RFC 3339 format)
                    - publicAccessPrevention (str): Public access prevention setting
                - autoclass (Dict[str, Any]): Autoclass configuration
                    - enabled (bool): Whether autoclass is enabled
                    - toggleTime (str): Time autoclass was toggled (RFC 3339 format)
                    - terminalStorageClass (str): Terminal storage class
                    - terminalStorageClassUpdateTime (str): Time terminal class was updated
                - website (Dict[str, str]): Website configuration
                    - mainPageSuffix (str): Main page suffix
                    - notFoundPage (str): 404 page
                - logging (Dict[str, str]): Access logging configuration
                    - logBucket (str): Destination bucket for logs
                    - logObjectPrefix (str): Prefix for log objects
                - retentionPolicy (Dict[str, Any]): Retention policy
                    - effectiveTime (str): When policy became effective (RFC 3339 format)
                    - isLocked (bool): Whether policy is locked
                    - retentionPeriod (str): Retention period in seconds
                - objectRetention (Dict[str, str]): Object retention configuration
                    - mode (str): Object retention mode
                - softDeletePolicy (Dict[str, str]): Soft delete policy
                    - retentionDurationSeconds (str): Retention duration in seconds
                    - effectiveTime (str): When policy became effective (RFC 3339 format)
                - encryption (Dict[str, str]): Encryption configuration
                    - defaultKmsKeyName (str): Default KMS key resource name
                - owner (Dict[str, str]): Bucket owner information
                    - entity (str): Owner entity
                    - entityId (str): Owner entity ID
                - labels (Dict[str, str]): User-defined labels (key-value pairs)
                - [Additional fields as specified in bucket_request]
            - HTTP status code (200 for success, 400/404/412 for errors)

    Raises:
        TypeError: If container_to_modify_name is not a string, or if optional string parameters are not strings.
        ValueError: If revised_container_access_policy, revised_default_object_access_template, or returned_property_set have invalid values.
        ValidationError: If container_attribute_changes contains invalid data according to BucketRequest model.
    """
    from google_cloud_storage.Buckets import patch
    return patch(
        bucket=container_to_modify_name,
        if_metageneration_match=apply_if_metadata_version_is,
        if_metageneration_not_match=apply_if_metadata_version_is_not,
        predefinedAcl=revised_container_access_policy,
        predefined_default_object_acl=revised_default_object_access_template,
        projection=returned_property_set,
        user_project=billed_project_for_patch,
        bucket_request=container_attribute_changes
    )


def update_bucket_iam_policy(bucket_name_for_policy_update, project_to_bill_for_request=None):
    """
    Updates an IAM policy for the specified bucket.

    Args:
        bucket_name_for_policy_update (str): Name of the bucket whose IAM policy is being updated.
        project_to_bill_for_request (Optional[str]): The project to be billed for this request. Required for
            Requester Pays buckets.

    Returns:
        Tuple[Dict[str, Any], int]:
        - On error:
            - {"error": "Bucket <name> not found"}, 404
        - On success:
            - The updated IAM policy object (Dict)
                - bindings (List[Dict[str, Any]]): Associations between roles and members. Each binding may contain:
                    - role (str): Role string assigned to members.
                      One of:
                        - roles/storage.admin
                        - roles/storage.objectViewer
                        - roles/storage.objectCreator
                        - roles/storage.objectAdmin
                        - roles/storage.legacyObjectReader
                        - roles/storage.legacyObjectOwner
                        - roles/storage.legacyBucketReader
                        - roles/storage.legacyBucketWriter
                        - roles/storage.legacyBucketOwner
                    - members (List[str]): Members granted the role.
                      One of:
                        - allUsers
                        - allAuthenticatedUsers
                        - user:<email>
                        - group:<email>
                        - domain:<domain>
                        - serviceAccount:<email>
                        - projectOwner:<projectId>
                        - projectEditor:<projectId>
                        - projectViewer:<projectId>
                    - condition (Optional[Dict[str, Any]]): A condition expression that limits when
                      the binding applies, following the `Expr` format:
                        - title (str): Short description of the condition.
                        - description (str): Detailed explanation.
                        - expression (str): CEL syntax expression.
                        - location (str): Optional location for debugging reference.
                - etag (str): HTTP 1.1 entity tag for the policy.
                - kind (str): Always "storage#policy".
                - resourceId (str): The full ID of the bucket this policy applies to.
                - version (int): IAM policy format version.
            - HTTP status code 200
    """
    from google_cloud_storage.Buckets import setIamPolicy
    return setIamPolicy(
        bucket=bucket_name_for_policy_update,
        user_project=project_to_bill_for_request
    )


def verify_caller_bucket_permissions(
    target_bucket_for_permission_check,
    permissions_to_validate,
    billed_project_account=None
):
    """
    Tests a set of permissions on the given bucket to see which, if any, are held by the caller.

    Args:
        target_bucket_for_permission_check (str): Name of the bucket on which permissions are being tested.
        permissions_to_validate (str): The list of permissions to test.
            One of:
            - storage.buckets.delete
            - storage.buckets.get
            - storage.buckets.getIamPolicy
            - storage.buckets.create
            - storage.buckets.list
            - storage.buckets.setIamPolicy
            - storage.buckets.update
            - storage.objects.delete
            - storage.objects.get
            - storage.objects.getIamPolicy
            - storage.objects.create
            - storage.objects.list
            - storage.objects.setIamPolicy
            - storage.objects.update
            - storage.managedFolders.delete
            - storage.managedFolders.get
            - storage.managedFolders.getIamPolicy
            - storage.managedFolders.create
            - storage.managedFolders.list
            - storage.managedFolders.setIamPolicy
        billed_project_account (Optional[str]): The project to be billed for this request. Required for
            Requester Pays buckets.

    Returns:
        Tuple[Dict[str, Any], int]:
        - On error:
            - {"error": "Bucket <name> not found"}, 404
        - On success:
            - TestIamPermissionsResponse (Dict[str, Any]):
                - kind (str): Always "storage#testIamPermissionsResponse".
                - permissions (List[str]): A subset of the requested permissions that the caller has.

        Supported Permissions:
            - storage.buckets.delete
            - storage.buckets.get
            - storage.buckets.getIamPolicy
            - storage.buckets.create
            - storage.buckets.list
            - storage.buckets.setIamPolicy
            - storage.buckets.update
            - storage.objects.delete
            - storage.objects.get
            - storage.objects.getIamPolicy
            - storage.objects.create
            - storage.objects.list
            - storage.objects.setIamPolicy
            - storage.objects.update
            - storage.managedFolders.delete
            - storage.managedFolders.get
            - storage.managedFolders.getIamPolicy
            - storage.managedFolders.create
            - storage.managedFolders.list
            - storage.managedFolders.setIamPolicy
    """
    from google_cloud_storage.Buckets import testIamPermissions
    return testIamPermissions(
        bucket=target_bucket_for_permission_check,
        permissions=permissions_to_validate,
        user_project=billed_project_account
    )


def replace_storage_container_configuration(
    target_container_for_replacement,
    proceed_if_metageneration_matches=None,
    proceed_if_metageneration_differs=None,
    replacement_container_access_policy=None,
    replacement_default_object_access_template=None,
    final_response_detail_level=None,
    billable_project_for_update=None,
    complete_container_configuration_payload=None
):
    """
    Updates a bucket with complete replacement using PUT semantics.

    Changes to the bucket will be readable immediately after writing, but configuration changes
    may take time to propagate. Unlike patch(), this operation completely replaces the bucket
    configuration with the provided bucket_request data, requiring bucket_request to be provided.

    Args:
        target_container_for_replacement (str): Name of the bucket to update.
        proceed_if_metageneration_matches (Optional[str]): Makes the update conditional on whether the
            bucket's current metageneration matches this value. Defaults to None.
        proceed_if_metageneration_differs (Optional[str]): Makes the update conditional on whether the
            bucket's current metageneration does not match this value. Defaults to None.
        replacement_container_access_policy (Optional[str]): Apply a predefined set of access controls to the bucket.
            Valid values:
            - "authenticatedRead": Project team owners get OWNER access, allAuthenticatedUsers get READER access
            - "private": Project team owners get OWNER access
            - "projectPrivate": Project team members get access according to their roles
            - "publicRead": Project team owners get OWNER access, allUsers get READER access
            - "publicReadWrite": Project team owners get OWNER access, allUsers get WRITER access
            Defaults to None.
        replacement_default_object_access_template (Optional[str]): Apply a predefined set of default object
            access controls to the bucket. Valid values:
            - "authenticatedRead": Object owner gets OWNER access, allAuthenticatedUsers get READER access
            - "bucketOwnerFullControl": Object owner gets OWNER access, project team owners get OWNER access
            - "bucketOwnerRead": Object owner gets OWNER access, project team owners get READER access
            - "private": Object owner gets OWNER access
            - "projectPrivate": Object owner gets OWNER access, project team members get access according to roles
            - "publicRead": Object owner gets OWNER access, allUsers get READER access
            Defaults to None.
        final_response_detail_level (Optional[str]): Set of properties to return in the response. Valid values:
            - "full": Include all properties
            - "noAcl": Omit owner, acl and defaultObjectAcl properties
            Defaults to None (returns all properties).
        billable_project_for_update (Optional[str]): The project to be billed for this request. Required for
            Requester Pays buckets. Defaults to None.
        complete_container_configuration_payload (Optional[Dict[str, Any]]): A dictionary representing the complete bucket
            configuration to replace existing configuration. REQUIRED for update operation.
            Will be validated against the BucketRequest model. Supported keys:
            - name (str): Bucket name (will be preserved as original bucket name)
            - storageClass (str): Storage class (STANDARD, NEARLINE, COLDLINE, ARCHIVE, etc.)
            - location (str): Bucket location
            - billing (Dict[str, bool]): Billing configuration
                - requesterPays (bool): Whether requester pays is enabled
            - cors (List[Dict[str, Any]]): CORS configuration rules
                - maxAgeSeconds (int): Max age for preflight cache
                - method (List[str]): HTTP methods allowed
                - origin (List[str]): Origins allowed
                - responseHeader (List[str]): Headers allowed in response
            - customPlacementConfig (Dict[str, List[str]]): Custom dual region placement
                - dataLocations (List[str]): List of regional locations
            - hierarchicalNamespace (Dict[str, bool]): Hierarchical namespace config
                - enabled (bool): Whether hierarchical namespace is enabled
            - iamConfiguration (Dict[str, Any]): IAM configuration
                - uniformBucketLevelAccess (Dict[str, Any]): Uniform bucket-level access config
                    - enabled (bool): Whether enabled
                    - lockedTime (str): When it was locked (RFC 3339 format)
                - bucketPolicyOnly (Dict[str, Any]): Legacy bucket policy only config
                    - enabled (bool): Whether enabled
                    - lockedTime (str): When it was locked (RFC 3339 format)
                - publicAccessPrevention (str): Public access prevention ("inherited" or "enforced")
            - ipFilter (Dict[str, Any]): IP filter configuration
                - mode (str): Filter mode ("Enabled" or "Disabled")
                - publicNetworkSource (Dict[str, List[str]]): Public network sources
                    - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
                - vpcNetworkSources (List[Dict[str, Any]]): VPC network sources
                    - network (str): VPC network resource name
                    - allowedIpCidrRanges (List[str]): List of allowed IP CIDR ranges
            - lifecycle (Dict[str, List[Dict[str, Any]]]): Lifecycle management rules
                - rule (List[Dict[str, Any]]): List of lifecycle rules
                    - action (Dict[str, str]): Action to take
                        - type (str): Action type (Delete, SetStorageClass, AbortIncompleteMultipartUpload)
                        - storageClass (str): Target storage class for SetStorageClass action
                    - condition (Dict[str, Any]): Conditions for applying the rule
                        - age (int): Age of object in days
                        - createdBefore (str): Date in RFC 3339 format
                        - customTimeBefore (str): Date in RFC 3339 format
                        - daysSinceCustomTime (int): Days since custom time
                        - daysSinceNoncurrentTime (int): Days since noncurrent time
                        - isLive (bool): Whether object is live
                        - matchesPattern (str): Regular expression pattern
                        - matchesPrefix (List[str]): Object name prefixes
                        - matchesSuffix (List[str]): Object name suffixes
                        - matchesStorageClass (List[str]): Storage classes to match
                        - noncurrentTimeBefore (str): Date in RFC 3339 format
                        - numNewerVersions (int): Number of newer versions
            - autoclass (Dict[str, Any]): Autoclass configuration
                - enabled (bool): Whether autoclass is enabled
                - toggleTime (str): Time autoclass was toggled (RFC 3339 format)
                - terminalStorageClass (str): Terminal storage class (NEARLINE or ARCHIVE)
                - terminalStorageClassUpdateTime (str): Time terminal class was updated (RFC 3339)
            - versioning (Dict[str, bool]): Versioning configuration
                - enabled (bool): Whether versioning is enabled
            - website (Dict[str, str]): Website configuration
                - mainPageSuffix (str): Main page suffix (e.g., "index.html")
                - notFoundPage (str): 404 page (e.g., "404.html")
            - logging (Dict[str, str]): Access logging configuration
                - logBucket (str): Destination bucket for logs
                - logObjectPrefix (str): Prefix for log objects
            - retentionPolicy (Dict[str, Any]): Retention policy
                - effectiveTime (str): When policy became effective (RFC 3339 format)
                - isLocked (bool): Whether policy is locked
                - retentionPeriod (str): Retention period in seconds
            - objectRetention (Dict[str, str]): Object retention configuration
                - mode (str): Object retention mode
            - softDeletePolicy (Dict[str, str]): Soft delete policy
                - retentionDurationSeconds (str): Retention duration in seconds
                - effectiveTime (str): When policy became effective (RFC 3339 format)
            - encryption (Dict[str, str]): Encryption configuration
                - defaultKmsKeyName (str): Default KMS key resource name
            - owner (Dict[str, str]): Bucket owner information
                - entity (str): Owner entity
                - entityId (str): Owner entity ID
            - labels (Dict[str, str]): User-defined labels (key-value pairs)
            - defaultEventBasedHold (bool): Default event-based hold for new objects
            - rpo (str): Recovery Point Objective ("DEFAULT" or "ASYNC_TURBO")
            - locationType (str): Type of location (e.g., "region", "dual-region")
            - projectNumber (str): Project number bucket belongs to
            - satisfiesPZS (bool): Whether bucket satisfies Zone Separation
            - satisfiesPZI (bool): Whether bucket satisfies Zone Isolation
            Defaults to None but REQUIRED for update operation.

    Returns:
        Tuple[Dict[str, Any], int]: A tuple containing:
            - Dictionary with complete bucket metadata (filtered by projection if specified):
                - name (str): Bucket name (preserved from original)
                - id (str): Bucket ID (preserved from original)
                - kind (str): Resource kind (always "storage#bucket")
                - storageClass (str): Storage class from bucket_request
                - location (str): Location from bucket_request
                - metageneration (str): Incremented metageneration
                - generation (str): Bucket generation (preserved from original)
                - timeCreated (str): Original creation time (preserved)
                - updated (str): Current update time (RFC 3339 format)
                - etag (str): Updated entity tag
                - projectNumber (str): Project number (preserved from original)
                - project (str): Project ID (preserved from original)
                - acl (List[Dict[str, Any]]): Access control list (omitted if projection="noAcl")
                - defaultObjectAcl (List[Dict[str, Any]]): Default object ACL (omitted if projection="noAcl")
                - billing (Dict[str, bool]): Billing configuration from bucket_request
                - cors (List[Dict[str, Any]]): CORS configuration from bucket_request
                - versioning (Dict[str, bool]): Versioning configuration from bucket_request
                - lifecycle (Dict[str, List[Dict[str, Any]]]): Lifecycle config from bucket_request
                - [All other fields as specified in bucket_request]
            - HTTP status code (200 for success, 400/404/412 for errors)

    Raises:
        TypeError: If target_container_for_replacement is not a string, or if optional string parameters are not strings.
        ValueError: If replacement_container_access_policy, replacement_default_object_access_template, or final_response_detail_level have invalid values.
        ValidationError: If complete_container_configuration_payload contains invalid data according to BucketRequest model.
        AttributeError: If complete_container_configuration_payload is None (required for update operation).
    """
    from google_cloud_storage.Buckets import update
    return update(
        bucket=target_container_for_replacement,
        if_metageneration_match=proceed_if_metageneration_matches,
        if_metageneration_not_match=proceed_if_metageneration_differs,
        predefinedAcl=replacement_container_access_policy,
        predefined_default_object_acl=replacement_default_object_access_template,
        projection=final_response_detail_level,
        user_project=billable_project_for_update,
        bucket_request=complete_container_configuration_payload
    )
