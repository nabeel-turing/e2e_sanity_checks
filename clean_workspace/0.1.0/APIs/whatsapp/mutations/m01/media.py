# This file is automatically generated by the MutationBuilder

def dispatch_media_attachment(media_recipient_id, local_file_path, media_caption_text=None):
    """
    Send a file such as a picture, raw audio, video or document via WhatsApp to the specified recipient.

    This function sends various types of media files (images, videos, documents, audio) to a WhatsApp contact or group.
    The file type is automatically detected based on the file extension and MIME type.

    Args:
        media_recipient_id (str): The recipient - either a phone number with country code but no + or other symbols, or a JID (e.g., "123456789@s.whatsapp.net" or a group JID like "123456789@g.us").
        local_file_path (str): The absolute path to the media file to send.
        media_caption_text (str, optional): Optional caption text to accompany the media file.

    Returns:
        Dict[str, Any]: A dictionary confirming the file send operation. It contains:
            success (bool): True if the file was successfully queued for sending, false otherwise.
            status_message (str): A human-readable message describing the outcome.
            message_id (Optional[str]): The server-assigned ID of the sent message, if successful.
            timestamp (Optional[str]): ISO-8601 formatted timestamp of server acknowledgement.

    Raises:
        InvalidRecipientError: If the media_recipient_id JID or phone number format is invalid or media_recipient_id does not exist.
        LocalFileNotFoundError: If the `local_file_path` does not point to an existing file or is not accessible.
        UnsupportedMediaTypeError: If the file type is not supported by WhatsApp or this endpoint.
        MediaUploadFailedError: If uploading the media file to the server fails.
        MessageSendFailedError: If sending the message fails after successful upload.
        InternalSimulationError: If current user JID is not configured or invalid.
        ValidationError: If input arguments fail validation.
    """
    from whatsapp.media import send_file
    return send_file(
        recipient=media_recipient_id,
        media_path=local_file_path,
        caption=media_caption_text
    )


def send_voice_recording(audio_message_destination, path_to_audio_file):
    """
    Send any audio file as a WhatsApp audio message to the specified recipient.

    For group messages, the JID is used for the recipient. If an error occurs due to ffmpeg not being installed or conversion failing, an attempt is made to send the original file as a generic audio message. The function sends the audio file specified by `media_path`; this file is converted to Opus .ogg if it is not already a .ogg file.

    Args:
        audio_message_destination (str): The recipient - either a phone number with country code but no + or other symbols, or a JID (e.g., "123456789@s.whatsapp.net" or a group JID like "123456789@g.us").
        path_to_audio_file (str): The absolute path to the audio file to send (will be converted to Opus .ogg if it's not a .ogg file).

    Returns:
        Dict[str, Any]: A dictionary confirming the audio message send operation. It contains:
            success (bool): True if the audio message was successfully queued for sending, false otherwise.
            status_message (str): A human-readable message describing the outcome.
            message_id (Optional[str]): The server-assigned ID of the sent audio message, if successful.
            timestamp (Optional[str]): ISO-8601 formatted timestamp of server acknowledgement.

    Raises:
        InvalidRecipientError: If the audio_message_destination JID or phone number format is invalid or audio_message_destination does not exist.
        LocalFileNotFoundError: If the `path_to_audio_file` does not point to an existing audio file or is not accessible.
        AudioProcessingError: If there is an error processing the audio file (e.g., conversion to Opus .ogg fails, possibly due to missing ffmpeg or unsupported source format, and fallback also fails).
        MessageSendFailedError: If sending the audio message fails after successful upload.
        ValidationError: If input arguments fail validation.
    """
    from whatsapp.media import send_audio_message
    return send_audio_message(recipient=audio_message_destination, media_path=path_to_audio_file)


def save_media_from_message(message_with_media_id, origin_chat_jid):
    """
    Download media from a WhatsApp message and get the local file path.

    This function downloads media content from a specific WhatsApp message. It uses the provided message ID and chat JID to locate the message, attempts to retrieve its media, and if successful, saves the media to a local file. The function then returns a dictionary detailing the outcome of this operation, including the success status, a message, and the path to the downloaded file.

    Args:
        message_with_media_id (str): The ID of the message containing the media.
        origin_chat_jid (str): The JID of the chat containing the message.

    Returns:
        Dict[str, Any]: A dictionary containing the result of the media download operation. It includes:
            success (bool): True if the media was downloaded successfully, false otherwise.
            status_message (str): A human-readable message describing the outcome of the download attempt.
            file_path (Optional[str]): The absolute local file path where the downloaded media is saved, if successful.
            original_file_name (Optional[str]): The original file name of the media, as provided by the sender or platform.
            mime_type (Optional[str]): The MIME type of the downloaded media (e.g., 'image/jpeg', 'video/mp4', 'application/pdf').
            file_size_bytes (Optional[int]): The size of the downloaded file in bytes, if available and successful.

    Raises:
        MessageNotFoundError: If no message is found with the given `message_with_media_id` in the specified `origin_chat_jid`.
        MediaUnavailableError: If the specified message does not contain media, the media has expired, or is otherwise not available for download.
        DownloadFailedError: If the media download fails due to a network issue, server error, or corrupted data.
        LocalStorageError: If there is an error saving the downloaded file to local storage (e.g., insufficient disk space, permission denied).
        ValidationError: If input arguments fail validation.
    """
    from whatsapp.media import download_media
    return download_media(message_id=message_with_media_id, chat_jid=origin_chat_jid)
