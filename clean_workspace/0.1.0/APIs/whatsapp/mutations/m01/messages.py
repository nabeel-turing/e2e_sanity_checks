# This file is automatically generated by the MutationBuilder

def query_message_history(
    from_datetime=None,
    to_datetime=None,
    message_sender_phone=None,
    filter_by_chat_jid=None,
    message_text_query=None,
    result_set_size=20,
    pagination_page_number=0,
    add_message_context=True,
    leading_context_size=1,
    trailing_context_size=1
):
    """
    Get WhatsApp messages matching specified criteria with optional context.

    Args:
        from_datetime (Optional[str]): ISO 8601 datetime string. Only return messages after this time.
        to_datetime (Optional[str]): ISO 8601 datetime string. Only return messages before this time.
        message_sender_phone (Optional[str]): Filter messages by sender's phone number.
        filter_by_chat_jid (Optional[str]): Filter messages by chat JID (must contain '@').
        message_text_query (Optional[str]): Search for messages containing this text (case-insensitive).
        result_set_size (int, optional): Maximum number of messages to return. Defaults to 20.
        pagination_page_number (int, optional): Page number for pagination (0-based). Defaults to 0.
        add_message_context (bool, optional): Whether to include surrounding messages. Defaults to True.
        leading_context_size (int, optional): Number of messages to include before each match. Defaults to 1.
        trailing_context_size (int, optional): Number of messages to include after each match. Defaults to 1.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - results (List[Dict[str, Any]]): A list of dictionaries. The content of the dictionaries depends whether the context is included or not via the "include_context" parameter.
            If include_context is False, each dictionary is a message that contains the following keys:
                - message_id (str): Unique identifier for the message.
                - chat_jid (str): JID of the chat where the message was sent.
                - sender_jid (str): JID of the sender.
                - sender_name (Optional[str]): Display name of the sender, if available.
                - timestamp (str): ISO 8601 datetime string of when the message was sent.
                - text_content (Optional[str]): Text content of the message, if any.
                - is_outgoing (bool): True if the message was sent by the user, False otherwise.
                - media_info (Optional[Dict[str, Any]]): Information about attached media, if present, with:
                    - media_type (str): Type of media (e.g., 'image').
                    - file_name (Optional[str]): Name of the media file.
                    - caption (Optional[str]): Caption for the media, if any.
                    - mime_type (Optional[str]): MIME type of the media, if any.
                    - simulated_local_path (Optional[str]): Simulated local file path, if any.
                - quoted_message_info (Optional[Dict[str, Any]]): Information about a quoted message, if present, with:
                    - quoted_message_id (str): ID of the quoted message.
                    - quoted_sender_jid (str): JID of the quoted message sender.
                    - quoted_text_preview (str): Preview of the quoted message text.
                - reaction (Optional[str]): Reaction to the message, if any.
                - status (Optional[str]): Status of the message, if any.
                - forwarded (Optional[bool]): True if the message was forwarded, False otherwise.
            If include_context is True, each dictionary  contains the following keys:
                - matched_message (Dict[str, Any]): The message object with the same keys as above, i.e.:
                    - message_id (str): Unique identifier for the message.
                    - chat_jid (str): JID of the chat where the message was sent.
                    - sender_jid (str): JID of the sender.
                    - sender_name (Optional[str]): Display name of the sender, if available.
                    - timestamp (str): ISO 8601 datetime string of when the message was sent.
                    - text_content (Optional[str]): Text content of the message, if any.
                    - is_outgoing (bool): True if the message was sent by the user, False otherwise.
                    - media_info (Optional[Dict[str, Any]]): Information about attached media, if present, with:
                        - media_type (str): Type of media (e.g., 'image').
                        - file_name (Optional[str]): Name of the media file.
                        - caption (Optional[str]): Caption for the media, if any.
                        - mime_type (Optional[str]): MIME type of the media, if any.
                        - simulated_local_path (Optional[str]): Simulated local file path, if any.
                    - quoted_message_info (Optional[Dict[str, Any]]): Information about a quoted message, if present, with:
                        - quoted_message_id (str): ID of the quoted message.
                        - quoted_sender_jid (str): JID of the quoted message sender.
                        - quoted_text_preview (str): Preview of the quoted message text.
                    - reaction (Optional[str]): Reaction to the message, if any.
                    - status (Optional[str]): Status of the message, if any.
                    - forwarded (Optional[bool]): True if the message was forwarded, False otherwise.
                - context_before (List[Dict[str, Any]]): A list of message objects preceding the matched message. Each message also follows the same message structure as the matched message, i.e.:
                    - message_id (str): Unique identifier for the message.
                    - chat_jid (str): JID of the chat where the message was sent.
                    - sender_jid (str): JID of the sender.
                    - sender_name (Optional[str]): Display name of the sender, if available.
                    - timestamp (str): ISO 8601 datetime string of when the message was sent.
                    - text_content (Optional[str]): Text content of the message, if any.
                    - is_outgoing (bool): True if the message was sent by the user, False otherwise.
                    - media_info (Optional[Dict[str, Any]]): Information about attached media, if present, with:
                        - media_type (str): Type of media (e.g., 'image').
                        - file_name (Optional[str]): Name of the media file.
                        - caption (Optional[str]): Caption for the media, if any.
                        - mime_type (Optional[str]): MIME type of the media, if any.
                        - simulated_local_path (Optional[str]): Simulated local file path, if any.
                    - quoted_message_info (Optional[Dict[str, Any]]): Information about a quoted message, if present, with:
                        - quoted_message_id (str): ID of the quoted message.
                        - quoted_sender_jid (str): JID of the quoted message sender.
                        - quoted_text_preview (str): Preview of the quoted message text.
                    - reaction (Optional[str]): Reaction to the message, if any.
                    - status (Optional[str]): Status of the message, if any.
                    - forwarded (Optional[bool]): True if the message was forwarded, False otherwise.
                - context_after (List[Dict[str, Any]]): A list of message objects following the matched message. Each message also follows the same message structure as the matched message, i.e.:
                    - message_id (str): Unique identifier for the message.
                    - chat_jid (str): JID of the chat where the message was sent.
                    - sender_jid (str): JID of the sender.
                    - sender_name (Optional[str]): Display name of the sender, if available.
                    - timestamp (str): ISO 8601 datetime string of when the message was sent.
                    - text_content (Optional[str]): Text content of the message, if any.
                    - is_outgoing (bool): True if the message was sent by the user, False otherwise.
                    - media_info (Optional[Dict[str, Any]]): Information about attached media, if present, with:
                        - media_type (str): Type of media (e.g., 'image').
                        - file_name (Optional[str]): Name of the media file.
                        - caption (Optional[str]): Caption for the media, if any.
                        - mime_type (Optional[str]): MIME type of the media, if any.
                        - simulated_local_path (Optional[str]): Simulated local file path, if any.
                    - quoted_message_info (Optional[Dict[str, Any]]): Information about a quoted message, if present, with:
                        - quoted_message_id (str): ID of the quoted message.
                        - quoted_sender_jid (str): JID of the quoted message sender.
                        - quoted_text_preview (str): Preview of the quoted message text.
                    - reaction (Optional[str]): Reaction to the message, if any.
                    - status (Optional[str]): Status of the message, if any.
                    - forwarded (Optional[bool]): True if the message was forwarded, False otherwise.
            - total_matches (int): Total number of messages matching the criteria.
            - page (int): Current page number (0-based).
            - limit (int): Maximum number of messages returned per page.

    Raises:
        InvalidInputError: If input validation fails
        InvalidParameterError: If parameters are invalid (e.g., invalid filter_by_chat_jid format)
        PaginationError: If requested pagination_page_number number is out of range
    """
    from whatsapp.messages import list_messages
    return list_messages(
        after=from_datetime,
        before=to_datetime,
        sender_phone_number=message_sender_phone,
        chat_jid=filter_by_chat_jid,
        query=message_text_query,
        limit=result_set_size,
        page=pagination_page_number,
        include_context=add_message_context,
        context_before=leading_context_size,
        context_after=trailing_context_size
    )


def get_conversation_around_message(
    central_message_id,
    number_of_previous_messages=5,
    number_of_subsequent_messages=5
):
    """
    Get context around a specific WhatsApp message.

    This function retrieves context around a specific WhatsApp message. It allows specifying the number of messages to fetch before and after the identified target message, aiding in understanding the conversation flow around that particular message.

    Args:
        central_message_id (str): The ID of the message to get context for.
        number_of_previous_messages (int): Number of messages to include before the target message. Defaults to 5.
        number_of_subsequent_messages (int): Number of messages to include after the target message. Defaults to 5.

    Returns:
        Dict[str, Any]: A dictionary containing the target message and its surrounding context, with the following keys:
            target_message (Dict[str, Any]): The target message object. A message object has the following fields:
                id (str): Unique identifier of the message.
                timestamp (int): UNIX timestamp indicating when the message was sent or received.
                sender_id (str): Identifier for the message sender.
                chat_id (str): Identifier for the chat this message belongs to.
                content_type (str): Type of message content (e.g., 'text', 'image', 'audio', 'video', 'document', 'sticker', 'location').
                text_content (Optional[str]): The text content if the message is of type 'text'.
                media_caption (Optional[str]): Caption associated with media content, if any.
                is_sent_by_me (bool): True if this message was sent by the API user, false otherwise.
                status (str): Current status of the message (e.g., 'sent', 'delivered', 'read', 'failed').
                replied_to_message_id (Optional[str]): The ID of the message to which this message is a reply, if applicable.
                forwarded (Optional[bool]): True if this message has been forwarded.
            messages_before (List[Dict[str, Any]]): A list of message objects chronologically preceding the `target_message`. Each object follows the same structure as `target_message`.
            messages_after (List[Dict[str, Any]]): A list of message objects chronologically following the `target_message`. Each object follows the same structure as `target_message`.

    Raises:
        MessageNotFoundError: If no message is found with the given `central_message_id`.
        InvalidParameterError: If `number_of_previous_messages` or `number_of_subsequent_messages` parameters are invalid (e.g., negative, excessively large).
        ValidationError: If input arguments fail validation.
    """
    from whatsapp.messages import get_message_context
    return get_message_context(
        message_id=central_message_id,
        before=number_of_previous_messages,
        after=number_of_subsequent_messages
    )


def post_text_message(receiver_identifier, message_body_text, reply_target_message_id=None):
    """
    Send a WhatsApp message to a person or group.

    This function sends a WhatsApp message to a specified person or group.
    For group chats, the JID (Jabber ID) must be used as the recipient identifier.
    You can optionally reply to a specific message by providing its message ID.

    Args:
        receiver_identifier (str): The recipient - either a phone number with country code
            but no + or other symbols, or a JID (e.g.,
            '123456789@s.whatsapp.net' or a group JID like
            '123456789@g.us').
        message_body_text (str): The message text to send.
        reply_target_message_id (Optional[str]): The ID of the message to reply to. If provided,
            the new message will be sent as a reply to the specified message.

    Returns:
        Dict[str, Any]: A dictionary confirming the message send operation. It contains the
            following keys:
            success (bool): True if the message was successfully queued for
                sending, False otherwise.
            status_message (str): A human-readable message describing the
                outcome (e.g., 'Message sent successfully',
                'Failed: Recipient not found').
            message_id (Optional[str]): The server-assigned ID of the sent
                message, if the send was successful and an ID is
                available immediately.
            timestamp (Optional[str]): ISO-8601 formatted timestamp of when
                the server acknowledged the send request.

    Raises:
        InvalidRecipientError: If the receiver_identifier JID or phone number format is
            invalid, or the receiver_identifier does not exist on WhatsApp.
        ValidationError: If input arguments fail validation.
        InvalidJIDError: If current user JID is missing.
        ChatNotFoundError: If a chat is unexpectedly not found (e.g., group chat inconsistency).
        ContactNotFoundError: If a contact is unexpectedly not found during processing.
        MessageSendFailedError: If the message_body_text could not be persisted to the chat.
        OperationFailedError: For other failures during the process, such as chat creation issues.
        MessageNotFoundError: If the message_body_text to reply to is not found.
    """
    from whatsapp.messages import send_message
    return send_message(
        recipient=receiver_identifier,
        message=message_body_text,
        reply_to_message_id=reply_target_message_id
    )
