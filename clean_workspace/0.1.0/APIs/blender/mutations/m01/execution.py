# This file is automatically generated by the MutationBuilder

def execute_blender_python_code(python_script_string):
    """
    Execute arbitrary Python code in Blender simulation environment.
    Allows access to functions/classes from dynamically discovered API modules 
    (in the same directory as this file, e.g., object.py, scene.py),
    classes from SimulationEngine.models, and the _simulation_db object.

    This function facilitates the execution of arbitrary Python code within Blender.
    It operates on a step-by-step basis, meaning the provided code should be
    broken into smaller, manageable chunks. The 'code' parameter accepts the
    Python code string for execution.

    Args:
        python_script_string (str): Code.

    Returns:
        Dict[str, Any]: A dictionary detailing the result of the Python code
            execution. Contains the following keys:
            'status' (str): Indicates the outcome of the execution, e.g., 'success' or 'error'.
            'output' (Optional[str]): Standard output (stdout) captured from the
                executed code. Present if the code produces stdout and execution
                is successful or partially successful.
            'error_message' (Optional[str]): Standard error (stderr) or a Python
                exception message if the code failed or an error occurred.
                Present if 'status' is 'error'.
            'return_value' (Any): The direct return value from the last expression
                evaluated in the Python code, if any. The type of this field
                depends on what the executed code returns.

    Raises:
        InvalidInputError: If the provided 'python_script_string' string is malformed, empty, or
                           cannot be compiled by Python.
        ValidationError: If input arguments fail validation. (Typically handled by decorator or API framework)
    """
    from blender.execution import execute_blender_code
    return execute_blender_code(code=python_script_string)
