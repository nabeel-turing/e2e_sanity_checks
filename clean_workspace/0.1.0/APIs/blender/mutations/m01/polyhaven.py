# This file is automatically generated by the MutationBuilder

def list_polyhaven_asset_categories(polyhaven_asset_class='hdris'):
    """
    Get a list of categories for a specific asset type on Polyhaven.

    Args:
        polyhaven_asset_class (str, optional): The type of asset to get categories for 
                                    (hdris, textures, models, all). Defaults to "hdris".

    Returns:
        List[str]: A list of category names available for the specified asset type on Polyhaven.

    Raises:
        InvalidAssetTypeError: If the provided polyhaven_asset_class is not one of the supported values 
                               ('hdris', 'textures', 'models', 'all') or is otherwise unrecognized by Polyhaven.
    """
    from blender.polyhaven import get_polyhaven_categories
    return get_polyhaven_categories(asset_type=polyhaven_asset_class)


def find_polyhaven_resources(resource_type_filter='all', category_filter_list=None):
    """
    Search for assets on Polyhaven with optional filtering.

    This function searches for assets on Polyhaven. It allows specifying the
    `asset_type` (such as 'hdris', 'textures', 'models', or 'all') and an
    optional comma-separated list of `categories` for filtering. The function
    returns a list of matching assets, where each asset includes basic
    information.

    Args:
        resource_type_filter (Any): Asset Type. Defaults to "all". Type validation is handled internally.
        category_filter_list (Any): Categories. Defaults to None. Type validation is handled internally.

    Returns:
        List[Dict[str, Any]]: A list of matching Polyhaven assets. Each dictionary
            in the list represents an asset and contains the following keys:
            asset_id (str): The unique identifier for the asset on Polyhaven.
            name (str): The display name of the asset.
            type (str): The type of the asset (e.g., 'hdri', 'texture', 'model').
            tags (List[str]): A list of tags associated with the asset.
            author (Optional[str]): The author or creator of the asset.
            resolution_options (List[str]): Available resolutions for download
                (e.g., "1k", "2k", "4k").
            file_format_options (List[str]): Available file formats for download
                (e.g., "hdr", "exr" for HDRIs; "jpg", "png" for textures;
                "gltf", "fbx" for models).

    Raises:
        InvalidInputError: If the search parameters (e.g., resource_type_filter, category_filter_list)
            are invalid or malformed.
    """
    from blender.polyhaven import search_polyhaven_assets
    return search_polyhaven_assets(asset_type=resource_type_filter, categories=category_filter_list)


def fetch_and_import_polyhaven_asset(
    polyhaven_asset_identifier,
    polyhaven_resource_type,
    download_quality_setting='1k',
    asset_file_extension=None
):
    """
    This function downloads a Polyhaven asset, identified by its `asset_id` and `asset_type`, and imports it into Blender.

    Args:
        polyhaven_asset_identifier (str): The ID of the asset to download.
        polyhaven_resource_type (str): The type of asset (hdris, textures, models).
        download_quality_setting (str): The resolution to download (e.g., 1k, 2k, 4k). Defaults to "1k".
        asset_file_extension (Optional[str]): Optional file format (e.g., hdr, exr for HDRIs; jpg, png for textures; gltf, fbx for models). Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary detailing the outcome of the asset download and import operation. It contains the following keys:
            status (str): Indicates if the operation was a 'success' or 'failure'.
            message (str): A human-readable message providing more details about the outcome.
            asset_name_in_blender (Optional[str]): If successful, the name assigned to the imported asset, material, or world object within Blender. Present only on success and if applicable.
            file_path (Optional[str]): If successful, the local file system path where the asset was downloaded. Present only on success.

    Raises:
        AssetNotFoundError: If the specified polyhaven_asset_identifier does not exist on Polyhaven or is not available for download.
        DownloadError: If there's an issue downloading the asset file (invalid download_quality_setting/format requested).
        BlenderImportError: If there's an issue importing the downloaded asset into Blender.
        InvalidInputError: If parameters like download_quality_setting or asset_file_extension are invalid for the given asset or polyhaven_resource_type.
        ValidationError: If input arguments fail validation.
    """
    from blender.polyhaven import download_polyhaven_asset
    return download_polyhaven_asset(
        asset_id=polyhaven_asset_identifier,
        asset_type=polyhaven_resource_type,
        resolution=download_quality_setting,
        file_format=asset_file_extension
    )


def verify_polyhaven_addon_enabled():
    """
    Checks if PolyHaven integration is enabled in Blender and returns a message indicating whether
    PolyHaven features are available.

    Returns:
        Dict[str, Any]: A dictionary containing information about the Polyhaven integration status, with the following keys:
            is_enabled (bool): True if Polyhaven integration (e.g., the addon) is enabled and functional, False otherwise.
            message (str): A descriptive message about the integration status.
    """
    from blender.polyhaven import get_polyhaven_status
    return get_polyhaven_status()
