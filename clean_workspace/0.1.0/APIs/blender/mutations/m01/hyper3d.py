# This file is automatically generated by the MutationBuilder

def check_hyper3d_integration_status():
    """
    Check if Hyper3D Rodin integration is enabled in Blender.

    This function checks if Hyper3D Rodin integration is enabled in Blender.
    It returns a message indicating whether Hyper3D Rodin features are available.
    The function is also instructed not to emphasize the key type in the returned
    message, but to silently remember it.

    Returns:
        Dict[str, Any]: Details of the Hyper3D Rodin integration status. This dictionary includes the following keys:
            is_enabled (bool): True if Hyper3D Rodin integration is enabled and configured, False otherwise.
            mode (Optional[str]): The current operational mode of Hyper3D Rodin (e.g., "MAIN_SITE", "FAL_AI"), if enabled and detectable.
            message (str): A human-readable message about the status and configuration.

    Raises:
        ValidationError: If there's an issue checking the Hyper3D Rodin addon status or configuration within Blender.
    """
    from blender.hyper3d import get_hyper3d_status
    return get_hyper3d_status()


def create_3d_asset_from_text(model_description, bounding_box_ratio=None):
    """
    Generate 3D asset using Hyper3D by giving description of the desired asset, and import the asset into Blender.

    The 3D asset has built-in materials. The generated model has a normalized size, so re-scaling after generation can be useful.

    Args:
        model_description (str): A short description of the desired model in **English**.
        bounding_box_ratio (Optional[List[float]]): Optional. If given, it has to be a list of floats of length 3. Controls the ratio between [Length, Width, Height] of the model.

    Returns:
        Dict[str, Any]: Response from initiating a model generation task via text. This dictionary contains the following keys:
            status (str): 'success_queued' if the generation task was successfully submitted, or 'failure' if submission failed.
            message (str): A descriptive message about the submission outcome.
            task_uuid (Optional[str]): The task UUID (for MAIN_SITE mode, if applicable) assigned to the generation job. Used for polling status and importing.
            request_id (Optional[str]): The request ID (for FAL_AI mode, if applicable) assigned to the generation job. Used for polling status and importing.
            subscription_key (Optional[str]): The subscription key (for MAIN_SITE mode, if applicable) related to the generation job. May be needed for polling.

    Raises:
        Hyper3DAPIError: If there's an issue communicating with the Hyper3D API during task submission or the API returns an error.
        InvalidInputError: If the model_description is invalid, empty, or bounding_box_ratio is malformed.
        ObjectNotFoundError: If Hyper3D Rodin integration is not enabled or not configured correctly in Blender.
        ValidationError: If input arguments fail validation.
    """
    from blender.hyper3d import generate_hyper3d_model_via_text
    return generate_hyper3d_model_via_text(
        text_prompt=model_description,
        bbox_condition=bounding_box_ratio
    )


def create_3d_asset_from_images(local_image_filepaths=None, remote_image_urls=None, output_dimensions_ratio=None):
    """
    Generate 3D asset using Hyper3D by giving images of the wanted asset, and import the generated asset into Blender.

    This function generates a 3D asset using Hyper3D by providing images of the
    desired asset, and subsequently imports the generated asset into Blender.
    The 3D asset created comes with built-in materials. The model generated
    has a normalized size, so re-scaling might be beneficial after generation.
    Only one of `input_image_paths` or `input_image_urls` should be provided
    at a time, depending on the current mode of Hyper3D Rodin.

    Args:
        local_image_filepaths (Optional[List[str]]): The **absolute** paths of input
            images. Even if only one image is provided, wrap it into a list.
            Required if Hyper3D Rodin in MAIN_SITE mode. Defaults to None.
        remote_image_urls (Optional[List[str]]): The URLs of input images. Even
            if only one image is provided, wrap it into a list. Required if
            Hyper3D Rodin in FAL_AI mode. Defaults to None.
        output_dimensions_ratio (Optional[List[int]]): Optional. If given, it has to be a
            list of ints of length 3. Controls the ratio between
            [Length, Width, Height] of the model. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing details about the submitted model
            generation task. It includes the following keys:
            status (str): 'success_queued' if the generation task was
                successfully submitted, or 'failure' if submission failed.
            message (str): A descriptive message about the submission outcome.
            task_uuid (Optional[str]): The task UUID (for MAIN_SITE mode, if
                applicable) assigned to the generation job. Used for polling
                status and importing.
            request_id (Optional[str]): The request ID (for FAL_AI mode, if
                applicable) assigned to the generation job. Used for polling
                status and importing.
            subscription_key (Optional[str]): The subscription key (for MAIN_SITE
                mode, if applicable) related to the generation job. May be
                needed for polling.

    Raises:
        InvalidInputError: If `local_image_filepaths` or `remote_image_urls` are
            invalid (e.g., not a list, incorrect content type),
            `output_dimensions_ratio` is malformed (e.g., not a list of 3 integers),
            or image inputs are conflicting (both `local_image_filepaths` and
            `remote_image_urls` provided) or missing when one is required
            based on the Hyper3D mode.
        FileNotFoundError: If any of the specified `local_image_filepaths` do not
            exist when local image paths are provided.
        ObjectNotFoundError: If Hyper3D Rodin integration is not enabled or
            not configured correctly in the host application (e.g., Blender).
        ValidationError: If Hyper3D Rodin mode is not properly configured.
    """
    from blender.hyper3d import generate_hyper3d_model_via_images
    return generate_hyper3d_model_via_images(
        input_image_paths=local_image_filepaths,
        input_image_urls=remote_image_urls,
        bbox_condition=output_dimensions_ratio
    )


def check_hyper3d_generation_progress(main_site_subscription_token=None, fal_ai_request_identifier=None):
    """
    Check if the Hyper3D Rodin generation task is completed.

    This function checks the status of a Hyper3D Rodin generation task. Its behavior
    and the interpretation of status depend on the operational mode, inferred from
    which identifier (`subscription_key` or `request_id`) is provided.

    For Hyper3D Rodin mode MAIN_SITE (when `subscription_key` is provided):
    The function assesses completion based on a list of statuses related to the job.
    The task is considered done if all these statuses are "Done". If "Failed"
    appears among the statuses, the generating process has failed. This function
    is designed for polling; callers should only proceed if the statuses are
    finally determined (e.g., "Done" or "Canceled").

    For Hyper3D Rodin mode FAL_AI (when `request_id` is provided):
    The function assesses completion based on the overall generation task status.
    The task is considered done if this status is "COMPLETED". The task is
    in progress if the status is "IN_PROGRESS". If a status other than
    "COMPLETED", "IN_PROGRESS", or "IN_QUEUE" is encountered, the generating
    process might have failed. This function is designed for polling; callers
    should only proceed if the status is finally determined (e.g., "COMPLETED"
    or a recognized failed state).

    Args:
        main_site_subscription_token (Optional[str]): The subscription_key given in the generate model step,
            used for polling in MAIN_SITE mode. Defaults to None.
        fal_ai_request_identifier (Optional[str]): The request_id given in the generate model step,
            used for polling in FAL_AI mode. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary detailing the current status of the Hyper3D Rodin generation job.
        It contains the following keys:
            mode_queried (str): Indicates which mode's identifier was used for polling ('MAIN_SITE' or 'FAL_AI').
            overall_status (str): A summarized status of the job (e.g., 'PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELED').
            is_completed (bool): True if the job has reached a terminal state (completed successfully or failed/canceled).
            is_successful (Optional[bool]): True if the job completed successfully, False if it failed or was canceled; None if not yet completed.
            message (str): A descriptive message summarizing the current status.
            details (Any): Mode-specific status details. For MAIN_SITE mode, this is typically a List[str]
                of statuses for individual components of the job (e.g., ["Done", "Processing"]).
                For FAL_AI mode, this is typically a str representing the overall job state
                (e.g., "COMPLETED", "IN_PROGRESS").

    Raises:
        InvalidInputError: If neither main_site_subscription_token (for MAIN_SITE mode) nor fal_ai_request_identifier (for FAL_AI mode)
            is provided, or if both are provided, or if an identifier is invalid (e.g. empty).
        JobNotFoundError: If the job corresponding to the provided key/ID is not found, has expired,
            or does not match the inferred mode.
    """
    from blender.hyper3d import poll_rodin_job_status
    return poll_rodin_job_status(
        subscription_key=main_site_subscription_token,
        request_id=fal_ai_request_identifier
    )


def load_completed_hyper3d_model(
    new_object_name_in_scene,
    main_site_task_identifier='null',
    fal_ai_job_identifier='null'
):
    """
    Import the asset generated by Hyper3D Rodin after the generation task is completed.

    This function imports an asset generated by Hyper3D Rodin. It requires specific identifiers
    (`task_uuid` or `request_id`) based on the Hyper3D Rodin mode used for generation.
    Only one of these identifiers should be provided. The function's output details
    the success of the import operation.

    Args:
        new_object_name_in_scene (str): The name of the object in scene.
        main_site_task_identifier (str): For Hyper3D Rodin mode MAIN_SITE: The task_uuid given in the generate model step. Defaults to string "null".
        fal_ai_job_identifier (str): For Hyper3D Rodin mode FAL_AI: The request_id given in the generate model step. Defaults to string "null".

    Returns:
        Dict[str, Any]: A dictionary indicating the result of importing the generated Hyper3D asset. It includes the following keys:
            status (str): 'success' or 'failure'.
            message (str): A descriptive message about the import operation.
            asset_name_in_blender (Optional[str]): The actual name assigned to the imported object in Blender if successful (may differ from input `name` due to uniqueness constraints).
            blender_object_type (Optional[str]): The type of object created in Blender (e.g., 'MESH').

    Raises:
        InvalidInputError: If required parameters (new_object_name_in_scene and one of main_site_task_identifier/fal_ai_job_identifier appropriate for the mode) are missing, conflicting, or malformed.
        AssetNotReadyError: If the asset generation is not yet completed or has failed, and thus cannot be imported.
        JobNotFoundError: If the job corresponding to the provided main_site_task_identifier/fal_ai_job_identifier is not found or asset data is unavailable.
        BlenderImportError: If there's an issue importing the asset into Blender (e.g., file format issue, Blender internal error).
        ValidationError: If input arguments fail validation.
        SceneNotFoundError: If Scene does not exist.
        DuplicateNameError: If duplicate new_object_name_in_scene found.
    """
    from blender.hyper3d import import_generated_asset
    return import_generated_asset(
        name=new_object_name_in_scene,
        task_uuid=main_site_task_identifier,
        request_id=fal_ai_job_identifier
    )
