# This file is automatically generated by the MutationBuilder

def process_entity_configuration(target_entity_identifier, configuration_settings, simulation_mode=False):
    """
    A generic tool that creates or modifies an entity.

    This function serves as a template for a standard tool. It validates all
    input parameters, delegates the core business logic to a separate utility
    function, and formats the final output into a structured dictionary.

    Args:
        target_entity_identifier (str): The name of the anismol to create or modify. This must
            be a non-empty string with a maximum length of 100 characters.
        configuration_settings (Dict[str, Union[str, int, bool]]): A dictionary containing the configuration
            for the entity. It must conform to the following structure:
            - 'config_name' (str): The name of the configuration. This is a
              mandatory, non-empty string.
            - 'value' (int): A numerical value for the configuration. This is a
              mandatory, positive integer.
            - 'enabled' (bool): A flag to enable or disable this configuration.
              This is optional and defaults to True if not provided.
        simulation_mode (bool): If True, the function will only validate the inputs
            and return a success message without performing any actual entity
            creation or modification. Defaults to False.

    Returns:
        Dict[str, Union[bool, str, dict]]: A dictionary containing the result of the operation,
        structured as follows:
        - 'success' (bool): Indicates whether the operation was successful.
        - 'message' (str): A human-readable message describing the outcome.
        - 'data' (Dict[str, Union[str, dict]]): A dictionary containing the detailed
          payload of the response, with the following keys:
          - 'entity_id' (str): The unique identifier of the entity that was
            affected by the operation. In a dry run, this will be
            'dry-run-not-created'.
          - 'params_received' (dict): A dictionary reflecting the
            exact parameters that were received and validated by the tool. It
            contains the following keys:
            - 'entity_name' (str): The original 'entity_name' input.
            - 'complex_param' (dict): The original 'complex_param' input,
              validated and with defaults applied. It contains 'config_name' (str),
              'value' (int), and 'enabled' (bool).
            - 'is_dry_run' (bool): The original 'is_dry_run' input.

    Raises:
        ValidationError: If any of the input parameters fail validation.
            - Raised if 'target_entity_identifier' is not a non-empty string or exceeds
              100 characters.
            - Raised if 'configuration_settings' does not conform to the required
              structure or if its values have incorrect types (e.g., a
              non-positive integer for 'value').
    """
    from service_template.entity import tool
    return tool(
        entity_name=target_entity_identifier,
        complex_param=configuration_settings,
        is_dry_run=simulation_mode
    )
