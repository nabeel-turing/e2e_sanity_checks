# This file is automatically generated by the MutationBuilder

def navigate_to_settings_page(target_setting_category=None):
    """
    Navigates to the settings page for a given setting type.

    Args:
        target_setting_category (Optional[str]): Setting to open. Can be a DeviceSettingType enum value as string.
                      Use "UNSPECIFIED" if the user only mentions "settings."
                      If None or UNSPECIFIED, open general device settings page.
                      Valid values include: "UNSPECIFIED", "ACCESSIBILITY", "ACCOUNT", "AIRPLANE_MODE", 
                      "ALARM_VOLUME", "APPLICATION", "APP_DATA_USAGE", "AUTO_ROTATE", "BARD", "BATTERY", 
                      "BATTERY_SAVER", "BIOMETRIC", "BLUETOOTH", "BLUETOOTH_PAIRING", "BRIGHTNESS", 
                      "CALL_VOLUME", "CAST", "DARK_THEME", "DATA_SAVER", "DATE_TIME", "DEVELOPER_OPTION", 
                      "DEVICE_INFO", "DISPLAY", "DO_NOT_DISTURB", "GEMINI", "GOOGLE_ASSISTANT", "HOT_SPOT", 
                      "INTERNAL_STORAGE", "LANGUAGE", "LOCATION", "LOCK_SCREEN", "MEDIA_VOLUME", "NETWORK", 
                      "NFC", "NIGHT_MODE", "NOTIFICATION_VOLUME", "RING_VOLUME", "TALK_BACK", "VOLUME", 
                      "VIBRATION", "WIFI"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "open_settings"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting_type (str): The setting type that was opened, or "UNSPECIFIED" if None
                    - message (str): The same as the 'result' field, describing what was opened

    Raises:
        ValueError: If target_setting_category string is not a valid DeviceSettingType

    Example:
        >>> open()  # Opens general settings
        >>> open("WIFI")  # Opens WiFi settings
        >>> open("UNSPECIFIED")  # Opens general settings
    """
    from device_setting.device_setting import open
    return open(setting_type=target_setting_category)


def retrieve_setting_value(setting_identifier):
    """
    Gets the current value of a device setting.

    Args:
        setting_identifier (str): Setting to get the value of. Must be one of the getable device settings.
                      Valid values include: "AIRPLANE_MODE", "ALARM_VOLUME", "AUTO_ROTATE", "BATTERY", 
                      "BATTERY_SAVER", "BLUETOOTH", "CALL_VOLUME", "DO_NOT_DISTURB", "FLASHLIGHT", 
                      "HOT_SPOT", "MEDIA_VOLUME", "NETWORK", "NFC", "NIGHT_MODE", "NOTIFICATION_VOLUME", 
                      "RING_VOLUME", "TALK_BACK", "VOLUME", "VIBRATION", "WIFI"

    Returns:
        Dict[str, Any]: Setting information containing:
            - setting_type (str): The type of the setting
            - percentage_value (Optional[int]): Current percentage value between 0-100 (if applicable)
            - on_or_off (Optional[str]): Current toggle state "on" or "off" (if applicable)
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "get_setting"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting_type (str): The setting type that was retrieved
                    - message (str): Description of the setting retrieval action

    Raises:
        ValueError: If setting_identifier is None, empty, or not a valid getable setting

    Example:
        >>> get("WIFI")  # Get WiFi status
        >>> get("BATTERY")  # Get battery level
        >>> get("MEDIA_VOLUME")  # Get media volume
    """
    from device_setting.device_setting import get
    return get(setting_type=setting_identifier)


def enable_device_setting(feature_to_activate):
    """
    Turns on a device setting.

    Args:
        feature_to_activate (str): Setting to turn on. Must be one of the toggleable device settings.
                      Valid values include: "AIRPLANE_MODE", "AUTO_ROTATE", "BATTERY_SAVER", 
                      "BLUETOOTH", "DO_NOT_DISTURB", "FLASHLIGHT", "HOT_SPOT", "NETWORK", 
                      "NFC", "NIGHT_MODE", "TALK_BACK", "VIBRATION", "WIFI"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "toggle_setting"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting (str): The setting type that was turned on
                    - state (str): The new state, always "on"
                    - message (str): The same as the 'result' field, describing what was turned on

    Raises:
        ValueError: If feature_to_activate is not a valid toggleable feature_to_activate

    Example:
        >>> on("WIFI")  # Turn on WiFi
        >>> on("BLUETOOTH")  # Turn on Bluetooth
        >>> on("AIRPLANE_MODE")  # Turn on airplane mode
    """
    from device_setting.device_setting import on
    return on(setting=feature_to_activate)


def disable_device_setting(feature_to_deactivate):
    """
    Turns off a device setting.

    Args:
        feature_to_deactivate (str): Setting to turn off. Must be one of the toggleable device settings.
                      Valid values include: "AIRPLANE_MODE", "AUTO_ROTATE", "BATTERY_SAVER", 
                      "BLUETOOTH", "DO_NOT_DISTURB", "FLASHLIGHT", "HOT_SPOT", "NETWORK", 
                      "NFC", "NIGHT_MODE", "TALK_BACK", "VIBRATION", "WIFI"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "toggle_setting"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting (str): The setting type that was turned off
                    - state (str): The new state, always "off"
                    - message (str): The same as the 'result' field, describing what was turned off

    Raises:
        ValueError: If feature_to_deactivate is not a valid toggleable feature_to_deactivate

    Example:
        >>> off("WIFI")  # Turn off WiFi
        >>> off("BLUETOOTH")  # Turn off Bluetooth
        >>> off("AIRPLANE_MODE")  # Turn off airplane mode
    """
    from device_setting.device_setting import off
    return off(setting=feature_to_deactivate)


def silence_volume_stream(audio_category_to_mute=None):
    """
    Mutes the device volume.

    Args:
        audio_category_to_mute (Optional[str]): The specific volume setting to mute. If None or "UNSPECIFIED", mutes all volume settings.
                                Valid options: "ALARM", "CALL", "MEDIA", "NOTIFICATION", "RING", "UNSPECIFIED"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "mute_volume"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting (str): The volume setting that was muted, or "UNSPECIFIED" if all volumes
                    - message (str): The same as the 'result' field, describing what was muted

    Raises:
        ValueError: If audio_category_to_mute is not a valid volume audio_category_to_mute

    Example:
        >>> mute()  # Mute all volume settings
        >>> mute("MEDIA")  # Mute only media volume
        >>> mute("ALARM")  # Mute only alarm volume
        >>> mute("UNSPECIFIED")  # Mute all volume settings
    """
    from device_setting.device_setting import mute
    return mute(setting=audio_category_to_mute)


def restore_volume_stream(audio_category_to_unmute=None):
    """
    Unmutes the device volume by setting to default levels.

    Args:
        audio_category_to_unmute (Optional[str]): The specific volume setting to unmute. If None or "UNSPECIFIED", unmutes all volume settings.
                                Valid options: "ALARM", "CALL", "MEDIA", "NOTIFICATION", "RING", "UNSPECIFIED"
                                Default levels: ALARM_VOLUME=50, CALL_VOLUME=70, MEDIA_VOLUME=60, 
                                               NOTIFICATION_VOLUME=40, RING_VOLUME=80, VOLUME=65

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "unmute_volume"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting (str): The volume setting that was unmuted, or "UNSPECIFIED" if all volumes
                    - message (str): The same as the 'result' field, describing what was unmuted

    Raises:
        ValueError: If audio_category_to_unmute is not a valid volume audio_category_to_unmute

    Example:
        >>> unmute()  # Unmute all volume settings to defaults
        >>> unmute("MEDIA")  # Unmute media volume to 60%
        >>> unmute("ALARM")  # Unmute alarm volume to 50%
        >>> unmute("UNSPECIFIED")  # Unmute all volume settings to defaults
    """
    from device_setting.device_setting import unmute
    return unmute(setting=audio_category_to_unmute)


def modify_volume_level_by_offset(percentage_adjustment, volume_type_to_adjust=None):
    """
    Adjusts the volume by a certain percentage.

    Args:
        percentage_adjustment (int): The amount to adjust the volume by, in percentage points. Can be positive or negative.
                 Values are clamped between 0 and 100 after adjustment.
        volume_type_to_adjust (Optional[str]): The specific volume setting to adjust. If None or "UNSPECIFIED", adjusts all volume settings.
                                Valid options: "ALARM", "CALL", "MEDIA", "NOTIFICATION", "RING", "UNSPECIFIED"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "adjust_volume"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting (str): The volume setting that was adjusted, or "UNSPECIFIED" if all volumes
                    - adjustment (int): The percentage amount the volume was adjusted by
                    - message (str): The same as the 'result' field, describing the adjustment

    Raises:
        ValueError: If volume_type_to_adjust is not a valid volume volume_type_to_adjust

    Example:
        >>> adjust_volume(10)  # Increase all volumes by 10%
        >>> adjust_volume(-5)  # Decrease all volumes by 5%
        >>> adjust_volume(15, "MEDIA")  # Increase media volume by 15%
        >>> adjust_volume(-10, "RING")  # Decrease ring volume by 10%
    """
    from device_setting.device_setting import adjust_volume
    return adjust_volume(by=percentage_adjustment, setting=volume_type_to_adjust)


def assign_specific_volume_level(target_volume_percentage, volume_channel_to_configure=None):
    """
    Sets the volume to a specific percentage.

    Args:
        target_volume_percentage (int): The volume level to set to, in percentage points. Must be between 0 and 100.
        volume_channel_to_configure (Optional[str]): The specific volume setting to set. If None or "UNSPECIFIED", sets all volume settings.
                                Valid options: "ALARM", "CALL", "MEDIA", "NOTIFICATION", "RING", "UNSPECIFIED"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "set_volume"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting (str): The volume setting that was set, or "UNSPECIFIED" if all volumes
                    - volume (int): The volume level that was set (0-100)
                    - message (str): The same as the 'result' field, describing what was set

    Raises:
        ValueError: If volume value is less than 0 or greater than 100, or if volume_channel_to_configure is not a valid volume volume_channel_to_configure

    Example:
        >>> set_volume(50)  # Set all volumes to 50%
        >>> set_volume(75, "MEDIA")  # Set media volume to 75%
        >>> set_volume(0, "ALARM")  # Set alarm volume to 0%
        >>> set_volume(100, "RING")  # Set ring volume to 100%
    """
    from device_setting.device_setting import set_volume
    return set_volume(to=target_volume_percentage, setting=volume_channel_to_configure)


def fetch_device_status_summary(insight_topic=None):
    """
    Generates device insights based on user's current device state.

    Args:
        insight_topic (Optional[str]): The type of device state to get insights for. If None or "UNCATEGORIZED",
                                          returns general device insights. Valid options: "UNCATEGORIZED", "BATTERY", "STORAGE"

    Returns:
        Dict[str, Any]: Action summary containing:
            - result (str): Result message of the action
            - card_id (str): Card identifier for UI components
            - action_card_content_passthrough (str): Action card content for UI display
                The action_card_content_passthrough is a JSON string with the following keys:
                    - action (str): The action type, always "get_device_insights"
                    - timestamp (str): ISO timestamp when the card was generated
                    - setting_type (str): Always "UNSPECIFIED" (for UI compatibility)
                    - insights (List[str]): List of insight strings for the requested device state
                    - message (str): The same as the 'result' field, a summary of the insights

    Raises:
        ValueError: If insight_topic is not a valid device state type

    Example:
        >>> get_device_insights()  # Get general device insights
        >>> get_device_insights("BATTERY")  # Get battery-specific insights
        >>> get_device_insights("STORAGE")  # Get storage-specific insights
        >>> get_device_insights("UNCATEGORIZED")  # Get general device insights
    """
    from device_setting.device_setting import get_device_insights
    return get_device_insights(device_state_type=insight_topic)
