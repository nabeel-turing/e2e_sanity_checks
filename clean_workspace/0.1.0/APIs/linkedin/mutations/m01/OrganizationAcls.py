# This file is automatically generated by the MutationBuilder

def fetch_organization_permissions_for_member(
    filter_criterion,
    member_urn_for_lookup,
    access_control_fields_to_show=None,
    permission_list_offset=0,
    permission_list_limit=10
):
    """
    Retrieves ACL records by roleAssignee URN with optional field projection and pagination. Retrieve information about the roles and permissions that a specific LinkedIn member (the "role assignee") has within one or more organizations on LinkedIn

    Args:
        filter_criterion (str): Query parameter expected to be 'roleAssignee'.
        member_urn_for_lookup (str): URN of the person whose ACL records are requested.
        access_control_fields_to_show (Optional[str]): Field projection syntax for controlling which fields to return.
            The projection string should consist of comma-separated field names and may optionally
            be enclosed in parentheses. Defaults to None.
        permission_list_offset (int): Starting index for pagination. Defaults to 0.
        permission_list_limit (int): Number of items to return. Defaults to 10.

    Returns:
        Dict[str, Any]:
        - If query_field is not 'roleAssignee', returns a dictionary with the key "error" and the value "Invalid query parameter. Expected 'roleAssignee'."
        - On successful retrieval, returns a dictionary with the following keys and value types:
            - 'data' (List[Dict[str, Any]]): List of ACL record dictionaries with keys:
                - 'aclId' (str): ACL record's unique identifier.
                - 'roleAssignee' (str): URN of the person assigned the role (e.g., 'urn:li:person:1').
                - 'role' (str): Role assigned to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR').
                - 'organization' (str): URN of the organization (e.g., 'urn:li:organization:1').
                - 'state' (str): Current state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED').

    Raises:
        None: This function handles errors internally and returns them in the response.
    """
    from linkedin.OrganizationAcls import get_organization_acls_by_role_assignee
    return get_organization_acls_by_role_assignee(
        query_field=filter_criterion,
        role_assignee=member_urn_for_lookup,
        projection=access_control_fields_to_show,
        start=permission_list_offset,
        count=permission_list_limit
    )


def establish_new_organization_role(access_control_record_data):
    """
    Creates a new organization ACL record in the database.

    Args:
        access_control_record_data (Dict[str, Any]): Dictionary containing the new ACL record data with keys:
            - 'roleAssignee' (str): URN of the person to assign the role to (e.g., 'urn:li:person:1').
            - 'role' (str): Role to assign to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR').
            - 'organization' (str): URN of the organization (e.g., 'urn:li:organization:1').
            - 'state' (str): Initial state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED').

    Returns:
        Dict[str, Any]:
        - On successful creation, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of created ACL record with keys:
                - 'aclId' (str): Newly assigned unique identifier.
                - 'roleAssignee' (str): URN of the person assigned the role (e.g., 'urn:li:person:1').
                - 'role' (str): Role assigned to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR').
                - 'organization' (str): URN of the organization (e.g., 'urn:li:organization:1').
                - 'state' (str): Current state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED').

    Raises:
        None: This function handles errors internally and returns them in the response.
    """
    from linkedin.OrganizationAcls import create_organization_acl
    return create_organization_acl(acl_data=access_control_record_data)


def revise_organization_access_control(access_control_identifier, updated_permission_attributes):
    """
    Updates an existing organization ACL record in the database.

    Args:
        access_control_identifier (str): Unique identifier of the ACL record to update.
        updated_permission_attributes (Dict[str, Any]): Dictionary containing the updated ACL data with keys:
            - 'roleAssignee' (str): Updated URN of the person assigned the role (e.g., 'urn:li:person:1').
            - 'role' (str): Updated role assigned to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR').
            - 'organization' (str): Updated URN of the organization (e.g., 'urn:li:organization:1').
            - 'state' (str): Updated state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED').

    Returns:
        Dict[str, Any]:
        - If ACL record not found, returns a dictionary with the key "error" and the value "ACL record not found."
        - On successful update, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of updated ACL record with keys:
                - 'aclId' (str): ACL record's unique identifier.
                - 'roleAssignee' (str): Updated URN of the person assigned the role (e.g., 'urn:li:person:1').
                - 'role' (str): Updated role assigned to the person (one of 'ADMINISTRATOR', 'DIRECT_SPONSORED_CONTENT_POSTER', 'RECRUITING_POSTER', 'LEAD_CAPTURE_ADMINISTRATOR', 'LEAD_GEN_FORMS_MANAGER', 'ANALYST', 'CURATOR', 'CONTENT_ADMINISTRATOR').
                - 'organization' (str): Updated URN of the organization (e.g., 'urn:li:organization:1').
                - 'state' (str): Updated state of the ACL (one of 'ACTIVE', 'REQUESTED', 'REJECTED', 'REVOKED').

    Raises:
        None: This function handles errors internally and returns them in the response.
    """
    from linkedin.OrganizationAcls import update_organization_acl
    return update_organization_acl(
        acl_id=access_control_identifier,
        acl_data=updated_permission_attributes
    )


def rescind_organization_access_right(permission_record_id_to_remove):
    """
    Deletes an organization ACL record from the database.

    Args:
        permission_record_id_to_remove (str): Unique identifier of the ACL record to delete.

    Returns:
        Dict[str, Any]:
        - If ACL record not found, returns a dictionary with the key "error" and the value "ACL record not found."
        - On successful deletion, returns a dictionary with the following keys and value types:
            - 'status' (str): Success message confirming deletion of the ACL record.

    Raises:
        None: This function handles errors internally and returns them in the response.
    """
    from linkedin.OrganizationAcls import delete_organization_acl
    return delete_organization_acl(acl_id=permission_record_id_to_remove)
