# This file is automatically generated by the MutationBuilder

def compose_new_share(new_post_content):
    """
    Creates a new post in the database.

    Args:
        new_post_content (Dict[str, Any]): Dictionary containing the new post data with keys:
            - 'author' (str): URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1').
            - 'commentary' (str): Content of the post.
            - 'visibility' (str): Visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER').

    Returns:
        Dict[str, Any]:
        - On successful creation, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of created post with keys:
                - 'id' (str): Newly assigned unique identifier.
                - 'author' (str): URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1').
                - 'commentary' (str): Content of the post.
                - 'visibility' (str): Visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER').

    Raises:
        TypeError: If 'new_post_content' is not a dictionary.
        pydantic.ValidationError: If 'new_post_content' does not conform to the required structure
            (missing keys, incorrect types, invalid visibility value, invalid author URN format).
    """
    from linkedin.Posts import create_post
    return create_post(post_data=new_post_content)


def get_single_post_by_identifier(share_identifier, post_fields_to_include=None, item_offset=0, item_limit=10):
    """
    Retrieves a post by its identifier with optional field projection.

    Args:
        share_identifier (str): Unique identifier of the post to retrieve.
        post_fields_to_include (Optional[str]): Field projection syntax for controlling which fields to return.
            The projection string should consist of comma-separated field names and may optionally
            be enclosed in parentheses. Defaults to None.
        item_offset (int): Starting index for pagination. Defaults to 0. Must be non-negative.
        item_limit (int): Number of items to return. Defaults to 10. Must be positive.

    Returns:
        Dict[str, Any]:
        - If post not found, returns a dictionary with the key "error" and the value "Post not found."
        - On successful retrieval, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of post data with keys:
                - 'id' (str): Post's unique identifier.
                - 'author' (str): URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1').
                - 'commentary' (str): Content of the post.
                - 'visibility' (str): Visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER').

    Raises:
        TypeError:
            - If 'share_identifier' is not a string.
            - If 'post_fields_to_include' is provided and is not a string.
            - If 'item_offset' is not an integer.
            - If 'item_limit' is not an integer.
        ValueError:
            - If 'item_offset' is a negative integer.
            - If 'item_limit' is not a positive integer (i.e., less than or equal to 0).
    """
    from linkedin.Posts import get_post
    return get_post(
        post_id=share_identifier,
        projection=post_fields_to_include,
        start=item_offset,
        count=item_limit
    )


def retrieve_posts_by_author_urn(creator_urn, posts_list_offset=0, posts_list_limit=10):
    """
    Searches for and lists posts based on the provided author identifier with pagination.

    Args:
        creator_urn (str): The identifier of the author (e.g., "urn:li:person:1" or "urn:li:organization:1") used to filter posts.
        posts_list_offset (int): Starting index for pagination. Must be a non-negative integer. Defaults to 0.
        posts_list_limit (int): Maximum number of posts to return. Must be a non-negative integer. Defaults to 10.

    Returns:
        Dict[str, Any]:
        - On successful retrieval, returns a dictionary with the following keys and value types:
            - 'data' (List[Dict[str, Any]]): List of post dictionaries with keys:
                - 'id' (str): Post's unique identifier.
                - 'author' (str): URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1').
                - 'commentary' (str): Content of the post.
                - 'visibility' (str): Visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER').

    Raises:
        TypeError: If 'creator_urn' is not a string.
        TypeError: If 'posts_list_offset' is not an integer.
        TypeError: If 'posts_list_limit' is not an integer.
        ValueError: If 'posts_list_offset' is a negative integer.
        ValueError: If 'posts_list_limit' is a negative integer.
    """
    from linkedin.Posts import find_posts_by_author
    return find_posts_by_author(author=creator_urn, start=posts_list_offset, count=posts_list_limit)


def revise_published_post(identifier_of_post_to_update, updated_post_attributes):
    """
    Updates an existing post in the database.

    Args:
        identifier_of_post_to_update (str): Unique identifier of the post to update.
        updated_post_attributes (Dict[str, Any]): Dictionary containing the updated post data with keys:
            - 'author' (str): Updated URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1').
            - 'commentary' (str): Updated content of the post.
            - 'visibility' (str): Updated visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER').

    Returns:
        Dict[str, Any]:
        - If post not found, returns a dictionary with the key "error" and the value "Post not found."
        - On successful update, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of updated post with keys:
                - 'id' (str): Post's unique identifier.
                - 'author' (str): Updated URN of the post author (e.g., 'urn:li:person:1' or 'urn:li:organization:1').
                - 'commentary' (str): Updated content of the post.
                - 'visibility' (str): Updated visibility setting of the post (one of 'PUBLIC', 'CONNECTIONS', 'LOGGED_IN', 'CONTAINER').
    """
    from linkedin.Posts import update_post
    return update_post(post_id=identifier_of_post_to_update, post_data=updated_post_attributes)


def retract_post_by_identifier(identifier_of_post_to_delete):
    """
    Deletes a post from the database.

    Args:
        identifier_of_post_to_delete (str): Unique identifier of the post to delete.

    Returns:
        Dict[str, Any]:
        - If post not found, returns a dictionary with the key "error" and the value "Post not found."
        - On successful deletion, returns a dictionary with the following keys and value types:
            - 'status' (str): Success message confirming deletion of the post.

    Raises:
        TypeError: If 'identifier_of_post_to_delete' is not a string.
        # Note: "Post not found" is handled via return value, not an exception.
    """
    from linkedin.Posts import delete_post
    return delete_post(post_id=identifier_of_post_to_delete)
