# This file is automatically generated by the MutationBuilder

def find_organizations_by_public_name(
    search_parameter_name,
    organization_public_name,
    fields_to_return=None,
    result_offset=0,
    max_results=10
):
    """
    Retrieves organization(s) by vanity name with optional field projection and pagination.

    Args:
        search_parameter_name (str): Query parameter expected to be 'vanityName'.
        organization_public_name (str): The organization's vanity name to search for.
        fields_to_return (Optional[str]): Field projection syntax for controlling which fields to return.
            The projection string should consist of comma-separated field names and may optionally
            be enclosed in parentheses. Defaults to None.
        result_offset (int): Starting index for pagination. Defaults to 0.
        max_results (int): Number of items to return. Defaults to 10.

    Returns:
        Dict[str, Any]:
        - If query_field is not 'vanityName', returns a dictionary with the key "error" and the value "Invalid query parameter. Expected 'vanityName'."
        - On successful retrieval, returns a dictionary with the following keys and value types:
            - 'data' (List[Dict[str, Any]]): List of organization data dictionaries with keys:
                - 'id' (int): Organization's unique identifier.
                - 'vanityName' (str): Organization's vanity name (e.g., 'global-tech').
                - 'name' (Dict[str, Any]): Localized organization name with keys:
                    - 'localized' (Dict[str, str]): Dictionary with locale keys mapping to the localized name, keys are locale codes in the format <language>_<COUNTRY>, for example:
                        - 'en_US' (str): English (US) localized name.
                    - 'preferredLocale' (Dict[str, str]): tells you which language/country version LinkedIn considers the "main" or "default" for that particular localized content. Dictionary with keys:
                        - 'country' (str): Country code (e.g., 'US').
                        - 'language' (str): Language code (e.g., 'en').
                - 'primaryOrganizationType' (str): Type of organization ('COMPANY' or 'SCHOOL').
    """
    from linkedin.Organizations import get_organizations_by_vanity_name
    return get_organizations_by_vanity_name(
        query_field=search_parameter_name,
        vanity_name=organization_public_name,
        projection=fields_to_return,
        start=result_offset,
        count=max_results
    )


def establish_new_organization(new_company_information):
    """
    Creates a new organization in the database.

    Args:
        new_company_information (Dict[str, Any]): Dictionary containing the new organization's data with keys:
            - 'vanityName' (str): Organization's vanity name (e.g., 'global-tech').
            - 'name' (Dict[str, Any]): Localized organization name with keys:
                - 'localized' (Dict[str, str]): Dictionary with locale keys mapping to the localized name, keys are locale codes in the format <language>_<COUNTRY>, for example:
                    - 'en_US' (str): English (US) localized name.
                - 'preferredLocale' (Dict[str, str]): tells you which language/country version LinkedIn considers the "main" or "default" for that particular localized content.Dictionary with keys:
                    - 'country' (str): Country code (e.g., 'US').
                    - 'language' (str): Language code (e.g., 'en').
            - 'primaryOrganizationType' (str): Type of organization ('COMPANY' or 'SCHOOL').

    Returns:
        Dict[str, Any]:
        - On successful creation, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of created organization with keys:
                - 'id' (int): Newly assigned unique identifier.
                - 'vanityName' (str): Organization's vanity name (e.g., 'global-tech').
                - 'name' (Dict[str, Any]): Localized organization name with keys:
                    - 'localized' (Dict[str, str]): Dictionary with locale keys mapping to the localized name, keys are locale codes in the format <language>_<COUNTRY>, for example:
                        - 'en_US' (str): English (US) localized name.
                    - 'preferredLocale' (Dict[str, str]): tells you which language/country version LinkedIn considers the "main" or "default" for that particular localized content. Dictionary with keys:
                        - 'country' (str): Country code (e.g., 'US').
                        - 'language' (str): Language code (e.g., 'en').
                - 'primaryOrganizationType' (str): Type of organization ('COMPANY' or 'SCHOOL').
    """
    from linkedin.Organizations import create_organization
    return create_organization(organization_data=new_company_information)


def revise_organization_details(identifier_for_organization, updated_company_attributes):
    """
    Updates an existing organization's data in the database.

    Args:
        identifier_for_organization (str): Unique identifier of the organization to update.
        updated_company_attributes (Dict[str, Any]): Dictionary containing the updated organization data with keys:
            - 'vanityName' (str): Updated vanity name (e.g., 'global-tech').
            - 'name' (Dict[str, Any]): Updated localized organization name with keys:
                - 'localized' (Dict[str, str]): Dictionary with locale keys mapping to the localized name:
                    - 'en_US' (str): English (US) localized name.
                - 'preferredLocale' (Dict[str, str]): tells you which language/country version LinkedIn considers the "main" or "default" for that particular localized content. Dictionary with keys:
                    - 'country' (str): Country code (e.g., 'US').
                    - 'language' (str): Language code (e.g., 'en').
            - 'primaryOrganizationType' (str): Updated type of organization ('COMPANY' or 'SCHOOL').

    Returns:
        Dict[str, Any]:
        - If organization not found, returns a dictionary with the key "error" and the value "Organization not found."
        - On successful update, returns a dictionary with the following keys and value types:
            - 'data' (Dict[str, Any]): Dictionary of updated organization with keys:
                - 'id' (int): Organization's unique identifier.
                - 'vanityName' (str): Updated vanity name (e.g., 'global-tech').
                - 'name' (Dict[str, Any]): Updated localized organization name with keys:
                    - 'localized' (Dict[str, str]): Dictionary with locale keys mapping to the localized name, keys are locale codes in the format <language>_<COUNTRY>, for example:
                        - 'en_US' (str): English (US) localized name.
                    - 'preferredLocale' (Dict[str, str]): tells you which language/country version LinkedIn considers the "main" or "default" for that particular localized content. Dictionary with keys:
                        - 'country' (str): Country code (e.g., 'US').
                        - 'language' (str): Language code (e.g., 'en').
                - 'primaryOrganizationType' (str): Updated type of organization ('COMPANY' or 'SCHOOL').
    """
    from linkedin.Organizations import update_organization
    return update_organization(
        organization_id=identifier_for_organization,
        organization_data=updated_company_attributes
    )


def purge_organization_record(organization_identifier_to_delete):
    """
    Deletes an organization from the database by its ID.

    Args:
        organization_identifier_to_delete (str): Unique identifier of the organization to delete.

    Returns:
        Dict[str, Any]:
        - If organization not found, returns a dictionary with the key "error" and the value "Organization not found."
        - On successful deletion, returns a dictionary with the following keys and value types:
            - 'status' (str): Success message confirming deletion of the organization.
    """
    from linkedin.Organizations import delete_organization
    return delete_organization(organization_id=organization_identifier_to_delete)


def discard_organization_by_alias(lookup_parameter_name, organization_url_name_to_delete):
    """
    Deletes organization(s) from the database by vanity name.

    Args:
        lookup_parameter_name (str): Query parameter expected to be 'vanityName'.
        organization_url_name_to_delete (str): The organization's vanity name to delete.

    Returns:
        Dict[str, Any]:
        - If query_field is not 'vanityName', returns a dictionary with the key "error" and the value "Invalid query parameter. Expected 'vanityName'."
        - If organization not found, returns a dictionary with the key "error" and the value "Organization with the given vanity name not found."
        - On successful deletion, returns a dictionary with the following keys and value types:
            - 'status' (str): Success message confirming deletion of organizations with the specified vanity name.
    """
    from linkedin.Organizations import delete_organization_by_vanity_name
    return delete_organization_by_vanity_name(
        query_field=lookup_parameter_name,
        vanity_name=organization_url_name_to_delete
    )
