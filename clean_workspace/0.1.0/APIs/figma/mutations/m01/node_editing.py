# This file is automatically generated by the MutationBuilder

def reposition_figma_element(element_to_move_id, new_x_position, new_y_position):
    """
    Move a node to a new position in Figma.

    This function moves a node, identified by node_id, to a new position
    in Figma defined by the x and y coordinates. Upon success, it
    returns a status message.

    Args:
        element_to_move_id (str): The unique identifier of the node to be moved.
        new_x_position (float): The new x-coordinate for the node's position.
        new_y_position (float): The new y-coordinate for the node's position.

    Returns:
        str: A status message indicating the node was successfully moved.

    Raises:
        TypeError: If element_to_move_id is not a string, or new_x_position or new_y_position are not numbers.
        ValueError: If element_to_move_id is an empty string.
        NodeNotFoundError: If the node with the given nodeId does not exist.
        FigmaOperationError: If there is an issue moving the node in Figma (e.g., node is locked, part of a restricted group).
    """
    from figma.node_editing import move_node
    return move_node(node_id=element_to_move_id, x=new_x_position, y=new_y_position)


def adjust_element_dimensions(node_to_resize_id, target_width_in_pixels, target_height_in_pixels):
    """
    Resize a node in Figma.

    This function resizes a specified node in Figma to a target width and height.
    The actual dimensions of the node after the resize operation, as detailed
    in the returned dictionary's `final_width` and `final_height` fields, may
    differ from the requested `width` and `height`. This potential discrepancy
    is due to Figma's layout engine constraints, which can include factors
    like minimum/maximum dimensions, aspect ratio locks, or constraints
    imposed by parent elements.

    Args:
        node_to_resize_id (str): The unique identifier of the Figma node to be resized.
        target_width_in_pixels (float): The target new width for the node in pixels. Must be a non-negative value.
        target_height_in_pixels (float): The target new height for the node in pixels. Must be a non-negative value.

    Returns:
        Dict[str, Any]: A dictionary containing details of the node after the resize operation, with the following keys:
            node_id (str): The unique identifier of the resized node.
            final_width (float): The actual width of the node after the resize operation. This might differ from the requested width due to Figma's layout engine constraints (e.g., min/max dimensions, aspect ratio lock, parent constraints).
            final_height (float): The actual height of the node after the resize operation. This might differ from the requested height due to Figma's layout engine constraints.

    Raises:
        NodeNotFoundError: Raised if no node exists with the provided `node_to_resize_id`.
        ResizeError: Raised if the specified node cannot be resized. Common reasons include the node being locked, being part of an auto-layout frame that dictates its size, or the node type itself not supporting arbitrary resizing.
        InvalidInputError: Raised if the provided `target_width_in_pixels` or `target_height_in_pixels` are invalid (e.g., negative values).
        FigmaOperationError: Raised for any other unhandled errors encountered within the Figma environment or plugin during the resize process.
    """
    from figma.node_editing import resize_node
    return resize_node(
        node_id=node_to_resize_id,
        width=target_width_in_pixels,
        height=target_height_in_pixels
    )


def remove_figma_element(element_to_delete_id):
    """
    Delete a node from Figma.

    Deletes a node from Figma using its unique identifier. This function
    takes the unique identifier of the Figma node to be deleted and returns
    an operation status message indicating successful deletion of the node.

    Args:
        element_to_delete_id (str): The unique identifier of the Figma node to be deleted.

    Returns:
        str: Operation status message indicating successfull deletion of the node.

    Raises:
        NodeNotFoundError: If the node with the given nodeId does not exist.
        DeleteError: If the node cannot be deleted (e.g., it is locked or a critical system node that cannot be removed).
        FigmaOperationError: If there is an issue deleting the node in Figma.
    """
    from figma.node_editing import delete_node
    return delete_node(node_id=element_to_delete_id)


def apply_fill_color_to_node(
    target_element_id,
    red_component,
    green_component,
    blue_component,
    alpha_component_opacity=1.0
):
    """
    Set the fill color of a node in Figma can be TextNode or FrameNode.
    This function sets the fill color of a specified node in Figma. The node
    can be either a TextNode or a FrameNode. The color is specified using
    red (r), green (g), blue (b), and optionally alpha (a) components.
    Each of these color components must have a value between 0.0 and 1.0,
    inclusive. If the alpha (a) component is omitted or provided as null
    (None in Python), it defaults to 1.0, representing full opacity.

    Args:
        target_element_id (str): The unique identifier for the Figma node whose fill
            color is to be set. This can be a TextNode or FrameNode.
        red_component (float): The red component of the RGBA color. Value must be
            between 0.0 and 1.0 inclusive.
        green_component (float): The green component of the RGBA color. Value must be
            between 0.0 and 1.0 inclusive.
        blue_component (float): The blue component of the RGBA color. Value must be
            between 0.0 and 1.0 inclusive.
        alpha_component_opacity (Optional[float]): The alpha (opacity) component of the RGBA color.
            Value must be between 0.0 and 1.0 inclusive. If omitted or
            null, it defaults to 1.0 (fully opaque).

    Returns:
        Dict[str, Any]: An empty dictionary.

    Raises:
        NodeNotFoundError: If the node with the given nodeId does not exist.
        NodeTypeError: If the node type does not support fill color (e.green_component.,
            not alpha_component_opacity shape, text, or frame).
        InvalidColorError: If any of the color component values (red_component, green_component, blue_component, alpha_component_opacity)
            are outside the valid range (0.0 to 1.0).
        ValidationError: If input arguments fail validation.
    """
    from figma.node_editing import set_fill_color
    return set_fill_color(
        node_id=target_element_id,
        r=red_component,
        g=green_component,
        b=blue_component,
        a=alpha_component_opacity
    )


def bulk_remove_figma_elements(element_ids_for_deletion):
    """
    Delete multiple nodes from Figma at once.

    This function deletes multiple nodes from Figma simultaneously. Based on a
    provided list of node identifiers, it attempts to delete each corresponding
    node. The function then returns a detailed status of these operations,
    specifying which nodes were successfully deleted and, for those that were
    not, the reasons for the failure.

    Args:
        element_ids_for_deletion (List[str]): A list of unique identifiers for the nodes to be deleted from Figma.

    Returns:
        Dict[str, Any]: Status of the delete operation for multiple nodes. This dictionary contains the following keys:
            successfully_deleted_ids (List[str]): A list of node IDs that were successfully deleted.
            failed_to_delete (List[Dict[str, Any]]): A list of dictionaries, where each dictionary represents a node that failed to delete. Each such dictionary contains:
                nodeId (str): The ID of the node that could not be deleted.
                reason (str): A brief explanation for the failure (e.g., 'Node not found', 'Node locked').

    Raises:
        FigmaOperationError: If there is a general issue deleting the nodes in Figma.
        InvalidInputError: If the `element_ids_for_deletion` list is empty or contains malformed IDs.
    """
    from figma.node_editing import delete_multiple_nodes
    return delete_multiple_nodes(node_ids=element_ids_for_deletion)


def update_text_node_value(text_node_identifier=None, new_text_string=None):
    """
    Set the text content of an existing text node in Figma.

    This function sets the text content of an existing text node in Figma. It uses the `node_id` to identify the specific Figma node and applies the new `text` as its content.

    Args:
        text_node_identifier (Optional[str]): The unique identifier of the Figma node to modify.
        new_text_string (Optional[str]): The new text content to set for the node.

    Returns:
        Dict[str, Any]: An empty dictionary

    Raises:
        NodeNotFoundError: If the node with the given text_node_identifier does not exist.
        NodeTypeError: If the identified node is not a new_text_string node.
        FigmaOperationError: If there is an issue setting the new_text_string content in Figma (e.g., font issues, locked node).
        InvalidInputError:  Exception raised for errors in the input provided to the function.
    """
    from figma.node_editing import set_text_content
    return set_text_content(node_id=text_node_identifier, text=new_text_string)


def apply_stroke_style(
    element_to_stroke_id,
    stroke_red_value,
    stroke_green_value,
    stroke_blue_value,
    stroke_alpha_opacity=1.0,
    outline_thickness=None
):
    """
    Set the stroke color of a node in Figma.

    This function sets the stroke color for a specified node within Figma. It requires the node's unique identifier (`node_id`) and the `red`, `green`, and `blue` components for the RGBA stroke color, where each component value must be between 0.0 and 1.0 inclusive.
    The `alpha` component, representing opacity, can also be provided (0.0 for fully transparent, 1.0 for fully opaque); if not specified, it defaults to 1.0.
    Optionally, the `stroke_weight` (thickness of the stroke) can be set using a non-negative value. If `stroke_weight` is not provided, the node's existing stroke weight will be maintained, or a default weight might be used if a stroke is being added to a node that does not currently have one.

    Args:
        element_to_stroke_id (str): The unique identifier of the Figma node whose stroke color is to be set.
        stroke_red_value (float): The red component of the RGBA stroke color. Value must be between 0.0 and 1.0 inclusive.
        stroke_green_value (float): The green component of the RGBA stroke color. Value must be between 0.0 and 1.0 inclusive.
        stroke_blue_value (float): The blue component of the RGBA stroke color. Value must be between 0.0 and 1.0 inclusive.
        stroke_alpha_opacity (Optional[float]): The alpha (opacity) component of the RGBA stroke color. Value must be between 0.0 (fully transparent) and 1.0 (fully opaque). If not provided, defaults to 1.0 (fully opaque).
        outline_thickness (Optional[float]): The thickness of the stroke. Must be a non-negative value. If provided, this weight will be applied. If not provided, the node's existing stroke weight will be maintained, or a default weight might be used if adding a stroke to a node that doesn't currently have one.

    Returns:
        Dict[str, Any]: An empty dictionary.

    Raises:
        NodeNotFoundError: If the node with the given `element_to_stroke_id` does not exist.
        NodeTypeSupportError: If the specified node type does not support strokes (e.g., a Canvas node).
        InvalidColorError: If any of the color component values (stroke_red_value, stroke_green_value, stroke_blue_value, stroke_alpha_opacity) are out of the valid range (typically 0.0 to 1.0).
        InvalidInputError: If `element_to_stroke_id` is invalid, or `outline_thickness` is invalid (e.g., a negative value, or wrong type), or color components types are wrong.
        FigmaOperationError: If an unexpected error occurs within the Figma plugin while attempting to apply the stroke.
    """
    from figma.node_editing import set_stroke_color
    return set_stroke_color(
        node_id=element_to_stroke_id,
        red=stroke_red_value,
        green=stroke_green_value,
        blue=stroke_blue_value,
        alpha=stroke_alpha_opacity,
        stroke_weight=outline_thickness
    )
