# This file is automatically generated by the MutationBuilder

def retrieve_design_annotations(scope_annotations_to_node_id=None, expand_category_details=False):
    """
    Get all annotations in the current document or specific node.

    This function retrieves all annotations. If the `nodeId` parameter is provided,
    it fetches annotations specifically for the node identified by that ID.
    If `nodeId` is omitted, the function returns annotations from the entire
    current document. If the `includeCategories` parameter is true, and an
    annotation has a 'categoryId', the full category object is included with
    that annotation's details.

    Args:
        scope_annotations_to_node_id (Optional[str]): The ID of a specific node for which to retrieve
            annotations. If omitted, annotations from the entire current document
            are returned.
        expand_category_details (Optional[bool]): If true, the full category object
            will be included for each annotation that has a 'categoryId'.
            Defaults to false if not provided.

    Returns:
        List[Dict[str, Any]]: A list of annotation objects. Each dictionary in the
            list represents an annotation and contains the following keys:
            'annotationId' (str): The unique identifier of the annotation.
            'nodeId' (str): The ID of the node to which this annotation is attached.
            'labelMarkdown' (str): The content of the annotation in Markdown format.
            'categoryId' (Optional[str]): ID of the category this annotation
                belongs to, if any.
            'category' (Optional[Dict[str, Any]]): Detailed information about the
                category. This field is included if the 'includeCategories' input
                parameter is true and 'categoryId' is set. If present, this
                dictionary contains:
                'id' (str): Category ID.
                'name' (str): Category name.
                'color' (str): Category color code (e.g., hex).
            'properties' (Optional[List[Dict[str, Any]]]): A list of custom
                key-value property objects associated with the annotation. Each
                dictionary in this list represents a property object and contains:
                'name' (str): Name/key of the property.
                'value' (Any): Value of the property.

    Raises:
        NodeNotFoundError: If a specific 'scope_annotations_to_node_id' is provided and that node
            does not exist.
        PluginError: If there is an internal issue or error within the plugin
            while retrieving annotations.
        ValidationError: If input arguments fail validation.
    """
    from figma.annotation_operations import get_annotations
    return get_annotations(
        nodeId=scope_annotations_to_node_id,
        includeCategories=expand_category_details
    )


def add_or_update_annotation(
    annotated_node_id,
    annotation_content_in_markdown,
    existing_annotation_identifier=None,
    annotation_category_id=None,
    custom_metadata_properties=None
):
    """
    Create or update an annotation.

    This function creates a new annotation or updates an existing one. It associates an
    annotation with a specific `nodeId`. The annotation's content is provided via
    `labelMarkdown`. Optionally, an `annotationId` can be specified for updates,
    a `categoryId` for classification, and custom `properties` can be added.
    The function returns a dictionary containing details of the created or updated
    annotation.

    Args:
        annotated_node_id (str): The ID of the node to which this annotation is attached.
        annotation_content_in_markdown (str): The content of the annotation, formatted as Markdown.
        existing_annotation_identifier (Optional[str]): The unique identifier of the annotation to update.
            If `None`, a new annotation will be created. Defaults to `None`.
        annotation_category_id (Optional[str]): The ID of an existing category to assign to this
            annotation. Defaults to `None`.
        custom_metadata_properties (Optional[List[Dict[str, Any]]]): A list of custom key-value
            properties to associate with the annotation. Each dictionary in the list
            should contain the following keys:
            name (str): Property name.
            value (Any): Property value.
            Defaults to `None`.

    Returns:
        Dict[str, Any]: Details of the created or updated annotation. Contains the
            following keys:
            annotationId (str): The unique identifier of the annotation (newly created or
                updated).
            nodeId (str): The ID of the node this annotation is attached to.
            labelMarkdown (str): The content of the annotation.
            categoryId (Optional[str]): ID of the assigned category.
            properties (Optional[List[Dict[str, Any]]]): A list of custom key-value
                properties. Each property in the list is a dictionary containing:
                name (str): Property name.
                value (Any): Property value.

    Raises:
        NodeNotFoundError: If the specified annotated_node_id does not exist.
        AnnotationNotFoundError: If existing_annotation_identifier is provided for an update, but no
            annotation with that ID exists for the given annotated_node_id.
        CategoryNotFoundError: If annotation_category_id is provided but does not correspond to an
            existing category.
        InvalidInputError: If annotation_content_in_markdown is empty, or custom_metadata_properties are malformed.
        FigmaOperationError: If there is an issue setting the annotation.
        ValidationError: If input arguments fail validation.
    """
    from figma.annotation_operations import set_annotation
    return set_annotation(
        nodeId=annotated_node_id,
        labelMarkdown=annotation_content_in_markdown,
        annotationId=existing_annotation_identifier,
        categoryId=annotation_category_id,
        properties=custom_metadata_properties
    )
