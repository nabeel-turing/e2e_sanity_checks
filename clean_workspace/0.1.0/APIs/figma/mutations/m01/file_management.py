# This file is automatically generated by the MutationBuilder

def fetch_figma_file_details(figma_file_identifier, target_node_identifier=None):
    """
    Retrieves data for a Figma file, optionally scoped to a specific node.

    This function retrieves data for a Figma file. If a `node_id` is provided,
    data retrieval focuses on that specific node; otherwise, data for all
    top-level nodes (e.g., canvases/pages) in the file is returned. The function
    fetches metadata about the file, detailed information about the relevant nodes
    (including their properties and any child nodes in a recursive structure),
    and global styles defined within the file.

    Args:
        figma_file_identifier (str): The unique identifier of the Figma file.
        target_node_identifier (Optional[str]): The unique identifier of a specific node within
            the file. If provided, the 'nodes' field in the response will be
            focused on this node. If omitted, data for all top-level nodes
            (e.g., canvases/pages) in the file is returned.

    Returns:
        Dict[str, Any]: A dictionary containing the Figma file/node data with the
        following keys:
            metadata (Dict[str, str]): Metadata about the Figma file.
                name (str): The name of the Figma file.
                lastModified (str): ISO 8601 timestamp of when the file was last
                    modified (e.g., 'YYYY-MM-DDTHH:MM:SSZ').
                thumbnailUrl (str): URL of the file's thumbnail image.
            nodes (List[Dict[str, Any]]): A list of node objects. Each node
                represents an element in the Figma file (e.g., frame, group,
                rectangle, text). The structure is recursive for nodes with
                children. All properties within a node are optional. Each
                dictionary in the list can contain the following keys:
                id (Optional[str]): Unique identifier for the node.
                name (Optional[str]): Name of the node.
                type (Optional[str]): Type of the node (e.g., 'GROUP',
                    'RECTANGLE', 'TEXT', 'FRAME', 'CANVAS', 'ELLIPSE',
                    'IMAGE-SVG', 'INSTANCE').
                visible (Optional[bool]): Whether the node is visible.
                locked (Optional[bool]): Whether the node is locked.
                opacity (Optional[float]): Opacity of the node (0 to 1).
                rotation (Optional[float]): Rotation of the node in degrees.
                blendMode (Optional[str]): Blend mode of the node.
                isMask (Optional[bool]): Whether the node is a mask.
                isFixed (Optional[bool]): Whether the node has fixed positioning.
                absoluteBoundingBox (Optional[Dict[str, Any]]): Bounding box of
                    the node in absolute coordinates (e.g., {x, y, width, height}).
                absoluteRenderBounds (Optional[Dict[str, Any]]): Render bounding
                    box of the node in absolute coordinates (e.g., {x, y, width,
                    height}).
                constraints (Optional[Dict[str, Any]]): Layout constraints of the
                    node (e.g., {vertical, horizontal}).
                fills (Optional[Union[str, List[Dict[str, Any]]]]): Fills appliedy
                    to the node. Can be a style ID (string) or an array of fill
                    objects.
                strokes (Optional[List[Dict[str, Any]]]): Strokes applied to the
                    node.
                strokeWeight (Optional[float]): Stroke weight (thickness).
                strokeAlign (Optional[str]): Stroke alignment (e.g., 'INSIDE',
                    'OUTSIDE', 'CENTER').
                strokeJoin (Optional[str]): Stroke join type (e.g., 'MITER',
                    'BEVEL', 'ROUND').
                strokeCap (Optional[str]): Stroke cap type (e.g., 'NONE', 'ROUND',
                    'SQUARE', 'LINE_ARROW', 'TRIANGLE_ARROW').
                strokeDashes (Optional[List[float]]): Dash pattern for strokes
                    (e.g., [5, 5]).
                strokeMiterAngle (Optional[float]): Miter angle for strokes.
                strokeGeometry (Optional[List[Dict[str, Any]]]): Vector paths for
                    strokes.
                fillGeometry (Optional[List[Dict[str, Any]]]): Vector paths for
                    fills.
                cornerRadius (Optional[float]): Overall corner radius for shapes
                    that support it.
                cornerSmoothing (Optional[float]): Corner smoothing value (0 to 1).
                rectangleCornerRadii (Optional[List[float]]): Individual corner
                    radii for rectangles (top-left, top-right, bottom-right,
                    bottom-left).
                borderRadius (Optional[str]): Original schema's border radius value
                    (e.g., '0px 0px 0px 0px'). Kept for compatibility.
                effects (Optional[List[Dict[str, Any]]]): Effects applied to the
                    node (e.g., shadows, blurs).
                layoutAlign (Optional[str]): For children of auto-layout frames,
                    how this node is aligned perpendicular to the layout
                    direction (e.g., 'MIN', 'CENTER', 'MAX', 'STRETCH', 'INHERIT').
                layoutGrow (Optional[float]): For children of auto-layout frames,
                    whether this node should stretch to fill space in the layout
                    direction (0 for fixed size, 1 for stretch).
                layoutSizingHorizontal (Optional[str]): Horizontal sizing mode in
                    auto-layout frames (e.g., 'FIXED', 'HUG', 'FILL').
                layoutSizingVertical (Optional[str]): Vertical sizing mode in
                    auto-layout frames (e.g., 'FIXED', 'HUG', 'FILL').
                styles (Optional[Dict[str, str]]): References to shared styles
                    applied to the node (e.g., {'fills': 'styleId123',
                    'text': 'styleId456'}).
                exportSettings (Optional[List[Dict[str, Any]]]): Export settings
                    defined on the node.
                prototypeInteractions (Optional[List[Dict[str, Any]]]): Prototype
                    interactions defined on the node.
                boundVariables (Optional[Dict[str, Any]]): Variables bound to
                    node properties.
                clipsContent (Optional[bool]): Whether content is clipped to the
                    node's bounds (typically for frames and groups).
                background (Optional[List[Dict[str, Any]]]): Background fills for
                    the node (typically for frames). Use 'fills' for general
                    purpose.
                backgroundColor (Optional[Dict[str, Any]]): Background color of
                    the node (e.g., for frames, canvas, {r, g, b, a}).
                layoutMode (Optional[str]): Layout mode for auto-layout frames
                    ('NONE', 'HORIZONTAL', 'VERTICAL').
                primaryAxisSizingMode (Optional[str]): Sizing mode for the
                    primary axis in auto-layout ('FIXED', 'AUTO'/'HUG').
                counterAxisSizingMode (Optional[str]): Sizing mode for the
                    counter axis in auto-layout ('FIXED', 'AUTO'/'HUG').
                primaryAxisAlignItems (Optional[str]): Alignment of items along
                    the primary axis in auto-layout ('MIN', 'CENTER', 'MAX',
                    'SPACE_BETWEEN').
                counterAxisAlignItems (Optional[str]): Alignment of items along
                    the counter axis in auto-layout ('MIN', 'CENTER', 'MAX',
                    'BASELINE').
                paddingLeft (Optional[float]): Left padding for auto-layout frames.
                paddingRight (Optional[float]): Right padding for auto-layout
                    frames.
                paddingTop (Optional[float]): Top padding for auto-layout frames.
                paddingBottom (Optional[float]): Bottom padding for auto-layout
                    frames.
                paddingHorizontal (Optional[float]): Horizontal padding for
                    auto-layout (sum of left and right if individual paddings
                    are equal, otherwise represents collective horizontal padding).
                paddingVertical (Optional[float]): Vertical padding for
                    auto-layout (sum of top and bottom if individual paddings
                    are equal, otherwise represents collective vertical padding).
                itemSpacing (Optional[float]): Spacing between items in an
                    auto-layout frame.
                itemReverseZIndex (Optional[bool]): Whether items are layered in
                    reverse Z-order in auto-layout.
                strokesIncludedInLayout (Optional[bool]): Whether strokes are
                    included in layout calculations for auto-layout frames.
                layoutGrids (Optional[List[Dict[str, Any]]]): Layout grids
                    defined on the node (for frames).
                text (Optional[str]): The actual text content (for TEXT nodes,
                    corresponds to Figma's 'characters' property).
                textStyle (Optional[str]): Reference to a text style in
                    'globalVars.styles' (for TEXT nodes). This can also be
                    found in 'styles.text'.
                style (Optional[Dict[str, Any]]): Inline style properties of the
                    node, particularly detailed for TEXT nodes (e.g., fontFamily,
                    fontWeight, fontSize).
                characterStyleOverrides (Optional[List[float]]): Array of style
                    IDs applied to characters within a text node.
                styleOverrideTable (Optional[Dict[str, Any]]): Table of style
                    overrides, often used for text styles within a text node.
                lineTypes (Optional[List[str]]): Line types for text nodes
                    (e.g., for lists: 'ORDERED', 'UNORDERED', 'NONE').
                lineIndentations (Optional[List[float]]): Line indentations for
                    text nodes.
                componentId (Optional[str]): ID of the main component if this
                    node is an instance of a component.
                componentProperties (Optional[Dict[str, Any]]): Component
                    properties for instances, defining overridden values.
                overrides (Optional[List[Dict[str, Any]]]): A list of overrides
                    applied to this instance.
                uniformScaleFactor (Optional[float]): Uniform scale factor, used
                    by SECTION nodes.
                isExposedInstance (Optional[bool]): Indicates if an instance is
                    exposed from a nested component.
                exposedInstances (Optional[List[str]]): List of exposed instance
                    node IDs that are children of this node.
                booleanOperation (Optional[str]): Type of boolean operation for
                    boolean group nodes (e.g., 'UNION', 'INTERSECT').
                componentPropertyDefinitions (Optional[Dict[str, Any]]):
                    Definitions of component properties if this node is a
                    component or component_set.
                arcData (Optional[Dict[str, Any]]): Data for arcs on ELLIPSE
                    nodes (startingAngle, endingAngle, innerRadius).
                sliceMeasurements (Optional[Dict[str, Any]]): Measurements for
                    SLICE nodes (x, y, width, height relative to parent).
                devStatus (Optional[Dict[str, Any]]): Developer status of the
                    node, if set (e.g., {'type': 'READY_FOR_DEV'}).
                children (Optional[List[Dict[str, Any]]]): An array of child node
                    objects. Structure is recursive.
                layout (Optional[str]): Reference to a layout style in
                    'globalVars.styles'. Distinct from auto-layout properties.
            globalVars (Dict[str, Any]): Global variables, primarily containing
                style definitions.
                styles (Dict[str, Any]): A dictionary mapping style IDs to their
                    definitions. Style definitions can be simple (e.g., a list
                    of color hex strings) or complex objects (e.g., for text
                    properties like fontFamily, fontWeight, or layout properties).
                    Image fills will also be defined here, referenced by their
                    fill ID.

    Raises:
        NotFoundError: If the file with the given figma_file_identifier or node with target_node_identifier
            does not exist.
        InvalidInputError: If any provided input (e.g. figma_file_identifier) is malformed
            or invalid.
    """
    from figma.file_management import get_figma_data
    return get_figma_data(file_key=figma_file_identifier, node_id=target_node_identifier)


def export_node_images_locally(source_file_key, image_export_requests, destination_directory_path):
    """
    Downloads images for specified nodes from a Figma file to a local path.

    This version simulates the download by copying files from a local './files/'
    directory to the `local_path` destination. It assumes source files in './files/'
    are named based on their 'node_id' (e.g., '{node_id}.png'). The 'file_name'
    parameter in the input 'nodes' specifies the desired name for the output file.

    Args:
        source_file_key (str): The unique identifier of the Figma file (used for context).
        image_export_requests (List[Dict[str, str]]): A list of nodes to "download" as images.
            Each item must be a dictionary with:
            node_id (str): The unique identifier of the node. The corresponding
                           source image in './files/' is assumed to be named
                           based on this ID (e.g., '{node_id}.png').
            file_name (str): The desired file name for the downloaded image
                             to be saved in `local_path` (e.g., 'image.png').
        destination_directory_path (str): The local directory path where the images should be saved.

    Returns:
        Tuple[Optional[str], Optional[str]]: A tuple containing the download status
            and the local path.

    Raises:
        NotFoundError: If a source image file in './files/' corresponding to a node_id
                       is not found. (Also potentially if Figma metadata is checked and not found).
        InvalidInputError: If inputs are malformed or destination_directory_path is invalid/inaccessible.
        DownloadError: If an error occurs during the image copy process for one or more image_export_requests.
    """
    from figma.file_management import download_figma_images
    return download_figma_images(
        file_key=source_file_key,
        nodes=image_export_requests,
        local_path=destination_directory_path
    )


def switch_active_document(figma_document_key_to_activate):
    """
    Finds a file by its key in the DB and sets it as the current_file.

    Args:
        figma_document_key_to_activate (str): The fileKey of the file to set as the current file.
                  Must be a non-empty string.

    Returns:
        bool: True if the file was found and the current_file_key was updated,

    Raises:
        InvalidInputError: If the provided figma_document_key_to_activate is not a non-empty string or if the 
                            provided figma_document_key_to_activate does not correspond to any file
                            in the database.
    """
    from figma.file_management import set_current_file
    return set_current_file(file_key=figma_document_key_to_activate)
