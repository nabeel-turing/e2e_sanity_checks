# This file is automatically generated by the MutationBuilder

def find_descendant_nodes_by_type(container_node_to_scan_id, node_types_to_find):
    """
    Scan for child nodes with specific types in the selected Figma node.

    This function scans for child nodes with specific types within the Figma node
    identified by `node_id`. It searches through the descendants of the specified
    container node and returns a list of nodes that match the types provided in
    the `types` list. Each found node is represented as a dictionary containing
    its basic information.

    Args:
        container_node_to_scan_id (str): The ID of the Figma node to be scanned for descendant nodes.
        node_types_to_find (List[str]): A list of node type strings (e.g., 'RECTANGLE', 'TEXT')
            to filter the search. Only nodes of these types will be returned.

    Returns:
        List[Dict[str, Any]]: A list of nodes matching the specified types found
            within the given container node (and its descendants). Each dictionary
            in the list represents a found node and provides basic information
            with the following keys:
            'id' (str): The unique identifier of the found node.
            'name' (str): The name of the found node.
            'type' (str): The type of the found node (this will be one of the types
                          specified in the input 'types' list).
            'parentId' (str): The ID of the immediate parent of this node.

    Raises:
        NodeNotFoundError: If the node with the given container_node_to_scan_id (the container to scan)
            does not exist.
        NodeTypeError: If the specified node cannot contain child nodes.
        InvalidInputError: If the 'node_types_to_find' list is empty or contains unrecognized
            node type strings.
        PluginError: If there is an issue scanning for nodes by type within Figma.
        ValidationError: If input arguments fail validation.
    """
    from figma.node_reading import scan_nodes_by_types
    return scan_nodes_by_types(node_id=container_node_to_scan_id, types=node_types_to_find)


def retrieve_current_selection_info():
    """
    Get information about the current selection in Figma.

    Gets information about the current selection in Figma. This function returns
    a list of dictionaries, where each dictionary represents a currently
    selected node. Each dictionary provides a summary of the node, including
    its unique identifier ('id'), name ('name'), type ('type'), and the ID
    of its parent node ('parentId').

    Returns:
        List[Dict[str, Any]]: A list of currently selected nodes. Each dictionary
            in the list provides a summary of a selected node with the
            following keys:
            id (str): The unique identifier of the selected node.
            name (str): The name of the selected node.
            type (str): The type of the node (e.g., 'FRAME', 'RECTANGLE', 'TEXT').
            parentId (str): The ID of the parent node.

    Raises:
        NoSelectionError: If no nodes are currently selected in the Figma document.
        FigmaOperationError: If there is an issue communicating with the Figma plugin environment
                             or if data integrity issues are found (e.g., selected node not found).
    """
    from figma.node_reading import get_selection
    return get_selection()


def fetch_detailed_node_properties(node_identifier_to_inspect):
    """
    Get detailed information about a specific node in Figma.

    Gets detailed information about a specific node in Figma.

    Args:
        node_identifier_to_inspect (str): The unique identifier of the Figma node to retrieve.

    Returns:
        Dict[str, Any]: Detailed information for the specified node. It includes the following keys:
          id (str): The unique identifier of the node.
          name (str): The name of the node.
          type (str): The type of the node (e.g., 'DOCUMENT', 'CANVAS', 'FRAME', 'RECTANGLE', 'TEXT', 'COMPONENT', 'INSTANCE', 'VECTOR').
          visible (bool): Whether the node is visible on the canvas.
          locked (bool): Whether the node is locked for editing.
          opacity (float): Opacity of the node, between 0.0 (transparent) and 1.0 (opaque).
          absoluteBoundingBox (Dict[str, float]): The node's bounding box in absolute coordinates on the page. Contains keys:
            x (float): X-coordinate of the top-left corner.
            y (float): Y-coordinate of the top-left corner.
            width (float): Width of the bounding box.
            height (float): Height of the bounding box.
          fills (List[Dict[str, Any]]): A list of paints applied to the node's fill. Each item in the list is a dictionary with keys:
            type (str): Type of paint (e.g., 'SOLID', 'GRADIENT_LINEAR', 'IMAGE').
            visible (bool): Whether this paint is visible.
            opacity (Optional[float]): Opacity of this paint (0.0-1.0).
            color (Optional[Dict[str, float]]): RGBA color for SOLID paints. Contains keys:
              r (float): Red component (0.0-1.0).
              g (float): Green component (0.0-1.0).
              b (float): Blue component (0.0-1.0).
              a (float): Alpha component (0.0-1.0).
          strokes (List[Dict[str, Any]]): A list of paints applied to the node's stroke. Each item in the list is a dictionary with keys:
            type (str): Type of paint (e.g., 'SOLID', 'GRADIENT_LINEAR', 'IMAGE').
            visible (bool): Whether this paint is visible.
            opacity (Optional[float]): Opacity of this paint (0.0-1.0).
            color (Optional[Dict[str, float]]): RGBA color for SOLID paints. Contains keys:
              r (float): Red component (0.0-1.0).
              g (float): Green component (0.0-1.0).
              b (float): Blue component (0.0-1.0).
              a (float): Alpha component (0.0-1.0).
          strokeWeight (float): The thickness of the stroke.
          strokeAlign (str): Position of the stroke ('INSIDE', 'OUTSIDE', 'CENTER').
          effects (List[Dict[str, Any]]): A list of effects applied to the node (e.g., drop shadow, blur). Each item in the list is a dictionary with keys:
            type (str): Type of effect (e.g., 'DROP_SHADOW', 'LAYER_BLUR').
            visible (bool): Whether this effect is visible.
            radius (float): Radius for blur effects or spread for shadow effects.
            color (Optional[Dict[str, float]]): RGBA color for shadow effects. Contains keys:
              r (float): Red component (0.0-1.0).
              g (float): Green component (0.0-1.0).
              b (float): Blue component (0.0-1.0).
              a (float): Alpha component (0.0-1.0).
            offset (Optional[Dict[str, float]]): X/Y offset for shadow effects. Contains keys:
              x (float): X offset.
              y (float): Y offset.
          children (Optional[List[Dict[str, Any]]]): An array of child nodes if this node is a container. Each child node object has the same structure as this 'node_details' object.
          parentId (Optional[str]): The ID of the parent node, if any.
          characters (Optional[str]): For TEXT nodes: The text content.
          fontSize (Optional[float]): For TEXT nodes: The font size in pixels.
          fontName (Optional[Dict[str, str]]): For TEXT nodes: Font family and style. Contains keys:
            family (str): Font family name.
            style (str): Font style (e.g., 'Regular', 'Bold').
          componentId (Optional[str]): For INSTANCE nodes: The ID of the main component.
          layoutMode (Optional[str]): For FRAME nodes: Auto layout mode ('NONE', 'HORIZONTAL', 'VERTICAL').
          itemSpacing (Optional[float]): For auto-layout FRAME nodes: Spacing between items.
          paddingLeft (Optional[float]): For auto-layout FRAME nodes: Left padding.
          paddingRight (Optional[float]): For auto-layout FRAME nodes: Right padding.
          paddingTop (Optional[float]): For auto-layout FRAME nodes: Top padding.
          paddingBottom (Optional[float]): For auto-layout FRAME nodes: Bottom padding.
          primaryAxisAlignItems (Optional[str]): For auto-layout FRAME nodes: Alignment along the primary axis.
          counterAxisAlignItems (Optional[str]): For auto-layout FRAME nodes: Alignment along the counter axis.

    Raises:
        NodeNotFoundError: If the node with the given node_identifier_to_inspect does not exist.
        FigmaOperationError: If there is an issue communicating with the Figma plugin environment,
                             or if node data fails Pydantic validation.
        InvalidInputError: If the node_identifier_to_inspect is malformed or missing.
    """
    from figma.node_reading import get_node_info
    return get_node_info(nodeId=node_identifier_to_inspect)
