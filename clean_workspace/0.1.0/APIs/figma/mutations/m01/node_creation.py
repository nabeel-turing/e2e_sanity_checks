# This file is automatically generated by the MutationBuilder

def duplicate_figma_element(source_node_to_clone_id, clone_x_coordinate=None, clone_y_coordinate=None):
    """
    Clone an existing node (represented as a dict) in Figma.

    This function clones an existing node. It takes the `node_id`
    of the node to be cloned and optionally new `x` and `y` coordinates
    for the clone's position. It returns basic information about the newly
    created cloned node. All node and document structures are assumed to be dictionaries.

    Args:
        source_node_to_clone_id (str): The identifier of the node to be cloned.
        clone_x_coordinate (Optional[float]): The optional x-coordinate for the cloned node's position.
        clone_y_coordinate (Optional[float]): The optional y-coordinate for the cloned node's position.

    Returns:
        Dict[str, Any]: Basic information about the newly cloned node. This dictionary
            includes the following keys:
            id (str): The unique identifier of the cloned node.
            name (str): The name of the cloned node.
            type (str): The type of the cloned node.
            parentId (str): The ID of the parent node where the clone is placed.
            x (float): The x-coordinate of the cloned node's top-left corner.
            y (float): The y-coordinate of the cloned node's top-left corner.

    Raises:
        NodeNotFoundError: If the node with the given nodeId does not exist.
        CloneError: If the node cannot be cloned (e.g., it's a special type
            like the document root, or is locked in a way that prevents
            cloning).
        FigmaOperationError: If there is an issue executing the clone command in Figma.
    """
    from figma.node_creation import clone_node
    return clone_node(node_id=source_node_to_clone_id, x=clone_x_coordinate, y=clone_y_coordinate)


def add_new_rectangle(
    position_x,
    position_y,
    rectangle_width,
    rectangle_height,
    layer_name=None,
    container_node_id=None
):
    """
    Create a new rectangle in Figma.

    Creates a new rectangle in Figma. The position is defined by the x and y
    coordinates of its top-left corner on the canvas. The dimensions are
    specified by its width and height, which must be positive values.
    An optional name can be assigned to the new rectangle layer. The rectangle
    can be parented to an existing node using `parent_id`; if not provided,
    it is added to the current page.

    Args:
        position_x (float): The x-coordinate of the top-left corner of the rectangle on the canvas.
        position_y (float): The y-coordinate of the top-left corner of the rectangle on the canvas.
        rectangle_width (float): The width of the rectangle. Must be a positive value.
        rectangle_height (float): The height of the rectangle. Must be a positive value.
        layer_name (Optional[str]): An optional name for the new rectangle layer.
        container_node_id (Optional[str]): The optional ID of an existing node to parent the
            new rectangle to. If not provided, the rectangle is added to the current page.

    Returns:
        Dict[str, Any]: Information about the newly created rectangle node. Contains the following keys:
            id (str): The unique identifier of the new rectangle node.
            name (str): The name assigned to the rectangle.
            type (str): The type of the node, which will be 'RECTANGLE'.
            parentId (Optional[str]): The ID of the parent node. This will be the `parent_id`
                input if provided, otherwise it's the ID of the current page where the
                rectangle was created.
            x (float): The x-coordinate of the rectangle's top-left corner on the canvas.
            y (float): The y-coordinate of the rectangle's top-left corner on the canvas.
            width (float): The width of the rectangle.
            height (float): The height of the rectangle.

    Raises:
        ParentNotFoundError: If the specified `container_node_id` does not correspond to a valid,
            existing container node in Figma, or if its type is not allowed as a parent.
        InvalidInputError: If required parameters such as `rectangle_width` or `rectangle_height` are
            missing, or if they are invalid (e.g., negative or zero values, non-numeric types).
        FigmaOperationError: If an internal error occurs within Figma or the plugin
            while attempting to create the rectangle.
    """
    from figma.node_creation import create_rectangle
    return create_rectangle(
        x=position_x,
        y=position_y,
        width=rectangle_width,
        height=rectangle_height,
        name=layer_name,
        parent_id=container_node_id
    )


def construct_new_frame(
    frame_x_coordinate,
    frame_y_coordinate,
    frame_width,
    frame_height,
    new_frame_name=None,
    parent_container_id=None,
    background_fill_properties=None,
    border_stroke_properties=None,
    border_thickness=None,
    auto_layout_orientation=None,
    auto_layout_wrap_behavior=None,
    top_padding_value=None,
    right_padding_value=None,
    bottom_padding_value=None,
    left_padding_value=None,
    main_axis_alignment=None,
    cross_axis_alignment=None,
    horizontal_resizing_rule=None,
    vertical_resizing_rule=None,
    inter_item_gap=None
):
    """
    Create a new frame in Figma.

    This function creates a new frame in Figma. It allows specifying the frame's
    position (x, y), dimensions (width, height), name, parent node, fill color,
    stroke properties, and various auto-layout configurations.

    Args:
        frame_x_coordinate (float): The x-coordinate of the frame's top-left corner on the canvas.
        frame_y_coordinate (float): The y-coordinate of the frame's top-left corner on the canvas.
        frame_width (float): The width of the frame.
        frame_height (float): The height of the frame.
        new_frame_name (Optional[str]): Optional name for the new frame.
        parent_container_id (Optional[str]): Optional ID of the parent node (e.g., another
            frame, page, component) to create the frame within. If not provided,
            the frame is created on the current page.
        background_fill_properties (Optional[Dict[str, Any]]): Optional properties for a single fill.
            This should be a dictionary conforming to Figma's Paint object structure.
            For a solid color, an example structure is:
            `{'type': 'SOLID', 'color': {'r': 0.5, 'g': 0.5, 'b': 0.5, 'a': 1.0}}`.
            Known keys for a solid color fill:
                type (str): The type of paint, e.g., 'SOLID'.
                color (Dict[str, float]): A dictionary defining the RGBA color.
                    r (float): Red component (0.0 to 1.0).
                    g (float): Green component (0.0 to 1.0).
                    b (float): Blue component (0.0 to 1.0).
                    a (float): Alpha component (0.0 to 1.0).
        border_stroke_properties (Optional[Dict[str, Any]]): Optional properties for a single stroke.
            This should be a dictionary conforming to Figma's Paint object structure
            for the stroke color and type. For a solid color, an example structure is:
            `{'type': 'SOLID', 'color': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'a': 1.0}}`.
            Known keys for a solid color stroke:
                type (str): The type of paint, e.g., 'SOLID'.
                color (Dict[str, float]): A dictionary defining the RGBA color.
                    r (float): Red component (0.0 to 1.0).
                    g (float): Green component (0.0 to 1.0).
                    b (float): Blue component (0.0 to 1.0).
                    a (float): Alpha component (0.0 to 1.0).
        border_thickness (Optional[float]): Optional stroke weight (thickness) for the
            frame. Applied if `stroke_color` is also provided.
        auto_layout_orientation (Optional[str]): Enables auto-layout and sets its direction.
            Valid values: "NONE", "HORIZONTAL", "VERTICAL".
        auto_layout_wrap_behavior (Optional[str]): Specifies wrap behavior for auto-layout when
            `layout_mode` is HORIZONTAL or VERTICAL. Valid values: "NO_WRAP", "WRAP".
            Requires `layout_mode` to be set.
        top_padding_value (Optional[float]): Top padding for an auto-layout frame.
            Requires `layout_mode` to be set to HORIZONTAL or VERTICAL.
        right_padding_value (Optional[float]): Right padding for an auto-layout frame.
            Requires `layout_mode` to be set to HORIZONTAL or VERTICAL.
        bottom_padding_value (Optional[float]): Bottom padding for an auto-layout frame.
            Requires `layout_mode` to be set to HORIZONTAL or VERTICAL.
        left_padding_value (Optional[float]): Left padding for an auto-layout frame.
            Requires `layout_mode` to be set to HORIZONTAL or VERTICAL.
        main_axis_alignment (Optional[str]): Alignment of items along the
            primary axis (horizontal for `layout_mode` HORIZONTAL, vertical for
            VERTICAL). Valid values: "MIN", "MAX", "CENTER", "SPACE_BETWEEN".
            Requires `layout_mode` to be set to HORIZONTAL or VERTICAL.
        cross_axis_alignment (Optional[str]): Alignment of items along the
            counter axis (vertical for `layout_mode` HORIZONTAL, horizontal for
            VERTICAL). Valid values: "MIN", "MAX", "CENTER", "BASELINE" (for text).
            Requires `layout_mode` to be set to HORIZONTAL or VERTICAL.
        horizontal_resizing_rule (Optional[str]): Optional horizontal resizing
            behavior for the frame when it is a child of an auto-layout parent.
            Valid values: "FIXED" (default), "HUG", "FILL".
        vertical_resizing_rule (Optional[str]): Optional vertical resizing
            behavior for the frame when it is a child of an auto-layout parent.
            Valid values: "FIXED" (default), "HUG", "FILL".
        inter_item_gap (Optional[float]): Optional spacing between items in an
            auto-layout frame. Requires `layout_mode` to be HORIZONTAL or VERTICAL.

    Returns:
        Dict[str, Any]: Details of the newly created frame node. Common properties include:
            id (str): Unique identifier of the frame node.
            name (str): Name of the frame.
            type (str): Node type, always "FRAME".
            parent_id (Optional[str]): ID of the parent node. If not specified
                during creation, this will be the ID of the current page.
            x (float): X-coordinate of the frame on the canvas.
            y (float): Y-coordinate of the frame on the canvas.
            width (float): Width of the frame.
            height (float): Height of the frame.
            fills (List[Dict[str, Any]]): List of paints applied to the frame's fill.
                Each dictionary in the list represents a paint layer. For a SOLID
                fill, a dictionary typically includes:
                type (str): Paint type (e.g., 'SOLID').
                color (Dict[str, float]): RGBA color (e.g.,
                    {'r':0.0-1.0, 'g':0.0-1.0, 'b':0.0-1.0, 'a':0.0-1.0}).
                    r (float): Red component (0.0-1.0).
                    g (float): Green component (0.0-1.0).
                    b (float): Blue component (0.0-1.0).
                    a (float): Alpha component (0.0-1.0).
                opacity (Optional[float]): Opacity of the fill (0.0-1.0).
                visible (Optional[bool]): Visibility of the fill.
            strokes (List[Dict[str, Any]]): List of paints applied to the frame's
                stroke. Each dictionary in the list represents a paint layer.
                For a SOLID stroke, a dictionary typically includes:
                type (str): Paint type (e.g., 'SOLID').
                color (Dict[str, float]): RGBA color (e.g.,
                    {'r':0.0-1.0, 'g':0.0-1.0, 'b':0.0-1.0, 'a':0.0-1.0}).
                    r (float): Red component (0.0-1.0).
                    g (float): Green component (0.0-1.0).
                    b (float): Blue component (0.0-1.0).
                    a (float): Alpha component (0.0-1.0).
                opacity (Optional[float]): Opacity of the stroke (0.0-1.0).
                visible (Optional[bool]): Visibility of the stroke.
            stroke_weight (Optional[float]): Thickness of the stroke.
            stroke_align (Optional[str]): Alignment of the stroke (e.g., 'INSIDE',
                'OUTSIDE', 'CENTER').
            layout_mode (Optional[str]): Auto layout mode ('NONE', 'HORIZONTAL',
                'VERTICAL').
            padding_left (Optional[float]): Left padding if auto-layout is enabled.
            padding_right (Optional[float]): Right padding if auto-layout is enabled.
            padding_top (Optional[float]): Top padding if auto-layout is enabled.
            padding_bottom (Optional[float]): Bottom padding if auto-layout is enabled.
            item_spacing (Optional[float]): Spacing between items if auto-layout is
                enabled and `layout_mode` is HORIZONTAL or VERTICAL.
            primary_axis_align_items (Optional[str]): Primary axis alignment if
                auto-layout is enabled (e.g., 'MIN', 'MAX', 'CENTER', 'SPACE_BETWEEN').
            counter_axis_align_items (Optional[str]): Counter axis alignment if
                auto-layout is enabled (e.g., 'MIN', 'MAX', 'CENTER').
            layout_sizing_horizontal (Optional[str]): Horizontal resizing behavior
                of the frame when it is a child of an auto-layout parent
                (e.g., 'FIXED', 'HUG', 'FILL').
            layout_sizing_vertical (Optional[str]): Vertical resizing behavior
                of the frame when it is a child of an auto-layout parent
                (e.g., 'FIXED', 'HUG', 'FILL').

    Raises:
        ParentNotFoundError: If the specified `parent_container_id` does not correspond to a
            valid container node.
        InvalidInputError: If required parameters are invalid or conflicting layout
            properties are provided.
        FigmaOperationError: If there is an issue executing the creation command
            in Figma.
        ValidationError: If input arguments fail validation.
    """
    from figma.node_creation import create_frame
    return create_frame(
        x=frame_x_coordinate,
        y=frame_y_coordinate,
        width=frame_width,
        height=frame_height,
        name=new_frame_name,
        parent_id=parent_container_id,
        fill_color=background_fill_properties,
        stroke_color=border_stroke_properties,
        stroke_weight=border_thickness,
        layout_mode=auto_layout_orientation,
        layout_wrap=auto_layout_wrap_behavior,
        padding_top=top_padding_value,
        padding_right=right_padding_value,
        padding_bottom=bottom_padding_value,
        padding_left=left_padding_value,
        primary_axis_align_items=main_axis_alignment,
        counter_axis_align_items=cross_axis_alignment,
        layout_sizing_horizontal=horizontal_resizing_rule,
        layout_sizing_vertical=vertical_resizing_rule,
        item_spacing=inter_item_gap
    )


def add_new_text_element(
    text_node_x_pos,
    text_node_y_pos,
    initial_text_content,
    text_font_pixel_size=None,
    text_font_style_weight=None,
    text_color_paint_object=None,
    text_layer_label=None,
    parent_element_identifier=None
):
    """
    Create a new text element in Figma.

    This function creates a new text element on the Figma canvas. It positions
    the text element using the provided `x` and `y` coordinates and sets its
    content using the `text` string. Optional styling attributes such as
    `font_size`, `font_weight`, and `font_color` (as a Figma Paint object)
    can be applied. The created text layer can be assigned an optional `name`
    and can be parented under an existing container node specified by `parent_id`.
    If `parent_id` is not provided, the text node is added to the current page.
    The function returns a dictionary containing information about the newly
    created text node.

    Args:
        text_node_x_pos (float): The x-coordinate for the text node's position on the canvas.
        text_node_y_pos (float): The y-coordinate for the text node's position on the canvas.
        initial_text_content (str): The text content to display. Cannot be empty.
        text_font_pixel_size (Optional[float]): The font size of the text in pixels. Must be a
            positive value if provided. Defaults to Figma's standard size if
            not provided.
        text_font_style_weight (Optional[float]): The font weight of the text (e.g., 400.0 for
            regular, 700.0 for bold). Defaults to Figma's standard weight if
            not provided. Must be a positive value if provided.
        text_color_paint_object (Optional[Dict[str, Any]]): The color of the text, specified as a
            Figma Paint object. Example: `{'type': 'SOLID', 'color': {'r': 0, 'g': 0, 'b': 0, 'a': 1}}`.
            Defaults to Figma's standard color if not provided.
            Expected keys:
                type (str): The type of paint (e.g., 'SOLID').
                color (Dict[str, float]): A dictionary defining the color's RGBA components.
                    r (float): The red color component (0.0-1.0 range).
                    g (float): The green color component (0.0-1.0 range).
                    b (float): The blue color component (0.0-1.0 range).
                    a (float): The alpha (opacity) component (0.0-1.0 range).
        text_layer_label (Optional[str]): An optional name for the created text layer in Figma.
            If None, the `text` content will be used as the name.
        parent_element_identifier (Optional[str]): The ID of an existing container node (valid container type accepts:
          FRAME, GROUP, COMPONENT, INSTANCE, CANVAS) to parent the new text node under. If not provided,
            the text node will be added to the current page.

    Returns:
        Dict[str, Any]: Information about the newly created text node. Contains the
            following keys:
            id (str): The unique identifier of the new text node.
            name (str): The name assigned to the text node.
            type (str): The type of the node, which will be 'TEXT'.
            parent_id (Optional[str]): The ID of the parent node if specified,
                otherwise the ID of the current page.
            x (float): The x-coordinate of the text node on the canvas.
            y (float): The y-coordinate of the text node on the canvas.
            characters (str): The text content of the node.
            font_size (float): The font size applied to the text, in pixels.
            fills (List[Dict[str, Any]]): A list of paint objects applied to the
                text, determining its color. Each paint object typically contains:
                type (str): The type of paint (e.g., 'SOLID', 'GRADIENT_LINEAR').
                color (Optional[Dict[str, float]]): For SOLID fills, an object with
                    'r', 'g', 'b' (0-1 range) and 'a' (alpha, 0-1 range)
                    components. Other paint-type-specific properties may also be
                    present.
                    r (float): Red component (0.0-1.0 range).
                    g (float): Green component (0.0-1.0 range).
                    b (float): Blue component (0.0-1.0 range).
                    a (float): Alpha component (0.0-1.0 range).

    Raises:
        ParentNotFoundError: If the specified `parent_element_identifier` does not correspond to a
            valid container node in Figma.
        InvalidInputError: If required parameters are invalid (e.g., empty `initial_text_content`,
            non-positive `text_font_pixel_size`, non-positive `text_font_style_weight`, or malformed `text_color_paint_object` object),
            or if input validation fails.
        FigmaOperationError: If there is an internal issue executing the creation
            command in Figma (e.g., Figma API limits reached, Figma service
            temporarily unavailable).
    """
    from figma.node_creation import create_text
    return create_text(
        x=text_node_x_pos,
        y=text_node_y_pos,
        text=initial_text_content,
        font_size=text_font_pixel_size,
        font_weight=text_font_style_weight,
        font_color=text_color_paint_object,
        name=text_layer_label,
        parent_id=parent_element_identifier
    )
