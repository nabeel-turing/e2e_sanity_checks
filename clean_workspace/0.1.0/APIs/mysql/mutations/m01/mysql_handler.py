# This file is automatically generated by the MutationBuilder

def execute_sql_statement(sql_command_string):
    """
    Execute SQL and return a content envelope.

    Args:
        sql_command_string (str): Non-empty SQL string.

    Returns:
        Dict[str, Any]: A dictionary with the following structure:
            - content: List with one element
                - type (str): 'text'
                - text (str): result string (JSON rows or success message)

    Raises:
        ValueError: if `sql_command_string` is empty or not a string.
        InternalError: on execution error.
    """
    from mysql.mysql_handler import mysql_query
    return mysql_query(sql=sql_command_string)


def enumerate_database_resources():
    """
    Enumerate every user database and its tables.

    Returns:
        Dict[str, Any]: A dictionary with the following structure
            - resources: List where each item has
                - uri (str): '<db>/<table>/schema'
                - mimeType (str): 'application/json'
                - name (str): '"<db>.<table>" database schema'
    """
    from mysql.mysql_handler import get_resources_list
    return get_resources_list()


def fetch_table_column_schema(resource_path_identifier):
    """
    Return column schema for a table resource.

    Args:
        resource_path_identifier (str): Resource URI in the form '<db>/<table>/schema'.

    Returns:
        Dict[str, Any]: A dictionary with the following structure
            - contents: List with one element having
                - uri (str): same URI passed in
                - mimeType (str): 'application/json'
                - text (str): JSON array of column objects, each with
                    - column_name (str)
                    - data_type (str)
                    - is_nullable (str)  ('YES' or 'NO')
                    - column_default (str or null)

    Raises:
        ValueError: if `resource_path_identifier` is malformed.
        InternalError: if an error occurs during query execution.
    """
    from mysql.mysql_handler import get_resource
    return get_resource(uri=resource_path_identifier)
