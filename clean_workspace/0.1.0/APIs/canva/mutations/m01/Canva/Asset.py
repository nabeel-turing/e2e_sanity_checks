# This file is automatically generated by the MutationBuilder

def start_media_upload_process(asset_filename, asset_keywords, preview_image_url):
    """
    Creates an asset upload job and returns its initial status.

    Args:
        asset_filename (str): The name of the asset being uploaded.
        asset_keywords (List[str]): Tags associated with the asset (max 50).
        preview_image_url (str): URL to the thumbnail image representing the asset.

    Returns:
        str: The unique ID of the created upload job.

    Notes:
        This function simulates job creation and metadata. Binary upload and real processing should be
        handled via the /v1/asset-uploads endpoint using a separate POST request with proper headers.
    """
    from canva.Canva.Asset import create_asset_upload_job
    return create_asset_upload_job(
        name=asset_filename,
        tags=asset_keywords,
        thumbnail_url=preview_image_url
    )


def check_media_upload_status(upload_task_identifier):
    """
    Retrieves the status and result of an asset upload job.

    Args:
        upload_task_identifier (str): The ID of the asset upload job.

    Returns:
        Optional[Dict[str, Any]]: A dictionary with the key 'job' containing:
            - id (str): ID of the asset upload job.
            - status (str): Status of the upload job. One of:
                - "in_progress"
                - "success"
                - "failed"
            - asset (dict, optional): Present only if status is "success". Contains:
                - id (str): Asset ID.
                - name (str): Name of the uploaded asset.
                - type (str): Type of the asset (e.g., "image", "video").
                - tags (List[str]): User-facing tags.
                - created_at (int): Unix timestamp when asset was created.
                - updated_at (int): Unix timestamp when asset was last updated.
                - thumbnail (dict, optional):
                    - width (int): Width in pixels.
                    - height (int): Height in pixels.
                    - url (str): Temporary URL to the thumbnail (expires in 15 minutes).
            - error (dict, optional): Present only if status is "failed". Contains:
                - code (str): One of "file_too_big", "import_failed".
                - message (str): Human-readable explanation of the failure.
    """
    from canva.Canva.Asset import get_asset_upload_job
    return get_asset_upload_job(job_id=upload_task_identifier)


def fetch_asset_metadata(media_identifier):
    """
    Retrieves metadata for a specific asset by its ID.

    Args:
        media_identifier (str): The ID of the asset to retrieve.

    Returns:
        Optional[Dict[str, Any]]: A dictionary with the key 'asset' containing:
            - id (str): The asset ID.
            - name (str): Name of the asset.
            - type (str): Type of the asset (e.g., "image", "video").
            - tags (List[str]): List of user-facing tags assigned to the asset.
            - created_at (int): Timestamp of asset creation (Unix time).
            - updated_at (int): Timestamp of last asset update (Unix time).
            - thumbnail (dict, optional):
                - width (int): Width of the thumbnail in pixels.
                - height (int): Height of the thumbnail in pixels.
                - url (str): Temporary URL to retrieve the thumbnail (expires in 15 minutes).
            - import_status (dict, optional, deprecated):
                - state (str): Import job state ("in_progress", "success", "failed", "error").
            - import_error (dict, optional, deprecated):
                - code (str): Error code ("file_too_big", "import_failed").
                - message (str): Description of what went wrong.
    """
    from canva.Canva.Asset import get_asset
    return get_asset(asset_id=media_identifier)


def modify_asset_details(target_asset_id, new_asset_name=None, new_asset_tags=None):
    """
    Updates the metadata of an existing asset and returns the updated asset.

    Args:
        target_asset_id (str): The ID of the asset to update.
        new_asset_name (Optional[str]): New name for the asset (max 50 characters).
        new_asset_tags (Optional[List[str]]): New list of tags for the asset (max 50 tags).

    Returns:
        bool: True if the asset was successfully updated, False if the asset was not found.
    """
    from canva.Canva.Asset import update_asset
    return update_asset(asset_id=target_asset_id, name=new_asset_name, tags=new_asset_tags)


def permanently_remove_asset(asset_to_remove_id):
    """
    Deletes an asset by its ID.

    Args:
        asset_to_remove_id (str): The ID of the asset to delete.

    Returns:
        bool: True if the asset was successfully deleted, False if the asset was not found.
    """
    from canva.Canva.Asset import delete_asset
    return delete_asset(asset_id=asset_to_remove_id)
