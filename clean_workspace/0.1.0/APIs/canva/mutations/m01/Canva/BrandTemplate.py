# This file is automatically generated by the MutationBuilder

def fetch_brand_template_by_id(template_identifier):
    """
    Retrieve a brand template by its ID.

    Args:
        template_identifier (str): The ID of the brand template.

    Returns:
        Optional[Dict[str, Any]]: A dictionary with the key 'brand_template' containing:
            - id (str): The brand template ID.
            - title (str): The brand template title, as shown in the Canva UI.
            - view_url (str): URL to view the brand template.
            - create_url (str): URL to create a design from the template.
            - created_at (int): Unix timestamp when the template was created.
            - updated_at (int): Unix timestamp when the template was last updated.
            - thumbnail (dict, optional):
                - width (int): Width of the thumbnail in pixels.
                - height (int): Height of the thumbnail in pixels.
                - url (str): URL to retrieve the thumbnail (expires in 15 minutes).
            Returns None if the brand template is not found.
    """
    from canva.Canva.BrandTemplate import get_brand_template
    return get_brand_template(brand_template_id=template_identifier)


def retrieve_brand_template_schema(target_template_id):
    """
    Gets the dataset definition of a brand template. If the brand template contains autofill data fields,
    this returns an object with the data field names and the type of data they accept.

    Args:
        target_template_id (str): The brand template ID.

    Returns:
        Optional[Dict[str, Any]]: A dictionary containing:
            - dataset (dict): Dataset definition with named data fields, where each field is a dictionary containing:
                - type (str): The type of data the field accepts ('image', 'text', or 'chart').
            Returns None if the brand template is not found or has no dataset.
    """
    from canva.Canva.BrandTemplate import get_brand_template_dataset
    return get_brand_template_dataset(brand_template_id=target_template_id)


def find_brand_templates(
    search_keyword=None,
    page_token=None,
    ownership_filter='any',
    sort_order_key='relevance',
    dataset_status_filter='any'
):
    """
    List brand templates with optional filters and sorting.

    Args:
        search_keyword (Optional[str]): Search term to filter brand templates by title.
        page_token (Optional[str]): Token for pagination (currently unused).
        ownership_filter (Optional[str]): Ownership filter ('any', 'owned', 'shared').
        sort_order_key (Optional[str]): Sort order ('relevance', 'modified_descending', etc.).
        dataset_status_filter (Optional[str]): Filter based on dataset presence ('any', 'non_empty', 'empty').

    Returns:
        Dict[str, Any]: A dictionary containing:
            - continuation (str or None): Token for the next page of results.
            - items (List[dict]): Each item includes:
                - id (str): Brand template ID.
                - title (str): Title of the template.
                - view_url (str): URL to view the template.
                - create_url (str): URL to create a design from the template.
                - thumbnail (dict):
                    - width (int): Thumbnail width in pixels.
                    - height (int): Thumbnail height in pixels.
                    - url (str): URL to the thumbnail image.
                - created_at (int): Creation timestamp (Unix time).
                - updated_at (int): Last updated timestamp (Unix time).
    """
    from canva.Canva.BrandTemplate import list_brand_templates
    return list_brand_templates(
        query=search_keyword,
        continuation=page_token,
        ownership=ownership_filter,
        sort_by=sort_order_key,
        dataset=dataset_status_filter
    )
