# This file is automatically generated by the MutationBuilder

def start_new_discussion_thread(target_design_id, comment_text, assigned_user_identifier=None):
    """
    Creates a new comment thread on a design.

    Args:
        target_design_id (str): The ID of the design to add a comment to.
        comment_text (str): The plaintext body of the comment. User mentions must follow the format [user_id:team_id].
        assigned_user_identifier (Optional[str]): Optional ID of the user to assign the comment to.
                                     The user must be mentioned in the comment message.

    Returns:
        dict: Contains:
            - thread (dict): The created thread object with fields:
                - id (str): Thread ID.
                - design_id (str)
                - thread_type (dict):
                    - type (str): "comment" or "suggestion".
                - content (dict):
                    - plaintext (str)
                    - markdown (str, optional)
                    - mentions (dict): Keys are "user_id:team_id", values include:
                        - tag (str)
                        - user: user_id, team_id, display_name
                - assignee (dict, optional): Assigned user metadata.
                - resolver (dict, optional): Resolver user metadata.
                - suggested_edits (list, optional): Type-specific suggestion info.
                - author (dict, optional): Metadata for the user who authored the comment.
                - created_at (int)
                - updated_at (int)
    """
    from canva.Canva.Design.Comment import create_thread
    return create_thread(
        design_id=target_design_id,
        message=comment_text,
        assignee_id=assigned_user_identifier
    )


def post_reply_to_thread(related_design_id, parent_thread_id, reply_content):
    """
    Adds a reply to a comment thread on a design.

    Args:
        related_design_id (str): The ID of the design the thread belongs to.
        parent_thread_id (str): The ID of the thread to reply to.
        reply_content (str): The plaintext message body of the reply. Mentions use [user_id:team_id].

    Returns:
        dict: Contains:
            - reply (dict):
                - id (str)
                - design_id (str)
                - thread_id (str)
                - content (dict):
                    - plaintext (str)
                    - markdown (str, optional)
                    - mentions (dict): Keys as "user_id:team_id", values include tag and user info.
                - author (dict, optional): User metadata.
                - created_at (int)
                - updated_at (int)
    """
    from canva.Canva.Design.Comment import create_reply
    return create_reply(
        design_id=related_design_id,
        thread_id=parent_thread_id,
        message=reply_content
    )


def fetch_discussion_thread(associated_design_id, discussion_thread_identifier):
    """
    Retrieves a specific comment thread from a design.

    Args:
        associated_design_id (str): The design ID.
        discussion_thread_identifier (str): The ID of the thread to retrieve.

    Returns:
        dict: Contains:
            - thread (dict):
                - id (str)
                - design_id (str)
                - thread_type (dict): { type: "comment" | "suggestion" }
                - content (dict): Includes plaintext, markdown (optional), mentions (optional)
                - suggested_edits (list, optional): Edits with type and formatting metadata.
                - assignee (dict, optional)
                - resolver (dict, optional)
                - author (dict, optional)
                - created_at (int)
                - updated_at (int)
    """
    from canva.Canva.Design.Comment import get_thread
    return get_thread(design_id=associated_design_id, thread_id=discussion_thread_identifier)


def retrieve_specific_reply(design_context_id, containing_thread_id, reply_identifier):
    """
    Retrieves a specific reply from a thread on a design.

    Args:
        design_context_id (str): The ID of the design.
        containing_thread_id (str): The ID of the thread the reply belongs to.
        reply_identifier (str): The ID of the reply to retrieve.

    Returns:
        dict: Contains:
            - reply (dict):
                - id (str)
                - design_id (str)
                - thread_id (str)
                - content (dict): Includes plaintext, markdown (optional), mentions
                - author (dict, optional): User metadata
                - created_at (int)
                - updated_at (int)
    """
    from canva.Canva.Design.Comment import get_reply
    return get_reply(
        design_id=design_context_id,
        thread_id=containing_thread_id,
        reply_id=reply_identifier
    )


def enumerate_thread_replies(relevant_design_id, target_thread_identifier, page_size=50, next_page_token=None):
    """
    Lists replies from a specific thread on a design.

    Args:
        relevant_design_id (str): The ID of the design.
        target_thread_identifier (str): The ID of the thread.
        page_size (Optional[int]): Max number of replies to return (default: 50, min: 1, max: 100).
        next_page_token (Optional[str]): Token for paginated results.

    Returns:
        dict: Contains:
            - items (List[dict]): List of reply objects:
                - id (str)
                - design_id (str)
                - thread_id (str)
                - content (dict): plaintext, markdown (optional), mentions
                - author (dict, optional)
                - created_at (int)
                - updated_at (int)
            - continuation (str, optional): Token for fetching the next set of results.
    """
    from canva.Canva.Design.Comment import list_replies
    return list_replies(
        design_id=relevant_design_id,
        thread_id=target_thread_identifier,
        limit=page_size,
        continuation=next_page_token
    )
