# This file is automatically generated by the MutationBuilder

def generate_canva_artwork(artwork_format, initial_asset_identifier, artwork_name):
    """
    Creates a new design with specified design type, asset, and title.

    Args:
        artwork_format (dict): The design type to use with the following key:
            - "preset": Accepted values for preset are:
                - doc
                - whiteboard
                - presentation
                - canvas
                - banner
                - flyer
                - social
                - video
                - presentation
                - infographic
                - poster
        initial_asset_identifier (str): The ID of the asset (e.g., image) to include in the design.
                        Must be a non-empty string.
        artwork_name (str): Title of the design. Must be 1â€“255 characters.

    Returns:
        Dict[str, Any]: Contains metadata for the newly created design:
            - id (str): Design ID.
            - design_type (dict): The validated and processed design_type input.
            - asset_id (str)
            - title (str)
            - created_at (int): Unix timestamp.
            - updated_at (int): Unix timestamp.

    Raises:
        pydantic.ValidationError: If 'artwork_format' is not a valid dictionary or
                                  does not conform to the DesignTypeInputModel structure.
        TypeError: If 'initial_asset_identifier' or 'artwork_name' are not strings.
        InvalidAssetIDError: If 'initial_asset_identifier' is an empty string.
        InvalidTitleError: If 'artwork_name' length is not between 1 and 255 characters.
    """
    from canva.Canva.Design import create_design
    return create_design(
        design_type=artwork_format,
        asset_id=initial_asset_identifier,
        title=artwork_name
    )


def search_canva_creations(
    search_keyword=None,
    access_level_filter='any',
    result_ordering_preference='relevance'
):
    """
    Lists user-owned and shared designs, optionally filtered and sorted.

    Args:
        search_keyword (Optional[str]): Search term to filter designs by title (max length: 255).
        access_level_filter (str): Filter by ownership - "any", "owned", or "shared".
                               Defaults to "any".
        result_ordering_preference (str): Sort options - "relevance", "modified_descending", "modified_ascending",
                       "title_descending", "title_ascending". Defaults to "relevance".

    Returns:
        List[Dict[str, str]]: A list of design metadata entries, each containing:
            - id (str)
            - title (str)
            - created_at (int)
            - updated_at (int)
            - thumbnail (dict, optional)
            - owner (dict): { user_id, team_id }
            - urls (dict): { edit_url, view_url }
        Returns None if no designs are found after filtering.

    Raises:
        TypeError: If 'search_keyword' (when not None), 'access_level_filter', or 'result_ordering_preference' are not strings.
        InvalidQueryError: If 'search_keyword' exceeds the maximum length of 255 characters.
        InvalidOwnershipError: If 'access_level_filter' is not one of the allowed values
                               ("any", "owned", "shared").
        InvalidSortByError: If 'result_ordering_preference' is not one of the allowed values
                            ("relevance", "modified_descending", "modified_ascending",
                             "title_descending", "title_ascending").
    """
    from canva.Canva.Design import list_designs
    return list_designs(
        query=search_keyword,
        ownership=access_level_filter,
        sort_by=result_ordering_preference
    )


def retrieve_artwork_metadata(artwork_identifier):
    """
    Retrieves metadata for a single design.

    Args:
        artwork_identifier (str): The ID of the design. Must be a non-empty string.

    Returns:
        Optional[Dict[str, Any]]: If found, returns:
            - design (dict):
                - id (str)
                - title (str, optional)
                - created_at (int)
                - updated_at (int)
                - thumbnail (dict, optional)
                - owner (dict): { user_id, team_id }
                - urls (dict): { edit_url, view_url }
                - page_count (int, optional)
        Otherwise, returns None.

    Raises:
        TypeError: If `artwork_identifier` is not a string.
        InvalidDesignIDError: If `artwork_identifier` is an empty string.
    """
    from canva.Canva.Design import get_design
    return get_design(design_id=artwork_identifier)


def fetch_project_pages(target_design_id, pagination_start_index=1, items_per_page_count=50):
    """
    Retrieves pages from a design, with support for pagination.

    Args:
        target_design_id (str): The ID of the design to retrieve pages from.
        pagination_start_index (int): The index of the first page to return (1-based). Default is 1.
                      Min: 1, Max: 500.
        items_per_page_count (int): The number of pages to return. Default is 50.
                     Min: 1, Max: 200.

    Returns:
        Optional[Dict[str, List[Dict[str, str]]]]: If pages are found, returns:
            - pages (list of dicts):
                - index (int)
                - thumbnail (dict, optional):
                    - width (int)
                    - height (int)
                    - url (str)
        Otherwise, returns None.
    """
    from canva.Canva.Design import get_design_pages
    return get_design_pages(
        design_id=target_design_id,
        offset=pagination_start_index,
        limit=items_per_page_count
    )
