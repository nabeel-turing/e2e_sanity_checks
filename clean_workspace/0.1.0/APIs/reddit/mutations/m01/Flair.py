# This file is automatically generated by the MutationBuilder

def purge_flair_templates(target_flair_category):
    """
    Clears all flair templates (user or link) in a subreddit.

    Args:
        target_flair_category (str): Either "USER_FLAIR" or "LINK_FLAIR".

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("cleared")
            - flair_type (str): The type of flair that was cleared
    """
    from reddit.Flair import post_api_clearflairtemplates
    return post_api_clearflairtemplates(flair_type=target_flair_category)


def remove_user_flair_assignment(target_user_name):
    """
    Removes flair from a specific user.

    Args:
        target_user_name (str): The username whose flair is to be removed.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("flair_deleted")
            - user (str): The username whose flair was removed
    """
    from reddit.Flair import post_api_deleteflair
    return post_api_deleteflair(name=target_user_name)


def erase_flair_template_by_id(flair_template_identifier):
    """
    Deletes a flair template by its ID.

    Args:
        flair_template_identifier (str): The ID of the flair template to delete.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("flair_template_deleted")
            - template_id (str): The ID of the deleted template
    """
    from reddit.Flair import post_api_deleteflairtemplate
    return post_api_deleteflairtemplate(template_id=flair_template_identifier)


def assign_flair_to_user(
    api_response_format,
    username_to_flair,
    chosen_flair_template_id=None,
    custom_flair_text=None
):
    """
    Sets or updates a user's flair.

    Args:
        api_response_format (str): Must be "json".
        username_to_flair (str): The username for which to set flair.
        chosen_flair_template_id (Optional[str]): The ID of the flair template (if using one).
        custom_flair_text (Optional[str]): Custom flair text if not using a template.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("success")
            - api_type (str): The API type used
            - user (str): The username whose flair was updated
            - template_id (Optional[str]): The ID of the flair template used
            - text (Optional[str]): The custom flair text used
    """
    from reddit.Flair import post_api_flair
    return post_api_flair(
        api_type=api_response_format,
        name=username_to_flair,
        flair_template_id=chosen_flair_template_id,
        text=custom_flair_text
    )


def arrange_flair_templates(flair_category_to_reorder, new_template_id_order):
    """
    Reorders the existing flair templates.

    Args:
        flair_category_to_reorder (str): Either "USER_FLAIR" or "LINK_FLAIR".
        new_template_id_order (List[str]): An ordered list of flair template IDs.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("success")
            - flair_type (str): The type of flair that was reordered
            - order (List[str]): The new order of template IDs
    """
    from reddit.Flair import patch_api_flair_template_order
    return patch_api_flair_template_order(
        flair_type=flair_category_to_reorder,
        template_ids=new_template_id_order
    )


def modify_subreddit_flair_settings(is_flair_feature_enabled=None, flair_display_position=None):
    """
    Configures overall flair settings.

    Args:
        is_flair_feature_enabled (Optional[bool]): Indicates if flair is enabled.
        flair_display_position (Optional[str]): The position of flair (e.g., "left" or "right").

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("updated")
            - flair_enabled (Optional[bool]): The new enabled status
            - flair_position (Optional[str]): The new position setting
    """
    from reddit.Flair import post_api_flairconfig
    return post_api_flairconfig(
        flair_enabled=is_flair_feature_enabled,
        flair_position=flair_display_position
    )


def bulk_update_user_flairs_from_csv(csv_formatted_flair_data):
    """
    Processes CSV input to set multiple user flairs.

    Args:
        csv_formatted_flair_data (str): A CSV-formatted string with flair data.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("processed_csv")
            - csv_data (str): The processed CSV data
    """
    from reddit.Flair import post_api_flaircsv
    return post_api_flaircsv(flair_csv=csv_formatted_flair_data)


def fetch_paginated_user_flair_list(pagination_fullname_anchor=None, username_filter=None, max_users_to_return=None):
    """
    Retrieves a paginated list of users and their flair.

    Args:
        pagination_fullname_anchor (Optional[str]): The fullname anchor for pagination.
        username_filter (Optional[str]): A filter by username.
        max_users_to_return (Optional[int]): The maximum number of users to return.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - users (List[Dict[str, Any]]): A list of users and their flair
            - after (Optional[str]): The pagination anchor
            - limit (Optional[int]): The maximum number of users returned
            - filter_name (Optional[str]): The username filter applied
    """
    from reddit.Flair import get_api_flairlist
    return get_api_flairlist(
        after=pagination_fullname_anchor,
        name=username_filter,
        limit=max_users_to_return
    )


def retrieve_available_flair_choices(target_link_fullname=None, target_user_for_flair_options=None):
    """
    Retrieves available flair options for a link or user.

    Args:
        target_link_fullname (Optional[str]): The fullname of the link.
        target_user_for_flair_options (Optional[str]): The username.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - options (List[Dict[str, Any]]): Available flair options
            - link (Optional[str]): The link fullname
            - user (Optional[str]): The username
    """
    from reddit.Flair import post_api_flairselector
    return post_api_flairselector(link=target_link_fullname, name=target_user_for_flair_options)


def configure_basic_flair_template(template_flair_category, flair_template_text):
    """
    Creates or updates a flair template.

    Args:
        template_flair_category (str): Either "USER_FLAIR" or "LINK_FLAIR".
        flair_template_text (str): The flair text.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("template_saved")
            - flair_type (str): The type of flair template
            - text (str): The saved flair text
    """
    from reddit.Flair import post_api_flairtemplate
    return post_api_flairtemplate(flair_type=template_flair_category, text=flair_template_text)


def configure_advanced_flair_template(advanced_template_flair_category, advanced_flair_template_text):
    """
    Creates or updates a flair template with advanced options.

    Args:
        advanced_template_flair_category (str): Either "USER_FLAIR" or "LINK_FLAIR".
        advanced_flair_template_text (str): The flair text.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("template_v2_saved")
            - flair_type (str): The type of flair template
            - text (str): The saved flair text
    """
    from reddit.Flair import post_api_flairtemplate_v2
    return post_api_flairtemplate_v2(
        flair_type=advanced_template_flair_category,
        text=advanced_flair_template_text
    )


def fetch_old_link_flair_templates():
    """
    Retrieves link flair templates (legacy version).

    Returns:
        List[Dict[str, Any]]: A list of link flair templates.
    """
    from reddit.Flair import get_api_link_flair
    return get_api_link_flair()


def fetch_current_link_flair_templates():
    """
    Retrieves link flair templates (v2).

    Returns:
        List[Dict[str, Any]]: A list of link flair templates.
    """
    from reddit.Flair import get_api_link_flair_v2
    return get_api_link_flair_v2()


def apply_flair_template_to_post(post_fullname_to_flair, selected_flair_template_id):
    """
    Applies a chosen link flair template to a post.

    Args:
        post_fullname_to_flair (str): The fullname of the post.
        selected_flair_template_id (str): The ID of the flair template.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("success")
            - link (str): The post fullname
            - template_id (str): The applied template ID
    """
    from reddit.Flair import post_api_selectflair
    return post_api_selectflair(
        link=post_fullname_to_flair,
        flair_template_id=selected_flair_template_id
    )


def toggle_flair_feature_status(response_format, new_flair_enabled_state):
    """
    Enables or disables flair in a subreddit.

    Args:
        response_format (str): Must be "json".
        new_flair_enabled_state (bool): True to enable flair, False to disable.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("flair_enabled_set")
            - enabled (bool): The new enabled status
    """
    from reddit.Flair import post_api_setflairenabled
    return post_api_setflairenabled(api_type=response_format, flair_enabled=new_flair_enabled_state)


def fetch_old_user_flair_templates():
    """
    Retrieves all user flair templates for a subreddit (legacy).

    Returns:
        List[Dict[str, Any]]: A list of user flair templates.
    """
    from reddit.Flair import get_api_user_flair
    return get_api_user_flair()


def fetch_current_user_flair_templates():
    """
    Retrieves all user flair templates for a subreddit (v2).

    Returns:
        List[Dict[str, Any]]: A list of user flair templates.
    """
    from reddit.Flair import get_api_user_flair_v2
    return get_api_user_flair_v2()
