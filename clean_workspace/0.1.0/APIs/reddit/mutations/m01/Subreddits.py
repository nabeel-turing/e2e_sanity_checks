# This file is automatically generated by the MutationBuilder

def list_banned_users_in_subreddit():
    """
    Retrieves a list of banned users in a subreddit.

    Returns:
        List[str]:
        - If there are no banned users, returns an empty list.
        - On successful retrieval, returns a list of banned user identifiers.
    """
    from reddit.Subreddits import get_about_banned
    return get_about_banned()


def list_approved_submitters_in_subreddit():
    """
    Retrieves a list of approved submitters in a subreddit.

    Returns:
        List[str]:
        - If there are no approved submitters, returns an empty list.
        - On successful retrieval, returns a list of contributor usernames.
    """
    from reddit.Subreddits import get_about_contributors
    return get_about_contributors()


def list_moderators_in_subreddit():
    """
    Retrieves a list of moderators in a subreddit.

    Returns:
        List[str]:
        - If there are no moderators, returns an empty list.
        - On successful retrieval, returns a list of moderator usernames.
    """
    from reddit.Subreddits import get_about_moderators
    return get_about_moderators()


def list_muted_users_in_subreddit():
    """
    Retrieves a list of muted users in a subreddit.

    Returns:
        List[str]:
        - If there are no muted users, returns an empty list.
        - On successful retrieval, returns a list of muted user identifiers.
    """
    from reddit.Subreddits import get_about_muted
    return get_about_muted()


def list_wiki_banned_users_in_subreddit():
    """
    Retrieves a list of users banned from wiki edits.

    Returns:
        List[str]:
        - If there are no wiki-banned users, returns an empty list.
        - On successful retrieval, returns a list of wiki-banned user identifiers.
    """
    from reddit.Subreddits import get_about_wikibanned
    return get_about_wikibanned()


def list_approved_wiki_contributors_in_subreddit():
    """
    Retrieves a list of approved wiki contributors.

    Returns:
        List[str]:
        - If there are no wiki contributors, returns an empty list.
        - On successful retrieval, returns a list of wiki contributor usernames.
    """
    from reddit.Subreddits import get_about_wikicontributors
    return get_about_wikicontributors()


def fetch_subreddit_user_lists_by_category(user_list_category):
    """
    Retrieves user lists based on a specified category.

    Args:
        user_list_category (str): The category (e.g., "banned", "moderators").

    Returns:
        Dict[str, Any]:
        - If the category is invalid, returns a dictionary with the key "error" and the value "Invalid category.".
        - On successful retrieval, returns a dictionary with the following keys:
            - where (str): The requested category
            - users (List[str]): A list of user identifiers for the category
    """
    from reddit.Subreddits import get_about_where
    return get_about_where(where=user_list_category)


def remove_subreddit_banner_image():
    """
    Deletes the subreddit's banner image.

    Returns:
        Dict[str, Any]:
        - If the banner does not exist, returns a dictionary with the key "error" and the value "Banner not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("sr_banner_deleted")
    """
    from reddit.Subreddits import post_api_delete_sr_banner
    return post_api_delete_sr_banner()


def remove_subreddit_header_image():
    """
    Deletes the subreddit's header image.

    Returns:
        Dict[str, Any]:
        - If the header does not exist, returns a dictionary with the key "error" and the value "Header not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("sr_header_deleted")
    """
    from reddit.Subreddits import post_api_delete_sr_header
    return post_api_delete_sr_header()


def remove_subreddit_icon_image():
    """
    Deletes the subreddit's icon image.

    Returns:
        Dict[str, Any]:
        - If the icon does not exist, returns a dictionary with the key "error" and the value "Icon not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("sr_icon_deleted")
    """
    from reddit.Subreddits import post_api_delete_sr_icon
    return post_api_delete_sr_icon()


def remove_image_from_subreddit_stylesheet(image_name_to_delete):
    """
    Deletes a subreddit stylesheet image.

    Args:
        image_name_to_delete (str): The name or key of the image to remove.

    Returns:
        Dict[str, Any]:
        - If the image does not exist, returns a dictionary with the key "error" and the value "Image not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("sr_image_deleted")
            - img_name (str): The name of the deleted image
    """
    from reddit.Subreddits import post_api_delete_sr_img
    return post_api_delete_sr_img(img_name=image_name_to_delete)


def suggest_similar_subreddits(source_subreddit_names):
    """
    Suggests related subreddits based on provided names.

    Args:
        source_subreddit_names (str): A comma-separated list of subreddit names.

    Returns:
        Dict[str, Any]:
        - If the input is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit names.".
        - On successful retrieval, returns a dictionary with the following keys:
            - recommendations_for (List[str]): The list of input subreddit names
            - recommendations (List[str]): A list of recommended subreddit names
    """
    from reddit.Subreddits import get_api_recommend_sr_srnames
    return get_api_recommend_sr_srnames(srnames=source_subreddit_names)


def check_subreddit_name_availability(search_term):
    """
    Checks for subreddit name availability or suggests names.

    Args:
        search_term (str): The search term for subreddit names.

    Returns:
        Dict[str, Any]:
        - If the query is invalid, returns a dictionary with the key "error" and the value "Invalid search query.".
        - On successful check, returns a dictionary with the following keys:
            - query (str): The search query
            - available (bool): Whether the name is available
    """
    from reddit.Subreddits import get_api_search_reddit_names
    return get_api_search_reddit_names(query=search_term)


def find_subreddits_by_metadata(metadata_search_query, require_exact_match=False, include_adult_subreddits=False):
    """
    Searches for subreddits by name, title and description.

    Args:
        metadata_search_query (str): The search keyword(s).
        require_exact_match (bool): If True, an exact match for the query will be performed. Defaults to False.
        include_adult_subreddits (bool): If True, results will include subreddits marked as "over 18". Defaults to False.

    Returns:
        Dict[str, Any]: On successful search, returns a dictionary with the following keys:
            - query (str): The search query
            - results (List[Dict[str, Any]]): A list of matching subreddit, each containing:
                - name (str): The subreddit name
                - title (str): The subreddit title
                - description (str): The subreddit description
                - subscribers (int): The number of subscribers
                - created_utc (int): The creation timestamp in UTC
                - over18 (bool): Whether the subreddit is marked as "over 18"
                - spoilers_enabled (bool): Whether spoilers are enabled for the subreddit
                - public_description (str): The public description of the subreddit
                - subreddit_type (str): The type of subreddit (e.g., "public", "restricted")
                - restrict_posting (bool): Whether posting is restricted
                - restrict_commenting (bool): Whether commenting is restricted
                - restrict_media (bool): Whether media is restricted

    Raises:
        TypeError:
            - If the metadata_search_query is not a string.
            - If require_exact_match or include_adult_subreddits are not booleans.
        ValueError:
            - If the metadata_search_query is empty or None
            - If the metadata_search_query is too long (over 50 characters)
            - If the metadata_search_query contains non-printable characters.
    """
    from reddit.Subreddits import post_api_search_subreddits
    return post_api_search_subreddits(
        query=metadata_search_query,
        exact=require_exact_match,
        include_over18=include_adult_subreddits
    )


def establish_or_modify_subreddit(subreddit_url_name, subreddit_display_title):
    """
    Creates or edits a subreddit.

    Args:
        subreddit_url_name (str): The name of the subreddit.
        subreddit_display_title (str): The title of the subreddit.

    Returns:
        Dict[str, Any]:
        - If the name is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit name.".
        - If the title is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit title.".
        - On successful creation/editing, returns a dictionary with the following keys:
            - status (str): The status of the operation ("subreddit_created_or_edited")
            - name (str): The subreddit name
            - title (str): The subreddit title
    """
    from reddit.Subreddits import post_api_site_admin
    return post_api_site_admin(name=subreddit_url_name, title=subreddit_display_title)


def fetch_subreddit_submission_guidelines(subreddit_name_for_text):
    """
    Retrieves the submission text (sidebar text) for a subreddit.

    Args:
        subreddit_name_for_text (str): The name of the subreddit.

    Returns:
        Dict[str, Any]:
        - If the subreddit is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit.".
        - On successful retrieval, returns a dictionary with the following keys:
            - subreddit (str): The subreddit name
            - submit_text (str): The submission text
    """
    from reddit.Subreddits import get_api_submit_text
    return get_api_submit_text(sr=subreddit_name_for_text)


def retrieve_old_subreddit_autocomplete_list(partial_subreddit_name):
    """
    Provides autocomplete suggestions for subreddits (legacy).

    Args:
        partial_subreddit_name (str): A partial subreddit name.

    Returns:
        List[str]:
        - If the query is invalid, returns an empty list.
        - On successful retrieval, returns a list of suggested subreddit names.
    """
    from reddit.Subreddits import get_api_subreddit_autocomplete
    return get_api_subreddit_autocomplete(query=partial_subreddit_name)


def retrieve_v2_subreddit_autocomplete_list():
    """
    Provides autocomplete suggestions for subreddits (v2).

    Returns:
        List[str]:
        - If there are no suggestions, returns an empty list.
        - On successful retrieval, returns a list of suggested subreddit names.
    """
    from reddit.Subreddits import get_api_subreddit_autocomplete_v2
    return get_api_subreddit_autocomplete_v2()


def apply_subreddit_stylesheet_changes(save_operation, new_stylesheet_code):
    """
    Updates the subreddit's stylesheet.

    Args:
        save_operation (str): The operation (typically "save").
        new_stylesheet_code (str): The new stylesheet code.

    Returns:
        Dict[str, Any]:
        - If the operation is invalid, returns a dictionary with the key "error" and the value "Invalid operation.".
        - If the stylesheet is invalid, returns a dictionary with the key "error" and the value "Invalid stylesheet.".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the operation ("stylesheet_saved")
            - op (str): The operation performed
            - contents (str): The saved stylesheet contents
    """
    from reddit.Subreddits import post_api_subreddit_stylesheet
    return post_api_subreddit_stylesheet(op=save_operation, stylesheet_contents=new_stylesheet_code)


def manage_subreddit_subscription(subscription_action, subreddit_name_to_act_on):
    """
    Subscribes or unsubscribes the user from a subreddit.

    Args:
        subscription_action (str): Either "sub" or "unsub".
        subreddit_name_to_act_on (str): The name of the subreddit.

    Returns:
        Dict[str, Any]:
        - If the action is invalid, returns a dictionary with the key "error" and the value "Invalid action.".
        - If the subreddit is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit.".
        - On successful subscription/unsubscription, returns a dictionary with the following keys:
            - status (str): The status of the operation ("subscribed" or "unsubscribed")
            - action (str): The action performed
            - subreddit (str): The subreddit name
    """
    from reddit.Subreddits import post_api_subscribe
    return post_api_subscribe(action=subscription_action, sr_name=subreddit_name_to_act_on)


def add_image_to_subreddit_stylesheet(image_key_name, image_file_data):
    """
    Uploads an image for a subreddit's stylesheet.

    Args:
        image_key_name (str): The name/key for the image.
        image_file_data (Dict[str, Any]): The image file data.

    Returns:
        Dict[str, Any]:
        - If the name is invalid, returns a dictionary with the key "error" and the value "Invalid image name.".
        - If the file is invalid, returns a dictionary with the key "error" and the value "Invalid image file.".
        - On successful upload, returns a dictionary with the following keys:
            - status (str): The status of the operation ("image_uploaded")
            - img_name (str): The name of the uploaded image
    """
    from reddit.Subreddits import post_api_upload_sr_img
    return post_api_upload_sr_img(name=image_key_name, file=image_file_data)


def fetch_subreddit_submission_rules(target_subreddit_for_requirements):
    """
    Retrieves submission requirements for a subreddit.

    Args:
        target_subreddit_for_requirements (str): The name of the subreddit.

    Returns:
        Dict[str, Any]:
        - If the subreddit is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit.".
        - On successful retrieval, returns a dictionary with the following keys:
            - subreddit (str): The subreddit name
            - requirements (Dict[str, Any]): A dictionary of post requirements, containing:
                - title_required (bool): Whether a title is required
    """
    from reddit.Subreddits import get_api_v1_subreddit_post_requirements
    return get_api_v1_subreddit_post_requirements(subreddit=target_subreddit_for_requirements)


def retrieve_subreddit_details(subreddit_name_to_query):
    """
    Retrieves information about a specific subreddit.

    Args:
        subreddit_name_to_query (str): The name of the subreddit.

    Returns:
        Dict[str, Any]:
        - If the subreddit is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit.".
        - On successful retrieval, returns a dictionary with the following keys:
            - subreddit (str): The subreddit name
            - info (Dict[str, Any]): A dictionary containing subreddit information
    """
    from reddit.Subreddits import get_r_subreddit_about
    return get_r_subreddit_about(subreddit=subreddit_name_to_query)


def fetch_subreddit_edit_settings():
    """
    Retrieves the subreddit editing settings.

    Returns:
        Dict[str, Any]:
        - If the settings are not available, returns a dictionary with the key "error" and the value "Settings not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - edit_info (str): The editing settings information
    """
    from reddit.Subreddits import get_r_subreddit_about_edit
    return get_r_subreddit_about_edit()


def list_subreddit_moderation_rules():
    """
    Retrieves the moderation rules of a subreddit.

    Returns:
        List[Dict[str, Any]]:
        - If there are no rules, returns an empty list.
        - On successful retrieval, returns a list of rule objects, each containing:
            - short_name (str): The rule's short name
            - description (str): The rule's description
            - created_utc (int): The creation timestamp
    """
    from reddit.Subreddits import get_r_subreddit_about_rules
    return get_r_subreddit_about_rules()


def retrieve_subreddit_traffic_data():
    """
    Retrieves traffic statistics for a subreddit.

    Returns:
        Dict[str, Any]:
        - If the statistics are not available, returns a dictionary with the key "error" and the value "Statistics not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - traffic_stats (List[Dict[str, Any]]): A list of traffic statistics
    """
    from reddit.Subreddits import get_r_subreddit_about_traffic
    return get_r_subreddit_about_traffic()


def fetch_subreddit_sidebar_content():
    """
    Retrieves the sidebar content for the subreddit.

    Returns:
        str:
        - If the sidebar is empty, returns an empty string.
        - On successful retrieval, returns the sidebar content as a string.
    """
    from reddit.Subreddits import get_sidebar
    return get_sidebar()


def list_stickied_post_identifiers():
    """
    Retrieves the identifiers of stickied posts.

    Returns:
        List[str]:
        - If there are no stickied posts, returns an empty list.
        - On successful retrieval, returns a list of stickied post IDs.
    """
    from reddit.Subreddits import get_sticky
    return get_sticky()


def list_default_subreddits():
    """
    Retrieves the list of default subreddits.

    Returns:
        List[str]:
        - If there are no default subreddits, returns an empty list.
        - On successful retrieval, returns a list of default subreddit names.
    """
    from reddit.Subreddits import get_subreddits_default
    return get_subreddits_default()


def list_gold_exclusive_subreddits():
    """
    Retrieves gold-exclusive subreddits.

    Returns:
        List[str]:
        - If there are no gold subreddits, returns an empty list.
        - On successful retrieval, returns a list of gold subreddit names.
    """
    from reddit.Subreddits import get_subreddits_gold
    return get_subreddits_gold()


def list_my_contributorships():
    """
    Retrieves subreddits where the user is an approved contributor.

    Returns:
        List[str]:
        - If there are no contributor subreddits, returns an empty list.
        - On successful retrieval, returns a list of subreddit names.
    """
    from reddit.Subreddits import get_subreddits_mine_contributor
    return get_subreddits_mine_contributor()


def list_my_moderatorships():
    """
    Retrieves subreddits where the user is a moderator.

    Returns:
        List[str]:
        - If there are no moderator subreddits, returns an empty list.
        - On successful retrieval, returns a list of subreddit names.
    """
    from reddit.Subreddits import get_subreddits_mine_moderator
    return get_subreddits_mine_moderator()


def list_my_streaming_related_subreddits():
    """
    Retrieves subreddits related to streaming content.

    Returns:
        List[str]:
        - If there are no streaming subreddits, returns an empty list.
        - On successful retrieval, returns a list of subreddit names.
    """
    from reddit.Subreddits import get_subreddits_mine_streams
    return get_subreddits_mine_streams()


def list_my_subscriptions():
    """
    Retrieves subreddits the user is subscribed to.

    Returns:
        List[str]:
        - If there are no subscribed subreddits, returns an empty list.
        - On successful retrieval, returns a list of subreddit names.
    """
    from reddit.Subreddits import get_subreddits_mine_subscriber
    return get_subreddits_mine_subscriber()


def fetch_my_subreddits_by_role(user_role_category):
    """
    Retrieves subreddits based on a specified category.

    Args:
        user_role_category (str): The category (e.g., "contributor", "moderator").

    Returns:
        List[str]:
        - If the category is invalid, returns an empty list.
        - If there are no subreddits in the category, returns an empty list.
        - On successful retrieval, returns a list of subreddit names for the specified category.
    """
    from reddit.Subreddits import get_subreddits_mine_where
    return get_subreddits_mine_where(where=user_role_category)


def list_newly_created_subreddits():
    """
    Retrieves newly created subreddits.

    Returns:
        List[str]:
        - If there are no new subreddits, returns an empty list.
        - On successful retrieval, returns a list of new subreddit names.
    """
    from reddit.Subreddits import get_subreddits_new
    return get_subreddits_new()


def list_popular_subreddits():
    """
    Retrieves popular subreddits.

    Returns:
        List[str]:
        - If there are no popular subreddits, returns an empty list.
        - On successful retrieval, returns a list of popular subreddit names.
    """
    from reddit.Subreddits import get_subreddits_popular
    return get_subreddits_popular()


def find_subreddits_by_query(search_keyword):
    """
    Searches for subreddits by name or topic.

    Args:
        search_keyword (str): The search query.

    Returns:
        List[str]:
        - If the query is invalid, returns an empty list.
        - If no subreddits match the query, returns an empty list.
        - On successful search, returns a list of matching subreddit names.
    """
    from reddit.Subreddits import get_subreddits_search
    return get_subreddits_search(q=search_keyword)


def fetch_public_subreddits_by_listing(listing_category):
    """
    Retrieves subreddits based on a specified category.

    Args:
        listing_category (str): The category (e.g., "popular", "new").

    Returns:
        List[str]:
        - If the category is invalid, returns an empty list.
        - If there are no subreddits in the category, returns an empty list.
        - On successful retrieval, returns a list of subreddit names for the specified category.
    """
    from reddit.Subreddits import get_subreddits_where
    return get_subreddits_where(where=listing_category)


def list_newly_registered_users():
    """
    Retrieves the newest registered users.

    Returns:
        List[str]:
        - If there are no new users, returns an empty list.
        - On successful retrieval, returns a list of new user identifiers.
    """
    from reddit.Subreddits import get_users_new
    return get_users_new()


def list_popular_users():
    """
    Retrieves popular users.

    Returns:
        List[str]:
        - If there are no popular users, returns an empty list.
        - On successful retrieval, returns a list of popular user identifiers.
    """
    from reddit.Subreddits import get_users_popular
    return get_users_popular()


def find_users_by_username():
    """
    Searches for users by name.

    Returns:
        List[str]:
        - If there are no matching users, returns an empty list.
        - On successful search, returns a list of matching user identifiers.
    """
    from reddit.Subreddits import get_users_search
    return get_users_search()


def fetch_users_by_public_list(user_public_list_category):
    """
    Retrieves users based on a specified category.

    Args:
        user_public_list_category (str): The user category (e.g., "new", "popular").

    Returns:
        List[str]:
        - If the category is invalid, returns an empty list.
        - If there are no users in the category, returns an empty list.
        - On successful retrieval, returns a list of user identifiers for the specified category.
    """
    from reddit.Subreddits import get_users_where
    return get_users_where(where=user_public_list_category)
