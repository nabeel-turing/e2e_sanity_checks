# This file is automatically generated by the MutationBuilder

def create_subreddit_emoji(
    target_subreddit,
    new_emoji_name,
    image_s3_key,
    is_for_mod_flair_only=False,
    is_allowed_in_post_flair=True,
    is_allowed_in_user_flair=True,
    custom_emoji_css=None
):
    """
    Adds a new emoji to a subreddit.

    Args:
        target_subreddit (str): The name of the subreddit.
        new_emoji_name (str): Name of the emoji to be created. It can be alphanumeric without any special characters except '-' & '_' and cannot exceed 24 characters.
        image_s3_key (str): S3 key of the uploaded image which can be obtained from the S3 url. This is of the form subreddit/hash_value.
        is_for_mod_flair_only (bool): Whether the emoji is only available for moderator flair. Defaults to False.
        is_allowed_in_post_flair (bool): Whether the emoji can be used in post flair. Defaults to True.
        is_allowed_in_user_flair (bool): Whether the emoji can be used in user flair. Defaults to True.
        custom_emoji_css (Optional[str]): CSS styling for the emoji.

    Returns:
        Dict[str, Any]:
        - If the emoji name is already in use, returns a dictionary with the key "error" and the value "Emoji name already in use".
        - If the name is invalid (contains special characters or exceeds 24 characters), returns a dictionary with the key "error" and the value "Invalid emoji name".
        - On successful addition, returns a dictionary with the following keys:
            - status (str): The status of the operation ("success")
            - subreddit (str): The name of the subreddit
            - emoji_name (str): The name of the added emoji
            - mod_flair_only (bool): Whether the emoji is mod-only
            - post_flair_allowed (bool): Whether the emoji can be used in post flair
            - user_flair_allowed (bool): Whether the emoji can be used in user flair
    """
    from reddit.Emoji import post_api_v1_subreddit_emoji_json
    return post_api_v1_subreddit_emoji_json(
        subreddit=target_subreddit,
        name=new_emoji_name,
        s3_key=image_s3_key,
        mod_flair_only=is_for_mod_flair_only,
        post_flair_allowed=is_allowed_in_post_flair,
        user_flair_allowed=is_allowed_in_user_flair,
        css=custom_emoji_css
    )


def remove_subreddit_emoji(subreddit_to_modify, emoji_to_delete):
    """
    Removes an existing emoji from a subreddit.

    Args:
        subreddit_to_modify (str): The name of the subreddit.
        emoji_to_delete (str): The name of the emoji to delete.

    Returns:
        Dict[str, Any]:
        - If the emoji is not found, returns a dictionary with the key "error" and the value "Emoji not found".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("deleted")
            - emoji_name (str): The name of the deleted emoji
            - s3_key (str): The S3 key of the deleted emoji
    """
    from reddit.Emoji import delete_api_v1_subreddit_emoji_emoji_name
    return delete_api_v1_subreddit_emoji_emoji_name(
        subreddit=subreddit_to_modify,
        emoji_name=emoji_to_delete
    )


def request_emoji_s3_upload_credentials(emoji_image_filepath, emoji_image_mimetype):
    """
    Acquires and returns an upload lease to an S3 temporary bucket.

    Args:
        emoji_image_filepath (str): The name and extension of the image file (e.g. "image1.png").
        emoji_image_mimetype (str): The MIME type of the image (e.g. "image/png").

    Returns:
        Dict[str, Any]: A dictionary containing:
            - credentials (Dict[str, str]): Temporary credentials for uploading assets to S3:
                - access_key_id (str): The access key ID
                - secret_access_key (str): The secret access key
                - session_token (str): The session token
            - s3_url (str): The S3 URL to which the asset should be uploaded
            - key (str): The key (path) to be used for uploading, incorporating the provided filepath
    """
    from reddit.Emoji import post_api_v1_subreddit_emoji_asset_upload_s3_json
    return post_api_v1_subreddit_emoji_asset_upload_s3_json(
        filepath=emoji_image_filepath,
        mimetype=emoji_image_mimetype
    )


def configure_emoji_display_dimensions(target_emoji_name, custom_width_pixels, custom_height_pixels):
    """
    Sets a custom display size for a subreddit emoji.

    Args:
        target_emoji_name (str): The name of the emoji.
        custom_width_pixels (int): The desired width in pixels.
        custom_height_pixels (int): The desired height in pixels.

    Returns:
        Dict[str, Any]: A dictionary with the following keys:
            - status (str): The status of the operation ("custom_size_updated")
            - emoji_name (str): The name of the emoji
            - width (int): The new width in pixels
            - height (int): The new height in pixels
    """
    from reddit.Emoji import post_api_v1_subreddit_emoji_custom_size
    return post_api_v1_subreddit_emoji_custom_size(
        emoji_name=target_emoji_name,
        width=custom_width_pixels,
        height=custom_height_pixels
    )


def list_all_emojis_for_subreddit(subreddit_name_for_emojis):
    """
    Retrieves all emojis for a specified subreddit.

    Args:
        subreddit_name_for_emojis (str): The name of the subreddit.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - subreddit (str): The name of the subreddit
            - emojis (Dict[str, Dict[str, Any]]): A dictionary of emoji details, where each emoji has:
                - css (str): CSS styling for the emoji
                - s3_key (str): S3 key of the emoji image
                - mod_flair_only (bool): Whether the emoji is mod-only
                - post_flair_allowed (bool): Whether the emoji can be used in post flair
                - user_flair_allowed (bool): Whether the emoji can be used in user flair
    """
    from reddit.Emoji import get_api_v1_subreddit_emojis_all
    return get_api_v1_subreddit_emojis_all(subreddit=subreddit_name_for_emojis)
