# This file is automatically generated by the MutationBuilder

def grant_wiki_edit_permission(wiki_page_name, user_to_add_as_editor):
    """
    Adds a user to the wiki editors list for a page.

    Args:
        wiki_page_name (str): The name of the wiki page.
        user_to_add_as_editor (str): The username to grant editing access.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - If the username is invalid, returns a dictionary with the key "error" and the value "Invalid username.".
        - If the user is already an editor, returns a dictionary with the key "error" and the value "User already an editor.".
        - On successful addition, returns a dictionary with the following keys:
            - status (str): The status of the operation ("editor_added")
            - page (str): The wiki page name
            - username (str): The added editor's username
    """
    from reddit.Wiki import post_api_wiki_alloweditor_add
    return post_api_wiki_alloweditor_add(page=wiki_page_name, username=user_to_add_as_editor)


def revoke_wiki_edit_permission(target_wiki_page_name, user_to_remove_from_editors):
    """
    Removes a user from the wiki editors list.

    Args:
        target_wiki_page_name (str): The name of the wiki page.
        user_to_remove_from_editors (str): The username to remove from editors.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - If the username is invalid, returns a dictionary with the key "error" and the value "Invalid username.".
        - If the user is not an editor, returns a dictionary with the key "error" and the value "User not an editor.".
        - On successful removal, returns a dictionary with the following keys:
            - status (str): The status of the operation ("editor_removed")
            - page (str): The wiki page name
            - username (str): The removed editor's username
    """
    from reddit.Wiki import post_api_wiki_alloweditor_del
    return post_api_wiki_alloweditor_del(
        page=target_wiki_page_name,
        username=user_to_remove_from_editors
    )


def execute_wiki_editor_modification(editor_action_type):
    """
    Performs an action to add or remove a wiki editor.

    Args:
        editor_action_type (str): "add" or "del" to modify wiki editors.

    Returns:
        Dict[str, Any]:
        - If the action is invalid, returns a dictionary with the key "error" and the value "Invalid action.".
        - On successful action, returns a dictionary with the following keys:
            - status (str): The status of the operation ("wiki_editor_action")
            - action (str): The performed action
    """
    from reddit.Wiki import post_api_wiki_alloweditor_act
    return post_api_wiki_alloweditor_act(act=editor_action_type)


def update_wiki_page_markdown(wiki_page_to_edit, new_markdown_content):
    """
    Edits the content of a wiki page.

    Args:
        wiki_page_to_edit (str): The name of the wiki page.
        new_markdown_content (str): The new content in raw markdown.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - If the content is invalid, returns a dictionary with the key "error" and the value "Invalid content.".
        - On successful edit, returns a dictionary with the following keys:
            - status (str): The status of the operation ("wiki_page_edited")
            - page (str): The edited wiki page name
    """
    from reddit.Wiki import post_api_wiki_edit
    return post_api_wiki_edit(page=wiki_page_to_edit, content=new_markdown_content)


def conceal_wiki_page_revision(wiki_page_of_revision, revision_id_to_hide):
    """
    Hides a specific revision from the wiki history.

    Args:
        wiki_page_of_revision (str): The name of the wiki page.
        revision_id_to_hide (str): The revision ID to hide.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - If the revision is invalid, returns a dictionary with the key "error" and the value "Invalid revision.".
        - On successful hiding, returns a dictionary with the following keys:
            - status (str): The status of the operation ("revision_hidden")
            - page (str): The wiki page name
            - revision (str): The hidden revision ID
    """
    from reddit.Wiki import post_api_wiki_hide
    return post_api_wiki_hide(page=wiki_page_of_revision, revision=revision_id_to_hide)


def restore_wiki_page_to_version(wiki_page_to_revert, revision_id_to_restore):
    """
    Reverts a wiki page to a previous revision.

    Args:
        wiki_page_to_revert (str): The name of the wiki page.
        revision_id_to_restore (str): The revision ID to revert to.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - If the revision is invalid, returns a dictionary with the key "error" and the value "Invalid revision.".
        - On successful revert, returns a dictionary with the following keys:
            - status (str): The status of the operation ("wiki_page_reverted")
            - page (str): The wiki page name
            - revision (str): The reverted revision ID
    """
    from reddit.Wiki import post_api_wiki_revert
    return post_api_wiki_revert(page=wiki_page_to_revert, revision=revision_id_to_restore)


def fetch_discussions_for_wiki_page(target_wiki_page):
    """
    Retrieves discussion links related to a wiki page.

    Args:
        target_wiki_page (str): The name of the wiki page.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - On successful retrieval, returns a dictionary with the following keys:
            - page (str): The wiki page name
            - discussions (List[Dict[str, Any]]): A list of discussion objects, each containing:
                - id (str): The discussion ID
                - title (str): The discussion title
                - created_utc (int): The creation timestamp
    """
    from reddit.Wiki import get_wiki_discussions_page
    return get_wiki_discussions_page(page=target_wiki_page)


def list_all_wiki_pages_in_subreddit():
    """
    Retrieves a list of wiki pages for a subreddit.

    Returns:
        List[str]:
        - If there are no wiki pages, returns an empty list.
        - On successful retrieval, returns a list of wiki page names.
    """
    from reddit.Wiki import get_wiki_pages
    return get_wiki_pages()


def fetch_recent_revisions_for_all_wiki_pages():
    """
    Retrieves recent revisions for all wiki pages.

    Returns:
        List[Dict[str, Any]]:
        - If there are no revisions, returns an empty list.
        - On successful retrieval, returns a list of revision objects, each containing:
            - page (str): The wiki page name
            - revision_id (str): The revision ID
            - author (str): The author's username
            - timestamp (int): The revision timestamp
            - reason (str): The revision reason
    """
    from reddit.Wiki import get_wiki_revisions
    return get_wiki_revisions()


def fetch_revision_history_for_wiki_page(wiki_page_for_history):
    """
    Retrieves revisions for a specific wiki page.

    Args:
        wiki_page_for_history (str): The name of the wiki page.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - On successful retrieval, returns a dictionary with the following keys:
            - page (str): The wiki page name
            - revisions (List[Dict[str, Any]]): A list of revision objects, each containing:
                - revision_id (str): The revision ID
                - author (str): The author's username
                - timestamp (int): The revision timestamp
                - reason (str): The revision reason
    """
    from reddit.Wiki import get_wiki_revisions_page
    return get_wiki_revisions_page(page=wiki_page_for_history)


def retrieve_settings_for_wiki_page(wiki_page_for_settings):
    """
    Retrieves the settings for a specific wiki page.

    Args:
        wiki_page_for_settings (str): The name of the wiki page.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - On successful retrieval, returns a dictionary with the following keys:
            - page (str): The wiki page name
            - settings (Dict[str, Any]): A dictionary containing:
                - listed (bool): Whether the page is listed
                - permlevel (int): The permission level
                - editors (List[str]): A list of editor usernames
    """
    from reddit.Wiki import get_wiki_settings_page
    return get_wiki_settings_page(page=wiki_page_for_settings)


def fetch_content_of_wiki_page(wiki_page_to_fetch_content_from):
    """
    Retrieves the content of a wiki page.

    Args:
        wiki_page_to_fetch_content_from (str): The name of the wiki page.

    Returns:
        Dict[str, Any]:
        - If the page is invalid, returns a dictionary with the key "error" and the value "Invalid wiki page.".
        - If the page is not found, returns a dictionary with the key "error" and the value "not_found".
        - On successful retrieval, returns a dictionary with the following keys:
            - page (str): The wiki page name
            - content (str): The page content in raw markdown
    """
    from reddit.Wiki import get_wiki_page
    return get_wiki_page(page=wiki_page_to_fetch_content_from)
