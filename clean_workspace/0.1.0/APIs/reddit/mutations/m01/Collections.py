# This file is automatically generated by the MutationBuilder

def insert_post_into_collection(target_collection_identifier, post_fullname_to_add):
    """
    Adds a post to an existing collection.

    Args:
        target_collection_identifier (str): The unique identifier of the collection.
        post_fullname_to_add (str): The fullname of the post to add.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "Collection does not exist".
        - On successful addition, returns a dictionary with the following keys:
            - status (str): The status of the operation ("success")
            - collection_id (str): The ID of the updated collection
            - added_link (str): The fullname of the added post
    """
    from reddit.Collections import post_api_v1_collections_add_post_to_collection
    return post_api_v1_collections_add_post_to_collection(
        collection_id=target_collection_identifier,
        link_fullname=post_fullname_to_add
    )


def fetch_collection_details(collection_identifier):
    """
    Retrieves information about a specific collection.

    Args:
        collection_identifier (str): The unique identifier of the collection.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "Collection not found".
        - On successful retrieval, returns a dictionary containing the following keys:
            - title (str): The title of the collection
            - sr_fullname (str): The fullname of the subreddit the collection belongs to.
            - links (List[str]): List of post fullnames in the collection.
            - description (str): Optional description of the collection.
            - num_followers (int): The number of followers of the collection.
            - display_layout (str): The display layout of the collection (e.g., "TIMELINE").
            - is_following (bool): Whether the user is following the collection.
    """
    from reddit.Collections import get_api_v1_collections_collection
    return get_api_v1_collections_collection(collection_id=collection_identifier)


def initialize_new_collection(new_collection_title, subreddit_fullname_for_collection):
    """
    Creates a new collection in a subreddit.

    Args:
        new_collection_title (str): The title of the new collection.
        subreddit_fullname_for_collection (str): The fullname of the subreddit.

    Returns:
        Dict[str, Any]: Returns a dictionary with the following keys:
            - status (str): The status of the creation ("collection_created")
            - collection_id (str): The ID of the newly created collection
    """
    from reddit.Collections import post_api_v1_collections_create_collection
    return post_api_v1_collections_create_collection(
        title=new_collection_title,
        sr_fullname=subreddit_fullname_for_collection
    )


def remove_post_collection(collection_id_to_delete):
    """
    Deletes an existing collection.

    Args:
        collection_id_to_delete (str): The identifier of the collection to delete.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "Collection not found".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the deletion ("collection_deleted")
            - collection_id (str): The ID of the deleted collection
    """
    from reddit.Collections import post_api_v1_collections_delete_collection
    return post_api_v1_collections_delete_collection(collection_id=collection_id_to_delete)


def eject_post_from_collection(post_fullname_to_remove, source_collection_id):
    """
    Removes a post from a collection.

    Args:
        post_fullname_to_remove (str): The fullname of the post to remove.
        source_collection_id (str): The identifier of the collection.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "No such collection".
        - If the post is not found in the collection, returns a dictionary with the key "error" and the value "Link not found in collection".
        - On successful removal, returns a dictionary with the following keys:
            - status (str): The status of the removal ("success")
            - removed_link (str): The fullname of the removed post
    """
    from reddit.Collections import post_api_v1_collections_remove_post_in_collection
    return post_api_v1_collections_remove_post_in_collection(
        link_fullname=post_fullname_to_remove,
        collection_id=source_collection_id
    )


def arrange_posts_in_collection(collection_to_reorder_id, new_post_id_order):
    """
    Reorders the posts in a collection.

    Args:
        collection_to_reorder_id (str): The identifier of the collection.
        new_post_id_order (List[str]): The list of comma separated link_ids in the order to set them in.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "No such collection".
        - On successful reordering, returns a dictionary with the following keys:
            - status (str): The status of the reordering ("success")
            - collection_id (str): The ID of the collection
            - new_order (List[str]): The new order of link IDs
    """
    from reddit.Collections import post_api_v1_collections_reorder_collection
    return post_api_v1_collections_reorder_collection(
        collection_id=collection_to_reorder_id,
        link_ids=new_post_id_order
    )


def list_collections_in_subreddit(target_subreddit_fullname):
    """
    Retrieves collections for a specific subreddit.

    Args:
        target_subreddit_fullname (str): The fullname of the subreddit.

    Returns:
        List[Dict[str, Any]]: A list of collections, where each collection is represented
                             as a dictionary containing the following keys:
            - title (str): The title of the collection
            - sr_fullname (str): The fullname of the subreddit the collection belongs to.
            - links (List[str]): List of post fullnames in the collection.
            - description (str): Optional description of the collection.
            - num_followers (int): The number of followers of the collection.
            - display_layout (str): The display layout of the collection (e.g., "TIMELINE").
            - is_following (bool): Whether the user is following the collection.
    """
    from reddit.Collections import get_api_v1_collections_subreddit_collections
    return get_api_v1_collections_subreddit_collections(sr_fullname=target_subreddit_fullname)


def modify_collection_description(collection_identifier_to_update, new_collection_description):
    """
    Updates the description of a collection.

    Args:
        collection_identifier_to_update (str): The collection identifier.
        new_collection_description (str): The new description text.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "No such collection".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the update ("success")
            - collection_id (str): the UUID of a collection.
            - new_description (str): The updated description, a string no longer than 500 characters.

    Raises:
        ValueError: If the new_collection_description is longer than 500 characters.
    """
    from reddit.Collections import post_api_v1_collections_update_collection_description
    return post_api_v1_collections_update_collection_description(
        collection_id=collection_identifier_to_update,
        description=new_collection_description
    )


def set_collection_display_layout(target_collection_id_for_layout_change, new_display_layout_style):
    """
    Updates the display layout of a collection.

    Args:
        target_collection_id_for_layout_change (str): The collection identifier.
        new_display_layout_style (str): The new layout style (e.g., GALLERY, TIMELINE).

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "No such collection".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the update ("success")
            - collection_id (str): The ID of the collection
            - display_layout (str): The new display layout
    """
    from reddit.Collections import post_api_v1_collections_update_collection_display_layout
    return post_api_v1_collections_update_collection_display_layout(
        collection_id=target_collection_id_for_layout_change,
        display_layout=new_display_layout_style
    )


def rename_collection(collection_identifier_to_rename, updated_collection_title):
    """
    Changes the title of a collection.

    Args:
        collection_identifier_to_rename (str): The collection identifier.
        updated_collection_title (str): The new title for the collection.

    Returns:
        Dict[str, Any]:
        - If the collection does not exist, returns a dictionary with the key "error" and the value "No such collection".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the update ("success")
            - collection_id (str): The ID of the collection
            - new_title (str): The updated title
    """
    from reddit.Collections import post_api_v1_collections_update_collection_title
    return post_api_v1_collections_update_collection_title(
        collection_id=collection_identifier_to_rename,
        title=updated_collection_title
    )
