# This file is automatically generated by the MutationBuilder

def fetch_recently_edited_content():
    """
    Retrieves recently edited posts or comments.

    Returns:
        List[Dict[str, str]]:
        - If there are no edited items, returns an empty list.
        - On successful retrieval, returns a list of edited item objects, each containing:
            - id (str): The item ID
            - author (str): The author's username
            - subreddit (str): The subreddit name
            - edited_at (str): The timestamp of the edit
            - content (str): The edited content
    """
    from reddit.Moderation import get_about_edited
    return get_about_edited()


def retrieve_subreddit_mod_log():
    """
    Retrieves the moderation log for a subreddit.

    Returns:
        List[Dict[str, str]]:
        - If there are no log entries, returns an empty list.
        - On successful retrieval, returns a list of moderation log entries, each containing:
            - id (str): The log entry ID
            - action (str): The moderation action taken
            - moderator (str): The moderator's username
            - target (str): The target of the action
            - timestamp (str): When the action occurred
    """
    from reddit.Moderation import get_about_log
    return get_about_log()


def fetch_items_from_modqueue():
    """
    Retrieves items pending moderator action

    Returns:
        List[Dict[str, str | bool]]:
        - If there are no items in the modqueue, returns an empty list.
        - On successful retrieval, returns a list of items, each containing:
            - id (str): The item ID
            - author (str): The author's username
            - subreddit (str): The subreddit name
            - type (str): The type of item (post/comment)
            - reported (bool): Whether the item has been reported
    """
    from reddit.Moderation import get_about_modqueue
    return get_about_modqueue()


def fetch_reported_content():
    """
    Retrieves reported posts or comments.

    Returns:
        List[Dict[str, str | int]]:
        - If there are no reported items, returns an empty list.
        - On successful retrieval, returns a list of reported items, each containing:
            - id (str): The item ID
            - author (str): The author's username
            - subreddit (str): The subreddit name
            - report_reason (str): The reason for the report
            - report_count (int): The number of reports
    """
    from reddit.Moderation import get_about_reports
    return get_about_reports()


def fetch_content_marked_as_spam():
    """
    Retrieves items marked as spam.

    Returns:
        List[Dict[str, str]]:
        - If there are no spam items, returns an empty list.
        - On successful retrieval, returns a list of spam items, each containing:
            - id (str): The item ID
            - author (str): The author's username
            - subreddit (str): The subreddit name
            - marked_as_spam_by (str): The moderator who marked it as spam
            - timestamp (str): When it was marked as spam
    """
    from reddit.Moderation import get_about_spam
    return get_about_spam()


def fetch_unmoderated_content():
    """
    Retrieves posts or comments that are unmoderated.

    Returns:
        List[Dict[str, str]]:
        - If there are no unmoderated items, returns an empty list.
        - On successful retrieval, returns a list of unmoderated items, each containing:
            - id (str): The item ID
            - author (str): The author's username
            - subreddit (str): The subreddit name
            - created_at (str): When the item was created
            - type (str): The type of item (post/comment)
    """
    from reddit.Moderation import get_about_unmoderated
    return get_about_unmoderated()


def fetch_moderated_listings_by_location(moderation_category):
    """
    Retrieves moderated listings for a specific category.

    Args:
        moderation_category (str): The moderation category (e.g., "spam").

    Returns:
        Dict[str, Any]:
        - If the location is invalid, returns a dictionary with the key "error" and the value "Invalid location.".
        - On successful retrieval, returns a dictionary with the following keys:
            - location (str): The requested category
            - items (List[Dict[str, Any]]): A list of items in the category
    """
    from reddit.Moderation import get_about_location
    return get_about_location(location=moderation_category)


def confirm_moderator_invitation():
    """
    Accepts an invitation to moderate a subreddit.

    Returns:
        Dict[str, str]:
        - On successful acceptance, returns a dictionary with the following keys:
            - status (str): The status of the operation ("moderator_invite_accepted")
    Raises:
        NoPendingInvitationError: if there is no pending invitation
    """
    from reddit.Moderation import post_api_accept_moderator_invite
    return post_api_accept_moderator_invite()


def confirm_moderated_item(item_fullname_to_approve):
    """
    Approves a post or comment.

    Args:
        item_fullname_to_approve (str): The fullname of the item to approve.

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If the item is already approved, returns a dictionary with the key "error" and the value "Item already approved.".
        - On successful approval, returns a dictionary with the following keys:
            - status (str): The status of the operation ("approved")
            - id (str): The ID of the approved item
    """
    from reddit.Moderation import post_api_approve
    return post_api_approve(id=item_fullname_to_approve)


def set_moderator_distinction_on_item(item_fullname_to_distinguish, distinction_type):
    """
    Distinguishes a moderator's post or comment.

    Args:
        item_fullname_to_distinguish (str): The fullname of the item.
        distinction_type (str): The method of distinction (e.g., "yes", "no", "admin").

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If the distinction method is invalid, returns a dictionary with the key "error" and the value "Invalid distinction method.".
        - On successful distinction, returns a dictionary with the following keys:
            - status (str): The status of the operation ("distinguished")
            - id (str): The ID of the distinguished item
            - how (str): The method of distinction used
    """
    from reddit.Moderation import post_api_distinguish
    return post_api_distinguish(id=item_fullname_to_distinguish, how=distinction_type)


def disregard_reports_for_item(item_fullname_to_ignore_reports):
    """
    Ignores future reports on a specific item.

    Args:
        item_fullname_to_ignore_reports (str): The fullname of the item.

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If reports are already being ignored, returns a dictionary with the key "error" and the value "Reports already being ignored.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("ignored_reports")
            - id (str): The ID of the item
    """
    from reddit.Moderation import post_api_ignore_reports
    return post_api_ignore_reports(id=item_fullname_to_ignore_reports)


def resign_from_contributor_role():
    """
    Removes the current user from contributor status.

    Returns:
        Dict[str, str]:
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("left_contributor")
    Raises:
        UserNotContributorError: if the user is not contributor
    """
    from reddit.Moderation import post_api_leavecontributor
    return post_api_leavecontributor()


def resign_from_moderator_role():
    """
    Removes the current user from moderator status.

    Returns:
        Dict[str, str]:
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("left_moderator")
    Raises:
        UserNotModeratorError: if the user is not a moderator
    """
    from reddit.Moderation import post_api_leavemoderator
    return post_api_leavemoderator()


def delete_moderated_item(item_fullname_to_remove, mark_as_spam=False):
    """
    Removes a post or comment.

    Args:
        item_fullname_to_remove (str): The fullname of the item to remove.
        mark_as_spam (Optional[bool]): Indicates if the item should be marked as spam.

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If the item is already removed, returns a dictionary with the key "error" and the value "Item already removed.".
        - On successful removal, returns a dictionary with the following keys:
            - status (str): The status of the operation ("removed")
            - id (str): The ID of the removed item
            - spam (bool): Whether the item was marked as spam
    """
    from reddit.Moderation import post_api_remove
    return post_api_remove(id=item_fullname_to_remove, spam=mark_as_spam)


def reapprove_removed_comment(comment_fullname_to_show):
    """
    Re-approves a comment that was removed.

    Args:
        comment_fullname_to_show (str): The fullname of the comment.

    Returns:
        Dict[str, Any]:
        - If the comment ID is invalid, returns a dictionary with the key "error" and the value "Invalid comment ID.".
        - If the comment is not removed, returns a dictionary with the key "error" and the value "Comment is not removed.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("comment_shown")
            - id (str): The ID of the comment
    """
    from reddit.Moderation import post_api_show_comment
    return post_api_show_comment(id=comment_fullname_to_show)


def temporarily_silence_item_reports(item_fullname_to_snooze):
    """
    Snoozes reports on a specific item.

    Args:
        item_fullname_to_snooze (str): The fullname of the item.

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If reports are already snoozed, returns a dictionary with the key "error" and the value "Reports already snoozed.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("reports_snoozed")
            - id (str): The ID of the item
    """
    from reddit.Moderation import post_api_snooze_reports
    return post_api_snooze_reports(id=item_fullname_to_snooze)


def resume_listening_to_item_reports(item_fullname_to_unignore):
    """
    Stops ignoring reports on a specific item.

    Args:
        item_fullname_to_unignore (str): The fullname of the item.

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If reports are not being ignored, returns a dictionary with the key "error" and the value "Reports are not being ignored.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("reports_unignored")
            - id (str): The ID of the item
    """
    from reddit.Moderation import post_api_unignore_reports
    return post_api_unignore_reports(id=item_fullname_to_unignore)


def cancel_snooze_on_item_reports(item_fullname_to_unsnooze):
    """
    Unsnoozes reports, resuming notifications.

    Args:
        item_fullname_to_unsnooze (str): The fullname of the item.

    Returns:
        Dict[str, Any]:
        - If the item ID is invalid, returns a dictionary with the key "error" and the value "Invalid item ID.".
        - If reports are not snoozed, returns a dictionary with the key "error" and the value "Reports are not snoozed.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("reports_unsnoozed")
            - id (str): The ID of the item
    """
    from reddit.Moderation import post_api_unsnooze_reports
    return post_api_unsnooze_reports(id=item_fullname_to_unsnooze)


def set_post_crowd_control_level(post_fullname_to_update, new_crowd_control_level):
    """
    Updates the crowd control level for a post.

    Args:
        post_fullname_to_update (str): The fullname of the post.
        new_crowd_control_level (int): The new crowd control level.

    Returns:
        Dict[str, Any]:
        - If the post ID is invalid, returns a dictionary with the key "error" and the value "Invalid post ID.".
        - If the level is invalid (not between 0 and 3), returns a dictionary with the key "error" and the value "Invalid crowd control level.".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the operation ("crowd_control_updated")
            - id (str): The ID of the post
            - level (int): The new crowd control level
    """
    from reddit.Moderation import post_api_update_crowd_control_level
    return post_api_update_crowd_control_level(
        id=post_fullname_to_update,
        level=new_crowd_control_level
    )


def fetch_subreddit_css():
    """
    Retrieves the subreddit's stylesheet code.

    Returns:
        str:
        - If there is no stylesheet, returns an empty string.
        - On successful retrieval, returns the stylesheet code as a string.
    """
    from reddit.Moderation import get_stylesheet
    return get_stylesheet()
