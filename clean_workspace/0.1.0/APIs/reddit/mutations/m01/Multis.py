# This file is automatically generated by the MutationBuilder

def remove_saved_multireddit_filter(filter_path_to_delete):
    """
    Deletes a saved filter path.

    Args:
        filter_path_to_delete (str): The filter path identifier.

    Returns:
        Dict[str, Any]:
        - If the filter path is invalid, returns a dictionary with the key "error" and the value "Invalid filter path.".
        - If the filter path does not exist, returns a dictionary with the key "error" and the value "Filter path not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("filter_deleted")
            - filterpath (str): The deleted filter path
    """
    from reddit.Multis import delete_api_filter_filterpath
    return delete_api_filter_filterpath(filterpath=filter_path_to_delete)


def eject_subreddit_from_multireddit_filter(target_filter_path, subreddit_to_remove):
    """
    Removes a subreddit from a saved filter path.

    Args:
        target_filter_path (str): The filter path identifier.
        subreddit_to_remove (str): The subreddit name to remove.

    Returns:
        Dict[str, Any]:
        - If the filter path is invalid, returns a dictionary with the key "error" and the value "Invalid filter path.".
        - If the subreddit is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit name.".
        - If the subreddit is not in the filter, returns a dictionary with the key "error" and the value "Subreddit not found in filter.".
        - On successful removal, returns a dictionary with the following keys:
            - status (str): The status of the operation ("subreddit_removed_from_filter")
            - filter (str): The filter path
            - srname (str): The removed subreddit name
    """
    from reddit.Multis import delete_api_filter_filterpath_r_srname
    return delete_api_filter_filterpath_r_srname(
        filterpath=target_filter_path,
        srname=subreddit_to_remove
    )


def duplicate_multireddit(source_multireddit_path, destination_multireddit_path):
    """
    Copies an existing multireddit.

    Args:
        source_multireddit_path (str): The source multireddit path.
        destination_multireddit_path (str): The destination path for the copy.

    Returns:
        Dict[str, Any]:
        - If the source path is invalid, returns a dictionary with the key "error" and the value "Invalid source path.".
        - If the destination path is invalid, returns a dictionary with the key "error" and the value "Invalid destination path.".
        - If the source multireddit does not exist, returns a dictionary with the key "error" and the value "Source multireddit not found.".
        - On successful copy, returns a dictionary with the following keys:
            - status (str): The status of the operation ("multi_copied")
            - new_multiname (str): The name of the new multireddit
    """
    from reddit.Multis import post_api_multi_copy
    return post_api_multi_copy(frm=source_multireddit_path, to=destination_multireddit_path)


def fetch_user_multireddits():
    """
    Retrieves the authenticated user's multireddits.

    Returns:
        List[Dict[str, Any]]:
        - If there are no multireddits, returns an empty list.
        - On successful retrieval, returns a list of multireddit objects, each containing:
            - name (str): The multireddit name
            - path (str): The multireddit path
            - subreddits (List[str]): A list of subreddit names
            - created_at (str): The creation timestamp
    """
    from reddit.Multis import get_api_multi_mine
    return get_api_multi_mine()


def fetch_public_multireddits_for_user(target_user):
    """
    Retrieves public multireddits for a specified user.

    Args:
        target_user (str): The username whose multireddits are requested.

    Returns:
        List[Dict[str, Any]]:
        - If the username is invalid, returns an empty list.
        - If the user has no public multireddits, returns an empty list.
        - On successful retrieval, returns a list of multireddit objects, each containing:
            - name (str): The multireddit name
            - path (str): The multireddit path
            - subreddits (List[str]): A list of subreddit names
            - created_at (str): The creation timestamp
    """
    from reddit.Multis import get_api_multi_user_username
    return get_api_multi_user_username(username=target_user)


def remove_multireddit_by_path(path_of_multireddit_to_delete):
    """
    Deletes a multireddit.

    Args:
        path_of_multireddit_to_delete (str): The multireddit path.

    Returns:
        Dict[str, Any]:
        - If the multipath is invalid, returns a dictionary with the key "error" and the value "Invalid multireddit path.".
        - If the multireddit does not exist, returns a dictionary with the key "error" and the value "Multireddit not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("multi_deleted")
            - multipath (str): The deleted multireddit path
    """
    from reddit.Multis import delete_api_multi_multipath
    return delete_api_multi_multipath(multipath=path_of_multireddit_to_delete)


def fetch_multireddit_description(target_multireddit_path):
    """
    Retrieves the description of a multireddit.

    Args:
        target_multireddit_path (str): The multireddit path.

    Returns:
        Dict[str, Any]:
        - If the multipath is invalid, returns a dictionary with the key "error" and the value "Invalid multireddit path.".
        - If the multireddit does not exist, returns a dictionary with the key "error" and the value "Multireddit not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - description (str): The multireddit description
            - multipath (str): The multireddit path
    """
    from reddit.Multis import get_api_multi_multipath_description
    return get_api_multi_multipath_description(multipath=target_multireddit_path)


def eject_subreddit_from_multireddit(multireddit_path_to_modify, subreddit_name_to_remove):
    """
    Removes a subreddit from a multireddit.

    Args:
        multireddit_path_to_modify (str): The multireddit path.
        subreddit_name_to_remove (str): The subreddit name to remove.

    Returns:
        Dict[str, Any]:
        - If the multipath is invalid, returns a dictionary with the key "error" and the value "Invalid multireddit path.".
        - If the subreddit is invalid, returns a dictionary with the key "error" and the value "Invalid subreddit name.".
        - If the subreddit is not in the multireddit, returns a dictionary with the key "error" and the value "Subreddit not found in multireddit.".
        - On successful removal, returns a dictionary with the following keys:
            - status (str): The status of the operation ("subreddit_removed_from_multi")
            - multipath (str): The multireddit path
            - srname (str): The removed subreddit name
    """
    from reddit.Multis import delete_api_multi_multipath_r_srname
    return delete_api_multi_multipath_r_srname(
        multipath=multireddit_path_to_modify,
        srname=subreddit_name_to_remove
    )
