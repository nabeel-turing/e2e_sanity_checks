# This file is automatically generated by the MutationBuilder

def set_modmail_conversations_as_read_in_bulk(modmail_conversation_identifiers):
    """
    Marks multiple modmail conversations as read.

    Args:
        modmail_conversation_identifiers (List[str]): A list of modmail conversation IDs.

    Returns:
        Dict[str, Any]:
        - If the conversation IDs list is empty, returns a dictionary with the key "error" and the value "No conversation IDs provided.".
        - If any conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("bulk_read")
            - count (int): The number of conversations marked as read
    """
    from reddit.Modmail import post_api_mod_bulk_read
    return post_api_mod_bulk_read(conversation_ids=modmail_conversation_identifiers)


def list_all_modmail_conversations():
    """
    Retrieves a list of modmail conversations.

    Returns:
        Dict[str, List[Dict[str, Any]] | int]:
        - On successful retrieval, returns a dictionary with the following keys:
            - conversations (List[Dict[str, Any]]): A list of conversation objects
            - total_count (int): The total number of conversations
            - unread_count (int): The number of unread conversations
    Raises:
        ConversationNotFoundError: if there are no conversations
    """
    from reddit.Modmail import get_api_mod_conversations
    return get_api_mod_conversations()


def fetch_modmail_thread_details(target_conversation_id):
    """
    Retrieves details of a specific modmail conversation.

    Args:
        target_conversation_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the conversation does not exist, returns a dictionary with the key "error" and the value "Conversation not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - id (str): The conversation ID
            - subject (str): The conversation subject
            - messages (List[Dict[str, Any]]): A list of messages in the conversation
            - participants (List[str]): A list of participant usernames
            - is_read (bool): Whether the conversation has been read
    """
    from reddit.Modmail import get_api_mod_conversations_conversation_id
    return get_api_mod_conversations_conversation_id(conversation_id=target_conversation_id)


def confirm_modmail_conversation(modmail_thread_id):
    """
    Approves a modmail conversation.

    Args:
        modmail_thread_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the conversation is already approved, returns a dictionary with the key "error" and the value "Conversation already approved.".
        - On successful approval, returns a dictionary with the following keys:
            - status (str): The status of the operation ("approved")
            - conversation_id (str): The ID of the approved conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_approve
    return post_api_mod_conversations_conversation_id_approve(conversation_id=modmail_thread_id)


def store_modmail_conversation(thread_to_archive_id):
    """
    Archives a modmail conversation.

    Args:
        thread_to_archive_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the conversation is already archived, returns a dictionary with the key "error" and the value "Conversation already archived.".
        - On successful archiving, returns a dictionary with the following keys:
            - status (str): The status of the operation ("archived")
            - conversation_id (str): The ID of the archived conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_archive
    return post_api_mod_conversations_conversation_id_archive(conversation_id=thread_to_archive_id)


def reject_modmail_conversation(thread_to_reject_id):
    """
    Disapproves a modmail conversation.

    Args:
        thread_to_reject_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the conversation is already disapproved, returns a dictionary with the key "error" and the value "Conversation already disapproved.".
        - On successful disapproval, returns a dictionary with the following keys:
            - status (str): The status of the operation ("disapproved")
            - conversation_id (str): The ID of the disapproved conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_disapprove
    return post_api_mod_conversations_conversation_id_disapprove(
        conversation_id=thread_to_reject_id
    )


def unhighlight_modmail_thread(target_thread_id):
    """
    Removes a highlight marker from a conversation.

    Args:
        target_thread_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the conversation is not highlighted, returns a dictionary with the key "error" and the value "Conversation is not highlighted.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("highlight_removed")
            - conversation_id (str): The ID of the conversation
    """
    from reddit.Modmail import delete_api_mod_conversations_conversation_id_highlight
    return delete_api_mod_conversations_conversation_id_highlight(conversation_id=target_thread_id)


def silence_user_in_modmail(contextual_conversation_id):
    """
    Mutes the user in a modmail conversation.

    Args:
        contextual_conversation_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the user is already muted, returns a dictionary with the key "error" and the value "User already muted.".
        - On successful muting, returns a dictionary with the following keys:
            - status (str): The status of the operation ("muted")
            - conversation_id (str): The ID of the conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_mute
    return post_api_mod_conversations_conversation_id_mute(
        conversation_id=contextual_conversation_id
    )


def issue_temporary_ban_from_modmail(source_conversation_id):
    """
    Temporarily bans a user via modmail.

    Args:
        source_conversation_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the user is already banned, returns a dictionary with the key "error" and the value "User already banned.".
        - On successful ban, returns a dictionary with the following keys:
            - status (str): The status of the operation ("temp_banned")
            - conversation_id (str): The ID of the conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_temp_ban
    return post_api_mod_conversations_conversation_id_temp_ban(
        conversation_id=source_conversation_id
    )


def restore_modmail_conversation(archived_thread_id):
    """
    Unarchives a modmail conversation.

    Args:
        archived_thread_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the conversation is not archived, returns a dictionary with the key "error" and the value "Conversation is not archived.".
        - On successful unarchiving, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unarchived")
            - conversation_id (str): The ID of the conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_unarchive
    return post_api_mod_conversations_conversation_id_unarchive(conversation_id=archived_thread_id)


def lift_ban_from_modmail(related_conversation_id):
    """
    Revokes a ban issued via modmail.

    Args:
        related_conversation_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the user is not banned, returns a dictionary with the key "error" and the value "User is not banned.".
        - On successful unban, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unbanned")
            - conversation_id (str): The ID of the conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_unban
    return post_api_mod_conversations_conversation_id_unban(conversation_id=related_conversation_id)


def unsilence_user_in_modmail(reference_conversation_id):
    """
    Unmutes a user in a modmail conversation.

    Args:
        reference_conversation_id (str): The ID of the modmail conversation.

    Returns:
        Dict[str, Any]:
        - If the conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - If the user is not muted, returns a dictionary with the key "error" and the value "User is not muted.".
        - On successful unmuting, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unmuted")
            - conversation_id (str): The ID of the conversation
    """
    from reddit.Modmail import post_api_mod_conversations_conversation_id_unmute
    return post_api_mod_conversations_conversation_id_unmute(
        conversation_id=reference_conversation_id
    )


def set_modmail_threads_as_read(target_conversation_ids):
    """
    Marks specified modmail conversations as read.

    Args:
        target_conversation_ids (List[str]): A list of modmail conversation IDs.

    Returns:
        Dict[str, Any]:
        - If the conversation IDs list is empty, returns a dictionary with the key "error" and the value "No conversation IDs provided.".
        - If any conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("read")
            - count (int): The number of conversations marked as read
    """
    from reddit.Modmail import post_api_mod_conversations_read
    return post_api_mod_conversations_read(conversation_ids=target_conversation_ids)


def get_subreddits_with_modmail_access():
    """
    Lists subreddits accessible via modmail.

    Returns:
        List[str]:
        - If there are no accessible subreddits, returns an empty list.
        - On successful retrieval, returns a list of subreddit names.
    """
    from reddit.Modmail import get_api_mod_conversations_subreddits
    return get_api_mod_conversations_subreddits()


def set_modmail_threads_as_unread(conversation_identifiers_to_mark_unread):
    """
    Marks specified modmail conversations as unread.

    Args:
        conversation_identifiers_to_mark_unread (List[str]): A list of modmail conversation IDs.

    Returns:
        Dict[str, Any]:
        - If the conversation IDs list is empty, returns a dictionary with the key "error" and the value "No conversation IDs provided.".
        - If any conversation ID is invalid, returns a dictionary with the key "error" and the value "Invalid conversation ID.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unread")
            - count (int): The number of conversations marked as unread
    """
    from reddit.Modmail import post_api_mod_conversations_unread
    return post_api_mod_conversations_unread(
        conversation_ids=conversation_identifiers_to_mark_unread
    )


def fetch_unread_modmail_count():
    """
    Retrieves the count of unread modmail conversations.

    Returns:
        Dict[str, str | int]:
        - On successful retrieval, returns a dictionary with the following keys:
            - count (int): The number of unread conversations
            - last_updated (str): The timestamp of the last update
    """
    from reddit.Modmail import get_api_mod_conversations_unread_count
    return get_api_mod_conversations_unread_count()
