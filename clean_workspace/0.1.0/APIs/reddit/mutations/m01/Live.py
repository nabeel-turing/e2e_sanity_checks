# This file is automatically generated by the MutationBuilder

def fetch_live_threads_by_fullname(live_thread_fullname_list):
    """
    Retrieves data for multiple live threads by their fullnames.

    Args:
        live_thread_fullname_list (str): A comma-separated list of live thread fullnames.

    Returns:
        Dict[str, Any]:
        - If the names parameter is empty, returns a dictionary with the key "error" and the value "No live thread IDs provided.".
        - If any of the provided fullnames are invalid, returns a dictionary with the key "error" and the value "Invalid fullname format.".
        - On successful retrieval, returns a dictionary with the following keys:
            - live_threads_requested (List[str]): The list of requested fullnames
            - data (List[Dict[str, Any]]): The list of live thread data
    """
    from reddit.Live import get_api_live_by_id_names
    return get_api_live_by_id_names(names=live_thread_fullname_list)


def start_new_live_thread(live_thread_title):
    """
    Creates a new live thread.

    Args:
        live_thread_title (str): The title of the new live thread.

    Returns:
        Dict[str, Any]:
        - If the title is empty, returns a dictionary with the key "error" and the value "Title cannot be empty.".
        - If the title is too long (exceeds 120 characters), returns a dictionary with the key "error" and the value "Title too long.".
        - On successful creation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("live_thread_created")
            - thread_id (str): The ID of the newly created live thread
    """
    from reddit.Live import post_api_live_create
    return post_api_live_create(title=live_thread_title)


def fetch_current_featured_live_thread():
    """
    Retrieves the currently featured live thread.

    Returns:
        Dict[str, Dict[str, Any]]:
        - On successful retrieval, returns a dictionary with the following keys:
            - featured_live_thread (Dict[str, Any]): The details of the featured live thread
    Raises:
        NoFeaturedLiveThreadError: If there is no featured live thread
    """
    from reddit.Live import get_api_live_happening_now
    return get_api_live_happening_now()


def confirm_live_thread_contributor_invite(live_thread_identifier):
    """
    Accepts an invitation to contribute to a live thread.

    Args:
        live_thread_identifier (str): The ID of the live thread.

    Returns:
        Dict[str, Any]:
        - If the thread ID is invalid, returns a dictionary with the key "error" and the value "Invalid thread ID.".
        - If there is no pending invitation, returns a dictionary with the key "error" and the value "No pending invitation.".
        - On successful acceptance, returns a dictionary with the following keys:
            - status (str): The status of the operation ("contributor_invite_accepted")
            - thread (str): The ID of the live thread
    """
    from reddit.Live import post_api_live_thread_accept_contributor_invite
    return post_api_live_thread_accept_contributor_invite(thread=live_thread_identifier)


def conclude_live_thread(target_live_thread_id):
    """
    Closes a live thread to stop further updates.

    Args:
        target_live_thread_id (str): The ID of the live thread.

    Returns:
        Dict[str, Any]:
        - If the thread ID is invalid, returns a dictionary with the key "error" and the value "Invalid thread ID.".
        - If the thread is already closed, returns a dictionary with the key "error" and the value "Thread already closed.".
        - On successful closure, returns a dictionary with the following keys:
            - status (str): The status of the operation ("thread_closed")
            - thread (str): The ID of the closed thread
    """
    from reddit.Live import post_api_live_thread_close_thread
    return post_api_live_thread_close_thread(thread=target_live_thread_id)


def remove_live_thread_update(update_identifier_to_delete):
    """
    Deletes a specific update from a live thread.

    Args:
        update_identifier_to_delete (str): The ID of the update to delete.

    Returns:
        Dict[str, Any]:
        - If the update ID is invalid, returns a dictionary with the key "error" and the value "Invalid update ID.".
        - If the update does not exist, returns a dictionary with the key "error" and the value "Update not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("update_deleted")
            - update_id (str): The ID of the deleted update
    """
    from reddit.Live import post_api_live_thread_delete_update
    return post_api_live_thread_delete_update(update_id=update_identifier_to_delete)


def modify_live_thread_details(new_live_thread_description=None):
    """
    Updates the settings or title of a live thread.

    Args:
        new_live_thread_description (Optional[str]): The new description for the live thread.

    Returns:
        Dict[str, str | None]:
        - On successful edit, returns a dictionary with the following keys:
            - status (str): The status of the operation ("thread_edited")
            - description (str | None): The new description
    Raises:
        DescriptionTooLongError: If the new_live_thread_description to return exceeds 1000 characters
    """
    from reddit.Live import post_api_live_thread_edit
    return post_api_live_thread_edit(description=new_live_thread_description)


def conceal_live_thread_discussion():
    """
    Hides the discussion thread associated with a live thread.

    Returns:
        Dict[str, Any]: On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("discussion_hidden")

    Raises:
        ValueError: If the discussion is already hidden.
    """
    from reddit.Live import post_api_live_thread_hide_discussion
    return post_api_live_thread_hide_discussion()


def add_contributor_to_live_thread(invitee_username):
    """
    Invites a new contributor to a live thread.

    Args:
        invitee_username (str): The username of the invitee.

    Returns:
        Dict[str, Any]:
        - If the username is invalid, returns a dictionary with the key "error" and the value "Invalid username.".
        - If the user is already a contributor, returns a dictionary with the key "error" and the value "User already a contributor.".
        - On successful invitation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("contributor_invited")
            - user (str): The username of the invited user
    """
    from reddit.Live import post_api_live_thread_invite_contributor
    return post_api_live_thread_invite_contributor(name=invitee_username)


def resign_from_live_thread_contributorship():
    """
    Removes contributor status from the current user.

    Returns:
        Dict[str, Any]: On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("left_as_contributor")

    Raises:
        ValueError: If the user is not a contributor.
    """
    from reddit.Live import post_api_live_thread_leave_contributor
    return post_api_live_thread_leave_contributor()


def flag_live_thread_for_review(live_thread_id_to_report):
    """
    Reports a live thread for rule violations.

    Args:
        live_thread_id_to_report (str): The ID of the live thread.

    Returns:
        Dict[str, Any]:
        - If the thread ID is invalid, returns a dictionary with the key "error" and the value "Invalid thread ID.".
        - If the thread is already reported, returns a dictionary with the key "error" and the value "Thread already reported.".
        - On successful report, returns a dictionary with the following keys:
            - status (str): The status of the operation ("live_thread_reported")
            - thread (str): The ID of the reported thread
    """
    from reddit.Live import post_api_live_thread_report
    return post_api_live_thread_report(thread=live_thread_id_to_report)


def eject_contributor_from_live_thread(contributor_username_to_remove):
    """
    Removes a contributor from a live thread.

    Args:
        contributor_username_to_remove (str): The username of the contributor to remove.

    Returns:
        Dict[str, Any]:
        - If the username is invalid, returns a dictionary with the key "error" and the value "Invalid username.".
        - If the user is not a contributor, returns a dictionary with the key "error" and the value "User is not a contributor.".
        - On successful removal, returns a dictionary with the following keys:
            - status (str): The status of the operation ("contributor_removed")
            - user (str): The username of the removed contributor
    """
    from reddit.Live import post_api_live_thread_rm_contributor
    return post_api_live_thread_rm_contributor(name=contributor_username_to_remove)


def cancel_live_thread_contributor_invitation(username_of_invitee_to_revoke):
    """
    Revokes a pending contributor invite.

    Args:
        username_of_invitee_to_revoke (str): The username of the invite to revoke.

    Returns:
        Dict[str, Any]:
        - If the username is invalid, returns a dictionary with the key "error" and the value "Invalid username.".
        - If there is no pending invitation, returns a dictionary with the key "error" and the value "No pending invitation.".
        - On successful revocation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("invite_revoked")
            - user (str): The username of the revoked invite
    """
    from reddit.Live import post_api_live_thread_rm_contributor_invite
    return post_api_live_thread_rm_contributor_invite(name=username_of_invitee_to_revoke)


def update_live_thread_contributor_permissions(contributor_username_to_modify):
    """
    Updates permissions for an existing contributor.

    Args:
        contributor_username_to_modify (str): The username of the contributor.

    Returns:
        Dict[str, Any]:
        - If the username is invalid, returns a dictionary with the key "error" and the value "Invalid username.".
        - If the user is not a contributor, returns a dictionary with the key "error" and the value "User is not a contributor.".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the operation ("permissions_set")
            - user (str): The username of the contributor
    """
    from reddit.Live import post_api_live_thread_set_contributor_permissions
    return post_api_live_thread_set_contributor_permissions(name=contributor_username_to_modify)


def mark_live_update_as_erroneous(update_identifier_to_strike):
    """
    Marks a live thread update as erroneous.

    Args:
        update_identifier_to_strike (str): The ID of the update to strike.

    Returns:
        Dict[str, Any]:
        - If the update ID is invalid, returns a dictionary with the key "error" and the value "Invalid update ID.".
        - If the update does not exist, returns a dictionary with the key "error" and the value "Update not found.".
        - On successful strike, returns a dictionary with the following keys:
            - status (str): The status of the operation ("update_struck")
            - update_id (str): The ID of the struck update
    """
    from reddit.Live import post_api_live_thread_strike_update
    return post_api_live_thread_strike_update(id=update_identifier_to_strike)


def reveal_live_thread_discussion():
    """
    Unhides the discussion thread associated with a live thread.

    Returns:
        Dict[str, str]:
            - status (str): The status of the operation ("discussion_unhidden")
    Raises
        DiscussionNotHiddenError: If the discussion to unhide is not hidden
    """
    from reddit.Live import post_api_live_thread_unhide_discussion
    return post_api_live_thread_unhide_discussion()


def post_update_to_live_thread(update_content_text):
    """
    Adds a new update to the live thread feed.

    Args:
        update_content_text (str): The text content of the update.

    Returns:
        Dict[str, Any]:
        - If the body is empty, returns a dictionary with the key "error" and the value "Update body cannot be empty.".
        - If the body is too long (exceeds 10000 characters), returns a dictionary with the key "error" and the value "Update body too long.".
        - On successful update, returns a dictionary with the following keys:
            - status (str): The status of the operation ("update_added")
            - body (str): The content of the update
    """
    from reddit.Live import post_api_live_thread_update
    return post_api_live_thread_update(body=update_content_text)


def fetch_specific_live_thread_info(live_thread_id_to_fetch):
    """
    Retrieves details about a specific live thread.

    Args:
        live_thread_id_to_fetch (str): The ID of the live thread.

    Returns:
        Dict[str, Any]:
        - If the thread ID is invalid, returns a dictionary with the key "error" and the value "Invalid thread ID.".
        - If the thread does not exist, returns a dictionary with the key "error" and the value "Thread not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - thread (str): The ID of the live thread
            - info (Dict[str, Any]): The thread details
    """
    from reddit.Live import get_live_thread
    return get_live_thread(thread=live_thread_id_to_fetch)


def retrieve_live_thread_metadata():
    """
    Retrieves metadata about a live thread.

    Returns:
        Dict[str, str]:
            - about (str): The thread metadata
    Raises:
        NoMetaDataError: if no metadata is available
    """
    from reddit.Live import get_live_thread_about
    return get_live_thread_about()


def list_live_thread_contributors():
    """
    Retrieves the list of contributors for a live thread.

    Returns:
        List[str]:
        - If there are no contributors, returns an empty list.
        - On successful retrieval, returns a list of contributor usernames.
    """
    from reddit.Live import get_live_thread_contributors
    return get_live_thread_contributors()


def list_live_thread_associated_discussions():
    """
    Retrieves discussion thread identifiers associated with a live thread.

    Returns:
        List[str]:
        - If there are no discussions, returns an empty list.
        - On successful retrieval, returns a list of discussion thread IDs.
    """
    from reddit.Live import get_live_thread_discussions
    return get_live_thread_discussions()


def fetch_live_thread_update_info(target_update_id):
    """
    Retrieves details for a specific live thread update.

    Args:
        target_update_id (str): The ID of the update to retrieve.

    Returns:
        Dict[str, Any]:
        - On successful retrieval, returns a dictionary with the update details.

    Raises:
        InvalidUpdateIDError: if the update id is Invalid
        UpdateNotFoundError: if the update is not found against the update id
    """
    from reddit.Live import get_live_thread_updates_update_id
    return get_live_thread_updates_update_id(update_id=target_update_id)
