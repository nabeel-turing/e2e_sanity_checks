# This file is automatically generated by the MutationBuilder

def block_sender_of_message(message_context_id):
    """
    Blocks a user based on a messaging context.

    Args:
        message_context_id (str): The identifier of the message or user context.

    Returns:
        Dict[str, Any]:
        - If the ID is invalid, returns a dictionary with the key "error" and the value "Invalid ID.".
        - If the user is already blocked, returns a dictionary with the key "error" and the value "User already blocked.".
        - On successful block, returns a dictionary with the following keys:
            - status (str): The status of the operation ("blocked")
            - id (str): The ID of the blocked user/message
    """
    from reddit.Messages import post_api_block
    return post_api_block(id=message_context_id)


def hide_inbox_messages(message_ids_to_collapse):
    """
    Collapses one or more messages in the inbox.

    Args:
        message_ids_to_collapse (List[str]): A list of message IDs to collapse.

    Returns:
        Dict[str, Any]:
        - If the list is empty, returns a dictionary with the key "error" and the value "No message IDs provided.".
        - If any message ID is invalid, returns a dictionary with the key "error" and the value "Invalid message ID.".
        - On successful collapse, returns a dictionary with the following keys:
            - status (str): The status of the operation ("collapsed")
            - message_ids (List[str]): The list of collapsed message IDs
    """
    from reddit.Messages import post_api_collapse_message
    return post_api_collapse_message(id=message_ids_to_collapse)


def send_private_message(recipient_username, message_subject_line, message_body_content):
    """
    Composes and sends a new private message.

    Args:
        recipient_username (str): The recipient's identifier or email. Cannot be empty or consist only of whitespace.
        message_subject_line (str): The subject of the message. Cannot be empty or consist only of whitespace.
        message_body_content (str): The body text of the message. Cannot be empty or consist only of whitespace.

    Returns:
        Dict[str, Any]: On successful sending, returns a dictionary with the following keys:
            - status (str): The status of the operation ("message_sent")
            - message_id (str): The ID of the new message

    Raises:
        TypeError: If 'recipient_username', 'message_subject_line', or 'message_body_content' is not a string.
        InvalidRecipientError: If 'recipient_username' is empty or consists only of whitespace.
        EmptySubjectError: If 'message_subject_line' is empty or consists only of whitespace.
        EmptyMessageTextError: If 'message_body_content' is empty or consists only of whitespace.
    """
    from reddit.Messages import post_api_compose
    return post_api_compose(
        to=recipient_username,
        subject=message_subject_line,
        text=message_body_content
    )


def permanently_remove_message(message_id_to_delete):
    """
    Deletes a message permanently.

    Args:
        message_id_to_delete (str): The identifier of the message to delete.

    Returns:
        Dict[str, Any]:
        - If the message ID is invalid, returns a dictionary with the key "error" and the value "Invalid message ID.".
        - If the message does not exist, returns a dictionary with the key "error" and the value "Message not found.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("message_deleted")
            - id (str): The ID of the deleted message
    """
    from reddit.Messages import post_api_del_msg
    return post_api_del_msg(id=message_id_to_delete)


def set_all_inbox_messages_read():
    """
    Marks all messages in the inbox as read.

    Returns:
        Dict[str, Any]:
        - If there are no messages to mark as read, returns a dictionary with the key "error" and the value "No messages to mark as read.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("all_messages_marked_read")
    """
    from reddit.Messages import post_api_read_all_messages
    return post_api_read_all_messages()


def set_specific_messages_as_read(message_ids_to_mark_read):
    """
    Marks specified messages as read.

    Args:
        message_ids_to_mark_read (List[str]): A list of message IDs.

    Returns:
        Dict[str, Any]:
        - If the list is empty, returns a dictionary with the key "error" and the value "No message IDs provided.".
        - If any message ID is invalid, returns a dictionary with the key "error" and the value "Invalid message ID.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("messages_marked_read")
            - ids (List[str]): The list of marked message IDs
    """
    from reddit.Messages import post_api_read_message
    return post_api_read_message(id=message_ids_to_mark_read)


def allow_subreddit_messaging():
    """
    Unblocks a subreddit.

    Returns:
        Dict[str, Any]:
        - If there is no subreddit to unblock, returns a dictionary with the key "error" and the value "No subreddit to unblock.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("subreddit_unblocked")
    """
    from reddit.Messages import post_api_unblock_subreddit
    return post_api_unblock_subreddit()


def show_inbox_messages(message_ids_to_uncollapse):
    """
    Uncollapses one or more messages in the inbox.

    Args:
        message_ids_to_uncollapse (List[str]): A list of message IDs.

    Returns:
        Dict[str, Any]:
        - If the list is empty, returns a dictionary with the key "error" and the value "No message IDs provided.".
        - If any message ID is invalid, returns a dictionary with the key "error" and the value "Invalid message ID.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("uncollapsed")
            - ids (List[str]): The list of uncollapsed message IDs
    """
    from reddit.Messages import post_api_uncollapse_message
    return post_api_uncollapse_message(id=message_ids_to_uncollapse)


def set_specific_messages_as_unread(message_ids_to_mark_unread):
    """
    Marks specified messages as unread.

    Args:
        message_ids_to_mark_unread (List[str]): A list of message IDs.

    Returns:
        Dict[str, Any]:
        - If the list is empty, returns a dictionary with the key "error" and the value "No message IDs provided.".
        - If any message ID is invalid, returns a dictionary with the key "error" and the value "Invalid message ID.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("marked_unread")
            - ids (List[str]): The list of marked message IDs
    """
    from reddit.Messages import post_api_unread_message
    return post_api_unread_message(id=message_ids_to_mark_unread)


def retrieve_user_inbox():
    """
    Retrieves messages from the inbox.

    Returns:
        List[Dict[str, Any]]:
        - If there are no messages, returns an empty list.
        - On successful retrieval, returns a list of message objects, each containing:
            - id (str): The message ID
            - to (str): The recipient
            - subject (str): The message subject
            - text (str): The message body
            - timestamp (str): The message timestamp
    """
    from reddit.Messages import get_message_inbox
    return get_message_inbox()


def retrieve_user_sent_messages():
    """
    Retrieves messages from the sent folder.

    Returns:
        List[Dict[str, Any]]:
        - If there are no sent messages, returns an empty list.
        - On successful retrieval, returns a list of sent message objects, each containing:
            - id (str): The message ID
            - to (str): The recipient
            - subject (str): The message subject
            - text (str): The message body
            - timestamp (str): The message timestamp
    """
    from reddit.Messages import get_message_sent
    return get_message_sent()


def retrieve_user_unread_messages():
    """
    Retrieves unread messages from the inbox.

    Returns:
        List[Dict[str, Any]]:
        - If there are no unread messages, returns an empty list.
        - On successful retrieval, returns a list of unread message objects, each containing:
            - id (str): The message ID
            - to (str): The recipient
            - subject (str): The message subject
            - text (str): The message body
            - timestamp (str): The message timestamp
    """
    from reddit.Messages import get_message_unread
    return get_message_unread()


def fetch_messages_from_mailbox(mailbox_category):
    """
    Retrieves messages from a specified mailbox category.

    Args:
        mailbox_category (str): The mailbox category (e.g., "inbox", "sent").

    Returns:
        List[Dict[str, Any]]:
        - If the category is invalid, returns a dictionary with the key "error" and the value "Invalid mailbox category.".
        - If there are no messages in the category, returns an empty list.
        - On successful retrieval, returns a list of message objects from the specified category, each containing:
            - id (str): The message ID
            - to (str): The recipient
            - subject (str): The message subject
            - text (str): The message body
            - timestamp (str): The message timestamp
    """
    from reddit.Messages import get_message_where
    return get_message_where(where=mailbox_category)
