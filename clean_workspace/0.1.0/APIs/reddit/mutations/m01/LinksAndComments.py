# This file is automatically generated by the MutationBuilder

def post_new_comment(parent_item_fullname, comment_markdown_text):
    """
    Submits a new comment or reply to a message.

    Args:
        parent_item_fullname (str): The fullname of the parent post or comment.
        comment_markdown_text (str): The comment text in raw markdown.

    Returns:
        Dict[str, Any]:
        - If the parent post/comment does not exist, returns a dictionary with the key "error" and the value "Parent item not found.".
        - If the text is empty, returns a dictionary with the key "error" and the value "Comment text cannot be empty.".
        - On successful creation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("comment_posted")
            - comment_id (str): The ID of the new comment
            - parent (str): The parent post/comment ID
    """
    from reddit.LinksAndComments import post_api_comment
    return post_api_comment(parent=parent_item_fullname, text=comment_markdown_text)


def remove_post_or_comment(item_fullname_to_delete):
    """
    Deletes a post or comment.

    Args:
        item_fullname_to_delete (str): The fullname of the item to delete.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is already deleted, returns a dictionary with the key "error" and the value "Item already deleted.".
        - On successful deletion, returns a dictionary with the following keys:
            - status (str): The status of the operation ("deleted")
            - type (str): The type of item deleted ("comment" or "link")
            - id (str): The ID of the deleted item
    """
    from reddit.LinksAndComments import post_api_del
    return post_api_del(id=item_fullname_to_delete)


def update_item_text(item_id_to_edit, new_markdown_text):
    """
    Edits the text of a comment or self-post.

    Args:
        item_id_to_edit (str): The fullname of the post or comment.
        new_markdown_text (str): The new text content in raw markdown.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is deleted, returns a dictionary with the key "error" and the value "Cannot edit deleted item.".
        - If the text is empty, returns a dictionary with the key "error" and the value "Text cannot be empty.".
        - On successful edit, returns a dictionary with the following keys:
            - status (str): The status of the operation ("updated_comment" or "updated_post")
            - comment_id/link_id (str): The ID of the updated item
    """
    from reddit.LinksAndComments import post_api_editusertext
    return post_api_editusertext(thing_id=item_id_to_edit, text=new_markdown_text)


def toggle_post_follow_status(target_post_fullname, set_follow_state):
    """
    Follows or unfollows a post to receive notifications.

    Args:
        target_post_fullname (str): The fullname of the post.
        set_follow_state (bool): True to follow, False to unfollow.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("ok")
            - fullname (str): The post fullname
            - follow (bool): The follow state
    """
    from reddit.LinksAndComments import post_api_follow_post
    return post_api_follow_post(fullname=target_post_fullname, follow=set_follow_state)


def conceal_posts_from_feed(post_fullnames_to_hide):
    """
    Hides one or more posts from the user's front page.

    Args:
        post_fullnames_to_hide (List[str]): A list of post fullnames to hide.

    Returns:
        Dict[str, Any]:
        - If the list is empty, returns a dictionary with the key "error" and the value "No posts specified.".
        - If any post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("hidden")
            - items (List[str]): The list of hidden post IDs
    """
    from reddit.LinksAndComments import post_api_hide
    return post_api_hide(id=post_fullnames_to_hide)


def fetch_content_info_by_id_or_url(item_fullnames_list=None, reference_lookup_url=None):
    """
    Retrieves information about posts or comments by fullname or URL.

    Args:
        item_fullnames_list (Optional[str]): A comma-separated list of fullnames.
        reference_lookup_url (Optional[str]): A URL to look up posts referencing it.

    Returns:
        Dict[str, Any]:
        - If neither id nor url is provided, returns a dictionary with the key "error" and the value "Either id or url must be provided.".
        - If an invalid fullname is provided, returns a dictionary with the key "error" and the value "Invalid fullname.".
        - On successful lookup, returns a dictionary with the following keys:
            - id (Optional[str]): The provided fullname list
            - url (Optional[str]): The provided URL
            - results (List[Dict[str, Any]]): The lookup results
    """
    from reddit.LinksAndComments import get_api_info
    return get_api_info(id=item_fullnames_list, url=reference_lookup_url)


def prevent_replies_to_item(item_to_lock_fullname):
    """
    Locks a post or comment to prevent further replies.

    Args:
        item_to_lock_fullname (str): The fullname of the item to lock.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is already locked, returns a dictionary with the key "error" and the value "Item already locked.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("locked")
            - id (str): The ID of the locked item
    """
    from reddit.LinksAndComments import post_api_lock
    return post_api_lock(id=item_to_lock_fullname)


def flag_post_as_nsfw(post_fullname_to_mark_nsfw):
    """
    Marks a post as Not Safe For Work (NSFW).

    Args:
        post_fullname_to_mark_nsfw (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the post is already marked NSFW, returns a dictionary with the key "error" and the value "Post already marked NSFW.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("nsfw_marked")
            - id (str): The ID of the marked post
    """
    from reddit.LinksAndComments import post_api_marknsfw
    return post_api_marknsfw(id=post_fullname_to_mark_nsfw)


def load_more_comments_in_thread(parent_post_fullname, child_comment_ids_to_load):
    """
    Retrieves additional comments omitted by pagination.

    Args:
        parent_post_fullname (str): The fullname of the parent post.
        child_comment_ids_to_load (str): A comma-separated list of child comment IDs to retrieve.

    Returns:
        Dict[str, Any]:
        - If the parent post does not exist, returns a dictionary with the key "error" and the value "Parent post not found.".
        - If the children list is empty, returns a dictionary with the key "error" and the value "No children specified.".
        - On successful retrieval, returns a dictionary with the following keys:
            - link_id (str): The parent post ID
            - children_requested (List[str]): The list of requested child comment IDs
    """
    from reddit.LinksAndComments import get_api_morechildren
    return get_api_morechildren(link_id=parent_post_fullname, children=child_comment_ids_to_load)


def submit_report_for_item(item_id_to_report, reason_for_report=None):
    """
    Reports a post or comment for review.

    Args:
        item_id_to_report (str): The fullname of the item to report.
        reason_for_report (Optional[str]): A short explanation for the report.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is already reported, returns a dictionary with the key "error" and the value "Item already reported.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("reported")
            - thing_id (str): The ID of the reported item
            - reason (Optional[str]): The provided reason
    """
    from reddit.LinksAndComments import post_api_report
    return post_api_report(thing_id=item_id_to_report, reason=reason_for_report)


def bookmark_item_for_user(item_fullname_to_save):
    """
    Saves a post or comment to the user's saved list.

    Args:
        item_fullname_to_save (str): The fullname of the item to save.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is already saved, returns a dictionary with the key "error" and the value "Item already saved.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("saved")
            - id (str): The ID of the saved item
    """
    from reddit.LinksAndComments import post_api_save
    return post_api_save(id=item_fullname_to_save)


def list_user_saved_item_categories():
    """
    Retrieves the user's saved categories.

    Returns:
        List[Dict[str, Any]]: A list of saved category objects.
    """
    from reddit.LinksAndComments import get_api_saved_categories
    return get_api_saved_categories()


def set_item_reply_status(target_item_fullname, enable_replies_state):
    """
    Enables or disables replies for a post or comment.

    Args:
        target_item_fullname (str): The fullname of the item.
        enable_replies_state (bool): True to enable replies, False to disable.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is already in the requested state, returns a dictionary with the key "error" and the value "Item already in requested state.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("replies_state_changed")
            - id (str): The ID of the item
            - state (bool): The new reply state
    """
    from reddit.LinksAndComments import post_api_sendreplies
    return post_api_sendreplies(id=target_item_fullname, state=enable_replies_state)


def configure_post_contest_mode(contest_mode_enabled_state, target_post_id):
    """
    Enables or disables contest mode for a post.

    Args:
        contest_mode_enabled_state (bool): True to enable contest mode, False to disable.
        target_post_id (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the post is already in the requested state, returns a dictionary with the key "error" and the value "Post already in requested state.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("contest_mode_set")
            - id (str): The ID of the post
            - state (bool): The new contest mode state
    """
    from reddit.LinksAndComments import post_api_set_contest_mode
    return post_api_set_contest_mode(state=contest_mode_enabled_state, id=target_post_id)


def configure_post_stickiness(sticky_slot_position, is_sticky_enabled, post_to_sticky_id):
    """
    Stickies or unstickies a post in a subreddit.

    Args:
        sticky_slot_position (Optional[int]): The sticky slot number.
        is_sticky_enabled (bool): True to sticky, False to unsticky.
        post_to_sticky_id (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the post is already in the requested state, returns a dictionary with the key "error" and the value "Post already in requested state.".
        - If the sticky slot is invalid, returns a dictionary with the key "error" and the value "Invalid sticky slot.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("sticky_set")
            - id (str): The ID of the post
            - slot (Optional[int]): The sticky slot number
            - sticky (bool): The new sticky state
    """
    from reddit.LinksAndComments import post_api_set_subreddit_sticky
    return post_api_set_subreddit_sticky(
        num=sticky_slot_position,
        state=is_sticky_enabled,
        id=post_to_sticky_id
    )


def define_post_comment_sort_order(suggested_sort_method, target_post_for_sort):
    """
    Sets the suggested comment sort order for a post.

    Args:
        suggested_sort_method (Optional[str]): The sort order (e.g., "top", "new").
        target_post_for_sort (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the sort order is invalid, returns a dictionary with the key "error" and the value "Invalid sort order.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("suggested_sort_set")
            - id (str): The ID of the post
            - sort (Optional[str]): The new sort order
    """
    from reddit.LinksAndComments import post_api_set_suggested_sort
    return post_api_set_suggested_sort(sort=suggested_sort_method, id=target_post_for_sort)


def flag_post_as_spoiler(post_fullname_to_mark_spoiler):
    """
    Marks a post as containing spoilers.

    Args:
        post_fullname_to_mark_spoiler (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the post is already marked as a spoiler, returns a dictionary with the key "error" and the value "Post already marked as spoiler.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("spoiler_marked")
            - id (str): The ID of the marked post
    """
    from reddit.LinksAndComments import post_api_spoiler
    return post_api_spoiler(id=post_fullname_to_mark_spoiler)


def log_recent_content_visits():
    """
    Stores a record of the user's recent post or comment visits.

    Returns:
        Dict[str, Any]:
        - If there are no visits to store, returns a dictionary with the key "error" and the value "No visits to store.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("visits_stored")
    """
    from reddit.LinksAndComments import post_api_store_visits
    return post_api_store_visits()


def create_new_post(
    post_type,
    target_subreddit,
    post_title,
    self_post_text=None,
    link_post_url=None,
    is_nsfw=False,
    is_spoiler=False
):
    """
    Submits a new link or text post into a subreddit.

    Args:
        post_type (str): The type of post ("link" or "self").
        target_subreddit (str): The subreddit to which the post is submitted.
        post_title (str): The title of the post.
        self_post_text (Optional[str]): The text body for a self-post. Required when kind is "self".
        link_post_url (Optional[str]): The URL for a link post. Required when kind is "link".
        is_nsfw (bool): Whether the post is Not Safe For Work. Defaults to False.
        is_spoiler (bool): Whether the post contains spoilers. Defaults to False.

    Returns:
        Dict[str, Any]:
        - If the subreddit does not exist, returns a dictionary with the key "error" and the value "Subreddit not found.".
        - If the kind is invalid, returns a dictionary with the key "error" and the value "Invalid post kind.".
        - If required fields are missing, returns a dictionary with the key "error" and the value "Missing required field: {field}.".
        - If the title is empty, returns a dictionary with the key "error" and the value "Title cannot be empty.".
        - On successful submission, returns a dictionary with the following keys:
            - status (str): The status of the operation ("submitted")
            - link_id (str): The ID of the new post
    """
    from reddit.LinksAndComments import post_api_submit
    return post_api_submit(
        kind=post_type,
        sr=target_subreddit,
        title=post_title,
        text=self_post_text,
        url=link_post_url,
        nsfw=is_nsfw,
        spoiler=is_spoiler
    )


def reveal_hidden_posts_in_feed(post_fullnames_to_unhide):
    """
    Unhides posts that were previously hidden.

    Args:
        post_fullnames_to_unhide (List[str]): A list of post fullnames to unhide.

    Returns:
        Dict[str, Any]:
        - If the list is empty, returns a dictionary with the key "error" and the value "No posts specified.".
        - If any post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If any post is not hidden, returns a dictionary with the key "error" and the value "Post not hidden.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unhidden")
            - items (List[str]): The list of unhidden post IDs
    """
    from reddit.LinksAndComments import post_api_unhide
    return post_api_unhide(id=post_fullnames_to_unhide)


def allow_replies_to_item(item_to_unlock_fullname):
    """
    Unlocks a previously locked post or comment.

    Args:
        item_to_unlock_fullname (str): The fullname of the item.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is not locked, returns a dictionary with the key "error" and the value "Item not locked.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unlocked")
            - id (str): The ID of the unlocked item
    """
    from reddit.LinksAndComments import post_api_unlock
    return post_api_unlock(id=item_to_unlock_fullname)


def remove_nsfw_flag_from_post(post_fullname_to_unmark_nsfw):
    """
    Removes the NSFW tag from a post.

    Args:
        post_fullname_to_unmark_nsfw (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the post is not marked NSFW, returns a dictionary with the key "error" and the value "Post not marked NSFW.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("nsfw_removed")
            - id (str): The ID of the post
    """
    from reddit.LinksAndComments import post_api_unmarknsfw
    return post_api_unmarknsfw(id=post_fullname_to_unmark_nsfw)


def remove_item_from_bookmarks(item_fullname_to_unsave):
    """
    Unsaves a post or comment.

    Args:
        item_fullname_to_unsave (str): The fullname of the item to unsave.

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the item is not saved, returns a dictionary with the key "error" and the value "Item not saved.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("unsaved")
            - id (str): The ID of the unsaved item
    """
    from reddit.LinksAndComments import post_api_unsave
    return post_api_unsave(id=item_fullname_to_unsave)


def remove_spoiler_flag_from_post(post_fullname_to_unmark_spoiler):
    """
    Removes the spoiler tag from a post.

    Args:
        post_fullname_to_unmark_spoiler (str): The fullname of the post.

    Returns:
        Dict[str, Any]:
        - If the post does not exist, returns a dictionary with the key "error" and the value "Post not found.".
        - If the post is not marked as a spoiler, returns a dictionary with the key "error" and the value "Post not marked as spoiler.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("spoiler_removed")
            - id (str): The ID of the post
    """
    from reddit.LinksAndComments import post_api_unspoiler
    return post_api_unspoiler(id=post_fullname_to_unmark_spoiler)


def cast_vote_on_content(item_fullname_to_vote_on, vote_direction_value):
    """
    Casts or revokes a vote on a post or comment.

    Args:
        item_fullname_to_vote_on (str): The fullname of the item.
        vote_direction_value (int): The vote direction (-1 for downvote, 0 for remove, +1 for upvote).

    Returns:
        Dict[str, Any]:
        - If the item does not exist, returns a dictionary with the key "error" and the value "Item not found.".
        - If the vote direction is invalid, returns a dictionary with the key "error" and the value "Invalid vote direction.".
        - On successful operation, returns a dictionary with the following keys:
            - status (str): The status of the operation ("voted")
            - id (str): The ID of the voted item
            - direction (int): The vote direction
    """
    from reddit.LinksAndComments import post_api_vote
    return post_api_vote(id=item_fullname_to_vote_on, dir=vote_direction_value)
