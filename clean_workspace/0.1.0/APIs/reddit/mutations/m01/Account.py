# This file is automatically generated by the MutationBuilder

def fetch_current_user_identity():
    """
    Retrieves the identity details of the currently authenticated user.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - username (str): The user's username
            - id (str): The user's unique identifier
    """
    from reddit.Account import get_api_v1_me
    return get_api_v1_me()


def list_my_blocked_users():
    """
    Retrieves a list of users blocked by the authenticated user.

    Returns:
        List[str]: A list of usernames that have been blocked by the authenticated user.
    """
    from reddit.Account import get_api_v1_me_blocked
    return get_api_v1_me_blocked()


def list_my_friends():
    """
    Retrieves a list of friends for the authenticated user.

    Returns:
        List[str]: A list of usernames that are friends of the authenticated user.
    """
    from reddit.Account import get_api_v1_me_friends
    return get_api_v1_me_friends()


def fetch_user_karma_details():
    """
    Retrieves a breakdown of the authenticated user's subreddit karma.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - karma_by_subreddit (List[Dict[str, Any]]): List of subreddit-specific karma
                - subreddit (str): Name of the subreddit
                - karma (int): Karma points in that subreddit
            - total_karma (int): Total karma across all subreddits
    """
    from reddit.Account import get_api_v1_me_karma
    return get_api_v1_me_karma()


def fetch_user_preferences(specific_preference_fields=None):
    """
    Retrieves the preference settings of the authenticated user.

    Args:
        specific_preference_fields (Optional[str]): A comma-separated list of specific preference fields to return.
            If None, returns all preferences.

    Returns:
        Dict[str, Any]: A dictionary containing user preferences. Common fields include:
            - nightmode (bool): Whether night mode is enabled
            - label_nsfw (bool): Whether NSFW content is labeled
            - country_code (str): User's country code
    """
    from reddit.Account import get_api_v1_me_prefs
    return get_api_v1_me_prefs(fields=specific_preference_fields)


def modify_user_preferences(preferences_to_update):
    """
    Updates the preference settings of the authenticated user.

    Args:
        preferences_to_update (Dict[str, Any]): A dictionary containing the preference fields to update.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - updated_prefs (Dict[str, Any]): The updated preferences
            - status (str): The status of the update operation
    """
    from reddit.Account import patch_api_v1_me_prefs
    return patch_api_v1_me_prefs(new_preferences=preferences_to_update)


def fetch_user_awards():
    """
    Retrieves the trophies (awards) earned by the authenticated user.

    Returns:
        List[Dict[str, Any]]: A list of trophy objects, each containing:
            - trophy_name (str): The name of the trophy
            - description (str): A description of how the trophy was earned
    """
    from reddit.Account import get_api_v1_me_trophies
    return get_api_v1_me_trophies()


def list_detailed_blocked_user_info():
    """
    Retrieves detailed information about blocked users.

    Returns:
        List[str]: A list of usernames that have been blocked by the authenticated user.
    """
    from reddit.Account import get_prefs_blocked
    return get_prefs_blocked()


def list_detailed_friend_info():
    """
    Retrieves detailed information about friends.

    Returns:
        List[str]: A list of usernames that are friends of the authenticated user.
    """
    from reddit.Account import get_prefs_friends
    return get_prefs_friends()


def fetch_user_messaging_settings():
    """
    Retrieves the messaging preferences of the authenticated user.

    Returns:
        Dict[str, Any]: A dictionary containing messaging preferences:
            - allow_pms (bool): Whether private messages are allowed
            - email_notifications (bool): Whether email notifications are enabled
    """
    from reddit.Account import get_prefs_messaging
    return get_prefs_messaging()


def list_my_trusted_users():
    """
    Retrieves the trusted user list for the authenticated user.

    Returns:
        List[str]: A list of usernames that are trusted by the authenticated user.
    """
    from reddit.Account import get_prefs_trusted
    return get_prefs_trusted()


def fetch_preferences_from_category(preference_category_name):
    """
    Retrieves specific preference details from various preference categories.

    Args:
        preference_category_name (str): The preference category to retrieve (e.g., "blocked", "friends").

    Returns:
        Any: The preferences for the specified category. Returns:
            - List[str] for "blocked" and "friends" categories
            - Dict[str, Any] for other preference categories
            - Dict[str, str] with error message if category not found

    Raises:
        ValueError: If the specified category is not supported.
    """
    from reddit.Account import get_prefs_where
    return get_prefs_where(where=preference_category_name)
