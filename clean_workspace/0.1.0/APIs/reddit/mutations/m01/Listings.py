# This file is automatically generated by the MutationBuilder

def fetch_top_ranked_posts(pagination_anchor_fullname=None, post_retrieval_limit=None):
    """
    Retrieves the best posts ranked by the algorithm.

    Args:
        pagination_anchor_fullname (Optional[str]): The fullname anchor for pagination.
        post_retrieval_limit (Optional[int]): The maximum number of posts to return.

    Returns:
        Dict[str, Any]:
        - If the after parameter is invalid, returns a dictionary with the key "error" and the value "Invalid pagination anchor.".
        - If the limit is invalid (less than 1 or greater than 100), returns a dictionary with the key "error" and the value "Invalid limit value.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("best")
            - after (Optional[str]): The pagination anchor
            - limit (Optional[int]): The maximum number of posts
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_best
    return get_best(after=pagination_anchor_fullname, limit=post_retrieval_limit)


def retrieve_posts_by_fullname(post_fullname_list):
    """
    Retrieves posts by their fullnames.

    Args:
        post_fullname_list (str): A comma-separated list of post fullnames.

    Returns:
        Dict[str, Any]:
        - If the names parameter is empty, returns a dictionary with the key "error" and the value "No post IDs provided.".
        - If any of the provided fullnames are invalid, returns a dictionary with the key "error" and the value "Invalid fullname format.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("by_id")
            - names (List[str]): The list of requested fullnames
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_by_id_names
    return get_by_id_names(names=post_fullname_list)


def fetch_comments_for_post(post_article_id_or_slug):
    """
    Retrieves comments for a post identified by its article ID.

    Args:
        post_article_id_or_slug (str): The article ID or slug.

    Returns:
        Dict[str, Any]:
        - If the article ID is invalid, returns a dictionary with the key "error" and the value "Invalid article ID.".
        - If the article does not exist, returns a dictionary with the key "error" and the value "Article not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - article (str): The article ID
            - comments (List[Dict[str, Any]]): The list of comments
    """
    from reddit.Listings import get_comments_article
    return get_comments_article(article=post_article_id_or_slug)


def fetch_controversial_listings(pagination_cursor=None):
    """
    Retrieves posts that are currently controversial.

    Args:
        pagination_cursor (Optional[str]): The fullname anchor for pagination.

    Returns:
        Dict[str, Any]:
        - If the after parameter is invalid, returns a dictionary with the key "error" and the value "Invalid pagination anchor.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("controversial")
            - after (Optional[str]): The pagination anchor
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_controversial
    return get_controversial(after=pagination_cursor)


def locate_duplicate_articles(original_post_id):
    """
    Finds duplicate posts for a given article.

    Args:
        original_post_id (str): The ID of the original post.

    Returns:
        Dict[str, Any]:
        - If the article ID is invalid, returns a dictionary with the key "error" and the value "Invalid article ID.".
        - If the article does not exist, returns a dictionary with the key "error" and the value "Article not found.".
        - On successful retrieval, returns a dictionary with the following keys:
            - article (str): The original article ID
            - duplicates (List[Dict[str, Any]]): The list of duplicate posts
    """
    from reddit.Listings import get_duplicates_article
    return get_duplicates_article(article=original_post_id)


def fetch_hot_frontpage_posts(max_post_count=None):
    """
    Retrieves hot posts from the front page.

    Args:
        max_post_count (Optional[int]): The maximum number of posts to return.

    Returns:
        Dict[str, Any]:
        - If the limit is invalid (less than 1 or greater than 100), returns a dictionary with the key "error" and the value "Invalid limit value.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("hot")
            - limit (Optional[int]): The maximum number of posts
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_hot
    return get_hot(limit=max_post_count)


def retrieve_latest_posts():
    """
    Retrieves the newest posts.

    Returns:
        Dict[str, Any]:
        - If there are no new posts, returns a dictionary with the key "error" and the value "No new posts available.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("new")
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_new
    return get_new()


def fetch_trending_posts():
    """
    Retrieves posts that are rapidly gaining popularity.

    Returns:
        Dict[str, Any]:
        - If there are no rising posts, returns a dictionary with the key "error" and the value "No rising posts available.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("rising")
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_rising
    return get_rising()


def retrieve_top_posts_by_timeframe(time_period_filter=None):
    """
    Retrieves the top posts.

    Args:
        time_period_filter (Optional[str]): The timeframe (e.g., day, week).

    Returns:
        Dict[str, Any]:
        - If the timeframe is invalid, returns a dictionary with the key "error" and the value "Invalid timeframe.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing ("top")
            - timeframe (Optional[str]): The specified timeframe
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_top
    return get_top(t=time_period_filter)


def fetch_posts_by_sort_method(sorting_criteria):
    """
    Retrieves posts sorted by a specified method.

    Args:
        sorting_criteria (str): The sorting category (e.g., hot, new, rising).

    Returns:
        Dict[str, Any]:
        - If the sort parameter is invalid, returns a dictionary with the key "error" and the value "Invalid sort method.".
        - On successful retrieval, returns a dictionary with the following keys:
            - listing_type (str): The type of listing (same as sort parameter)
            - items (List[Dict[str, Any]]): The list of posts
    """
    from reddit.Listings import get_sort
    return get_sort(sort=sorting_criteria)
