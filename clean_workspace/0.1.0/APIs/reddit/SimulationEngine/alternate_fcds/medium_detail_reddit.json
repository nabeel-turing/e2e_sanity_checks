[
  {
    "name": "accept_live_thread_contributor_invite",
    "description": "Accept an invitation to contribute to a live thread, identified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The string ID of the live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "accept_moderator_invite",
    "description": "Accept an invitation to moderate a subreddit. If successful, it returns a status confirming the invitation has been accepted; otherwise, it raises an error if no pending invitation exists.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "add_friend",
    "description": "Adds a user as a friend. The `api_type` must be \"json\", and `name` specifies the username to add.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_type": {
          "type": "string",
          "description": "The API type for the request. This parameter must strictly be the string 'json'."
        },
        "name": {
          "type": "string",
          "description": "Specifies the username of the user to be added as a friend."
        }
      },
      "required": [
        "api_type",
        "name"
      ]
    }
  },
  {
    "name": "add_live_thread_update",
    "description": "Adds a new update to the live thread feed. The update's content is provided as text, which cannot be empty and must not exceed 10000 characters.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The text content of the update. It cannot be empty and must not exceed 10000 characters."
        }
      },
      "required": [
        "body"
      ]
    }
  },
  {
    "name": "add_post_to_collection",
    "description": "Adds a specified post to an existing collection. The post is identified by its fullname and the collection by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "A unique identifier for the collection."
        },
        "link_fullname": {
          "type": "string",
          "description": "The fullname of the post to add. This parameter accepts a string value."
        }
      },
      "required": [
        "collection_id",
        "link_fullname"
      ]
    }
  },
  {
    "name": "add_subreddit_emoji",
    "description": "Adds a new emoji to a specified subreddit. The emoji `name` must be alphanumeric, can include hyphens or underscores, and cannot exceed 24 characters. Provide the `s3_key` for the uploaded image in the format `subreddit/hash_value`.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "Identifies the name of the subreddit for which the emoji operation is performed."
        },
        "name": {
          "type": "string",
          "description": "The name for the emoji to be created. It must be alphanumeric, allowing only hyphens (-) and underscores (_) as special characters, and cannot exceed 24 characters."
        },
        "s3_key": {
          "type": "string",
          "description": "The S3 key for the uploaded image, obtainable from the S3 URL. It must follow the format `subreddit/hash_value`."
        },
        "mod_flair_only": {
          "type": "boolean",
          "description": "Indicates whether the emoji is exclusively available for moderator flair. This parameter defaults to `False`."
        },
        "post_flair_allowed": {
          "type": "boolean",
          "description": "Specifies whether the emoji is available for use in post flair, defaulting to `True`."
        },
        "user_flair_allowed": {
          "type": "boolean",
          "description": "Indicates whether the emoji can be used in user flair. This parameter defaults to `True`."
        },
        "css": {
          "type": "string",
          "description": "A string containing CSS rules to apply styling to the emoji."
        }
      },
      "required": [
        "name",
        "s3_key",
        "subreddit"
      ]
    }
  },
  {
    "name": "add_wiki_page_editor",
    "description": "Adds a specified user, identified by their username, to the list of approved editors for a given wiki page, identified by its name.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "A string that represents the name of the wiki page."
        },
        "username": {
          "type": "string",
          "description": "Specifies the username to be granted editing access."
        }
      },
      "required": [
        "page",
        "username"
      ]
    }
  },
  {
    "name": "approve_item",
    "description": "Approves a post or comment, which is identified by its `fullname`.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname identifier of the item to be approved."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "approve_modmail_conversation",
    "description": "Approves a modmail conversation using its unique conversation ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "A string representing the ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "archive_modmail_conversation",
    "description": "Archives the specified modmail conversation, identified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "Specifies the ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "block_user",
    "description": "Blocks a user specified by their account ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The string account ID of the user to block."
        }
      },
      "required": [
        "account_id"
      ]
    }
  },
  {
    "name": "block_user_via_message",
    "description": "Blocks a user using an identifier that represents a specific message or user context.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A string representing the identifier of the message or user context."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "bulk_mark_modmail_as_read",
    "description": "Marks multiple modmail conversations as read. Provide a list of modmail conversation IDs to specify which conversations to mark.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs. Each ID must be a string."
        }
      },
      "required": [
        "conversation_ids"
      ]
    }
  },
  {
    "name": "check_captcha_requirement",
    "description": "Checks if CAPTCHA is required for user requests. Returns `True` if CAPTCHA is needed, and `False` otherwise.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "check_username_availability",
    "description": "Checks if a username is available. The function returns a dictionary indicating availability with `username` and `available` keys, or an `error` key if the username is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "The username string to be checked for availability."
        }
      },
      "required": [
        "user"
      ]
    }
  },
  {
    "name": "clear_flair_templates",
    "description": "Clears all flair templates (user or link) in a subreddit by specifying `flair_type` as either 'USER_FLAIR' or 'LINK_FLAIR'.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "The type of flair to clear. This parameter must be either \"USER_FLAIR\" for user flair templates or \"LINK_FLAIR\" for link flair templates."
        }
      },
      "required": [
        "flair_type"
      ]
    }
  },
  {
    "name": "close_live_thread",
    "description": "Closes a live thread identified by its unique ID. This action prevents any further updates to the thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The string identifier for the live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "collapse_messages",
    "description": "Collapses one or more messages in the inbox. Specify the messages to collapse by providing a list of their string IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings, where each string represents a message ID to be collapsed."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "compose_message",
    "description": "Composes and sends a new private message. The recipient, subject, and message body must be strings that are not empty or consist solely of whitespace.",
    "parameters": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string",
          "description": "The recipient's identifier or email address. This string cannot be empty or contain only whitespace characters."
        },
        "subject": {
          "type": "string",
          "description": "The subject of the message. It must not be empty or consist only of whitespace."
        },
        "text": {
          "type": "string",
          "description": "The body text of the message. This parameter cannot be empty or consist solely of whitespace."
        }
      },
      "required": [
        "subject",
        "text",
        "to"
      ]
    }
  },
  {
    "name": "configure_flair_settings",
    "description": "Configures overall flair settings, including whether flair is enabled (a boolean value) and its display position (e.g., 'left' or 'right').",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_enabled": {
          "type": "boolean",
          "description": "Indicates if flair is enabled, accepting an optional boolean value."
        },
        "flair_position": {
          "type": "string",
          "description": "The position where flair is displayed, such as 'left' or 'right'."
        }
      }
    }
  },
  {
    "name": "copy_multireddit",
    "description": "Copies an existing multireddit from a specified source path to a given destination path.",
    "parameters": {
      "type": "object",
      "properties": {
        "frm": {
          "type": "string",
          "description": "The path of the source multireddit to be copied."
        },
        "to": {
          "type": "string",
          "description": "Specifies the destination path for the copied multireddit."
        }
      },
      "required": [
        "frm",
        "to"
      ]
    }
  },
  {
    "name": "create_collection",
    "description": "Creates a new collection with a specified title within a given subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "A string specifying the title for the new collection."
        },
        "sr_fullname": {
          "type": "string",
          "description": "A string representing the full, unique identifier of the subreddit."
        }
      },
      "required": [
        "sr_fullname",
        "title"
      ]
    }
  },
  {
    "name": "create_live_thread",
    "description": "Creates a new live thread using the provided title. The title must be a non-empty string and cannot exceed 120 characters. Upon successful creation, it returns the ID of the new thread; otherwise, an error is returned if the title is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title for the new live thread. This string cannot be empty and must not exceed 120 characters."
        }
      },
      "required": [
        "title"
      ]
    }
  },
  {
    "name": "create_or_edit_subreddit",
    "description": "Creates or edits a subreddit. The operation is performed using the specified subreddit name and title.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The string representing the name of the subreddit."
        },
        "title": {
          "type": "string",
          "description": "A string representing the human-readable title for the subreddit."
        }
      },
      "required": [
        "name",
        "title"
      ]
    }
  },
  {
    "name": "create_or_update_flair_template",
    "description": "Creates or updates a flair template. Specify the flair type as either \"USER_FLAIR\" or \"LINK_FLAIR\" and provide the desired text for the template.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Specifies the type of flair template, which must be either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "text": {
          "type": "string",
          "description": "The string that specifies the textual content of the flair template."
        }
      },
      "required": [
        "flair_type",
        "text"
      ]
    }
  },
  {
    "name": "create_or_update_flair_template_v2",
    "description": "Creates or updates a flair template with advanced options. The template type must be specified as either \"USER_FLAIR\" or \"LINK_FLAIR\".",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Specifies the type of flair template, which must be either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "text": {
          "type": "string",
          "description": "The string content that represents the flair text."
        }
      },
      "required": [
        "flair_type",
        "text"
      ]
    }
  },
  {
    "name": "create_or_update_subreddit_widget",
    "description": "Creates or updates a subreddit widget using provided configuration data. The required data structure is highly specific and varies based on the widget's kind.",
    "parameters": {
      "type": "object",
      "properties": {
        "widget_data": {
          "type": "object",
          "properties": {},
          "description": "The widget configuration data, provided as a dictionary. Its precise structure varies significantly based on the `kind` field, accommodating specific properties for each widget type such as 'image' (with image data arrays), 'calendar' (with event configurations), 'textarea' (with markdown text), or 'button' (with complex button definitions). Common elements like `shortName` (max 30 chars) and `styles` (6-digit hex colors) are often included, alongside type-specific fields like `numEvents` (1-50) or `css` (max 100000 chars)."
        }
      },
      "required": [
        "widget_data"
      ]
    }
  },
  {
    "name": "delete_collection",
    "description": "Deletes an existing collection, identified by its string ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The string identifier of the collection to delete."
        }
      },
      "required": [
        "collection_id"
      ]
    }
  },
  {
    "name": "delete_flair_template",
    "description": "Deletes a flair template based on its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "template_id": {
          "type": "string",
          "description": "The string ID of the flair template to be deleted."
        }
      },
      "required": [
        "template_id"
      ]
    }
  },
  {
    "name": "delete_live_thread_update",
    "description": "Deletes a specific update from a live thread by its `update_id`. Upon successful deletion, it confirms the operation status and returns the ID of the deleted update.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_id": {
          "type": "string",
          "description": "The string ID of the update to be deleted."
        }
      },
      "required": [
        "update_id"
      ]
    }
  },
  {
    "name": "delete_message",
    "description": "Deletes a message permanently.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string identifier of the message to be deleted."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_moderator_note",
    "description": "Deletes a specific moderator note by its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "note_id": {
          "type": "string",
          "description": "The string identifier of the note to delete."
        }
      },
      "required": [
        "note_id"
      ]
    }
  },
  {
    "name": "delete_multireddit",
    "description": "Deletes the multireddit specified by its path.",
    "parameters": {
      "type": "object",
      "properties": {
        "multipath": {
          "type": "string",
          "description": "The string path identifying the multireddit."
        }
      },
      "required": [
        "multipath"
      ]
    }
  },
  {
    "name": "delete_post_or_comment",
    "description": "Deletes a post or comment. Identify the item to delete by providing its fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Specifies the `fullname` of the item to delete."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_saved_filter_path",
    "description": "Deletes a specific saved filter path using its identifier string.",
    "parameters": {
      "type": "object",
      "properties": {
        "filterpath": {
          "type": "string",
          "description": "A string that uniquely identifies a saved filter path for deletion."
        }
      },
      "required": [
        "filterpath"
      ]
    }
  },
  {
    "name": "delete_subreddit_banner",
    "description": "Deletes the subreddit's banner image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "delete_subreddit_emoji",
    "description": "Removes an emoji with the provided name from a specified subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "The string representing the name of the subreddit."
        },
        "emoji_name": {
          "type": "string",
          "description": "A string specifying the name of the emoji to delete."
        }
      },
      "required": [
        "emoji_name",
        "subreddit"
      ]
    }
  },
  {
    "name": "delete_subreddit_header",
    "description": "Deletes the subreddit's header image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "delete_subreddit_icon",
    "description": "Deletes the subreddit's icon image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "delete_subreddit_stylesheet_image",
    "description": "Deletes a subreddit stylesheet image by its name or key.",
    "parameters": {
      "type": "object",
      "properties": {
        "img_name": {
          "type": "string",
          "description": "A string representing the name or key of the image to remove."
        }
      },
      "required": [
        "img_name"
      ]
    }
  },
  {
    "name": "delete_subreddit_widget",
    "description": "Deletes a specific widget.",
    "parameters": {
      "type": "object",
      "properties": {
        "widget_id": {
          "type": "string",
          "description": "A string identifier for the widget to be deleted."
        }
      },
      "required": [
        "widget_id"
      ]
    }
  },
  {
    "name": "delete_user_flair",
    "description": "Removes flair from a specific user. Provide the `name` parameter as a string representing the username whose flair is to be removed.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The string username whose flair is to be removed."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "disapprove_modmail_conversation",
    "description": "Disapprove a modmail conversation by providing its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "A string representing the ID of the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "distinguish_item",
    "description": "Distinguishes a moderator's post or comment. Specify the method of distinction using the 'how' parameter, such as 'yes', 'no', or 'admin'.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string identifier representing the full name of the item."
        },
        "how": {
          "type": "string",
          "description": "Specifies the method for distinguishing a post or comment. Valid distinction methods include \"yes\", \"no\", and \"admin\"."
        }
      },
      "required": [
        "how",
        "id"
      ]
    }
  },
  {
    "name": "edit_live_thread_settings",
    "description": "Updates the settings or title of a live thread. Provide the new description, which must not exceed 1000 characters.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The new description for the live thread. This optional string must not exceed 1000 characters."
        }
      }
    }
  },
  {
    "name": "edit_post_or_comment_text",
    "description": "Edits the text of an existing comment or self-post. Specify the item by its `thing_id` and provide the new content as raw markdown.",
    "parameters": {
      "type": "object",
      "properties": {
        "thing_id": {
          "type": "string",
          "description": "The fullname identifier for the post or comment to be edited."
        },
        "text": {
          "type": "string",
          "description": "The new text content for the comment or self-post, formatted in raw markdown."
        }
      },
      "required": [
        "text",
        "thing_id"
      ]
    }
  },
  {
    "name": "edit_wiki_page_content",
    "description": "Edits the content of a specified wiki page. Provide the page's name and the new content formatted in raw markdown.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page to be edited."
        },
        "content": {
          "type": "string",
          "description": "The new content for the wiki page, provided in raw markdown format."
        }
      },
      "required": [
        "content",
        "page"
      ]
    }
  },
  {
    "name": "find_duplicate_posts",
    "description": "Finds duplicate posts for a specified original post ID. It returns the original article ID and a list of duplicate posts upon success, or an error if the article ID is invalid or not found.",
    "parameters": {
      "type": "object",
      "properties": {
        "article": {
          "type": "string",
          "description": "The ID of the original post."
        }
      },
      "required": [
        "article"
      ]
    }
  },
  {
    "name": "follow_or_unfollow_post",
    "description": "Follows or unfollows a specified post to manage notification reception. Set a boolean parameter to true to follow or false to unfollow the post.",
    "parameters": {
      "type": "object",
      "properties": {
        "fullname": {
          "type": "string",
          "description": "A string representing the full name of the post."
        },
        "follow": {
          "type": "boolean",
          "description": "A boolean value that specifies whether to follow or unfollow the post. Set to `True` to follow, or `False` to unfollow."
        }
      },
      "required": [
        "follow",
        "fullname"
      ]
    }
  },
  {
    "name": "get_all_subreddit_emojis",
    "description": "Retrieves all emojis for a specified subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "Specifies the name of the subreddit."
        }
      },
      "required": [
        "subreddit"
      ]
    }
  },
  {
    "name": "get_all_subreddit_widgets",
    "description": "Retrieves all widgets configured for a subreddit. On successful retrieval, it returns a dictionary where the `widgets` key maps to a dictionary of widget IDs and their configurations. If no widgets are found, it returns `{\"error\": \"No widgets found.\"}`.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_wiki_pages",
    "description": "Retrieves a list of wiki page names for a subreddit. Returns an empty list if no wiki pages are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_all_wiki_revisions",
    "description": "Retrieve recent revisions for all wiki pages. The function returns a list of revision objects, each containing the page name, revision ID, author, timestamp, and revision reason.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_approved_submitters",
    "description": "Retrieves a list of approved submitter usernames from a subreddit. This list consists of strings and will be empty if no approved submitters are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_approved_wiki_contributors",
    "description": "Retrieves a list of approved wiki contributor usernames. This list will be empty if no contributors are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_banned_users",
    "description": "Retrieves a list of banned users within a subreddit. This function returns a list of banned user identifiers, or an empty list if no users are banned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_best_posts",
    "description": "Retrieves the best posts as ranked by the algorithm. Optionally, specify an `after` anchor for pagination and a `limit` to control the maximum number of posts returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "The fullname anchor used for pagination."
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of posts to return. This value must be between 1 and 100, inclusive."
        }
      }
    }
  },
  {
    "name": "get_collection_info",
    "description": "Retrieves information about a specific collection using its unique string identifier. Upon success, it returns a dictionary containing details such as the collection's title, the fullname of its associated subreddit, and a list of post fullnames. If the collection is not found, an error is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The unique string identifier for the collection."
        }
      },
      "required": [
        "collection_id"
      ]
    }
  },
  {
    "name": "get_controversial_posts",
    "description": "Retrieves posts that are currently controversial. It supports pagination using an `after` anchor and returns a dictionary containing a list of posts and the next pagination anchor. An invalid `after` value will result in an error.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "An optional string used as a fullname anchor for pagination."
        }
      }
    }
  },
  {
    "name": "get_default_subreddits",
    "description": "Retrieves a list of default subreddit names. Returns an empty list if no default subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_detailed_blocked_users",
    "description": "Retrieves a list of usernames that have been blocked by the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_detailed_friends_info",
    "description": "Retrieves detailed information about the authenticated user's friends, returned as a list of their usernames.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_edited_items",
    "description": "Retrieves recently edited posts or comments. Returns a list of dictionaries, where each entry provides the item's ID, author, subreddit, edit timestamp, and content.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_emoji_s3_upload_lease",
    "description": "Acquires and returns an upload lease for an S3 temporary bucket. This lease is a dictionary containing temporary credentials, the S3 URL, and the key required for uploading assets.",
    "parameters": {
      "type": "object",
      "properties": {
        "filepath": {
          "type": "string",
          "description": "The name and extension of the image file (e.g., \"image1.png\")."
        },
        "mimetype": {
          "type": "string",
          "description": "Specifies the MIME type of the image, such as `image/png`."
        }
      },
      "required": [
        "filepath",
        "mimetype"
      ]
    }
  },
  {
    "name": "get_featured_live_thread",
    "description": "Retrieves the currently featured live thread. The details of the thread are provided within a dictionary, accessible via the `featured_live_thread` key.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_flair_list",
    "description": "Retrieves a paginated list of users and their flair. The list can be navigated using a `fullname` anchor for pagination, filtered by a specific username, and constrained by a maximum number of users to return.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "Specifies the `fullname` string to use as a pagination anchor, indicating the starting point for retrieving the next set of results."
        },
        "name": {
          "type": "string",
          "description": "An optional string used to filter the list of users by username."
        },
        "limit": {
          "type": "integer",
          "description": "Specifies the maximum number of user entries to include in the returned list. This parameter is an integer."
        }
      }
    }
  },
  {
    "name": "get_flair_options",
    "description": "Retrieves available flair options for a link or user.",
    "parameters": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string",
          "description": "A string representing the fullname of the link."
        },
        "name": {
          "type": "string",
          "description": "The username, provided as an optional string."
        }
      }
    }
  },
  {
    "name": "get_global_announcements",
    "description": "Retrieves a list of global announcements. Each announcement is an object containing its `id`, `title`, `content`, and `created_at` timestamp.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_gold_subreddits",
    "description": "Retrieves the names of subreddits exclusive to gold members. Returns a list of these names, or an empty list if none are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_hot_posts",
    "description": "Retrieves hot posts from the front page. Optionally specify a `limit` to control the maximum number of posts returned. The `limit` must be between 1 and 100, inclusive, otherwise an error is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "The maximum number of posts to return. This value must be between 1 and 100, inclusive."
        }
      }
    }
  },
  {
    "name": "get_inbox_messages",
    "description": "Retrieves messages from the inbox. It returns a list of message objects, each containing an `id`, `to` recipient, `subject`, `text` body, and `timestamp`. An empty list is returned if no messages are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_items_info",
    "description": "Retrieves information about posts or comments. Provide either a comma-separated list of fullnames using the `id` parameter or a URL using the `url` parameter to identify the items.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A comma-separated list of fullnames."
        },
        "url": {
          "type": "string",
          "description": "A URL used to find posts or comments that reference it."
        }
      }
    }
  },
  {
    "name": "get_link_flair_templates",
    "description": "Retrieves version 2 link flair templates.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_link_flair_templates_legacy",
    "description": "Retrieve the legacy version of link flair templates.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_contributors",
    "description": "Retrieves the list of contributors for a live thread. It returns a list of contributor usernames or an empty list if no contributors are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_details",
    "description": "Retrieves details about a specific live thread, identified by its ID. It returns a dictionary containing the thread's ID and its detailed information.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "A string that represents the identifier for a specific live thread."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "get_live_thread_discussions",
    "description": "Retrieves discussion thread identifiers associated with a live thread, returning them as a list of strings.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_metadata",
    "description": "Retrieves metadata about a live thread. This function returns a dictionary where the thread metadata is stored under the key `about`.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_live_thread_update_details",
    "description": "Retrieves details for a specific live thread update, identified by its string `update_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_id": {
          "type": "string",
          "description": "The string ID of the update to retrieve."
        }
      },
      "required": [
        "update_id"
      ]
    }
  },
  {
    "name": "get_live_threads_by_id",
    "description": "Retrieves data for multiple live threads. Provide their fullnames as a comma-separated list.",
    "parameters": {
      "type": "object",
      "properties": {
        "names": {
          "type": "string",
          "description": "A string containing a comma-separated list of live thread fullnames."
        }
      },
      "required": [
        "names"
      ]
    }
  },
  {
    "name": "get_messages_by_mailbox",
    "description": "Retrieves messages from a specified mailbox category. Use the `where` parameter to define the category, such as \"inbox\" or \"sent\".",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "Specifies the mailbox category from which to retrieve messages. This string parameter must be a valid category name, such as \"inbox\" or \"sent\"."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_moderated_items_by_category",
    "description": "Retrieves moderated listings filtered by a specified moderation category, such as 'spam'.",
    "parameters": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "Specifies the moderation category for which to retrieve items. This parameter is a string, and an example value is 'spam'."
        }
      },
      "required": [
        "location"
      ]
    }
  },
  {
    "name": "get_moderation_log",
    "description": "Retrieves the moderation log for a subreddit. It returns a list of moderation log entries, where each entry is a dictionary containing the `id`, `action`, `moderator`, `target`, and `timestamp` of the action. An empty list is returned if no log entries exist.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_modmail_conversation_details",
    "description": "Retrieves details of a specific modmail conversation. On successful retrieval, it returns a dictionary containing the conversation ID, subject, messages, participants, and whether the conversation has been read.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The string ID that uniquely identifies the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "get_modmail_conversations",
    "description": "Retrieves a list of modmail conversations. It returns a dictionary containing the conversations, their total count, and the number of unread conversations. Raises a `ConversationNotFoundError` if no conversations are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_modqueue_items",
    "description": "Retrieves items pending moderator action. It returns a list of dictionaries, where each dictionary represents a pending item and includes its string ID, author, subreddit, item type (e.g., 'post' or 'comment'), and a boolean indicating if it was reported. Returns an empty list if no items are pending.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_more_comments",
    "description": "Retrieves additional comments for a parent post that were omitted by pagination. It requires a comma-separated list of specific child comment IDs to retrieve.",
    "parameters": {
      "type": "object",
      "properties": {
        "link_id": {
          "type": "string",
          "description": "A string representing the fullname of the parent post."
        },
        "children": {
          "type": "string",
          "description": "A string containing a comma-separated list of child comment IDs to retrieve."
        }
      },
      "required": [
        "children",
        "link_id"
      ]
    }
  },
  {
    "name": "get_multireddit_description",
    "description": "Retrieves the description of a specified multireddit. The function returns a dictionary containing the multireddit's description and path upon successful retrieval. It returns an error dictionary if the provided multireddit path is invalid or the multireddit does not exist.",
    "parameters": {
      "type": "object",
      "properties": {
        "multipath": {
          "type": "string",
          "description": "The multireddit path, provided as a string."
        }
      },
      "required": [
        "multipath"
      ]
    }
  },
  {
    "name": "get_muted_users",
    "description": "Retrieves a list of muted user identifiers for a subreddit. The list is empty if no users are muted.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_blocked_users",
    "description": "Retrieves a list of users blocked by the authenticated user. This function returns a list of strings, where each string represents a blocked username.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_contributor_subreddits",
    "description": "Retrieves the names of subreddits where the user is an approved contributor. This function returns a list of subreddit names, or an empty list if no such subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_friends",
    "description": "Retrieves a list of usernames for friends of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_identity",
    "description": "Retrieves the identity details of the currently authenticated user, including their username and unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_karma_breakdown",
    "description": "Retrieves the authenticated user's subreddit karma. This breakdown includes individual karma scores for each subreddit, specifying the subreddit's name and its points, alongside a total karma value.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_messaging_preferences",
    "description": "Retrieves the messaging preferences for the authenticated user. These preferences are returned as a dictionary, specifying whether private messages are allowed (`allow_pms`) and if email notifications are enabled (`email_notifications`).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_moderator_subreddits",
    "description": "Retrieves a list of names for subreddits where the current user is a moderator. Returns an empty list if no such subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_multireddits",
    "description": "Retrieves the authenticated user's multireddits. It returns a list of multireddit objects, where each object contains its name, path, a list of associated subreddits, and the creation timestamp. An empty list is returned if no multireddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_preferences",
    "description": "Retrieves the preference settings of the authenticated user. Optionally, specify a comma-separated list of `fields` to return; otherwise, all preferences are returned as a dictionary.",
    "parameters": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "string",
          "description": "A comma-separated list of specific preference fields to return. If this parameter is `None`, all available preferences are returned."
        }
      }
    }
  },
  {
    "name": "get_my_streaming_subreddits",
    "description": "Retrieves subreddits related to streaming content. It returns a list of subreddit names, or an empty list if no streaming subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_subreddits_by_category",
    "description": "Retrieves subreddits based on a specified category. The `category` must be a string, such as \"contributor\" or \"moderator\".",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category of subreddits to retrieve, such as \"contributor\" or \"moderator\"."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_my_subscribed_subreddits",
    "description": "Retrieves the names of subreddits the user is subscribed to. This function returns a list of strings, which will be an empty list if no subscribed subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_trophies",
    "description": "Retrieves the trophies (awards) earned by the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_my_trusted_users",
    "description": "Retrieves the list of users trusted by the authenticated user. This function returns a list of usernames, represented as strings.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_new_posts",
    "description": "Retrieves the newest posts. On successful retrieval, it returns a dictionary with the `listing_type` set to 'new' and a list of `items` representing the posts. If no new posts are available, a dictionary with an 'error' key and the value 'No new posts available.' is returned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_new_subreddits",
    "description": "Retrieves newly created subreddits. This function returns a list of strings, where each string represents a new subreddit name. An empty list is returned if no new subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_newest_users",
    "description": "Retrieves the newest registered users. Returns a list of new user identifiers, or an empty list if no new users are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_oauth_scopes",
    "description": "Retrieves all available OAuth scopes and their corresponding descriptions. The function returns a dictionary where the `scopes` key maps to another dictionary containing scope names as keys and their descriptions as string values.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_popular_subreddits",
    "description": "Retrieves popular subreddits. It returns a list of subreddit names, or an empty list if no popular subreddits are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_popular_users",
    "description": "Retrieves a list of popular user identifiers. Returns an empty list if no popular users are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_post_comments",
    "description": "Retrieves comments for a post. The post is identified by its article ID or slug.",
    "parameters": {
      "type": "object",
      "properties": {
        "article": {
          "type": "string",
          "description": "Represents the article's identifier, which can be either its ID or its slug."
        }
      },
      "required": [
        "article"
      ]
    }
  },
  {
    "name": "get_posts_by_id",
    "description": "Retrieves posts by their fullnames, provided as a comma-separated list.",
    "parameters": {
      "type": "object",
      "properties": {
        "names": {
          "type": "string",
          "description": "A comma-separated string containing the fullnames of posts to retrieve."
        }
      },
      "required": [
        "names"
      ]
    }
  },
  {
    "name": "get_preferences_by_category",
    "description": "Retrieves preference details for a specified category (e.g., 'blocked', 'friends'). The function returns a list of strings for 'blocked' and 'friends' categories, a dictionary for other categories, or a dictionary with an error message if the category is not found.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "A string that specifies the preference category to retrieve, such as \"blocked\" or \"friends\"."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_recent_moderator_notes_for_user",
    "description": "Retrieves recent moderator notes for a specified user within a given subreddit. The response includes the username, subreddit, and a list of notes, with each note detailing its ID, content, creation timestamp, and the creating moderator. An error is returned if the user or subreddit is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Specifies the username as a string for whom to retrieve notes."
        },
        "subreddit": {
          "type": "string",
          "description": "A string that identifies the specific subreddit for which moderator notes are to be retrieved."
        }
      },
      "required": [
        "subreddit",
        "user"
      ]
    }
  },
  {
    "name": "get_reported_items",
    "description": "Retrieves reported posts or comments. It returns a list of dictionaries, where each dictionary details a reported item with its ID, author, subreddit, report reason, and report count.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_rising_posts",
    "description": "Retrieve posts that are rapidly gaining popularity.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_saved_categories",
    "description": "Retrieves the user's saved categories. It returns a list of category objects, where each object is a dictionary.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_search",
    "description": "Searches for content based on a provided query string, which has a maximum length of 512 characters. Control the search results using additional parameters for filtering, sorting, pagination, and result type.",
    "parameters": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string",
          "description": "The search query string, limited to a maximum of 512 characters."
        },
        "after": {
          "type": "string",
          "description": "A cursor used for paginating results after a certain point. It defaults to None."
        },
        "before": {
          "type": "string",
          "description": "A string cursor used for paginating search results, retrieving items that appeared before the point indicated by this cursor. This cursor is typically the ID of the first item from a previous result set and defaults to `None`."
        },
        "category": {
          "type": "string",
          "description": "The category used to filter search results. This string parameter has a maximum length of 5 characters and defaults to `None`."
        },
        "count": {
          "type": "integer",
          "description": "Specifies the number of search results already processed or seen. This parameter must be a non-negative integer and defaults to `0`."
        },
        "include_facets": {
          "type": "boolean",
          "description": "Specifies whether to include facet information in the results; defaults to `False`."
        },
        "limit": {
          "type": "integer",
          "description": "Specifies the maximum number of search results to return. This value must be an integer between 1 and 100, inclusive. The default value is 25."
        },
        "restrict_sr": {
          "type": "boolean",
          "description": "A boolean flag that, when `True`, restricts search results exclusively to the current subreddit, if a subreddit context is available. Defaults to `False`."
        },
        "show": {
          "type": "string",
          "description": "A string used to filter search results by a specific type (e.g., 'all'). This parameter defaults to None."
        },
        "sort": {
          "type": "string",
          "description": "Specifies the sorting method for results. Valid options are 'relevance', 'hot', 'top', 'new', and 'comments'. This parameter defaults to 'relevance'."
        },
        "sr_detail": {
          "type": "boolean",
          "description": "A boolean flag that determines whether to include detailed information about the subreddit in the search results. This parameter defaults to `False`."
        },
        "t": {
          "type": "string",
          "description": "A time filter used specifically for 'top' or 'controversial' sorts. It accepts one of the following string values: 'hour', 'day', 'week', 'month', 'year', or 'all'. This parameter defaults to None."
        },
        "type": {
          "type": "string",
          "description": "A comma-separated string that specifies the types of content to search for. Valid types include 'sr', 'link', and 'user'. If omitted (set to `None`), the search will include all available content types."
        }
      },
      "required": [
        "q"
      ]
    }
  },
  {
    "name": "get_sent_messages",
    "description": "Retrieves messages from the sent folder. Each message is returned as an object containing its ID, recipient, subject, body, and timestamp.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_sorted_posts",
    "description": "Retrieves posts, sorted by a specified category. Valid categories include 'hot', 'new', and 'rising'.",
    "parameters": {
      "type": "object",
      "properties": {
        "sort": {
          "type": "string",
          "description": "The sorting category used to retrieve posts. Valid categories include `hot`, `new`, and `rising`."
        }
      },
      "required": [
        "sort"
      ]
    }
  },
  {
    "name": "get_spam_items",
    "description": "Retrieves items marked as spam. Each retrieved item is a dictionary that includes its ID, author, subreddit, the moderator who marked it as spam, and the timestamp.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_stickied_post_ids",
    "description": "Retrieves the identifiers of stickied posts. It returns a list of string IDs, which will be empty if no stickied posts are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_autocomplete_suggestions",
    "description": "Retrieves version 2 autocomplete suggestions for subreddits. It returns a list of suggested subreddit names, or an empty list if no suggestions are available.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_autocomplete_suggestions_legacy",
    "description": "Provides legacy autocomplete suggestions for subreddit names. Supply a partial subreddit name as input to receive a list of suggested subreddit names; an empty list is returned if the query is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A partial subreddit name used to generate autocomplete suggestions."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "get_subreddit_collections",
    "description": "Retrieves collections for a specific subreddit, identified by its unique fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "sr_fullname": {
          "type": "string",
          "description": "The unique string identifier, or 'fullname', of the target subreddit. This value specifies which subreddit's collections are to be retrieved."
        }
      },
      "required": [
        "sr_fullname"
      ]
    }
  },
  {
    "name": "get_subreddit_editing_settings",
    "description": "Retrieves the subreddit editing settings. Upon successful retrieval, it returns a dictionary containing the `edit_info`. If settings are not found, a dictionary with an `error` key is returned instead.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_info",
    "description": "Retrieves information for a specific subreddit, identified by its name. On success, it returns a dictionary containing the `subreddit` name and an `info` dictionary with its details; otherwise, it returns an `error` if the subreddit is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "Specifies the name of the subreddit."
        }
      },
      "required": [
        "subreddit"
      ]
    }
  },
  {
    "name": "get_subreddit_moderators",
    "description": "Retrieves a list of moderator usernames for a subreddit. This list will be empty if no moderators are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_post_requirements",
    "description": "Retrieves submission requirements for a given subreddit. The function returns a dictionary containing the subreddit's name and its post requirements, such as whether a title is required. If the subreddit is invalid, an error dictionary is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit": {
          "type": "string",
          "description": "A string representing the name of the subreddit."
        }
      },
      "required": [
        "subreddit"
      ]
    }
  },
  {
    "name": "get_subreddit_rules",
    "description": "Retrieves the moderation rules for a subreddit. Returns a list of rule objects, with each object being a dictionary containing the rule's short name, description, and creation timestamp. An empty list is returned if no rules are present.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_sidebar",
    "description": "Retrieves the sidebar content for the subreddit. On successful retrieval, it returns the content as a string; if the sidebar is empty, an empty string is returned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_stylesheet",
    "description": "Retrieves the subreddit's stylesheet code as a string. If no stylesheet is present, an empty string is returned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddit_submit_text",
    "description": "Retrieves the submission text (sidebar text) for a specified subreddit. On success, it returns a dictionary containing the subreddit name and its submission text. If the subreddit is invalid, the response includes an 'error' key with the message \"Invalid subreddit.\".",
    "parameters": {
      "type": "object",
      "properties": {
        "sr": {
          "type": "string",
          "description": "The string representing the name of the subreddit."
        }
      },
      "required": [
        "sr"
      ]
    }
  },
  {
    "name": "get_subreddit_traffic_stats",
    "description": "Retrieves traffic statistics for a subreddit. This function returns a dictionary containing a list of traffic statistics upon success or an error message if statistics are unavailable.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_subreddits_by_category",
    "description": "Retrieves subreddits based on a specified category. Provide the category as a string, such as 'popular' or 'new'.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category used to retrieve subreddits, such as \"popular\" or \"new\"."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_top_posts",
    "description": "Retrieves the top posts, optionally filtered by a specified timeframe such as \"day\" or \"week\". It returns a dictionary containing the listing type, timeframe, and the list of posts, or an error if the timeframe is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "description": "Specifies the timeframe for retrieving the top posts, such as 'day' or 'week'."
        }
      }
    }
  },
  {
    "name": "get_unmoderated_items",
    "description": "Retrieves posts or comments that are unmoderated.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_unread_announcements",
    "description": "Retrieves a list of announcements not yet read by the user. Each announcement in the list is an object containing its unique identifier, title, content, and creation timestamp.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_unread_messages",
    "description": "Retrieves unread messages from the inbox. Returns a list of message objects, each structured as a dictionary containing `id`, `to`, `subject`, `text`, and `timestamp`. An empty list is returned if no unread messages are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_unread_modmail_conversation_count",
    "description": "Retrieves the count of unread modmail conversations. It returns a dictionary containing the 'count' (integer) of unread conversations and a 'last_updated' (string) timestamp.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_comments",
    "description": "Retrieves comments made by a user. It returns a list of comment objects, each containing the comment ID, body text, creation timestamp, and the subreddit name. An empty list is returned if no comments are found or the username is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "A string representing the username."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_content_by_category",
    "description": "Retrieves user content for a specified category, such as 'overview' or 'comments'.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category of user content to retrieve, such as `overview` or `comments`."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_user_data_by_account_ids",
    "description": "Retrieves user data for specified account IDs. Provide account IDs as a comma-separated string.",
    "parameters": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "string",
          "description": "Provides account identifiers. These must be supplied as a comma-separated list of IDs."
        }
      },
      "required": [
        "ids"
      ]
    }
  },
  {
    "name": "get_user_downvoted_posts",
    "description": "Retrieves a list of identifiers for posts downvoted by a user, returning an empty list if none are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_flair_templates",
    "description": "Retrieves all user flair templates for a subreddit. This operation uses the v2 API.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_flair_templates_legacy",
    "description": "Retrieves all legacy user flair templates for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_gilded_posts",
    "description": "Retrieves gilded posts for a user. This function returns a list of gilded post identifiers, which will be empty if no gilded posts are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_hidden_posts",
    "description": "Retrieves hidden posts for a user. It returns a list of hidden post identifiers, or an empty list if none are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_overview",
    "description": "Retrieves an overview of a user's submissions and comments. It returns a list of dictionaries, where each entry represents either a submission or a comment and includes its ID, type (submission or comment), creation timestamp, and associated subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_profile_info",
    "description": "Retrieves profile information for a user. On successful retrieval, it returns a dictionary containing the profile data along with a `status` of \"ok\". If the user is not found, it returns a dictionary with a `status` of \"not_found\".",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username, provided as a string."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_public_multireddits",
    "description": "Retrieves public multireddits for a specified user. It returns a list of multireddit objects, where each object includes the multireddit's name, path, list of subreddits, and creation timestamp. An empty list is returned if the username is invalid or the user has no public multireddits.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The string representing the username for which public multireddits are requested."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_saved_posts",
    "description": "Retrieves posts saved by a user. This function returns a list of saved post identifiers, or an empty list if no posts are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_submitted_posts",
    "description": "Retrieves identifiers for posts submitted by a user. It returns a list of strings, which will be empty if no posts are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_user_trophies",
    "description": "Retrieves trophies for a specified user. It returns a dictionary containing the target `username` and a list of `trophies`, each detailed with a `name`, `description`, and `icon_url`. An `error` is returned if the username is invalid.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The target username, provided as a string, for which to retrieve trophies."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "get_user_upvoted_posts",
    "description": "Retrieves a list of identifiers for posts upvoted by a user. An empty list is returned if no upvoted posts are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_users_by_category",
    "description": "Retrieves user lists based on a specified category, such as \"banned\" or \"moderators.\" On success, it returns a dictionary containing the requested category and a list of user identifiers; an \"error\" is returned for invalid categories.",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "The category of user lists to retrieve, such as 'banned' or 'moderators'."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_users_by_list_category",
    "description": "Retrieves users based on a specified category, such as \"new\" or \"popular\".",
    "parameters": {
      "type": "object",
      "properties": {
        "where": {
          "type": "string",
          "description": "Specifies the user category. This string parameter takes values like 'new' or 'popular'."
        }
      },
      "required": [
        "where"
      ]
    }
  },
  {
    "name": "get_widget_image_s3_upload_lease",
    "description": "Acquires and returns an upload lease for widget image uploads to a temporary S3 bucket. This lease provides the necessary temporary S3 credentials, an S3 upload URL, and a specific upload key.",
    "parameters": {
      "type": "object",
      "properties": {
        "filepath": {
          "type": "string",
          "description": "Specifies the name and extension of the image file, such as 'widget.png'."
        },
        "mimetype": {
          "type": "string",
          "description": "The MIME type of the image, such as `image/png`."
        }
      },
      "required": [
        "filepath",
        "mimetype"
      ]
    }
  },
  {
    "name": "get_wiki_banned_users",
    "description": "Retrieves a list of users banned from wiki edits. This function returns a list of string identifiers for each banned user, providing an empty list if no users are currently banned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_wiki_page_content",
    "description": "Retrieves the content of a specified wiki page. On success, it returns a dictionary containing the page name and its content in raw markdown. If the page is not found or is invalid, a dictionary with an \"error\" key is returned, indicating the specific issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "A string representing the name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "get_wiki_page_discussions",
    "description": "Retrieves discussion links for a specified wiki page. It returns these links as a list of discussion objects, with each object providing the discussion ID, title, and creation timestamp.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page used to retrieve related discussion links."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "get_wiki_page_revisions",
    "description": "Retrieves revisions for a specific wiki page, identified by its name. Each retrieved revision includes its ID, author, timestamp, and a reason for the change.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "A string representing the name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "get_wiki_page_settings",
    "description": "Retrieves the settings for a specific wiki page. The returned dictionary contains the page name and a `settings` key, which holds a dictionary detailing `listed` status, `permlevel`, and `editors`.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The string representing the name of the wiki page."
        }
      },
      "required": [
        "page"
      ]
    }
  },
  {
    "name": "hide_announcements",
    "description": "Hides one or more announcements from the authenticated user's feed, using a list of announcement IDs to identify them.",
    "parameters": {
      "type": "object",
      "properties": {
        "announcement_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings, where each string represents an announcement ID to hide."
        }
      },
      "required": [
        "announcement_ids"
      ]
    }
  },
  {
    "name": "hide_live_thread_discussion",
    "description": "Hides the discussion thread associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "hide_posts",
    "description": "Hides one or more posts from the user's front page. Specify the posts to hide by providing a list of their fullnames.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings, where each string represents the fullname of a post to be hidden."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "hide_wiki_page_revision",
    "description": "Hides a specific revision, identified by its ID, from a specified wiki page's history.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page for which a revision is to be hidden."
        },
        "revision": {
          "type": "string",
          "description": "The revision ID to hide."
        }
      },
      "required": [
        "page",
        "revision"
      ]
    }
  },
  {
    "name": "ignore_item_reports",
    "description": "Ignores future reports for a specified item, identified by its full name.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string representing the full name of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "invite_live_thread_contributor",
    "description": "Invites a new contributor to a live thread by specifying their username.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the invitee."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "leave_contributor_status",
    "description": "Removes the current user from their contributor status. This action ensures the user is no longer recognized as a contributor.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "leave_live_thread_contributor_role",
    "description": "Removes contributor status from the current user. Upon success, it returns a dictionary with a `status` of 'left_as_contributor'; otherwise, a `ValueError` is raised if the user is not a contributor.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "leave_moderator_status",
    "description": "Removes the current user from moderator status.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_modmail_accessible_subreddits",
    "description": "Lists subreddits accessible via modmail, returning them as a list of subreddit names. If no subreddits are accessible, an empty list is returned.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "lock_item",
    "description": "Locks a post or comment. This action prevents any further replies to it.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Specifies the fullname of the item to lock."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_all_announcements_as_read",
    "description": "Marks all global announcements as read.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "mark_all_messages_as_read",
    "description": "Marks all messages in the inbox as read.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "mark_announcements_as_read",
    "description": "Marks one or more announcements as read by accepting a list of their IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "announcement_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of announcement IDs to mark as read."
        }
      },
      "required": [
        "announcement_ids"
      ]
    }
  },
  {
    "name": "mark_messages_as_read",
    "description": "Marks the messages specified by a list of IDs as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs, where each ID is a string."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_messages_as_unread",
    "description": "Marks specified messages as unread. Provide a list of message IDs, where each ID is a string.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message identifiers, where each identifier is a string."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_modmail_conversations_as_read",
    "description": "Marks specified modmail conversations as read by providing a list of their string identifiers.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings, where each string represents a modmail conversation ID."
        }
      },
      "required": [
        "conversation_ids"
      ]
    }
  },
  {
    "name": "mark_modmail_conversations_as_unread",
    "description": "Marks specified modmail conversations as unread. This function takes a list of string conversation IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs, where each ID is a string."
        }
      },
      "required": [
        "conversation_ids"
      ]
    }
  },
  {
    "name": "mark_post_nsfw",
    "description": "Marks a post as Not Safe For Work (NSFW). Provide the fullname of the post using the `id` parameter.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Specifies the fullname of the post. This parameter must be provided as a string."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mark_post_spoiler",
    "description": "Marks a post as containing spoilers, identifying it by its fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the post, provided as a string."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "mute_user_in_modmail_conversation",
    "description": "Mutes the user in a modmail conversation using its unique conversation ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The string identifier for the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "perform_wiki_editor_action",
    "description": "Performs an action to add or remove a wiki editor. Use 'add' to add an editor or 'del' to remove one.",
    "parameters": {
      "type": "object",
      "properties": {
        "act": {
          "type": "string",
          "description": "A string that specifies the action to modify wiki editors. It must be either 'add' to grant editor permissions or 'del' to remove them."
        }
      },
      "required": [
        "act"
      ]
    }
  },
  {
    "name": "recommend_related_subreddits",
    "description": "Suggests related subreddits by taking a comma-separated list of subreddit names.",
    "parameters": {
      "type": "object",
      "properties": {
        "srnames": {
          "type": "string",
          "description": "A string containing multiple subreddit names. These names must be separated by commas."
        }
      },
      "required": [
        "srnames"
      ]
    }
  },
  {
    "name": "remove_friend",
    "description": "Removes a friend relationship for a specified username and relationship type. Provide the username of the individual to unfriend and the type of relationship to remove (e.g., \"friend\").",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A string representing the username of the user to unfriend."
        },
        "type": {
          "type": "string",
          "description": "Specifies the type of relationship to remove, such as 'friend'."
        }
      },
      "required": [
        "name",
        "type"
      ]
    }
  },
  {
    "name": "remove_friend_by_username",
    "description": "Removes a friend relationship for a specified username.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username (string) of the friend to remove."
        }
      },
      "required": [
        "username"
      ]
    }
  },
  {
    "name": "remove_item",
    "description": "Removes a post or comment. Provide the `id` parameter as the fullname of the item to remove. Optionally, set the `spam` parameter to `True` to mark the item as spam.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A string representing the fullname of the item to remove."
        },
        "spam": {
          "type": "boolean",
          "description": "A boolean flag that indicates whether the item should be marked as spam. If omitted, the item is not marked as spam."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "remove_live_thread_contributor",
    "description": "Removes a contributor from a live thread by their username.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A string representing the username of the contributor to remove."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "remove_modmail_conversation_highlight",
    "description": "Removes a highlight marker from a modmail conversation. This action requires providing the `conversation_id` as a string, which identifies the specific conversation to modify.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The unique identifier for the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "remove_post_from_collection",
    "description": "Removes a specified post from an identified collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "link_fullname": {
          "type": "string",
          "description": "The string representing the fullname of the post to remove."
        },
        "collection_id": {
          "type": "string",
          "description": "The string identifier for the collection."
        }
      },
      "required": [
        "collection_id",
        "link_fullname"
      ]
    }
  },
  {
    "name": "remove_subreddit_from_filter_path",
    "description": "Removes a subreddit from a saved filter path. Specify the unique identifier for the filter path and the name of the subreddit to remove.",
    "parameters": {
      "type": "object",
      "properties": {
        "filterpath": {
          "type": "string",
          "description": "A string that identifies a specific filter path."
        },
        "srname": {
          "type": "string",
          "description": "The name of the subreddit to remove from the specified filter path."
        }
      },
      "required": [
        "filterpath",
        "srname"
      ]
    }
  },
  {
    "name": "remove_subreddit_from_multireddit",
    "description": "Removes the specified subreddit (`srname`) from the designated multireddit path (`multipath`).",
    "parameters": {
      "type": "object",
      "properties": {
        "multipath": {
          "type": "string",
          "description": "The string path used to identify a specific multireddit."
        },
        "srname": {
          "type": "string",
          "description": "The name of the subreddit to be removed from the multireddit."
        }
      },
      "required": [
        "multipath",
        "srname"
      ]
    }
  },
  {
    "name": "remove_wiki_page_editor",
    "description": "Removes a specified user from the editors list of a given wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "Specifies the name of the wiki page."
        },
        "username": {
          "type": "string",
          "description": "Specifies the username of the editor to be removed."
        }
      },
      "required": [
        "page",
        "username"
      ]
    }
  },
  {
    "name": "reorder_collection_posts",
    "description": "Reorders the posts within a collection. This reordering is achieved by specifying the desired sequence of post link IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The string identifier of the collection."
        },
        "link_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of string identifiers for links, which defines the new order for posts within the collection."
        }
      },
      "required": [
        "collection_id",
        "link_ids"
      ]
    }
  },
  {
    "name": "reorder_flair_templates",
    "description": "Reorders existing flair templates for either user flair or link flair. The new order is specified by an ordered list of template IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_type": {
          "type": "string",
          "description": "Specifies the flair type, which must be either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "template_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An ordered list of flair template IDs, used to define their sequence."
        }
      },
      "required": [
        "flair_type",
        "template_ids"
      ]
    }
  },
  {
    "name": "reorder_subreddit_widgets",
    "description": "Reorders widgets within a specified section by accepting an ordered list of widget IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "section": {
          "type": "string",
          "description": "A string identifying the section, such as 'sidebar'."
        },
        "ordered_widgets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of widget IDs. The sequence of IDs in this list determines their final order."
        }
      },
      "required": [
        "ordered_widgets",
        "section"
      ]
    }
  },
  {
    "name": "report_item",
    "description": "Reports a post or comment for review. Provide the fullname of the item to report and optionally include a short explanation for the report.",
    "parameters": {
      "type": "object",
      "properties": {
        "thing_id": {
          "type": "string",
          "description": "The fullname of the item to be reported."
        },
        "reason": {
          "type": "string",
          "description": "An optional, short string providing additional context or explanation for the report."
        }
      },
      "required": [
        "thing_id"
      ]
    }
  },
  {
    "name": "report_live_thread",
    "description": "Reports a live thread for rule violations, identified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread": {
          "type": "string",
          "description": "The ID of the live thread. This parameter expects a string value."
        }
      },
      "required": [
        "thread"
      ]
    }
  },
  {
    "name": "report_user",
    "description": "Reports a specified user. Provide the username of the user to be reported and optionally include a reason for the report.",
    "parameters": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "The string representation of the username to report."
        },
        "reason": {
          "type": "string",
          "description": "An optional string specifying the reason for reporting the user."
        }
      },
      "required": [
        "user"
      ]
    }
  },
  {
    "name": "revert_wiki_page_to_revision",
    "description": "Reverts a wiki page to a previous revision. Specify the page name and the target revision ID for the revert operation.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "revision": {
          "type": "string",
          "description": "The revision ID to which the wiki page should be reverted."
        }
      },
      "required": [
        "page",
        "revision"
      ]
    }
  },
  {
    "name": "revoke_live_thread_contributor_invite",
    "description": "Revokes a pending contributor invite identified by the specified username.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the contributor invite to revoke."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "save_item",
    "description": "Saves a post or comment to the user's saved list. The item is identified by its `fullname`.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A string specifying the fullname of the item to save."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "search_subreddit_names",
    "description": "Checks for subreddit name availability or suggests names based on a provided search query.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A string representing the search term for subreddit names."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_subreddits_by_name_or_topic",
    "description": "Searches for subreddits by name or topic.",
    "parameters": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string",
          "description": "A string representing the search query."
        }
      },
      "required": [
        "q"
      ]
    }
  },
  {
    "name": "search_subreddits_by_title_description",
    "description": "Searches for subreddits. The search is performed by matching against the subreddit's title and description fields.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A string containing one or more keywords used to search for subreddits."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "search_users_by_name",
    "description": "Searches for users by name. On success, returns a list of matching user identifiers, or an empty list if no matches are found.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "select_link_flair",
    "description": "Applies a link flair template, specified by its ID, to a post, identified by its fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string",
          "description": "Specifies the fullname of the post. This string identifies the target post for flair application."
        },
        "flair_template_id": {
          "type": "string",
          "description": "The ID of the link flair template."
        }
      },
      "required": [
        "flair_template_id",
        "link"
      ]
    }
  },
  {
    "name": "set_flair_enabled_status",
    "description": "Enables or disables flair in a subreddit. Set the `flair_enabled` parameter to `True` to enable or `False` to disable. The `api_type` parameter must be \"json\".",
    "parameters": {
      "type": "object",
      "properties": {
        "api_type": {
          "type": "string",
          "description": "The API type. This parameter must be the string `\"json\"`."
        },
        "flair_enabled": {
          "type": "boolean",
          "description": "A boolean value that controls the flair status. Set to `True` to enable flair, or `False` to disable it."
        }
      },
      "required": [
        "api_type",
        "flair_enabled"
      ]
    }
  },
  {
    "name": "set_live_thread_contributor_permissions",
    "description": "Updates permissions for an existing contributor, identified by their username.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The username of the contributor, provided as a string."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "set_post_contest_mode",
    "description": "Enables or disables contest mode for a post, using a boolean state and the post's ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "state": {
          "type": "boolean",
          "description": "A boolean value that controls contest mode. Set to `True` to enable contest mode, or `False` to disable it."
        },
        "id": {
          "type": "string",
          "description": "The fullname that identifies the post."
        }
      },
      "required": [
        "id",
        "state"
      ]
    }
  },
  {
    "name": "set_post_sticky_status",
    "description": "Sets the sticky status of a post in a subreddit. Specify `True` to sticky or `False` to unsticky, along with the post's full name and an optional sticky slot number.",
    "parameters": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "description": "An optional integer that represents the sticky slot number."
        },
        "state": {
          "type": "boolean",
          "description": "A boolean value indicating the desired sticky state for the post. Set to `True` to make the post sticky, or `False` to unsticky it."
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for the post, specified as its fullname."
        }
      },
      "required": [
        "id",
        "state"
      ]
    }
  },
  {
    "name": "set_post_suggested_sort",
    "description": "Sets the suggested comment sort order for a post, using options like 'top' or 'new'.",
    "parameters": {
      "type": "object",
      "properties": {
        "sort": {
          "type": "string",
          "description": "Specifies the desired sort order for comments. It is an optional string that accepts values such as \"top\" or \"new\"."
        },
        "id": {
          "type": "string",
          "description": "The fullname used to identify the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "set_subreddit_emoji_custom_size",
    "description": "Sets a custom display size for a subreddit emoji by specifying its `width` and `height` in pixels.",
    "parameters": {
      "type": "object",
      "properties": {
        "emoji_name": {
          "type": "string",
          "description": "A string representing the name of the emoji."
        },
        "width": {
          "type": "integer",
          "description": "Specifies the desired width for the emoji. This value is expressed in pixels."
        },
        "height": {
          "type": "integer",
          "description": "Specifies the desired height. This value is provided in pixels."
        }
      },
      "required": [
        "emoji_name",
        "height",
        "width"
      ]
    }
  },
  {
    "name": "set_user_flair",
    "description": "Sets or updates a user's flair for the specified username. The `api_type` parameter must be \"json\". Flair can be defined using a `flair_template_id` or custom `text` if a template is not applied.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_type": {
          "type": "string",
          "description": "The API type parameter, which must be set to 'json'."
        },
        "name": {
          "type": "string",
          "description": "The username for which to set flair."
        },
        "flair_template_id": {
          "type": "string",
          "description": "Specifies the ID of a flair template. This optional string parameter is used when applying a predefined flair template to a user's flair."
        },
        "text": {
          "type": "string",
          "description": "The custom flair text to use when a `flair_template_id` is not provided."
        }
      },
      "required": [
        "api_type",
        "name"
      ]
    }
  },
  {
    "name": "set_user_flairs_via_csv",
    "description": "Processes a CSV-formatted string containing flair data to set multiple user flairs.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_csv": {
          "type": "string",
          "description": "A string containing flair data, formatted according to the CSV standard."
        }
      },
      "required": [
        "flair_csv"
      ]
    }
  },
  {
    "name": "set_user_permissions",
    "description": "Sets permissions for a specified user. Permissions must be provided as an optional list of strings.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A string representing the username for whom to set permissions."
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An optional list of strings specifying the permissions to grant."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  {
    "name": "show_removed_comment",
    "description": "Re-approves a comment that was previously removed, making it visible again.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string representing the fullname of the comment."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "snooze_item_reports",
    "description": "Snoozes reports for a specific item, identified by its fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Provides the full name of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "store_recent_visits",
    "description": "Stores a record of the user's recent post or comment visits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "strike_live_thread_update",
    "description": "Marks a specified live thread update as erroneous. Provide the unique ID of the update to be marked.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string identifier for the live thread update to be marked as erroneous."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "submit_comment",
    "description": "Submits a new comment or reply to a message. It requires the fullname of the parent post or comment and the comment text in raw markdown.",
    "parameters": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "The `fullname` of the existing parent post or comment to which the new comment will be attached."
        },
        "text": {
          "type": "string",
          "description": "The comment text, which must be provided in raw markdown format and cannot be empty."
        }
      },
      "required": [
        "parent",
        "text"
      ]
    }
  },
  {
    "name": "submit_post",
    "description": "Submits a new post to a specified subreddit. The post can be a 'link' type, which requires a URL, or a 'self' (text) type, which requires a text body. Both post types require a title.",
    "parameters": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Specifies the type of post. It must be 'link' for a URL submission or 'self' for a text-only post."
        },
        "sr": {
          "type": "string",
          "description": "The name (string) of the subreddit where the post will be submitted. This subreddit must exist."
        },
        "title": {
          "type": "string",
          "description": "The title for the new post. This parameter must be a non-empty string."
        },
        "text": {
          "type": "string",
          "description": "The text body for a self-post. This parameter is required when `kind` is \"self\"."
        },
        "url": {
          "type": "string",
          "description": "The URL for a link post. This parameter is required when the `kind` parameter is set to 'link'."
        },
        "nsfw": {
          "type": "boolean",
          "description": "Indicates whether the post content is Not Safe For Work. This parameter defaults to `False`."
        },
        "spoiler": {
          "type": "boolean",
          "description": "A boolean value indicating if the post contains spoilers. This parameter defaults to `False`."
        }
      },
      "required": [
        "kind",
        "sr",
        "title"
      ]
    }
  },
  {
    "name": "subscribe_or_unsubscribe_subreddit",
    "description": "Subscribes or unsubscribes a user from a specified subreddit. The desired operation is controlled by an `action` parameter, which must be 'sub' to subscribe or 'unsub' to unsubscribe.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Specifies the action to perform: 'sub' to subscribe or 'unsub' to unsubscribe."
        },
        "sr_name": {
          "type": "string",
          "description": "Specifies the name of the subreddit."
        }
      },
      "required": [
        "action",
        "sr_name"
      ]
    }
  },
  {
    "name": "temp_ban_user_via_modmail",
    "description": "Initiates a temporary ban for a user. This action is performed through the modmail system.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "Identifies a modmail conversation by its ID."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "toggle_item_replies",
    "description": "Enables or disables replies for a specified post or comment. Provide the item's unique identifier and a boolean value to set the reply state (True to enable, False to disable).",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item, which can be a post or a comment, provided as a string identifier."
        },
        "state": {
          "type": "boolean",
          "description": "A boolean value that controls the reply state. Set to `True` to enable replies, or `False` to disable them."
        }
      },
      "required": [
        "id",
        "state"
      ]
    }
  },
  {
    "name": "unarchive_modmail_conversation",
    "description": "Unarchives a specific modmail conversation using its `conversation_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "Specifies the ID of a modmail conversation. This identifier is provided as a string."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "unban_user_via_modmail",
    "description": "Revokes a ban that was previously issued through a specific modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The string ID that uniquely identifies a modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "unblock_subreddit_messaging",
    "description": "Unblock a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "uncollapse_messages",
    "description": "Uncollapses one or more messages in the inbox by providing a list of their unique IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings, where each string identifies a message."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unhide_live_thread_discussion",
    "description": "Unhides the discussion thread associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "unhide_posts",
    "description": "Unhides posts that were previously hidden. Specify posts to unhide using a list of their fullnames.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of strings, where each string represents a post fullname, used to unhide posts."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unignore_item_reports",
    "description": "Stop ignoring reports on a specific item. The item is identified by its `id` parameter, which must be the item's `fullname`.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique string identifier that represents the full name of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unlock_item",
    "description": "Unlocks a previously locked post or comment. The `id` parameter specifies the fullname of the item to unlock.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Specifies the fullname of the item."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unmark_post_nsfw",
    "description": "Removes the NSFW tag from a post, identified by its fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A string representing the fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unmark_post_spoiler",
    "description": "Removes the spoiler tag from a post, identified by its unique fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A string representing the fullname of the post."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unmute_user_in_modmail_conversation",
    "description": "Unmutes a user within a specified modmail conversation, identified by its `conversation_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string",
          "description": "The string identifier for the modmail conversation."
        }
      },
      "required": [
        "conversation_id"
      ]
    }
  },
  {
    "name": "unsave_item",
    "description": "Unsaves a post or comment identified by its fullname.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname string identifier of the item to be unsaved."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "unsnooze_item_reports",
    "description": "Unsnoozes reports for a given item, resuming its notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The full name of the item to be unsnoozed."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "update_collection_description",
    "description": "Updates the description of a collection. The new description must not exceed 500 characters in length.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "The identifier for a collection. It is a UUID string."
        },
        "description": {
          "type": "string",
          "description": "The new description text for the collection. This string cannot exceed 500 characters in length."
        }
      },
      "required": [
        "collection_id",
        "description"
      ]
    }
  },
  {
    "name": "update_collection_display_layout",
    "description": "Updates the display layout of a collection. The new layout style, such as GALLERY or TIMELINE, determines how the collection's content is presented.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "A string that uniquely identifies the collection to be updated."
        },
        "display_layout": {
          "type": "string",
          "description": "The new layout style for the collection, such as `GALLERY` or `TIMELINE`."
        }
      },
      "required": [
        "collection_id",
        "display_layout"
      ]
    }
  },
  {
    "name": "update_collection_title",
    "description": "Changes the title of a collection. It identifies the target collection using its `collection_id` and updates it with the provided new `title`.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id": {
          "type": "string",
          "description": "Specifies the unique string identifier for the collection."
        },
        "title": {
          "type": "string",
          "description": "Specifies the new title for the collection."
        }
      },
      "required": [
        "collection_id",
        "title"
      ]
    }
  },
  {
    "name": "update_my_preferences",
    "description": "Updates the preference settings for the authenticated user. It accepts a dictionary of new preference fields and returns a dictionary containing the updated preferences and the operation's status.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_preferences": {
          "type": "object",
          "properties": {},
          "description": "A dictionary containing the preference fields to update. Keys specify the preference names, and values are their new settings."
        }
      },
      "required": [
        "new_preferences"
      ]
    }
  },
  {
    "name": "update_post_crowd_control_level",
    "description": "Updates the crowd control level for a post, identified by its full name. The `level` parameter must be an integer between 0 and 3.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname string identifying the post to be updated."
        },
        "level": {
          "type": "integer",
          "description": "The new crowd control level for the post. This integer value must be between 0 and 3, inclusive."
        }
      },
      "required": [
        "id",
        "level"
      ]
    }
  },
  {
    "name": "update_subreddit_stylesheet",
    "description": "Updates the subreddit's stylesheet. This operation typically requires the 'save' action along with the new stylesheet code.",
    "parameters": {
      "type": "object",
      "properties": {
        "op": {
          "type": "string",
          "description": "The operation to be performed, typically `save`."
        },
        "stylesheet_contents": {
          "type": "string",
          "description": "A string containing the new stylesheet code used to update the subreddit's stylesheet."
        }
      },
      "required": [
        "op",
        "stylesheet_contents"
      ]
    }
  },
  {
    "name": "upload_subreddit_stylesheet_image",
    "description": "Uploads an image for a subreddit's stylesheet, requiring a specific name/key and the image file data.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name or key used to identify the image uploaded to the subreddit's stylesheet."
        },
        "file": {
          "type": "object",
          "properties": {},
          "description": "The image file data, provided as a dictionary."
        }
      },
      "required": [
        "file",
        "name"
      ]
    }
  },
  {
    "name": "vote_on_item",
    "description": "Casts or revokes a vote on a post or comment. Specify the vote direction as -1 for a downvote, 0 to remove a vote, or +1 for an upvote.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "dir": {
          "type": "integer",
          "description": "Specifies the vote direction as an integer. Use -1 for a downvote, 0 to remove an existing vote, or +1 for an upvote."
        }
      },
      "required": [
        "dir",
        "id"
      ]
    }
  }
]