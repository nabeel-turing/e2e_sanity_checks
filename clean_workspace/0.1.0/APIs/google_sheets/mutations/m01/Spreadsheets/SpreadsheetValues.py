# This file is automatically generated by the MutationBuilder

def fetch_cell_data(
    target_workbook_id,
    cell_selection_a1,
    data_orientation='ROWS',
    value_display_format='FORMATTED_VALUE',
    datetime_display_format='FORMATTED_STRING'
):
    """
    Gets values from a specific range in a spreadsheet.

    Args:
        target_workbook_id (str): The ID of the spreadsheet to retrieve values from.
        cell_selection_a1 (str): The A1 notation of the range to retrieve values from.
        data_orientation (str): The major dimension that results should use.
            If not specified, defaults to "ROWS". Valid values: "ROWS", "COLUMNS".
        value_display_format (str): How values should be rendered in the output.
            If not specified, defaults to "FORMATTED_VALUE". Valid values:
            "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA".
        datetime_display_format (str): How dates, times, and durations should be rendered.
            If not specified, defaults to "FORMATTED_STRING". Valid values:
            "SERIAL_NUMBER", "FORMATTED_STRING".

    Returns:
        Dict[str, Any]: A dictionary containing:
            - range (str): The A1 notation of the range that was retrieved. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
            - majorDimension (str): The major dimension of the values
            - values (List[List[Any]]): The retrieved values

    Raises:
        TypeError: In the following cases:
            - If `target_workbook_id` is not a string.
            - If `cell_selection_a1` is not a string.
            - If `data_orientation` is not a string.
            - If `value_display_format` is not a string.
            - If `datetime_display_format` is not a string.
        ValueError: In the following cases:
            - If `data_orientation`, `value_display_format`, or `datetime_display_format` is provided with an unsupported value.
            - If the spreadsheet is not found (propagated from core logic).
            - If the `cell_selection_a1` argument is invalid (e.g., fails A1RangeInput validation).
            - If the cell_selection_a1 doesn't have an explicit sheet name and the default sheet is not "Sheet1".
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import get
    return get(
        spreadsheet_id=target_workbook_id,
        range=cell_selection_a1,
        majorDimension=data_orientation,
        valueRenderOption=value_display_format,
        dateTimeRenderOption=datetime_display_format
    )


def modify_cell_contents(
    workbook_identifier,
    target_range_a1_notation,
    data_interpretation_mode,
    new_cell_data,
    return_updated_data=False,
    response_value_rendering_style='FORMATTED_VALUE',
    response_datetime_rendering_style='SERIAL_NUMBER'
):
    """
    Updates values in a specific range of a spreadsheet.

    Args:
        workbook_identifier (str): The ID of the spreadsheet to update.
        target_range_a1_notation (str): The A1 notation of the range to append values to. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
        data_interpretation_mode (str): How the input data should be interpreted.
            Valid values: "RAW" (values inserted as-is) or
            "USER_ENTERED" (values parsed as if entered by user).
        new_cell_data (List[List[Any]]): The values to update in the range. Each inner list represents a row.
        return_updated_data (bool): Whether to include the updated values in the response. Defaults to False.
        response_value_rendering_style (str): How values should be rendered in the response. Defaults to "FORMATTED_VALUE".
            Valid values: "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA".
        response_datetime_rendering_style (str): How dates, times, and durations should be rendered in the response. Defaults to "SERIAL_NUMBER".
            Valid values: "SERIAL_NUMBER", "FORMATTED_STRING".

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The spreadsheet ID
            - updatedRange (str): The range that was updated
            - updatedRows (int): Number of rows updated
            - updatedColumns (int): Number of columns updated
            - values (List[List[Any]], optional): The updated values if includeValuesInResponse is True

    Raises:
        TypeError: In the following cases:
            - If `workbook_identifier` is not a string.
            - If `target_range_a1_notation` is not a string.
            - If `data_interpretation_mode` is not a string.
            - If `new_cell_data` is not a list.
            - If any item in `new_cell_data` is not a list (i.e., not a list of lists).
            - If `return_updated_data` is not a boolean.
            - If `response_value_rendering_style` is not a string.
            - If `response_datetime_rendering_style` is not a string.
        ValueError: In the following cases:
            - If `workbook_identifier` is an empty string.
            - If `target_range_a1_notation` is an empty string.
            - If `data_interpretation_mode` is not one of the allowed new_cell_data ("RAW", "USER_ENTERED").
            - If `response_value_rendering_style` is not one of the allowed new_cell_data ("FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA").
            - If `response_datetime_rendering_style` is not one of the allowed new_cell_data ("SERIAL_NUMBER", "FORMATTED_STRING").
            - If the `target_range_a1_notation` argument is invalid (e.g., fails A1RangeInput validation).
            - If the spreadsheet is not found (propagated from core logic).
            - If the target_range_a1_notation doesn't have an explicit sheet name and the default sheet is not "Sheet1".
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import update
    return update(
        spreadsheet_id=workbook_identifier,
        range=target_range_a1_notation,
        valueInputOption=data_interpretation_mode,
        values=new_cell_data,
        includeValuesInResponse=return_updated_data,
        responseValueRenderOption=response_value_rendering_style,
        responseDateTimeRenderOption=response_datetime_rendering_style
    )


def add_rows_to_sheet_range(
    google_sheet_id,
    append_destination_range,
    input_parsing_style,
    data_to_be_appended,
    data_insertion_method=None,
    echo_appended_values_in_response=False,
    appended_value_format='FORMATTED_VALUE',
    appended_datetime_format='SERIAL_NUMBER',
    source_data_orientation='ROWS'
):
    """
    Appends values to a range in a spreadsheet.

    Args:
        google_sheet_id (str): The ID of the spreadsheet to append values to.
        append_destination_range (str): The A1 notation of the range to append values to. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
        input_parsing_style (str): How the input data should be interpreted. Allowed: 'RAW', 'USER_ENTERED'.
        data_to_be_appended (List[List[Any]]): The values to append to the range. Expected to be a list of lists (e.g., List[List[Any]]).
        data_insertion_method (Optional[str]): How the input data should be inserted. Allowed: 'OVERWRITE', 'INSERT_ROWS'. Defaults to None (behaves like 'INSERT_ROWS' for appending).
        echo_appended_values_in_response (bool): Whether to include the appended values in the response. Defaults to False.
        appended_value_format (str): How values should be rendered in the response. Allowed: 'FORMATTED_VALUE', 'UNFORMATTED_VALUE', 'FORMULA'. Defaults to FORMATTED_VALUE.
        appended_datetime_format (str): How dates, times, and durations should be rendered in the response. Allowed: 'SERIAL_NUMBER', 'FORMATTED_STRING'. Defaults to 'SERIAL_NUMBER'.
        source_data_orientation (str): The major dimension of the values. Allowed: 'ROWS' (default), 'COLUMNS'. Defaults to "ROWS".

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The spreadsheet ID
            - updatedRange (str): The range that was updated
            - updatedRows (int): Number of rows updated
            - updatedColumns (int): Number of columns updated
            - values (List[List[Any]], optional): The appended values if includeValuesInResponse is True

    Raises:
        TypeError: In the following cases:
            - If `google_sheet_id` is not a string.
            - If `append_destination_range` is not a string.
            - If `input_parsing_style` is not a string.
            - If `echo_appended_values_in_response` is not a boolean.
            - If `data_insertion_method` is not a string (when provided).
            - If `appended_value_format` is not a string (when provided).
            - If `appended_datetime_format` is not a string (when provided).
            - If `source_data_orientation` is not a string (when provided).
        pydantic.ValidationError: If `data_to_be_appended` is not a list of lists, or if enum parameters
            (`input_parsing_style`, `data_insertion_method`, `appended_value_format`,
            `appended_datetime_format`, `source_data_orientation`) have invalid data_to_be_appended.
        ValueError: In the following cases:
            - If `google_sheet_id` is an empty string.
            - If `append_destination_range` is an empty string.
            - If the data and append_destination_range sizes do not match.
            - If the spreadsheet is not found.
            - If the append_destination_range doesn't have an explicit sheet name and the default sheet is not "Sheet1".
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import append
    return append(
        spreadsheet_id=google_sheet_id,
        range=append_destination_range,
        valueInputOption=input_parsing_style,
        values=data_to_be_appended,
        insertDataOption=data_insertion_method,
        includeValuesInResponse=echo_appended_values_in_response,
        responseValueRenderOption=appended_value_format,
        responseDateTimeRenderOption=appended_datetime_format,
        majorDimension=source_data_orientation
    )


def erase_range_content(spreadsheet_file_id, selection_to_clear_a1):
    """
    Clears values from a specific range in a spreadsheet.

    Args:
        spreadsheet_file_id (str): The ID of the spreadsheet to clear values from.
        selection_to_clear_a1 (str): The A1 notation of the range to append values to. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The spreadsheet ID
            - clearedRange (str): The range that was cleared

    Raises:
        TypeError: In the following cases:
            - If `spreadsheet_file_id` is not a string.
            - If `selection_to_clear_a1` is not a string.
        ValueError: In the following cases:
            - If `spreadsheet_file_id` is an empty string.
            - If `selection_to_clear_a1` is an empty string.
            - If the `selection_to_clear_a1` argument is invalid (e.g., fails A1RangeInput validation).
            - If the spreadsheet is not found.
            - If the selection_to_clear_a1 doesn't have an explicit sheet name and the default sheet is not "Sheet1".
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import clear
    return clear(spreadsheet_id=spreadsheet_file_id, range=selection_to_clear_a1)


def fetch_multiple_ranges_data(
    source_spreadsheet_id,
    list_of_a1_ranges_to_get,
    primary_data_dimension=None,
    output_value_format='FORMATTED_VALUE',
    output_datetime_format='SERIAL_NUMBER'
):
    """
    Gets values from multiple ranges in a spreadsheet.

    Args:
        source_spreadsheet_id (str): The ID of the spreadsheet to retrieve values from.
        list_of_a1_ranges_to_get (List[str]): List of A1 notations of ranges to retrieve values from. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
        primary_data_dimension (Optional[str]): The major dimension that results should use. Valid values: "ROWS", "COLUMNS".
        output_value_format (str): How values should be rendered in the output. Valid values: "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA", defaults to "FORMATTED_VALUE".
        output_datetime_format (str): How dates, times, and durations should be rendered. Valid values: "SERIAL_NUMBER", "FORMATTED_STRING", defaults to "SERIAL_NUMBER".

    Returns:
        Dict[str, Any]: A dictionary containing:
            - spreadsheetId (str): The spreadsheet ID
            - valueRanges (List[dict]): List of value ranges, each containing:
                - range (str): The A1 notation of the range. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
                - majorDimension (str): The major dimension of the values
                - values (List[List[Any]]): The retrieved values

    Raises:
        ValueError: If the spreadsheet is not found, or for invalid parameter values.
        TypeError: For invalid parameter types.
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import batchGet
    return batchGet(
        spreadsheet_id=source_spreadsheet_id,
        ranges=list_of_a1_ranges_to_get,
        majorDimension=primary_data_dimension,
        valueRenderOption=output_value_format,
        dateTimeRenderOption=output_datetime_format
    )


def modify_multiple_sheet_ranges(
    target_spreadsheet_identifier,
    input_data_parsing_option,
    update_payload_list,
    confirm_update_with_data=False,
    result_value_display_mode='FORMATTED_VALUE',
    result_datetime_display_mode='SERIAL_NUMBER'
):
    """
    Updates values in multiple ranges of a spreadsheet.

    Args:
        target_spreadsheet_identifier (str): The ID of the spreadsheet to update.
        input_data_parsing_option (str): How the input data should be interpreted.
            Valid values:
            - "RAW": Values are inserted as-is, without any parsing.
            - "USER_ENTERED": Values are parsed as if entered into Sheets by a user.
              Formulas are stored as formulas, strings that look like dates or times
              may be converted to date/time values, plain numbers are converted to numbers.
        update_payload_list (List[ValueRangeModel]): List of update requests, each a dictionary containing:
            - range (str): The A1 notation of the range to update. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
            - values (List[List[Any]]): The values to update in the range (list of rows)
        confirm_update_with_data (bool): Whether to include the updated values in the response. Defaults to False.
        result_value_display_mode (str): How values should be rendered in the response. Defaults to "FORMATTED_VALUE".
            Valid values: "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA". Only "UNFORMATTED_VALUE" is explicitly handled; "FORMULA" is not currently implemented.
        result_datetime_display_mode (str): How dates, times, and durations should be rendered in the response. Defaults to "SERIAL_NUMBER".
            Valid values: "SERIAL_NUMBER", "FORMATTED_STRING". Only "SERIAL_NUMBER" is explicitly handled; "FORMATTED_STRING" is not currently implemented.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The spreadsheet ID
            - updatedData (List[dict]): List of updated ranges, each containing:
                - range (str): The A1 notation of the range. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
                - values (List[List[Any]]): The updated values

    Raises:
        TypeError: In the following cases:
            - If `target_spreadsheet_identifier` is not a string.
            - If `input_data_parsing_option` is not a string.
            - If `update_payload_list` is not a list.
            - If any item in `update_payload_list` is not a dictionary.
            - If `confirm_update_with_data` is not a boolean.
            - If `result_value_display_mode` is not a string.
            - If `result_datetime_display_mode` is not a string.
        ValueError: In the following cases:
            - If `target_spreadsheet_identifier` is an empty string.
            - If `input_data_parsing_option` is not one of the allowed values ("RAW", "USER_ENTERED").
            - If `result_value_display_mode` is not one of the allowed values ("FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA").
            - If `result_datetime_display_mode` is not one of the allowed values ("SERIAL_NUMBER", "FORMATTED_STRING").
            - If the spreadsheet is not found (propagated from core logic).
        pydantic.ValidationError: If `update_payload_list` is not a list of dictionaries conforming
            to the ValueRangeModel structure.
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import batchUpdate
    return batchUpdate(
        spreadsheet_id=target_spreadsheet_identifier,
        valueInputOption=input_data_parsing_option,
        data=update_payload_list,
        includeValuesInResponse=confirm_update_with_data,
        responseValueRenderOption=result_value_display_mode,
        responseDateTimeRenderOption=result_datetime_display_mode
    )


def erase_content_from_multiple_ranges(workbook_to_modify_id, a1_ranges_to_empty):
    """
    Clears values from multiple ranges in a spreadsheet.

    Args:
        workbook_to_modify_id (str): The ID of the spreadsheet to clear values from.
        a1_ranges_to_empty (List[str]): List of A1 notations of ranges to clear. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The spreadsheet ID
            - clearedRanges (List[dict]): List of cleared ranges, each containing:
                - clearedRange (str): The A1 notation of the range that was cleared. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"

    Raises:
        ValueError: If the spreadsheet is not found
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import batchClear
    return batchClear(spreadsheet_id=workbook_to_modify_id, ranges=a1_ranges_to_empty)


def retrieve_values_using_filters(
    document_id,
    selection_criteria_filters=None,
    row_or_column_preference=None,
    cell_value_render_method='FORMATTED_VALUE',
    date_time_value_render_method='SERIAL_NUMBER',
    accessing_user_identifier='me'
):
    """
    Retrieves values from a simulated spreadsheet data store using data filters.
    Uses an API-aligned return structure.

    Args:
        document_id (str): The ID of the spreadsheet to retrieve values from.
        selection_criteria_filters (Optional[List[Dict[str, Any]]]): List of data filter objects.
            Each dictionary represents a DataFilter and can specify one of:
            - {"a1Range": "Sheet1!A1:B2"} (primarily acted upon by this simulator). The a1Range should be an A1 notation. Which is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
            - {"gridRange": {"sheetId": 0, ...}} (conceptual for this simulator)
            - {"developerMetadataLookup": {"metadataKey": "key"}} (conceptual)
            If None or empty, an empty "valueRanges" list is returned.
        row_or_column_preference (Optional[str]): Major dimension for results ("ROWS" or "COLUMNS").
        cell_value_render_method (str): How values should be represented in the output. Valid values: "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA". Defaults to "FORMATTED_VALUE".
        date_time_value_render_method (str): How dates, times, and durations should be represented in the output. This is ignored if valueRenderOption is "FORMATTED_VALUE". Valid values: "SERIAL_NUMBER", "FORMATTED_STRING". Defaults to "SERIAL_NUMBER".
        accessing_user_identifier (Optional[str]): The user ID to use for accessing the spreadsheet. Defaults to "me" if not provided.

    Returns:
        Dict[str, Any]: API-aligned dictionary:
            - id (str): The spreadsheet ID.
            - valueRanges (List[Dict[str, Any]]): List of value ranges, each containing:
                - range (str): The A1 notation of the range. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
                - majorDimension (str): The major dimension of the values (None if not specified)
                - values (List[List[Any]]): The retrieved values

    Raises:
        TypeError: In the following cases:
            - If `document_id` is not a string.
            - If `selection_criteria_filters` is not a list.
            - If any item in `selection_criteria_filters` is not a dictionary.
            - If `accessing_user_identifier` is not a string (when provided).
            - If `row_or_column_preference` is not a string (when provided).
            - If `cell_value_render_method` is not a string (when provided).
            - If `date_time_value_render_method` is not a string (when provided).
        ValidationError: If an item in `selection_criteria_filters` is a dictionary but does not conform
            to the expected DataFilterModel structure (e.g., wrong type for 'a1Range').
        ValueError: In the following cases:
            - If `row_or_column_preference` is provided with an unsupported string value.
            - If user context or `document_id` is not found in the DB (propagated from original logic).
        InvalidFunctionParameterError: In the following cases:
            - If `cell_value_render_method` is provided with an unsupported string value.
            - If `date_time_value_render_method` is provided with an unsupported string value.
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import batchGetByDataFilter
    return batchGetByDataFilter(
        spreadsheet_id=document_id,
        dataFilters=selection_criteria_filters,
        majorDimension=row_or_column_preference,
        valueRenderOption=cell_value_render_method,
        dateTimeRenderOption=date_time_value_render_method,
        userId=accessing_user_identifier
    )


def update_sheet_data_by_filter(
    sheet_document_id,
    input_interpretation_setting,
    filtered_update_requests_list,
    should_return_updated_data=False,
    response_data_formatting='FORMATTED_VALUE',
    response_datetime_formatting='SERIAL_NUMBER'
):
    """
    Updates values in a spreadsheet using data filters.

    Args:
        sheet_document_id (str): The ID of the spreadsheet to update.
        input_interpretation_setting (str): Determines how input data should be interpreted. Valid values: "RAW" (values are stored as-is), "USER_ENTERED" (values are parsed as if entered by a user). "INPUT_VALUE_OPTION_UNSPECIFIED" is not allowed and must not be used.
        filtered_update_requests_list (List[Dict[str, Any]]): List of update requests, each containing either:
            Format 1:
                - dataFilter (dict): The data filter with:
                    - a1Range (str): The A1 notation of the range. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
            Format 2:
                - range (str): The A1 notation of the range. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
            - values (List[List[Any]]): The values to update in the range
        should_return_updated_data (bool): Whether to include the updated values in the response. Defaults to False.
        response_data_formatting (str): Determines how values in the response should be rendered. Valid values: "FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA". Defaults to "FORMATTED_VALUE".
        response_datetime_formatting (str): Determines how dates, times, and durations in the response should be rendered. This is ignored if responseValueRenderOption is "FORMATTED_VALUE". Valid values: "SERIAL_NUMBER", "FORMATTED_STRING". Defaults to "SERIAL_NUMBER".

    Returns:
        Dict[str, Any]: A dictionary containing:
            - spreadsheetId (str): The spreadsheet ID
            - updatedData (List[dict]): List of updated ranges, each containing:
                - range (str): The A1 notation of the range. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
                - values (List[List[Any]]): The updated values

    Raises:
        TypeError: In the following cases:
            - If `sheet_document_id` is not a string.
            - If `input_interpretation_setting` is not a string.
            - If `filtered_update_requests_list` is not a list.
            - If any item in `filtered_update_requests_list` is not a dictionary.
            - If `should_return_updated_data` is not a boolean.
            - If `response_data_formatting` is not a string.
            - If `response_datetime_formatting` is not a string.
            - If any 'dataFilter' is not a dictionary.
            - If 'values' is not a list of lists, or any item in 'values' is not a list.
        ValueError: In the following cases:
            - If `sheet_document_id` is an empty string.
            - If `input_interpretation_setting` is not one of the allowed values ("RAW", "USER_ENTERED").
            - If `response_data_formatting` is not one of the allowed values ("FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA").
            - If `response_datetime_formatting` is not one of the allowed values ("SERIAL_NUMBER", "FORMATTED_STRING").
            - If any item in `filtered_update_requests_list` does not contain either 'dataFilter' (with 'a1Range') or 'range'.
            - If the spreadsheet is not found (propagated from core logic).
        ValidationError: If the structure of an item in `filtered_update_requests_list` is invalid in a way not covered above.
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import batchUpdateByDataFilter
    return batchUpdateByDataFilter(
        spreadsheet_id=sheet_document_id,
        valueInputOption=input_interpretation_setting,
        data=filtered_update_requests_list,
        includeValuesInResponse=should_return_updated_data,
        responseValueRenderOption=response_data_formatting,
        responseDateTimeRenderOption=response_datetime_formatting
    )


def clear_filtered_sheet_values(worksheet_file_id, clearing_criteria_list):
    """
    Clears values from a spreadsheet using data filters.

    Args:
        worksheet_file_id (str): The ID of the spreadsheet to clear values from.
        clearing_criteria_list (List[Dict[str, Any]]): List of data filters, each containing:
            - a1Range (str): The A1 notation of the range to clear. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"

    Returns:
        Dict[str, Any]: A dictionary containing:
            - spreadsheetId (str): The spreadsheet ID
            - clearedRanges (List[str]): List of cleared ranges in A1 notation. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"

    Raises:
        ValueError: If the spreadsheet is not found
    """
    from google_sheets.Spreadsheets.SpreadsheetValues import batchClearByDataFilter
    return batchClearByDataFilter(
        spreadsheet_id=worksheet_file_id,
        dataFilters=clearing_criteria_list
    )
