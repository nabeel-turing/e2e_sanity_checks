# This file is automatically generated by the MutationBuilder

def initialize_spreadsheet_document(new_spreadsheet_details):
    """
    Creates a new spreadsheet.

    Args:
        new_spreadsheet_details (Dict[str, Any]): Dictionary containing:
            - 'id' (Optional[str]): IGNORED - The spreadsheet ID is auto-generated.
            - 'properties' (Optional[Dict[str, Any]]): Dictionary of spreadsheet properties with keys:
                - 'title' (Optional[str]): The title of the spreadsheet (defaults to "Untitled Spreadsheet")
                - 'locale' (Optional[str]): The locale of the spreadsheet
                - 'autoRecalc' (Optional[str]): The auto-recalculation setting
                - 'timeZone' (Optional[str]): The time zone of the spreadsheet
                - 'defaultFormat' (Optional[Dict[str, Any]]): Default cell formatting
                - 'iterativeCalculationSettings' (Optional[Dict[str, Any]]): Iterative calculation settings
                - 'owner' (Optional[str]): Owner email address
                - 'permissions' (Optional[List[Dict[str, Any]]]): List of permissions
                - 'parents' (Optional[List[str]]): List of parent folder IDs
                - 'size' (Optional[int]): File size in bytes
                - 'trashed' (Optional[bool]): Whether the file is trashed
                - 'starred' (Optional[bool]): Whether the file is starred
                - 'createdTime' (Optional[str]): Creation timestamp
                - 'modifiedTime' (Optional[str]): Last modification timestamp
            - 'sheets' (Optional[List[Dict[str, Any]]]): List of sheet dictionaries. If empty, a default "Sheet1" will be created.
                - 'properties' (Optional[Dict[str, Any]]): Sheet properties including:
                    - 'sheetId' (Optional[str]): Unique identifier for the sheet
                    - 'title' (str): Title of the sheet
                    - 'index' (int): Position of the sheet
                    - 'sheetType' (Optional[str]): Type of the sheet 
                    - 'gridProperties' (Optional[Dict[str, Any]]): Grid properties
                - 'data' (Optional[List[Dict[str, Any]]]): Sheet data using A1 notation. The key is the range in A1 notation. The value is a list of lists of cell values.
                - 'merges' (Optional[List[Dict[str, Any]]]): Cell merges
                - 'conditionalFormats' (Optional[List[Dict[str, Any]]]): Conditional formatting
                - 'filterViews' (Optional[List[Dict[str, Any]]]): Filter views
                - 'protectedRanges' (Optional[List[Dict[str, Any]]]): Protected ranges
                - 'basicFilter' (Optional[Dict[str, Any]]): Basic filter settings
                - 'charts' (Optional[List[Dict[str, Any]]]): Embedded charts
                - 'bandedRanges' (Optional[List[Dict[str, Any]]]): Banded ranges
                - 'developerMetadata' (Optional[List[Dict[str, Any]]]): Developer metadata
            - 'data' (Optional[Dict[str, Any]]): Dictionary of spreadsheet data with the following keys which are required if present:
                - 'spreadsheetId' (str): The spreadsheet ID
                - 'valueRanges' (List[Dict[str, Any]]): List of value ranges
                - 'properties' (Dict[str, Any]): Spreadsheet properties
                - 'sheets' (List[Dict[str, Any]]): List of sheets

    Returns:
        Dict[str, Any]: Dictionary containing the created spreadsheet data with keys:
            - 'id' (str): The spreadsheet ID
            - 'driveId' (str): The drive ID
            - 'name' (str): The spreadsheet name
            - 'mimeType' (str): The MIME type
            - 'properties' (Dict[str, Any]): Spreadsheet properties
            - 'sheets' (List[Dict[str, Any]]): List of sheets
            - 'data' (Dict[str, Any]): Spreadsheet data
            - 'owners' (List[str]): List of owner email addresses
            - 'permissions' (List[Dict[str, Any]]): List of permissions
            - 'parents' (List[str]): List of parent folder IDs
            - 'size' (int): File size in bytes
            - 'trashed' (bool): Whether the file is trashed
            - 'starred' (bool): Whether the file is starred
            - 'createdTime' (str): Creation timestamp
            - 'modifiedTime' (str): Last modification timestamp

    Raises:
        TypeError: If new_spreadsheet_details is not a dictionary or its fields have incorrect types.
        pydantic.ValidationError: If new_spreadsheet_details data does not conform to expected model structure.


    Note: 
        The 'id' field in the input is ignored - a new UUID is always generated.
        If no sheets are provided, a default "Sheet1" will be created automatically.
    """
    from google_sheets.Spreadsheets import create
    return create(spreadsheet=new_spreadsheet_details)


def retrieve_spreadsheet_by_id(workbook_identifier, data_selection_ranges=None, fetch_grid_content=False):
    """
    Gets the latest version of a specified spreadsheet.

    Args:
        workbook_identifier (str): The ID of the spreadsheet to retrieve.
        data_selection_ranges (Optional[List[str]]): The ranges to retrieve, in A1 notation. The A1 notation is a syntax used to define a cell or range of cells with a string that contains the sheet name plus the starting and ending cell coordinates using column letters and row numbers like: "Sheet1!A1:D3" or "A1:D3"
                                                Defaults to None.
        fetch_grid_content (bool): Whether to include grid data.
                                        Defaults to False.

    Returns:
        Dict[str, Any]: Dictionary containing:
            - 'id' (str): The spreadsheet ID
            - 'properties' (Dict[str, Any]): Spreadsheet properties
            - 'sheets' (List[Dict[str, Any]]): List of sheets
            - 'data' (Optional[Dict[str, Any]]): Grid data if includeGridData is True.
                If ranges is provided, returns only specified ranges.
                If ranges is None, returns all grid data.

    Raises:
        TypeError: If `workbook_identifier` is not a string.
        TypeError: If `data_selection_ranges` is provided and is not a list.
        TypeError: If `fetch_grid_content` is not a boolean.
        ValueError: If `workbook_identifier` is empty.
        ValueError: If `data_selection_ranges` is provided and any of its elements are not strings.
        ValueError: If the spreadsheet is not found.
        ValueError: If the DB is not properly initialized for the user.
        ValueError: If any range string is invalid A1 notation.
    """
    from google_sheets.Spreadsheets import get
    return get(
        spreadsheet_id=workbook_identifier,
        ranges=data_selection_ranges,
        includeGridData=fetch_grid_content
    )


def query_spreadsheet_data(target_spreadsheet_id, return_cell_values=False, data_filter_rules=None):
    """
    Gets spreadsheet data filtered by specified criteria.

    Args:
        target_spreadsheet_id (str): The ID of the spreadsheet to retrieve.
        return_cell_values (bool): Whether to include grid data. Defaults to False.
        data_filter_rules (Optional[List[Dict[str, Any]]]): List of data filters. Defaults to None.
            Each filter contains:
            - 'a1Range' (Optional[str]): The range in A1 notation
            - 'gridRange' (Optional[Dict[str, Any]]): Grid range specification
            - 'developerMetadataLookup' (Optional[Dict[str, Any]]): Developer metadata lookup with keys:
                - 'metadataKey' (Optional[str]): Key of the metadata to look up
                - 'metadataValue' (Optional[str]): Value of the metadata

    Returns:
        Dict[str, Any]: Dictionary containing:
            - 'id' (str): The spreadsheet ID
            - 'properties' (Dict[str, Any]): Spreadsheet properties
            - 'sheets' (List[Dict[str, Any]]): List of sheets
            - 'data' (Dict[str, Any]): Combined data after applying filters. Only included 
              when both includeGridData is True and valid filters are provided. Or else 'data' is not included.

    Raises:
        TypeError: If target_spreadsheet_id is not a string.
        TypeError: If return_cell_values is not a boolean.
        TypeError: If data_filter_rules is provided and is not a list.
        ValueError: If the spreadsheet is not found.
        ValueError: If the DB is not properly initialized for the user.
        ValueError: If data_filter_rules contains invalid filter specifications.
        pydantic.ValidationError: If filter data does not match the expected schema.
    """
    from google_sheets.Spreadsheets import getByDataFilter
    return getByDataFilter(
        spreadsheet_id=target_spreadsheet_id,
        includeGridData=return_cell_values,
        dataFilters=data_filter_rules
    )


def apply_bulk_modifications(
    spreadsheet_to_update_id,
    list_of_update_requests,
    return_updated_spreadsheet_object=False,
    ranges_for_response_data=None,
    include_grid_data_in_response=False
):
    """
    Applies one or more updates to the spreadsheet.

    Description: This function applies one or more updates to the spreadsheet.
    It supports the following request types:
    - addSheetRequest - Adds a new sheet to the spreadsheet.
    - deleteSheetRequest - Deletes an existing sheet from the spreadsheet.
    - updateSheetPropertiesRequest - Updates the properties of an existing sheet.
    - updateCells - Updates the cells in a specified range of the spreadsheet.
    - updateSheetProperties - Updates the properties of an existing sheet.
    The function validates the requests and updates the spreadsheet accordingly.

    Args:
        spreadsheet_to_update_id (str): The ID of the spreadsheet to update.
        list_of_update_requests (List[Dict[str, Any]]): List of update requests. Each dictionary
            in the list must contain exactly one key, which specifies the type of
            request. The value for that key is a dictionary payload for the request.
            Supported request keys and their payload structures:
            - 'addSheetRequest': Payload must conform to AddSheetRequestPayloadModel.
                Requires 'properties' with a 'sheetId'.
            - 'deleteSheetRequest': Payload must conform to DeleteSheetRequestPayloadModel.
                Requires 'sheetId'.
            - 'updateSheetPropertiesRequest': Payload must conform to UpdateSheetPropertiesRequestPayloadModel.
                Requires 'properties' (with 'sheetId') and 'fields'.
            - 'updateCells': Payload must conform to UpdateCellsPayloadModel.
                Requires 'range' and 'rows'.
            - 'updateSheetProperties': Payload must conform to UpdateSheetPropertiesSimplePayloadModel.
                Requires 'properties' (with 'sheetId'); 'fields' is optional.
        return_updated_spreadsheet_object (bool): Whether to include the
            updated spreadsheet in the response. Defaults to False.
        ranges_for_response_data (Optional[List[str]]): The ranges to include in the
            response if include_spreadsheet_in_response is True. Defaults to None.
        include_grid_data_in_response (bool): Whether to include grid data
            in the response if include_spreadsheet_in_response is True. Defaults to False.

    Returns:
        Dict[str, Any]: Dictionary containing:
            - 'spreadsheetId' (str): The spreadsheet ID
            - 'responses' (List[Dict[str, Any]]): List of update responses
            - 'updatedSpreadsheet' (Optional[Dict[str, Any]]): Updated spreadsheet
              if include_spreadsheet_in_response is True

    Raises:
        TypeError: If any argument has an invalid type as follows:
            - spreadsheet_to_update_id is not a string
            - list_of_update_requests is not a list
            - return_updated_spreadsheet_object is not a boolean
            - ranges_for_response_data is not a list of strings or None
            - include_grid_data_in_response is not a boolean
            - Request items in list_of_update_requests are not dictionaries
            - Payloads for request items in list_of_update_requests are not dictionaries
        pydantic.ValidationError: If the payload for any request in 'list_of_update_requests'
            does not conform to its expected Pydantic model structure.
        InvalidRequestError: If an item in 'list_of_update_requests' has
            an incorrect number of top-level keys (must be exactly one).
        UnsupportedRequestTypeError: If a request type in 'list_of_update_requests' is not supported.
        ValueError:
            - If the spreadsheet is not found (propagated from DB access).
            - If a business logic rule is violated during processing (e.g., sheet
              already exists, sheet not found for deletion/update, specific request
              constraints like missing sheetId if not covered by Pydantic).
    """
    from google_sheets.Spreadsheets import batchUpdate
    return batchUpdate(
        spreadsheet_id=spreadsheet_to_update_id,
        requests=list_of_update_requests,
        include_spreadsheet_in_response=return_updated_spreadsheet_object,
        response_ranges=ranges_for_response_data,
        response_include_grid_data=include_grid_data_in_response
    )
