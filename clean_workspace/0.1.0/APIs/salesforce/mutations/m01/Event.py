# This file is automatically generated by the MutationBuilder

def add_calendar_event(
    event_title=None,
    event_purpose=None,
    schedule_start_time=None,
    schedule_end_time=None,
    detailed_event_notes=None,
    meeting_venue=None,
    is_full_day_occurrence=None,
    event_coordinator_id=None,
    related_contact_id=None,
    associated_record_id=None
):
    """
    Creates a new event.

    Args:
        event_title (Optional[str]): The name of the event.
        event_purpose (Optional[str]): The subject of the event.
        schedule_start_time (Optional[str]): Start time of the event.
        schedule_end_time (Optional[str]): End time of the event.
        detailed_event_notes (Optional[str]): Description of the event.
        meeting_venue (Optional[str]): Location of the event.
        is_full_day_occurrence (Optional[bool]): Whether the event is all day.
        event_coordinator_id (Optional[str]): ID of the event owner.
        related_contact_id (Optional[str]): ID of the related contact.
        associated_record_id (Optional[str]): ID of the related record.

    Returns:
        Dict[str, Any]: The created event object with the following fields:
            - Id (str): Unique identifier for the event
            - CreatedDate (str): ISO format timestamp of creation
            - IsDeleted (bool): Whether the event is deleted
            - SystemModstamp (str): Last modified timestamp
            - Name (Optional[str]): The name of the event, if provided
            - Subject (Optional[str]): The subject of the event, if provided
            - StartDateTime (Optional[str]): Start time of the event, if provided
            - EndDateTime (Optional[str]): End time of the event, if provided
            - Description (Optional[str]): Description of the event, if provided
            - Location (Optional[str]): Location of the event, if provided
            - IsAllDayEvent (Optional[bool]): Whether the event is all day, if provided
            - OwnerId (Optional[str]): ID of the event owner, if provided
            - WhoId (Optional[str]): ID of the related contact, if provided
            - WhatId (Optional[str]): ID of the related record, if provided

    Raises:
        ValidationError: If event_attributes contain fields not defined in EventInputModel
                                  or if provided fields do not match their expected types
                                  (e.g., 'event_purpose' is not a string, 'is_full_day_occurrence' is not a boolean).
    """
    from salesforce.Event import create
    return create(
        Name=event_title,
        Subject=event_purpose,
        StartDateTime=schedule_start_time,
        EndDateTime=schedule_end_time,
        Description=detailed_event_notes,
        Location=meeting_venue,
        IsAllDayEvent=is_full_day_occurrence,
        OwnerId=event_coordinator_id,
        WhoId=related_contact_id,
        WhatId=associated_record_id
    )


def remove_calendar_event(event_identifier_to_delete):
    """
    Deletes an event.

    Args:
        event_identifier_to_delete (str): The ID of the event to delete.

    Returns:
        Dict[str, Any]: Empty dict on success, or error dict with structure:
            - error (str): Error message if event not found
    """
    from salesforce.Event import delete
    return delete(event_id=event_identifier_to_delete)


def get_event_layout_structure(target_event_id_for_layout):
    """
    Describes the layout of an event.

    Args:
        target_event_id_for_layout (str): The ID of the event to describe.

    Returns:
        Dict[str, str]: Event layout description with structure:
            - layout (str): Description of the event layout
    """
    from salesforce.Event import describeLayout
    return describeLayout(event_id=target_event_id_for_layout)


def fetch_event_object_schema():
    """
    Describes the object (Event).

    Returns:
        Dict[str, str]: Event object description with structure:
            - object (str): Description of the event object
    """
    from salesforce.Event import describeSObjects
    return describeSObjects()


def retrieve_removed_events():
    """
    Retrieves deleted events.

    Returns:
        Dict[str, List[Dict[str, Any]]]: List of deleted events with structure:
            - deleted (list): List of deleted event objects
    """
    from salesforce.Event import getDeleted
    return getDeleted()


def retrieve_modified_events():
    """
    Retrieves updated events.

    Returns:
        Dict[str, List[Dict[str, Any]]]: List of updated events with structure:
            - updated (list): List of updated event objects
    """
    from salesforce.Event import getUpdated
    return getUpdated()


def find_events_by_filter(event_query_conditions=None):
    """
    Queries events based on specified criteria.

    Args:
        event_query_conditions (Optional[Dict[str, Any]]): Key-value pairs to filter events. Example:
            - Subject (str): The subject of the event.
            - IsAllDayEvent (bool): Whether the event is all day.
            - StartDateTime (str): Start time of the event.
            - EndDateTime (str): End time of the event.
            - Description (str): Description of the event.
            - Location (str): Location of the event.
            - OwnerId (str): ID of the event owner.

    Returns:
        Dict[str, List[Dict[str, Any]]]: List of events matching the criteria with structure:
            - results (list): List of event objects matching the criteria

    Raises:
        ValidationError: If 'event_query_conditions' is provided and is not a dictionary,
                                  or if any of its known keys like "Subject",
                                  "IsAllDayEvent", or "StartDateTime"
                                  do not match their expected types.
    """
    from salesforce.Event import query
    return query(criteria=event_query_conditions)


def fetch_specific_event(event_lookup_id):
    """
    Retrieves details of a specific event.

    Args:
        event_lookup_id (str): The ID of the event to retrieve.

    Returns:
        Dict[str, Any]: The event object if found, or error dict with structure:
            - error (str): Error message if event not found
    """
    from salesforce.Event import retrieve
    return retrieve(event_id=event_lookup_id)


def locate_events_by_keyword(event_search_phrase):
    """
    Searches for events based on specified search criteria.

    Args:
        event_search_phrase (str): The term to search for in event fields.

    Returns:
        Dict[str, List[Dict[str, Any]]]: List of events containing the search term with structure:
            - results (list): List of event objects containing the search term

    Raises:
        TypeError: If event_search_phrase is not a string.
    """
    from salesforce.Event import search
    return search(search_term=event_search_phrase)


def restore_deleted_event(event_id_for_restoration):
    """
    Restores a deleted event. (Place holder - no actual deletion tracking).

    Args:
        event_id_for_restoration (str): The ID of the event to undelete.

    Returns:
        Dict[str, Any]: The event object if found, or error dict with structure:
            - error (str): Error message if event not found
    """
    from salesforce.Event import undelete
    return undelete(event_id=event_id_for_restoration)


def modify_calendar_event(
    event_id_to_modify,
    new_event_title=None,
    updated_event_subject=None,
    revised_start_time=None,
    revised_end_time=None,
    updated_event_description=None,
    changed_event_location=None,
    new_all_day_status=None,
    new_event_owner_id=None,
    updated_contact_id=None,
    modified_related_record_id=None
):
    """
    Updates an existing event.

    Args:
        event_id_to_modify (str): The ID of the event to update.
        new_event_title (Optional[str]): The name of the event.
        updated_event_subject (Optional[str]): The subject of the event.
        revised_start_time (Optional[str]): Start time of the event.
        revised_end_time (Optional[str]): End time of the event.
        updated_event_description (Optional[str]): Description of the event.
        changed_event_location (Optional[str]): Location of the event.
        new_all_day_status (Optional[bool]): Whether the event is all day.
        new_event_owner_id (Optional[str]): ID of the event owner.
        updated_contact_id (Optional[str]): ID of the related contact.
        modified_related_record_id (Optional[str]): ID of the related record.

    Returns:
        Dict[str, Any]: The updated event object if found, or an error dict with the structure:
              `{"error": "Event not found"}` if the event_id does not exist.

    Raises:
        TypeError: If `event_id_to_modify` is not a string.
        pydantic.ValidationError: If any of the known fields in `kwargs`
                                  (e.g., 'updated_event_subject', 'new_all_day_status')
                                  are provided with an invalid data type.
    """
    from salesforce.Event import update
    return update(
        event_id=event_id_to_modify,
        Name=new_event_title,
        Subject=updated_event_subject,
        StartDateTime=revised_start_time,
        EndDateTime=revised_end_time,
        Description=updated_event_description,
        Location=changed_event_location,
        IsAllDayEvent=new_all_day_status,
        OwnerId=new_event_owner_id,
        WhoId=updated_contact_id,
        WhatId=modified_related_record_id
    )


def create_or_update_event(
    upsert_event_name=None,
    event_identifier_for_upsert=None,
    upsert_event_subject=None,
    upsert_start_datetime=None,
    upsert_end_datetime=None,
    upsert_event_details=None,
    upsert_event_location=None,
    upsert_is_all_day_flag=None,
    upsert_owner_id=None,
    upsert_who_id=None,
    upsert_what_id=None
):
    """
    Creates or updates an event.

    Args:
        upsert_event_name (Optional[str]): The name of the event.
        event_identifier_for_upsert (Optional[str]): Event ID (required for update).
        upsert_event_subject (Optional[str]): The subject of the event.
        upsert_start_datetime (Optional[str]): Start time of the event.
        upsert_end_datetime (Optional[str]): End time of the event.
        upsert_event_details (Optional[str]): Description of the event.
        upsert_event_location (Optional[str]): Location of the event.
        upsert_is_all_day_flag (Optional[bool]): Whether the event is all day.
        upsert_owner_id (Optional[str]): ID of the event owner.
        upsert_who_id (Optional[str]): ID of the related contact.
        upsert_what_id (Optional[str]): ID of the related record.

    Returns:
        Dict[str, Any]: The created or updated event object with the following fields:
            - Id (str): Unique identifier for the event
            - CreatedDate (str): ISO format timestamp of creation
            - IsDeleted (bool): Whether the event is deleted
            - SystemModstamp (str): Last modified timestamp
            - Name (Optional[str]): The name of the event, if provided
            - Subject (Optional[str]): The subject of the event, if provided
            - StartDateTime (Optional[str]): Start time of the event, if provided
            - EndDateTime (Optional[str]): End time of the event, if provided
            - Description (Optional[str]): Description of the event, if provided
            - Location (Optional[str]): Location of the event, if provided
            - IsAllDayEvent (Optional[bool]): Whether the event is all day, if provided
            - OwnerId (Optional[str]): ID of the event owner, if provided
            - WhoId (Optional[str]): ID of the related contact, if provided
            - WhatId (Optional[str]): ID of the related record, if provided
    """
    from salesforce.Event import upsert
    return upsert(
        Name=upsert_event_name,
        Id=event_identifier_for_upsert,
        Subject=upsert_event_subject,
        StartDateTime=upsert_start_datetime,
        EndDateTime=upsert_end_datetime,
        Description=upsert_event_details,
        Location=upsert_event_location,
        IsAllDayEvent=upsert_is_all_day_flag,
        OwnerId=upsert_owner_id,
        WhoId=upsert_who_id,
        WhatId=upsert_what_id
    )
