# This file is automatically generated by the MutationBuilder

def add_new_task(
    task_urgency,
    task_progress_state,
    custom_task_id=None,
    task_short_name=None,
    task_main_subject=None,
    task_detailed_info=None,
    task_due_date=None,
    alternative_deadline=None,
    assigned_user_id=None,
    linked_person_id=None,
    linked_record_id=None,
    has_reminder_notification=None,
    notification_timestamp=None
):
    """
    Creates a new task.

    Args:
        task_urgency (str): Priority of the task (required).
        task_progress_state (str): Status of the task (required).
        custom_task_id (Optional[str]): Custom ID for the task. If not provided, a UUID will be generated.
        task_short_name (Optional[str]): The name of the task.
        task_main_subject (Optional[str]): The subject of the task.
        task_detailed_info (Optional[str]): Description of the task.
        task_due_date (Optional[str]): Due date of the task.
        alternative_deadline (Optional[str]): Alternative field for task due date.
        assigned_user_id (Optional[str]): ID of the task owner.
        linked_person_id (Optional[str]): ID of the related contact.
        linked_record_id (Optional[str]): ID of the related record.
        has_reminder_notification (Optional[bool]): Whether reminder is set.
        notification_timestamp (Optional[str]): Reminder date and time.

    Returns:
        Dict[str, Any]: The created task object with the following fields:
            - Id (str): Unique identifier for the task
            - CreatedDate (str): ISO format timestamp of creation
            - IsDeleted (bool): Whether the task is deleted
            - SystemModstamp (str): Last modified timestamp
            - Priority (str): Priority of the task
            - Status (str): Status of the task
            - Name (Optional[str]): The name of the task, if provided
            - Subject (Optional[str]): The subject of the task, if provided
            - Description (Optional[str]): Description of the task, if provided
            - ActivityDate (Optional[str]): Due date of the task, if provided
            - DueDate (Optional[str]): Alternative due date field, if provided
            - OwnerId (Optional[str]): ID of the task owner, if provided
            - WhoId (Optional[str]): ID of the related contact, if provided
            - WhatId (Optional[str]): ID of the related record, if provided
            - IsReminderSet (Optional[bool]): Whether reminder is set, if provided
            - ReminderDateTime (Optional[str]): Reminder date and time, if provided

    Raises:
        ValidationError: If 'task_attributes' do not conform to the TaskCreateModel structure
                                 (e.g., missing required fields 'task_urgency' or 'task_progress_state',
                                 or if any field has an invalid type, or if extra unexpected
                                 fields are provided).
    """
    from salesforce.Task import create
    return create(
        Priority=task_urgency,
        Status=task_progress_state,
        Id=custom_task_id,
        Name=task_short_name,
        Subject=task_main_subject,
        Description=task_detailed_info,
        ActivityDate=task_due_date,
        DueDate=alternative_deadline,
        OwnerId=assigned_user_id,
        WhoId=linked_person_id,
        WhatId=linked_record_id,
        IsReminderSet=has_reminder_notification,
        ReminderDateTime=notification_timestamp
    )


def remove_task_record(task_identifier_to_remove):
    """
    Deletes a task.

    Args:
        task_identifier_to_remove (str): The ID of the task to delete.

    Returns:
        Dict[str, Any]: Empty dict on success, or error dict with structure:
            - error (str): Error message if task not found
    """
    from salesforce.Task import delete
    return delete(task_id=task_identifier_to_remove)


def get_task_ui_configuration():
    """
    Describes the layout of a task.

    Returns:
        Dict[str, Any]: Task layout description with structure:
            - layout (str): Description of the task layout
    """
    from salesforce.Task import describeLayout
    return describeLayout()


def fetch_task_object_schema():
    """
    Describes Task SObjects.

    Returns:
        Dict[str, Any]: Task object description with structure:
            - object (str): Description of the task object
    """
    from salesforce.Task import describeSObjects
    return describeSObjects()


def retrieve_erased_tasks():
    """
    Retrieves deleted tasks.

    Returns:
        Dict[str, Any]: List of deleted tasks with structure:
            - deleted (list): List of deleted task objects
    """
    from salesforce.Task import getDeleted
    return getDeleted()


def retrieve_revised_tasks():
    """
    Retrieves updated tasks.

    Returns:
        Dict[str, Any]: List of updated tasks with structure:
            - updated (list): List of updated task objects
    """
    from salesforce.Task import getUpdated
    return getUpdated()


def find_tasks_by_attributes(task_filter_set=None):
    """
    Queries tasks based on specified criteria.

    Args:
        task_filter_set (Optional[Dict[str, Any]]): Key-value pairs to filter tasks.
            If provided, the dictionary structure is validated. Example:
            {
                "Subject": Optional[str],
                "Priority": Optional[str],
                "Status": Optional[str],
                "ActivityDate": Optional[str] # e.g., "2024-01-01"
            }
            All keys within the criteria dictionary are optional.

    Returns:
        Dict[str, List[Dict[str, Any]]]: A dictionary containing a list of
            task objects matching the criteria under the key 'results'. Example:
            {
                "results": [
                    {"id": "task-1", "Subject": "Review", ...},
                    ...
                ]
            }

    Raises:
        ValidationError: If 'task_filter_set' is provided but does not conform
            to the expected structure or types (e.g., non-string value for Subject).
        TypeError: If task_filter_set is not None and not a dictionary.
    """
    from salesforce.Task import query
    return query(criteria=task_filter_set)


def fetch_single_task_data(task_lookup_identifier):
    """
    Retrieves a task.

    Args:
        task_lookup_identifier (str): The ID of the task to retrieve.

    Returns:
        Dict[str, Any]: The task object if found, or error dict with structure:
            - error (str): Error message if task not found
    """
    from salesforce.Task import retrieve
    return retrieve(task_id=task_lookup_identifier)


def locate_tasks_by_text(task_search_keyword):
    """
    Searches for tasks based on specified search criteria.

    Args:
        task_search_keyword (str): The term to search for in task fields.

    Returns:
        Dict[str, List[Dict[str, Any]]]: List of tasks containing the search term with structure:
            - results (list): List of task objects containing the search term

    Raises:
        TypeError: If task_search_keyword is not a string
    """
    from salesforce.Task import search
    return search(search_term=task_search_keyword)


def restore_deleted_task(task_id_to_recover):
    """
    Recovers deleted tasks. (Placeholder - no actual deletion tracking).

    Args:
        task_id_to_recover (str): The ID of the task to undelete.

    Returns:
        Dict[str, Any]: The task object if found, or error dict with structure:
            - error (str): Error message if task not found
    """
    from salesforce.Task import undelete
    return undelete(task_id=task_id_to_recover)


def modify_existing_task(
    task_id_for_update,
    updated_task_name=None,
    revised_task_subject=None,
    new_task_priority=None,
    changed_task_status=None,
    amended_task_description=None,
    new_due_date=None,
    reassigned_owner_id=None,
    updated_related_contact_id=None,
    changed_associated_record_id=None,
    new_reminder_setting=None,
    updated_reminder_time=None
):
    """
    Updates a task.

    Args:
        task_id_for_update (str): The ID of the task to update.
        updated_task_name (Optional[str]): The name of the task.
        revised_task_subject (Optional[str]): The subject of the task.
        new_task_priority (Optional[str]): Priority of the task.
        changed_task_status (Optional[str]): Status of the task.
        amended_task_description (Optional[str]): Description of the task.
        new_due_date (Optional[str]): Due date of the task.
        reassigned_owner_id (Optional[str]): ID of the task owner.
        updated_related_contact_id (Optional[str]): ID of the related contact.
        changed_associated_record_id (Optional[str]): ID of the related record.
        new_reminder_setting (Optional[bool]): Whether reminder is set.
        updated_reminder_time (Optional[str]): Reminder date and time.

    Returns:
        Dict[str, Any]: The updated task object if found, or error dict with structure:
            - error (str): Error message if task not found
            If successful, returns the task object with the following fields:
            - Id (str): Unique identifier for the task
            - CreatedDate (str): ISO format timestamp of creation
            - IsDeleted (bool): Whether the task is deleted
            - SystemModstamp (str): Last modified timestamp
            - Name (Optional[str]): The name of the task, if provided
            - Subject (Optional[str]): The subject of the task, if provided
            - Priority (Optional[str]): Priority of the task, if provided
            - Status (Optional[str]): Status of the task, if provided
            - Description (Optional[str]): Description of the task, if provided
            - ActivityDate (Optional[str]): Due date of the task, if provided
            - OwnerId (Optional[str]): ID of the task owner, if provided
            - WhoId (Optional[str]): ID of the related contact, if provided
            - WhatId (Optional[str]): ID of the related record, if provided
            - IsReminderSet (Optional[bool]): Whether reminder is set, if provided
            - ReminderDateTime (Optional[str]): Reminder date and time, if provided
    """
    from salesforce.Task import update
    return update(
        task_id=task_id_for_update,
        Name=updated_task_name,
        Subject=revised_task_subject,
        Priority=new_task_priority,
        Status=changed_task_status,
        Description=amended_task_description,
        ActivityDate=new_due_date,
        OwnerId=reassigned_owner_id,
        WhoId=updated_related_contact_id,
        WhatId=changed_associated_record_id,
        IsReminderSet=new_reminder_setting,
        ReminderDateTime=updated_reminder_time
    )


def create_or_modify_task(
    task_identifier_for_upsert=None,
    upsert_task_name=None,
    upsert_task_subject=None,
    upsert_task_priority=None,
    upsert_task_status=None,
    upsert_task_description=None,
    upsert_activity_date=None,
    upsert_owner_id=None,
    upsert_related_contact_id=None,
    upsert_related_record_id=None,
    upsert_reminder_flag=None,
    upsert_reminder_timestamp=None
):
    """
    Creates or updates a task.

    Args:
        task_identifier_for_upsert (Optional[str]): Task ID (required for update).
        upsert_task_name (Optional[str]): The name of the task.
        upsert_task_subject (Optional[str]): The subject of the task.
        upsert_task_priority (Optional[str]): Priority of the task.
        upsert_task_status (Optional[str]): Status of the task.
        upsert_task_description (Optional[str]): Description of the task.
        upsert_activity_date (Optional[str]): Due date of the task.
        upsert_owner_id (Optional[str]): ID of the task owner.
        upsert_related_contact_id (Optional[str]): ID of the related contact.
        upsert_related_record_id (Optional[str]): ID of the related record.
        upsert_reminder_flag (Optional[bool]): Whether reminder is set.
        upsert_reminder_timestamp (Optional[str]): Reminder date and time.

    Returns:
        Dict[str, Any]: The created or updated task object with the following fields:
            - Id (str): Unique identifier for the task
            - CreatedDate (str): ISO format timestamp of creation
            - IsDeleted (bool): Whether the task is deleted
            - SystemModstamp (str): Last modified timestamp
            - Name (Optional[str]): The name of the task, if provided
            - Subject (Optional[str]): The subject of the task, if provided
            - Priority (Optional[str]): Priority of the task, if provided
            - Status (Optional[str]): Status of the task, if provided
            - Description (Optional[str]): Description of the task, if provided
            - ActivityDate (Optional[str]): Due date of the task, if provided
            - OwnerId (Optional[str]): ID of the task owner, if provided
            - WhoId (Optional[str]): ID of the related contact, if provided
            - WhatId (Optional[str]): ID of the related record, if provided
            - IsReminderSet (Optional[bool]): Whether reminder is set, if provided
            - ReminderDateTime (Optional[str]): Reminder date and time, if provided
    """
    from salesforce.Task import upsert
    return upsert(
        Id=task_identifier_for_upsert,
        Name=upsert_task_name,
        Subject=upsert_task_subject,
        Priority=upsert_task_priority,
        Status=upsert_task_status,
        Description=upsert_task_description,
        ActivityDate=upsert_activity_date,
        OwnerId=upsert_owner_id,
        WhoId=upsert_related_contact_id,
        WhatId=upsert_related_record_id,
        IsReminderSet=upsert_reminder_flag,
        ReminderDateTime=upsert_reminder_timestamp
    )
