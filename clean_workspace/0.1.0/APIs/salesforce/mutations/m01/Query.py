# This file is automatically generated by the MutationBuilder

def run_soql_command(soql_query_string):
    """
    Executes a SOQL-like query against the in-memory database.

    The query string is first URL-decoded. 
    The parser has specific behaviors and improved parsing logic as detailed below.

    Args:
        soql_query_string (str): The SOQL-like query string. Example:
                 "SELECT Name, Location FROM Event WHERE Location = 'Boardroom' ORDER BY Name ASC OFFSET 0 LIMIT 5"

    Returns:
        Dict[str, Any]: Query results with structure:
            - results (list): List of matching records (dictionaries).
            - error (str): Error message if the query is malformed/fails.

    Raises:
        ValueError: If the query is fundamentally malformed (e.g., missing SELECT or FROM clause).

    Notes:
        Supported Clauses & Parsing Behaviors:
        --------------------------------------
        SELECT <field1[, field2...]>
            - Purpose: Specifies fields to retrieve.
            - Keyword 'SELECT': Case-insensitive.
            - Fields: Comma-separated if multiple. All specified fields are now reliably selected.
            The parser correctly identifies fields listed between SELECT and FROM.

        FROM <ObjectName>
            - Purpose: Specifies the object to query (e.g., "FROM Event").
            - Keyword 'FROM': MUST be UPPERCASE.

        WHERE <conditions>
            - Purpose: Filters records based on conditions.
            - Keywords 'WHERE', 'AND': MUST be UPPERCASE.
            - Conditions: Multiple conditions are combined with 'AND'.
            - Operators: '=', '>', '<'. (Note: The `parse_conditions` helper function defines more operators
            like 'IN', 'LIKE', 'CONTAINS', but the main `get` function currently only implements direct
            logic for '=', '>', '<' in its record filtering loop).
            - String Literals: Must be enclosed in single or double quotes (e.g., "Name = 'Test Value'").
            - Parsing: The WHERE condition string is now parsed to correctly end before other major clauses
            like 'ORDER BY', 'LIMIT', or 'OFFSET'. This prevents tokens from these clauses from being
            incorrectly included in the WHERE condition.

        ORDER BY <field> [ASC|DESC]
            - Purpose: Sorts the results.
            - Keywords 'ORDER BY', 'ASC', 'DESC': MUST be UPPERCASE. 'ASC' is default.
            - Behavior: Sorting by <field> works correctly if <field> is selected (i.e., present in the
            records after the SELECT phase). If the <field> to sort by is not present in the
            records being sorted (e.g., not selected, or does not exist on records), the sort key
            becomes an empty string for those items, potentially resulting in an unstable sort
            (often preserving the original retrieval order for those items relative to each other).

        OFFSET <number>
            - Purpose: Skips a specified number of records from the beginning of the result set *after sorting*.
            - Keyword 'OFFSET': MUST be UPPERCASE.
            - Interaction with LIMIT: OFFSET is applied to the result set first, then LIMIT is applied.
            The order of OFFSET and LIMIT keywords in the query string does not affect this execution sequence.
            The internal logic first applies OFFSET to the sorted list, then LIMIT to that offsetted list.

        LIMIT <number>
            - Purpose: Restricts the number of records returned *after sorting and offsetting*.
            - Keyword 'LIMIT': MUST be UPPERCASE.
    """
    from salesforce.Query import get
    return get(q=soql_query_string)


def decode_where_filter_rules(condition_string_list):
    """
    Parse the conditions in the WHERE clause.
    Handles '=', 'IN', 'LIKE', and 'CONTAINS'.

    Args:
        condition_string_list (List[str]): List of condition strings to parse. Example:
            - "Subject = 'Meeting'"
            - "IsAllDayEvent = true"
            - "Location IN ('Boardroom', 'Conference Room')"
            - "Description LIKE '%important%'"
            - "Subject CONTAINS 'review'"

    Returns:
        List[Tuple[str, str, str | List[str]]]: List of tuples containing (condition_type, field, value) where:
            - condition_type (str): One of '=', 'IN', 'LIKE', 'CONTAINS'
            - field (str): The field name to check
            - value (str | List[str]): The value(s) to compare against
    """
    from salesforce.Query import parse_conditions
    return parse_conditions(conditions=condition_string_list)
