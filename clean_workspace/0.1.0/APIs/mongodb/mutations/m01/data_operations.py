# This file is automatically generated by the MutationBuilder

def query_documents_in_collection(
    search_database,
    search_collection,
    document_selector_query=None,
    field_return_specification=None,
    max_results_to_return=10,
    result_ordering_criteria=None
):
    """
    Run a find query against a MongoDB collection.

    This function executes a find query against a specified MongoDB database and collection.
    It allows for filtering documents using a query filter, specifying which fields to
    return using a projection, limiting the maximum number of documents returned, and
    defining a sort order for the results. The filter, projection, and sort criteria
    should match the syntax used in MongoDB's `db.collection.find()` and `cursor.sort()`
    methods, respectively.

    Args:
        search_database (str): Database name.
        search_collection (str): Collection name.
        document_selector_query (Optional[Dict[str, Any]]): The query filter, matching the syntax of the
            query argument of db.collection.find(). Defaults to None.
        field_return_specification (Optional[Dict[str, Any]]): The projection, matching the syntax of the
            projection argument of db.collection.find(). Defaults to None.
        max_results_to_return (int): The maximum number of documents to return. Defaults to 10.
        result_ordering_criteria (Optional[Dict[str, Any]]): A document, describing the sort order, matching
            the syntax of the sort argument of cursor.sort(). Defaults to None.

    Returns:
        List[Dict[str, Any]]: A list of content blocks representing the result of the
            MongoDB find operation. The first item in the list is a summary message
            indicating how many documents were found. Subsequent items are MongoDB
            documents serialized as EJSON strings. Each content block in the list
            is a dictionary with the following keys:
            text (str): For the first block, this is a summary message (e.g.,
                        "Found 5 documents."). For subsequent blocks, this is an
                        EJSON-formatted string representing a MongoDB document.
            type (str): Always 'text', indicating the content of the 'text' field
                        is plain text or an EJSON string.

    Raises:
        InvalidQueryError: If the document_selector_query, field_return_specification, or result_ordering_criteria criteria are malformed.
        TypeError: If any of the input types are incorrect, such as passing a string
            instead of a dict for document_selector_query, field_return_specification, or result_ordering_criteria.
        ValueError: If a provided value is out of the expected range or format, such
            as a negative max_results_to_return or an empty search_database/search_collection name.
        ValidationError : If any input validation fails.
    """
    from mongodb.data_operations import find
    return find(
        database=search_database,
        collection=search_collection,
        filter=document_selector_query,
        projection=field_return_specification,
        limit=max_results_to_return,
        sort=result_ordering_criteria
    )


def count_documents_matching_query(db_to_count_in, collection_to_count_in, document_match_filter=None):
    """
    Gets the number of documents in a MongoDB collection.

    This function counts documents in a specified collection of a
    MongoDB database. An optional query can be provided to filter
    the documents before counting.

    Args:
        db_to_count_in (str): Database name.
        collection_to_count_in (str): Collection name.
        document_match_filter (Optional[Dict[str, Any]]): A filter/query parameter. Allows
            users to filter the documents to count. Matches the syntax of
            the filter argument of db.collection.count(). If None or
            omitted, all documents in the collection are counted.

    Returns:
        Dict[str, Any]: A dictionary containing the result, structured as:
            {
                "content": [
                    {
                        "text": "Found ${count} documents in the collection "${collection}"",
                        "type": "text"
                    }
                ]
            }
            Where `${count}` is the number of documents found and
            `${collection}` is the name of the collection.

    Raises:
        ValidationError: If input arguments are invalid (e.g., wrong type,
            missing required fields, or not conforming to defined constraints).
        InvalidQueryError: If the provided document_match_filter criteria are malformed,
            contain unsupported operators, or cause an error during
            db_to_count_in execution.
    """
    from mongodb.data_operations import count
    return count(
        database=db_to_count_in,
        collection=collection_to_count_in,
        query=document_match_filter
    )


def execute_aggregation_pipeline(database_for_aggregation, collection_for_aggregation, aggregation_stage_list):
    """
    Run an aggregation against a MongoDB collection.

    This function runs an aggregation against a specified MongoDB collection within a given database.
    It executes an array of aggregation pipeline stages provided as input and returns the
    results of this aggregation.

    Args:
        database_for_aggregation (str): Database name.
        collection_for_aggregation (str): Collection name.
        aggregation_stage_list (List[Dict[str, Any]]): An array of aggregation stages to execute.

    Returns:
        List[Dict[str, Any]]: A list of documents, where each document is a dictionary
            representing an item in the aggregation result set.
            The specific keys and value types within each document are determined
            by the aggregation pipeline stages, particularly the final stage
            (e.g., $project, $group, $out).
            For instance, a pipeline might produce documents with fields like:
              _id (Any): Identifier for the group or document (type depends
                  on the pipeline stage and data).
              total_quantity (int): Example: a sum calculated by a $group
                  stage.
              average_price (float): Example: an average calculated by a
                  $group stage.
            Note: The actual fields and their types are entirely dependent on the
            user-defined pipeline. Any fields whose names contain 'url' or 'URL'
            are omitted from this example documentation, even if they could be
            present in the actual API response based on the pipeline's definition.

    Raises:
        InvalidPipelineError: If the aggregation aggregation_stage_list is malformed or
            contains invalid stages/operators.
        AggregationError: If an error occurs during the aggregation process
            (e.g., resource limits exceeded, type mismatch).
        PydanticValidationError: If input arguments fail validation.
    """
    from mongodb.data_operations import aggregate
    return aggregate(
        database=database_for_aggregation,
        collection=collection_for_aggregation,
        pipeline=aggregation_stage_list
    )


def add_multiple_documents(target_db_for_insert, target_collection_for_insert, list_of_documents_to_add):
    """
    Insert an array of documents into a MongoDB collection.

    MongoDB typically creates collections automatically during the first insert
    operation if they do not already exist, provided the collection name is valid
    and permissions allow.

    Args:
        target_db_for_insert (str): Database name.
        target_collection_for_insert (str): Collection name.
        list_of_documents_to_add (List[Dict[str, Any]]): The array of documents to insert.
            Each item in the list should be a dictionary representing a
            MongoDB document. The list must not be empty as per model validation.

    Returns:
        Dict[str, Any]: A dictionary containing the result, structured as:
            {
                "content": [
                    {
                        "text": "Inserted ${number_of_documents} document(s) into collection "${collection_name}"",
                        "type": "text"
                    },
                    {
                        "text": "Inserted IDs: ${inserted_ids}"
                        "type": "text"
                    }
                ]
            }
            Where `${number_of_documents}` is the number of documents inserted,
            `${collection_name}` is the name of the collection, and
            `${inserted_ids}` is a string representation of the inserted document IDs.

    Raises:
        ValidationError: If input arguments are invalid.
        InvalidDocumentError: If any list_of_documents_to_add are invalid client-side (e.g.,
            unserializable BSON, malformed structure) - typically from
            PyMongo's `InvalidOperation`.
        BulkWriteError: If server-side errors occur during the insertion for
            one or more list_of_documents_to_add specifically caught by PyMongo's
            `BulkWriteError` (e.g., duplicate key, schema validation).
            The `details` attribute of this error will contain the PyMongo
            error details.
        OperationFailure: If other command-level MongoDB
            operation failures occur (e.g., invalid target_collection_for_insert name (code 73),
            authentication issues, etc.) that are not caught as
            PyMongoBulkWriteError. This exception is re-raised directly from
            the driver.
    """
    from mongodb.data_operations import insert_many
    return insert_many(
        database=target_db_for_insert,
        collection=target_collection_for_insert,
        documents=list_of_documents_to_add
    )


def modify_matching_documents(
    database_to_update_in,
    collection_to_update_in,
    modification_instructions,
    document_selection_filter=None,
    create_if_not_found=None
):
    """
    Updates all documents that match the specified filter for a collection.

    Modifies existing documents in a collection that match the filter
    criteria. Optionally, if 'upsert' is true, a new document will be
    inserted if no documents match the filter.

    Args:
        database_to_update_in (str): Database name.
        collection_to_update_in (str): Collection name.
        modification_instructions (Dict[str, Any]): An update document describing the
            modifications to apply using update operator expressions (e.g.,
            '$set', '$inc').
        document_selection_filter (Optional[Dict[str, Any]]): The selection criteria for the
            update. If None or an empty dictionary, all documents in the
            collection are candidates for update. Defaults to None (empty filter).
        create_if_not_found (Optional[bool]): Controls whether to insert a new document
            if no documents match the filter. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing the result, structured as:
            {
                "content": [
                    {
                        "text": message,
                        "type": "text"
                    }
                ]
            }
            Where `message` is constructed based on the operation's outcome:
            - If no documents matched the filter, the message is "No documents matched the filter."
            - Otherwise, it includes parts like "Matched X document(s).", "Modified Y document(s).", and
              "Upserted Z document with id: {upserted_id}." depending on the counts of matched, modified,
              and upserted documents.
            - The message parts are joined into a single string.

    Raises:
        ValidationError: If input arguments are invalid.
        InvalidQueryError: If the 'document_selection_filter' document is malformed or invalid.
        InvalidUpdateError: If the 'modification_instructions' document is malformed, empty,
            lacks valid modification_instructions operators, or attempts an invalid modification.
    """
    from mongodb.data_operations import update_many
    return update_many(
        database=database_to_update_in,
        collection=collection_to_update_in,
        update=modification_instructions,
        filter=document_selection_filter,
        upsert=create_if_not_found
    )


def erase_documents_by_filter(database_for_deletion, collection_for_deletion, deletion_criteria_query=None):
    """
    Removes all documents that match the filter from a MongoDB collection.

    This function removes all documents that match the specified filter from a MongoDB collection.
    It operates on a given database and collection, using a filter query to identify the documents for deletion.

    Args:
        database_for_deletion (str): Database name.
        collection_for_deletion (str): Collection name.
        deletion_criteria_query (Optional[Dict[str, Any]]): The query filter, specifying the deletion criteria.
            Matches the syntax of the filter argument of db.collection.deleteMany(). Defaults to None,
            which typically means no filter is applied (behavior might depend on MongoDB driver if filter is truly omitted or passed as empty).

    Returns:
        Dict[str, Any]: A dictionary summarizing the outcome of the delete operation. It contains the following keys:
            deleted_count (int): The total number of documents successfully deleted from the collection.
            acknowledged (bool): True if the delete operation was acknowledged by the MongoDB server; False otherwise.

    Raises:
        InvalidQueryError: If the provided deletion_criteria_query query is malformed or invalid according to MongoDB's query syntax.
        PydanticValidationError: If input arguments fail validation.
    """
    from mongodb.data_operations import delete_many
    return delete_many(
        database=database_for_deletion,
        collection=collection_for_deletion,
        filter=deletion_criteria_query
    )
