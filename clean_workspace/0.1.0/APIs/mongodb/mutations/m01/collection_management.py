# This file is automatically generated by the MutationBuilder

def enumerate_collections_in_database(target_database_name):
    """
    List all collections for a given database.

    This function lists all collections for a given database. Collection names
    are expected to be strings.

    Args:
        target_database_name (str): Database name.

    Returns:
        List[str]: A list of collection names in the specified database.
                   Returns an empty list if the database exists but has no collections.

    Raises:
        DatabaseNotFoundError: If the specified target_database_name does not exist on the connection.
        ValidationError: If input arguments fail validation (e.g., target_database_name name not a string or empty).
        MongoOperationError: If there's an issue accessing DB connection or client (though specific client
                             exceptions will now propagate directly if not DatabaseNotFoundError or ValidationError).
    """
    from mongodb.collection_management import list_collections
    return list_collections(database=target_database_name)


def establish_new_collection(destination_database, new_collection_name):
    """
    Creates a new collection in a database.

    This function creates a new collection within the specified database.
    If the database does not already exist, it will be created automatically as part of this operation.

    Args:
        destination_database (str): Database name.
        new_collection_name (str): Collection name.

    Returns:
        Dict[str, Any]: A dictionary indicating the outcome of the collection creation. This dictionary contains the following keys:
            status (str): e.g., 'success', 'already_exists', or 'failure'.
            message (Optional[str]): A descriptive message, e.g., 'Collection created successfully' or an error detail.

    Raises:
        CollectionExistsError: Raised if the new_collection_name already exists and the API is configured not to overwrite or re-create it (e.g., due to idempotency settings or specific operational flags).
        InvalidNameError: Raised if the provided destination_database or new_collection_name name is invalid. This can be due to issues such as containing illegal characters, exceeding length limits, or violating naming conventions specific to the destination_database system.
        PydanticValidationError: If input arguments fail validation.
    """
    from mongodb.collection_management import create_collection
    return create_collection(database=destination_database, collection=new_collection_name)


def relabel_collection(
    database_context,
    source_collection_name,
    target_collection_name,
    overwrite_existing_target=False
):
    """
    Renames a collection in a MongoDB database.

    This function changes the name of an existing collection within a specified database to a new name.
    If a collection with the `newName` already exists, the behavior is controlled by the `dropTarget`
    parameter: if `dropTarget` is true, the existing target collection is dropped before the rename;
    otherwise, if the target collection exists and `dropTarget` is false, an error is raised.

    Args:
        database_context (str): Database name.
        source_collection_name (str): Collection name.
        target_collection_name (str): The new name for the collection.
        overwrite_existing_target (bool): If true, drops the target collection if it exists. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary indicating the outcome of the rename operation. It contains the following keys:
            status (str): Result of the operation, e.g., 'success' or 'failure'.
            message (Optional[str]): A descriptive message about the operation, e.g., 'Collection renamed successfully' or an error detail if 'status' is 'failure'.

    Raises:
        DatabaseNotFoundError: Raised if the specified 'database_context' does not exist.
        CollectionNotFoundError: Raised if the source 'source_collection_name' does not exist in the specified 'database_context'.
        TargetCollectionExistsError: Raised if a source_collection_name with 'new_name' already exists and 'drop_target' is false (or not provided).
        RenameToSameNameError: Raised if 'new_name' is the same as the source 'source_collection_name' name.
        InvalidNameError: Raised if 'new_name' is an invalid source_collection_name name according to MongoDB naming conventions.
        PydanticValidationError: If input arguments fail validation.
    """
    from mongodb.collection_management import rename_collection
    return rename_collection(
        database=database_context,
        collection=source_collection_name,
        newName=target_collection_name,
        dropTarget=overwrite_existing_target
    )


def remove_collection_from_db(db_name_for_deletion, collection_to_delete):
    """
    Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.

    This function removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.

    Args:
        db_name_for_deletion (str): Database name.
        collection_to_delete (str): Collection name.

    Returns:
        Dict[str, Any]: A dictionary detailing the outcome of the drop collection operation, containing the following keys:
            status (str): The operational status, e.g., 'success' or 'failure'.
            message (Optional[str]): A descriptive message about the operation's result, e.g., 'Collection dropped successfully' or 'Collection not found'.

    Raises:
        PydanticValidationError: If input arguments fail validation.
    """
    from mongodb.collection_management import drop_collection
    return drop_collection(database=db_name_for_deletion, collection=collection_to_delete)


def analyze_collection_structure(db_identifier, collection_identifier):
    """
    Describe the schema for a collection.

    This function describes the schema for a collection. It provides an analysis
    of the collection's schema, which is typically derived by sampling
    documents within that collection.

    Args:
        db_identifier (str): Database name.
        collection_identifier (str): Collection name.

    Returns:
        Dict[str, Any]: An analysis of the collection's schema, derived from
            sampling documents. This dictionary contains the following keys:

            fields (Dict[str, Any]): A dictionary where each key is a field name
                found in the sampled documents, and the value is another dictionary
                describing that field's schema. This inner dictionary (field schema)
                typically contains:

                count (int): The number of times this field was encountered in the
                    sampled documents.
                type (str): The most frequently observed BSON type for this field
                    (e.g., 'string', 'integer', 'oid', 'object', 'array', 'null').
                    Note: Type names might be lowercase or specific to the
                    underlying schema analysis library (e.g., 'oid' for ObjectId,
                    'object' for Document, 'array' for Array).
                types_count (Dict[str, int]): A dictionary mapping each observed
                    BSON type name (for this field) to the number of times it occurred.
                    Example: `{'string': 10, 'null': 2}`.
                prop_in_object (float): The probability (0.0 to 1.0) that this field
                    exists in a document, based on the sample.

                object (Optional[Dict[str, Any]]): If the field's dominant `type`
                    is 'object' (representing a BSON Document), this key will be
                    present and its value will be another dictionary structured
                    identically to this 'fields' dictionary, recursively describing
                    the schema of the sub-document. Absent if not a document type or
                    if the document type had no discernible sub-fields.

                array_types_count (Optional[Dict[str, int]]): If the field's dominant
                    `type` is 'array', this key may be present. Its value is a
                    dictionary mapping BSON type names found within the array elements
                    to their respective counts across all sampled arrays for this field.
                    Example: `{'string': 50, 'integer': 10}`.
                array_type (Optional[str]): If the field's dominant `type` is 'array',
                    this key may indicate the most frequent BSON type of the elements
                    within the arrays.

            num_documents_sampled (int): The total number of documents that were
                actually analyzed from the collection to generate this schema. This
                might be less than the collection's total document count if sampling
                was used (e.g., limited by MAX_SAMPLE_VALUES).

    Raises:
        DatabaseNotFoundError: If the specified db_identifier does not exist.
        CollectionNotFoundError: If the specified collection_identifier does not exist within the db_identifier.
        PydanticValidationError: If input arguments fail validation.
    """
    from mongodb.collection_management import collection_schema
    return collection_schema(database=db_identifier, collection=collection_identifier)


def get_collection_disk_usage(selected_database, selected_collection):
    """
    Gets the size of the collection.

    This function gets the size of the collection. It retrieves detailed storage statistics for a specified collection within a database.

    Args:
        selected_database (str): Database name.
        selected_collection (str): Collection name.

    Returns:
        Dict[str, Any]: A dictionary containing information about the collection's storage utilization, with the following keys:
            ns (str): The namespace of the collection.
            size (float): The total uncompressed size of the data in the collection in bytes.
            count (int): The number of documents in the collection.
            storage_size (float): The total amount of storage space allocated to this collection for document storage, including free space, in bytes.
            avg_obj_size (float): The average size of an object in the collection in bytes.
            num_indexes (int): The number of indexes on the collection.
            total_index_size (float): The total size of all indexes on the collection in bytes.
            scale_factor (Optional[float]): The scale factor used to calculate storage sizes, if applicable.

    Raises:
        DatabaseNotFoundError: If the specified selected_database does not exist.
        CollectionNotFoundError: If the specified selected_collection does not exist.
        ValidationError: If input arguments fail validation.
    """
    from mongodb.collection_management import collection_storage_size
    return collection_storage_size(database=selected_database, collection=selected_collection)


def describe_collection_indices(database_for_index_scan, collection_for_index_scan):
    """
    Describe the indexes for a collection.

    This function describes the indexes for a specified collection. It provides
    details for each index associated with the collection, such as its version,
    the fields it indexes along with their sort order, its unique name, and
    its namespace (typically 'database_name.collection_name').

    Args:
        database_for_index_scan (str): Database name.
        collection_for_index_scan (str): Collection name.

    Returns:
        Dict[str, Any]: A dictionary with a single key 'content', which maps to a list of dictionaries.
            The first dictionary in the list contains:
                text (str): A message formatted as "Found {index_count} indexes in the collection "{collection_name}":",
                            where {index_count} is the number of indexes found and {collection_name} is the name of the collection.
                type (str): The type of content, which is "text".
            The subsequent dictionaries in the list are generated for each index and contain:
                text (str): A message formatted as "Name "{index_name}", definition: {index_key_definition}",
                            where {index_name} is the name of the index and {index_key_definition} is the key definition as a string.
                type (str): The type of content, which is "text".
            This structure provides a detailed textual description of the indexes in the collection.

    Raises:
        InvalidInputError: If input arguments fail validation.
    """
    from mongodb.collection_management import collection_indexes
    return collection_indexes(
        database=database_for_index_scan,
        collection=collection_for_index_scan
    )


def build_collection_index(
    database_location,
    collection_target,
    index_key_specification,
    custom_index_name=None
):
    """
    Create an index for a collection.

    This function creates an index for a specified collection within a given database.
    It uses the provided 'database' and 'collection' names, and an index
    definition specified by 'keys'. An optional 'name' can be given to the index.

    Args:
        database_location (str): Database name.
        collection_target (str): Collection name.
        index_key_specification (Dict[str, Any]): The index definition.
        custom_index_name (Optional[str]): The name of the index. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary detailing the result of the index creation operation.
        It includes the following keys:
            name (str): The system-generated or user-provided name of the index.
            status_message (Optional[str]): A message indicating the outcome, such as
                'index created successfully', or details if the index already
                existed (e.g., 'index with this name/specification already
                exists, no action taken').

    Raises:
        IndexExistsError: An index with the same custom_index_name already exists, or an index with the
            same key specification already exists and database_location options prevent
            creating a duplicate or differently named index with the same
            specification.
        InvalidIndexSpecificationError: The 'index_key_specification' argument is invalid (e.g., empty,
            malformed, references non-existent fields, or uses unsupported
            index types) or the provided 'custom_index_name' for the index is invalid
            (e.g., empty, too long, contains illegal characters).
        ValidationError: If input arguments fail validation.
    """
    from mongodb.collection_management import create_index
    return create_index(
        database=database_location,
        collection=collection_target,
        keys=index_key_specification,
        name=custom_index_name
    )
