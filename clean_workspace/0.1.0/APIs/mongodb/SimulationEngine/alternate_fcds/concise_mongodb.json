[
  {
    "name": "aggregate",
    "description": "Executes an array of aggregation pipeline stages against a specified MongoDB collection within a given database and returns the aggregation results.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "The collection name."
        },
        "pipeline": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          },
          "description": "An array of aggregation stages to execute."
        }
      },
      "required": [
        "collection",
        "database",
        "pipeline"
      ]
    }
  },
  {
    "name": "collection_indexes",
    "description": "Describe a collection's indexes, detailing their version, indexed fields and sort order, unique name, and namespace (e.g., `database_name.collection_name`).",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "collection_schema",
    "description": "Describe the schema for a collection by sampling its documents.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "collection_storage_size",
    "description": "Retrieves detailed storage statistics for a specified collection within a database.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The name of the database."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "count",
    "description": "Gets the number of documents in a MongoDB collection, optionally filtered by a provided query.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        },
        "query": {
          "type": "object",
          "properties": {},
          "description": "A filter/query parameter that filters documents for counting, matching the `db.collection.count()` filter argument syntax; if `None` or omitted, counts all documents."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "create_collection",
    "description": "Creates a new collection within a database, automatically creating the database if it does not exist.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "create_index",
    "description": "Create an index for a collection in a database using an index definition (`keys`) and an optional name.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        },
        "keys": {
          "type": "object",
          "properties": {},
          "description": "A non-empty dictionary defining the index, mapping field names (string) to integer index types (e.g., 1 for ascending, -1 for descending)."
        },
        "name": {
          "type": "string",
          "description": "The name of the index; defaults to `None`."
        }
      },
      "required": [
        "collection",
        "database",
        "keys"
      ]
    }
  },
  {
    "name": "delete_many",
    "description": "Removes all documents that match a specified filter from a given MongoDB collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Name of the collection."
        },
        "filter": {
          "type": "object",
          "properties": {},
          "description": "A query filter for deletion criteria, matching `db.collection.deleteMany()` syntax. Defaults to `None`, which applies no filter."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "drop_collection",
    "description": "Removes a collection or view from the database, including any associated indexes.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "drop_database",
    "description": "Removes the specified database and its associated data files.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The string name of the database to drop; cannot be empty or whitespace."
        }
      },
      "required": [
        "database"
      ]
    }
  },
  {
    "name": "find",
    "description": "Run a MongoDB find query against a specified database and collection, supporting filtering, field projection, result limiting, and sorting using MongoDB `db.collection.find()` and `cursor.sort()` method syntax.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The database name."
        },
        "collection": {
          "type": "string",
          "description": "MongoDB collection name."
        },
        "filter": {
          "type": "object",
          "properties": {},
          "description": "A query filter dictionary, matching the syntax of the `db.collection.find()` query argument; defaults to None."
        },
        "projection": {
          "type": "object",
          "properties": {},
          "description": "A projection matching the syntax of `db.collection.find()`'s projection argument. Defaults to `None`."
        },
        "limit": {
          "type": "integer",
          "description": "Maximum number of documents to return; defaults to 10."
        },
        "sort": {
          "type": "object",
          "properties": {},
          "description": "A document specifying the sort order, matching the `cursor.sort()` syntax. Defaults to `None`."
        }
      },
      "required": [
        "collection",
        "database"
      ]
    }
  },
  {
    "name": "insert_many",
    "description": "Insert an array of documents into a MongoDB collection; collections are automatically created on first insert if valid and permitted.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        },
        "documents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          },
          "description": "An array of dictionaries, where each dictionary represents a MongoDB document, and the array must not be empty."
        }
      },
      "required": [
        "collection",
        "database",
        "documents"
      ]
    }
  },
  {
    "name": "list_collections",
    "description": "List all collections for a given database; collection names are strings.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "A non-empty string representing the database name."
        }
      },
      "required": [
        "database"
      ]
    }
  },
  {
    "name": "list_databases",
    "description": "List all databases for a MongoDB connection.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "rename_collection",
    "description": "Renames an existing collection to a new name, dropping the target collection if it exists and `dropTarget` is true, otherwise raising an error.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "Database name."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        },
        "newName": {
          "type": "string",
          "description": "The new name for the collection."
        },
        "dropTarget": {
          "type": "boolean",
          "description": "If `True`, drops the target collection if it exists; defaults to `False`."
        }
      },
      "required": [
        "collection",
        "database",
        "newName"
      ]
    }
  },
  {
    "name": "switch_connection",
    "description": "Switch to a different MongoDB connection, either by providing a `connectionString` or utilizing an existing configuration if none is supplied.",
    "parameters": {
      "type": "object",
      "properties": {
        "connectionString": {
          "type": "string",
          "description": "A MongoDB connection string to switch to, formatted as `mongodb://` or `mongodb+srv://`; defaults to `None` to use a default connection."
        }
      }
    }
  },
  {
    "name": "update_many",
    "description": "Updates all documents in a collection matching a specified filter, inserting a new document if 'upsert' is true and no documents match.",
    "parameters": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The name of the database."
        },
        "collection": {
          "type": "string",
          "description": "Collection name."
        },
        "update": {
          "type": "object",
          "properties": {},
          "description": "An update document that describes modifications to apply using update operator expressions, such as `$set` or `$inc`."
        },
        "filter": {
          "type": "object",
          "properties": {},
          "description": "Specifies the update's selection criteria; if `None` or an empty dictionary, all documents in the collection are updated. Defaults to `None`."
        },
        "upsert": {
          "type": "boolean",
          "description": "Controls whether to insert a new document if no documents match the filter, defaulting to `False`."
        }
      },
      "required": [
        "collection",
        "database",
        "update"
      ]
    }
  }
]