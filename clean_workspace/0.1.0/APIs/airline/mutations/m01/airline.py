# This file is automatically generated by the MutationBuilder

def get_available_airports():
    """
    List all airports and their corresponding cities based on available flights.

    Returns:
        Dict[str, str]: A dictionary mapping airport IATA codes to city names for airports with flights. 
                        Each key represents the city IATA code and value represents the city name.
    """
    from airline.airline import list_all_airports
    return list_all_airports()


def find_nonstop_flights(departure_airport_code, arrival_airport_code, flight_search_date):
    """
    Search direct flights between two cities on a specific date.

    Args:
        departure_airport_code (str): The origin city airport in three letters, such as 'JFK'.
        arrival_airport_code (str): The destination city airport in three letters, such as 'LAX'.
        flight_search_date (str): The date of the flight in the format 'YYYY-MM-DD'.

    Returns:
        List[Dict[str, Any]]: A list of available direct flights. Each flight is a dictionary with the following keys:
            - flight_number(str): The flight number.
            - origin(str): The origin city airport in three letters, such as 'JFK'.
            - destination(str): The destination city airport in three letters, such as 'LAX'.
            - scheduled_departure_time_est(str): The scheduled departure time in EST. Date format is 'HH:MM:SS'.
            - scheduled_arrival_time_est(str): The scheduled arrival time in EST. Date format is 'HH:MM:SS'.
            - status(str): The status of the flight.
            - actual_departure_time_est(str): The actual departure time in EST. Date format is 'YYYY-MM-DDTHH:MM:SS'.
            - actual_arrival_time_est(str): The actual arrival time in EST. Date format is 'YYYY-MM-DDTHH:MM:SS'.
            - available_seats(Dict[str, int]): The number of available seats. It can have following keys:
                - basic_economy(int): The number of available basic economy seats.
                - economy(int): The number of available economy seats.
                - business(int): The number of available business seats.
            - prices(Dict[str, float]): The price of the flight. It can have following keys:
                - basic_economy(float): The price of the basic economy seat.
                - economy(float): The price of the economy seat.
                - business(float): The price of the business seat.

    Raises:
        CustomValidationError: If the departure_airport_code, arrival_airport_code, or flight_search_date is not a non-empty string.
    """
    from airline.airline import search_direct_flight
    return search_direct_flight(
        origin=departure_airport_code,
        destination=arrival_airport_code,
        date=flight_search_date
    )


def find_connecting_flights(departure_city_code, arrival_city_code, desired_travel_date):
    """
    Search one-stop flights between two cities on a specific date.

    Args:
        departure_city_code (str): The origin city airport in three letters, such as 'JFK'.
        arrival_city_code (str): The destination city airport in three letters, such as 'LAX'.
        desired_travel_date (str): The date of the flight in the format 'YYYY-MM-DD'.

    Returns:
        List[List[Dict[str, Any]]]: A list of available one-stop flight combinations.
            Each flight is a list of two dictionaries, each representing a flight. Each element will have only two flights
            First element is the first flight, second element is the second flight.
            Each flight is a dictionary with the following keys:
                - flight_number(str): The flight number.
                - origin(str): The origin city airport in three letters, such as 'JFK'.
                - destination(str): The destination city airport in three letters, such as 'LAX'.
                - scheduled_departure_time_est(str): The scheduled departure time in EST. Date format is 'HH:MM:SS'.
                - scheduled_arrival_time_est(str): The scheduled arrival time in EST. Date format is 'HH:MM:SS'.
                - status(str): The status of the flight.
                - actual_departure_time_est(str): The actual departure time in EST. Date format is 'YYYY-MM-DDTHH:MM:SS'.
                - actual_arrival_time_est(str): The actual arrival time in EST. Date format is 'YYYY-MM-DDTHH:MM:SS'.
                - available_seats(Dict[str, int]): The number of available seats. It can have following keys:
                    - basic_economy(int): The number of available basic economy seats.
                    - economy(int): The number of available economy seats.
                    - business(int): The number of available business seats.
                - prices(Dict[str, float]): The price of the flight. It can have following keys:
                    - basic_economy(float): The price of the basic economy seat.
                    - economy(float): The price of the economy seat.
                    - business(float): The price of the business seat.

    Raises:
        CustomValidationError: If the departure_city_code, arrival_city_code, or desired_travel_date is not a non-empty string.
    """
    from airline.airline import search_onestop_flight
    return search_onestop_flight(
        origin=departure_city_code,
        destination=arrival_city_code,
        date=desired_travel_date
    )


def fetch_customer_profile(customer_account_id):
    """
    Get the details of a user, including their reservations.

    Args:
        customer_account_id (str): The user id, such as 'sara_doe_496'.

    Returns:
        Dict[str, Any]: The user's details. The structure is as follows:
            - name (Dict[str, str]): A dictionary containing the user's name.
                - first_name (str): The user's first name (e.g., "Mia").
                - last_name (str): The user's last name (e.g., "Li").
            - address (Dict[str, str]): A dictionary containing the user's address.
                - address1 (str): The primary address line (e.g., "975 Sunset Drive").
                - address2 (str): The secondary address line, if applicable (e.g., "Suite 217").
                - city (str): The city name (e.g., "Austin").
                - state (str): The state code (e.g., "TX").
                - zip (str): The ZIP code (e.g., "78750").
                - country (str): The country name (e.g., "USA").
            - email (str): The user's email address (e.g., "mia.li3818@example.com").
            - dob (str): The user's date of birth in "YYYY-MM-DD" format (e.g., "1990-04-05").
            - payment_methods (Dict[str, Dict[str, Any]]): A mapping of payment method IDs
                to payment method details. Each payment method has the following structure:
                - source (str): The payment source type ("credit_card", "gift_card", or "certificate").
                - id (str): The unique payment method identifier.
                - brand (str, optional): The credit card brand (e.g., "visa") for credit cards.
                - last_four (str, optional): The last four digits of the card for credit cards.
                - amount (int, optional): The available balance for gift cards and certificates.
            - saved_passengers (List[Dict[str, str]]): A list of saved passenger profiles.
                Each passenger has the following structure:
                - first_name (str): The passenger's first name (e.g., "Amelia").
                - last_name (str): The passenger's last name (e.g., "Ahmed").
                - dob (str): The passenger's date of birth in "YYYY-MM-DD" format (e.g., "1957-03-21").
            - membership (str): The user's membership level ("gold", "silver", or "regular").
            - reservations (List[str]): A list of reservation IDs associated with the user
                (e.g., ["NO6JO3", "AIXC49", "HKEG34"]).

    Raises:
        CustomValidationError: If customer_account_id is not a non-empty string.
        UserNotFoundError: If the user with the specified customer_account_id is not found in the system.
    """
    from airline.airline import get_user_details
    return get_user_details(user_id=customer_account_id)


def retrieve_booking_information(booking_reference_id):
    """
    Get the details of a reservation.

    Args:
        booking_reference_id (str): The reservation id, such as '8JX2WO'.

    Returns:
        Dict[str, Any]: The reservation details.
            It can have following keys:
            - reservation_id(str): The reservation ID.
            - user_id(str): The user ID.
            - origin(str): The origin city airport in three letters, such as 'JFK'.
            - destination(str): The destination city airport in three letters, such as 'LAX'.
            - flight_type(str): The type of flight.
            - cabin(str): The cabin class.
            - flights(List[Dict[str, Any]]): The list of flights. Each flight is a dictionary with the following keys:
                - flight_number(str): The flight number.
                - origin(str): The origin city airport in three letters, such as 'JFK'.
                - destination(str): The destination city airport in three letters, such as 'LAX'.
                - date(str): The date of the flight in the format 'YYYY-MM-DD'.
                - price(float): The price of the flight.
            - passengers(List[Dict[str, str]]): The list of passengers. Each passenger is a dictionary with the following keys:
                - first_name(str): The first name of the passenger.
                - last_name(str): The last name of the passenger.
                - dob(str): The date of birth of the passenger.
            - payment_history(List[Dict[str, Any]]): The list of payment history. Each payment is a dictionary with the following keys:
                - payment_id(str): The ID of the payment.
                - amount(float): The amount of the payment.
            - created_at(str): The creation time of the reservation.
            - total_baggages(int): The total number of baggage items.
            - nonfree_baggages(int): The number of non-free baggage items.
            - insurance(str): The insurance status.

    Raises:
        CustomValidationError: If the reservation ID is not a non-empty string.
        ReservationNotFoundError: If the reservation is not found.
    """
    from airline.airline import get_reservation_details
    return get_reservation_details(reservation_id=booking_reference_id)


def evaluate_mathematical_query(formula_to_compute):
    """
    Calculate the result of a mathematical expression.

    Args:
        formula_to_compute (str): The mathematical expression to calculate.

    Returns:
        str: The result of the calculation.

    Raises:
        CustomValidationError: If the formula_to_compute is not a non-empty string.
        InvalidExpressionError: If the formula_to_compute contains invalid characters.
        ValueError: If the formula_to_compute is invalid.
    """
    from airline.airline import calculate
    return calculate(expression=formula_to_compute)


def void_flight_booking(booking_id_to_cancel):
    """
    Cancel the whole reservation.

    Args:
        booking_id_to_cancel (str): The reservation ID to cancel.

    Returns:
        Dict[str, Any]: The updated reservation with a 'cancelled' status. It can have following keys:
            - reservation_id(str): The reservation ID.
            - user_id(str): The user ID.
            - origin(str): The origin city airport in three letters, such as 'JFK'.
            - destination(str): The destination city airport in three letters, such as 'LAX'.
            - flight_type(str): The type of flight.
            - cabin(str): The cabin class.
            - flights(List[Dict[str, Any]]): The list of flights. Each flight is a dictionary with the following keys:
                - flight_number(str): The flight number.
                - origin(str): The origin city airport in three letters, such as 'JFK'.
                - destination(str): The destination city airport in three letters, such as 'LAX'.
                - date(str): The date of the flight in the format 'YYYY-MM-DD'.
                - price(float): The price of the flight.
            - passengers(List[Dict[str, str]]): The list of passengers. Each passenger is a dictionary with the following keys:
                - first_name(str): The first name of the passenger.
                - last_name(str): The last name of the passenger.
                - dob(str): The date of birth of the passenger.
            - payment_history(List[Dict[str, Any]]): The list of payment history. Each payment is a dictionary with the following keys:
                - payment_id(str): The ID of the payment.
                - amount(float): The amount of the payment.
            - created_at(str): The creation time of the reservation.
            - total_baggages(int): The total number of baggage items.
            - nonfree_baggages(int): The number of non-free baggage items.
            - insurance(str): The insurance status.

    Raises:
        CustomValidationError: If the reservation ID is not a non-empty string.
        ReservationNotFoundError: If the reservation is not found.
    """
    from airline.airline import cancel_reservation
    return cancel_reservation(reservation_id=booking_id_to_cancel)


def modify_booking_travelers(target_booking_id, updated_passenger_list):
    """
    Update the passenger information of a reservation.

    Args:
        target_booking_id (str): The reservation ID to update.
        updated_passenger_list (List[Dict[str, Any]]): The new list of passengers.

    Returns:
        Dict[str, Any]: The updated reservation. It can have following keys:
            - reservation_id(str): The reservation ID.
            - user_id(str): The user ID.
            - origin(str): The origin city airport in three letters, such as 'JFK'.
            - destination(str): The destination city airport in three letters, such as 'LAX'.
            - flight_type(str): The type of flight.
            - cabin(str): The cabin class.
            - flights(List[Dict[str, Any]]): The list of flights. Each flight is a dictionary with the following keys:
                - flight_number(str): The flight number.
                - origin(str): The origin city airport in three letters, such as 'JFK'.
                - destination(str): The destination city airport in three letters, such as 'LAX'.
                - date(str): The date of the flight in the format 'YYYY-MM-DD'.
                - price(float): The price of the flight.
            - passengers(List[Dict[str, str]]): The list of passengers. Each passenger is a dictionary with the following keys:
                - first_name(str): The first name of the passenger.
                - last_name(str): The last name of the passenger.
                - dob(str): The date of birth of the passenger.
            - payment_history(List[Dict[str, Any]]): The list of payment history. Each payment is a dictionary with the following keys:
                - payment_id(str): The ID of the payment.
                - amount(float): The amount of the payment.
            - created_at(str): The creation time of the reservation.
            - total_baggages(int): The total number of baggage items.
            - nonfree_baggages(int): The number of non-free baggage items.
            - insurance(str): The insurance status.

    Raises:
        CustomValidationError: If the reservation ID is not a non-empty string.
        PydanticValidationError: If the updated_passenger_list are not valid.
        ReservationNotFoundError: If the reservation is not found.
        MismatchedPassengerCountError: If the number of updated_passenger_list does not match.
    """
    from airline.airline import update_reservation_passengers
    return update_reservation_passengers(
        reservation_id=target_booking_id,
        passengers=updated_passenger_list
    )


def amend_booking_luggage_details(
    booking_id_for_baggage_change,
    new_total_baggage_count,
    new_chargeable_baggage_count,
    payment_method_for_fees
):
    """
    Update the baggage information of a reservation.

    Args:
        booking_id_for_baggage_change (str): The reservation ID to update.
        new_total_baggage_count (int): The new total number of baggage items.
        new_chargeable_baggage_count (int): The new number of non-free baggage items.
        payment_method_for_fees (str): The ID of the payment method to use.

    Returns:
        Dict[str, Any]: The updated reservation. It can have following keys:
            - reservation_id(str): The reservation ID.
            - user_id(str): The user ID.
            - origin(str): The origin city airport in three letters, such as 'JFK'.
            - destination(str): The destination city airport in three letters, such as 'LAX'.
            - flight_type(str): The type of flight.
            - cabin(str): The cabin class.
            - flights(List[Dict[str, Any]]): The list of flights. Each flight is a dictionary with the following keys:
                - flight_number(str): The flight number.
                - origin(str): The origin city airport in three letters, such as 'JFK'.
                - destination(str): The destination city airport in three letters, such as 'LAX'.
                - date(str): The date of the flight in the format 'YYYY-MM-DD'.
                - price(float): The price of the flight.
            - passengers(List[Dict[str, str]]): The list of passengers. Each passenger is a dictionary with the following keys:
                - first_name(str): The first name of the passenger.
                - last_name(str): The last name of the passenger.
                - dob(str): The date of birth of the passenger.
            - payment_history(List[Dict[str, Any]]): The list of payment history. Each payment is a dictionary with the following keys:
                - payment_id(str): The ID of the payment.
                - amount(float): The amount of the payment.
            - created_at(str): The creation time of the reservation.
            - total_baggages(int): The total number of baggage items.
            - nonfree_baggages(int): The number of non-free baggage items.
            - insurance(str): The insurance status.

    Raises:
        CustomValidationError: If the reservation ID, total baggages, non-free baggages, or payment ID is not a non-empty string.
        ReservationNotFoundError: If the reservation is not found.
        UserNotFoundError: If the user is not found.
        PaymentMethodNotFoundError: If the payment method is not found.
        InsufficientFundsError: If the gift card balance is not enough.
    """
    from airline.airline import update_reservation_baggages
    return update_reservation_baggages(
        reservation_id=booking_id_for_baggage_change,
        total_baggages=new_total_baggage_count,
        nonfree_baggages=new_chargeable_baggage_count,
        payment_id=payment_method_for_fees
    )


def change_booking_itinerary(
    booking_id_for_flight_change,
    new_cabin_selection,
    replacement_flight_segments,
    payment_source_for_update
):
    """
    Update the flight information of a reservation.

    Args:
        booking_id_for_flight_change (str): The reservation ID to update.
        new_cabin_selection (str): The new cabin class.
        replacement_flight_segments (List[Dict[str, Any]]): The new list of flights.
        payment_source_for_update (str): The ID of the payment method to use.

    Returns:
        Dict[str, Any]: The updated reservation. It can have following keys:
            - reservation_id(str): The reservation ID.
            - user_id(str): The user ID.
            - origin(str): The origin city airport in three letters, such as 'JFK'.
            - destination(str): The destination city airport in three letters, such as 'LAX'.
            - flight_type(str): The type of flight.
            - cabin(str): The cabin class.
            - flights(List[Dict[str, Any]]): The list of flights. Each flight is a dictionary with the following keys:
                - flight_number(str): The flight number.
                - origin(str): The origin city airport in three letters, such as 'JFK'.
                - destination(str): The destination city airport in three letters, such as 'LAX'.
                - date(str): The date of the flight in the format 'YYYY-MM-DD'.
                - price(float): The price of the flight.
            - passengers(List[Dict[str, Any]]): The list of passengers. Each passenger is a dictionary with the following keys:
                - first_name(str): The first name of the passenger.
                - last_name(str): The last name of the passenger.
                - dob(str): The date of birth of the passenger.
            - payment_history(List[Dict[str, Any]]): The list of payment history. Each payment is a dictionary with the following keys:
                - payment_id(str): The ID of the payment.
                - amount(float): The amount of the payment.
            - created_at(str): The creation time of the reservation.
            - total_baggages(int): The total number of baggage items.
            - nonfree_baggages(int): The number of non-free baggage items.
            - insurance(str): The insurance status.

    Raises:
        CustomValidationError: If the reservation ID, new_cabin_selection, or payment ID is not a non-empty string.
        PydanticValidationError: If the replacement_flight_segments are not valid.
        ReservationNotFoundError: If the reservation is not found.
        UserNotFoundError: If the user is not found.
        FlightNotFoundError: If the flight is not found.
        SeatsUnavailableError: If the seats are not available.
    """
    from airline.airline import update_reservation_flights
    return update_reservation_flights(
        reservation_id=booking_id_for_flight_change,
        cabin=new_cabin_selection,
        flights=replacement_flight_segments,
        payment_id=payment_source_for_update
    )


def issue_travel_voucher(recipient_customer_id, certificate_monetary_value):
    """
    Send a certificate to a user.

    Args:
        recipient_customer_id (str): The ID of the user to send the certificate to.
        certificate_monetary_value (int): The amount of the certificate.

    Returns:
        str: A confirmation message.

    Raises:
        CustomValidationError: If the user ID is not a non-empty string or certificate_monetary_value is not a positive integer.
        UserNotFoundError: If the user is not found.
    """
    from airline.airline import send_certificate
    return send_certificate(user_id=recipient_customer_id, amount=certificate_monetary_value)


def log_internal_thought(thought_process_text):
    """
    Use the tool to think about something. It will not obtain new information 
    or change the database, but just append the thought to the log.

    Args:
        thought_process_text (str): A thought to think about.

    Returns:
        str: An empty string.
    """
    from airline.airline import think
    return think(thought=thought_process_text)


def escalate_to_support_agent(case_summary_for_escalation):
    """
    Transfer the user to a human agent, with a summary of the user's issue.

    Args:
        case_summary_for_escalation (str): A summary of the user's issue.

    Returns:
        str: A confirmation message.

    Raises:
        CustomValidationError: If the case_summary_for_escalation is not a non-empty string.
    """
    from airline.airline import transfer_to_human_agents
    return transfer_to_human_agents(summary=case_summary_for_escalation)


def create_new_booking(
    traveler_user_id,
    flight_origin_iata,
    flight_destination_iata,
    journey_type,
    selected_seating_class,
    chosen_flight_legs,
    list_of_travelers,
    payment_details,
    total_luggage_count,
    paid_luggage_count,
    travel_protection_choice
):
    """
    Book a reservation for flights with specified passengers and payment methods.

    Args:
        traveler_user_id (str): The ID of the user making the reservation (e.g., "sara_doe_496").
        flight_origin_iata (str): The origin airport code in three letters (e.g., "JFK").
        flight_destination_iata (str): The destination airport code in three letters (e.g., "LAX").
        journey_type (str): The type of flight ("one_way" or "round_trip").
        selected_seating_class (str): The cabin class ("basic_economy", "economy", or "business").
        chosen_flight_legs (List[Dict[str, Any]]): A list of flight dictionaries. Each flight dictionary
            must contain the following structure:
            - flight_number (str): The unique identifier for the flight (e.g., "HAT001").
            - date (str): The flight date in "YYYY-MM-DD" format (e.g., "2024-05-15").
        list_of_travelers (List[Dict[str, Any]]): A list of passenger dictionaries. Each passenger
            dictionary must contain the following structure:
            - first_name (str): The passenger's first name (e.g., "John").
            - last_name (str): The passenger's last name (e.g., "Doe").
            - dob (str): The passenger's date of birth in "YYYY-MM-DD" format (e.g., "1990-01-01").
        payment_details (List[Dict[str, Any]]): A list of payment method dictionaries. Each
            payment dictionary must contain the following structure:
            - payment_id (str): The ID of the payment method to use (e.g., "credit_card_4421486").
            - amount (float): The amount to be charged for this payment (e.g., 250.0).
        total_luggage_count (int): The total number of baggage items (non-negative integer, e.g., 2).
        paid_luggage_count (int): The number of non-free baggage items (non-negative integer, e.g., 1).
        travel_protection_choice (str): Whether to include insurance ("yes" or "no").

    Returns:
        Dict[str, Any]: The newly created reservation. The structure is as follows:
            - reservation_id (str): The unique identifier for the reservation (e.g., "8JX2WO").
            - user_id (str): The ID of the user who made the reservation.
            - origin (str): The origin airport code (e.g., "JFK").
            - destination (str): The destination airport code (e.g., "LAX").
            - flight_type (str): The type of flight ("one_way" or "round_trip").
            - cabin (str): The cabin class ("basic_economy", "economy", or "business").
            - flights (List[Dict[str, Any]]): A list of flight dictionaries. Each flight has
                the following structure:
                - flight_number (str): The unique identifier for the flight (e.g., "HAT001").
                - date (str): The flight date in "YYYY-MM-DD" format (e.g., "2024-05-15").
                - price (int): The price for this flight in dollars.
                - origin (str): The origin airport code (e.g., "JFK").
                - destination (str): The destination airport code (e.g., "LAX").
            - passengers (List[Dict[str, str]]): A list of passenger dictionaries. Each passenger
                has the following structure:
                - first_name (str): The passenger's first name (e.g., "John").
                - last_name (str): The passenger's last name (e.g., "Doe").
                - dob (str): The passenger's date of birth in "YYYY-MM-DD" format (e.g., "1990-01-01").
            - payment_history (List[Dict[str, Any]]): A list of payment dictionaries. Each payment
                has the following structure:
                - payment_id (str): The ID of the payment method used (e.g., "credit_card_4421486").
                - amount (float): The amount charged for this payment.
            - created_at (str): The timestamp when the reservation was created (e.g., "2024-05-15T15:00:00").
            - total_baggages (int): The total number of baggage items.
            - nonfree_baggages (int): The number of non-free baggage items.
            - insurance (str): Whether insurance was included ("yes" or "no").
            - status (str, optional): The reservation status (e.g., "confirmed", "cancelled").

    Raises:
        CustomValidationError: If any string argument (traveler_user_id, flight_origin_iata, flight_destination_iata, journey_type, 
                              selected_seating_class, travel_protection_choice) is not a non-empty string, or if total_luggage_count 
                              or paid_luggage_count is not a non-negative integer.
        PydanticValidationError: If the list_of_travelers, chosen_flight_legs, or payment_details lists do not 
                                match their expected model structures (Passenger, FlightInput, 
                                PaymentMethodInReservation respectively).
        UserNotFoundError: If the user with the specified traveler_user_id is not found.
        FlightNotFoundError: If any flight in the chosen_flight_legs list is not found or not available 
                            on the specified date.
        SeatsUnavailableError: If there are not enough seats available in the specified selected_seating_class 
                              class for the number of list_of_travelers.
        PaymentMethodNotFoundError: If any payment_id in payment_details is not found in 
                                   the user's payment methods.
        InsufficientFundsError: If the payment method balance (gift card or certificate) 
                               is insufficient for the required amount.
        ValueError: If the total payment amount does not match the calculated total price 
                   (flight costs + travel_protection_choice + baggage fees).
    """
    from airline.airline import book_reservation
    return book_reservation(
        user_id=traveler_user_id,
        origin=flight_origin_iata,
        destination=flight_destination_iata,
        flight_type=journey_type,
        cabin=selected_seating_class,
        flights=chosen_flight_legs,
        passengers=list_of_travelers,
        payment_methods=payment_details,
        total_baggages=total_luggage_count,
        nonfree_baggages=paid_luggage_count,
        insurance=travel_protection_choice
    )
