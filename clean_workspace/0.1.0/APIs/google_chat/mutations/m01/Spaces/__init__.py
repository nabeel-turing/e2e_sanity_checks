# This file is automatically generated by the MutationBuilder

def enumerate_member_spaces(page_limit=None, pagination_cursor=None, space_type_filter_query=None):
    """
    Lists spaces the current user is a member of, with optional filtering and pagination.

    Args:
        page_limit (int, optional): Max number of spaces to return (default 100, max 1000).
                                  Must be between 1 and 1000 if provided.
        pagination_cursor (str, optional): Pagination token (used as an offset).
        space_type_filter_query (str, optional): Filter by space type using 'OR' operator only, no 'AND' operator is allowed. Example:
            'spaceType = "SPACE" OR spaceType = "GROUP_CHAT"'.
            Allowed values for spaceType:
                - "SPACE"
                - "GROUP_CHAT"
                - "DIRECT_MESSAGE"

    Returns:
        Dict[str, Any]:
            "spaces": List of space objects. Each includes:
                - name (str): Format "spaces/{space}"
                - spaceType (str): "SPACE", "GROUP_CHAT", or "DIRECT_MESSAGE"
                - displayName (str, optional)
                - externalUserAllowed (bool, optional)
                - spaceThreadingState (str, optional):
                    "SPACE_THREADING_STATE_UNSPECIFIED", "THREADED_MESSAGES",
                    "GROUPED_MESSAGES", "UNTHREADED_MESSAGES"
                - spaceHistoryState (str, optional):
                    "HISTORY_STATE_UNSPECIFIED", "HISTORY_OFF", "HISTORY_ON"
                - createTime (str, optional)
                - lastActiveTime (str, optional)
                - importMode (bool, optional)
                - adminInstalled (bool, optional)
                - spaceUri (str, optional)
                - predefinedPermissionSettings (str, optional):
                    "PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED",
                    "COLLABORATION_SPACE", "ANNOUNCEMENT_SPACE"
                - spaceDetails (dict, optional):
                    - description (str, optional)
                    - guidelines (str, optional)
                - membershipCount (dict, optional):
                    - joinedDirectHumanUserCount (int)
                    - joinedGroupCount (int)
                - accessSettings (dict, optional):
                    - accessState (str): "ACCESS_STATE_UNSPECIFIED", "PRIVATE", "DISCOVERABLE"
                    - audience (str, optional)
                - singleUserBotDm (bool, optional)

            "nextPageToken" (str): Token for next page if more results.

        If filter string content is invalid (as processed by internal logic):
            { "error": "<description>" } (This is a return value, not an exception)

    Raises:
        TypeError: If page_limit is not an integer, or
                   pagination_cursor is not a string, or
                   space_type_filter_query is not a string.
        InvalidPageSizeError: If page_limit is provided but is not between 1 and 1000 (inclusive).
    """
    from google_chat.Spaces import list
    return list(pageSize=page_limit, pageToken=pagination_cursor, filter=space_type_filter_query)


def find_organization_spaces_as_admin(
    require_admin_privileges,
    search_result_limit=None,
    search_pagination_token=None,
    space_filter_expression=None,
    sort_order_specification=None
):
    """
    Searches for Chat spaces in a Google Workspace organization using administrator access.

    Supported fields in the query include:
    - display_name: Uses the HAS (`:`) operator.
    - external_user_allowed: Accepts "true" or "false".
    - create_time, last_active_time: Accepts `=`, `<`, `>`, `<=`, `>=` with timestamps in RFC-3339 format.
    - space_history_state: Accepts specific enum values.
    - space_type: Only "SPACE" is allowed (required).
    - customer: Must be "customers/my_customer" (required).

    Args:
        require_admin_privileges (bool): Required. Must be `True`. Enables administrator-only
            access. Requires admin scopes such as:
            - `chat.admin.spaces.readonly`
            - `chat.admin.spaces`
        search_result_limit (int, optional): The maximum number of spaces to return. If unspecified,
            up to 100 spaces are returned. Maximum allowed value is 1000. Values greater
            than 1000 are capped at 1000. Negative values are ignored and default to 100.
        search_pagination_token (str, optional): A token received from a previous search call.
            Used for pagination; represents an offset.
        space_filter_expression (str): Required. A query string combining fields using the `AND` operator.
            Required conditions:
                - customer = "customers/my_customer"
                - space_type = "SPACE"
            Supported query fields:
                - display_name: e.g., `display_name:"hello world"`
                - create_time: e.g., `create_time >= "2022-01-01T00:00:00Z"`
                - last_active_time: e.g., `last_active_time < "2024-12-01T00:00:00Z"`
                - external_user_allowed: "true" or "false"
                - space_history_state: One of the enum values below
            Operators:
                - Allowed: `=`, `<`, `>`, `<=`, `>=`, `:`
                - Only `AND` is supported between conditions
        sort_order_specification (str, optional): Specifies result ordering. Format:
            `field ASC|DESC`. Supported fields:
            - `membership_count.joined_direct_human_user_count`
            - `last_active_time`
            - `create_time`
            Default is `create_time ASC`.

    Returns:
        dict: A dictionary with the following structure:
            - spaces (List[dict]): A list of matching space objects. Each space includes:
                - name (str): Resource name, e.g., "spaces/AAA".
                - spaceType (str): Type of space. One of:
                    - "SPACE"
                    - "GROUP_CHAT"
                    - "DIRECT_MESSAGE"
                - displayName (str): Optional display name of the space.
                - externalUserAllowed (bool): Whether external users are allowed.
                - spaceThreadingState (str): Threading behavior. One of:
                    - "SPACE_THREADING_STATE_UNSPECIFIED"
                    - "THREADED_MESSAGES"
                    - "GROUPED_MESSAGES"
                    - "UNTHREADED_MESSAGES"
                - spaceHistoryState (str): History configuration. One of:
                    - "HISTORY_STATE_UNSPECIFIED"
                    - "HISTORY_OFF"
                    - "HISTORY_ON"
                - createTime (str): RFC-3339 timestamp when the space was created.
                - lastActiveTime (str): RFC-3339 timestamp of last message activity.
                - importMode (bool): Whether the space was created in import mode.
                - adminInstalled (bool): Whether the space was created by an admin.
                - spaceUri (str): Direct URL to open the space.
                - singleUserBotDm (bool): Whether it's a bot-human direct message.
                - predefinedPermissionSettings (str): Optional predefined permissions. One of:
                    - "PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED"
                    - "COLLABORATION_SPACE"
                    - "ANNOUNCEMENT_SPACE"
                - spaceDetails (dict):
                    - description (str): Description of the space.
                    - guidelines (str): Rules and expectations.
                - membershipCount (dict):
                    - joinedDirectHumanUserCount (int): Count of joined human users.
                    - joinedGroupCount (int): Count of joined groups.
                - accessSettings (dict):
                    - accessState (str): One of:
                        - "ACCESS_STATE_UNSPECIFIED"
                        - "PRIVATE"
                        - "DISCOVERABLE"
                    - audience (str): Resource name of discoverable audience, e.g., "audiences/default".
            - nextPageToken (str, optional): Token for retrieving the next page of results.

    Raises:
        ValueError: If required space_filter_expression parameters (`customer`, `space_type`) are missing
            or invalid.
        PermissionError: If `require_admin_privileges` is not `True`.
    """
    from google_chat.Spaces import search
    return search(
        useAdminAccess=require_admin_privileges,
        pageSize=search_result_limit,
        pageToken=search_pagination_token,
        query=space_filter_expression,
        orderBy=sort_order_specification
    )


def retrieve_space_information(space_resource_name, as_administrator=None):
    """
    Returns details of a Chat space by resource name.

    Args:
        space_resource_name (str): Required. Resource name of the space. Format: "spaces/{space}".
        as_administrator (bool, optional): When True, the caller can view any space
            as an admin. Otherwise, the user must be a member.

    Returns:
        Dict[str, Any]: A space object if found and visible. Includes:
            - name (str)
            - spaceType (str): "SPACE", "GROUP_CHAT", "DIRECT_MESSAGE"
            - displayName (str, optional)
            - externalUserAllowed (bool, optional)
            - spaceThreadingState (str, optional):
                "SPACE_THREADING_STATE_UNSPECIFIED", "THREADED_MESSAGES",
                "GROUPED_MESSAGES", "UNTHREADED_MESSAGES"
            - spaceHistoryState (str, optional):
                "HISTORY_STATE_UNSPECIFIED", "HISTORY_OFF", "HISTORY_ON"
            - createTime (str, optional)
            - lastActiveTime (str, optional)
            - importMode (bool, optional)
            - importModeExpireTime (str, optional)
            - adminInstalled (bool, optional)
            - spaceUri (str, optional)
            - predefinedPermissionSettings (str, optional):
                "PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED",
                "COLLABORATION_SPACE", "ANNOUNCEMENT_SPACE"
            - spaceDetails (dict, optional):
                - description (str, optional)
                - guidelines (str, optional)
            - membershipCount (dict, optional):
                - joinedDirectHumanUserCount (int)
                - joinedGroupCount (int)
            - accessSettings (dict, optional):
                - accessState (str):
                    "ACCESS_STATE_UNSPECIFIED", "PRIVATE", "DISCOVERABLE"
                - audience (str, optional)
            - singleUserBotDm (bool, optional)
            - permissionSettings (dict, optional):
                - manageMembersAndGroups.managersAllowed (bool, optional)
                - manageMembersAndGroups.membersAllowed (bool, optional)

        If the space is not found or access is denied, returns an empty dict.
    """
    from google_chat.Spaces import get
    return get(name=space_resource_name, useAdminAccess=as_administrator)


def provision_new_space(idempotency_key=None, new_space_definition={}):
    """
    Creates a Chat space.

    Args:
        idempotency_key (str, optional): Unique ID for request. If reused, returns existing space.
        new_space_definition (dict): Space resource to create. Expected structure defined by SpaceInputModel.
            Required fields include:
            - spaceType (str): "SPACE", "GROUP_CHAT", "DIRECT_MESSAGE"
            Optional fields include:
            - displayName (str, optional): Required and cannot be empty if spaceType is "SPACE".
            - externalUserAllowed (bool, optional)
            - importMode (bool, optional)
            - singleUserBotDm (bool, optional)
            - spaceDetails (dict, optional): {"description": str, "guidelines": str}
            - predefinedPermissionSettings (str, optional): e.g., "COLLABORATION_SPACE"
            - accessSettings (dict, optional): {"audience": str}

    Returns:
        dict: Created space object including various fields.
        Returns {} if creation fails due to business logic (e.g., duplicate displayName after validation).

    Raises:
        TypeError: If idempotency_key is not a string, or if new_space_definition is not a dictionary.
        pydantic.ValidationError: If the 'new_space_definition' dictionary does not conform to the
                                  SpaceInputModel schema (e.g., missing 'spaceType',
                                  invalid field types).
        MissingDisplayNameError: If 'spaceType' is "SPACE" and 'displayName' is missing or empty.
    """
    from google_chat.Spaces import create
    return create(requestId=idempotency_key, space=new_space_definition)


def create_space_with_members(space_initialization_request):
    """
    Sets up a Chat space and adds initial members.

    Args:
        space_initialization_request (dict): Request body with the following fields:
            - space (dict): Required. Space resource:
                - spaceType (str): "SPACE", "GROUP_CHAT", "DIRECT_MESSAGE"
                - displayName (str, optional)
                - externalUserAllowed (bool, optional)
                - importMode (bool, optional)
                - singleUserBotDm (bool, optional)
                - spaceDetails (dict, optional):
                    - description (str, optional)
                    - guidelines (str, optional)
                - predefinedPermissionSettings (str, optional):
                    "PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED",
                    "COLLABORATION_SPACE", "ANNOUNCEMENT_SPACE"
                - accessSettings (dict, optional):
                    - audience (str, optional)

            - memberships (List[dict], optional): Memberships to add:
                - member (dict):
                    - name (str): e.g. "users/user@example.com"
                    - type (str): "HUMAN" or "BOT"
                    - displayName (str, optional)
                - role (str, optional):
                    "ROLE_MEMBER", "ROLE_MANAGER"
                - state (str, optional):
                    "JOINED", "INVITED"
                - createTime (str, optional)

    Returns:
        dict: Created space resource with fields:
            - name (str): Format "spaces/{space}"
            - spaceType (str)
            - displayName (str, optional)
            - externalUserAllowed (bool, optional)
            - spaceThreadingState (str, optional)
            - spaceHistoryState (str, optional)
            - createTime (str)
            - lastActiveTime (str, optional)
            - importMode (bool, optional)
            - importModeExpireTime (str, optional)
            - adminInstalled (bool, optional)
            - spaceUri (str, optional)
            - spaceDetails (dict, optional)
            - membershipCount (dict, optional)
            - accessSettings (dict, optional)
            - singleUserBotDm (bool, optional)
            - permissionSettings (dict, optional)

        Returns {} if space already exists or an error occurs.
    """
    from google_chat.Spaces import setup
    return setup(setup_body=space_initialization_request)


def modify_space_attributes(
    target_space_to_update,
    fields_to_modify_mask,
    updated_space_data,
    with_admin_permissions=False
):
    """
    Updates a Chat space.

    Args:
        target_space_to_update (str): Required. Resource name of the space. Format: "spaces/{space}".
        fields_to_modify_mask (str): Required. Comma-separated list of field paths to update, or "*" to update all supported:
            - "space_details"
            - "display_name"
            - "space_type"
            - "space_history_state"
            - "access_settings.audience"
            - "permission_settings"
        updated_space_data (dict): Space object with updated field values.
        with_admin_permissions (bool, optional): Run as admin. Some update masks are restricted.

    Returns:
        dict: Updated space object, including:
            - name (str)
            - displayName (str, optional)
            - spaceType (str): "SPACE", "GROUP_CHAT", "DIRECT_MESSAGE"
            - externalUserAllowed (bool, optional)
            - spaceDetails (dict, optional):
                - description (str, optional)
                - guidelines (str, optional)
            - spaceThreadingState (str, optional)
            - spaceHistoryState (str, optional):
                "HISTORY_STATE_UNSPECIFIED", "HISTORY_OFF", "HISTORY_ON"
            - createTime (str)
            - lastActiveTime (str, optional)
            - accessSettings (dict, optional):
                - audience (str, optional)
                - accessState (str): "PRIVATE", "DISCOVERABLE"
            - permissionSettings (dict, optional)
            - singleUserBotDm (bool, optional)
            - importMode (bool, optional)
            - importModeExpireTime (str, optional)
            - spaceUri (str, optional)
            - adminInstalled (bool, optional)
            - membershipCount (dict, optional)

        Returns {} if space is not found or validation fails.
    """
    from google_chat.Spaces import patch
    return patch(
        name=target_space_to_update,
        updateMask=fields_to_modify_mask,
        space_updates=updated_space_data,
        useAdminAccess=with_admin_permissions
    )


def remove_space_and_contents(space_identifier_for_deletion, admin_delete_override=None):
    """
    Deletes a Chat space and all its child resources.

    Args:
        space_identifier_for_deletion (str): Required. Resource name of the space. Format: "spaces/{space}".
        admin_delete_override (bool, optional): When True, allows deletion without membership check.

    Returns:
        Dict[str, Any]: {} (empty dict) to indicate success or failure (space not found or unauthorized).

    Behavior:
        - Removes the space from DB.
        - Deletes all related memberships, messages, reactions, and attachments
          whose resource names begin with the space's name.
        - If not admin, caller must be a space member to delete it.

    Raises:
        - TypeError: If 'space_identifier_for_deletion' is not a string, or if 'admin_delete_override' is not a boolean or None.
        - ValueError: If 'space_identifier_for_deletion' is an empty string.
        - InvalidSpaceNameFormatError: If 'space_identifier_for_deletion' does not match the expected format 'spaces/{space_id}'.
    """
    from google_chat.Spaces import delete
    return delete(name=space_identifier_for_deletion, useAdminAccess=admin_delete_override)
