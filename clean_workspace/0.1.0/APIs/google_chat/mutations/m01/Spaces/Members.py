# This file is automatically generated by the MutationBuilder

def get_all_space_memberships(
    space_identifier,
    max_results_per_page=None,
    next_page_cursor=None,
    membership_query_filter=None,
    include_group_memberships=None,
    include_invited_members=None,
    enable_admin_privileges=None
):
    """
    Lists memberships in a space.

    Args:
        space_identifier (str): Required. The resource name of the space to list memberships for.
            Format: spaces/{space}
        max_results_per_page (Optional[int]): Maximum number of memberships to return.
            If unspecified, at most 100 are returned. Value must be between 1 and 1000, inclusive, if provided.
        next_page_cursor (Optional[str]): Token to retrieve the next page from a previous response.
        membership_query_filter (Optional[str]): Query filter string to filter memberships by:
            - role = "ROLE_MEMBER" or "ROLE_MANAGER"
            - member.type = "HUMAN" or "BOT"
            You may also use:
            - member.type != "BOT"
            - AND/OR operators (restrictions apply)
            If 'useAdminAccess' is True and a filter is provided, the filter must include
            a condition on 'member.type' (e.g., 'member.type = "HUMAN"' or 'member.type != "BOT"').
        include_group_memberships (Optional[bool]): If True, includes memberships associated with Google Groups.
        include_invited_members (Optional[bool]): If True, includes memberships in the INVITED state.
        enable_admin_privileges (Optional[bool]): If True, enables admin privileges for the listing operation.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - "memberships" (TypingList[Dict[str, Any]]): A list of membership objects, where each object contains:
                - "name" (str): Resource name of the membership in format `spaces/{space}/members/{member}`.
                - "state" (str): Membership state, one of: "MEMBERSHIP_STATE_UNSPECIFIED", "JOINED", "INVITED", "NOT_A_MEMBER".
                - "role" (str): Membership role, one of: "MEMBERSHIP_ROLE_UNSPECIFIED", "ROLE_MEMBER", "ROLE_MANAGER".
                - "createTime" (str): Timestamp when the membership was created.
                - "member" (Dict[str, Any]): User details with keys:
                    - "name" (str): Resource name of the user in format `users/{user}`.
                    - "displayName" (str): Display name of the user.
                    - "domainId" (str): Workspace domain ID.
                    - "type" (str): Type of member, one of: "TYPE_UNSPECIFIED", "HUMAN", "BOT".
                    - "isAnonymous" (bool): True if the user is deleted or profile is hidden.
                - "groupMember" (Dict[str, Any], optional): Present if membership is for a Google Group:
                    - "name" (str): Resource name of the group in format `groups/{group}`.
            - "nextPageToken" (str, optional): A token to retrieve the next page of results. 
                                              Absent if there are no more results.
        If no memberships are found (after filtering), returns {"memberships": []}.

    Raises:
        TypeError: If any argument is of an incorrect type.
        InvalidParentFormatError: If 'space_identifier' is not in the format 'spaces/{space}'.
        InvalidPageSizeError: If 'max_results_per_page' is provided and is not between 1 and 1000 (inclusive).
        AdminAccessFilterError: If 'enable_admin_privileges' is True, 'membership_query_filter' is provided, but the membership_query_filter
                                does not include a valid condition on 'member.type'.
    """
    from google_chat.Spaces.Members import list
    return list(
        parent=space_identifier,
        pageSize=max_results_per_page,
        pageToken=next_page_cursor,
        filter=membership_query_filter,
        showGroups=include_group_memberships,
        showInvited=include_invited_members,
        useAdminAccess=enable_admin_privileges
    )


def fetch_membership_details(membership_resource_name, as_admin_user=None):
    """
    Retrieves details about a specific membership in a Chat space.

    Args:
        membership_resource_name (str): Required. The resource name of the membership to retrieve.
            Format:
            - spaces/{space}/members/{member}
            - spaces/{space}/members/app (for the app itself)
            You can use an email address as an alias for {member}, e.g., spaces/{space}/members/user@example.com.
        as_admin_user (Optional[bool]): If True, runs with the caller's Workspace admin privileges.
            Note: App memberships (i.e., .../members/app) cannot be fetched with admin access.

    Returns:
        Dict[str, Any]: A dictionary representing the membership with the following keys:
            - 'name' (str): Resource name of the membership.
            - 'state' (str): One of:
                - 'MEMBERSHIP_STATE_UNSPECIFIED'
                - 'JOINED'
                - 'INVITED'
                - 'NOT_A_MEMBER'
            - 'role' (str): One of:
                - 'MEMBERSHIP_ROLE_UNSPECIFIED'
                - 'ROLE_MEMBER'
                - 'ROLE_MANAGER'
            - 'createTime' (str): (Optional) Timestamp when the membership was created.
            - 'deleteTime' (str): (Optional) Timestamp when the membership was deleted.
            - 'member' (Dict[str, Any]): User details:
                - 'name' (str): Format: users/{user}
                - 'displayName' (str): Display name of the user.
                - 'domainId' (str): Workspace domain ID.
                - 'type' (str): One of:
                    - 'TYPE_UNSPECIFIED'
                    - 'HUMAN'
                    - 'BOT'
                - 'isAnonymous' (bool): True if the user is deleted or profile is hidden.
            - 'groupMember' (Dict[str, Any]): (Optional) Google Group details:
                - 'name' (str): Format: groups/{group}

        Returns an empty dictionary if the membership is not found or not accessible.
    """
    from google_chat.Spaces.Members import get
    return get(name=membership_resource_name, useAdminAccess=as_admin_user)


def create_space_membership(destination_space_id, new_membership_data, with_administrator_rights=None):
    """
    Creates a membership for a user or group in the specified Chat space.

    Args:
        destination_space_id (str): Required. The resource name of the space.
            Format: spaces/{space}
        new_membership_data (Dict[str, Any]): Required. Represents the membership to be created, with the following fields:
            - role (str): Optional. Defaults to 'ROLE_MEMBER'. One of:
                - 'MEMBERSHIP_ROLE_UNSPECIFIED'
                - 'ROLE_MEMBER'
                - 'ROLE_MANAGER'
            - state (str): Optional. Defaults to 'INVITED'. One of:
                - 'MEMBERSHIP_STATE_UNSPECIFIED'
                - 'JOINED'
                - 'INVITED'
                - 'NOT_A_MEMBER'
            - deleteTime (str): Optional. Timestamp of deletion.
            - member (Dict[str, Any]): Required. Member information, with fields:
                - name (str): Format: users/{user} or users/app
                - displayName (str): Optional. The user's display name.
                - domainId (str): Optional. Workspace domain ID.
                - type (str): One of:
                    - 'TYPE_UNSPECIFIED'
                    - 'HUMAN'
                    - 'BOT'
                - isAnonymous (bool): Optional. True if the user is deleted or profile is hidden.
            - groupMember (Dict[str, Any]): Optional. Group information, with field:
                - name (str): Format: groups/{group}
        with_administrator_rights (Optional[bool]): If True, uses administrator privileges.
            Admin access cannot be used to create memberships for bots or users outside the domain.

    Returns:
        Dict[str, Any]: The created membership object.
            Includes auto-generated 'name' and 'createTime' fields,
            and applied defaults for 'role' and 'state' if not provided.

    Raises:
        TypeError: If 'destination_space_id' is not a string, 'new_membership_data' is not a dictionary,
                   or 'with_administrator_rights' is not a boolean (if provided).
        InvalidParentFormatError: If 'destination_space_id' format is invalid.
        PydanticValidationError: If 'new_membership_data' dictionary does not conform to the expected structure
                                 or contains invalid values for its fields.
        AdminAccessNotAllowedError: If 'with_administrator_rights' is True and an attempt is made to create
                                    a new_membership_data for a BOT.
        MembershipAlreadyExistsError: If the new_membership_data to be created already exists.
    """
    from google_chat.Spaces.Members import create
    return create(
        parent=destination_space_id,
        membership=new_membership_data,
        useAdminAccess=with_administrator_rights
    )


def modify_existing_membership(
    target_membership_name,
    fields_to_modify,
    updated_membership_payload,
    perform_as_admin=None
):
    """
    Updates a membership.

    Args:
        target_membership_name (str): Required. Resource name of the membership to update.
            Format: spaces/{space}/members/{member}
        fields_to_modify (str): Required. Comma-separated list of fields to update.
            Supported values:
            - 'role'
        updated_membership_payload (Dict[str, Any]): Dictionary containing the updated membership fields. Supported structure:
            - name (str): Resource name of the membership.
                Format: spaces/{space}/members/{member}
            - role (str): Optional. One of:
                - 'MEMBERSHIP_ROLE_UNSPECIFIED'
                - 'ROLE_MEMBER'
                - 'ROLE_MANAGER'
            - state (str): Output only. One of:
                - 'MEMBERSHIP_STATE_UNSPECIFIED'
                - 'JOINED'
                - 'INVITED'
                - 'NOT_A_MEMBER'
            - createTime (str): Output only. Timestamp when the membership was created.
            - deleteTime (str): Output only. Timestamp when the membership was deleted.
            - member (Dict[str, Any]): Member details with the following structure:
                - name (str): Format: users/{user}
                - displayName (str): Output only. Display name of the user.
                - domainId (str): Output only. Workspace domain ID.
                - type (str): One of:
                    - 'TYPE_UNSPECIFIED'
                    - 'HUMAN'
                    - 'BOT'
                - isAnonymous (bool): Output only. True if user is deleted or hidden.
            - groupMember (Dict[str, Any]): Optional group information with the following structure:
                - name (str): Format: groups/{group}
        perform_as_admin (Optional[bool]): If True, runs the method using administrator privileges.

    Returns:
        Dict[str, Any]: The updated membership resource with the following structure:
            - name (str): Resource name of the membership.
                Format: spaces/{space}/members/{member}
            - state (str): Membership state, one of:
                - 'MEMBERSHIP_STATE_UNSPECIFIED'
                - 'JOINED'
                - 'INVITED'
                - 'NOT_A_MEMBER'
            - role (str): Membership role, one of:
                - 'MEMBERSHIP_ROLE_UNSPECIFIED'
                - 'ROLE_MEMBER'
                - 'ROLE_MANAGER'
            - createTime (str): Timestamp when the membership was created.
            - deleteTime (str): (Optional) Timestamp when the membership was deleted.
            - member (Dict[str, Any]): User details with the following structure:
                - name (str): Resource name of the user in format users/{user}
                - displayName (str): Display name of the user.
                - domainId (str): Workspace domain ID.
                - type (str): Type of member, one of:
                    - 'TYPE_UNSPECIFIED'
                    - 'HUMAN'
                    - 'BOT'
                - isAnonymous (bool): True if the user is deleted or profile is hidden.
            - groupMember (Dict[str, Any]): (Optional) Google Group details with the following structure:
                - name (str): Resource name of the group in format groups/{group}

        Returns an empty dictionary if the membership is not found or the update cannot be applied.
    """
    from google_chat.Spaces.Members import patch
    return patch(
        name=target_membership_name,
        updateMask=fields_to_modify,
        membership=updated_membership_payload,
        useAdminAccess=perform_as_admin
    )


def delete_space_membership(membership_to_delete_name, use_admin_permissions=False):
    """
    Deletes a membership from a space. 

    Args:
        membership_to_delete_name (str): Required. Resource name of the membership to delete.
            Format: spaces/{space}/members/{member}
            Example values:
            - spaces/AAA/members/user@example.com
            - spaces/AAA/members/app
        use_admin_permissions (bool): Optional. If True, uses Workspace admin privileges.
            Note: Deleting app memberships using admin access is not supported.

    Returns:
        Dict[str, Any]: The deleted membership resource with the following fields:
            - name (str): Resource name of the membership.
                Format: spaces/{space}/members/{member}
            - state (str): One of:
                - 'MEMBERSHIP_STATE_UNSPECIFIED'
                - 'JOINED'
                - 'INVITED'
                - 'NOT_A_MEMBER'
            - role (str): One of:
                - 'MEMBERSHIP_ROLE_UNSPECIFIED'
                - 'ROLE_MEMBER'
                - 'ROLE_MANAGER'
            - createTime (str): Timestamp when the membership was created.
            - deleteTime (str): (Optional) Timestamp when the membership was deleted.
            - member (Dict[str, Any]): User details:
                - name (str): Format: users/{user}
                - displayName (str): Output only.
                - domainId (str): Output only.
                - type (str): One of:
                    - 'TYPE_UNSPECIFIED'
                    - 'HUMAN'
                    - 'BOT'
                - isAnonymous (bool): True if the user is deleted or profile is hidden.
            - groupMember (Dict[str, Any]): Optional. Group details:
                - name (str): Format: groups/{group}

        Returns an empty dictionary if the membership is not found or deletion is disallowed.
    """
    from google_chat.Spaces.Members import delete
    return delete(name=membership_to_delete_name, useAdminAccess=use_admin_permissions)
