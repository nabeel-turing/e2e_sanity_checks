# This file is automatically generated by the MutationBuilder

def post_new_message(
    destination_space_name,
    message_content_data,
    message_idempotency_token=None,
    threading_behavior='MESSAGE_REPLY_OPTION_UNSPECIFIED',
    client_assigned_identifier=None
):
    """
    Creates a message in a space.

    The space is identified by `parent`, for example, "spaces/AAA". The caller must be a member
    of "spaces/{space}/members/{CURRENT_USER_ID}" to create a message.

    Args:
        destination_space_name (str): Required. Resource name of the space to create the message in.
            Format: "spaces/{space}".
        message_content_data (Dict[str, Any]): Required. A dictionary representing the message resource object. Based on the
            MessageBodyInput model, the following core fields are supported:
            - text (Optional[str]): Plain-text body of the message.
            - thread (Optional[Dict[str, Any]]): Thread information based on ThreadDetailInput model:
                - name (Optional[str]): Resource name of the thread (e.g., "spaces/AAA/threads/BBB").
            - attachment (Optional[List[Dict[str, Any]]]): List of message attachments (defaults to empty list):
                - name (str): Attachment resource name.
                - contentName (str): File name.
                - contentType (str): MIME type.
                - thumbnailUri (str): Thumbnail preview image.
                - downloadUri (str): Direct download URL.
                - source (str): One of "DRIVE_FILE", "UPLOADED_CONTENT".
                - attachmentDataRef (Dict[str, Any]): For uploading files:
                    - resourceName (str): Reference to the media.
                    - attachmentUploadToken (str): Token for uploaded content.
                - driveDataRef (Dict[str, Any]): Drive file metadata:
                    - driveFileId (str): ID of the file in Google Drive.

            Additional fields are accepted due to the model's extra='allow' configuration, which may include:
            - cards, cardsV2, annotations, accessoryWidgets, and other message content fields.
            These will be passed through but are not explicitly validated by the MessageBodyInput model.
        message_idempotency_token (Optional[str]): A unique ID for the message request. If reused by the same user,
            the same message is returned. If reused incorrectly, results in a conflict and returns an
            empty dictionary.
        threading_behavior (str): Controls whether the message starts a new thread or replies
            to an existing one. Valid values:
            - 'MESSAGE_REPLY_OPTION_UNSPECIFIED': Default behavior
            - 'REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD': Reply to existing thread if specified, otherwise create new thread
            - 'REPLY_MESSAGE_OR_FAIL': Reply to existing thread if specified, otherwise fail
            - 'NEW_THREAD': Always create a new thread
        client_assigned_identifier (Optional[str]): A custom ID that must start with "client-". Included in the message's
            resource name if provided.

    Returns:
        Dict[str, Any]: A dictionary representing the created or existing message resource. The function creates
            and returns a message object with the following core fields:
            - name (str): Resource name of the message. Format: "spaces/{space}/messages/{message}".
            - text (str): Plain-text body of the message from MessageBodyInput.text (defaults to empty string).
            - attachment (List[Dict[str, Any]]): List of message attachments from MessageBodyInput.attachment 
                (defaults to empty array if not provided).
            - createTime (str): RFC-3339 timestamp when the message was created (set by function).
            - thread (Dict[str, Any]): Thread information determined by messageReplyOption and MessageBodyInput.thread:
                - name (str): Resource name of the thread (can be empty string).
                - Additional thread fields as determined by the thread resolution logic.
            - requestId (Optional[str]): The request ID that was used to create this message (if provided).
            - sender (Dict[str, Any]): Information about the user who sent the message (set by function):
                - name (str): Resource name of the sender from CURRENT_USER_ID.
                - type (str): Type of user, defaults to "HUMAN".
            - clientAssignedMessageId (str): Custom ID assigned to the message (only present if messageId was provided).

            Additional fields may be present if they were included in the message_body input and processed
            by the MessageBodyInput model's extra='allow' configuration.

    Raises:
        TypeError: If `destination_space_name`, `message_idempotency_token`, `threading_behavior`, or `client_assigned_identifier` have incorrect types.
        ValueError: If `destination_space_name` is empty.
        InvalidMessageIdFormatError: If `client_assigned_identifier` is provided but does not start with "client-".
        InvalidMessageReplyOptionError: If `threading_behavior` is not one of the valid values.
        pydantic.ValidationError: If `message_content_data` is not a valid dictionary or does not conform to the expected structure.
        UserNotMemberError: If the current user is not a member of the specified space.
        MissingThreadDataError: If `threading_behavior` is 'REPLY_MESSAGE_OR_FAIL' and thread information is missing.
        DuplicateRequestIdError: If the `message_idempotency_token` has been used by the same user for a different message.
    """
    from google_chat.Spaces.Messages import create
    return create(
        parent=destination_space_name,
        message_body=message_content_data,
        requestId=message_idempotency_token,
        messageReplyOption=threading_behavior,
        messageId=client_assigned_identifier
    )


def fetch_message_history(
    source_space_name,
    message_batch_size=None,
    history_pagination_token=None,
    message_filter_query=None,
    message_sort_order=None,
    include_deleted_messages=None
):
    """
    Lists messages in a space where the caller is a member.

    The space is identified by `parent`, e.g., "spaces/AAA". The caller must be a member of the specified space to retrieve messages.

    Args:
        source_space_name (str): Required. The resource name of the space to list messages from. Format: `spaces/{space}`.
        message_batch_size (Optional[int]): The maximum number of messages to return. Defaults to 25 if unspecified. Maximum is 1000. Negative values raise an error.
        history_pagination_token (Optional[str]): Token for fetching the next page of results. Should be passed unchanged to retrieve paginated data.
        message_filter_query (Optional[str]): A query string for filtering messages by `create_time` and/or `thread.name`. Examples:
            - create_time > "2023-04-21T11:30:00-04:00"
            - create_time > "2023-04-21T11:30:00-04:00" AND thread.name = spaces/AAA/threads/123
        message_sort_order (Optional[str]): Order of the returned messages. Valid values:
            - "createTime desc": Sort by createTime in descending order (newest first)
            - "createTime asc": Sort by createTime in ascending order (oldest first)
            Defaults to "createTime desc" if unspecified.
        include_deleted_messages (Optional[bool]): Whether to include deleted messages. If False, messages with `deleteTime` are excluded.

    Returns:
        Dict[str, Any]: A dictionary representing the response with the following structure:
            - messages (List[Dict[str, Any]]): A list of message objects. Each message includes:
                - name (str): Resource name of the message. Format: "spaces/{space}/messages/{message}".
                - createTime (str): RFC-3339 timestamp when the message was created.
                - lastUpdateTime (str): RFC-3339 timestamp of last message update.
                - deleteTime (str): RFC-3339 timestamp when the message was deleted, if applicable.
                - text (str): Plain-text body of the message.
                - formattedText (str): Message text with markup formatting.
                - fallbackText (str): Fallback text for cards.
                - argumentText (str): Message text with app mentions stripped out.
                - threadReply (bool): Indicates if the message is a reply in a thread.
                - clientAssignedMessageId (str): Custom ID assigned to the message, if provided.
                - sender (Dict[str, Any]):
                    - name (str): Resource name of the sender, e.g., "users/123".
                    - displayName (str): Display name of the sender.
                    - domainId (str): Google Workspace domain ID.
                    - type (str): Type of user. One of:
                        - "TYPE_UNSPECIFIED"
                        - "HUMAN"
                        - "BOT"
                    - isAnonymous (bool): Indicates if the sender is deleted or hidden.
                - thread (Dict[str, Any]):
                    - name (str): Resource name of the thread.
                    - threadKey (str): Thread key used to create the thread.
                - space (Dict[str, Any]):
                    - name (str): Resource name of the space.
                    - type (str): Deprecated. Use `spaceType` instead.
                    - spaceType (str): Type of space. One of:
                        - "SPACE"
                        - "GROUP_CHAT"
                        - "DIRECT_MESSAGE"
                    - displayName (str): Optional display name of the space.
                    - externalUserAllowed (bool): Whether external users are allowed.
                    - spaceThreadingState (str): Threading behavior. One of:
                        - "SPACE_THREADING_STATE_UNSPECIFIED"
                        - "THREADED_MESSAGES"
                        - "GROUPED_MESSAGES"
                        - "UNTHREADED_MESSAGES"
                    - spaceHistoryState (str): History configuration. One of:
                        - "HISTORY_STATE_UNSPECIFIED"
                        - "HISTORY_OFF"
                        - "HISTORY_ON"
                    - createTime (str): RFC-3339 timestamp when the space was created.
                    - lastActiveTime (str): RFC-3339 timestamp of last message activity.
                    - importMode (bool): Whether the space was created in import mode.
                    - adminInstalled (bool): Whether the space was created by an admin.
                    - spaceUri (str): Direct URL to open the space.
                    - singleUserBotDm (bool): Whether it's a bot-human direct message.
                    - predefinedPermissionSettings (str): Optional predefined permissions. One of:
                        - "PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED"
                        - "COLLABORATION_SPACE"
                        - "ANNOUNCEMENT_SPACE"
                    - spaceDetails (Dict[str, Any]):
                        - description (str): Description of the space.
                        - guidelines (str): Rules and expectations.
                    - membershipCount (Dict[str, Any]):
                        - joinedDirectHumanUserCount (int): Count of joined human users.
                        - joinedGroupCount (int): Count of joined groups.
                    - accessSettings (Dict[str, Any]):
                        - accessState (str): One of:
                            - "ACCESS_STATE_UNSPECIFIED"
                            - "PRIVATE"
                            - "DISCOVERABLE"
                        - audience (str): Resource name of discoverable audience, e.g., "audiences/default".
            - annotations (List[Dict[str, Any]]): Rich annotations (e.g., mentions, emojis).
                - type (str): Annotation type. One of: "USER_MENTION", "SLASH_COMMAND", "RICH_LINK", "CUSTOM_EMOJI".
                - startIndex (int): Start position in the message text.
                - length (int): Length of the annotated segment.
                - userMention (Dict[str, Any]): Info about mentioned user.
                    - type (str): Mention type. One of: "ADD", "MENTION".
                - slashCommand (Dict[str, Any]): Slash command metadata.
                    - type (str): Command interaction type.
                    - commandName (str): Command name.
                    - commandId (str): Unique command ID.
                    - triggersDialog (bool): If it opens a dialog.
                - richLinkMetadata (Dict[str, Any]): Rich preview link data.
                    - uri (str): URL.
                    - richLinkType (str): E.g., "DRIVE_FILE", "CHAT_SPACE".
                    - driveLinkData.mimeType (str): File type for drive links.
                    - chatSpaceLinkData (Dict[str, Any]): Chat space linking info.
                        - space (str): Space name.
                        - thread (str): Thread name.
                        - message (str): Message name.
                - customEmojiMetadata (Dict[str, Any]): Custom emoji info.
                    - customEmoji (Dict[str, Any]):
                        - name (str): Server-assigned name (e.g., `customEmojis/emoji_id`).
                        - uid (str): Unique ID.
                        - emojiName (str): Emoji name, e.g., `:fire_emoji:`.
                        - temporaryImageUri (str): Temporary image URL.
            - cards (List[Dict[str, Any]]): Legacy UI cards shown in Chat messages.
                - name (str): Identifier for the card.
                - header (Dict[str, Any]): Optional card header.
                    - title (str): Required. Title text.
                    - subtitle (str): Optional subtitle text.
                    - imageUrl (str): Optional header image URL.
                    - imageStyle (str): "IMAGE" or "AVATAR".
                - sections (List[Dict[str, Any]]): Content sections within the card.
                    - header (str): Optional section header.
                    - widgets (List[Dict[str, Any]]): List of visual elements such as text, buttons, images.
                        - textParagraph (Dict[str, Any]): A block of text.
                            - text (str): The paragraph content.
                        - keyValue (Dict[str, Any]): Key-value styled layout.
                            - topLabel (str): Top label.
                            - content (str): Content.
                            - bottomLabel (str): Bottom label.
                            - icon (str): Icon.
                            - iconUrl (str): Icon URL.
                        - image (Dict[str, Any]): Standalone image.
                            - imageUrl (str): Image URL.
                            - aspectRatio (float): Aspect ratio.
                        - buttons (List[Dict[str, Any]]): Button elements for interaction.
                - cardActions (List[Dict[str, Any]]): Actions at the bottom of the card.
                    - actionLabel (str): Text shown for the action.
                    - onClick (Dict[str, Any]): Action handler.
                        - openLink (Dict[str, Any]): URL to open.
                        - action (Dict[str, Any]): Invokes a defined method.
                - fixedFooter (Dict[str, Any]): Optional persistent footer.
                    - primaryButton (Dict[str, Any]): Button element.
                        - text (str): Text.
                        - disabled (bool): Disabled.
                        - altText (str): Alt text.
                        - type (str): Type.
            - cardsV2 (List[Dict[str, Any]]): New generation cards with structured layouts.
                - cardId (str): Identifier used to update this card.
                - card (Dict[str, Any]): Complete structure including headers, sections, actions, and footers.
            - attachment (List[Dict[str, Any]]): Message attachments, such as files.
                - name (str): Attachment resource name.
                - contentName (str): File name.
                - contentType (str): MIME type.
                - thumbnailUri (str): Thumbnail preview image.
                - downloadUri (str): Direct download URL.
                - source (str): One of: "DRIVE_FILE", "UPLOADED_CONTENT".
                - attachmentDataRef (Dict[str, Any]): For uploading files.
                    - resourceName (str): Reference to the media.
                    - attachmentUploadToken (str): Token for uploaded content.
                - driveDataRef (Dict[str, Any]): Drive file metadata.
                    - driveFileId (str): ID of the file in Google Drive.
            - matchedUrl (Dict[str, Any]): Metadata for previewable URLs.
                - url (str): The matched link.
            - emojiReactionSummaries (List[Dict[str, Any]]): Summary of emoji reactions.
                - reactionCount (int): Total count of reactions.
                - emoji (Dict[str, Any]):
                    - unicode (str): The emoji used.
            - deletionMetadata (Dict[str, Any]): Deletion details.
                - deletionType (str): Who deleted it. One of: "CREATOR", "ADMIN", etc.
            - quotedMessageMetadata (Dict[str, Any]): Metadata of quoted messages.
                - name (str): Quoted message resource name.
                - lastUpdateTime (str): Timestamp of last update.
            - attachedGifs (List[Dict[str, Any]]): List of attached GIF previews.
                - uri (str): URL to the GIF image.
            - actionResponse (Dict[str, Any]): Data returned by Chat app message interactions.
                - type (str): Response type, e.g., "NEW_MESSAGE", "UPDATE_MESSAGE".
                - url (str): URL for configuration.
                - dialogAction (Dict[str, Any]):
                    - actionStatus (Dict[str, Any]):
                        - statusCode (str): Action result status.
                        - userFacingMessage (str): Optional message for the user.
            - accessoryWidgets (List[Dict[str, Any]]): Additional UI elements below the main card or message.
                - decoratedText (Dict[str, Any]):
                    - text (str): Content shown.
                    - startIcon (Dict[str, Any]):
                        - iconUrl (str): URL for the icon image.
            - nextPageToken (Optional[str]): Token for retrieving the next page of results.

        Returns an empty dictionary `{"messages": []}` if no messages match or the user has no access.

    Raises:
        TypeError: If any argument is of an incorrect type (e.g., source_space_name is not a string, message_batch_size is not an int).
        ValueError: If 'source_space_name' is an empty string, 'message_batch_size' is negative or exceeds 1000,
                    or 'message_sort_order' is provided with an invalid format or value.
    """
    from google_chat.Spaces.Messages import list
    return list(
        parent=source_space_name,
        pageSize=message_batch_size,
        pageToken=history_pagination_token,
        filter=message_filter_query,
        orderBy=message_sort_order,
        showDeleted=include_deleted_messages
    )


def retrieve_single_message(message_resource_identifier):
    """
    Returns details about a message by name.

    The `name` should follow the format: "spaces/{space}/messages/{message}".
    This function performs the following steps:
        1. Parses the space portion from the name.
        2. Checks if the current user is a member of the space.
        3. Finds the message in DB["Message"].
        4. Returns the message if found and authorized, else returns {}.

    Args:
        message_resource_identifier (str): Required. Resource name of the message.
            Format: "spaces/{space}/messages/{message}" or
            "spaces/{space}/messages/client-custom-id".

    Returns:
        Dict[str, Any]: A dictionary representing the response with the following structure:

            - messages (List[Dict[str, Any]]): A list of message objects. Each message includes:
                - name (str): Resource name of the message. Format: "spaces/{space}/messages/{message}".
                - createTime (str): RFC-3339 timestamp when the message was created.
                - lastUpdateTime (str): RFC-3339 timestamp of last message update.
                - deleteTime (str): RFC-3339 timestamp when the message was deleted, if applicable.
                - text (str): Plain-text body of the message.
                - formattedText (str): Message text with markup formatting.
                - fallbackText (str): Fallback text for cards.
                - argumentText (str): Message text with app mentions stripped out.
                - threadReply (bool): Indicates if the message is a reply in a thread.
                - clientAssignedMessageId (str): Custom ID assigned to the message, if provided.
                - sender (Dict[str, Any]):
                    - name (str): Resource name of the sender, e.g., "users/123".
                    - displayName (str): Display name of the sender.
                    - domainId (str): Google Workspace domain ID.
                    - type (str): Type of user. One of:
                        - "TYPE_UNSPECIFIED"
                        - "HUMAN"
                        - "BOT"
                    - isAnonymous (bool): Indicates if the sender is deleted or hidden.
                - thread (Dict[str, Any]):
                    - name (str): Resource name of the thread.
                    - threadKey (str): Thread key used to create the thread.
                - space (Dict[str, Any]):
                    - name (str): Resource name of the space.
                    - type (str): Deprecated. Use `spaceType` instead.
                    - spaceType (str): Type of space. One of:
                        - "SPACE"
                        - "GROUP_CHAT"
                        - "DIRECT_MESSAGE"
                    - displayName (str): Optional display name of the space.
                    - externalUserAllowed (bool): Whether external users are allowed.
                    - spaceThreadingState (str): Threading behavior. One of:
                        - "SPACE_THREADING_STATE_UNSPECIFIED"
                        - "THREADED_MESSAGES"
                        - "GROUPED_MESSAGES"
                        - "UNTHREADED_MESSAGES"
                    - spaceHistoryState (str): History configuration. One of:
                        - "HISTORY_STATE_UNSPECIFIED"
                        - "HISTORY_OFF"
                        - "HISTORY_ON"
                    - createTime (str): RFC-3339 timestamp when the space was created.
                    - lastActiveTime (str): RFC-3339 timestamp of last message activity.
                    - importMode (bool): Whether the space was created in import mode.
                    - adminInstalled (bool): Whether the space was created by an admin.
                    - spaceUri (str): Direct URL to open the space.
                    - singleUserBotDm (bool): Whether it's a bot-human direct message.
                    - predefinedPermissionSettings (str): Optional predefined permissions. One of:
                        - "PREDEFINED_PERMISSION_SETTINGS_UNSPECIFIED"
                        - "COLLABORATION_SPACE"
                        - "ANNOUNCEMENT_SPACE"
                    - spaceDetails (Dict[str, Any]):
                        - description (str): Description of the space.
                        - guidelines (str): Rules and expectations.
                    - membershipCount (Dict[str, Any]):
                        - joinedDirectHumanUserCount (int): Count of joined human users.
                        - joinedGroupCount (int): Count of joined groups.
                    - accessSettings (Dict[str, Any]):
                        - accessState (str): One of:
                            - "ACCESS_STATE_UNSPECIFIED"
                            - "PRIVATE"
                            - "DISCOVERABLE"
                        - audience (str): Resource name of discoverable audience, e.g., "audiences/default".
            - annotations (List[Dict[str, Any]]): Rich annotations (e.g., mentions, emojis).
                - type (str): Annotation type. One of: "USER_MENTION", "SLASH_COMMAND", "RICH_LINK", "CUSTOM_EMOJI".
                - startIndex (int): Start position in the message text.
                - length (int): Length of the annotated segment.
                - userMention (Dict[str, Any]): Info about mentioned user.
                    - type (str): Mention type. One of: "ADD", "MENTION".
                - slashCommand (Dict[str, Any]): Slash command metadata.
                    - type (str): Command interaction type.
                    - commandName (str): Command name.
                    - commandId (str): Unique command ID.
                    - triggersDialog (bool): If it opens a dialog.
                - richLinkMetadata (Dict[str, Any]): Rich preview link data.
                    - uri (str): URL.
                    - richLinkType (str): E.g., "DRIVE_FILE", "CHAT_SPACE".
                    - driveLinkData.mimeType (str): File type for drive links.
                    - chatSpaceLinkData (Dict[str, Any]): Chat space linking info.
                        - space (str): Space name.
                        - thread (str): Thread name.
                        - message (str): Message name.
                - customEmojiMetadata (Dict[str, Any]): Custom emoji info.
                    - customEmoji (Dict[str, Any]):
                        - name (str): Server-assigned name (e.g., `customEmojis/emoji_id`).
                        - uid (str): Unique ID.
                        - emojiName (str): Emoji name, e.g., `:fire_emoji:`.
                        - temporaryImageUri (str): Temporary image URL.

            - cards (List[Dict[str, Any]]): Legacy UI cards shown in Chat messages.
                - name (str): Identifier for the card.
                - header (Dict[str, Any]): Optional card header.
                    - title (str): Required. Title text.
                    - subtitle (str): Optional subtitle text.
                    - imageUrl (str): Optional header image URL.
                    - imageStyle (str): "IMAGE" or "AVATAR".
                - sections (List[Dict[str, Any]]): Content sections within the card.
                    - header (str): Optional section header.
                    - widgets (List[Dict[str, Any]]): List of visual elements such as text, buttons, images.
                        - textParagraph (Dict[str, Any]): A block of text.
                            - text (str): The paragraph content.
                        - keyValue (Dict[str, Any]): Key-value styled layout.
                            - topLabel (str): Top label.
                            - content (str): Content.
                            - bottomLabel (str): Bottom label.
                            - icon (str): Icon.
                            - iconUrl (str): Icon URL.
                        - image (Dict[str, Any]): Standalone image.
                            - imageUrl (str): Image URL.
                            - aspectRatio (float): Aspect ratio.
                        - buttons (List[Dict[str, Any]]): Button elements for interaction.
                - cardActions (List[Dict[str, Any]]): Actions at the bottom of the card.
                    - actionLabel (str): Text shown for the action.
                    - onClick (Dict[str, Any]): Action handler.
                        - openLink (Dict[str, Any]): URL to open.
                        - action (Dict[str, Any]): Invokes a defined method.
                - fixedFooter (Dict[str, Any]): Optional persistent footer.
                    - primaryButton (Dict[str, Any]): Button element.
                        - text (str): Text.
                        - disabled (bool): Disabled.
                        - altText (str): Alt text.
                        - type (str): Type.
            - cardsV2 (List[Dict[str, Any]]): New generation cards with structured layouts.
                - cardId (str): Identifier used to update this card.
                - card (Dict[str, Any]): Complete structure including headers, sections, actions, and footers.

            - attachment (List[Dict[str, Any]]): Message attachments, such as files.
                - name (str): Attachment resource name.
                - contentName (str): File name.
                - contentType (str): MIME type.
                - thumbnailUri (str): Thumbnail preview image.
                - downloadUri (str): Direct download URL.
                - source (str): One of: "DRIVE_FILE", "UPLOADED_CONTENT".
                - attachmentDataRef (Dict[str, Any]): For uploading files.
                    - resourceName (str): Reference to the media.
                    - attachmentUploadToken (str): Token for uploaded content.
                - driveDataRef (Dict[str, Any]): Drive file metadata.
                    - driveFileId (str): ID of the file in Google Drive.

            - matchedUrl (Dict[str, Any]): Metadata for previewable URLs.
                - url (str): The matched link.

            - emojiReactionSummaries (List[Dict[str, Any]]): Summary of emoji reactions.
                - reactionCount (int): Total count of reactions.
                - emoji (Dict[str, Any]):
                    - unicode (str): The emoji used.

            - deletionMetadata (Dict[str, Any]): Deletion details.
                - deletionType (str): Who deleted it. One of: "CREATOR", "ADMIN", etc.

            - quotedMessageMetadata (Dict[str, Any]): Metadata of quoted messages.
                - name (str): Quoted message resource name.
                - lastUpdateTime (str): Timestamp of last update.

            - attachedGifs (List[Dict[str, Any]]): List of attached GIF previews.
                - uri (str): URL to the GIF image.

            - actionResponse (Dict[str, Any]): Data returned by Chat app message interactions.
                - type (str): Response type, e.g., "NEW_MESSAGE", "UPDATE_MESSAGE".
                - url (str): URL for configuration.
                - dialogAction (Dict[str, Any]):
                    - actionStatus (Dict[str, Any]):
                        - statusCode (str): Action result status.
                        - userFacingMessage (str): Optional message for the user.

            - accessoryWidgets (List[Dict[str, Any]]): Additional UI elements below the main card or message.
                - decoratedText (Dict[str, Any]):
                    - text (str): Content shown.
                    - startIcon (Dict[str, Any]):
                        - iconUrl (str): URL for the icon image.

            - privateMessageViewer (Dict[str, Any]): Viewer for private messages.
                - name (str): User resource name who can view the message (e.g., "users/123").

            - slashCommand (Dict[str, Any]): Slash command info when used to create a message.
                - commandId (str): ID of the executed slash command.

            - nextPageToken (Optional[str]): Token for retrieving the next page of results.

        Returns an empty dictionary `{}` if no messages match or the user has no access.
    """
    from google_chat.Spaces.Messages import get
    return get(name=message_resource_identifier)


def edit_existing_message(
    message_to_update_name,
    fields_to_change_mask,
    create_if_nonexistent,
    updated_message_content
):
    """
    Updates a message in a Google Chat space or creates a new one if allowed.

    Args:
        message_to_update_name (str): Required. Resource name of the message to update. Format:
            `spaces/{space}/messages/{message}`. If using a client-assigned ID,
            use `spaces/{space}/messages/client-{custom_id}`.
        fields_to_change_mask (str): Required. Comma-separated list of fields to update. Use `"*"` to update all fields.
            Valid fields: "text", "attachment", "cards", "cards_v2", "accessory_widgets".
        create_if_nonexistent (bool): Optional. If True and the message is not found, creates a new message
            (only allowed with a client-assigned message ID).
        updated_message_content (dict): Required. The message fields to apply updates to. May include any of the following keys:
            - text (str): The plain-text message body.
            - attachment (List[dict]): List of attachments.
            - cards (List[dict]): Legacy UI card structure.
            - cardsV2 (List[dict]): Enhanced modern card structure.
            - accessoryWidgets (List[dict]): Interactive widgets shown below the message.

    Returns:
        dict: The updated or newly created message resource. Fields include:

            - name (str)
            - createTime (str)
            - lastUpdateTime (str)
            - deleteTime (str)
            - text (str)
            - formattedText (str)
            - fallbackText (str)
            - argumentText (str)
            - threadReply (bool)
            - clientAssignedMessageId (str)
            - sender (dict):
                - name (str)
                - displayName (str)
                - domainId (str)
                - type (str): One of "HUMAN", "BOT"
                - isAnonymous (bool)
            - annotations (List[dict]):
                - type (str)
                - startIndex (int)
                - length (int)
                - userMention, slashCommand, richLinkMetadata, customEmojiMetadata (dicts with respective subfields)
            - cards (List[dict]):
                - header (dict): title, subtitle, imageStyle, imageUrl
                - sections (List[dict]):
                    - header (str)
                    - widgets (List[dict]): textParagraph, image, keyValue, buttons
                - cardActions (List[dict])
            - cardsV2 (List[dict]):
                - cardId (str)
                - card (dict):
                    - name (str)
                    - displayStyle (str)
                    - header (dict): title, subtitle, imageType, imageUrl, imageAltText
                    - sectionDividerStyle (str)
                    - sections (List[dict]):
                        - header (str)
                        - collapsible (bool)
                        - uncollapsibleWidgetsCount (int)
                        - widgets (List[dict]): textParagraph, image, decoratedText, keyValue, grid, columns,
                            chipList, selectionInput, textInput, dateTimePicker, divider, carousel
                    - cardActions (List[dict]): openLink, action, overflowMenu
                    - fixedFooter (dict):
                        - primaryButton (dict): text, disabled, altText, type, icon, color
            - attachment (List[dict]):
                - name (str)
                - contentName (str)
                - contentType (str)
                - thumbnailUri (str)
                - downloadUri (str)
                - source (str)
                - attachmentDataRef (dict): resourceName, attachmentUploadToken
                - driveDataRef (dict): driveFileId
            - matchedUrl (dict): url (str)
            - emojiReactionSummaries (List[dict]):
                - reactionCount (int)
                - emoji (dict): unicode (str)
            - deletionMetadata (dict): deletionType (str)
            - quotedMessageMetadata (dict):
                - name (str)
                - lastUpdateTime (str)
            - attachedGifs (List[dict]): uri (str)
            - actionResponse (dict):
                - type (str)
                - url (str)
                - updatedWidget (dict): widget (str), suggestions (dict with items)
                - dialogAction (dict): actionStatus (dict): statusCode, userFacingMessage
            - accessoryWidgets (List[dict]):
                - buttonList (dict): buttons (List[dict])
            - privateMessageViewer (dict): name (str)
            - slashCommand (dict): commandId (str)
            - thread (dict):
                - name (str)
                - threadKey (str)
            - space (dict):
                - name (str)
                - type (str) [Deprecated]
                - spaceType (str)
                - singleUserBotDm (bool)
                - threaded (bool) [Deprecated]
                - displayName (str)
                - externalUserAllowed (bool)
                - spaceThreadingState (str)
                - spaceHistoryState (str)
                - importMode (bool)
                - createTime (str)
                - lastActiveTime (str)
                - adminInstalled (bool)
                - spaceUri (str)
                - predefinedPermissionSettings (str)
                - spaceDetails (dict): description, guidelines
                - membershipCount (dict): joinedDirectHumanUserCount, joinedGroupCount
                - accessSettings (dict): accessState, audience

            Returns `{}` if the message is not found and allowMissing is False, or on invalid parameters.
    """
    from google_chat.Spaces.Messages import update
    return update(
        name=message_to_update_name,
        updateMask=fields_to_change_mask,
        allowMissing=create_if_nonexistent,
        body=updated_message_content
    )


def apply_partial_message_update(
    message_to_patch_identifier,
    patch_field_mask,
    enable_upsert_behavior=None,
    message_patch_data=None
):
    """
    Updates an existing message resource using the PATCH method.

    This method updates the fields of a Chat message identified by its resource
    name. It supports partial updates via the `updateMask` parameter. If the message
    is not found and `allowMissing` is True, a new message is created (requires a
    client-assigned message ID).

    Args:
        message_to_patch_identifier (str): Required. Resource name of the message to update.
            Format: `spaces/{space}/messages/{message}`.
            Examples:
            - `spaces/AAA/messages/BBB.CCC`
            - `spaces/AAA/messages/client-custom-name`
            See: https://developers.google.com/workspace/chat/create-messages#name_a_created_message
        patch_field_mask (str): Required. Comma-separated list of fields to update, or `*` for all.
            Supported values include:
            - `text`
            - `attachment`
            - `cards`
            - `cards_v2`
            - `accessory_widgets`
        enable_upsert_behavior (Optional[bool]): Optional. If True, creates the message if not found (requires a
            client-assigned ID). Ignores `updateMask` in that case.
        message_patch_data (Optional[Dict[str, Any]]): A dictionary representing the fields of the message to update.
            Possible keys include:
            - `text` (str): Plain-text body of the message.
            - `fallbackText` (str): Fallback text for message cards.
            - `cards` (List[Dict[str, Any]]): List of cards to include in the message.
            - `cards_v2` (List[Dict[str, Any]]): List of version 2 cards (advanced formatting).
            - `attachment` (List[Dict[str, Any]]): Attachments such as files or media.
            - `thread` (Dict[str, Any]): Thread info, including `name` or `threadKey`.
            - `annotations` (List[Dict[str, Any]]): Annotations like user mentions, rich links, etc.
            - `clientAssignedMessageId` (str): Optional custom ID to identify the message.

    Returns:
        Dict[str, Any]: A dictionary representing the updated message resource. The response may include:
            - `name` (str): Resource name of the message.
            - `text` (str): Updated plain-text body of the message.
            - `createTime` (str): Time at which the message was created.
            - `lastUpdateTime` (str): Time at which the message was last edited.
            - `deleteTime` (str): Time at which the message was deleted.
            - `formattedText` (str): Text with formatting markup.
            - `fallbackText` (str): Fallback plain-text for message cards.
            - `argumentText` (str): Message text without mentions.
            - `threadReply` (bool): Whether this is a reply in a thread.
            - `clientAssignedMessageId` (str): Custom ID for the message.
            - `sender` (Dict[str, Any]): Information about the user who sent the message:
                - `name` (str)
                - `displayName` (str)
                - `domainId` (str)
                - `type` (str)
                - `isAnonymous` (bool)
            - `cards` (List[Dict[str, Any]]): List of legacy card widgets.
            - `cardsV2` (List[Dict[str, Any]]): List of enhanced card widgets with layout and interaction.
            - `annotations` (List[Dict[str, Any]]): Metadata like mentions, emojis, rich links.
            - `thread` (Dict[str, Any]): Thread information such as:
                - `name` (str)
                - `threadKey` (str)
            - `space` (Dict[str, Any]): Space info:
                - `name` (str)
                - `type` (str)
                - `spaceType` (str)
                - `displayName` (str)
                - `threaded` (bool)
                - `spaceHistoryState` (str)
                - `externalUserAllowed` (bool)
                - `adminInstalled` (bool)
                - `spaceUri` (str)
                - and other space-level configuration and metadata
            - `attachment` (List[Dict[str, Any]]): Attachments such as files or Drive links.
            - `emojiReactionSummaries` (List[Dict[str, Any]]): List of emoji reaction metadata.
            - `quotedMessageMetadata` (Dict[str, Any]): Info about quoted messages.
            - `matchedUrl` (Dict[str, Any]): URLs detected in the message.
            - `actionResponse` (Dict[str, Any]): App-level response types, URLs, or dialog triggers.
            - `deletionMetadata` (Dict[str, Any]): Who deleted the message and how.
            - `accessoryWidgets` (List[Dict[str, Any]]): Optional accessory widgets for enhanced display.
            - Other fields may be present depending on usage and configuration.

        For complete field definitions, see:
        https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/patch
    """
    from google_chat.Spaces.Messages import patch
    return patch(
        name=message_to_patch_identifier,
        updateMask=patch_field_mask,
        allowMissing=enable_upsert_behavior,
        message=message_patch_data
    )


def remove_chat_message(message_to_delete_id, delete_with_replies=None):
    """
    Deletes a message.

    Args:
        message_to_delete_id (str): Required. Resource name of the message.
            Format: `spaces/{space}/messages/{message}`.
            If you've set a custom ID for your message, you can use the value from
            the `clientAssignedMessageId` field for `{message}`. For details, see
            https://developers.google.com/workspace/chat/create-messages#name_a_created_message
        delete_with_replies (bool, optional): When `true`, deleting a message also deletes its threaded
            replies. When `false`, if the message has threaded replies, deletion fails.
            Only applies when authenticating as a user. Has no effect when authenticating
            as a Chat app.

    Returns:
        None: This method does not return a value. Simulates an empty response by returning
        an empty dictionary internally, but the return type is `None`.
    """
    from google_chat.Spaces.Messages import delete
    return delete(name=message_to_delete_id, force=delete_with_replies)
