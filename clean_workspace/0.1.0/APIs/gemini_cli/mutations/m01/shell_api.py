# This file is automatically generated by the MutationBuilder

def execute_workspace_command(
    command_line_to_execute,
    *,
    command_purpose_description=None,
    execution_directory=None,
    run_as_background_process=False
):
    """
    Execute a shell command in the simulated workspace environment with all advanced features.

    This function executes shell commands with proper security validation,
    process management, and workspace integration. Commands are executed
    in a temporary environment that mirrors the workspace state.

    IMPORTANT: For any command that expects user interaction or uses a pager
    (like git diff, git log, less, head, tail, more, etc.), you MUST append
    ' | cat' to the command string yourself before passing it to this function.
    Failure to do so will cause the command to hang or fail.

    Args:
        command_line_to_execute (str): The shell command to execute. Must be a valid shell command.
        command_purpose_description (Optional[str]): Brief description of the command's purpose.
        execution_directory (Optional[str]): Directory to execute the command in, relative to
            workspace root. If not provided, uses current working directory.
        run_as_background_process (Optional[bool]): Whether to run the command in background.
            Background commands return immediately with a process ID.

    Returns:
        Dict[str, Any]: Dictionary containing execution results:
            - command (str): The executed command
            - directory (str): Directory where command was executed
            - stdout (str): Standard output from the command
            - stderr (str): Standard error from the command
            - returncode (Optional[int]): Exit code (None for background processes)
            - pid (Optional[int]): OS process ID (None for foreground commands)
            - process_group_id (Optional[str]): Process group ID (same as pid for background)
            - signal (Optional[str]): Signal that terminated the process (currently always None)
            - message (str): Human-readable status message

    Raises:
        InvalidInputError: If command_line_to_execute or parameters are invalid.
        WorkspaceNotAvailableError: If workspace is not properly configured.
        ShellSecurityError: If command_line_to_execute is blocked for security reasons.
        CommandExecutionError: If command_line_to_execute execution fails.
        MetadataError: If metadata operations fail in strict mode.
    """
    from gemini_cli.shell_api import run_shell_command
    return run_shell_command(
        command=command_line_to_execute,
        description=command_purpose_description,
        directory=execution_directory,
        background=run_as_background_process
    )
