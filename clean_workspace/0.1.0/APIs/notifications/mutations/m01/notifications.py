# This file is automatically generated by the MutationBuilder

def fetch_device_messages(
    filter_by_contact_name=None,
    filter_by_application_name=None,
    retrieve_unread_only=True
):
    """
    Get Android notifications with optional filtering.

    Args:
        filter_by_contact_name (Optional[str]): Filter notifications by sender/group name. 
            Must be a non-empty string with maximum length of 256 characters if provided.
        filter_by_application_name (Optional[str]): Filter notifications by application name.
            Must be a non-empty string with maximum length of 256 characters if provided.
        retrieve_unread_only (bool): If True (default), fetches only unread notifications and marks them as read.
            If False, fetches only read notifications without changing their read status.

    Returns:
        Dict[str, Union[str, int, bool, List[Dict[str, Union[str, int, List]]], None]]: Dictionary containing bundled message notifications with the following structure:
        - action_card_content_passthrough (Optional[str]): Optional string for UI content
        - card_id (Optional[str]): Optional card identifier
        - bundled_message_notifications (List[Dict[str, Union[str, int, List]]]): List of notification bundles, each containing:
            - key (str): Unique identifier for this notification bundle
            - localized_app_name (str): The localized app name
            - app_package_name (str): The app package name
            - sender (Dict[str, str]): The sender of the bundle with keys:
                - type (str): The type of the sender ('user' or 'group')
                - name (str): The name of the sender
            - message_count (int): The number of messages in this bundle
            - message_notifications (List[Dict[str, str]]): All message notifications in this bundle, each containing:
                - sender_name (str): The name of the user who sent the message
                - content (str): The main content of the notification
                - content_type (str): The type of content ('text', 'image', 'audio', or 'video')
                - date (str): Date when the message was sent in format YYYY-MM-DD
                - time_of_day (str): Time when the message was sent in format HH:MM:SS
            - supported_actions (List[str]): The supported actions on this notifications bundle (['reply'])
        - is_permission_denied (bool): Boolean indicating permission status
        - status_code (str): Status code ('OK' or 'PERMISSION_DENIED')
        - skip_reply_disclaimer (Optional[bool]): Optional boolean for UI behavior
        - total_message_count (int): Total count of messages across all bundles

    Raises:
        ValidationError: If filter_by_contact_name or filter_by_application_name is not a string, is an empty string, 
            or exceeds 256 characters. If retrieve_unread_only is not a boolean.
    """
    from notifications.notifications import get_notifications
    return get_notifications(
        sender_name=filter_by_contact_name,
        app_name=filter_by_application_name,
        unread=retrieve_unread_only
    )


def send_notification_response(
    target_bundle_identifier,
    response_content,
    addressee_name,
    responding_application_name=None,
    target_package_identifier=None
):
    """
    Reply to a notification with confirmation.

    Args:
        target_bundle_identifier (str): Unique bundle identifier to reply to. Must be a non-empty string
            with maximum length of 256 characters.
        response_content (str): The reply message text. Must be a non-empty string.
        addressee_name (str): Display name of the recipient. Must be a non-empty string
            with maximum length of 256 characters.
        responding_application_name (Optional[str]): Optional application name for the reply.
            Must be a non-empty string with maximum length of 256 characters if provided.
        target_package_identifier (Optional[str]): Optional package name. This parameter is not used 
            in the current implementation but is validated for API compatibility.
            Must be a non-empty string with maximum length of 256 characters if provided.

    Returns:
        Dict[str, Union[str, int, None]]: Dictionary containing reply confirmation:
        - action_card_content_passthrough (Optional[str]): Optional string for UI content
        - card_id (Optional[str]): Optional card identifier
        - emitted_action_count (int): Number of replies sent (1)

    Raises:
        ValidationError: If input parameters don't meet type or length requirements
        ValueError: If the bundle target_bundle_identifier is invalid or reply is not supported
    """
    from notifications.notifications import reply_notification
    return reply_notification(
        key=target_bundle_identifier,
        message_body=response_content,
        recipient_name=addressee_name,
        app_name=responding_application_name,
        app_package_name=target_package_identifier
    )


def prompt_for_incomplete_reply_info():
    """
    Handle cases where message body or recipient is missing.

    This function is called when a reply attempt is made without
    providing the necessary information (message body or recipient name).

    Returns:
        Dict[str, Union[str, int, None]]: Dictionary containing a prompt for missing information:
        - action_card_content_passthrough (str): Message asking for missing info
        - card_id (Optional[str]): Optional card identifier (None)
        - emitted_action_count (int): 0 (no reply was sent)
    """
    from notifications.notifications import reply_notification_message_or_contact_missing
    return reply_notification_message_or_contact_missing()
