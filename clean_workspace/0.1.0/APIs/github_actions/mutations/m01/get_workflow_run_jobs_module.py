# This file is automatically generated by the MutationBuilder

def list_jobs_for_workflow_execution(
    repository_holding_account,
    repository_context_name,
    target_run_identifier,
    job_filter_option=None,
    jobs_page_number=None,
    jobs_per_page_count=None
):
    """
    Get jobs for a specific workflow run.

    Gets jobs for a specific workflow run, identified by owner, repository, and run ID.
    The function allows filtering jobs by their status and paginating through the results.

    Args:
        repository_holding_account (str): The account owner of the repository. The name is not case sensitive.
        repository_context_name (str): The name of the repository without the .git extension. The name is not case sensitive.
        target_run_identifier (int): The unique identifier of the workflow run.
        job_filter_option (Optional[str]): Filters jobs by their status. Valid values: 'latest' (default)
            returns the latest job for each job name, 'all' returns all jobs for the run.
            Defaults to 'latest'.
        jobs_page_number (Optional[int]): Page number of the results to fetch. Starts at 1. Defaults to 1.
        jobs_per_page_count (Optional[int]): The number of results per page (maximum 100). Defaults to 30.

    Returns:
        Dict[str, Any]: A dictionary containing a list of jobs for a workflow run and pagination
            information. It includes the following keys:
            total_count (int): The total number of jobs for the workflow run.
            jobs (List[Dict[str, Any]]): A list of job dictionaries. Each job dictionary
                contains the following keys:
                id (int): Unique identifier of the job.
                run_id (int): The ID of the workflow run this job belongs to.
                node_id (str): A globally unique identifier for the job.
                head_sha (str): The SHA of the commit the job is running on.
                name (str): The name of the job.
                status (str): The current status of the job (e.g., 'queued', 'in_progress', 'completed').
                conclusion (Optional[str]): The outcome of the job (e.g., 'success', 'failure',
                    'cancelled', 'skipped').
                started_at (str): Timestamp of when the job started, in ISO 8601 format.
                completed_at (Optional[str]): Timestamp of when the job completed, in ISO 8601 format.
                steps (Optional[List[Dict[str, Any]]]): An optional list of step dictionaries for
                    the job. Each step dictionary contains the following keys:
                    name (str): The name of the step.
                    status (str): The status of the step.
                    conclusion (Optional[str]): The conclusion of the step.
                    number (int): The step number.
                    started_at (Optional[str]): Timestamp of when the step started, in ISO 8601 format.
                    completed_at (Optional[str]): Timestamp of when the step completed, in ISO 8601 format.
                labels (List[str]): Labels for the runner that executed the job.
                runner_id (Optional[int]): The ID of the runner that executed the job.
                runner_name (Optional[str]): The name of the runner that executed the job.
                runner_group_id (Optional[int]): The ID of the runner group the runner belongs to.
                runner_group_name (Optional[str]): The name of the runner group the runner belongs to.

    Raises:
        NotFoundError: If the specified repository_holding_account, repository, or run ID does not exist.
        InvalidInputError: If repository_holding_account, repository_context_name, or target_run_identifier are invalid, or if the 'job_filter_option' (e.g., 'latest', 'all') or pagination parameters are invalid.
    """
    from github_actions.get_workflow_run_jobs_module import get_workflow_run_jobs
    return get_workflow_run_jobs(
        owner=repository_holding_account,
        repo=repository_context_name,
        run_id=target_run_identifier,
        filter=job_filter_option,
        page=jobs_page_number,
        per_page=jobs_per_page_count
    )
