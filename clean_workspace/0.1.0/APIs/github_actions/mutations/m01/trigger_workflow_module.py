# This file is automatically generated by the MutationBuilder

def initiate_workflow_dispatch(
    target_repository_owner,
    target_repository_slug,
    workflow_to_trigger_id,
    git_reference_branch_or_tag,
    workflow_input_parameters=None
):
    """
    Triggers a workflow dispatch event for a given workflow.

    This function simulates the triggering of a workflow, corresponding
    to a 'workflow_dispatch' event. It creates a new workflow run record
    in the database and returns an acknowledgement.

    The actor initiating this workflow is hardcoded because, in this context,
    authentication details (and thus the specific user) are not available.

    Args:
        target_repository_owner (str): The account owner of the repository.
        target_repository_slug (str): The name of the repository without the .git extension.
        workflow_to_trigger_id (str): The ID of the workflow or the workflow file name
            (e.g., 'main.yaml', 'ci.yml').
        git_reference_branch_or_tag (str): The Git reference for the workflow. This can be a branch name
            (e.g., 'main'), a tag name (e.g., 'v1.0.0'), or a commit SHA.
        workflow_input_parameters (Optional[Dict[str, Any]]): Input parameters to pass to the workflow. These correspond
            to the 'inputs' defined in the workflow's 'on.workflow_dispatch'
            trigger. If the workflow does not expect inputs, this can be
            omitted or an empty dictionary.

    Returns:
        Dict[str, Any]: An empty dictionary, signifying that the workflow dispatch request
        has been successfully accepted and queued for processing.

    Raises:
        InvalidInputError: If any input parameter is malformed (e.g., wrong type,
            empty when not allowed, incorrect format).
        NotFoundError: If the specified `target_repository_owner`, `target_repository_slug`, `workflow_to_trigger_id`, or `git_reference_branch_or_tag`
            cannot be found or accessed after passing initial validation.
        WorkflowDisabledError: If the target workflow is disabled, the repository
            is archived, or the workflow is not configured for `workflow_dispatch`.
    """
    from github_actions.trigger_workflow_module import trigger_workflow
    return trigger_workflow(
        owner=target_repository_owner,
        repo=target_repository_slug,
        workflow_id=workflow_to_trigger_id,
        ref=git_reference_branch_or_tag,
        inputs=workflow_input_parameters
    )
