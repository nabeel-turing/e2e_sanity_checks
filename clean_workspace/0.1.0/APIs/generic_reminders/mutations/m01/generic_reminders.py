# This file is automatically generated by the MutationBuilder

def add_reminder_event(
    reminder_subject=None,
    reminder_details=None,
    initial_date=None,
    scheduled_time=None,
    time_period_specifier=None,
    recurrence_end_date=None,
    repetition_frequency_count=0,
    repetition_period_unit=None,
    weekly_recurrence_days=None,
    monthly_recurrence_weeks=None,
    monthly_recurrence_dates=None,
    total_recurrences=None
):
    """
    Creates a new reminder. Cannot create reminders in the past.

    Args:
        reminder_subject (Optional[str]): The title of the reminder. Short description of what to be reminded about.
        reminder_details (Optional[str]): Additional description for the reminder.
        initial_date (Optional[str]): Scheduled date in YYYY-MM-DD format. Must be current date or future.
        scheduled_time (Optional[str]): Scheduled time in hh:mm:ss format.
        time_period_specifier (Optional[str]): One of "AM", "PM", or "UNKNOWN".
        recurrence_end_date (Optional[str]): End date for recurring reminders in YYYY-MM-DD format. Must be >= start_date.
        repetition_frequency_count (Optional[int]): Number of repeat intervals. Defaults to 0.
        repetition_period_unit (Optional[str]): Unit of repeat intervals. Accepts MINUTE, HOUR, DAY, WEEK, MONTH, YEAR in any case (e.g., 'minute', 'MINUTE', 'Minute').
        weekly_recurrence_days (Optional[List[str]]): Days of week for recurring reminders.
                                            Accepts SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, or SATURDAY in any case (e.g., 'monday', 'MONDAY', or 'Monday').
        monthly_recurrence_weeks (Optional[List[str]]): Weeks of month for recurring reminders.
                                            Accepts FIRST, SECOND, THIRD, FOURTH, LAST, or the numeric strings '1'-'5'.
        monthly_recurrence_dates (Optional[List[str]]): Days of month for recurring reminders. 
                                            Accepts DAY_1, DAY_2, DAY_3, DAY_4, DAY_5, DAY_6, DAY_7, DAY_8, DAY_9, DAY_10, DAY_11, DAY_12, DAY_13, DAY_14, DAY_15, DAY_16, DAY_17, DAY_18, DAY_19, DAY_20, DAY_21, DAY_22, DAY_23, DAY_24, DAY_25, DAY_26, DAY_27, DAY_28, DAY_29, DAY_30, DAY_31, or the numeric strings '1'-'31'.
                                            Case-insensitive for DAY_X format (e.g., 'day_5', 'Day_10', 'DAY_15' are all valid).
                                            Use LAST if the user wants the reminder to be scheduled on the last day of the month.
        total_recurrences (Optional[int]): Number of times reminder should recur.

    Returns:
        Dict[str, Any]: RemindersResult containing:
            - message (str): Status message about the operation
            - reminders (List[Dict[str, Any]]): List containing the created reminder with fields:
                - id (str): Unique reminder identifier
                - title (str): Reminder title
                - description (str): Reminder description
                - start_date (str): Scheduled date in YYYY-MM-DD format
                - time_of_day (str): Scheduled time in hh:mm:ss format
                - am_pm_or_unknown (str): AM/PM indicator
                - end_date (str): End date for recurring reminders
                - repeat_every_n (int): Repeat interval number
                - repeat_interval_unit (str): Repeat interval unit
                - days_of_week (List[str]): Days of week for recurrence
                - weeks_of_month (List[str]): Weeks of month for recurrence
                - days_of_month (List[str]): Days of month for recurrence
                - occurrence_count (int): Number of occurrences
                - completed (bool): Whether reminder is completed
                - deleted (bool): Whether reminder is deleted
                - created_at (str): Creation timestamp
                - updated_at (str): Last update timestamp
                - schedule (str): Human-readable schedule string
                - uri (str): Reminder URI
            - undo_operation_ids (List[str]): Operation IDs for undo functionality

    Raises:
        ValidationError: If input parameters don't meet validation requirements.
        InvalidTimeError: If the specified time is in the past.
    """
    from generic_reminders.generic_reminders import create_reminder
    return create_reminder(
        title=reminder_subject,
        description=reminder_details,
        start_date=initial_date,
        time_of_day=scheduled_time,
        am_pm_or_unknown=time_period_specifier,
        end_date=recurrence_end_date,
        repeat_every_n=repetition_frequency_count,
        repeat_interval_unit=repetition_period_unit,
        days_of_week=weekly_recurrence_days,
        weeks_of_month=monthly_recurrence_weeks,
        days_of_month=monthly_recurrence_dates,
        occurrence_count=total_recurrences
    )


def update_existing_reminder(
    target_reminder_identifiers=None,
    reminder_search_criteria=None,
    mark_as_finished=None,
    mark_for_deletion=None,
    require_user_approval=None,
    is_batch_update=True,
    new_title=None,
    new_description=None,
    new_start_date=None,
    new_time=None,
    new_time_period=None,
    new_end_date=None,
    new_repetition_count=None,
    new_repetition_unit=None,
    new_weekly_schedule=None,
    new_monthly_week_schedule=None,
    new_monthly_day_schedule=None,
    new_occurrence_limit=None
):
    """
    Search for reminders and modify them. At least one of `reminder_ids` or `retrieval_query` must be provided.

    Args:
        target_reminder_identifiers (Optional[List[str]]): Specific reminder IDs to modify.
        reminder_search_criteria (Optional[Dict[str, Any]]): Query to find reminders to modify. Keys include:
            - query (str): Keyword search query
            - from_date (str): Start date in YYYY-MM-DD format
            - to_date (str): End date in YYYY-MM-DD format
            - from_time_of_day (str): Start time in hh:mm:ss format
            - to_time_of_day (str): End time in hh:mm:ss format
            - include_completed (bool): Include completed reminders
            - is_recurring (bool): Filter for recurring reminders only
        mark_as_finished (Optional[bool]): Mark reminders as completed.
        mark_for_deletion (Optional[bool]): Mark reminders as deleted.
        require_user_approval (Optional[bool]): Whether to ask for user confirmation.
        is_batch_update (bool): Whether this is a bulk operation on multiple reminders.
        new_title (Optional[str]): New title for the reminder(s).
        new_description (Optional[str]): New description for the reminder(s).
        new_start_date (Optional[str]): New start date in YYYY-MM-DD format.
        new_time (Optional[str]): New time in hh:mm:ss format.
        new_time_period (Optional[str]): AM/PM indicator or UNKNOWN.
        new_end_date (Optional[str]): New end date for recurring reminders.
        new_repetition_count (Optional[int]): New repeat interval number.
        new_repetition_unit (Optional[str]): New repeat interval unit. Accepts values in any case (e.g., 'minute', 'MINUTE', 'Minute').
        new_weekly_schedule (Optional[List[str]]): Days of week for recurring reminders.
                                            Accepts SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, or SATURDAY in any case (e.g., 'monday', 'MONDAY', or 'Monday').
        new_monthly_week_schedule (Optional[List[str]]): Weeks of month for recurring reminders.
                                            Accepts FIRST, SECOND, THIRD, FOURTH, LAST, or the numeric strings '1'-'5'.
        new_monthly_day_schedule (Optional[List[str]]): Days of month for recurring reminders. 
                                            Accepts DAY_1, DAY_2, DAY_3, DAY_4, DAY_5, DAY_6, DAY_7, DAY_8, DAY_9, DAY_10, DAY_11, DAY_12, DAY_13, DAY_14, DAY_15, DAY_16, DAY_17, DAY_18, DAY_19, DAY_20, DAY_21, DAY_22, DAY_23, DAY_24, DAY_25, DAY_26, DAY_27, DAY_28, DAY_29, DAY_30, DAY_31, or the numeric strings '1'-'31'.
                                            Case-insensitive for DAY_X format (e.g., 'day_5', 'Day_10', 'DAY_15' are all valid).
                                            Use LAST if the user wants the reminder to be scheduled on the last day of the month.
        new_occurrence_limit (Optional[int]): New occurrence count.

    Returns:
        Dict[str, Any]: RemindersResult containing:
            - message (str): Status message about the operation
            - reminders (List[Dict[str, Any]]): List of modified reminders with fields:
                - id (str): Unique reminder identifier
                - title (str): Reminder title
                - description (str): Reminder description
                - completed (bool): Whether reminder is completed
                - deleted (bool): Whether reminder is deleted
                - start_date (str): Scheduled date in YYYY-MM-DD format
                - time_of_day (str): Scheduled time in hh:mm:ss format
                - am_pm_or_unknown (str): AM/PM indicator
                - end_date (str): End date for recurring reminders
                - repeat_every_n (int): Repeat interval number
                - repeat_interval_unit (str): Repeat interval unit
                - days_of_week (List[str]): Days of week for recurrence
                - weeks_of_month (List[str]): Weeks of month for recurrence
                - days_of_month (List[str]): Days of month for recurrence
                - occurrence_count (int): Number of occurrences
                - created_at (str): Creation timestamp
                - updated_at (str): Last update timestamp
                - schedule (str): Human-readable schedule string
                - uri (str): Reminder URI
            - undo_operation_ids (List[str]): Operation IDs for undo functionality

    Raises:
        ValidationError: If input parameters don't meet validation requirements.
        ReminderNotFoundError: If no matching reminders are found.
        InvalidTimeError: If the new specified time is in the past.
    """
    from generic_reminders.generic_reminders import modify_reminder
    return modify_reminder(
        reminder_ids=target_reminder_identifiers,
        retrieval_query=reminder_search_criteria,
        completed=mark_as_finished,
        deleted=mark_for_deletion,
        ask_for_confirmation=require_user_approval,
        is_bulk_mutation=is_batch_update,
        title=new_title,
        description=new_description,
        start_date=new_start_date,
        time_of_day=new_time,
        am_pm_or_unknown=new_time_period,
        end_date=new_end_date,
        repeat_every_n=new_repetition_count,
        repeat_interval_unit=new_repetition_unit,
        days_of_week=new_weekly_schedule,
        weeks_of_month=new_monthly_week_schedule,
        days_of_month=new_monthly_day_schedule,
        occurrence_count=new_occurrence_limit
    )


def search_for_reminders(
    search_keyword_text=None,
    search_start_date=None,
    search_start_time=None,
    search_end_date=None,
    search_end_time=None,
    fetch_completed_reminders=False,
    filter_by_recurring=False,
    fetch_deleted_reminders=False
):
    """
    Fetch reminders context. This is an internal function not visible to the model.

    Args:
        search_keyword_text (Optional[str]): Query string for searching reminders.
        search_start_date (Optional[str]): Start date filter in YYYY-MM-DD format.
        search_start_time (Optional[str]): Start time filter in hh:mm:ss format.
        search_end_date (Optional[str]): End date filter in YYYY-MM-DD format.
        search_end_time (Optional[str]): End time filter in hh:mm:ss format.
        fetch_completed_reminders (bool): Whether to include completed reminders.
        filter_by_recurring (bool): Whether to filter for recurring reminders only.
        fetch_deleted_reminders (bool): Whether to include deleted reminders.

    Returns:
        Dict[str, Any]: RemindersResult containing:
            - message (str): Status message indicating number of reminders found
            - reminders (List[Dict[str, Any]]): List of matching reminder objects, each containing:
                - id (str): Unique reminder identifier
                - title (str): Reminder title
                - description (str): Reminder description
                - start_date (str): Scheduled date in YYYY-MM-DD format
                - time_of_day (str): Scheduled time in hh:mm:ss format
                - am_pm_or_unknown (str): AM/PM indicator
                - end_date (str): End date for recurring reminders
                - repeat_every_n (int): Repeat interval number
                - repeat_interval_unit (str): Repeat interval unit
                - days_of_week (List[str]): Days of week for recurrence
                - weeks_of_month (List[str]): Weeks of month for recurrence
                - days_of_month (List[str]): Days of month for recurrence
                - occurrence_count (int): Number of occurrences
                - completed (bool): Whether reminder is completed
                - deleted (bool): Whether reminder is deleted
                - created_at (str): Creation timestamp
                - updated_at (str): Last update timestamp
                - schedule (str): Human-readable schedule string
                - uri (str): Reminder URI

    Raises:
        ValidationError: If validation fails for any of the following reasons:
            - search_keyword_text is not a string
            - Date parameters (search_start_date, search_end_date) are not in YYYY-MM-DD format
            - Time parameters (search_start_time, search_end_time) are not in hh:mm:ss format
            - Boolean parameters (fetch_completed_reminders, filter_by_recurring, fetch_deleted_reminders) are not boolean
            - search_start_date is after search_end_date
            - search_start_time is after search_end_time (when on the same date)
    """
    from generic_reminders.generic_reminders import get_reminders
    return get_reminders(
        query=search_keyword_text,
        from_date=search_start_date,
        from_time_of_day=search_start_time,
        to_date=search_end_date,
        to_time_of_day=search_end_time,
        include_completed=fetch_completed_reminders,
        is_recurring=filter_by_recurring,
        include_deleted=fetch_deleted_reminders
    )


def find_and_display_reminders(identifiers_to_display=None, query_for_display=None):
    """
    Search for and show matching reminders to the user. When using reminder_ids, deleted reminders are included. When using retrieval_query, deleted reminders are excluded by default unless include_deleted=True.

    Args:
        identifiers_to_display (Optional[List[str]]): Specific reminder IDs to show. Deleted reminders will be included.
        query_for_display (Optional[Dict[str, Any]]): Query to find reminders to show. Keys include:
            - query (str): Keyword search query
            - from_date (str): Start date in YYYY-MM-DD format
            - to_date (str): End date in YYYY-MM-DD format
            - from_time_of_day (str): Start time in hh:mm:ss format
            - to_time_of_day (str): End time in hh:mm:ss format
            - include_completed (bool): Include completed reminders
            - is_recurring (bool): Filter for recurring reminders only
            - include_deleted (bool): Include deleted reminders

    Returns:
        Dict[str, Any]: RemindersResult containing:
            - message (str): Status message indicating number of reminders found
            - reminders (List[Dict[str, Any]]): List of matching reminder objects, each containing:
                - id (str): Unique reminder identifier
                - title (str): Reminder title
                - description (str): Reminder description
                - start_date (str): Scheduled date in YYYY-MM-DD format
                - time_of_day (str): Scheduled time in hh:mm:ss format
                - am_pm_or_unknown (str): AM/PM indicator
                - end_date (str): End date for recurring reminders
                - repeat_every_n (int): Repeat interval number
                - repeat_interval_unit (str): Repeat interval unit
                - days_of_week (List[str]): Days of week for recurrence
                - weeks_of_month (List[str]): Weeks of month for recurrence
                - days_of_month (List[str]): Days of month for recurrence
                - occurrence_count (int): Number of occurrences
                - completed (bool): Whether reminder is completed
                - deleted (bool): Whether reminder is deleted
                - created_at (str): Creation timestamp
                - updated_at (str): Last update timestamp
                - schedule (str): Human-readable schedule string
                - uri (str): Reminder URI

    Raises:
        ValidationError: If validation fails for any of the following reasons:
            - Both identifiers_to_display and query_for_display are provided
            - Neither identifiers_to_display nor query_for_display is provided
            - identifiers_to_display is not a list or contains non-string values
            - identifiers_to_display is empty
            - query_for_display is not a dictionary
        ReminderNotFoundError: If any of the provided identifiers_to_display are not found.
    """
    from generic_reminders.generic_reminders import show_matching_reminders
    return show_matching_reminders(
        reminder_ids=identifiers_to_display,
        retrieval_query=query_for_display
    )


def revert_reminder_operation(operation_identifiers_to_revert=None):
    """
    Revert reminder operations from the last turn of conversation.

    Args:
        operation_identifiers_to_revert (Optional[List[str]]): IDs of operations to undo.

    Returns:
        str: Status message indicating success or failure of undo operations.

    Raises:
        ValidationError: If validation fails for any of the following reasons:
            - operation_identifiers_to_revert is not a list
            - operation_identifiers_to_revert contains non-string values
        OperationNotFoundError: If any of the specified operation IDs don't exist in the operations database.
    """
    from generic_reminders.generic_reminders import undo
    return undo(undo_operation_ids=operation_identifiers_to_revert)
