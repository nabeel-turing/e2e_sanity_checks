[
  {
    "name": "create_new_jupyter_notebook",
    "description": "Generates a new Jupyter Notebook (.ipynb) in VS Code.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "create_new_workspace",
    "description": "Generate steps for creating any project, such as TypeScript, Next.js, or VS Code extensions, within a VS Code workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A clear and concise query describing the workspace to generate."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "file_search",
    "description": "Search for files in the workspace by glob pattern, returning a list of up to 20 matching relative file paths from the workspace root.",
    "parameters": {
      "type": "object",
      "properties": {
        "glob_pattern": {
          "type": "string",
          "description": "A glob pattern to search for files, matched from the workspace root."
        }
      },
      "required": [
        "glob_pattern"
      ]
    }
  },
  {
    "name": "get_changed_files",
    "description": "Get git diffs for current file changes in the active git repository, providing each file's path, status, unified diff output, and original path if renamed or copied.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "get_errors",
    "description": "Get compile or lint errors in a code file to show user-visible issues and validate changes.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "Path to the code file for error analysis."
        }
      },
      "required": [
        "file_path"
      ]
    }
  },
  {
    "name": "get_project_setup_info",
    "description": "Provides Visual Studio Code workspace setup information based on a project type and programming language, requiring a pre-existing workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_type": {
          "type": "string",
          "description": "The project type, such as 'typescript_server', 'vscode_extension', or 'python_datascience'."
        },
        "language": {
          "type": "string",
          "description": "The project's primary programming language (e.g., 'typescript', 'python')."
        }
      },
      "required": [
        "language",
        "project_type"
      ]
    }
  },
  {
    "name": "get_terminal_output",
    "description": "Retrieves new standard output, standard error, running status, and exit code for a previously started terminal command, providing all remaining output and the final exit code upon process completion.",
    "parameters": {
      "type": "object",
      "properties": {
        "terminal_id": {
          "type": "string",
          "description": "The string ID of a background terminal process, returned by its initiating function, and containing only digits."
        }
      },
      "required": [
        "terminal_id"
      ]
    }
  },
  {
    "name": "get_vscode_api",
    "description": "Get relevant VS Code API references for VS Code extension development, addressing VS Code APIs, capabilities, or best practices within extension development workspaces.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The query string to search VS Code documentation, which should contain all relevant context."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "grep_search",
    "description": "Perform a text search within the user's workspace for an exact string or regular expression, limited to 20 results.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_pattern": {
          "type": "string",
          "description": "The exact string or regular expression to search for in the workspace."
        }
      },
      "required": [
        "search_pattern"
      ]
    }
  },
  {
    "name": "insert_edit_into_file",
    "description": "Insert new code into an existing file, applying all modifications for that file at once using `edit_instructions` formatted with `// ...existing code...` to represent unchanged regions.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The path of the file within the workspace to be modified."
        },
        "edit_instructions": {
          "type": "string",
          "description": "The content representing file changes, in a concise diff-like format, using `// ...existing code...` comments for unchanged regions and providing only new or modified code blocks."
        },
        "explanation": {
          "type": "string",
          "description": "A natural language explanation of the changes made in the edit, which should be generated first."
        }
      },
      "required": [
        "edit_instructions",
        "explanation",
        "file_path"
      ]
    }
  },
  {
    "name": "install_extension",
    "description": "Installs a Visual Studio Code extension exclusively as part of a new workspace creation process.",
    "parameters": {
      "type": "object",
      "properties": {
        "extension_id": {
          "type": "string",
          "description": "The unique identifier of the Visual Studio Code extension to install, such as `ms-python.python`."
        }
      },
      "required": [
        "extension_id"
      ]
    }
  },
  {
    "name": "list_code_usages",
    "description": "List all usages, including references, definitions, and implementations, for a specified code symbol such as a function, class, method, or variable.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to the file containing the symbol for usage lookup."
        },
        "line_number": {
          "type": "integer",
          "description": "The 1-based line number in the specified file where the symbol's identifier typically starts."
        },
        "column_number": {
          "type": "integer",
          "description": "The 1-based character offset on the line in the specified file where the symbol's identifier starts."
        }
      },
      "required": [
        "column_number",
        "file_path",
        "line_number"
      ]
    }
  },
  {
    "name": "list_dir",
    "description": "List directory contents, indicating folders with a trailing '/' in their names and files otherwise.",
    "parameters": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path to the directory whose contents are to be listed."
        }
      },
      "required": [
        "path"
      ]
    }
  },
  {
    "name": "read_file",
    "description": "Reads a specified range of lines from a file, optionally providing a file structure outline for larger files, and can be called repeatedly for more content.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "Path to the file to read."
        },
        "start_line": {
          "type": "integer",
          "description": "The 1-based starting line number for content retrieval."
        },
        "end_line": {
          "type": "integer",
          "description": "The 1-based ending line number of the content to retrieve."
        }
      },
      "required": [
        "end_line",
        "file_path",
        "start_line"
      ]
    }
  },
  {
    "name": "run_in_terminal",
    "description": "Execute a shell command in a persistent terminal session, ensuring commands using pagers (e.g., `git log`) are modified to disable them (e.g., `git --no-pager log` or `command | cat`); if `is_background` is `True` for long-running processes, it returns a terminal ID for `get_terminal_output`.",
    "parameters": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The required shell command to execute; it must disable pagers (e.g., `git --no-pager log`) or pipe output (e.g., `git log | cat`) to prevent stalled execution or unexpected behavior."
        },
        "is_background": {
          "type": "boolean",
          "description": "If `true`, runs the command as a background process and immediately returns a terminal ID; if `false` (default), runs in the foreground and waits for completion before returning output."
        }
      },
      "required": [
        "command"
      ]
    }
  },
  {
    "name": "semantic_search",
    "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace, returning snippets if large or full contents if small.",
    "parameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The natural language query string to search for."
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "test_search",
    "description": "Locate the related source or test file for a given path, and return its path, relationship type, and confidence score.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to a source or test file to find its related counterpart."
        }
      },
      "required": [
        "file_path"
      ]
    }
  }
]