# This file is automatically generated by the MutationBuilder

def get_code_diagnostics(file_to_analyze):
    """
    Get any compile or lint errors in a code file.

    If a user mentions errors or problems in a file, they may be referring to
    these compile or lint errors. This function allows seeing the same errors
    that the user is seeing. It is also used after editing a file to validate
    the change.

    Args:
        file_to_analyze (str): The path to the code file to analyze for errors.

    Returns:
        List[Dict[str, Any]]: A list of compile or lint errors found in the
            specified code file. Each dictionary in the list represents an
            error and contains the following keys:
            file_path (str): The path to the file where the error occurred.
            line_number (int): The line number (1-based) where the error
                is located.
            column_number (Optional[int]): The column number (1-based) where
                the error starts, if available.
            message (str): The descriptive error message provided by the
                compiler or linter.
            severity (str): The severity of the issue (e.g., 'error',
                'warning', 'info').
            code (Optional[str]): An optional error code or identifier
                (e.g., 'E0425', 'eslint(no-unused-vars)').
            source (Optional[str]): The source of the error (e.g., 'compiler',
                'linter:eslint', 'typescript-language-server').

    Raises:
        FileNotFoundError: If the specified file path does not exist.
        ToolConfigurationError: If the linter, compiler, or language server
            required to get errors is not configured correctly, not found,
            or fails to run.
        AnalysisFailedError: If analysis of the file could not be completed
            for other reasons.
        ValidationError: If input arguments fail validation.
    """
    from copilot.code_quality_version_control import get_errors
    return get_errors(file_path=file_to_analyze)


def get_git_diff_for_workspace():
    """
    Get git diffs of current file changes in the active git repository.

    This function retrieves git diffs for current file changes within the
    active git repository. For each changed file, it provides its path,
    status (e.g., 'modified', 'added', 'deleted', 'renamed', 'copied'),
    the diff output in unified format, and the original path if the file
    was renamed or copied. It is also noted that `run_in_terminal` can be
    used to execute git commands.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary
            represents a changed file in the active git repository and its
            diff. Each dictionary includes the following keys:
            file_path (str): The path to the changed file relative to the
                repository root.
            status (str): The status of the file (e.g., 'modified', 'added',
                'deleted', 'renamed', 'copied').
            diff_hunks (str): The diff output for the file in unified diff
                format, showing changes. Empty for added binary files or if
                diff is not applicable.
            old_file_path (Optional[str]): If the file was renamed or copied,
                this is the original path. Null otherwise.

    Raises:
        GitRepositoryNotFoundError: If the current workspace is not a git
            repository, or git command is not found.
        GitCommandError: If there is an error executing the underlying git
            diff command (e.g., due to merge conflicts, corrupted
            repository).
    """
    from copilot.code_quality_version_control import get_changed_files
    return get_changed_files()
