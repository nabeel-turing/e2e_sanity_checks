# This file is automatically generated by the MutationBuilder

def find_vscode_api_documentation(api_documentation_query):
    """
    Get relevant VS Code API references to answer questions about VS Code extension development.

    This function gets relevant VS Code API references to answer questions about VS Code
    extension development. It is used when the user asks about VS Code APIs,
    capabilities, or best practices related to developing VS Code extensions.
    It is used in all VS Code extension development workspaces.

    Args:
        api_documentation_query (str): The query to search vscode documentation for. Should contain all
            relevant context.

    Returns:
        Dict[str, Any]: A dictionary containing the function's results, with the following key:
            api_references (List[Dict[str, Any]]): A list of relevant VS Code API
                references. Each dictionary in this list provides details about an
                API element and includes the following keys:
                name (str): The name of the API element (e.g., class name, function
                    name, property name).
                documentation_summary (str): A summary of the API's documentation
                    or purpose.
                module (str): The VS Code API module or namespace the element
                    belongs to (e.g., 'vscode.window', 'vscode.commands').
                kind (str): The kind of the API element (e.g., 'class', 'function',
                    'interface', 'enum', 'property', 'event').
                signature (Optional[str]): The signature of the function or method,
                    if applicable.
                example_usage (Optional[str]): A brief code example demonstrating
                    the use of the API element.

    Raises:
        QueryTooBroadError: If the api_documentation_query for API references is too vague to yield
            specific or useful results.
        APIDatabaseNotAvailableError: If the VS Code API reference database cannot
            be accessed or is not initialized.
        ValidationError: If input arguments fail validation.
    """
    from copilot.vscode_environment import get_vscode_api
    return get_vscode_api(query=api_documentation_query)


def install_vscode_extension_by_id(vscode_extension_identifier):
    """
    Install an extension in VS Code.

    This function installs an extension in Visual Studio Code. It is intended for use
    exclusively as part of a new workspace creation process.

    Args:
        vscode_extension_identifier (str): The unique identifier of the Visual Studio Code extension
            to be installed (e.g., 'ms-python.python').

    Returns:
        Dict[str, Any]: The result of the attempt to install a VS Code extension.
            This dictionary contains the following keys:
            extension_id (str): The ID of the extension that was targeted for
                installation.
            status (str): The outcome of the installation attempt (e.g., 'success',
                'failed', 'already_installed', 'not_found').
            message (Optional[str]): An optional message providing more details
                about the installation status, such as an error message if it failed.

    Raises:
        ExtensionNotFoundError: If the specified extension ID cannot be found in the
            VS Code Marketplace or available sources.
        InstallationFailedError: If the extension installation process fails due to
            system issues, permissions, or VS Code internal errors.
        UsageContextError: If this tool is used outside the intended context of a
            new workspace creation process.
        ValidationError: If input arguments fail validation.
    """
    from copilot.vscode_environment import install_extension
    return install_extension(extension_id=vscode_extension_identifier)
