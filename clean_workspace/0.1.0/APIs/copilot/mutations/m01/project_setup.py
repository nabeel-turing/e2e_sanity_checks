# This file is automatically generated by the MutationBuilder

def generate_project_setup_plan(project_description_query):
    """
    Get steps to help the user create any project in a VS Code workspace.

    Use this tool to help users set up new projects, including TypeScript-based projects, Model Context Protocol (MCP) servers, VS Code extensions, Next.js projects, Vite projects, or any other project.

    Args:
        project_description_query (str): The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create.

    Returns:
        Dict[str, Any]: A dictionary containing the function's results.
                        Expected structure:
                        {
                            "query": str, // The original query provided by the user
                            "summary": str,  // Summary of the project plan from the LLM
                            "steps": List[Dict[str, Any]] // Parsed steps from the LLM to create the project
                        }

    Raises:
        custom_errors.ValidationError: If input arguments fail validation (e.g., project_description_query is not a non-empty string).
        custom_errors.WorkspaceNotAvailableError: If the workspace root is not configured.
        RuntimeError: If the LLM call fails or returns an unparsable response.
    """
    from copilot.project_setup import create_new_workspace
    return create_new_workspace(query=project_description_query)


def fetch_project_configuration_details(project_category, primary_programming_language):
    """
    Provides project setup information for a Visual Studio Code workspace based on a project type and programming language.

    This tool provides project setup information for a Visual Studio Code workspace based on a project type and programming language. This tool must not be called without first calling the tool to create a workspace.

    Args:
        project_category (str): The type of the project (e.g., 'typescript_server', 'vscode_extension', 'python_datascience').
        primary_programming_language (str): The primary programming language of the project (e.g., 'typescript', 'python').

    Returns:
        Dict[str, Any]: A dictionary containing detailed setup information for the specified project type and language. It includes the following keys:
            project_type (str): The type of the project (e.g., 'typescript_server', 'vscode_extension', 'python_datascience').
            language (str): The primary programming language of the project.
            recommended_extensions (List[Dict[str, str]]): A list of recommended VS Code extensions. Each dictionary in the list contains:
                id (str): The unique identifier of the extension (e.g., 'dbaeumer.vscode-eslint').
                name (str): The display name of the extension.
                reason (str): A brief explanation why this extension is recommended.
            key_configuration_files (List[Dict[str, Any]]): Information about essential configuration files for the project. Each dictionary in the list contains:
                file_name_pattern (str): The typical name or pattern of the configuration file (e.g., 'tsconfig.json', '.vscode/launch.json').
                purpose (str): The role or purpose of this configuration file in the project.
                example_content_snippet (Optional[str]): A brief example or template snippet for the file content, if applicable.
            common_tasks (Optional[List[Dict[str, str]]]): Common development tasks and how to perform them. If present, each dictionary in the list contains:
                name (str): Name of the task (e.g., 'Build', 'Run Tests', 'Start Debug Server').
                command_suggestion (str): A suggested command or steps to perform the task.
            debugging_tips (Optional[List[str]]): A list of tips or common configurations for debugging this type of project in VS Code. This key may be absent if no specific tips are available.

    Raises:
        WorkspaceNotInitializedError: If this tool is called without a workspace being properly initialized or 'create_new_workspace' (or equivalent) having been successfully run first.
        ProjectTypeOrLanguageNotFoundError: If setup information for the specified project type or primary_programming_language combination is not available.
        ConfigurationError: If there's an issue fetching or generating the project setup information.
        ValidationError: If input arguments fail validation.
    """
    from copilot.project_setup import get_project_setup_info
    return get_project_setup_info(
        project_type=project_category,
        language=primary_programming_language
    )


def scaffold_new_jupyter_notebook():
    """
    Generates a new Jupyter Notebook (.ipynb) in VS Code.

    Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks
    are interactive documents commonly used for data exploration, analysis,
    visualization, and combining code with narrative text. This tool should
    only be called when the user explicitly requests to create a new Jupyter
    Notebook.

    Returns:
        Dict[str, Any]: Information about the newly created Jupyter Notebook. Contains the following keys:
            file_path (str): The absolute file path of the newly created .ipynb notebook file.
            status (str): Status of the creation operation, typically 'success' if no error is raised.
            message (Optional[str]): A confirmation message or additional details regarding the notebook creation.

    Raises:
        FileCreationError: If the notebook file cannot be created at the intended location (e.g., due to permission issues, invalid path, or disk full).
        JupyterEnvironmentError: If there's an issue with the Jupyter environment setup in VS Code, or required dependencies (like the Jupyter extension itself) are missing or misconfigured.
        InvalidRequestError: If the request to create a notebook is made in an inappropriate context (e.g., if not explicitly requested by the user as per description).
    """
    from copilot.project_setup import create_new_jupyter_notebook
    return create_new_jupyter_notebook()
