# This file is automatically generated by the MutationBuilder

def execute_shell_command(command_to_execute, run_as_background_process=False):
    """
    Run a shell command in a terminal.

    This function runs a shell command in a terminal. The terminal state is persistent across tool calls.
    This tool is intended to be used instead of printing a shell codeblock and asking the user to run it.
    If the command is a long-running background process, the `is_background` parameter must be set to `True`.
    When a command is run in the background, the function returns a terminal ID, which can be used with
    `get_terminal_output` to check the output of the background process.
    If a command typically uses a pager (e.g., `git log`, `man`, `less`), the command MUST be modified
    to disable the pager (e.g., `git --no-pager log`) or its output must be piped to a non-pager
    command (e.g., `git log | cat`). Failure to handle pagers correctly may lead to stalled
    execution or unexpected behavior.

    Args:
        command_to_execute (str): The shell command to execute. This is a required parameter.
            If the command typically uses a pager (e.g., `git log`, `man`, `less`),
            you MUST modify the command to disable the pager (e.g., `git --no-pager log`)
            or pipe its output to a non-pager command (e.g., `git log | cat`).
            Failure to do so may lead to stalled execution or unexpected behavior.
        run_as_background_process (bool): If true, the command runs as a background process, and the
            method returns immediately with a terminal ID. If false (default), the
            command runs in the foreground, and the method waits for completion before
            returning output. Defaults to false.

    Returns:
        Dict[str, Any]: Result of the terminal command execution. This dictionary contains the following keys:
            status_message (str): A message indicating the status of the command execution
                (e.g., 'Command started in background with ID X', 'Command executed successfully').
            terminal_id (Optional[str]): The ID of the terminal if the command is run in the
                background (is_background=True). This ID can be used with 'get_terminal_output'
                to fetch subsequent output. Null for foreground commands.
            stdout (Optional[str]): The standard output of the command if run in the foreground
                and completed. Null or empty for background commands or if there was no output.
            stderr (Optional[str]): The standard error output of the command if run in the
                foreground and completed. Null or empty for background commands or if there
                was no error output.
            exit_code (Optional[int]): The exit code of the command if run in the foreground
                and completed. Null for background commands (which are still running or for
                which the exit code is not immediately available via this method's direct return).

    Raises:
        CommandExecutionError: If the command_to_execute fails to execute (e.g., command_to_execute not found,
            syntax error in command_to_execute, critical runtime error).
        TerminalNotAvailableError: If a terminal instance cannot be allocated or accessed.
        InvalidInputError: If required parameters like 'command_to_execute' are missing or invalid.
    """
    from copilot.command_line import run_in_terminal
    return run_in_terminal(command=command_to_execute, is_background=run_as_background_process)


def fetch_terminal_process_output(background_process_id):
    """
    Retrieves the output and status for a terminal process.

    This function is used to get the standard output (stdout), standard error (stderr),
    running status, and exit code of a terminal command that was previously
    started.

    When called, it attempts to read any new output generated by the process
    since the last call for the same `terminal_id`. If the process has finished,
    this function will retrieve any output, the final exit code.

    Args:
        background_process_id (str): The ID of the background terminal process. This ID should
            have been returned by the function that initiated the background process.
            It must be a string containing only digits.

    Returns:
        Dict[str, Any]: A dictionary containing the output and status information:
            - "terminal_id" (str): The ID of the terminal for which output was retrieved.
            - "stdout" (str): A chunk of standard output from the command since the
              last retrieval. If the process just finished, this includes all remaining
              unread output.
            - "stderr" (str): A chunk of standard error output from the command since
              the last retrieval. If the process just finished, this includes all
              remaining unread error output. Can also contain messages if the process
              terminated unexpectedly.
            - "is_still_running" (bool): True if the process is still active,
              False if it has completed or terminated.
            - "exit_code" (Optional[int]): The exit code of the command if it has
              finished. This will be None if the process is still running.
              An exit code of -1 may indicate an unexpected termination where
              the standard exit code could not be retrieved.

    Raises:
        TypeError: If `background_process_id` is not a string.
        InvalidInputError: If `background_process_id` is empty, consists only
            of whitespace, or is not a string containing only digits.
        InvalidTerminalIdError: If the provided `background_process_id` does not
            correspond to any known or active background process.
        OutputRetrievalError: If an error occurs while trying to
            access the output files or if the execution environment for the
            terminal process is found to be in an inconsistent state (e.g.,
            execution directory deleted prematurely). This can also be raised
            for other unexpected errors during output retrieval.
    """
    from copilot.command_line import get_terminal_output
    return get_terminal_output(terminal_id=background_process_id)
