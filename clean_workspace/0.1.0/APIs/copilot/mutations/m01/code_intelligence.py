# This file is automatically generated by the MutationBuilder

def search_workspace_for_code_snippets(semantic_search_query):
    """
    Run a natural language search for relevant code or documentation comments from the user's current workspace.

    This function runs a natural language search for relevant code or documentation comments
    from the user's current workspace. It returns relevant code snippets from the
    user's current workspace if it is large, or the full contents of the workspace
    if it is small.

    Args:
        semantic_search_query (str): The natural language query string to search for.

    Returns:
        List[Dict[str, Any]]: A list of relevant code snippets or documentation segments
            from the user's workspace.
            If the workspace is determined to be small, this list may represent the
            full content of all files, with each file treated as a single snippet.
            Each dictionary in the list represents a search result and contains the
            following keys:
            file_path (str): The path to the file containing the relevant snippet.
            snippet (str): The relevant code or documentation snippet.
            start_line (int): The starting line number of the snippet in the file (1-indexed).
            end_line (int): The ending line number of the snippet in the file (inclusive).
            relevance_score (Optional[float]): A score indicating the relevance of the
                snippet (e.g., from a vector search). This may not be available or
                applicable for all results, especially if returning full file contents
                from a small workspace.

    Raises:
        WorkspaceNotAvailableError: If the user's workspace cannot be accessed or is not yet indexed.
        SearchFailedError: If the search operation fails for an unexpected reason.
        ValidationError: If input arguments fail validation.
    """
    from copilot.code_intelligence import semantic_search
    return semantic_search(query=semantic_search_query)


def find_all_symbol_references(source_file_path, symbol_line_location, symbol_column_location):
    """
    Requests to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc.

    This function lists all usages (e.g., references, definitions, implementations) of a specified code symbol such as a function, class, method, or variable.
    It is used for purposes such as:
    1. Looking for a sample implementation of an interface or class.
    2. Checking how a function is used throughout the codebase.
    3. Including and updating all usages when changing a function, method, or constructor.

    Args:
        source_file_path (str): The absolute path to the file containing the symbol for which usages are to be found.
        symbol_line_location (int): The 1-based line number in the specified file where the symbol is located. This typically refers to the start of the symbol's identifier.
        symbol_column_location (int): The 1-based column number (character offset) on the line in the specified file where the symbol is located. This typically refers to the start of the symbol's identifier.

    Returns:
        List[Dict[str, Any]]: A list of code usages found for the specified symbol. Each dictionary in the list represents a single usage and includes the following keys:
            file_path (str): The path to the file where the usage is found.
            start_line (int): The 1-based starting line number of the usage in the file.
            end_line (int): The 1-based ending line number of the usage in the file.
            start_column (Optional[int]): The 1-based starting column number (character offset) of the usage. Null if this information is not available or not applicable.
            end_column (Optional[int]): The 1-based ending column number (character offset) of the usage. Null if this information is not available or not applicable.
            usage_type (str): The type of code usage (e.g., 'reference', 'definition', 'implementation').
            snippet (str): A short code snippet (typically one or a few lines) illustrating the usage in its context.

    Raises:
        SymbolNotFoundError: If no symbol is found at the specified 'source_file_path', 'symbol_line_location', and 'symbol_column_location', or if the identified element is not a symbol for which usages can be determined (e.g., a comment).
        IndexingNotCompleteError: If the codebase is not yet fully indexed, preventing usage lookups. The client may retry after a delay.
        InvalidInputError: If 'source_file_path', 'symbol_line_location', or 'symbol_column_location' are missing, malformed (e.g., non-existent file path, non-positive line/column numbers), or point to a location outside the bounds of the file content.
        ProjectConfigurationError: If there is an issue with the project configuration that prevents resolving the file path.
    """
    from copilot.code_intelligence import list_code_usages
    return list_code_usages(
        file_path=source_file_path,
        line_number=symbol_line_location,
        column_number=symbol_column_location
    )


def find_string_or_regex_in_files(string_or_regex_pattern):
    """
    Do a text search in the workspace.

    This function performs a text search within the user's workspace. It is
    limited to 20 results and is intended for use when the exact string or
    regular expression to search for is known.

    Args:
        string_or_regex_pattern (str): The exact string or regular expression to search
            for in the workspace.

    Returns:
        List[Dict[str, Any]]: A list of text search matches. Limited to 20
            results. Each dictionary in the list represents a match and
            includes the following keys:
            file_path (str): The path to the file containing the match.
            line_number (int): The line number where the match was found.
            line_content (str): The full content of the line containing the
                match.
            match_start_column (int): The starting column index of the match
                within the line (0-based).
            match_end_column (int): The ending column index (exclusive) of the
                match within the line.

    Raises:
        InvalidSearchPatternError: If the search string or pattern is invalid
            (e.g., an invalid regular expression if supported).
        WorkspaceNotAvailableError: If the user's workspace cannot be accessed
            for searching.
        ValidationError: If input arguments fail validation.
    """
    from copilot.code_intelligence import grep_search
    return grep_search(search_pattern=string_or_regex_pattern)
