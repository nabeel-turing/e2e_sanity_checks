# This file is automatically generated by the MutationBuilder

def subscribe_to_playlist(playlist_identifier_to_follow, make_follow_publicly_visible=True):
    """
    Add the current user as a follower of a playlist.

    This endpoint allows the current user to follow a playlist, which will add it to their library and allow them to receive updates about the playlist. The playlist can be followed publicly or privately, and this setting can be changed later.

    Args:
        playlist_identifier_to_follow (str): The Spotify ID for the playlist.
            Examples: 'playlist_1', '37i9dQZF1DXcBWIGoYBM5M'.
        make_follow_publicly_visible (bool): Defaults to true. If true the playlist will be included in user's public playlists, if false it will remain private. To be able to follow playlists privately, the user must have granted the playlist-modify-private scope.
            Examples: True (public), False (private).

    Returns:
        Dict[str, Any]: Success response indicating the playlist was followed.
            message (str): Success message

    Raises:
        InvalidInputError: If playlist_identifier_to_follow is not a string or is empty, or if make_follow_publicly_visible is not a boolean.
        NoResultsFoundError: If no playlist exists with the specified playlist_identifier_to_follow.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import follow_playlist
    return follow_playlist(
        playlist_id=playlist_identifier_to_follow,
        public=make_follow_publicly_visible
    )


def unsubscribe_from_playlist(playlist_identifier_to_unfollow):
    """
    Remove the current user as a follower of a playlist.

    This endpoint allows the current user to unfollow a playlist, which will remove it from their library and stop receiving updates about the playlist.

    Args:
        playlist_identifier_to_unfollow (str): The Spotify ID for the playlist.
            Examples: 'playlist_1', '37i9dQZF1DXcBWIGoYBM5M'.

    Returns:
        Dict[str, Any]: Success response indicating the playlist was unfollowed.
            message (str): Success message

    Raises:
        InvalidInputError: If playlist_identifier_to_unfollow is not a string or is empty.
        NoResultsFoundError: If no playlist exists with the specified playlist_identifier_to_unfollow.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import unfollow_playlist
    return unfollow_playlist(playlist_id=playlist_identifier_to_unfollow)


def add_entities_to_followed_list(entity_spotify_ids_to_follow, followable_entity_category):
    """
    Add the current user as a follower of one or more artists or users.

    This endpoint allows the current user to follow multiple artists or users at once. Following an artist will add their music to the user's recommendations and allow them to receive updates about the artist. Following a user will allow them to see the user's public playlists and activity.

    Args:
        entity_spotify_ids_to_follow (List[str]): A list of the Spotify IDs for the artists or users. Maximum: 50 IDs.
            Examples: ['0TnOYISbd1XYRBk9myaseg', '3HqSLMAZ3g3d5poNaI7GOU'] for artists,
                     ['smuqPNFPXrJKcEt943KrY8', 'SLvTb0e3Rp3oLJ8YXl0dC5'] for users.
        followable_entity_category (str): The type of items to follow. Must be either "artist" or "user".

    Returns:
        Dict[str, Any]: Success response indicating the items were followed.
            message (str): Success message

    Raises:
        InvalidInputError: If entity_spotify_ids_to_follow is not a list, contains more than 50 IDs, contains invalid IDs, or followable_entity_category is invalid.
        NoResultsFoundError: If none of the specified artists or users exist.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import follow_artists_or_users
    return follow_artists_or_users(
        ids=entity_spotify_ids_to_follow,
        type=followable_entity_category
    )


def remove_entities_from_followed_list(entity_spotify_ids_to_unfollow, unfollowable_entity_category):
    """
    Remove the current user as a follower of one or more artists or users.

    This endpoint allows the current user to unfollow multiple artists or users at once. Unfollowing an artist will remove their music from the user's recommendations and stop receiving updates about the artist. Unfollowing a user will stop seeing their public playlists and activity.

    Args:
        entity_spotify_ids_to_unfollow (List[str]): A list of the Spotify IDs for the artists or users. Maximum: 50 IDs.
            Examples: ['0TnOYISbd1XYRBk9myaseg', '3HqSLMAZ3g3d5poNaI7GOU'] for artists,
                     ['smuqPNFPXrJKcEt943KrY8', 'SLvTb0e3Rp3oLJ8YXl0dC5'] for users.
        unfollowable_entity_category (str): The type of items to unfollow. Must be either "artist" or "user".

    Returns:
        Dict[str, Any]: Success response indicating the items were unfollowed.
            message (str): Success message

    Raises:
        InvalidInputError: If entity_spotify_ids_to_unfollow is not a list, contains more than 50 IDs, contains invalid IDs, or unfollowable_entity_category is invalid.
        NoResultsFoundError: If none of the specified artists or users exist.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import unfollow_artists_or_users
    return unfollow_artists_or_users(
        ids=entity_spotify_ids_to_unfollow,
        type=unfollowable_entity_category
    )


def verify_playlist_followers_status(playlist_id_to_check, list_of_user_ids_to_verify):
    """
    Check to see if the one or more users are following a specified playlist.

    This endpoint allows you to check the follow status of multiple users for a specific playlist. This is useful for displaying follow/unfollow buttons or understanding the social reach of a playlist.

    Args:
        playlist_id_to_check (str): The Spotify ID for the playlist.
            Examples: 'playlist_1', '37i9dQZF1DXcBWIGoYBM5M'.
        list_of_user_ids_to_verify (List[str]): A list of the Spotify IDs for the users. Maximum: 5 IDs.
            Examples: ['smuqPNFPXrJKcEt943KrY8', 'SLvTb0e3Rp3oLJ8YXl0dC5'].

    Returns:
        List[bool]: Array of boolean values indicating whether each user is following the playlist.
            True if the user is following the playlist, False otherwise.

    Raises:
        InvalidInputError: If playlist_id_to_check is not a string or is empty, list_of_user_ids_to_verify is not a list, contains more than 5 IDs, or contains invalid user IDs.
        NoResultsFoundError: If no playlist exists with the specified playlist_id_to_check.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import check_user_follows_playlist
    return check_user_follows_playlist(
        playlist_id=playlist_id_to_check,
        user_ids=list_of_user_ids_to_verify
    )


def confirm_current_user_follow_status(entity_ids_for_follow_check, entity_type_for_follow_check):
    """
    Check if the current user follows one or more artists or users.

    This endpoint allows you to check the follow status of the current user for multiple artists or users. This is useful for displaying follow/unfollow buttons or understanding the user's music preferences and social connections.

    Args:
        entity_ids_for_follow_check (List[str]): A list of the Spotify IDs for the artists or users. Maximum: 50 IDs.
            Examples: ['0TnOYISbd1XYRBk9myaseg', '3HqSLMAZ3g3d5poNaI7GOU'] for artists,
                     ['smuqPNFPXrJKcEt943KrY8', 'SLvTb0e3Rp3oLJ8YXl0dC5'] for users.
        entity_type_for_follow_check (str): The type of items to check. Must be either "artist" or "user".

    Returns:
        List[bool]: Array of boolean values indicating whether the current user follows each item.
            True if the user follows the item, False otherwise.

    Raises:
        InvalidInputError: If entity_ids_for_follow_check is not a list, contains more than 50 IDs, contains invalid IDs, or entity_type_for_follow_check is invalid.
        NoResultsFoundError: If none of the specified artists or users exist.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import check_user_follows_artists_or_users
    return check_user_follows_artists_or_users(
        ids=entity_ids_for_follow_check,
        type=entity_type_for_follow_check
    )


def list_current_user_followed_artists(page_result_limit=20, pagination_cursor_artist_id=None):
    """
    Get the artists that the current user follows.

    This endpoint retrieves all artists that the current user is following. The response includes detailed artist information and supports pagination for efficient data retrieval. This is essential for displaying the user's followed artists, creating artist-based recommendations, or managing user preferences.

    Args:
        page_result_limit (int): The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        pagination_cursor_artist_id (Optional[str]): The last artist ID retrieved from the previous request. Used for pagination.
            Examples: '0TnOYISbd1XYRBk9myaseg', '3HqSLMAZ3g3d5poNaI7GOU'.

    Returns:
        Dict[str, Any]: Followed artists response with pagination info.
            artists (Dict[str, Any]): Artists response containing:
                items (List[Dict[str, Any]]): Array of artist objects, each containing:
                    id (str): Unique artist identifier
                    name (str): Artist name
                    type (str): Object type ('artist')
                    uri (str): Spotify URI for the artist
                    href (str): API endpoint URL for the artist
                    external_urls (Dict[str, str]): External URLs for the artist
                        - spotify (str): The Spotify URL for the artist
                    followers (Dict[str, Any]): Follower information with total count
                        - href (str): A link to the Web API endpoint providing full details of the followers
                        - total (int): The total number of followers
                    genres (List[str]): Array of genres associated with the artist
                    images (List[Dict[str, Any]]): Artist profile images
                        - url (str): The source URL of the image
                        - height (int): The image height in pixels
                        - width (int): The image width in pixels
                    popularity (int): Popularity score (0-100)
                total (int): Total number of followed artists
                limit (int): Number of artists returned in this response
                offset (int): Offset of the first artist returned
                href (str): URL to the full list of followed artists
                next (Optional[str]): URL to the next page of results
                previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If page_result_limit is outside 1-50 range or pagination_cursor_artist_id is not a valid artist ID.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.follow import get_followed_artists
    return get_followed_artists(limit=page_result_limit, after=pagination_cursor_artist_id)
