# This file is automatically generated by the MutationBuilder

def browse_latest_album_releases(
    release_country_filter=None,
    number_of_releases_to_fetch=20,
    release_list_start_offset=0
):
    """
    Get a list of new album releases featured in Spotify.

    This endpoint retrieves the latest album releases that are featured on Spotify. The response includes detailed album information and can be filtered by country and paginated for efficient data retrieval. This is essential for music discovery and keeping users updated with the latest releases.

    Args:
        release_country_filter (Optional[str]): A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
        number_of_releases_to_fetch (int): The maximum number of albums to return. Default: 20. Minimum: 1. Maximum: 50.
        release_list_start_offset (int): The index of the first album to return. Default: 0 (the first object).

    Returns:
        Dict[str, Any]: New releases response with pagination info.
            albums (Dict[str, Any]): Albums response containing:
                items (List[Dict[str, Any]]): Array of album objects, each containing:
                    id (str): Unique album identifier
                    name (str): Album name
                    type (str): Object type ('album')
                    uri (str): Spotify URI for the album
                    href (str): API endpoint URL for the album
                    external_urls (Dict[str, str]): External URLs for the album
                        - spotify (str): The Spotify URL for the album
                    artists (List[Dict[str, Any]]): Array of artist objects
                        - external_urls (Dict[str, str]): Known external URLs for this artist
                            - spotify (str): The Spotify URL for the artist
                        - href (str): A link to the Web API endpoint providing full details of the artist
                        - id (str): The Spotify ID for the artist
                        - name (str): The name of the artist
                        - type (str): The object type ('artist')
                        - uri (str): The Spotify URI for the artist
                    album_type (str): Type of album ('album', 'single', 'compilation')
                    total_tracks (int): Total number of tracks
                    available_markets (List[str]): List of markets where album is available
                    release_date (str): Release date in YYYY-MM-DD format
                    release_date_precision (str): Precision of release date ('year', 'month', 'day')
                    images (List[Dict[str, Any]]): Album cover images
                        - url (str): The source URL of the image
                        - height (int): The image height in pixels
                        - width (int): The image width in pixels
                    popularity (int): Popularity score (0-100)
                total (int): Total number of new releases
                limit (int): Number of albums returned in this response
                offset (int): Offset of the first album returned
                href (str): URL to the full list of new releases
                next (Optional[str]): URL to the next page of results
                previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If release_country_filter is not a valid release_country_filter code, number_of_releases_to_fetch is outside 1-50 range, or release_list_start_offset is negative.
    """
    from spotify.browse import get_new_releases
    return get_new_releases(
        country=release_country_filter,
        limit=number_of_releases_to_fetch,
        offset=release_list_start_offset
    )


def browse_spotify_featured_playlists(
    featured_playlist_country_code=None,
    language_and_region_code=None,
    max_playlists_to_show=20,
    featured_list_page_number=0,
    local_time_for_curation=None
):
    """
    Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).

    This endpoint retrieves playlists that are featured on Spotify, such as those shown on the Browse tab. The response can be filtered by country and locale, and supports pagination for efficient data retrieval. This is essential for music discovery and providing curated content to users.

    Args:
        featured_playlist_country_code (Optional[str]): A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
            Examples: 'US', 'CA', 'GB', 'DE', 'FR'.
        language_and_region_code (Optional[str]): The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
            Examples: 'en_US', 'es_MX', 'fr_FR'.
        max_playlists_to_show (int): The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        featured_list_page_number (int): The index of the first playlist to return. Default: 0 (the first object).
            Examples: 0 (start from beginning), 20 (skip first 20 playlists).
        local_time_for_curation (Optional[str]): A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time.
            Examples: '2014-10-23T09:00:00', '2023-12-31T23:59:59'.

    Returns:
        Dict[str, Any]: Featured playlists response with pagination info.
            playlists (Dict[str, Any]): Playlists response containing:
                items (List[Dict[str, Any]]): Array of playlist objects, each containing:
                    id (str): Unique playlist identifier
                    name (str): Playlist name
                    type (str): Object type ('playlist')
                    uri (str): Spotify URI for the playlist
                    href (str): API endpoint URL for the playlist
                    external_urls (Dict[str, str]): External URLs for the playlist
                    owner (Dict[str, Any]): Playlist owner information
                    public (bool): Whether the playlist is public
                    collaborative (bool): Whether the playlist is collaborative
                    description (str): Playlist description
                    images (List[Dict[str, Any]]): Playlist cover images
                    tracks (Dict[str, Any]): Playlist tracks information
                    followers (Dict[str, Any]): Follower information
                total (int): Total number of featured playlists
                limit (int): Number of playlists returned in this response
                offset (int): Offset of the first playlist returned
                href (str): URL to the full list of featured playlists
                next (Optional[str]): URL to the next page of results
                previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If featured_playlist_country_code is not a valid featured_playlist_country_code code, language_and_region_code is not in correct format, max_playlists_to_show is outside 1-50 range, featured_list_page_number is negative, or local_time_for_curation is not in ISO 8601 format.
    """
    from spotify.browse import get_featured_playlists
    return get_featured_playlists(
        country=featured_playlist_country_code,
        locale=language_and_region_code,
        limit=max_playlists_to_show,
        offset=featured_list_page_number,
        timestamp=local_time_for_curation
    )


def list_all_content_categories(
    category_country_relevance=None,
    category_language_preference=None,
    category_list_page_size=20,
    category_list_start_position=0
):
    """
    Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's 'Browse' tab).

    This endpoint retrieves all available categories that can be used to browse and discover content on Spotify. The response can be filtered by country and locale, and supports pagination for efficient data retrieval. This is essential for building browse interfaces and category-based navigation.

    Args:
        category_country_relevance (Optional[str]): A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
            Examples: 'US', 'CA', 'GB', 'DE', 'FR'.
        category_language_preference (Optional[str]): The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
            Examples: 'en_US', 'es_MX', 'fr_FR'.
        category_list_page_size (int): The maximum number of categories to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        category_list_start_position (int): The index of the first category to return. Default: 0 (the first object).
            Examples: 0 (start from beginning), 20 (skip first 20 categories).

    Returns:
        Dict[str, Any]: Categories response with pagination info.
            categories (Dict[str, Any]): Categories response containing:
                items (List[Dict[str, Any]]): Array of category objects, each containing:
                    id (str): Unique category identifier
                    name (str): Category name
                    type (str): Object type ('category')
                    uri (str): Spotify URI for the category
                    href (str): API endpoint URL for the category
                    external_urls (Dict[str, str]): External URLs for the category
                    icons (List[Dict[str, Any]]): Category icons
                total (int): Total number of categories
                limit (int): Number of categories returned in this response
                offset (int): Offset of the first category returned
                href (str): URL to the full list of categories
                next (Optional[str]): URL to the next page of results
                previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If category_country_relevance is not a valid category_country_relevance code, category_language_preference is not in correct format, category_list_page_size is outside 1-50 range, or category_list_start_position is negative.
    """
    from spotify.browse import get_categories
    return get_categories(
        country=category_country_relevance,
        locale=category_language_preference,
        limit=category_list_page_size,
        offset=category_list_start_position
    )


def fetch_single_category_details(
    spotify_category_identifier,
    category_data_country_context=None,
    category_data_locale_setting=None
):
    """
    Get a single category used to tag items in Spotify (on, for example, the Spotify player's 'Browse' tab).

    This endpoint retrieves detailed information about a specific category, including its name, icons, and other metadata. This is useful for displaying category information or building category-based navigation interfaces.

    Args:
        spotify_category_identifier (str): The Spotify category ID for the category.
            Examples: 'category_1', '0JQ5DAqbMKFQ00XGBls6ym'.
        category_data_country_context (Optional[str]): A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
            Examples: 'US', 'CA', 'GB', 'DE', 'FR'.
        category_data_locale_setting (Optional[str]): The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning "Spanish (Mexico)".
            Examples: 'en_US', 'es_MX', 'fr_FR'.

    Returns:
        Dict[str, Any]: Category data with comprehensive information.
            id (str): Unique category identifier
            name (str): Category name
            type (str): Object type ('category')
            uri (str): Spotify URI for the category
            href (str): API endpoint URL for the category
            external_urls (Dict[str, str]): External URLs for the category
            icons (List[Dict[str, Any]]): Category icons

    Raises:
        InvalidInputError: If spotify_category_identifier is not a string or is empty, category_data_country_context is not a valid category_data_country_context code, or category_data_locale_setting is not in correct format.
        NoResultsFoundError: If no category exists with the specified spotify_category_identifier.
    """
    from spotify.browse import get_category
    return get_category(
        category_id=spotify_category_identifier,
        country=category_data_country_context,
        locale=category_data_locale_setting
    )


def retrieve_playlists_by_category(
    source_category_id_for_playlists,
    playlist_relevance_country=None,
    max_playlists_in_response=20,
    playlist_list_start_index=0
):
    """
    Get a list of Spotify playlists tagged with a particular category.

    This endpoint retrieves playlists that are tagged with a specific category. The response can be filtered by country and supports pagination for efficient data retrieval. This is useful for displaying category-specific playlists or building category-based browsing interfaces.

    Args:
        source_category_id_for_playlists (str): The Spotify category ID for the category.
            Examples: 'category_1', '0JQ5DAqbMKFQ00XGBls6ym'.
        playlist_relevance_country (Optional[str]): A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.
            Examples: 'US', 'CA', 'GB', 'DE', 'FR'.
        max_playlists_in_response (int): The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        playlist_list_start_index (int): The index of the first playlist to return. Default: 0 (the first object).
            Examples: 0 (start from beginning), 20 (skip first 20 playlists).

    Returns:
        Dict[str, Any]: Category playlists response with pagination info.
            playlists (Dict[str, Any]): Playlists response containing:
                items (List[Dict[str, Any]]): Array of playlist objects, each containing:
                    id (str): Unique playlist identifier
                    name (str): Playlist name
                    type (str): Object type ('playlist')
                    uri (str): Spotify URI for the playlist
                    href (str): API endpoint URL for the playlist
                    external_urls (Dict[str, str]): External URLs for the playlist
                    owner (Dict[str, Any]): Playlist owner information
                    public (bool): Whether the playlist is public
                    collaborative (bool): Whether the playlist is collaborative
                    description (str): Playlist description
                    images (List[Dict[str, Any]]): Playlist cover images
                    tracks (Dict[str, Any]): Playlist tracks information
                    followers (Dict[str, Any]): Follower information
                total (int): Total number of playlists in the category
                limit (int): Number of playlists returned in this response
                offset (int): Offset of the first playlist returned
                href (str): URL to the full list of category playlists
                next (Optional[str]): URL to the next page of results
                previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If source_category_id_for_playlists is not a string or is empty, playlist_relevance_country is not a valid playlist_relevance_country code, max_playlists_in_response is outside 1-50 range, or playlist_list_start_index is negative.
        NoResultsFoundError: If no category exists with the specified source_category_id_for_playlists.
    """
    from spotify.browse import get_category_playlists
    return get_category_playlists(
        category_id=source_category_id_for_playlists,
        country=playlist_relevance_country,
        limit=max_playlists_in_response,
        offset=playlist_list_start_index
    )


def generate_track_recommendations(
    initial_artist_seeds=None,
    initial_genre_seeds=None,
    initial_track_seeds=None,
    recommendation_list_size_target=20,
    recommendation_market_context=None
):
    """
    Get recommendations for one or more seed artists, genres, and/or tracks.

    This endpoint creates a playlist of tracks based on the provided seeds and audio features. The response includes detailed track information and can be customized using various audio feature parameters. This is essential for music discovery and creating personalized listening experiences.

    Args:
        initial_artist_seeds (Optional[List[str]]): A list of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
            Examples: ['artist_1', 'artist_2'], ['0TnOYISbd1XYRBk9myaseg'].
        initial_genre_seeds (Optional[List[str]]): A list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
            Examples: ['rock', 'pop'], ['classical', 'jazz'].
        initial_track_seeds (Optional[List[str]]): A list of Spotify IDs for seed tracks. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres.
            Examples: ['track_1', 'track_2'], ['4iV5W9uYEdYUVa79Axb7Rh'].
        recommendation_list_size_target (Optional[int]): The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20. Minimum: 1. Maximum: 100.
            Examples: 10 (small selection), 20 (default), 100 (maximum).
        recommendation_market_context (Optional[str]): An ISO 3166-1 alpha-2 country code. The country for which to get the top tracks.
            Examples: 'US', 'CA', 'GB', 'DE', 'FR'.

    Returns:
        Dict[str, Any]: Recommendations response with seeds and tracks.
            seeds (List[Dict[str, Any]]): Array of seed objects, each containing:
                afterFilteringSize (int): The number of tracks available after filtering
                afterRelinkingSize (int): The number of tracks available after relinking
                href (Optional[str]): A link to the full track or artist data for this seed
                id (str): The ID used to select this seed
                initialPoolSize (int): The number of recommended tracks available for this seed
                type (str): The entity type of this seed ('artist', 'track', or 'genre')
            tracks (List[Dict[str, Any]]): Array of track objects, each containing:
                id (str): Unique track identifier
                name (str): Track name
                type (str): Object type ('track')
                uri (str): Spotify URI for the track
                href (str): API endpoint URL for the track
                external_urls (Dict[str, str]): External URLs for the track
                artists (List[Dict[str, Any]]): Array of artist objects
                album (Dict[str, Any]): Album information
                duration_ms (int): Track duration in milliseconds
                explicit (bool): Whether the track contains explicit content
                track_number (int): Track number on the album
                disc_number (int): Disc number
                available_markets (List[str]): List of markets where track is available
                popularity (int): Popularity score (0-100)
                is_local (bool): Whether the track is a local file
                is_playable (bool): Whether the track is playable

    Raises:
        InvalidInputError: If any seed parameters are invalid, recommendation_list_size_target is outside 1-100 range, or recommendation_market_context is not a valid country code.
    """
    from spotify.browse import get_recommendations
    return get_recommendations(
        seed_artists=initial_artist_seeds,
        seed_genres=initial_genre_seeds,
        seed_tracks=initial_track_seeds,
        limit=recommendation_list_size_target,
        market=recommendation_market_context
    )


def list_recommendation_genre_seeds():
    """
    Retrieve a list of available genres seed parameter values for recommendations.

    This endpoint retrieves all available genre seeds that can be used as seed_genres in the get_recommendations endpoint. This is useful for building genre selection interfaces or understanding what genres are available for recommendations.

    Returns:
        Dict[str, Any]: Available genre seeds response.
            genres (List[str]): Array of available genre seed values
                Examples: ['acoustic', 'afrobeat', 'alt-rock', 'alternative', 'ambient'].

    Raises:
        None: This endpoint does not raise any specific errors.
    """
    from spotify.browse import get_available_genre_seeds
    return get_available_genre_seeds()
