# This file is automatically generated by the MutationBuilder

def fetch_playlist_by_id(
    target_playlist_identifier,
    content_availability_region=None,
    response_field_filter=None,
    supported_item_types=None
):
    """
    Get a playlist owned by a Spotify user.

    This endpoint retrieves detailed information about a specific playlist including its tracks, metadata, and owner information. This is essential for displaying playlist information, track listings, and playlist details in music applications.

    Args:
        target_playlist_identifier (str): The Spotify ID for the playlist.
        content_availability_region (Optional[str]): An ISO 3166-1 alpha-2 country code. If a market is not supplied, no market is applied.
        response_field_filter (Optional[str]): Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned.
        supported_item_types (Optional[str]): A comma-separated list of item types that your client supports besides the default track type. Valid types are: track and episode.

    Returns:
        Dict[str, Any]: Playlist object with comprehensive information.
            collaborative (bool): Whether the playlist is collaborative
            description (Optional[str]): The playlist description
            external_urls (Dict[str, str]): Known external URLs for this playlist
                - spotify (str): The Spotify URL for the playlist
            followers (Dict[str, Any]): Information about the followers of the playlist
                - href (Optional[str]): A link to the Web API endpoint providing full details of the followers
                - total (int): The total number of followers
            href (str): A link to the Web API endpoint providing full details of the playlist
            id (str): The Spotify ID for the playlist
            images (List[Dict[str, Any]]): Images for the playlist
                - url (str): The source URL of the image
                - height (int): The image height in pixels
                - width (int): The image width in pixels
            name (str): The name of the playlist
            owner (Dict[str, Any]): The user who owns the playlist
                - display_name (str): The name displayed on the user's profile
                - external_urls (Dict[str, str]): Known external URLs for this user
                    - spotify (str): The Spotify URL for the user
                - followers (Dict[str, Any]): Information about the followers of the user
                    - href (Optional[str]): A link to the Web API endpoint providing full details of the followers
                    - total (int): The total number of followers
                - href (str): A link to the Web API endpoint providing full details of the user
                - id (str): The Spotify ID for the user
                - images (List[Dict[str, Any]]): The user's profile image
                - type (str): The object type ('user')
                - uri (str): The Spotify URI for the user
            public (bool): Whether the playlist is public
            snapshot_id (str): The version identifier for the current playlist
            tracks (Dict[str, Any]): Information about the tracks of the playlist
                - href (str): A link to the Web API endpoint providing full details of the playlist tracks
                - limit (int): The maximum number of tracks in the response
                - next (Optional[str]): URL to the next page of results
                - offset (int): The offset of the items returned
                - previous (Optional[str]): URL to the previous page of results
                - total (int): The total number of tracks available
                - items (List[Dict[str, Any]]): Array of playlist track objects
                    - added_at (str): The date and time the track was added
                    - added_by (Dict[str, Any]): The Spotify user who added the track
                        - display_name (str): The name displayed on the user's profile
                        - external_urls (Dict[str, str]): Known external URLs for this user
                            - spotify (str): The Spotify URL for the user
                        - href (str): A link to the Web API endpoint providing full details of the user
                        - id (str): The Spotify ID for the user
                        - type (str): The object type ('user')
                        - uri (str): The Spotify URI for the user
                    - is_local (bool): Whether this track is a local file or not
                    - track (Dict[str, Any]): Information about the track
                        - artists (List[Dict[str, Any]]): Array of artist objects
                        - available_markets (List[str]): List of markets where track is available
                        - disc_number (int): The disc number
                        - duration_ms (int): The track length in milliseconds
                        - explicit (bool): Whether the track has explicit lyrics
                        - external_urls (Dict[str, str]): External URLs for this track
                            - spotify (str): The Spotify URL for the track
                        - href (str): A link to the Web API endpoint providing full details of the track
                        - id (str): The Spotify ID for the track
                        - is_playable (bool): Whether the track is playable in the given market
                        - linked_from (Optional[Dict[str, Any]]): Information about the originally requested track when Track Relinking is applied
                        - restrictions (Optional[Dict[str, Any]]): Track restrictions if any
                            - reason (str): The reason for the restriction
                        - name (str): The name of the track
                        - preview_url (Optional[str]): A URL to a 30 second preview (MP3 format) of the track
                        - track_number (int): The number of the track
                        - type (str): The object type ('track')
                        - uri (str): The Spotify URI for the track
                        - is_local (bool): Whether the track is from a local file
            type (str): The object type ('playlist')
            uri (str): The Spotify URI for the playlist

    Raises:
        InvalidInputError: If target_playlist_identifier is not a string or is empty, or if supported_item_types has invalid values.
        InvalidMarketError: If content_availability_region is not a valid ISO 3166-1 alpha-2 country code.
        NoResultsFoundError: If no playlist exists with the specified target_playlist_identifier or if playlist is not available in the specified content_availability_region.
    """
    from spotify.playlist import get_playlist
    return get_playlist(
        playlist_id=target_playlist_identifier,
        market=content_availability_region,
        fields=response_field_filter,
        additional_types=supported_item_types
    )


def update_playlist_metadata(
    playlist_id_for_update,
    new_playlist_title=None,
    new_public_visibility_status=None,
    new_collaborative_status=None,
    new_playlist_description_text=None
):
    """
    Change a playlist's name and public/private state, collaborative state, and description.

    This endpoint allows users to modify the metadata of their playlists, including the name, visibility settings, collaborative status, and description. This is essential for playlist management functionality.

    Args:
        playlist_id_for_update (str): The Spotify ID for the playlist.
        new_playlist_title (Optional[str]): The new name for the playlist, for example "My New Playlist Title".
        new_public_visibility_status (Optional[bool]): If true the playlist will be public, if false it will be private.
        new_collaborative_status (Optional[bool]): If true, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client.
        new_playlist_description_text (Optional[str]): Value for playlist description as displayed in Spotify Clients and in the Web API.

    Returns:
        Dict[str, Any]: Empty object indicating success.

    Raises:
        InvalidInputError: If playlist_id_for_update is not a string or is empty, or if any parameter has invalid values.
        NoResultsFoundError: If no playlist exists with the specified playlist_id_for_update.
        AuthenticationError: If the user is not authorized to modify the playlist.
    """
    from spotify.playlist import change_playlist_details
    return change_playlist_details(
        playlist_id=playlist_id_for_update,
        name=new_playlist_title,
        public=new_public_visibility_status,
        collaborative=new_collaborative_status,
        description=new_playlist_description_text
    )


def retrieve_playlist_contents(
    source_playlist_id_for_items,
    item_availability_market=None,
    item_response_field_selector=None,
    item_list_page_size=None,
    item_list_start_index=None,
    extra_supported_item_types=None
):
    """
    Get full details of the items of a playlist owned by a Spotify user.

    This endpoint retrieves the tracks and episodes in a playlist, along with metadata about when they were added and by whom. This is essential for displaying playlist contents and managing playlist items.

    Args:
        source_playlist_id_for_items (str): The Spotify ID for the playlist.
        item_availability_market (Optional[str]): An ISO 3166-1 alpha-2 country code. If a market is not supplied, no market is applied.
        item_response_field_selector (Optional[str]): Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned.
        item_list_page_size (Optional[int]): The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
        item_list_start_index (Optional[int]): The index of the first item to return. Default: 0 (the first item).
        extra_supported_item_types (Optional[str]): A comma-separated list of item types that your client supports besides the default track type. Valid types are: track and episode.

    Returns:
        Dict[str, Any]: Playlist tracks object with comprehensive information.
            href (str): A link to the Web API endpoint providing full details of the playlist tracks
            limit (int): The maximum number of tracks in the response
            next (Optional[str]): URL to the next page of results
            offset (int): The offset of the items returned
            previous (Optional[str]): URL to the previous page of results
            total (int): The total number of tracks available
            items (List[Dict[str, Any]]): Array of playlist track objects
                - added_at (str): The date and time the track was added
                - added_by (Dict[str, Any]): The Spotify user who added the track
                    - display_name (str): The name displayed on the user's profile
                    - external_urls (Dict[str, str]): Known external URLs for this user
                        - spotify (str): The Spotify URL for the user
                    - href (str): A link to the Web API endpoint providing full details of the user
                    - id (str): The Spotify ID for the user
                    - type (str): The object type ('user')
                    - uri (str): The Spotify URI for the user
                - is_local (bool): Whether this track is a local file or not
                - track (Dict[str, Any]): Information about the track
                    - artists (List[Dict[str, Any]]): Array of artist objects
                    - available_markets (List[str]): List of markets where track is available
                    - disc_number (int): The disc number
                    - duration_ms (int): The track length in milliseconds
                    - explicit (bool): Whether the track has explicit lyrics
                    - external_urls (Dict[str, str]): External URLs for this track
                        - spotify (str): The Spotify URL for the track
                    - href (str): A link to the Web API endpoint providing full details of the track
                    - id (str): The Spotify ID for the track
                    - is_playable (bool): Whether the track is playable in the given market
                    - linked_from (Optional[Dict[str, Any]]): Information about the originally requested track when Track Relinking is applied
                    - restrictions (Optional[Dict[str, Any]]): Track restrictions if any
                        - reason (str): The reason for the restriction
                    - name (str): The name of the track
                    - preview_url (Optional[str]): A URL to a 30 second preview (MP3 format) of the track
                    - track_number (int): The number of the track
                    - type (str): The object type ('track')
                    - uri (str): The Spotify URI for the track
                    - is_local (bool): Whether the track is from a local file

    Raises:
        InvalidInputError: If source_playlist_id_for_items is not a string or is empty, or if any parameter has invalid values.
        InvalidMarketError: If item_availability_market is not a valid ISO 3166-1 alpha-2 country code.
        NoResultsFoundError: If no playlist exists with the specified source_playlist_id_for_items or if playlist is not available in the specified item_availability_market.
    """
    from spotify.playlist import get_playlist_items
    return get_playlist_items(
        playlist_id=source_playlist_id_for_items,
        market=item_availability_market,
        fields=item_response_field_selector,
        limit=item_list_page_size,
        offset=item_list_start_index,
        additional_types=extra_supported_item_types
    )


def reorder_or_replace_playlist_tracks(
    playlist_to_modify_id,
    new_item_uri_list=None,
    reorder_start_position=None,
    reorder_target_position=None,
    number_of_items_to_reorder=None,
    playlist_version_id=None
):
    """
    Either reorder or replace a playlist's items depending on the request's parameters.

    This endpoint allows users to modify the contents of their playlists by either reordering existing tracks or replacing them entirely. This is essential for playlist management functionality.

    Args:
        playlist_to_modify_id (str): The Spotify ID for the playlist.
        new_item_uri_list (Optional[List[str]]): A list of Spotify URIs to set, can be track or episode URIs. A maximum of 100 items can be set in one request.
        reorder_start_position (Optional[int]): The position of the first item to be reordered.
        reorder_target_position (Optional[int]): The position where the items should be inserted.
        number_of_items_to_reorder (Optional[int]): The amount of items to be reordered. Defaults to 1 if not set.
        playlist_version_id (Optional[str]): The playlist's snapshot ID against which you want to make the changes.

    Returns:
        Dict[str, Any]: Playlist snapshot object.
            snapshot_id (str): The version identifier for the current playlist.

    Raises:
        InvalidInputError: If playlist_to_modify_id is not a string or is empty, or if any parameter has invalid values.
        NoResultsFoundError: If no playlist exists with the specified playlist_to_modify_id.
        AuthenticationError: If the user is not authorized to modify the playlist.
    """
    from spotify.playlist import update_playlist_items
    return update_playlist_items(
        playlist_id=playlist_to_modify_id,
        uris=new_item_uri_list,
        range_start=reorder_start_position,
        insert_before=reorder_target_position,
        range_length=number_of_items_to_reorder,
        snapshot_id=playlist_version_id
    )


def append_items_to_playlist(destination_playlist_id, item_uris_to_add, insertion_point_index=None):
    """
    Add one or more items (tracks or episodes) to a user's playlist.

    This endpoint allows you to add tracks or episodes to an existing playlist. 
    You can specify the position at which to insert the new items, or append them 
    to the end. The function validates input, updates the playlist's track list, 
    and generates a new snapshot ID.

    Args:
        destination_playlist_id (str): The Spotify ID for the playlist. Example: 'QDyH69WryQ7dPRXVOFmy2V'.
        item_uris_to_add (List[str]): List of Spotify track or episode URIs to add. 
                          Each must be a valid URI of the form 'spotify:track:<id>' or 'spotify:episode:<id>'. 
                          Maximum 100 items per request.
                          Example: ['spotify:track:4iV5W9uYEdYUVa79Axb7Rh', 'spotify:episode:518j5o704s0mygKUv9aJL4']
        insertion_point_index (Optional[int]): The position to insert the items (0-based). If omitted, items are appended to the end.

    Returns:
        Dict[str, Any]: Dictionary with the new snapshot ID, e.g. {"snapshot_id": str}.

    Raises:
        InvalidInputError: If input is invalid (bad destination_playlist_id, item_uris_to_add, or insertion_point_index).
        NoResultsFoundError: If the playlist, track, or episode does not exist.
        AuthenticationError: If the current user is not authenticated.
    """
    from spotify.playlist import add_items_to_playlist
    return add_items_to_playlist(
        playlist_id=destination_playlist_id,
        uris=item_uris_to_add,
        position=insertion_point_index
    )


def delete_items_from_playlist(
    target_playlist_id_for_removal,
    items_to_be_removed,
    playlist_snapshot_to_modify=None
):
    """
    Remove one or more items (tracks or episodes) from a user's playlist.

    This endpoint removes all occurrences of the specified tracks or episodes from the playlist.
    You can optionally provide a snapshot_id to ensure you are modifying the correct playlist version.
    The function validates input, updates the playlist's track list, and generates a new snapshot ID.

    Args:
        target_playlist_id_for_removal (str): The Spotify ID for the playlist. Example: 'QDyH69WryQ7dPRXVOFmy2V'.
        items_to_be_removed (List[Dict[str, str]]): List of dicts, each with a 'uri' key for the track or 
                                      episode to remove. Each must be a valid URI of the form 
                                      'spotify:track:<id>' or 'spotify:episode:<id>'. Maximum 
                                      100 items per request. 
                                      Example: [{'uri': 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh'}]
        playlist_snapshot_to_modify (Optional[str]): The playlist's snapshot ID to validate against (optional).

    Returns:
        Dict[str, Any]: Dictionary with the new snapshot ID, e.g. {"snapshot_id": str}.

    Raises:
        InvalidInputError: If input is invalid (bad target_playlist_id_for_removal, items_to_be_removed, or playlist_snapshot_to_modify).
        NoResultsFoundError: If the playlist or playlist_tracks do not exist.
    """
    from spotify.playlist import remove_tracks_from_playlist
    return remove_tracks_from_playlist(
        playlist_id=target_playlist_id_for_removal,
        tracks=items_to_be_removed,
        snapshot_id=playlist_snapshot_to_modify
    )


def list_authenticated_user_playlists(playlist_count_limit=20, playlist_list_offset=0):
    """
    Get a list of the current user's playlists (owned or followed).

    This endpoint retrieves all playlists that the current user owns or follows. The response 
    includes detailed playlist information and supports pagination for efficient data retrieval.

    Args:
        playlist_count_limit (int): The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        playlist_list_offset (int): The index of the first playlist to return. Default: 0 (the first object).
            Examples: 0 (start from beginning), 20 (skip first 20 playlists).

    Returns:
        Dict[str, Any]: Playlists response with pagination info.
            items (List[Dict[str, Any]]): Array of playlist objects, each containing:
                id (str): Unique playlist identifier
                name (str): Playlist name
                type (str): Object type ('playlist')
                uri (str): Spotify URI for the playlist
                href (str): API endpoint URL for the playlist
                external_urls (Dict[str, str]): External URLs for the playlist
                owner (Dict[str, Any]): Playlist owner information
                public (bool): Whether the playlist is public
                collaborative (bool): Whether the playlist is collaborative
                description (str): Playlist description
                images (List[Dict[str, Any]]): Playlist cover images
                tracks (Dict[str, Any]): Playlist tracks information
                followers (Dict[str, Any]): Follower information
                snapshot_id (str): Playlist snapshot ID
            total (int): Total number of playlists available
            limit (int): Number of playlists returned in this response
            offset (int): Offset of the first playlist returned
            href (str): URL to the full list of playlists
            next (Optional[str]): URL to the next page of results
            previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If playlist_count_limit is outside 1-50 range or playlist_list_offset is negative.
        AuthenticationError: If user is not authenticated.
    """
    from spotify.playlist import get_current_users_playlists
    return get_current_users_playlists(limit=playlist_count_limit, offset=playlist_list_offset)


def list_specific_user_playlists(
    spotify_user_id_for_playlists,
    max_playlists_per_request=20,
    pagination_offset_for_playlists=0
):
    """
    Get a list of a user's playlists (owned or followed).

    This endpoint retrieves all playlists that the specified user owns or follows. The response includes detailed playlist information and supports pagination for efficient data retrieval.

    Args:
        spotify_user_id_for_playlists (str): The user's Spotify ID. Example: 'smuqPNFPXrJKcEt943KrY8'.
        max_playlists_per_request (int): The maximum number of playlists to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        pagination_offset_for_playlists (int): The index of the first playlist to return. Default: 0 (the first object).
            Examples: 0 (start from beginning), 20 (skip first 20 playlists).

    Returns:
        Dict[str, Any]: Playlists response with pagination info.
            items (List[Dict[str, Any]]): Array of playlist objects, each containing:
                id (str): Unique playlist identifier
                name (str): Playlist name
                type (str): Object type ('playlist')
                uri (str): Spotify URI for the playlist
                href (str): API endpoint URL for the playlist
                external_urls (Dict[str, str]): External URLs for the playlist
                owner (Dict[str, Any]): Playlist owner information
                public (bool): Whether the playlist is public
                collaborative (bool): Whether the playlist is collaborative
                description (str): Playlist description
                images (List[Dict[str, Any]]): Playlist cover images
                tracks (Dict[str, Any]): Playlist tracks information
                followers (Dict[str, Any]): Follower information
                snapshot_id (str): Playlist snapshot ID
            total (int): Total number of playlists available
            limit (int): Number of playlists returned in this response
            offset (int): Offset of the first playlist returned
            href (str): URL to the full list of playlists
            next (Optional[str]): URL to the next page of results
            previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If spotify_user_id_for_playlists is not a string or is empty, max_playlists_per_request is outside 1-50 range, or pagination_offset_for_playlists is negative.
        NoResultsFoundError: If no user exists with the specified spotify_user_id_for_playlists.
    """
    from spotify.playlist import get_user_playlists
    return get_user_playlists(
        user_id=spotify_user_id_for_playlists,
        limit=max_playlists_per_request,
        offset=pagination_offset_for_playlists
    )


def generate_new_user_playlist(
    playlist_owner_user_id,
    initial_playlist_name,
    set_playlist_public_status=True,
    enable_playlist_collaboration=False,
    initial_playlist_description=None
):
    """
    Create a new playlist for a user.

    This endpoint creates a new playlist owned by the specified user. The playlist 
    is added to the user's list of playlists and initialized with no tracks. 
    The response includes the full playlist object as stored in the database.

    Args:
        playlist_owner_user_id (str): The user's Spotify ID. Example: 'smuqPNFPXrJKcEt943KrY8'.
        initial_playlist_name (str): The name of the playlist. Example: 'My Playlist'.
        set_playlist_public_status (bool): Whether the playlist is public. Default: True.
        enable_playlist_collaboration (bool): Whether the playlist is collaborative. Default: False.
        initial_playlist_description (Optional[str]): Playlist description. Default: None.

    Returns:
        Dict[str, Any]: The created playlist object, including:
            id (str): Unique playlist identifier
            name (str): Playlist name
            type (str): Object type ('playlist')
            uri (str): Spotify URI for the playlist
            href (str): API endpoint URL for the playlist
            external_urls (Dict[str, str]): External URLs for the playlist
            owner (Dict[str, Any]): Playlist owner information
            public (bool): Whether the playlist is public
            collaborative (bool): Whether the playlist is collaborative
            description (str): Playlist description
            images (List[Dict[str, Any]]): Playlist cover images
            tracks (Dict[str, Any]): Playlist tracks information (total=0)
            followers (Dict[str, Any]): Follower information (total=0)
            snapshot_id (str): Playlist snapshot ID

    Raises:
        InvalidInputError: If playlist_owner_user_id or initial_playlist_name is invalid.
        NoResultsFoundError: If the user does not exist.
    """
    from spotify.playlist import create_playlist
    return create_playlist(
        user_id=playlist_owner_user_id,
        name=initial_playlist_name,
        public=set_playlist_public_status,
        collaborative=enable_playlist_collaboration,
        description=initial_playlist_description
    )


def fetch_playlist_artwork(playlist_id_for_cover_art):
    """
    Get the current cover image(s) for a playlist.

    This endpoint retrieves the cover image(s) for the specified playlist. The response is a list of image objects, each containing the image URL and its dimensions. If no cover image is set, an empty list is returned.

    Args:
        playlist_id_for_cover_art (str): The Spotify ID for the playlist. Example: 'QDyH69WryQ7dPRXVOFmy2V'.

    Returns:
        List[Dict[str, Any]]: List of image objects, each with:
            url (str): The source URL of the image
            height (int): The image height in pixels
            width (int): The image width in pixels
        If no cover image is set, returns an empty list.

    Raises:
        InvalidInputError: If playlist_id_for_cover_art is not a string or is empty.
        NoResultsFoundError: If no playlist exists with the specified playlist_id_for_cover_art.
    """
    from spotify.playlist import get_playlist_cover_image
    return get_playlist_cover_image(playlist_id=playlist_id_for_cover_art)


def upload_playlist_cover_jpeg(target_playlist_id_for_cover, base64_encoded_jpeg_data):
    """
    Add or replace the custom cover image for a playlist.

    This endpoint allows you to upload a new JPEG image to be used as the cover for a specific playlist. The image must be base64-encoded JPEG data, with a maximum size of 256 KB. Any previous cover image will be replaced.

    Args:
        target_playlist_id_for_cover (str): The Spotify ID for the playlist. Example: 'QDyH69WryQ7dPRXVOFmy2V'.
        base64_encoded_jpeg_data (str): Base64-encoded JPEG image data. Maximum 256 KB after decoding.

    Returns:
        None.

    Raises:
        InvalidInputError: If target_playlist_id_for_cover or base64_encoded_jpeg_data is invalid, not base64, not JPEG, or too large.
        NoResultsFoundError: If the playlist does not exist.
    """
    from spotify.playlist import add_custom_playlist_cover_image
    return add_custom_playlist_cover_image(
        playlist_id=target_playlist_id_for_cover,
        image_data=base64_encoded_jpeg_data
    )
