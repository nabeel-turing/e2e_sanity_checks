# This file is automatically generated by the MutationBuilder

def fetch_authenticated_user_details():
    """
    Get detailed profile information about the current user (including display name, Spotify URI, profile image, and follower count). Requires user authorization.

    This endpoint retrieves comprehensive profile information for the currently authenticated user. The response includes personal details, account status, subscription information, and social metrics. This is essential for applications that need to display user information or customize the experience based on user preferences and account type.

    Returns:
        Dict[str, Any]: User profile data wrapped in a response dictionary.
            display_name (str): User's display name
            external_urls (Dict[str, str]): External URLs for the user profile
            followers (Dict[str, Any]): Follower information with total count
            href (str): API endpoint URL for this user
            id (str): Unique user identifier
            images (List[Dict[str, Any]]): User profile images
            type (str): Object type ('user')
            uri (str): Spotify URI for the user
            country (Optional[str]): User's country code
            email (Optional[str]): User's email address
            product (Optional[str]): User's subscription type ('premium', 'free', etc.)
            explicit_content (Optional[Dict[str, Any]]): Explicit content filter settings
            birthdate (Optional[str]): User's birthdate
            product_type (Optional[str]): Type of product subscription

    Raises:
        AuthenticationError: If user is not authenticated or token is invalid.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.user_profile import get_current_user_profile
    return get_current_user_profile()


def retrieve_user_listening_favorites(
    favorite_entity_type,
    max_items_to_return=20,
    starting_index_for_results=0,
    listening_history_period='medium_term'
):
    """
    Get the current user's top artists or tracks based on their listening history. This can be used for personalized recommendations or statistics.

    This endpoint provides access to the user's most listened to artists or tracks over different time periods. The data is based on the user's listening history and can be filtered by time range (short term, medium term, or long term). This is particularly useful for creating personalized experiences, generating recommendations, or displaying user statistics.

    Args:
        favorite_entity_type (str): The type of entity to return. Valid values: 'artists' or 'tracks'.
            Examples: 'artists' (for top artists), 'tracks' (for top tracks).
        max_items_to_return (int): The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
            Examples: 10 (small selection), 20 (default), 50 (maximum).
        starting_index_for_results (int): The index of the first item to return. Default: 0 (the first object).
            Examples: 0 (start from beginning), 20 (skip first 20 items).
        listening_history_period (str): Over what time frame the affinities are computed. Valid values: 'long_term', 'medium_term', 'short_term'. Default: 'medium_term'.
            Examples: 'short_term' (last 4 weeks), 'medium_term' (last 6 months), 'long_term' (calculated from several years).

    Returns:
        Dict[str, Any]: Top items response with items array and pagination info.
            items (List[Dict[str, Any]]): Array of top artists or tracks, each containing:
                id (str): Unique identifier for the item
                name (str): Name of the artist or track
                type (str): Object type ('artist' or 'track')
                uri (str): Spotify URI for the item
                href (str): API endpoint URL for the item
                external_urls (Dict[str, str]): External URLs for the item
                images (List[Dict[str, Any]]): Images for the item (artists only)
                followers (Dict[str, Any]): Follower information (artists only)
                genres (List[str]): Genres associated with the item (artists only)
                popularity (int): Popularity score (0-100)
                artists (List[Dict[str, Any]]): Artist information (tracks only)
                album (Dict[str, Any]): Album information (tracks only)
                duration_ms (int): Track duration in milliseconds (tracks only)
                explicit (bool): Whether the track contains explicit content (tracks only)
            total (int): Total number of items available
            limit (int): Number of items returned in this response
            offset (int): Offset of the first item returned
            href (str): URL to the full list of items
            next (Optional[str]): URL to the next page of results
            previous (Optional[str]): URL to the previous page of results

    Raises:
        InvalidInputError: If favorite_entity_type is not 'artists' or 'tracks', max_items_to_return is outside 1-50 range, starting_index_for_results is negative, or listening_history_period is invalid.
        AuthenticationError: If user is not authenticated.
        AuthorizationError: If user does not have required permissions.
    """
    from spotify.user_profile import get_user_top_artists_and_tracks
    return get_user_top_artists_and_tracks(
        type=favorite_entity_type,
        limit=max_items_to_return,
        offset=starting_index_for_results,
        time_range=listening_history_period
    )


def fetch_public_user_information(target_user_spotify_id):
    """
    Get public profile information about a Spotify user.

    This endpoint retrieves public profile information for any Spotify user by their user ID. The response includes basic profile information such as display name, profile images, and follower count. This is useful for displaying user information in playlists, collaborative features, or social aspects of music applications.

    Args:
        target_user_spotify_id (str): The user's Spotify ID.
            Examples: 'smuqPNFPXrJKcEt943KrY8', 'SLvTb0e3Rp3oLJ8YXl0dC5'.

    Returns:
        Dict[str, Any]: User profile data.
            display_name (str): User's display name
            external_urls (Dict[str, str]): External URLs for the user profile
            followers (Dict[str, Any]): Follower information with total count
            href (str): API endpoint URL for this user
            id (str): Unique user identifier
            images (List[Dict[str, Any]]): User profile images
            type (str): Object type ('user')
            uri (str): Spotify URI for the user

    Raises:
        InvalidInputError: If target_user_spotify_id is not a string or is empty.
        NoResultsFoundError: If no user exists with the specified target_user_spotify_id.
    """
    from spotify.user_profile import get_user_profile
    return get_user_profile(user_id=target_user_spotify_id)
