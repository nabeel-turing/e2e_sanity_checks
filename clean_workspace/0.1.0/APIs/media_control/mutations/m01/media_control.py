# This file is automatically generated by the MutationBuilder

def update_playback_mode(playback_action, target_application=None):
    """
    Changes the playback state of the currently playing media.

    Args:
        playback_action (str): The target playback state (STOP, PAUSE, RESUME)
        target_application (Optional[str]): Optional; the name of the media application

    Returns:
        Dict[str, Any]: Dictionary containing action summary on success, error message on failure.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        ValidationError: If playback_action or target_application is invalid
        NoMediaPlayerError: If no media player is found for the specified app
        NoMediaItemError: If no media item is currently loaded
        InvalidPlaybackStateError: If the requested state change is not valid for current state
    """
    from media_control.media_control import change_playback_state
    return change_playback_state(target_state=playback_action, app_name=target_application)


def suspend_playback():
    """
    Pause the currently playing media.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the state of media playback.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoMediaPlayingError: If no media is currently playing in the active app
        InvalidPlaybackStateError: If media cannot be paused in current state
    """
    from media_control.media_control import pause
    return pause()


def terminate_playback():
    """
    Stop the currently playing media.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the state of media playback.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoMediaPlayingError: If no media is currently playing in the active app
        InvalidPlaybackStateError: If media is already stopped
    """
    from media_control.media_control import stop
    return stop()


def continue_playback():
    """
    Resume the currently paused media.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the state of media playback.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        InvalidPlaybackStateError: If media cannot be resumed (must be paused)
    """
    from media_control.media_control import resume
    return resume()


def advance_to_next_track():
    """
    Skip to the next media item.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the media playback position.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoPlaylistError: If no playlist is available in the app
        InvalidPlaybackStateError: If already at the last item in playlist
    """
    from media_control.media_control import next
    return next()


def return_to_previous_track():
    """
    Skip to the previous media item.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the media playback position.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoPlaylistError: If no playlist is available in the app
        InvalidPlaybackStateError: If already at the first item in playlist
    """
    from media_control.media_control import previous
    return previous()


def restart_current_media():
    """
    Replay the current media item from the beginning.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the media playback position.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoMediaItemError: If no media item is loaded in the app
    """
    from media_control.media_control import replay
    return replay()


def adjust_playback_time(time_shift_in_seconds):
    """
    Adjusts media playback by a specified duration relative to the current position, then resumes playing.

    Args:
        time_shift_in_seconds (int): Relative offset in seconds from the current playback position.
                     Positive values fast forward; negative values rewind.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the media playback position.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        ValidationError: If time_shift_in_seconds is not an integer or invalid
        NoMediaPlayerError: If there is no active media player
        NoMediaItemError: If no media item is loaded in the app
    """
    from media_control.media_control import seek_relative
    return seek_relative(offset=time_shift_in_seconds)


def jump_to_timestamp(target_timestamp_in_seconds):
    """
    Jumps to a specific position in the media, then resumes playing.

    Args:
        target_timestamp_in_seconds (int): Absolute position in the media in seconds.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully changing the media playback position.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        ValidationError: If target_timestamp_in_seconds is not an integer or invalid
        NoMediaPlayerError: If there is no active media player
        NoMediaItemError: If no media item is loaded in the app
    """
    from media_control.media_control import seek_absolute
    return seek_absolute(position=target_timestamp_in_seconds)


def mark_as_liked():
    """
    Like the currently playing media.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully setting the media attribute.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoMediaItemError: If no media item is loaded in the app
    """
    from media_control.media_control import like
    return like()


def flag_as_disliked():
    """
    Dislike the currently playing media.

    Returns:
        Dict[str, Any]: Dictionary containing the result of successfully setting the media attribute.
        The dictionary contains:
        - result (str): Result of the action
        - title (str): Title of the media item
        - app_name (str): App playing the media
        - media_type (str): Type of the media item

    Raises:
        NoMediaPlayerError: If there is no active media player
        NoMediaItemError: If no media item is loaded in the app
    """
    from media_control.media_control import dislike
    return dislike()
