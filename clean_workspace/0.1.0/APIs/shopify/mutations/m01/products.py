# This file is automatically generated by the MutationBuilder

def get_product_catalog_items(
    product_group_id=None,
    product_creation_end_timestamp=None,
    product_creation_start_timestamp=None,
    included_product_fields=None,
    product_url_handles=None,
    product_identification_numbers=None,
    maximum_items_per_page=50,
    requested_currency_prices=None,
    item_category_filter=None,
    publish_date_end=None,
    publish_date_start=None,
    product_pagination_id_cursor=None
):
    """
    Retrieves a list of products with comprehensive filtering and pagination support.

    This function provides access to the store's product catalog with extensive filtering capabilities
    including collection membership, date ranges, product types, and field selection. Supports
    real-world pagination through since_id and multi-currency pricing information.

    Args:
        product_group_id (Optional[str]): Return products belonging to a specific product collection ID.
            Supports both manual collections (explicit product lists) and smart collections (rule-based
            automatic inclusion based on product attributes like type, vendor, tags, etc.).
            Example: 'coll_1001'
        product_creation_end_timestamp (Optional[str]): Return products created before a specified date (ISO 8601 format).
            Example: '2014-04-25T16:15:47-04:00'
        product_creation_start_timestamp (Optional[str]): Return products created after a specified date (ISO 8601 format).
            Example: '2014-04-25T16:15:47-04:00'
        included_product_fields (Optional[List[str]]): A list of field names to retrieve for each product. 
            Available fields include: admin_graphql_api_id, body_html, created_at, handle, id, image, 
            images, options, product_type, published_at, published_scope, status, tags, template_suffix, 
            title, updated_at, variants, vendor. If None or empty, all available fields are returned.
            Example: ['id', 'title', 'product_type']
        product_url_handles (Optional[List[str]]): A list of product handles to retrieve. Handles are human-friendly
            unique strings used in URLs and themes.
        product_identification_numbers (Optional[List[str]]): A list of product IDs to retrieve. Useful for fetching specific products.
        maximum_items_per_page (int): The maximum number of results to retrieve per page. Default: 50, Maximum: 250.
        requested_currency_prices (Optional[List[str]]): A list of ISO 4217 currency codes to return 
            presentment prices in. When provided, each variant will include a 'presentment_prices' array
            with currency-specific pricing. Supported currencies: USD, EUR, GBP, CAD, AUD, JPY.
            Example: ['USD', 'EUR', 'CAD']
        item_category_filter (Optional[str]): Filter products by product type. Case-insensitive matching.
        publish_date_end (Optional[str]): Return products published before a specified date (ISO 8601 format).
            Example: '2014-04-25T16:15:47-04:00'
        publish_date_start (Optional[str]): Return products published after a specified date (ISO 8601 format).
            Example: '2014-04-25T16:15:47-04:00'
        product_pagination_id_cursor (Optional[str]): Return only products after the specified ID. Essential for cursor-based
            pagination in production environments. Products are sorted by ID for consistent pagination.

    Returns:
        Dict[str, List[Dict[str, Any]]]: A dictionary with a single key 'products'.
            The value is a list of dictionaries, each representing a product.
            Each product dictionary can contain the following fields (filtered by 'fields' parameter if provided):
                id (str): The unique identifier for the product.
                title (str): The name of the product.
                body_html (Optional[str]): The description of the product, potentially containing HTML formatting.
                vendor (Optional[str]): The product's vendor.
                product_type (Optional[str]): The category of the product.
                created_at (str): Timestamp (ISO 8601 format) of when the product was created.
                handle (str): A human-friendly unique string for the product, often used in URLs and themes.
                updated_at (str): Timestamp (ISO 8601 format) of when the product was last updated.
                published_at (Optional[str]): Timestamp (ISO 8601 format) of when the product was published. Null if not published.
                template_suffix (Optional[str]): The suffix of the Liquid template being used for the product page.
                status (str): The current status of the product (e.g., 'active', 'archived', 'draft').
                published_scope (Optional[str]): The scope of publication (e.g., 'web', 'global').
                tags (Optional[str]): A comma-separated string of tags associated with the product.
                admin_graphql_api_id (Optional[str]): The GID for the product (e.g., "gid://shopify/Product/12345").
                variants (List[Dict[str, Any]]): A list of product variants. Each variant dictionary includes:
                    id (str): The unique identifier for the variant.
                    product_id (str): The ID of the product this variant belongs to.
                    title (str): The title of the variant (e.g., 'Small / Red').
                    price (str): The price of the variant.
                    sku (Optional[str]): The stock keeping unit for the variant.
                    position (int): The order of the variant in the product's variant list.
                    inventory_policy (Optional[str]): Inventory policy ('deny' or 'continue').
                    compare_at_price (Optional[str]): The original price of the item before an applicable discount.
                    fulfillment_service (Optional[str]): The fulfillment service provider for the variant.
                    inventory_management (Optional[str]): The inventory management system (e.g., 'shopify').
                    option1 (Optional[str]): Value of the first product option for this variant.
                    option2 (Optional[str]): Value of the second product option for this variant.
                    option3 (Optional[str]): Value of the third product option for this variant.
                    created_at (str): Timestamp (ISO 8601 format) of when the variant was created.
                    updated_at (str): Timestamp (ISO 8601 format) of when the variant was last updated.
                    taxable (bool): Whether the variant is taxable.
                    barcode (Optional[str]): The barcode, UPC, or ISBN of the variant.
                    grams (int): The weight of the variant in grams.
                    image_id (Optional[str]): The ID of the image associated with this variant.
                    weight (float): The weight of the variant.
                    weight_unit (str): The unit of measurement for the variant's weight (e.g. 'g', 'kg', 'oz', 'lb').
                    inventory_item_id (Optional[str]): The ID of the inventory item associated with the variant.
                    inventory_quantity (int): The current inventory quantity of the variant.
                    old_inventory_quantity (Optional[int]): The previous inventory quantity.
                    requires_shipping (bool): Whether the variant requires shipping.
                    admin_graphql_api_id (Optional[str]): The GID for the product variant.
                    presentment_prices (List[Dict[str, Any]]): Only present when 'presentment_currencies' parameter is provided.
                        Array of currency-specific pricing objects, each containing:
                            price (Dict[str, str]): Price object with keys:
                                amount (str): The price amount as a decimal string (e.g., "19.99", "1949" for JPY)
                                currency_code (str): ISO 4217 currency code (e.g., "USD", "EUR", "GBP", "CAD", "AUD", "JPY")
                        Example format: [{"price": {"amount": "19.99", "currency_code": "USD"}}, {"price": {"amount": "16.99", "currency_code": "EUR"}}]
                options (List[Dict[str, Any]]): A list of product options. Each option dictionary includes:
                    id (str): The unique identifier for the option.
                    product_id (str): The ID of the product this option belongs to.
                    name (str): The name of the option (e.g., 'Size', 'Color').
                    position (int): The order of the option in the product's option list.
                    values (List[str]): A list of possible values for the option (e.g., ['Small', 'Medium', 'Large']).
                images (List[Dict[str, Any]]): A list of product images. Each image dictionary includes:
                    id (str): The unique identifier for the image.
                    product_id (str): The ID of the product this image belongs to.
                    position (int): The order of the image in the product's image list.
                    created_at (str): Timestamp (ISO 8601 format) of when the image was created.
                    updated_at (str): Timestamp (ISO 8601 format) of when the image was last updated.
                    alt (Optional[str]): Alternative text for the image.
                    width (int): The width of the image in pixels.
                    height (int): The height of the image in pixels.
                    src (str): The URL of the image.
                    variant_ids (List[str]): A list of variant IDs associated with this image.
                image (Optional[Dict[str, Any]]): The main product image. Structure is the same as items in the 'images' list.

    Raises:
        InvalidInputError: If any of the filter parameters are invalid 
            (e.g., malformed dates, maximum_items_per_page out of range, invalid field types, invalid product_pagination_id_cursor).
    """
    from shopify.products import shopify_get_products
    return shopify_get_products(
        collection_id=product_group_id,
        created_at_max=product_creation_end_timestamp,
        created_at_min=product_creation_start_timestamp,
        fields=included_product_fields,
        handle=product_url_handles,
        ids=product_identification_numbers,
        limit=maximum_items_per_page,
        presentment_currencies=requested_currency_prices,
        product_type=item_category_filter,
        published_at_max=publish_date_end,
        published_at_min=publish_date_start,
        since_id=product_pagination_id_cursor
    )


def fetch_product_details_by_id(item_unique_identifier, specific_fields_to_fetch=None):
    """
    Retrieves a specific product by its ID.

    This function retrieves detailed information for a single product identified by its unique `product_id`.
    An optional list of `fields` can be provided to limit the data returned for the product; these
    fields are sent as a comma-separated string to the API.

    Args:
        item_unique_identifier (int): The ID of the product to retrieve. This is a path parameter.
        specific_fields_to_fetch (Optional[List[str]]): (Optional) A list of fields to retrieve for the product.
            These will be sent as a comma-separated string to the API. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary representing the product details.
            The dictionary includes the following keys:
            id (int): The unique identifier for the product.
            title (str): The name of the product.
            body_html (Optional[str]): The description of the product, in HTML format.
            vendor (str): The name of the product's vendor.
            product_type (str): The type of product.
            created_at (str): The ISO 8601 timestamp of creation.
            handle (str): A human-friendly unique string for the product.
            updated_at (str): The ISO 8601 timestamp of last update.
            published_at (Optional[str]): The ISO 8601 timestamp when the product was published.
            template_suffix (Optional[str]): The suffix of the Liquid template being used for the product page.
            status (str): The status of the product (e.g., "active", "draft", "archived").
            published_scope (str): Indicates if the product is published to the 'web', 'global', or other channels.
            tags (str): A comma-separated list of tags associated with the product.
            admin_graphql_api_id (str): The GID for the product (used in GraphQL API).
            variants (List[Dict[str, Any]]): A list of product variants. Each variant dictionary contains:
                id (int): Variant ID.
                product_id (int): Product ID (parent product).
                title (str): Variant title (e.g., "Small / Red").
                price (str): Variant price (e.g., "19.99").
                sku (Optional[str]): Stock Keeping Unit.
                position (int): Position of the variant in the product's variant list.
                inventory_policy (str): Inventory policy ("deny" or "continue" when out of stock).
                compare_at_price (Optional[str]): Compare at price.
                fulfillment_service (str): Fulfillment service handle.
                inventory_management (Optional[str]): Inventory management service (e.g., "shopify").
                option1 (Optional[str]): Value for product option1.
                option2 (Optional[str]): Value for product option2.
                option3 (Optional[str]): Value for product option3.
                created_at (str): The ISO 8601 timestamp of variant creation.
                updated_at (str): The ISO 8601 timestamp of variant last update.
                taxable (bool): Whether the variant is taxable.
                barcode (Optional[str]): Barcode (ISBN, UPC, etc.).
                grams (int): Weight in grams.
                weight (float): Weight of the variant.
                weight_unit (str): Weight unit (e.g., "g", "kg", "lb", "oz").
                inventory_item_id (int): Inventory item ID associated with the variant.
                inventory_quantity (int): Current inventory quantity.
                old_inventory_quantity (int): Previous inventory quantity.
                requires_shipping (bool): Whether shipping is required for this variant.
            options (List[Dict[str, Any]]): Product options (e.g., Size, Color). Each option dictionary contains:
                id (int): Option ID.
                product_id (int): Product ID (parent product).
                name (str): Option name (e.g., "Color").
                position (int): Position of the option.
                values (List[str]): List of option values (e.g., ["Red", "Blue"]).
            images (List[Dict[str, Any]]): Product images. Each image dictionary contains:
                id (int): Image ID.
                product_id (int): Product ID (parent product).
                position (int): Position of the image.
                created_at (str): The ISO 8601 timestamp of image creation.
                updated_at (str): The ISO 8601 timestamp of image last update.
                alt (Optional[str]): Alt text for image.
                width (int): Image width in pixels.
                height (int): Image height in pixels.
                variant_ids (List[int]): Variant IDs associated with this image.
            image (Optional[Dict[str, Any]]): The main product image. This dictionary has the same structure
                as an item in the 'images' list and contains:
                id (int): Image ID.
                product_id (int): Product ID (parent product).
                position (int): Position of the image.
                created_at (str): The ISO 8601 timestamp of image creation.
                updated_at (str): The ISO 8601 timestamp of image last update.
                alt (Optional[str]): Alt text for image.
                width (int): Image width in pixels.
                height (int): Image height in pixels.
                variant_ids (List[int]): Variant IDs associated with this image.

    Raises:
        ShopifyNotFoundError: If no product matches the provided 'item_unique_identifier'.
        ValidationError: If input arguments fail validation.
    """
    from shopify.products import shopify_get_product_by_id
    return shopify_get_product_by_id(
        product_id=item_unique_identifier,
        fields=specific_fields_to_fetch
    )


def find_products_by_advanced_filters(
    general_search_term=None,
    required_product_tags=None,
    product_category_name=None,
    brand_or_vendor_name=None,
    product_availability_status=None,
    publication_channel=None,
    minimum_price_boundary=None,
    maximum_price_boundary=None,
    minimum_stock_level=None,
    maximum_stock_level=None,
    earliest_creation_date=None,
    latest_creation_date=None,
    earliest_update_date=None,
    latest_update_date=None,
    variant_specific_search_term=None,
    variant_sku_filter=None,
    variant_title_filter=None,
    first_variant_option_value=None,
    second_variant_option_value=None,
    third_variant_option_value=None,
    product_fields_to_return=None,
    search_result_limit=50,
    search_result_sort_field=None,
    search_result_sort_direction=None
):
    """
    Search products with comprehensive filtering and sorting capabilities.

    This function provides advanced product search functionality with support for text search,
    tag filtering, price ranges, inventory levels, and multiple sorting options. Designed for
    real-world e-commerce scenarios where customers need to find products based on specific
    attributes and criteria.

    Args:
        general_search_term (Optional[str]): Text search query to match against product title, body_html, 
            tags, vendor, and product_type. Case-insensitive partial matching.
        required_product_tags (Optional[List[str]]): List of tags that products must have. Products must 
            contain ALL specified tags (AND logic). Tags are matched case-insensitively.
        product_category_name (Optional[str]): Filter by product type. Case-insensitive exact match.
        brand_or_vendor_name (Optional[str]): Filter by vendor name. Case-insensitive exact match.
        product_availability_status (Optional[str]): Filter by product status. Valid values: "active", "archived", "draft".
        publication_channel (Optional[str]): Filter by published scope. Valid values: "web", "global".
        minimum_price_boundary (Optional[str]): Minimum price filter. Searches across all product variants.
            Format: decimal string (e.g., "10.00", "99.99").
        maximum_price_boundary (Optional[str]): Maximum price filter. Searches across all product variants.
            Format: decimal string (e.g., "100.00", "999.99").
        minimum_stock_level (Optional[int]): Minimum total inventory quantity across all variants.
        maximum_stock_level (Optional[int]): Maximum total inventory quantity across all variants.
        earliest_creation_date (Optional[str]): Filter products created after this date.
            Format: ISO 8601 timestamp (e.g., "2023-01-01T00:00:00Z").
        latest_creation_date (Optional[str]): Filter products created before this date.
            Format: ISO 8601 timestamp (e.g., "2023-12-31T23:59:59Z").
        earliest_update_date (Optional[str]): Filter products updated after this date.
            Format: ISO 8601 timestamp (e.g., "2023-01-01T00:00:00Z").
        latest_update_date (Optional[str]): Filter products updated before this date.
            Format: ISO 8601 timestamp (e.g., "2023-12-31T23:59:59Z").
        variant_specific_search_term (Optional[str]): Text search query to match against variant titles, SKUs, 
            and option values. Case-insensitive partial matching. Useful for finding specific 
            product variations like "clicky switches" or "Google Home compatible".
        variant_sku_filter (Optional[str]): Filter products that have variants with matching SKU.
            Case-insensitive partial matching.
        variant_title_filter (Optional[str]): Filter products that have variants with matching title.
            Case-insensitive partial matching.
        first_variant_option_value (Optional[str]): Filter products that have variants with matching option1 value.
            Case-insensitive partial matching. Common for size, color, material, etc.
        second_variant_option_value (Optional[str]): Filter products that have variants with matching option2 value.
            Case-insensitive partial matching. Common for secondary attributes.
        third_variant_option_value (Optional[str]): Filter products that have variants with matching option3 value.
            Case-insensitive partial matching. Common for tertiary attributes.
        product_fields_to_return (Optional[List[str]]): List of fields to include in response. If not specified,
            returns all product fields. Valid fields include: id, title, body_html, vendor,
            product_type, handle, status, tags, variants, options, images, etc.
        search_result_limit (int): Maximum number of products to return. Range: 1-250. Default: 50.
        search_result_sort_field (Optional[str]): Field to sort results by. Valid values:
            - "title": Sort by product title
            - "created_at": Sort by creation date
            - "updated_at": Sort by last update date
            - "price": Sort by lowest variant price
            - "inventory_quantity": Sort by total inventory quantity
            - "vendor": Sort by vendor name
            - "product_type": Sort by product type
            Default: "id" (product ID).
        search_result_sort_direction (Optional[str]): Sort direction. Valid values: "asc", "desc". Default: "asc".

    Returns:
        Dict[str, Any]: Search results containing:
            products (List[Dict[str, Any]]): List of matching products. Each product contains:
                id (str): Product identifier
                title (str): Product name
                body_html (Optional[str]): Product description in HTML
                vendor (str): Product vendor/brand
                product_type (str): Product category/type
                handle (str): URL-friendly product identifier
                status (str): Product status ("active", "archived", "draft")
                published_scope (str): Publishing scope ("web", "global")
                tags (str): Comma-separated list of product tags
                created_at (str): ISO 8601 creation timestamp
                updated_at (str): ISO 8601 last update timestamp
                published_at (Optional[str]): ISO 8601 publish timestamp
                variants (List[Dict[str, Any]]): Product variants with pricing and inventory
                options (List[Dict[str, Any]]): Product options (size, color, etc.)
                images (List[Dict[str, Any]]): Product images
                [Additional fields based on 'fields' parameter]
            total_count (int): Total number of products matching search criteria (before limit)
            search_info (Dict[str, Any]): Search metadata:
                query_used (Optional[str]): Text query that was applied
                filters_applied (Dict[str, Any]): Summary of filters that were applied
                sort_applied (Dict[str, str]): Sorting that was applied
                limit_applied (int): Limit that was applied

    Raises:
        InvalidInputError: If any parameter has invalid format or value:
            - search_result_limit not between 1-250
            - invalid date format for timestamp parameters
            - invalid decimal format for price parameters
            - invalid search_result_sort_field or search_result_sort_direction values
            - invalid product_availability_status or publication_channel values
        ValidationError: If parameter types are incorrect (e.g., required_product_tags not a list).

    Examples:
        # Search for keyboards with specific attributes
        >>> search_products(
        ...     query="mechanical keyboard",
        ...     tags=["gaming", "rgb"],
        ...     price_min="50.00",
        ...     price_max="200.00",
        ...     sort_by="price",
        ...     sort_order="asc"
        ... )

        # Find products by vendor with inventory constraints
        >>> search_products(
        ...     vendor="TechCorp",
        ...     inventory_quantity_min=10,
        ...     status="active",
        ...     sort_by="updated_at",
        ...     sort_order="desc"
        ... )

        # Search for keyboards with clicky switches (variant-level search)
        >>> search_products(
        ...     query="keyboard",
        ...     variant_query="clicky switches",
        ...     status="active"
        ... )

        # Find thermostats compatible with Google Home
        >>> search_products(
        ...     product_type="Smart Home",
        ...     variant_query="Google Home",
        ...     sort_by="price"
        ... )

        # Search by specific variant options
        >>> search_products(
        ...     variant_option1="Large",
        ...     variant_option2="Blue",
        ...     status="active"
        ... )
    """
    from shopify.products import shopify_search_products
    return shopify_search_products(
        query=general_search_term,
        tags=required_product_tags,
        product_type=product_category_name,
        vendor=brand_or_vendor_name,
        status=product_availability_status,
        published_scope=publication_channel,
        price_min=minimum_price_boundary,
        price_max=maximum_price_boundary,
        inventory_quantity_min=minimum_stock_level,
        inventory_quantity_max=maximum_stock_level,
        created_at_min=earliest_creation_date,
        created_at_max=latest_creation_date,
        updated_at_min=earliest_update_date,
        updated_at_max=latest_update_date,
        variant_query=variant_specific_search_term,
        variant_sku=variant_sku_filter,
        variant_title=variant_title_filter,
        variant_option1=first_variant_option_value,
        variant_option2=second_variant_option_value,
        variant_option3=third_variant_option_value,
        fields=product_fields_to_return,
        limit=search_result_limit,
        sort_by=search_result_sort_field,
        sort_order=search_result_sort_direction
    )
