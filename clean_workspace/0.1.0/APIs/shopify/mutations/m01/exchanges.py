# This file is automatically generated by the MutationBuilder

def process_item_exchange_for_order(
    source_order_id_for_exchange,
    items_for_exchange_return,
    replacement_items_for_exchange,
    overall_exchange_justification=None,
    additional_exchange_comments=None,
    should_restock_exchanged_items=True
):
    """
    Creates an exchange for items in an existing order.

    Creates an Exchange object that allows customers to return fulfilled items and receive 
    different items in return. Automatically calculates price differences, processes inventory 
    adjustments, and completes the exchange immediately. Validates exchange eligibility by 
    checking order status, fulfillment status, and inventory availability.

    Args:
        source_order_id_for_exchange (str): Order identifier for the exchange.
        items_for_exchange_return (List[Dict[str, Any]]): Items to be returned, each containing:
            fulfillment_line_item_id (str): ID of the original order line item to exchange.
            quantity (int): Quantity to return (must be positive).
            overall_exchange_justification (Optional[str]): Reason for exchanging this item.
            exchange_reason_note (Optional[str]): Additional notes about the exchange.
        replacement_items_for_exchange (List[Dict[str, Any]]): New items to receive, each containing:
            variant_id (str): ID of the product variant to receive.
            product_id (str): ID of the product to receive.
            quantity (int): Quantity to receive (must be positive).
            title (Optional[str]): Custom title for the item.
            price (Optional[str]): Custom price for the item as decimal string.
        overall_exchange_justification (Optional[str]): Overall reason for the exchange.
        additional_exchange_comments (Optional[str]): Additional notes about the exchange.
        should_restock_exchanged_items (bool): Whether to restock the returned items (default: True).

    Returns:
        Dict[str, Any]: Created exchange object with complete details.
            exchange (Dict[str, Any]): The exchange object containing:
                id (str): Exchange identifier.
                status (str): Exchange status ("COMPLETED").
                order_id (str): Associated order identifier.
                name (str): Exchange reference number (e.g., "#EX1001").
                exchange_reason (Optional[str]): Overall exchange reason.
                exchange_note (Optional[str]): Additional exchange notes.
                price_difference (str): Price difference as decimal string (positive if customer owes, negative if refund due).
                created_at (str): ISO 8601 creation timestamp.
                updated_at (str): ISO 8601 last update timestamp.
                return_line_items (List[Dict[str, Any]]): Returned items with:
                    id (str): Return line item identifier.
                    original_line_item_id (str): Original order line item identifier.
                    quantity (int): Returned quantity.
                    exchange_reason (Optional[str]): Item-specific exchange reason.
                    exchange_reason_note (Optional[str]): Item-specific exchange notes.
                    restock_type (str): Restocking behavior ("RETURN" or "NO_RESTOCK").
                new_line_items (List[Dict[str, Any]]): New items received with:
                    id (str): New line item identifier.
                    variant_id (str): Product variant identifier.
                    product_id (str): Product identifier.
                    title (str): Item title.
                    quantity (int): Received quantity.
                    price (str): Unit price as decimal string.
                    sku (Optional[str]): Stock keeping unit.
                    vendor (Optional[str]): Product vendor.
                restock_returned_items (bool): Whether returned items were restocked.

    Raises:
        ShopifyInvalidInputError: Raised for issues with input parameters, such as invalid structure, incorrect quantities, referencing a non-existent line item in the order, or insufficient inventory for new items.
        NotFoundError: Order, product, or variant not found.
        ShopifyExchangeError: Exchange cannot be created due to business rules (e.g., order is cancelled, not paid, or items have not been fulfilled).
    """
    from shopify.exchanges import shopify_create_an_exchange
    return shopify_create_an_exchange(
        order_id=source_order_id_for_exchange,
        return_line_items=items_for_exchange_return,
        new_line_items=replacement_items_for_exchange,
        exchange_reason=overall_exchange_justification,
        exchange_note=additional_exchange_comments,
        restock_returned_items=should_restock_exchanged_items
    )
