# This file is automatically generated by the MutationBuilder

def find_media_content(lookup_phrase, target_content_type, result_limiter=None):
    """
    Search for songs, artists, albums, playlists or podcasts on a media provider.

    Args:
        lookup_phrase (str): Content that the user is looking for. Must be a non-empty string, even for generic types.
        target_content_type (str): The type of content to search for. One of: "ALBUM", "ARTIST", "GENERIC_MUSIC", "GENERIC_PODCAST", "GENERIC_MUSIC_NEW", "GENERIC_SOMETHING_ELSE", "LIKED_SONGS", "PERSONAL_PLAYLIST", "PODCAST_EPISODE", "PODCAST_SHOW", "PUBLIC_PLAYLIST", "TRACK".
        result_limiter (Optional[str]): The type of content to filter by. One of: "ALBUM", "PLAYLIST", "TRACK".

    Returns:
        List[Dict[str, Any]]: A list of media items that match the search query. Each media item is a dictionary with the following keys:
            uri (str): The URI of the media item.
            media_item_metadata (Dict[str, Any]): Metadata about the media item.
                entity_title (Optional[str]): The title of the media item.
                container_title (Optional[str]): The title of the container of the media item (e.g., album or show).
                description (Optional[str]): A description of the media item.
                artist_name (Optional[str]): The name of the artist.
                content_type (Optional[str]): The type of content.
            provider (Optional[str]): The provider of the media item.
            action_card_content_passthrough (Optional[str]): The URI of the media item.

    Raises:
        ValueError: If the lookup_phrase is empty or if the target_content_type or result_limiter are invalid.
    """
    from generic_media.search_api import search
    return search(
        query=lookup_phrase,
        intent_type=target_content_type,
        filtering_type=result_limiter
    )
