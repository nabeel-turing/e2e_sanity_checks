# This file is automatically generated by the MutationBuilder

def establish_development_branch(main_project_identifier, branch_cost_approval_id, new_branch_label='develop'):
    """
    Creates a development branch on a Supabase project.

    This function creates a development branch on a Supabase project. It applies all migrations
    from the main project to a fresh branch database. Production data will not carry over.
    The branch receives its own project_id via the resulting project_ref, which should be
    used to execute queries and migrations on the branch.

    Args:
        main_project_identifier (str): The identifier of the project.
        branch_cost_approval_id (str): The cost confirmation ID. Call `confirm_cost` first.
        new_branch_label (str): Name of the branch to create. Defaults to "develop".

    Returns:
        Dict[str, Any]: Information about the newly created development branch. Includes the following keys:
            id (str): The unique identifier for the new branch (branch ID).
            name (str): The name of the new branch.
            parent_project_id (str): The ID of the main project from which this branch was created.
            branch_project_id (str): The project ID (project_ref) specifically for this branch's database.
            status (str): The initial status of the branch (e.g., 'CREATING', 'ACTIVE').
            created_at (str): ISO 8601 timestamp of when the branch creation was initiated.

    Raises:
        NotFoundError: If the parent main_project_identifier does not exist, or if the organization associated with the project is not found.
        ValidationError: If required inputs (e.g., branch_cost_approval_id) are missing, or the branch new_branch_label is invalid.
        CostConfirmationError: If the branch_cost_approval_id is invalid, expired or does not match the branch creation operation.
        BranchingNotEnabledError: If the branching feature is not enabled for the project's organization.
    """
    from supabase.branch import create_branch
    return create_branch(
        project_id=main_project_identifier,
        confirm_cost_id=branch_cost_approval_id,
        name=new_branch_label
    )


def enumerate_project_branches(parent_project_ref):
    """
    Lists all development branches of a Supabase project.

    Lists all development branches of a Supabase project. This function returns
    branch details including status which can be used to check when
    operations like merge, rebase, or reset complete.

    Args:
        parent_project_ref (str): The unique identifier for the project.

    Returns:
        List[Dict[str, Any]]: A list of development branches for the project.
        Each dictionary in the list represents a branch and contains the
        following keys:
            id (str): The unique identifier for the branch (branch ID).
            name (str): The name of the branch.
            branch_project_id (str): The project ID (project_ref) for this branch's dedicated database.
            status (str): The current status of the branch (e.g., 'ACTIVE', 'CREATING', 'MERGING', 'REBASING', 'RESETTING', 'ERROR').
            created_at (str): ISO 8601 timestamp of when the branch was created.
            last_activity_at (str): ISO 8601 timestamp of the last significant activity on the branch.

    Raises:
        ResourceNotFoundError: If the project or branch does not exist
        ValidationError: If input arguments fail validation.
        BranchingNotEnabledError: If the branching feature is not enabled for the project.
    """
    from supabase.branch import list_branches
    return list_branches(project_id=parent_project_ref)


def remove_development_branch(branch_identifier_to_delete):
    """
    Deletes a development branch.

    This function deletes a specific development branch. The branch to be deleted
    is identified by the provided `branch_id`.

    Args:
        branch_identifier_to_delete (str): The ID of the branch to be deleted.

    Returns:
        Dict[str, Any]: The status of the delete operation. Contains the following fields:
            branch_id (str): The ID of the branch that was requested for deletion.
            status (str): The status of the deletion (e.g., 'DELETED', 'PENDING_DELETION', 'ERROR').
            message (str): A confirmation or status message.

    Raises:
        NotFoundError: If the branch_identifier_to_delete does not exist.
        OperationNotPermittedError: If the branch cannot be deleted (e.g., it's the main production branch, or in a state that prevents deletion like active operations).
        ValidationError: If input arguments fail validation.
    """
    from supabase.branch import delete_branch
    return delete_branch(branch_id=branch_identifier_to_delete)


def integrate_branch_into_production(source_branch_id_for_merge):
    """
    Merges migrations and edge functions from a development branch to production.

    This function processes the branch identified by `branch_id` to merge its
    associated migrations and edge functions into the production environment.
    It returns a dictionary detailing the status of this merge operation.

    Args:
        source_branch_id_for_merge (str): The ID of the development branch to be merged.

    Returns:
        Dict[str, Any]: A dictionary providing the status of the merge operation, with the following keys:
            branch_id (str): The ID of the branch being merged.
            target_project_id (str): The ID of the production project the branch is merged into.
            status (str): The current status of the merge (e.g., 'MERGING', 'COMPLETED', 'FAILED', 'CONFLICT').
            merge_request_id (Optional[str]): An identifier for the merge operation, particularly relevant if the merge is processed asynchronously.

    Raises:
        NotFoundError: If the source_branch_id_for_merge does not exist.
        MergeConflictError: If there are conflicts that prevent the merge (e.g., migration conflicts, edge function conflicts).
        OperationNotPermittedError: If the branch is not in a state suitable for merging (e.g., still creating, has uncommitted changes not part of migrations).
        ValidationError: If input arguments fail validation.
    """
    from supabase.branch import merge_branch
    return merge_branch(branch_id=source_branch_id_for_merge)


def revert_branch_to_migration_version(target_branch_id_for_reset, target_migration_checkpoint=None):
    """
    Resets migrations of a development branch.

    Resets migrations of a development branch. Any untracked data or schema
    changes will be lost.

    Args:
        target_branch_id_for_reset (str): The ID of the development branch to be reset.
        target_migration_checkpoint (Optional[str]): Reset your development branch to a
            specific migration version.

    Returns:
        Dict[str, Any]: A dictionary containing the status of the branch reset
            operation, with the following keys:
            branch_id (str): The ID of the branch that was reset.
            status (str): The current status of the reset operation (e.g.,
                'RESETTING', 'COMPLETED', 'FAILED').
            target_migration_version (Optional[str]): The migration version to
                which the branch was reset. If a `migration_version` was
                provided in the input, this will reflect it. Otherwise, it
                indicates the default reset state (e.g., initial state or a
                state consistent with production).

    Raises:
        NotFoundError: If the target_branch_id_for_reset does not exist or the target_migration_checkpoint
            (if provided) is invalid for this branch.
        ValidationError: If input arguments fail validation.
        MigrationError: If an error occurs during the execution of a migration's SQL query or if a migration is malformed.
        ApiError: For unexpected internal processing errors or issues interacting with the underlying database simulation.
    """
    from supabase.branch import reset_branch
    return reset_branch(
        branch_id=target_branch_id_for_reset,
        migration_version=target_migration_checkpoint
    )


def update_branch_with_production_changes(branch_ref_to_rebase):
    """
    Rebases a development branch on production.

    The function effectively runs any newer migrations from production onto this
    branch to help handle migration drift.

    Args:
        branch_ref_to_rebase (str): The unique identifier of the branch to be rebased.

    Returns:
        Dict[str, Any]: A dictionary containing the status of the branch rebase
            operation, with the following keys:
            branch_id (str): The ID of the branch being rebased.
            status (str): The current status of the rebase (e.g., 'REBASING',
                'COMPLETED', 'FAILED', 'CONFLICT').
            rebase_operation_id (Optional[str]): An identifier for the rebase
                operation, especially if asynchronous.

    Raises:
        ResourceNotFoundError: If the branch_ref_to_rebase does not exist.
        ValidationError: If the input is Invalid.
        RebaseConflictError: If there are conflicts during the rebase process
            (e.g., migration conflicts that cannot be automatically resolved).
        OperationNotPermittedError: If the branch is not in a state suitable
            for rebasing (e.g., has local changes not captured in migrations).
    """
    from supabase.branch import rebase_branch
    return rebase_branch(branch_id=branch_ref_to_rebase)
