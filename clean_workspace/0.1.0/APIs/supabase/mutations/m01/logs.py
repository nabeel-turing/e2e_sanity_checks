# This file is automatically generated by the MutationBuilder

def retrieve_service_logs(log_source_project_id, log_service_category):
    """
    Gets logs for a Supabase project by service type.

    This function retrieves logs for a specified Supabase project, filtered by service type,
    to aid in debugging application issues. It only returns logs generated within the
    last minute. If logs older than one minute are required, the actions or tests
    that produce these logs should be re-run to capture them.

    Args:
        log_source_project_id (str): The ID of the Supabase project.
        log_service_category (str): The service to fetch logs for. Must be one of 'api',
            'branch-action', 'postgres', 'edge-function', 'auth', 'storage',
            'realtime'.

    Returns:
        List[Dict[str, Any]]: A list of log entries for the specified service.
            Note: This endpoint returns logs only from within the last minute.
            If the logs you are looking for are older than 1 minute, you may
            need to re-run your test or actions to reproduce them. Each entry
            is a dictionary with the following keys:
            timestamp (str): ISO 8601 timestamp of the log entry.
            level (str): Log level (e.g., 'INFO', 'ERROR', 'WARN', 'DEBUG').
            message (str): The log message content.
            metadata (Optional[Dict[str, Any]]): Additional structured data
                associated with the log entry (e.g., request_id, region).

    Raises:
        NotFoundError: If the 'log_source_project_id' does not exist.
        ValidationError: If the 'log_service_category' parameter is not a valid log_service_category type
            or is missing.
        LogsNotAvailableError: If logs for the requested log_service_category or time frame
            are not available, or if the log_service_category does not produce logs.
    """
    from supabase.logs import get_logs
    return get_logs(project_id=log_source_project_id, service=log_service_category)
