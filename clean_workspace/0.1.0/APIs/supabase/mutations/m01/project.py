# This file is automatically generated by the MutationBuilder

def enumerate_all_user_projects():
    """
    Lists all Supabase projects for the user.

    This function lists all Supabase projects for the user. It helps discover
    the project ID of the project that the user is working on.

    Returns:
        List[Dict[str, str]]: A list of Supabase project dictionaries. Each dictionary
            contains:
            id (str): The unique identifier for the project (project ID).
            name (str): The name of the project.
            organization_id (str): The ID of the organization the project
                                   belongs to.
            region (str): The region where the project is hosted.
            status (str): The current status of the project (e.g., 'ACTIVE',
                          'INACTIVE', 'COMING_UP').
            created_at (str): ISO 8601 timestamp of when the project was
                              created.
    """
    from supabase.project import list_projects
    return list_projects()


def fetch_project_information(project_reference_id):
    """
    Gets details for a Supabase project.

    Gets details for a Supabase project. This function retrieves information
    for a project identified by its unique ID.

    Args:
        project_reference_id (str): The project ID.

    Returns:
        Dict[str, Any]: Details for the Supabase project. Includes the following keys:
            id (str): The unique identifier for the project (project ID).
            name (str): The name of the project.
            organization_id (str): The ID of the organization the project belongs to.
            region (str): The region where the project is hosted.
            status (str): The current status of the project (e.g., 'ACTIVE', 'INACTIVE', 'COMING_UP', 'RESTORING').
            version (str): The Postgres version.
            created_at (str): ISO 8601 timestamp of when the project was created.

    Raises:
        NotFoundError: If the project with the specified ID does not exist.
        ValidationError: If input arguments fail validation.
    """
    from supabase.project import get_project
    return get_project(id=project_reference_id)


def provision_supabase_project(
    new_project_name,
    parent_organization_id,
    cost_confirmation_token,
    deployment_region_name=None
):
    """
    Creates a new Supabase project.

    Creates a new Supabase project. Always ask the user which organization to create the project in.
    The project can take a few minutes to initialize - use `get_project` to check the status.

    Args:
        new_project_name (str): The name of the project.
        parent_organization_id (str): The ID of the organization to create the project in.
        cost_confirmation_token (str): The cost confirmation ID. Call `confirm_cost` first.
        deployment_region_name (Optional[str]): The region to create the project in. Defaults to the closest region.
            Possible values: "us-west-1", "us-east-1", "us-east-2", "ca-central-1",
            "eu-west-1", "eu-west-2", "eu-west-3", "eu-central-1", "eu-central-2",
            "eu-north-1", "ap-south-1", "ap-southeast-1", "ap-northeast-1",
            "ap-northeast-2", "ap-southeast-2", "sa-east-1". Defaults to None.

    Returns:
        Dict[str, Any]: Information about the newly created project. Includes the following keys:
            id (str): The unique identifier for the new project.
            name (str): The name of the new project.
            organization_id (str): The ID of the organization the project was created in.
            region (str): The region where the project is being created.
            status (str): The initial status of the project (e.g., 'CREATING', 'INITIALIZING').
            created_at (str): ISO 8601 timestamp of when the project creation was initiated.

    Raises:
        InvalidInputError: If required inputs (new_project_name, parent_organization_id, cost_confirmation_token) are empty.
        NotFoundError: If the parent_organization_id does not exist.
        CostConfirmationError: If the cost_confirmation_token is invalid, expired, already used, or does not match the intended operation.
        PydanticValidationError: If input arguments fail type validation or enum constraints.
    """
    from supabase.project import create_project
    return create_project(
        name=new_project_name,
        organization_id=parent_organization_id,
        confirm_cost_id=cost_confirmation_token,
        region=deployment_region_name
    )


def suspend_project_activity(target_project_to_pause):
    """
    Pauses a Supabase project.

    Pauses a Supabase project.

    Args:
        target_project_to_pause (str): The ID of the project to pause.

    Returns:
        Dict[str, Any]: A dictionary detailing the outcome of the pause operation. Keys:
            project_id (str): The ID of the project that was targeted for pausing.
            status (str): The resulting status of the project after the pause request (e.g., 'PAUSING', 'INACTIVE').
            message (str): A human-readable message providing details about the pause operation outcome.

    Raises:
        NotFoundError: If the target_project_to_pause does not exist.
        OperationNotPermittedError: If the project cannot be paused (e.g., already paused, on a free plan that doesn't support pausing, or in an incompatible state).
        ValidationError: If input arguments fail validation.
    """
    from supabase.project import pause_project
    return pause_project(project_id=target_project_to_pause)


def reactivate_paused_project(project_identifier_to_restore):
    """
    Restores a Supabase project.

    This function restores a Supabase project. It uses the provided project ID
    to identify the project to be restored.

    Args:
        project_identifier_to_restore (str): The ID of the project.

    Returns:
        Dict[str, Any]: A dictionary detailing the status of the restore operation. It includes the following keys:
            project_id (str): The ID of the project being restored.
            status (str): The new status of the project (e.g., 'RESTORING', 'ACTIVE').
            message (str): A confirmation message.

    Raises:
        NotFoundError: If the project_identifier_to_restore does not exist.
        OperationNotPermittedError: If the project cannot be restored (e.g., not paused, or other operational constraints).
        ValidationError: If input arguments fail validation.
    """
    from supabase.project import restore_project
    return restore_project(project_id=project_identifier_to_restore)


def retrieve_project_api_endpoint(project_ref_for_url):
    """
    Gets the API URL for a project.

    This function gets the API URL for a project.

    Args:
        project_ref_for_url (str): The unique identifier of the project.

    Returns:
        Dict[str, Any]: A dictionary containing information for accessing the project's API. 
                        It includes 'project_id' (str) and 'api_url' (Optional[str]).
                        'api_url' will be None if the project exists but has no URL configured.

    Raises:
        NotFoundError: If the project_ref_for_url does not exist.
        ValidationError: If project_ref_for_url is not a string.
    """
    from supabase.project import get_project_url
    return get_project_url(project_id=project_ref_for_url)


def create_typescript_definitions_for_project(source_project_id_for_types):
    """
    Generates TypeScript types for a project.

    This function generates TypeScript type definitions for a project, identified
    by its `project_id`. It processes the project information to produce a
    string containing the TypeScript types.

    Args:
        source_project_id_for_types (str): The ID of the project.

    Returns:
        Dict[str, Any]: A dictionary containing the generated TypeScript type definitions. It includes the following keys:
            project_id (str): The ID of the project for which types were generated.
            types_content (str): A string containing the TypeScript type definitions.
            generation_status (str): Status of the type generation (e.g., 'SUCCESS', 'FAILED').
            message (Optional[str]): Additional information or error details if generation failed.

    Raises:
        NotFoundError: If the source_project_id_for_types does not exist.
        TypeGenerationError: If there was an error during the type generation process (e.g., database schema introspection failed, unsupported types).
        ValidationError: If input arguments fail validation.
    """
    from supabase.project import generate_typescript_types
    return generate_typescript_types(project_id=source_project_id_for_types)


def fetch_public_api_key(project_reference_for_key):
    """
    Gets the anonymous API key for a project.

    This function gets the anonymous API key for a project.

    Args:
        project_reference_for_key (str): The ID of the project.

    Returns:
        Dict[str, Any]: A dictionary containing the anonymous API key for the project, with the following keys:
            project_id (str): The ID of the project.
            anon_key (str): The anonymous (public) API key.

    Raises:
        NotFoundError: If the project_reference_for_key does not exist.
        ValidationError: If input arguments fail validation.
    """
    from supabase.project import get_anon_key
    return get_anon_key(project_id=project_reference_for_key)
