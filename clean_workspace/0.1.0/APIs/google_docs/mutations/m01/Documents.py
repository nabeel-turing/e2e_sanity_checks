# This file is automatically generated by the MutationBuilder

def fetch_document_details(
    target_document_id,
    suggestion_display_mode=None,
    retrieve_tabs_content=False,
    requesting_user_id='me'
):
    """
    Get a document by ID.

    Args:
        target_document_id (str): The ID of the document to retrieve. Cannot be empty or whitespace.
        suggestion_display_mode (Optional[str]): The mode for viewing suggestions.
            Common values include "DEFAULT" and "SUGGESTIONS_INLINE". 
            If None, the document's existing setting is preserved.
        retrieve_tabs_content (bool): Whether to include tab content. Defaults to False.
        requesting_user_id (str): The ID of the user performing the action. Defaults to "me".
            Cannot be empty or whitespace.

    Returns:
        Dict[str, Any]: The document data with the following structure:
                Base document fields:
                - id (str): Unique identifier for the document
                - driveId (str): ID of the drive containing the document (can be empty)
                - name (str): Title/name of the document
                - mimeType (str): MIME type ("application/vnd.google-apps.document")
                - createdTime (str): ISO 8601 timestamp when document was created
                - modifiedTime (str): ISO 8601 timestamp when document was last modified
                - parents (List[str]): List of parent folder IDs
                - owners (List[str]): List of owner email addresses
                - content (List[Dict[str, Any]]): Document content with structure:
                    - elementId (str): Unique identifier for the content element
                    - text (str): Text content of the element
                - tabs (List[Dict[str, Any]]): List of document tabs (usually empty)
                - permissions (List[Dict[str, Any]]): List of permission objects with structure:
                    - role (str): Permission level ("owner", "writer", "reader")
                    - type (str): Permission type ("user", "group", "domain", "anyone")
                    - emailAddress (str): Email address of the user/group

                Conditionally added fields:
                - suggestionsViewMode (str): Present if suggestionsViewMode parameter was provided
                - includeTabsContent (bool): Present if includeTabsContent parameter was True
                - comments (Dict[str, Any]): Dictionary of comments associated with this document:
                    - Key: comment ID (str)
                    - Value: Comment object with structure:
                        - id (str): Unique comment identifier
                        - fileId (str): ID of the document this comment belongs to
                        - content (str): Comment text content
                        - author (Dict[str, str]): Author information:
                            - displayName (str): Author's display name
                            - emailAddress (str): Author's email address
                        - createdTime (str): ISO 8601 timestamp when comment was created
                - replies (Dict[str, Any]): Dictionary of replies associated with this document:
                    - Key: reply ID (str)
                    - Value: Reply object with structure:
                        - id (str): Unique reply identifier
                        - commentId (str): ID of the comment this reply belongs to
                        - fileId (str): ID of the document this reply belongs to
                        - content (str): Reply text content
                        - author (Dict[str, str]): Author information:
                            - displayName (str): Author's display name
                            - emailAddress (str): Author's email address
                        - createdTime (str): ISO 8601 timestamp when reply was created
                - labels (Dict[str, Any]): Dictionary of labels associated with this document:
                    - Key: label ID (str)
                    - Value: Label object with structure:
                        - id (str): Unique label identifier
                        - fileId (str): ID of the document this label belongs to
                        - name (str): Label name
                        - color (str): Label color in hex format (e.g., "#FF0000")
                - accessproposals (Dict[str, Any]): Dictionary of access proposals for this document:
                    - Key: proposal ID (str)
                    - Value: Access proposal object with structure:
                        - id (str): Unique proposal identifier
                        - fileId (str): ID of the document this proposal is for
                        - role (str): Requested permission level ("reader", "writer", "owner")
                        - state (str): Proposal state ("pending", "approved", "rejected")
                        - requester (Dict[str, str]): Requester information:
                            - displayName (str): Requester's display name
                            - emailAddress (str): Requester's email address
                        - createdTime (str): ISO 8601 timestamp when proposal was created

    Raises:
        TypeError: If `target_document_id` is not a string.
        TypeError: If `suggestion_display_mode` is provided and is not a string.
        TypeError: If `retrieve_tabs_content` is not a boolean.
        TypeError: If `requesting_user_id` is not a string.
        ValueError: If `target_document_id` or `requesting_user_id` is empty or consists only of whitespace.

        ValueError: If the document is not found.
        KeyError: If the `requesting_user_id` is not found.
    """
    from google_docs.Documents import get
    return get(
        documentId=target_document_id,
        suggestionsViewMode=suggestion_display_mode,
        includeTabsContent=retrieve_tabs_content,
        userId=requesting_user_id
    )


def generate_new_document(document_title='Untitled Document', author_id='me'):
    """
    Create a new document.

    Args:
        document_title (str): The title of the document. Defaults to "Untitled Document".
        author_id (str): The ID of the user. Defaults to "me".
            Must be a non-empty string.

    Returns:
        Tuple[Dict[str, Any], int]: A tuple containing:
            - document (Dict[str, Any]): The created document data with the following structure:
                - id (str): Unique document identifier (UUID format)
                - driveId (str): Drive identifier (empty string for new documents)
                - name (str): Document title
                - mimeType (str): Document MIME type ("application/vnd.google-apps.document")
                - createdTime (str): Creation timestamp in ISO format
                - modifiedTime (str): Last modification timestamp in ISO format
                - parents (List[str]): List of parent folder IDs
                - owners (List[str]): List of owner email addresses
                - suggestionsViewMode (str): Suggestions viewing mode ("DEFAULT")
                - includeTabsContent (bool): Whether to include tabs content (False)
                - content (List[Dict]): Document content elements (empty for new documents)
                - tabs (List[Dict]): Document tabs (empty for new documents)
                - permissions (List[Dict]): Access permissions with structure:
                    - role (str): Permission role (e.g., "owner")
                    - type (str): Permission type (e.g., "user")
                    - emailAddress (str): User's email address
                - trashed (bool): Whether document is in trash (False)
                - starred (bool): Whether document is starred (False)
                - size (int): Document size in bytes (0 for new documents)
            - status_code (int): HTTP status code (200 for success)

    Raises:
        TypeError: If 'document_title' or 'author_id' is not a string.
        KeyError: If the specified `author_id` does not exist in the database or
                  if expected data structures for the user are missing
                  (this error is propagated from internal operations).
    """
    from google_docs.Documents import create
    return create(title=document_title, userId=author_id)


def apply_document_changeset(file_identifier_for_update, list_of_modification_requests, editor_user_id='me'):
    """
    Apply batch updates to a document.

    Args:
        file_identifier_for_update (str): The ID of the document to update.
        list_of_modification_requests (List[Dict[str, Any]]): A list of update requests to apply. Each dictionary
            in the list must be one of the specified request types. Each request
            dictionary typically has a single key identifying the type of request
            (e.g., 'insertText'), and its value is a dictionary containing the
            parameters for that request. The supported request types and their
            structures are:
            - InsertTextRequest: Corresponds to a dictionary with an 'insertText' key.
                'insertText' (Dict[str, Any]): Inserts text into the document.
                    'text' (str): The text to insert.
                    'location' (Dict[str, Any]): Specifies where to insert the text.
                        'index' (int): The zero-based index in the document's content
                                       where the text will be inserted.
            - UpdateDocumentStyleRequest: Corresponds to a dictionary with an
              'updateDocumentStyle' key.
                'updateDocumentStyle' (Dict[str, Any]): Updates the document's style.
                    'documentStyle' (Any): The new document style to apply. The specific
                                           structure of this dictionary will depend on how
                                           document styles are defined in your system.
        editor_user_id (str): The ID of the user. Defaults to "me".

    Returns:
        Tuple[Dict[str, Any], int]: The update response and HTTP status code.

    Raises:
        TypeError: If `file_identifier_for_update` or `editor_user_id` are not strings or `list_of_modification_requests` is not a list
            or any item in `list_of_modification_requests` is not a dictionary with a valid request type.
        pydantic.ValidationError: If any item in `list_of_modification_requests` does not conform to the defined
            structures (e.g., InsertTextRequestModel, UpdateDocumentStyleRequestModel),
            such as incorrect field types, missing required fields, or including extra fields.
        FileNotFoundError: If the document is not found.
    """
    from google_docs.Documents import batchUpdate
    return batchUpdate(
        documentId=file_identifier_for_update,
        requests=list_of_modification_requests,
        userId=editor_user_id
    )
