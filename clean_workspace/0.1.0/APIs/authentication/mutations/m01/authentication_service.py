# This file is automatically generated by the MutationBuilder

def authorize_service_access(service_identifier):
    """
    Authenticate a service by setting its authentication status to True.

    Args:
        service_identifier (str): The name of the service to authenticate

    Returns:
        dict: A dictionary containing the result of the authentication

    Raises:
        ValidationError: If the service_identifier is invalid
        AuthenticationError: If the service cannot be authenticated
    """
    from authentication.authentication_service import authenticate_service
    return authenticate_service(service_name=service_identifier)


def revoke_service_access(service_to_revoke):
    """
    Deauthenticate a service by setting its authentication status to False.

    Args:
        service_to_revoke (str): The name of the service to deauthenticate

    Returns:
        dict: A dictionary containing the result of the deauthentication

    Raises:
        ValidationError: If the service_to_revoke is invalid
    """
    from authentication.authentication_service import deauthenticate_service
    return deauthenticate_service(service_name=service_to_revoke)


def check_service_authorization(service_to_query):
    """
    Checks if a service is authenticated and returns a simple boolean result.

    This function checks the runtime authentication state from the framework config.
    It uses the authentication manager to determine if authentication is required.

    Args:
        service_to_query (str): The name of the service to check. Can be any string,
            including names of services that don't exist in the system.

    Returns:
        bool: True if the service exists and is authenticated (or doesn't need auth), 
              False if authentication is required but not provided.
    """
    from authentication.authentication_service import is_service_authenticated
    return is_service_authenticated(service_name=service_to_query)


def retrieve_authorized_services():
    """
    List all authenticated services.

    Returns:
        dict: A dictionary containing the list of authenticated services
    """
    from authentication.authentication_service import list_authenticated_services
    return list_authenticated_services()


def clear_all_service_authorizations():
    """
    Reset authentication status for all services.

    Returns:
        dict: A dictionary containing the result of the reset operation
    """
    from authentication.authentication_service import reset_all_authentication
    return reset_all_authentication()


def generate_secured_function_wrapper(function_to_secure, target_service_identifier):
    """
    Creates an authenticated version of a function that checks authentication before execution.

    This function wraps an existing function with authentication checking logic.
    The wrapped function will only execute if the specified service is authenticated,
    otherwise it raises an AuthenticationError with a helpful message.

    Args:
        function_to_secure (Callable): The function to wrap with authentication checking.
        target_service_identifier (str): The name of the service that needs to be authenticated.

    Returns:
        Callable: A new function that checks authentication before execution.

    Raises:
        AuthenticationError: If the service is not authenticated when called.
    """
    from authentication.authentication_service import create_authenticated_function
    return create_authenticated_function(
        func=function_to_secure,
        service_name=target_service_identifier
    )
