# This file is automatically generated by the MutationBuilder

def fetch_device_details(target_device_identifier, enterprise_project_id):
    """
    Retrieves information about an authorized device.

    Args:
        target_device_identifier (str): The unique identifier of the device within the enterprise.
        enterprise_project_id (str): The unique identifier of the enterprise or project.

    Returns:
        dict: The device information including all traits and the parentRelations object. 
            Contains the following keys:
                - name (str): The internal name of the device built from the enterprise and device id.
                - type (str): The type of the device.
                - traits (dict): The traits of the device including the reference name of the device.
                - parentRelations (list): The parent relations of the device.  

    Raises:
        ValueError: If any required parameter is missing or invalid.
    """
    from sdm.devices import get_device_info
    return get_device_info(device_id=target_device_identifier, project_id=enterprise_project_id)


def retrieve_triggered_events(filter_by_device_id=None, filter_by_event_category=None):
    """
    Returns a list of events that were triggered.

    Args:
        filter_by_device_id (Optional[str]): Optional unique identifier of a device to filter events. For example, "CAM_001".
        filter_by_event_category (Optional[str]): Optional event_type to filter events.
            Should be one of: "Motion", "Person", "Sound" or "Chime".
            It also accepts formats such as: "sdm.devices.events.CameraMotion.Motion".
            If no device_id or event_type provided, returns all events.

    Returns:
        list: A list containing event payloads.
    """
    from sdm.devices import get_events_list
    return get_events_list(device_id=filter_by_device_id, event_type=filter_by_event_category)


def catalog_authorized_devices():
    """
    Makes a GET call to retrieve a list of all devices that the user has authorized
    for a given enterprise. The response typically includes a collection of device objects.

    Returns:
        dict: The response containing a list of device objects.
            Contains the following keys:
                - devices (list): The list of device objects. The list is empty if no devices are found.
                Each device object contains the following keys:
                    - name (str): The internal name of the device built from the enterprise and device id.
                    - type (str): The type of the device.
                    - traits (dict): The traits of the device including the reference name of the device.
                    - project_id (str): The enterprise or project id that the device belongs to.
                    - parentRelations (list): The parent relations of the device.
    """
    from sdm.devices import list_devices
    return list_devices()


def send_device_instruction(destination_device_id, owning_project_id, instruction_payload):
    """
    Executes a command on a specific device managed by the enterprise.

    Args:
        destination_device_id (str): The unique identifier of the device within the enterprise. For example, "CAM_001"
        owning_project_id (str): The unique identifier of the enterprise or project.
        instruction_payload (dict): The command request payload, Contains the keys:
            - command (str): The name of the command to execute. One of the following (followed by a brief explanation):
                - sdm.devices.commands.generate_camera_event_image (retrieve the image from a camera through a triggered event)
                - sdm.devices.commands.generate_rtsp_stream (start the rtsp stream mode of a camera)
                - sdm.devices.commands.stop_rtsp_stream (stop the rtsp stream mode of a camera)
                - sdm.devices.commands.generate_image_from_rtsp_stream (retrieve the image from a camera through its ongoing rtsp stream)
                - sdm.devices.commands.generate_web_rtc_stream (start the web_rtc stream mode of a camera)
                - sdm.devices.commands.stop_web_rtc_stream (stop the web_rtc stream mode of a camera)
                - sdm.devices.commands.generate_image_from_web_rtc_stream (retrieve the image from a camera through its ongoing web_rtc stream)
            - params (dict): Each command may have its own parameters, represented by key, value dictionaries. If None, the command does not have params. Use these as reference:
                - sdm.devices.commands.generate_camera_event_image: 
                    - event_id: (str): The ID of the triggered event.
                - sdm.devices.commands.generate_rtsp_stream: 
                    - None.
                - sdm.devices.commands.stop_rtsp_stream:
                    - stream_extension_token: (str): The extension token of the stream to stop.
                - sdm.devices.commands.generate_image_from_rtsp_stream: 
                    - rtsp_url: (str): The RTSP URL of the stream.
                - sdm.devices.commands.generate_web_rtc_stream:
                    - offer_sdp: (str): The SDP of the offer.
                - sdm.devices.commands.stop_web_rtc_stream:
                    - stream_media_session_id: (str): The media session ID of the stream to stop.
                - sdm.devices.commands.generate_image_from_web_rtc_stream:
                    - answer_sdp: (str): The SDP of the answer.

    Returns:
        dict: The response from the API, containing the result of the command execution.

    Raises:
        ValueError: If any required parameter is missing or invalid.
    """
    from sdm.devices import execute_command
    return execute_command(
        device_id=destination_device_id,
        project_id=owning_project_id,
        command_request=instruction_payload
    )
