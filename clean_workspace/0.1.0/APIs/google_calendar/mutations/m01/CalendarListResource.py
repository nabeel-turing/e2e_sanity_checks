# This file is automatically generated by the MutationBuilder

def remove_calendar_from_my_list(calendar_list_entry_to_delete):
    """
    Deletes a calendar list entry from the user's calendar list.

    Args:
        calendar_list_entry_to_delete (str): The ID of the calendar list entry to delete.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - success (bool): True if the calendar list entry was deleted successfully.
            - message (str): A message indicating the result of the operation.

    Raises:
        TypeError: If calendar_list_entry_to_delete is not a string.
        ValueError: If calendar_list_entry_to_delete is empty or None, or if the calendar list entry is not found.
    """
    from google_calendar.CalendarListResource import delete_calendar_list
    return delete_calendar_list(calendarId=calendar_list_entry_to_delete)


def fetch_calendar_from_my_list(calendar_list_entry_to_retrieve):
    """
    Retrieves a calendar list entry from the user's calendar list.

    Args:
        calendar_list_entry_to_retrieve (str): The ID of the calendar list entry to retrieve. If "primary" is provided, the primary calendar will be returned.

    Returns:
        Dict[str, Any]: A dictionary containing the calendar list entry details:
            - id (str): The ID of the calendar list entry.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").

    Raises:
        TypeError: If calendar_list_entry_to_retrieve is not a string.
        ValueError: If the calendar list entry is not found.
    """
    from google_calendar.CalendarListResource import get_calendar_list
    return get_calendar_list(calendarId=calendar_list_entry_to_retrieve)


def add_calendar_to_my_list(new_calendar_list_entry_info):
    """
    Creates a new calendar list entry in the user's calendar list.

    Args:
        new_calendar_list_entry_info (Dict[str, Any]): The resource to create the calendar list entry with.
            - id (Optional[str]): The ID of the calendar list entry. If not provided, a UUID will be generated.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").

    Returns:
        Dict[str, Any]: A dictionary containing the created calendar list entry.
            - id (str): The ID of the calendar list entry.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").
            - primary (bool): Whether the calendar list entry is the primary calendar.

    Raises:
        ValueError: If the new_calendar_list_entry_info is not provided.
        ValidationError: If the new_calendar_list_entry_info structure is invalid.
    """
    from google_calendar.CalendarListResource import create_calendar_list
    return create_calendar_list(resource=new_calendar_list_entry_info)


def retrieve_my_calendar_list(list_entry_limit=100):
    """
    Lists all calendar list entries in the user's calendar list.

    Args:
        list_entry_limit (int): Maximum number of calendar list entries to return.
            Must be a positive integer. Defaults to 100.

    Returns:
        Dict[str, Any]: A dictionary containing the calendar list entries.
            - items (List[Dict[str, Any]]): A list of calendar list entries.
                - id (str): The ID of the calendar list entry.
                - summary (str): The summary of the calendar list entry.
                - description (str): The description of the calendar list entry.
                - timeZone (str): The time zone of the calendar list entry.
                - primary (bool): Whether the calendar list entry is the primary calendar.
            - nextPageToken (str): The next page token to use for pagination. Not implemented.

    Raises:
        TypeError: If list_entry_limit is not an integer.
        ValueError: If list_entry_limit is not a positive integer.
    """
    from google_calendar.CalendarListResource import list_calendar_lists
    return list_calendar_lists(maxResults=list_entry_limit)


def modify_my_calendar_list_item(
    calendar_list_entry_to_patch,
    use_rgb_for_color=False,
    calendar_list_item_updates=None
):
    """
    Updates specific fields of an existing calendar list entry.

    Args:
        calendar_list_entry_to_patch (str): The ID of the calendar list entry to patch. If "primary" is provided, the primary calendar will be patched.
        use_rgb_for_color (bool): Whether to use RGB color format. Defaults to False.
        calendar_list_item_updates (Dict[str, Any]): The resource to patch the calendar list entry with.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").

    Returns:
        Dict[str, Any]: A dictionary containing the complete patched calendar list entry with all fields,
                       including both updated and unchanged fields. The structure includes:
            - id (str): The ID of the calendar list entry.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").
            - primary (bool): Whether the calendar list entry is the primary calendar.
    Raises:
        TypeError: If calendar_list_entry_to_patch is not a string, if use_rgb_for_color is not a boolean,
                  or if calendar_list_item_updates is not a dictionary.
        ValueError: If calendar_list_entry_to_patch is empty or None, if the calendar list entry is not found,
                   or if calendar_list_item_updates contains invalid field types for known fields.
    """
    from google_calendar.CalendarListResource import patch_calendar_list
    return patch_calendar_list(
        calendarId=calendar_list_entry_to_patch,
        colorRgbFormat=use_rgb_for_color,
        resource=calendar_list_item_updates
    )


def replace_my_calendar_list_item(
    calendar_list_entry_to_replace,
    is_color_in_rgb_format=False,
    complete_calendar_list_item_data=None
):
    """
    Replaces an existing calendar list entry with new data.

    Args:
        calendar_list_entry_to_replace (str): The ID of the calendar list entry to replace. If "primary" is provided, the primary calendar will be replaced.
        is_color_in_rgb_format (bool): Whether to use RGB color format. Defaults to False.
        complete_calendar_list_item_data (Dict[str, Any]): The resource to replace the calendar list entry with.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").

    Returns:
        Dict[str, Any]: A dictionary containing the replaced calendar list entry.
            - id (str): The ID of the calendar list entry.
            - summary (str): The summary of the calendar list entry.
            - description (str): The description of the calendar list entry.
            - timeZone (str): The time zone of the calendar list entry (e.g. "America/New_York").
            - primary (bool): Whether the calendar list entry is the primary calendar.
    Raises:
        TypeError: If calendar_list_entry_to_replace is not a string, if is_color_in_rgb_format is not a boolean,
                  or if complete_calendar_list_item_data is not a dictionary.
        ValueError: If calendar_list_entry_to_replace is empty or None, if the calendar list entry is not found,
                   if complete_calendar_list_item_data is not provided, or if complete_calendar_list_item_data contains invalid field types
                   for known fields.
    """
    from google_calendar.CalendarListResource import update_calendar_list
    return update_calendar_list(
        calendarId=calendar_list_entry_to_replace,
        colorRgbFormat=is_color_in_rgb_format,
        resource=complete_calendar_list_item_data
    )


def monitor_my_calendar_list_updates(
    watch_list_item_limit=100,
    required_access_level_filter=None,
    calendar_list_watch_page_token=None,
    include_deleted_list_entries=False,
    include_hidden_list_entries=False,
    list_watch_sync_token=None,
    list_watch_channel_details=None
):
    """
    Sets up a watch for changes to calendar list entries.

    Args:
        watch_list_item_limit (Optional[int]): Maximum number of calendar list entries to return.
            Must be between 1 and 250. Defaults to 100.
        required_access_level_filter (Optional[str]): The minimum access role required to view the
            calendar list entries. Must be one of: "freeBusyReader", "owner", "reader", "writer".
        calendar_list_watch_page_token (Optional[str]): Token specifying which result page to return.
        include_deleted_list_entries (Optional[bool]): Whether to include deleted calendar list entries
            in the result. Defaults to False.
        include_hidden_list_entries (Optional[bool]): Whether to show hidden entries. Defaults to False.
        list_watch_sync_token (Optional[str]): Token obtained from the nextSyncToken field returned
            on the last page of results from the previous list request. Cannot be used
            together with minAccessRole.
        list_watch_channel_details (Optional[Dict[str, Any]]): Watch configuration:
            - id (str): Channel ID. If not provided, one will be generated.
            - type (str): Type of watch. Defaults to "web_hook".

    Returns:
        Dict[str, Any]: A dictionary containing the watch channel details.
            - id (str): The ID of the watch channel.
            - type (str): The type of watch to use.
            - resource (str): The resource to watch.
            - calendarId (str): The ID of the calendar list entry.
            - primary (bool): Whether the calendar list entry is the primary calendar.
    Raises:
        TypeError: If any parameter has an incorrect type.
        ValueError: If the list_watch_channel_details is not provided, if parameter values are invalid,
                   or if list_watch_sync_token is used together with required_access_level_filter.
    """
    from google_calendar.CalendarListResource import watch_calendar_lists
    return watch_calendar_lists(
        maxResults=watch_list_item_limit,
        minAccessRole=required_access_level_filter,
        pageToken=calendar_list_watch_page_token,
        showDeleted=include_deleted_list_entries,
        showHidden=include_hidden_list_entries,
        syncToken=list_watch_sync_token,
        resource=list_watch_channel_details
    )
