# This file is automatically generated by the MutationBuilder

def purge_main_calendar(primary_calendar_to_erase_id):
    """
    Clears a primary calendar. This operation deletes all events associated with the specified calendar.

    Args:
        primary_calendar_to_erase_id (str): The identifier of the calendar.
            - To retrieve calendar IDs, call the `calendarList.list` method.
            - Use the keyword "primary" to access the primary calendar of the currently logged-in user.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - success (bool): Whether the operation was successful.
            - message (str): A message describing the result of the operation.
    """
    from google_calendar.CalendarsResource import clear_calendar
    return clear_calendar(calendarId=primary_calendar_to_erase_id)


def remove_auxiliary_calendar(secondary_calendar_to_remove_id):
    """
    Deletes a secondary calendar. This operation removes the calendar from the user's calendar list.
    Note: Primary calendars cannot be deleted.

    Args:
        secondary_calendar_to_remove_id (str): The identifier of the secondary calendar to delete.
            To retrieve calendar IDs, call the `calendarList.list` method.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - success (bool): Whether the operation was successful.
            - message (str): A message describing the result of the operation.

    Raises:
        ValueError: If the calendar is not found or if attempting to delete a primary calendar.
        TypeError: If the calendar ID is not a string.
    """
    from google_calendar.CalendarsResource import delete_calendar
    return delete_calendar(calendarId=secondary_calendar_to_remove_id)


def fetch_calendar_properties(calendar_id_for_metadata_retrieval):
    """
    Retrieves metadata for a specified calendar.

    Args:
        calendar_id_for_metadata_retrieval (str): The identifier of the calendar.
            - To retrieve calendar IDs, call the `calendarList.list` method.
            - Use the keyword "primary" to access the primary calendar of the currently logged-in user.

    Returns:
        Dict[str, Any]: A dictionary containing the calendar metadata:
            - id (str): The identifier of the calendar.
            - summary (str): The summary of the calendar.
            - description (str): The description of the calendar.
            - timeZone (str): The time zone of the calendar (e.g. "America/New_York").
            - primary (bool): Whether the calendar is the primary calendar.
    Raises:
        TypeError: If calendar_id_for_metadata_retrieval is not a string.
        ValueError: If the calendar is not found
    """
    from google_calendar.CalendarsResource import get_calendar
    return get_calendar(calendarId=calendar_id_for_metadata_retrieval)


def establish_new_secondary_calendar(new_calendar_specifications=None):
    """
    Creates a secondary calendar.

    Args:
        new_calendar_specifications (Optional[Dict[str, Any]]): The resource to create the calendar with.
            - id (Optional[str]): The identifier of the calendar.
            - summary (Optional[str]): The Title of the calendar.
            - description (Optional[str]): The description of the calendar.
            - timeZone (Optional[str]): The time zone of the calendar (e.g. "America/New_York").
            - location (Optional[str]): Geographic location of the calendar as free-form text.
            - etag (Optional[str]): ETag of the resource. Used for optimistic concurrency control.
            - kind (Optional[str]): Type of the resource ("calendar#calendar").
            - conferenceProperties (Optional[Dict[str, Any]]): Conference-related properties.
                - allowedConferenceSolutionTypes (Optional[List[str]]): List of conference solution types that are supported for this calendar.
                    Each string in the list can be one of:
                    - "eventHangout"
                    - "eventNamedHangout"
                    - "hangoutsMeet"

    Returns:
        Dict[str, Any]: The created calendar.
            - id (str): The identifier of the calendar.
            - summary (Optional[str]): The Title of the calendar.
            - description (Optional[str]): The description of the calendar.
            - timeZone (Optional[str]): The time zone of the calendar (e.g. "America/New_York").
            - location (Optional[str]): The geographic location of the calendar.
            - etag (Optional[str]): ETag of the resource.
            - kind (Optional[str]): Type of the resource ("calendar#calendar").
            - conferenceProperties (Optional[Dict[str, Any]]): Conference-related properties.
                - allowedConferenceSolutionTypes (Optional[List[str]]): List of conference solution types that are supported for this calendar.
            - primary (bool): Whether the calendar is the primary calendar.
    Raises:
        ValueError: If the new_calendar_specifications is not provided.
        ValidationError: If the 'new_calendar_specifications' dictionary does not conform to the expected validations
    """
    from google_calendar.CalendarsResource import create_calendar
    return create_calendar(resource=new_calendar_specifications)


def partially_update_calendar_details(calendar_id_for_patch, calendar_metadata_to_update=None):
    """
    Updates specific fields of an existing calendar.

    Args:
        calendar_id_for_patch (str): The identifier of the calendar.
            - To retrieve calendar IDs, call the `calendarList.list` method.
            - Use the keyword "primary" to access the primary calendar of the currently logged-in user.
        calendar_metadata_to_update (Optional[Dict[str, Any]]): The resource to patch the calendar with.
            - summary (Optional[str]): The summary of the calendar.
            - description (Optional[str]): The description of the calendar.
            - timeZone (Optional[str]): The time zone of the calendar (e.g. "America/New_York").

    Returns:
        Dict[str, Any]: The patched calendar.
            - id (str): The identifier of the calendar.
            - summary (str): The summary of the calendar.
            - description (str): The description of the calendar.
            - timeZone (str): The time zone of the calendar (e.g. "America/New_York").
            - primary (bool): Whether the calendar is the primary calendar.
    Raises:
        TypeError: If calendar_id_for_patch is not a string or if calendar_metadata_to_update values have invalid types.
        ValueError: If the calendar is not found or if calendar_metadata_to_update contains invalid fields.
    """
    from google_calendar.CalendarsResource import patch_calendar
    return patch_calendar(calendarId=calendar_id_for_patch, resource=calendar_metadata_to_update)


def fully_replace_calendar_details(calendar_id_for_full_update, complete_new_calendar_metadata=None):
    """
    Replaces an existing calendar with new data.

    Args:
        calendar_id_for_full_update (str): The identifier of the calendar.
            - To retrieve calendar IDs, call the `calendarList.list` method.
            - Use the keyword "primary" to access the primary calendar of the currently logged-in user.
        complete_new_calendar_metadata (Optional[Dict[str, Any]]): The resource to update the calendar with.
            - summary (Optional[str]): The summary of the calendar.
            - description (Optional[str]): The description of the calendar.
            - timeZone (Optional[str]): The time zone of the calendar (e.g. "America/New_York").

    Returns:
        Dict[str, Any]: The updated calendar.
            - id (str): The identifier of the calendar.
            - summary (str): The summary of the calendar.
            - description (str): The description of the calendar.
            - timeZone (str): The time zone of the calendar (e.g. "America/New_York").
            - primary (bool): Whether the calendar is the primary calendar.
    Raises:
        ValueError: If the calendar is not found or if the complete_new_calendar_metadata is not provided.
    """
    from google_calendar.CalendarsResource import update_calendar
    return update_calendar(
        calendarId=calendar_id_for_full_update,
        resource=complete_new_calendar_metadata
    )
