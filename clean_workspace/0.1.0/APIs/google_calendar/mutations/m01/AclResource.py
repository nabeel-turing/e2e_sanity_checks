# This file is automatically generated by the MutationBuilder

def remove_calendar_permission_rule(acl_calendar_identifier, permission_rule_to_delete_id):
    """
    Deletes an access control rule from the specified calendar.

    Args:
        acl_calendar_identifier (str): The ID of the calendar to delete the rule from.
        permission_rule_to_delete_id (str): The ID of the rule to delete.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - success (bool): Whether the rule was deleted successfully.
            - message (str): A message describing the result of the operation.

    Raises:
        TypeError: If acl_calendar_identifier or permission_rule_to_delete_id is not a string.
        ValueError: If acl_calendar_identifier or permission_rule_to_delete_id is None, empty, or whitespace-only,
                   if the rule is not found, or if the rule does not belong to the specified calendar.
    """
    from google_calendar.AclResource import delete_rule
    return delete_rule(calendarId=acl_calendar_identifier, ruleId=permission_rule_to_delete_id)


def fetch_permission_rule(calendar_id_for_acl_retrieval, access_rule_identifier):
    """
    Retrieves an access control rule from the specified calendar.

    Args:
        calendar_id_for_acl_retrieval (str): The ID of the calendar to get the rule from.
        access_rule_identifier (str): The ID of the rule to retrieve.

    Returns:
        Dict[str, Any]: A dictionary containing the rule details:
            - ruleId (str): The ID of the rule.
            - calendarId (str): The ID of the calendar the rule belongs to.
            - scope (Dict[str, str]): The scope of the rule:
                - type (str): The type of scope (e.g., 'user', 'group').
                - value (str): The value of the scope (e.g., email address).
            - role (str): The role assigned by the rule (e.g., 'reader', 'writer').

    Raises:
        TypeError: If calendar_id_for_acl_retrieval or access_rule_identifier is not a string.
        ValueError: If calendar_id_for_acl_retrieval or access_rule_identifier is empty/whitespace, if the rule is not found, 
                   or if the rule does not belong to the specified calendar.
    """
    from google_calendar.AclResource import get_rule
    return get_rule(calendarId=calendar_id_for_acl_retrieval, ruleId=access_rule_identifier)


def add_calendar_access_rule(
    target_calendar_for_permission,
    notify_on_permission_change=True,
    new_permission_rule_data=None
):
    """
    Creates a new access control rule for the specified calendar.

    Args:
        target_calendar_for_permission (str): The ID of the calendar to create the rule for.
        notify_on_permission_change (bool): Whether to send notifications to the rule's scope. Defaults to True.
        new_permission_rule_data (Dict[str, Any]): The rule details:
            - role (str): The role to assign (e.g., 'reader', 'writer').
            - scope (Dict[str, str]): The scope of the rule:
                - type (str): The type of scope (e.g., 'user', 'group').
                - value (str): The value of the scope (e.g., email address).
            - ruleId (Optional[str]): The ID of the rule. If not provided, one will be generated.

    Returns:
        Dict[str, Any]: A dictionary containing the created rule with the same structure as the input resource,
        plus the generated ruleId if one was not provided.
            - ruleId (str): The ID of the rule.
            - calendarId (str): The ID of the calendar the rule belongs to.
            - scope (Dict[str, str]): The scope of the rule:
                - type (str): The type of scope (e.g., 'user', 'group').
                - value (str): The value of the scope (e.g., email address).
            - role (str): The role assigned by the rule (e.g., 'reader', 'writer').
            - notificationsSent (bool): Whether notifications were sent to the rule's scope.

    Raises:
        TypeError: If target_calendar_for_permission is not a string, notify_on_permission_change is not a boolean, 
                  new_permission_rule_data is not a dictionary, or required new_permission_rule_data fields have invalid types.
        ValueError: If target_calendar_for_permission is empty/whitespace, new_permission_rule_data is not provided, 
                   or required new_permission_rule_data fields are missing or invalid.
    """
    from google_calendar.AclResource import create_rule
    return create_rule(
        calendarId=target_calendar_for_permission,
        sendNotifications=notify_on_permission_change,
        resource=new_permission_rule_data
    )


def get_all_calendar_permission_rules(
    calendar_id_for_rule_listing,
    max_rules_to_fetch=100,
    rule_list_pagination_token=None,
    include_removed_rules=False,
    rule_list_sync_token=None
):
    """
    Lists all access control rules for the specified calendar.

    Args:
        calendar_id_for_rule_listing (str): The ID of the calendar to list rules for.
        max_rules_to_fetch (int): Maximum number of rules to return. Defaults to 100.
        rule_list_pagination_token (Optional[str]): Token for pagination. Not implemented.
        include_removed_rules (bool): Whether to include deleted rules. Not implemented.
        rule_list_sync_token (Optional[str]): Token for synchronization. Not implemented.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - items (List[Dict[str, Any]]): List of rules matching the criteria with the following structure:
                - ruleId (str): The ID of the rule.
                - calendarId (str): The ID of the calendar the rule belongs to.
                - scope (Dict[str, str]): The scope of the rule:
                    - type (str): The type of scope (e.g., 'user', 'group').
                    - value (str): The value of the scope (e.g., email address).
                - role (str): The role assigned by the rule (e.g., 'reader', 'writer').
            - nextPageToken (None): Always None as pagination is not implemented.

    Raises:
        TypeError: If calendar_id_for_rule_listing is not a string or max_rules_to_fetch is not an integer.
        ValueError: If calendar_id_for_rule_listing is empty/whitespace or max_rules_to_fetch is not positive.
    """
    from google_calendar.AclResource import list_rules
    return list_rules(
        calendarId=calendar_id_for_rule_listing,
        maxResults=max_rules_to_fetch,
        pageToken=rule_list_pagination_token,
        showDeleted=include_removed_rules,
        syncToken=rule_list_sync_token
    )


def modify_existing_permission_rule(
    calendar_id_for_rule_patch,
    rule_identifier_to_modify,
    alert_on_rule_modification=True,
    permission_rule_update_data=None
):
    """
    Updates specific fields of an existing access control rule.

    Args:
        calendar_id_for_rule_patch (str): The ID of the calendar containing the rule.
        rule_identifier_to_modify (str): The ID of the rule to update.
        alert_on_rule_modification (bool): Whether to send notifications. Defaults to True.
        permission_rule_update_data (Dict[str, Any]): The fields to update:
            - role (str): New role to assign.
            - scope (Dict[str, str]): New scope settings.

    Returns:
        Dict[str, Any]: The updated rule with all fields, including unchanged ones.
        The rule will have the following structure:
            - ruleId (str): The ID of the rule.
            - calendarId (str): The ID of the calendar the rule belongs to.
            - scope (Dict[str, str]): The scope of the rule:
                - type (str): The type of scope (e.g., 'user', 'group').
                - value (str): The value of the scope (e.g., email address).
            - role (str): The role assigned by the rule (e.g., 'reader', 'writer').

    Raises:
        TypeError: If calendar_id_for_rule_patch or rule_identifier_to_modify is not a string, alert_on_rule_modification is not a boolean,
                  or permission_rule_update_data fields have invalid types.
        ValueError: If calendar_id_for_rule_patch or rule_identifier_to_modify is empty/whitespace, rule is not found,
                   rule does not belong to the specified calendar, or permission_rule_update_data contains
                   invalid fields or values.
    """
    from google_calendar.AclResource import patch_rule
    return patch_rule(
        calendarId=calendar_id_for_rule_patch,
        ruleId=rule_identifier_to_modify,
        sendNotifications=alert_on_rule_modification,
        resource=permission_rule_update_data
    )


def replace_access_control_rule(
    calendar_id_for_rule_replacement,
    rule_identifier_to_replace,
    should_notify_on_replacement=True,
    full_replacement_rule_data=None
):
    """
    Replaces an existing access control rule with new data.

    Args:
        calendar_id_for_rule_replacement (str): The ID of the calendar containing the rule.
        rule_identifier_to_replace (str): The ID of the rule to update.
        should_notify_on_replacement (bool): Whether to send notifications. Defaults to True.
        full_replacement_rule_data (Dict[str, Any]): The complete new rule data:
            - role (str): New role to assign.
            - scope (Dict[str, str]): New scope settings.
            - Any other rule fields to include.

    Returns:
        Dict[str, Any]: The complete updated rule with the following structure:
            - ruleId (str): The ID of the rule.
            - calendarId (str): The ID of the calendar the rule belongs to.
            - scope (Dict[str, str]): The scope of the rule:
                - type (str): The type of scope (e.g., 'user', 'group').
                - value (str): The value of the scope (e.g., email address).
            - role (str): The role assigned by the rule (e.g., 'reader', 'writer').

    Raises:
        TypeError: If calendar_id_for_rule_replacement or rule_identifier_to_replace is not a string, if should_notify_on_replacement is not a boolean,
                  or if full_replacement_rule_data is not a dictionary.
        ValueError: If calendar_id_for_rule_replacement is empty or None, if rule_identifier_to_replace is empty or None,
                   if the rule is not found, if the rule does not belong to the specified calendar,
                   if the full_replacement_rule_data body is not provided, if full_replacement_rule_data contains invalid fields,
                   or if required fields (role, scope) are missing or invalid.
    """
    from google_calendar.AclResource import update_rule
    return update_rule(
        calendarId=calendar_id_for_rule_replacement,
        ruleId=rule_identifier_to_replace,
        sendNotifications=should_notify_on_replacement,
        resource=full_replacement_rule_data
    )


def monitor_permission_rule_modifications(
    calendar_id_for_acl_watch,
    max_rules_in_watch_feed=100,
    acl_watch_pagination_token=None,
    include_deleted_rules_in_watch=False,
    acl_synchronization_token=None,
    acl_watch_channel_setup=None
):
    """
    Sets up a watch for changes to access control rules.

    Args:
        calendar_id_for_acl_watch (str): The ID of the calendar to watch.
        max_rules_in_watch_feed (int): Maximum number of rules to return. Defaults to 100.
        acl_watch_pagination_token (Optional[str]): Token for pagination. Not implemented.
        include_deleted_rules_in_watch (bool): Whether to include deleted rules. Not implemented.
        acl_synchronization_token (Optional[str]): Token for synchronization. Not implemented.
        acl_watch_channel_setup (Dict[str, Any]): Watch configuration:
            - type (str): Type of watch (defaults to "web_hook").
            - id (str, optional): Channel ID. If not provided, one will be generated.

    Returns:
        Dict[str, Any]: A dictionary containing the watch channel details:
            - id (str): The channel ID.
            - type (str): The watch type.
            - resource (str): Always "acl".
            - calendarId (str): The calendar being watched.

    Raises:
        TypeError: If calendar_id_for_acl_watch is not a string, if max_rules_in_watch_feed is not an integer,
                  if include_deleted_rules_in_watch is not a boolean, or if acl_watch_channel_setup is not a dictionary.
        ValueError: If calendar_id_for_acl_watch is empty or None, if max_rules_in_watch_feed is not positive,
                   if the acl_watch_channel_setup body is not provided, or if acl_watch_channel_setup contains invalid fields.
    """
    from google_calendar.AclResource import watch_rules
    return watch_rules(
        calendarId=calendar_id_for_acl_watch,
        maxResults=max_rules_in_watch_feed,
        pageToken=acl_watch_pagination_token,
        showDeleted=include_deleted_rules_in_watch,
        syncToken=acl_synchronization_token,
        resource=acl_watch_channel_setup
    )
