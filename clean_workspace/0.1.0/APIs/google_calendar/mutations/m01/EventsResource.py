# This file is automatically generated by the MutationBuilder

def remove_calendar_event(target_calendar_id, event_to_be_deleted_id, deletion_update_policy=None):
    """
    Deletes an event from the specified calendar.

    Args:
        target_calendar_id (str): The identifier of the calendar containing the event to delete.
        event_to_be_deleted_id (str): The identifier of the event to delete.
        deletion_update_policy (str, optional): Whether to send updates about the deletion.
            Possible values: "all", "externalOnly", "none". Defaults to None.
            Note: sendUpdates functionality is not implemented yet.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - success (bool): Whether the event was successfully deleted.
            - message (str): A message describing the result of the operation.

    Raises:
        ValueError: If the event is not found in the calendar.
    """
    from google_calendar.EventsResource import delete_event
    return delete_event(
        calendarId=target_calendar_id,
        eventId=event_to_be_deleted_id,
        sendUpdates=deletion_update_policy
    )


def fetch_event_details(
    deprecated_email_inclusion_flag=False,
    calendar_source_id='primary',
    specific_event_identifier=None,
    attendee_count_limit=None,
    response_display_timezone=None
):
    """
    Retrieves an event from the specified calendar.

    Args:
        deprecated_email_inclusion_flag (bool, optional): Deprecated. This parameter is ignored as email addresses
            are always included in the response. Defaults to False.
        calendar_source_id (str, optional): The identifier of the calendar. Defaults to "primary".
            To retrieve calendar IDs call the calendarList.list method.
            If you want to access the primary calendar of the currently logged in user,
            use the "primary" keyword.
        specific_event_identifier (str, optional): The identifier of the event to retrieve. This is mandatory.
        attendee_count_limit (int, optional): The maximum number of attendees to return (must be non-negative).
            Defaults to None (return all attendees).
        response_display_timezone (str, optional): The time zone to use for the response (e.g. "America/New_York").
            Defaults to the calendar's time zone.

    Returns:
        Dict[str, Any]: The event details containing:
            - id (str): The identifier of the event.
            - summary (str): The summary/title of the event.
            - description (str, optional): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - organizer (Dict[str, Any]): The organizer of the event.
                - email (str): The email address of the organizer.
            - creator (Dict[str, Any]): The creator of the event.
                - email (str): The email address of the creator.
            - attendees (List[Dict[str, Any]]): The list of attendees.
                - email (str): The email address of the attendee.

    Raises:
        TypeError: If any argument has an invalid type (e.g., `deprecated_email_inclusion_flag` is not bool,
            `calendar_source_id` is not str or None, `specific_event_identifier` is not str, `attendee_count_limit` is not int or None,
            `response_display_timezone` is not str or None).
        InvalidInputError: If any argument has an invalid value or format:
            - specific_event_identifier is None or empty/whitespace
            - calendar_source_id is empty/whitespace
            - attendee_count_limit is negative
            - response_display_timezone is empty/whitespace or has invalid format
        ResourceNotFoundError: If the calendar or event is not found:
            - Calendar with specified ID does not exist
            - Event with specified ID does not exist in the calendar
    """
    from google_calendar.EventsResource import get_event
    return get_event(
        alwaysIncludeEmail=deprecated_email_inclusion_flag,
        calendarId=calendar_source_id,
        eventId=specific_event_identifier,
        maxAttendees=attendee_count_limit,
        timeZone=response_display_timezone
    )


def add_event_from_definition(
    destination_calendar_for_import,
    meeting_data_schema_version=0,
    enable_event_attachments=False,
    event_definition_payload=None
):
    """
    Imports an event into the specified calendar.

    Args:
        destination_calendar_for_import (str): The identifier of the calendar.
        meeting_data_schema_version (int, optional): The version of the conference data.
            Defaults to 0.
        enable_event_attachments (bool, optional): Whether the event supports attachments.
            Defaults to False.
        event_definition_payload (Dict[str, Any], optional): The event to import:
            - id (str, optional): The identifier of the event. If not provided,
                a new UUID will be generated.
            - summary (str): The summary/title of the event.
            - description (str, optional): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.

    Returns:
        Dict[str, Any]: The imported event.
            - id (str): The identifier of the event.
            - summary (str): The summary of the event.
            - description (str): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.

    Raises:
        ValueError: If the event_definition_payload is not provided.
    """
    from google_calendar.EventsResource import import_event
    return import_event(
        calendarId=destination_calendar_for_import,
        conferenceDataVersion=meeting_data_schema_version,
        supportsAttachments=enable_event_attachments,
        resource=event_definition_payload
    )


def schedule_new_calendar_event(
    calendar_for_new_event='primary',
    new_event_configuration=None,
    creation_notification_preference=None
):
    """
    Creates a new event in the specified calendar.

    Args:
        calendar_for_new_event (str, optional): The identifier of the calendar. Defaults to the user's primary calendar.
        new_event_configuration (Dict[str, Any]): The event to create:
        creation_notification_preference (str, optional): Whether to send updates about the creation.
            Possible values: "all", "externalOnly", "none". Defaults to None.
            Note: sendUpdates functionality is not implemented yet.
            - id (str, optional): The identifier of the event. If not provided,
                a new UUID will be generated.
            - summary (str): The summary/title of the event.
            - description (str, optional): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time.
            - recurrence (Optional[List[str]]): The recurrence rules of the event in RRULE format.
                Examples:
                - Daily for 5 occurrences: ["RRULE:FREQ=DAILY;COUNT=5"]
                - Weekly on Monday and Wednesday: ["RRULE:FREQ=WEEKLY;BYDAY=MO,WE"]
                - Monthly on the 15th: ["RRULE:FREQ=MONTHLY;BYMONTHDAY=15"]
                - Yearly on January 1st: ["RRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1"]
                - Every 2 weeks: ["RRULE:FREQ=WEEKLY;INTERVAL=2"]
                - Until a specific date: ["RRULE:FREQ=DAILY;UNTIL=20241231T235959Z"]

                Supported RRULE parameters:
                - FREQ: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY (required)
                - INTERVAL: Positive integer (default: 1)
                - COUNT: Positive integer (number of occurrences)
                - UNTIL: YYYYMMDDTHHMMSSZ or YYYYMMDDTHHMMSS format
                - BYDAY: SU,MO,TU,WE,TH,FR,SA (with optional ordinal: 1SU, -1MO)
                - BYMONTH: 1-12
                - BYMONTHDAY: 1-31
                - BYYEARDAY: 1-366
                - BYWEEKNO: 1-53
                - BYHOUR: 0-23
                - BYMINUTE: 0-59
                - BYSECOND: 0-59
                - BYSETPOS: 1-366 or -366 to -1
                - WKST: SU,MO,TU,WE,TH,FR,SA (week start)

            - attendees (Optional[List[Dict[str, Any]]]): List of event attendees. Each attendee can have:
                - email (Optional[str]): The attendee's email address
                - displayName (Optional[str]): The attendee's display name
                - organizer (Optional[bool]): Whether the attendee is the organizer
                - self (Optional[bool]): Whether the attendee is the user
                - resource (Optional[bool]): Whether the attendee is a resource
                - optional (Optional[bool]): Whether the attendee's presence is optional
                - responseStatus (Optional[str]): The attendee's response status
                - comment (Optional[str]): The attendee's comment
                - additionalGuests (Optional[int]): Number of additional guests

            - reminders (Optional[Dict[str, Any]]): The reminders of the event.
                - useDefault (bool): Whether to use the default reminders.
                - overrides (Optional[List[Dict[str, Any]]]): The list of overrides.
                    - method (str): The method of the reminder.
                    - minutes (int): The minutes of the reminder.
            - location (Optional[str]): The location of the event.

    Returns:
        Dict[str, Any]: The created event.
            - id (str): The identifier of the event.
            - summary (str): The summary of the event.
            - description (str): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time.
            - attendees (List[Dict[str, Any]], optional): List of event attendees with their details.
            - recurrence (Optional[List[str]]): The recurrence rules of the event. e.g. ["RRULE:FREQ=DAILY;COUNT=5"]
            - reminders (Optional[Dict[str, Any]]): The reminders of the event.
            - location (Optional[str]): The location of the event.

    Raises:
        TypeError: If 'calendar_for_new_event' is not a string or 'creation_notification_preference' is not a string (if provided).
        ValueError: If 'new_event_configuration' is not provided (i.e., is None).
        InvalidInputError: If 'creation_notification_preference' has an invalid value (not one of: "all", "externalOnly", "none").
        pydantic.ValidationError: If 'new_event_configuration' is provided but does not conform to the
                                  EventResourceInputModel structure (e.g., missing 'summary',
                                  'start', 'end', or incorrect types for fields like 'dateTime').
                                  This includes validation errors for recurrence rules.

    Examples:
        # Create a simple event
        event = create_event("primary", {
            "summary": "Team Meeting",
            "start": {"dateTime": "2024-01-15T10:00:00Z"},
            "end": {"dateTime": "2024-01-15T11:00:00Z"}
        })

        # Create a recurring daily event
        event = create_event("primary", {
            "summary": "Daily Standup",
            "start": {"dateTime": "2024-01-15T09:00:00Z"},
            "end": {"dateTime": "2024-01-15T09:30:00Z"},
            "recurrence": ["RRULE:FREQ=DAILY;COUNT=10"]
        })

        # Create a weekly event on specific days
        event = create_event("primary", {
            "summary": "Weekly Review",
            "start": {"dateTime": "2024-01-15T14:00:00Z"},
            "end": {"dateTime": "2024-01-15T15:00:00Z"},
            "recurrence": ["RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR"]
        })
    """
    from google_calendar.EventsResource import create_event
    return create_event(
        calendarId=calendar_for_new_event,
        resource=new_event_configuration,
        sendUpdates=creation_notification_preference
    )


def get_recurring_event_occurrences(
    force_email_inclusion=False,
    calendar_context_identifier='primary',
    base_recurring_event_id=None,
    maximum_attendees_to_show=None,
    max_instances_to_return=250,
    instance_original_start_datetime=None,
    pagination_cursor=None,
    include_cancelled_instances=False,
    upper_datetime_boundary=None,
    lower_datetime_boundary=None,
    timezone_for_instances=None
):
    """
    Returns instances of a specified recurring event.
    This is a mock, so we won't actually expand recurrences.
    We'll pretend the event itself is the only instance.

    Args:
        force_email_inclusion (bool, optional): Whether to include the email address of the event creator.
            Defaults to False.
        calendar_context_identifier (str, optional): The identifier of the calendar. If not provided, defaults to "primary".
        base_recurring_event_id (str, optional): The identifier of the event.
        maximum_attendees_to_show (int, optional): The maximum number of attendees to return.
            Must be non-negative. Defaults to None (return all attendees).
        max_instances_to_return (int, optional): The maximum number of instances to return.
            Must be a positive integer. Defaults to 250.
        instance_original_start_datetime (str, optional): The original start time of the instance in ISO 8601 format.
        pagination_cursor (str, optional): The token for the next page of results.
        include_cancelled_instances (bool, optional): Whether to include deleted instances.
            Defaults to False.
        upper_datetime_boundary (str, optional): The maximum time of the instances to return in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
        lower_datetime_boundary (str, optional): The minimum time of the instances to return in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
        timezone_for_instances (str, optional): The time zone to use for the response (e.g. "America/New_York").
            Must be in format 'Continent/City'. Defaults to the calendar's time zone.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - items (List[Dict[str, Any]]): The list of event instances.
                - id (str): The identifier of the event.
                - summary (str): The summary of the event.
                - description (str): The description of the event.
                - start (Dict[str, Any]): The start time of the event.
                    - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
                - end (Dict[str, Any]): The end time of the event.
                    - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
                - attendees (List[Dict[str, Any]], optional): List of attendees (limited by maxAttendees).
                - timeZone (str, optional): Applied timezone if timeZone parameter was provided.
            - nextPageToken (str): The next page token. None if there are no more pages.

    Raises:
        TypeError: If any argument has an invalid type.
        InvalidInputError: If any argument has an invalid value or format.
        ResourceNotFoundError: If the calendar or event is not found.
    """
    from google_calendar.EventsResource import list_event_instances
    return list_event_instances(
        alwaysIncludeEmail=force_email_inclusion,
        calendarId=calendar_context_identifier,
        eventId=base_recurring_event_id,
        maxAttendees=maximum_attendees_to_show,
        maxResults=max_instances_to_return,
        originalStart=instance_original_start_datetime,
        pageToken=pagination_cursor,
        showDeleted=include_cancelled_instances,
        timeMax=upper_datetime_boundary,
        timeMin=lower_datetime_boundary,
        timeZone=timezone_for_instances
    )


def retrieve_events_from_calendar(
    selected_calendar_identifier='primary',
    result_set_size=250,
    search_start_time_filter=None,
    search_end_time_filter=None,
    event_search_keyword=None,
    expand_recurring_into_instances=False,
    sorting_criterion=None
):
    """
    Lists events from the specified calendar.

    Args:
        selected_calendar_identifier (Optional[str], optional): The identifier of the calendar. Defaults to "primary".
        result_set_size (int, optional): The maximum number of events to return.
            Must be a positive integer. Defaults to 250.
        search_start_time_filter (Optional[str], optional): The minimum time of the events to return (ISO datetime string).
        search_end_time_filter (Optional[str], optional): The maximum time of the events to return (ISO datetime string).
        event_search_keyword (Optional[str], optional): The query string to filter events by.
        expand_recurring_into_instances (bool, optional): Whether to expand recurring events into individual instances.
            When True, recurring events are expanded into separate instances within the time range.
            When False, only the base recurring event is returned. Defaults to False.
        sorting_criterion (Optional[str], optional): The order of the events.
            Must be one of: "startTime", "updated". Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - items (List[Dict[str, Any]]): The list of events.
                - id (str): The identifier of the event.
                - summary (str): The summary of the event.
                - description (str): The description of the event.
                - start (Dict[str, Any]): The start time of the event.
                    - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
                - end (Dict[str, Any]): The end time of the event.
                    - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
                - recurrence (Optional[List[str]]): The recurrence rules (only present for base recurring events).
                - recurringEventId (Optional[str]): The ID of the parent recurring event (only present for instances).
                - originalStartTime (Optional[Dict[str, Any]]): The original start time of the recurring event.

    Raises:
        TypeError: If `selected_calendar_identifier` is provided and is not a string.
        TypeError: If `result_set_size` is not an integer.
        TypeError: If `search_start_time_filter` is provided and is not a string.
        TypeError: If `search_end_time_filter` is provided and is not a string.
        TypeError: If `event_search_keyword` is provided and is not a string.
        TypeError: If `expand_recurring_into_instances` is not a boolean.
        TypeError: If `sorting_criterion` is provided and is not a string.
        InvalidInputError: If `result_set_size` is not a positive integer.
        InvalidInputError: If `search_start_time_filter` or `search_end_time_filter` contains a malformed datetime string that cannot be parsed.
        InvalidInputError: If `sorting_criterion` has an invalid value (not "startTime" or "updated").
    """
    from google_calendar.EventsResource import list_events
    return list_events(
        calendarId=selected_calendar_identifier,
        maxResults=result_set_size,
        timeMin=search_start_time_filter,
        timeMax=search_end_time_filter,
        q=event_search_keyword,
        singleEvents=expand_recurring_into_instances,
        orderBy=sorting_criterion
    )


def relocate_event_to_another_calendar(
    source_calendar_identifier,
    event_to_relocate_id,
    target_calendar_for_move,
    notify_participants_on_move=False,
    move_update_distribution=None
):
    """
    Moves an event from one calendar to another. We simulate by removing from old
    and creating in new with same ID.

    Args:
        source_calendar_identifier (str): The identifier of the source calendar.
        event_to_relocate_id (str): The identifier of the event to move.
        target_calendar_for_move (str): The identifier of the destination calendar.
        notify_participants_on_move (Optional[bool]): Whether to send notifications about the move.
            Defaults to False.
        move_update_distribution (Optional[str]): Whether to send updates about the move.
            Possible values: "all", "externalOnly", "none". Defaults to None.

    Returns:
        Dict[str, Any]: The moved event.
            - id (str): The identifier of the event.
            - summary (str): The summary of the event.
            - description (str): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.

    Raises:
        TypeError: If any argument has an invalid type (e.g., source_calendar_identifier is not str).
        InvalidInputError: If any argument has an invalid value:
            - source_calendar_identifier is empty/whitespace
            - event_to_relocate_id is empty/whitespace
            - target_calendar_for_move is empty/whitespace
            - move_update_distribution has invalid value (not one of: "all", "externalOnly", "none")
        ResourceNotFoundError: If the event is not found in the calendar.
        ResourceAlreadyExistsError: If the event already exists in the target_calendar_for_move calendar.
    """
    from google_calendar.EventsResource import move_event
    return move_event(
        calendarId=source_calendar_identifier,
        eventId=event_to_relocate_id,
        destination=target_calendar_for_move,
        sendNotifications=notify_participants_on_move,
        sendUpdates=move_update_distribution
    )


def modify_event_partially(
    calendar_containing_the_event='primary',
    event_id_for_patching=None,
    event_update_fields=None,
    modification_update_policy=None
):
    """
    Updates specific fields of an existing event.

    This function allows partial updates to an event by providing only the fields 
    that need to be changed.

    Args:
        calendar_containing_the_event (str): The identifier of the calendar. Defaults to "primary".
        event_id_for_patching (Optional[str]): The identifier of the event to update.
        event_update_fields (Optional[Dict[str, Any]]): The fields to update.
        modification_update_policy (str, optional): Whether to send updates about the patch.
            Possible values: "all", "externalOnly", "none". Defaults to None.
            Note: sendUpdates functionality is not implemented yet.
            Validated structure:
            - summary (Optional[str]): The new summary/title of the event.
            - description (Optional[str]): The new description of the event.
            - start (Optional[Dict[str, Any]]): The new start time of the event.
                - dateTime (Optional[str]): The date and time in ISO 8601 format (e.g., "2025-03-10T09:00:00Z").
            - end (Optional[Dict[str, Any]]): The new end time of the event.
                - dateTime (Optional[str]): The date and time in ISO 8601 format (e.g., "2025-03-10T09:30:00Z").
            - attendees (Optional[List[Dict[str, Any]]]): The new list of attendees.
                Each attendee dict contains:
                - email (Optional[str]): The attendee's email address.
                - displayName (Optional[str]): The attendee's name.
                - organizer (Optional[bool]): Whether the attendee is the organizer.
                - self (Optional[bool]): Whether this represents the calendar owner.
                - resource (Optional[bool]): Whether the attendee is a resource (room, equipment).
                - optional (Optional[bool]): Whether this is an optional attendee.
                - responseStatus (Optional[str]): Response status ("needsAction", "declined", "tentative", "accepted").
                - comment (Optional[str]): The attendee's comment.
                - additionalGuests (Optional[int]): Number of additional guests.
            - location (Optional[str]): The new location of the event.
            - recurrence (Optional[List[str]]): The new recurrence rules of the event.
            - reminders (Optional[Dict[str, Any]]): The new reminders of the event.
                - useDefault (Optional[bool]): Whether to use default calendar reminders.
                - overrides (Optional[List[Dict[str, Any]]]): Custom reminder overrides.
                    Each override dict contains:
                    - method (Optional[str]): Reminder method.
                    - minutes (Optional[int]): Minutes before event start.

    Returns:
        Dict[str, Any]: The patched event containing:
            - id (str): The identifier of the event.
            - summary (str): The summary of the event.
            - description (str): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time in ISO 8601 format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time in ISO 8601 format.
            - attendees (Optional[List[Dict[str, Any]]]): List of event attendees containing:
                - email (Optional[str]): The attendee's email address.
                - displayName (Optional[str]): The attendee's name.
                - organizer (Optional[bool]): Whether the attendee is the organizer.
                - self (Optional[bool]): Whether this represents the calendar owner.
                - resource (Optional[bool]): Whether the attendee is a resource.
                - optional (Optional[bool]): Whether this is an optional attendee.
                - responseStatus (Optional[str]): Response status.
                - comment (Optional[str]): The attendee's comment.
                - additionalGuests (Optional[int]): Number of additional guests.
            - location (Optional[str]): The location of the event.
            - recurrence (Optional[List[str]]): The recurrence rules of the event.
            - reminders (Optional[Dict[str, Any]]): The reminders of the event containing:
                - useDefault (Optional[bool]): Whether default calendar reminders are used.
                - overrides (Optional[List[Dict[str, Any]]]): Custom reminder overrides.

    Raises:
        TypeError: If calendar_containing_the_event or event_id_for_patching is not a string, or modification_update_policy is not a string (if provided).
        ValueError: If calendar_containing_the_event is empty/whitespace, event_id_for_patching is None/empty/whitespace, or event is not found.
        InvalidInputError: If modification_update_policy has an invalid value (not one of: "all", "externalOnly", "none").
        ValidationError: If 'event_update_fields' does not conform to the EventPatchResourceModel structure.
    """
    from google_calendar.EventsResource import patch_event
    return patch_event(
        calendarId=calendar_containing_the_event,
        eventId=event_id_for_patching,
        resource=event_update_fields,
        sendUpdates=modification_update_policy
    )


def create_event_from_text_prompt(
    quick_add_calendar_id,
    should_alert_on_quick_add=False,
    quick_add_update_channel=None,
    natural_language_event_description=None
):
    """
    Creates an event based on a simple text string.

    Args:
        quick_add_calendar_id (str): The identifier of the calendar.
        should_alert_on_quick_add (bool, optional): Whether to send notifications about the creation.
            Defaults to False.
        quick_add_update_channel (str, optional): Whether to send updates about the creation.
            Possible values: "all", "externalOnly", "none". Defaults to None.
        natural_language_event_description (str): The text to parse into an event. This should be a natural language
            description of the event, such as "Lunch with John at noon tomorrow".

    Returns:
        Dict[str, Any]: The created event.
            - id (str): The identifier of the event.
            - summary (str): The summary of the event. The text provided in the 'text' parameter.
            - description (str): The description of the event.
            - start (Dict[str, Any]): The start time of the event.
                - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
            - end (Dict[str, Any]): The end time of the event.
                - dateTime (str): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.

    Raises:
        TypeError: If any argument has an invalid type:
            - quick_add_calendar_id is not str
            - should_alert_on_quick_add is not bool
            - quick_add_update_channel is not str (if provided)
            - natural_language_event_description is not str
        InvalidInputError: If any argument has an invalid value:
            - quick_add_calendar_id is empty/whitespace
            - natural_language_event_description is empty/whitespace
            - quick_add_update_channel has invalid value (not one of: "all", "externalOnly", "none")
    """
    from google_calendar.EventsResource import quick_add_event
    return quick_add_event(
        calendarId=quick_add_calendar_id,
        sendNotifications=should_alert_on_quick_add,
        sendUpdates=quick_add_update_channel,
        text=natural_language_event_description
    )


def replace_existing_event(
    event_id_to_be_updated,
    calendar_location_id=None,
    complete_event_data_for_update=None,
    replacement_update_notification_mode=None
):
    """
    Replaces an existing event with new data.

    Args:
        event_id_to_be_updated (str): The identifier of the event to update.
        calendar_location_id (Optional[str]): The identifier of the calendar.
        complete_event_data_for_update (Optional[Dict[str, Any]]): The event to update. Must contain:
        replacement_update_notification_mode (str, optional): Whether to send updates about the update.
            Possible values: "all", "externalOnly", "none". Defaults to None.
            Note: sendUpdates functionality is not implemented yet.
            - summary (str): The summary/title of the event.
            - id (Optional[str]): The identifier of the event.
            - description (Optional[str]): The description of the event.
            - start (Optional[Dict[str, Any]]): The start time of the event.
                - dateTime (Optional[str]): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
                - timeZone (Optional[str]): The time zone of the start time.
            - end (Optional[Dict[str, Any]]): The end time of the event.
                - dateTime (Optional[str]): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.
                - timeZone (Optional[str]): The time zone of the end time.
            - recurrence (Optional[List[str]]): The recurrence rules of the event in RRULE format.
                Examples:
                - Daily for 5 occurrences: ["RRULE:FREQ=DAILY;COUNT=5"]
                - Weekly on Monday and Wednesday: ["RRULE:FREQ=WEEKLY;BYDAY=MO,WE"]
                - Monthly on the 15th: ["RRULE:FREQ=MONTHLY;BYMONTHDAY=15"]
                - Yearly on January 1st: ["RRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1"]
                - Every 2 weeks: ["RRULE:FREQ=WEEKLY;INTERVAL=2"]
                - Until a specific date: ["RRULE:FREQ=DAILY;UNTIL=20241231T235959Z"]

                Supported RRULE parameters:
                - FREQ: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY (required)
                - INTERVAL: Positive integer (default: 1)
                - COUNT: Positive integer (number of occurrences)
                - UNTIL: YYYYMMDDTHHMMSSZ or YYYYMMDDTHHMMSS format
                - BYDAY: SU,MO,TU,WE,TH,FR,SA (with optional ordinal: 1SU, -1MO)
                - BYMONTH: 1-12
                - BYMONTHDAY: 1-31
                - BYYEARDAY: 1-366
                - BYWEEKNO: 1-53
                - BYHOUR: 0-23
                - BYMINUTE: 0-59
                - BYSECOND: 0-59
                - BYSETPOS: 1-366 or -366 to -1
                - WKST: SU,MO,TU,WE,TH,FR,SA (week start)

            - attendees (Optional[List[Dict[str, Any]]]): List of event attendees. Each attendee can have:
                - email (Optional[str]): The attendee's email address
                - displayName (Optional[str]): The attendee's display name
                - organizer (Optional[bool]): Whether the attendee is the organizer
                - self (Optional[bool]): Whether the attendee is the user
                - resource (Optional[bool]): Whether the attendee is a resource
                - optional (Optional[bool]): Whether the attendee's presence is optional
                - responseStatus (Optional[str]): The attendee's response status
                - comment (Optional[str]): The attendee's comment
                - additionalGuests (Optional[int]): Number of additional guests
            - reminders (Optional[Dict[str, Any]]): The reminders of the event.
                - useDefault (Optional[bool]): Whether to use the default reminders.
                - overrides (Optional[List[Dict[str, Any]]]): The list of overrides.
                    - method (Optional[str]): The method of the reminder.
                    - minutes (Optional[int]): The minutes of the reminder.
            - location (Optional[str]): The location of the event.

    Returns:
        Dict[str, Any]: The updated event.
            - id (str): The identifier of the event.
            - summary (str): The summary of the event.
            - description (Optional[str]): The description of the event.
            - start (Optional[Dict[str, Any]]): The start time of the event.
                - dateTime (Optional[str]): The date and time of the start time.
                - timeZone (Optional[str]): The time zone of the start time.
            - end (Optional[Dict[str, Any]]): The end time of the event.
                - dateTime (Optional[str]): The date and time of the end time.
                - timeZone (Optional[str]): The time zone of the end time.
            - attendees (Optional[List[Dict[str, Any]]]): List of event attendees with their details.
            - recurrence (Optional[List[str]]): The recurrence rules of the event in RRULE format.
            - reminders (Optional[Dict[str, Any]]): The reminders of the event.
            - location (Optional[str]): The location of the event.

    Raises:
        TypeError: If calendar_location_id or event_id_to_be_updated is provided and not a string, or replacement_update_notification_mode is not a string (if provided).
        InvalidInputError: If event_id_to_be_updated is None, calendar_location_id is empty/whitespace, event_id_to_be_updated is empty/whitespace,
            complete_event_data_for_update is not provided, complete_event_data_for_update data does not match the expected structure,
            or replacement_update_notification_mode has an invalid value (not one of: "all", "externalOnly", "none").
            This includes validation errors for recurrence rules.
        ResourceNotFoundError: If the event is not found in the calendar.

    Examples:
        # Update an event to be recurring
        event = update_event("event123", "primary", {
            "summary": "Updated Team Meeting",
            "start": {"dateTime": "2024-01-15T10:00:00Z"},
            "end": {"dateTime": "2024-01-15T11:00:00Z"},
            "recurrence": ["RRULE:FREQ=WEEKLY;BYDAY=MO"]
        })

        # Update a recurring event to change its pattern
        event = update_event("event456", "primary", {
            "summary": "Bi-weekly Review",
            "recurrence": ["RRULE:FREQ=WEEKLY;INTERVAL=2;BYDAY=FR"]
        })
    """
    from google_calendar.EventsResource import update_event
    return update_event(
        eventId=event_id_to_be_updated,
        calendarId=calendar_location_id,
        resource=complete_event_data_for_update,
        sendUpdates=replacement_update_notification_mode
    )


def monitor_event_modifications(
    always_include_creator_email=False,
    calendar_id_to_monitor=None,
    event_categories_to_watch=None,
    ical_identifier_filter=None,
    watch_attendee_limit=None,
    watch_max_results=250,
    watch_result_sort_key=None,
    watch_results_page_token=None,
    private_metadata_filter=None,
    watch_search_text=None,
    shared_metadata_filter=None,
    include_deleted_in_watch=False,
    reveal_hidden_invitations_in_watch=False,
    expand_recurring_events_in_watch=False,
    watch_synchronization_token=None,
    watch_end_time_filter=None,
    watch_start_time_filter=None,
    watch_response_timezone=None,
    min_last_modified_filter=None,
    watch_notification_channel_config=None
):
    """
    Sets up a watch for changes to events in the specified calendar.

    Args:
        always_include_creator_email (Optional[bool]): Whether to always include the email address
            of the event creator. Defaults to False.
        calendar_id_to_monitor (Optional[str]): The identifier of the calendar. If not provided,
            defaults to the user's primary calendar.
        event_categories_to_watch (Optional[List[str]]): The types of events to watch for.
            Must be one or more of: "default", "focusTime", "outOfOffice".
        ical_identifier_filter (Optional[str]): The iCalUID of the event to filter by.
        watch_attendee_limit (Optional[int]): The maximum number of attendees to return per event.
            Must be a positive integer if provided.
        watch_max_results (Optional[int]): The maximum number of events to return.
            Must be a positive integer. Defaults to 250.
        watch_result_sort_key (Optional[str]): The order of the events.
            Must be one of: "startTime", "updated".
        watch_results_page_token (Optional[str]): Token specifying which result page to return.
        private_metadata_filter (Optional[List[str]]): Private extended property filters
            in the form "key=value".
        watch_search_text (Optional[str]): Free text search terms to find events that match.
        shared_metadata_filter (Optional[List[str]]): Shared extended property filters
            in the form "key=value".
        include_deleted_in_watch (Optional[bool]): Whether to include deleted events.
            Defaults to False.
        reveal_hidden_invitations_in_watch (Optional[bool]): Whether to include hidden invitations.
            Defaults to False.
        expand_recurring_events_in_watch (Optional[bool]): Whether to expand recurring events into instances.
            Defaults to False.
        watch_synchronization_token (Optional[str]): Token obtained from the nextSyncToken field returned on the
            last page of results from the previous list request.
        watch_end_time_filter (Optional[str]): Upper bound (exclusive) for an event's start time in
            ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
        watch_start_time_filter (Optional[str]): Lower bound (inclusive) for an event's end time in
            ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
        watch_response_timezone (Optional[str]): Time zone used in the response (e.g. "America/New_York").
            The default is the calendar's time zone.
        min_last_modified_filter (Optional[str]): Lower bound for an event's last modification time in
            ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ).
        watch_notification_channel_config (Optional[Dict[str, Any]]): The watch configuration:
            - id (Optional[str]): The identifier of the watch. If not provided,
                a new UUID will be generated.
            - type (Optional[str]): The type of the watch. Defaults to "web_hook".
            - address (Optional[str]): The address to send notifications to.

    Returns:
        Dict[str, Any]: The created watch channel:
            - id (str): The identifier of the watch channel.
            - type (str): The type of the watch.
            - calendarId (str): The identifier of the watched calendar.
            - resource (str): The resource being watched.

    Raises:
        TypeError: If any argument has an invalid type:
            - Boolean parameters are not bool
            - String parameters are not str
            - List parameters are not list
            - Integer parameters are not int
            - watch_notification_channel_config is not a dict
        InvalidInputError: If any argument has an invalid value:
            - watch_max_results or watch_attendee_limit is not positive
            - event_categories_to_watch contains invalid event type
            - watch_result_sort_key has invalid value
            - watch_end_time_filter, watch_start_time_filter, or min_last_modified_filter has invalid format
            - watch_response_timezone has invalid format
            - watch_notification_channel_config is missing required 'address' field
            - watch_notification_channel_config has invalid 'type' value
    """
    from google_calendar.EventsResource import watch_events
    return watch_events(
        alwaysIncludeEmail=always_include_creator_email,
        calendarId=calendar_id_to_monitor,
        eventTypes=event_categories_to_watch,
        iCalUID=ical_identifier_filter,
        maxAttendees=watch_attendee_limit,
        maxResults=watch_max_results,
        orderBy=watch_result_sort_key,
        pageToken=watch_results_page_token,
        privateExtendedProperty=private_metadata_filter,
        q=watch_search_text,
        sharedExtendedProperty=shared_metadata_filter,
        showDeleted=include_deleted_in_watch,
        showHiddenInvitations=reveal_hidden_invitations_in_watch,
        singleEvents=expand_recurring_events_in_watch,
        syncToken=watch_synchronization_token,
        timeMax=watch_end_time_filter,
        timeMin=watch_start_time_filter,
        timeZone=watch_response_timezone,
        updatedMin=min_last_modified_filter,
        resource=watch_notification_channel_config
    )
