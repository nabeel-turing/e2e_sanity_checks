# This file is automatically generated by the MutationBuilder

def enumerate_alias_smime_certs(account_owner_email='me', send_as_alias_email=''):
    """
    Lists the S/MIME info for a specific 'Send as' alias.

    Retrieves all S/MIME certificate configurations associated with the given
    user ID and 'Send as' email address from the database.

    Args:
        account_owner_email (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        send_as_alias_email (str): The email address of the 'Send as' alias.
                       Defaults to ''.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - 'smimeInfo' (List[Dict[str, Any]]): List of S/MIME info resources.
            If the 'Send as' alias is not found or has no S/MIME info, the list
            within the dictionary will be empty. Otherwise, the list will contain
            dictionaries with the S/MIME properties as defined in the database.

    Raises:
        KeyError: If the specified `account_owner_email` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import list
    return list(userId=account_owner_email, send_as_email=send_as_alias_email)


def retrieve_smime_cert_by_id(smime_user_id='me', alias_email_address_for_get='', smime_info_identifier=''):
    """
    Gets the specified S/MIME info for a specific 'Send as' alias.

    Retrieves a specific S/MIME certificate configuration identified by its ID,
    associated with the given user ID and 'Send as' email address.

    Args:
        smime_user_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        alias_email_address_for_get (str): The email address of the 'Send as' alias.
                       Defaults to ''.
        smime_info_identifier (str): The ID of the S/MIME info to retrieve. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the S/MIME info resource if found,
        otherwise None. The dictionary contains:
            - 'id' (str): The ID of the S/MIME info.
            - Other S/MIME properties as defined in the database.

    Raises:
        KeyError: If the specified `smime_user_id` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import get
    return get(
        userId=smime_user_id,
        send_as_email=alias_email_address_for_get,
        smime_id=smime_info_identifier
    )


def add_new_smime_cert_to_alias(
    user_id_for_new_smime='me',
    send_as_email_for_insert='',
    new_smime_info_payload=None
):
    """
    Inserts a new S/MIME info configuration for the specified 'Send as' alias.

    Creates and stores a new S/MIME certificate configuration. Generates a
    unique ID for the new S/MIME info.

    Args:
        user_id_for_new_smime (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        send_as_email_for_insert (str): The email address of the 'Send as' alias to associate
                       the S/MIME info with. Defaults to ''.
        new_smime_info_payload (Optional[Dict[str, Any]]): An optional dictionary containing the S/MIME properties with keys:
                - 'encryptedKey' (str): The encrypted key for the S/MIME certificate.
                - Other optional S/MIME properties.
                Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary representing the newly inserted S/MIME info resource with keys:
            - 'id' (str): The ID of the S/MIME info.
            - 'encryptedKey' (str): The encrypted key for the S/MIME certificate.
            - Other S/MIME properties as defined in the database.

    Raises:
        KeyError: If the specified `user_id_for_new_smime` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import insert
    return insert(
        userId=user_id_for_new_smime,
        send_as_email=send_as_email_for_insert,
        smime=new_smime_info_payload
    )


def modify_smime_cert_for_alias(
    user_account_id_for_smime='me',
    associated_send_as_email='',
    target_smime_info_id='',
    smime_update_payload=None
):
    """
    Updates the specified S/MIME info.

    Modifies an existing S/MIME certificate configuration identified by its ID.
    This performs a full update, replacing existing properties.

    Args:
        user_account_id_for_smime (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        associated_send_as_email (str): The email address of the 'Send as' alias associated
                       with the S/MIME info. Defaults to ''.
        target_smime_info_id (str): The ID of the S/MIME info to update. Defaults to ''.
        smime_update_payload (Optional[Dict[str, Any]]): An optional dictionary containing the updated S/MIME properties with keys:
                - 'encryptedKey' (str): The encrypted key for the S/MIME certificate.
                - Other optional S/MIME properties.
                Defaults to None.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the updated S/MIME info resource if found and
        updated, otherwise None. The dictionary contains:
            - 'id' (str): The ID of the S/MIME info.
            - Other S/MIME properties as defined in the database.

    Raises:
        KeyError: If the specified `user_account_id_for_smime` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import update
    return update(
        userId=user_account_id_for_smime,
        send_as_email=associated_send_as_email,
        id=target_smime_info_id,
        smime=smime_update_payload
    )


def partially_update_smime_cert(
    user_to_patch_smime_for='me',
    send_as_email_to_patch='',
    smime_identifier_to_patch='',
    smime_patch_payload=None
):
    """
    Updates the specified S/MIME info. Alias for update.

    This function is an alias for the `update` function. It modifies an
    existing S/MIME certificate configuration. Note: Implemented as a full update.

    Args:
        user_to_patch_smime_for (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        send_as_email_to_patch (str): The email address of the 'Send as' alias. Defaults to ''.
        smime_identifier_to_patch (str): The ID of the S/MIME info to update/patch. Defaults to ''.
        smime_patch_payload (Optional[Dict[str, Any]]): An optional dictionary containing the properties to update with keys:
                - 'encryptedKey' (str): The encrypted key for the S/MIME certificate.
                - Other optional S/MIME properties.
                Defaults to None.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the updated S/MIME info resource if found and
        updated, otherwise None. The dictionary contains:
            - 'id' (str): The ID of the S/MIME info.
            - Other S/MIME properties as defined in the database.

    Raises:
        KeyError: If the specified `user_to_patch_smime_for` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import patch
    return patch(
        userId=user_to_patch_smime_for,
        send_as_email=send_as_email_to_patch,
        id=smime_identifier_to_patch,
        smime=smime_patch_payload
    )


def remove_smime_cert_from_alias(
    smime_owning_user_id='me',
    alias_email_smime_owner='',
    smime_config_id_to_remove=''
):
    """
    Deletes the specified S/MIME certificate configuration.

    Removes the S/MIME info identified by its ID from the specified
    'Send as' alias configuration.

    Args:
        smime_owning_user_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        alias_email_smime_owner (str): The email address of the 'Send as' alias from which
                       to delete the S/MIME info. Defaults to ''.
        smime_config_id_to_remove (str): The ID of the S/MIME info to delete. Defaults to ''.

    Returns:
        None.

    Raises:
        KeyError: If the specified `smime_owning_user_id` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import delete
    return delete(
        userId=smime_owning_user_id,
        send_as_email=alias_email_smime_owner,
        id=smime_config_id_to_remove
    )


def make_smime_cert_default_for_alias(
    user_id_for_default_smime='me',
    target_alias_for_default='',
    default_smime_info_id=''
):
    """
    Sets the specified S/MIME certificate as the default for the alias.

    Marks the S/MIME info identified by `id` as the default configuration
    for the given 'Send as' alias, removing the default status from any other
    S/MIME configurations for that alias.

    Args:
        user_id_for_default_smime (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        target_alias_for_default (str): The email address of the 'Send as' alias. Defaults to ''.
        default_smime_info_id (str): The ID of the S/MIME info to set as default. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the S/MIME info resource that was set as
        default, if found. Returns None if the 'Send as' alias or the
        specific S/MIME info ID is not found. The dictionary contains:
            - 'id' (str): The ID of the S/MIME info.
            - Other S/MIME properties as defined in the database.

    Raises:
        KeyError: If the specified `user_id_for_default_smime` does not exist in the database.
    """
    from gmail.Users.Settings.SendAs.SmimeInfo import setDefault
    return setDefault(
        userId=user_id_for_default_smime,
        send_as_email=target_alias_for_default,
        id=default_smime_info_id
    )
