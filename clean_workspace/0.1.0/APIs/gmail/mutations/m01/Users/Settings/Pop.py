# This file is automatically generated by the MutationBuilder

def fetch_pop_configuration(user_id_for_pop_settings='me'):
    """
    Gets the POP settings for the specified user.

    Retrieves the current POP (Post Office Protocol) configuration associated
    with the user's account from the database.

    Args:
        user_id_for_pop_settings (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.

    Returns:
        Dict[str, Any]: A dictionary containing the user's POP settings with keys:
            - 'accessWindow' (str): The time window for POP access (e.g., 'allMail').
            - 'disposition' (str): How to handle messages after POP access (e.g., 'leaveInInbox').
            - Other POP settings as defined in the database.

    Raises:
        KeyError: If the specified `user_id_for_pop_settings` or their settings structure does not
                  exist in the database.
    """
    from gmail.Users.Settings.Pop import getPop
    return getPop(userId=user_id_for_pop_settings)


def modify_pop_configuration(user_account_for_pop_update='me', pop_settings_payload=None):
    """
    Updates the POP settings for the specified user.

    Modifies the POP configuration for the user's account based on the provided
    `pop_settings`. Only the fields present in the input dictionary are updated.

    Args:
        user_account_for_pop_update (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        pop_settings_payload (Dict[str, Any]): An optional dictionary containing the POP settings to update with keys:
                      - 'accessWindow' (str): The range of messages accessible via POP.
                                            Valid values: 'accessWindowUnspecified', 'disabled', 'fromNowOn', 'allMail'
                      - 'disposition' (str): How to handle messages after POP access.
                                           Valid values: 'dispositionUnspecified', 'leaveInInbox', 'archive', 'trash', 'markRead'
                      Defaults to None, resulting in no changes.

    Returns:
        Dict[str, Any]: A dictionary containing the complete, updated POP settings for the user with keys:
            - 'accessWindow' (str): The range of messages accessible via POP.
                                  Valid values: 'accessWindowUnspecified', 'disabled', 'fromNowOn', 'allMail'
            - 'disposition' (str): How to handle messages after POP access.
                                 Valid values: 'dispositionUnspecified', 'leaveInInbox', 'archive', 'trash', 'markRead'

    Raises:
        TypeError: If `user_account_for_pop_update` is not a string or `pop_settings_payload` is not a dictionary or None.
        ValueError: If `user_account_for_pop_update` is empty, contains only whitespace, or the user does not exist
                   (raised by _ensure_user function).
    """
    from gmail.Users.Settings.Pop import updatePop
    return updatePop(userId=user_account_for_pop_update, pop_settings=pop_settings_payload)
