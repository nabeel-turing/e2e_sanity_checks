# This file is automatically generated by the MutationBuilder

def fetch_imap_configuration(user_id_for_imap_settings='me'):
    """
    Gets the IMAP settings for the specified user.

    Retrieves the current IMAP configuration associated with the user's account
    from the database.

    Args:
        user_id_for_imap_settings (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.

    Returns:
        Dict[str, Any]: A dictionary containing the user's IMAP settings with keys:
            - 'enabled' (bool): Whether IMAP access is enabled for the account.
            - 'autoExpunge' (bool): If this value is true, Gmail will immediately expunge 
              a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait 
              for an update from the client before expunging messages marked as deleted.
            - 'expungeBehavior' (str): The action that will be executed on a message when 
              it is marked as deleted and expunged from the last visible IMAP folder. 
              Valid values: 'archive', 'trash', 'deleteForever'.

    Raises:
        TypeError: If `user_id_for_imap_settings` is not a string.
        ValueError: If `user_id_for_imap_settings` is an empty string or contains only whitespace, 
                   or if the specified `user_id_for_imap_settings` does not exist in the database.
    """
    from gmail.Users.Settings.Imap import getImap
    return getImap(userId=user_id_for_imap_settings)


def modify_imap_configuration(user_account_for_imap_update='me', imap_settings_payload=None):
    """
    Updates the IMAP settings for the specified user.

    Modifies the IMAP configuration for the user's account based on the provided
    `imap_settings`. Only the fields present in the input dictionary are updated.

    Args:
        user_account_for_imap_update (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        imap_settings_payload (Optional[Dict[str, Any]]): An optional dictionary containing the IMAP settings to update with keys:
                      - 'enabled' (bool): Whether to enable IMAP access.
                      - 'autoExpunge' (bool): Whether to automatically expunge messages.
                      - 'expungeBehavior' (str): How to handle expunged messages.
                      Defaults to None, resulting in no changes.

    Returns:
        Dict[str, Any]: A dictionary containing the complete, updated IMAP settings for the user with keys:
            - 'enabled' (bool): Whether IMAP access is enabled.
            - 'autoExpunge' (bool): Whether to automatically expunge messages.
            - 'expungeBehavior' (str): How to handle expunged messages.

    Raises:
        TypeError: If user_account_for_imap_update is not a string or imap_settings_payload is not a dictionary.
        ValueError: If user_account_for_imap_update is empty or contains only whitespace, or if the specified 
                   user_account_for_imap_update does not exist in the database.
        ValidationError: If imap_settings_payload contains invalid field types or values.
    """
    from gmail.Users.Settings.Imap import updateImap
    return updateImap(userId=user_account_for_imap_update, imap_settings=imap_settings_payload)
