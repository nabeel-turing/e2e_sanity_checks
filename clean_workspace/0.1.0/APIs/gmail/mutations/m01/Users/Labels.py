# This file is automatically generated by the MutationBuilder

def add_new_label(account_owner_id='me', label_definition_data=None):
    """
    Creates a new label.

    Generates a unique ID for the new label and adds it to the user's list
    of labels in the database. The label properties are taken from the `label`
    argument. If no properties are provided, default values are used.

    Args:
        account_owner_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        label_definition_data (Optional[Dict[str, Any]]): An optional dictionary containing the properties for the new label with keys:
            - 'name' (str): The display name of the label in uppercase.
            - 'messageListVisibility' (str): The visibility of messages with this label in the message list.
                Must be one of: 'show', 'hide'. Defaults to 'show'.
            - 'labelListVisibility' (str): The visibility of the label in the label list.
                Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'. Defaults to 'labelShow'.
            - 'type' (str): The owner type for the label. Must be 'user' for custom labels.
                Defaults to 'user'. (Note: 'system' is also a valid type internally).
            - 'color' (Dict[str, str]): The color to assign to the label with keys:
                - 'textColor' (str): The text color of the label, represented as hex string.
                - 'backgroundColor' (str): The background color represented as hex string #RRGGBB.
            Defaults to None, using default values.

    Returns:
        Dict[str, Any]: A dictionary representing the created label resource with keys:
            - 'id' (str): The immutable ID of the label.
            - 'name' (str): The display name of the label in uppercase.
            - 'messageListVisibility' (str): The visibility of messages with this label in the message list.
            - 'labelListVisibility' (str): The visibility of the label in the label list.
            - 'type' (str): The owner type for the label.
            - 'messagesTotal' (int): The total number of messages with the label.
            - 'messagesUnread' (int): The number of unread messages with the label.
            - 'threadsTotal' (int): The total number of threads with the label.
            - 'threadsUnread' (int): The number of unread threads with the label.
            - 'color' (Dict[str, str]): The color assigned to the label.

    Raises:
        TypeError: If `account_owner_id` is not a string or label_definition_data is not a dictionary.
        ValidationError: If the `label_definition_data` argument is provided and does not conform to the
                                  LabelInputModel structure (e.g., invalid types for keys,
                                  missing required fields in 'color' sub-dictionary, or invalid
                                  enum values for visibility or type fields).
    """
    from gmail.Users.Labels import create
    return create(userId=account_owner_id, label=label_definition_data)


def remove_user_label(user_identifier_param='me', label_identifier_to_remove=''):
    """
    Immediately and permanently deletes the specified label.

    Removes the label identified by the given ID from the user's list of labels.
    This operation cannot be undone.

    Args:
        user_identifier_param (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        label_identifier_to_remove (str): The ID of the label to delete. Defaults to ''.

    Returns:
        None.

    Raises:
        TypeError: If `user_identifier_param` or `label_identifier_to_remove` is not a string.
        ValidationError: If `user_identifier_param` or `label_identifier_to_remove` are not valid.
    """
    from gmail.Users.Labels import delete
    return delete(userId=user_identifier_param, id=label_identifier_to_remove)


def retrieve_label_details(user_id_for_label_retrieval='me', label_identifier_to_fetch=''):
    """
    Gets the specified label.

    Retrieves the label resource identified by the given ID.

    Args:
        user_id_for_label_retrieval (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        label_identifier_to_fetch (str): The ID of the label to retrieve. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the label resource if found with keys:
            - 'id' (str): The unique identifier of the label.
            - 'name' (str): The display name of the label in uppercase.
            - 'labelListVisibility' (str): The visibility of the label in the label list.
            - 'messageListVisibility' (str): The visibility of the label in the message list.
            - 'type' (str): The owner type for the label.
            - 'messagesTotal' (int): The total number of messages with the label.
            - 'messagesUnread' (int): The number of unread messages with the label.
            - 'threadsTotal' (int): The total number of threads with the label.
            - 'threadsUnread' (int): The number of unread threads with the label.
            - 'color' (Dict[str, str]): The color assigned to the label.
            Returns None if the label is not found.

    Raises:
        TypeError: If `user_id_for_label_retrieval` or `label_identifier_to_fetch` is not a string.
        ValidationError: If `user_id_for_label_retrieval` or `label_identifier_to_fetch` are not valid.
    """
    from gmail.Users.Labels import get
    return get(userId=user_id_for_label_retrieval, id=label_identifier_to_fetch)


def get_all_user_labels(user_id_to_list_labels_for='me'):
    """
    Lists all labels in the user's mailbox.

    Retrieves a list of all label resources associated with the specified user.

    Args:
        user_id_to_list_labels_for (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.

    Returns:
        Dict[str, Any]: A dictionary containing a list of label resources with keys:
            - labels (List[Dict[str, Any]]): List of label dictionaries, each containing:
                - id: The unique identifier of the label.
                - name: The display name of the label in uppercase.
                - messageListVisibility: The visibility of messages with this label in the message list.
                - labelListVisibility: The visibility of the label in the label list.
                - type: The owner type for the label.
                - messagesTotal: The total number of messages with the label.
                - messagesUnread: The number of unread messages with the label.
                - threadsTotal: The total number of threads with the label.
                - threadsUnread: The number of unread threads with the label.
                - color: The color assigned to the label.

    Raises:
        TypeError: If `user_id_to_list_labels_for` is not a string.
        ValidationError: If `user_id_to_list_labels_for` is empty or contains only whitespace or whitespace.
    """
    from gmail.Users.Labels import list
    return list(userId=user_id_to_list_labels_for)


def modify_existing_label(user_email_for_update='me', target_label_id='', label_update_payload=None):
    """
    Updates the specified label.

    Modifies an existing label identified by its ID using the properties
    provided in the label argument. This performs a full update, replacing
    the existing label properties with the new ones.

    Args:
        user_email_for_update (str): The user's email address. The special value 'me'
            can be used to indicate the authenticated user. Defaults to 'me'.
        target_label_id (str): The ID of the label to update. Defaults to ''.
        label_update_payload (Optional[Dict[str, Any]]): An optional dictionary containing the updated properties for the
            label with keys:
            - 'name' (str): The display name of the label. For system labels, will be automatically converted to uppercase.
            - 'labelListVisibility' (str): The visibility of the label in the label list.
                Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'.
            - 'messageListVisibility' (str): The visibility of the label in the message list.
                Must be one of: 'show', 'hide'.
            - 'type' (str): The owner type for the label. Must be 'user' for custom labels.
                System labels cannot have their type changed.
            - 'color' (Optional[Dict[str, str]]): The color to assign to the label with keys:
                - 'textColor' (str): The text color of the label, represented as hex string.
                - 'backgroundColor' (str): The background color represented as hex string #RRGGBB.
            Defaults to None, which will not update any properties.

    Returns:
        Dict[str, Any]: A dictionary representing the updated label resource with keys:
            - 'id' (str): The unique identifier of the label.
            - 'name' (str): The display name of the label in uppercase.
            - 'labelListVisibility' (str): The visibility of the label in the label list.
                Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'.
            - 'messageListVisibility' (str): The visibility of the label in the message list.
                Must be one of: 'show', 'hide'.
            - 'type' (str): The owner type for the label.
            - 'messagesTotal' (int): The total number of messages with the label.
            - 'messagesUnread' (int): The number of unread messages with the label.
            - 'threadsTotal' (int): The total number of threads with the label.
            - 'threadsUnread' (int): The number of unread threads with the label.
            - 'color' (Optional[Dict[str, str]]): The color assigned to the label with keys:
                - 'textColor' (str): The text color of the label, represented as hex string.
                - 'backgroundColor' (str): The background color represented as hex string #RRGGBB.
                Can be None if no color is assigned.

    Raises:
        TypeError: If user_email_for_update, target_label_id are not strings, or if label_update_payload is provided but not a dictionary.
        ValueError: If user_email_for_update is empty or contains whitespace, or if target_label_id is empty or the specified user_email_for_update does not exist in the database
        ValidationError: If the provided label_update_payload dictionary contains invalid values for
            labelListVisibility, messageListVisibility, or has invalid color structure.
        NotFoundError: If the label_update_payload with the specified target_label_id is not found.
    """
    from gmail.Users.Labels import update
    return update(userId=user_email_for_update, id=target_label_id, label=label_update_payload)


def partially_update_label(user_to_patch_label_for='me', label_id_to_patch='', label_patch_payload=None):
    """
    Updates the specified label. Alias for update.

    This function is an alias for the `update` function. It modifies an
    existing label identified by its ID using the properties provided in the
    `label` argument. This performs a full update, replacing the existing
    label properties with the new ones.

    Args:
        user_to_patch_label_for (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        label_id_to_patch (str): The ID of the label to update/patch. Defaults to ''.
        label_patch_payload (Optional[Dict[str, Any]]): An optional dictionary containing the properties to update
               the label. Defaults to None, which results in an empty dictionary.
               Optional fields:
                   - name (str): The display name of the label.
                   - messageListVisibility (str): The visibility of messages with this label 
                     in the message list. Must be one of: 'show', 'hide'.
                   - labelListVisibility (str): The visibility of the label in the label list.
                     Must be one of: 'labelShow', 'labelShowIfUnread', 'labelHide'.
                   - type (str): The owner type for the label. Must be one of: 'user', 'system'.
                   - messagesTotal (int): The total number of messages with the label.
                   - messagesUnread (int): The number of unread messages with the label.
                   - threadsTotal (int): The total number of threads with the label.
                   - threadsUnread (int): The number of unread threads with the label.
                   - color (Dict[str, str]): The color assigned to the label with keys:
                       - textColor (str): The text color of the label, represented as hex string.
                       - backgroundColor (str): The background color represented as hex string #RRGGBB.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the updated label resource with keys:
            - id (str): The unique identifier of the label.
            - name (str): The display name of the label.
            - messageListVisibility (str): The visibility of messages with this label 
              in the message list.
            - labelListVisibility (str): The visibility of the label in the label list.
            - type (str): The owner type for the label.
            - messagesTotal (int): The total number of messages with the label.
            - messagesUnread (int): The number of unread messages with the label.
            - threadsTotal (int): The total number of threads with the label.
            - threadsUnread (int): The number of unread threads with the label.
            - color (Dict[str, str]): The color assigned to the label with keys:
                - textColor (str): The text color of the label, represented as hex string.
                - backgroundColor (str): The background color represented as hex string #RRGGBB.
            Returns None if the label with the specified ID is not found.

    Raises:
        TypeError: If `user_to_patch_label_for` or `label_id_to_patch` is not a string.
        ValueError: If `label_id_to_patch` is an empty string or if the specified `user_to_patch_label_for` does not exist.
        ValidationError: If the `label_patch_payload` argument is provided and does not conform to the
                        LabelInputModel structure (e.g., invalid types for keys,
                        missing required fields in 'color' sub-dictionary, or invalid
                        enum values for visibility or type fields).
    """
    from gmail.Users.Labels import patch
    return patch(userId=user_to_patch_label_for, id=label_id_to_patch, label=label_patch_payload)
