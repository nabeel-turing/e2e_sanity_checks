# This file is automatically generated by the MutationBuilder

def move_thread_to_trash(user_account_id='me', thread_to_trash_id=''):
    """
    Moves the specified thread to the trash.

    This operation marks the thread and all messages within it as trashed.
    It utilizes the `Messages.trash` function for each message in the thread.

    Args:
        user_account_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        thread_to_trash_id (str): The ID of the thread to trash. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the trashed thread resource if found,
        otherwise None. The dictionary contains:
            - 'id' (str): The thread ID
            - 'messageIds' (List[str]): List of message IDs in the thread
            - Other message properties as defined in the database.
        Returns None if the thread with the specified ID does not exist.

    Raises:
        TypeError: If user_account_id or thread_to_trash_id is not a string.
        ValueError: If the specified user_account_id does not exist in the database.
    """
    from gmail.Users.Threads import trash
    return trash(userId=user_account_id, id=thread_to_trash_id)


def restore_thread_from_trash(authenticated_user_id='me', thread_to_untrash_id=''):
    """
    Removes the specified thread from the trash.

    This operation restores the thread and all messages within it from the trash.
    It utilizes the `Messages.untrash` function for each message in the thread.

    Args:
        authenticated_user_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        thread_to_untrash_id (str): The ID of the thread to untrash. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the untrashed thread resource if found,
        otherwise None. The dictionary contains:
            - 'id' (str): The thread ID
            - 'messageIds' (List[str]): List of message IDs in the thread
            - Other message properties as defined in the database.
        Returns None if the thread with the specified ID does not exist.

    Raises:
        TypeError: If authenticated_user_id or thread_to_untrash_id is not a string.
        ValueError: If the specified authenticated_user_id does not exist in the database.
    """
    from gmail.Users.Threads import untrash
    return untrash(userId=authenticated_user_id, id=thread_to_untrash_id)


def permanently_remove_thread(user_email_address='me', thread_id_for_deletion=''):
    """
    Immediately and permanently deletes the specified thread.

    This operation cannot be undone. It removes the thread and all associated
    messages from the user's mailbox permanently.

    Args:
        user_email_address (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        thread_id_for_deletion (str): The ID of the thread to delete. Defaults to ''.

    Returns:
        None: This method does not return any content.

    Raises:
        TypeError: If `user_email_address` or `thread_id_for_deletion` is not a string.
        ValidationError: If `user_email_address` or `thread_id_for_deletion` is empty or contains whitespace.
        KeyError: If the specified `user_email_address` does not exist in the database.
    """
    from gmail.Users.Threads import delete
    return delete(userId=user_email_address, id=thread_id_for_deletion)


def retrieve_thread_details(
    mailbox_owner_id='me',
    target_thread_id='',
    data_retrieval_format='full',
    headers_to_include=None
):
    """
    Gets the specified thread.

    Retrieves the details of a specific thread identified by its ID.

    Args:
        mailbox_owner_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        target_thread_id (str): The ID of the thread to retrieve. Defaults to ''.
        data_retrieval_format (str): The format to return the messages in. Accepted values are:
                - 'full': Returns the full message data including body and all fields
                - 'metadata': Returns message ID, labels, and headers (either specified or default)
                - 'minimal': Returns only message ID and labels
                - 'raw': Returns the full message data (same as 'full' in this implementation)
                Defaults to 'full'.
        headers_to_include (Optional[List[str]]): A list of headers to include when format is set
                          to 'metadata'. If None, includes default headers (Subject, From, To, Date).
                          Case-insensitive matching is used for common headers. Defaults to None.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the thread resource if found, otherwise None.
        The dictionary contains:
            - 'id' (str): The thread ID
            - 'snippet' (str): A short part of the message text (truncated to 100 characters)
            - 'historyId' (str): The ID of the last history record that modified this thread
            - 'messages' (List[Dict]): List of messages in the thread, filtered according to format
            - 'messageIds' (List[str]): List of message IDs in the thread
        Returns None if the thread with the specified ID does not exist.

    Raises:
        TypeError: If `mailbox_owner_id`, `target_thread_id`, or `data_retrieval_format` is not a string.
                   If `headers_to_include` is provided and is not a list.
                   If `headers_to_include` is a list but contains non-string elements.
        InvalidFormatValueError: If `data_retrieval_format` is not one of 'full', 'metadata', 'minimal', 'raw'.
        ValueError: If the specified `mailbox_owner_id` does not exist in the database (propagated from internal logic).
    """
    from gmail.Users.Threads import get
    return get(
        userId=mailbox_owner_id,
        id=target_thread_id,
        format=data_retrieval_format,
        metadata_headers=headers_to_include
    )


def enumerate_user_threads(
    user_id_for_listing='me',
    max_threads_to_return=100,
    thread_list_page_token='',
    search_filter='',
    label_id_filters=None,
    include_spam_trash_threads=False
):
    """
    Lists the threads in the user's mailbox.

    Retrieves a list of threads matching the specified query criteria.
    Note: Query parameters (`q`, `labelIds`, `include_spam_trash`, `page_token`)
    are included for API compatibility but are not fully implemented.
    The filtering based on these parameters is not performed.

    Args:
        user_id_for_listing (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        max_threads_to_return (int): Maximum number of threads to return. Defaults to 100.
                     Actual results might be fewer if less threads exist. The maximum allowed value is 500.
        thread_list_page_token (str): Page token to retrieve a specific page of results.
                    Defaults to ''. (Currently ignored).
        search_filter (str): Only return threads matching the specified query. Supports the same
           query format as the Gmail search box. Defaults to ''. (Currently ignored).
        label_id_filters (Optional[List[str]]): Only return threads with labels that match all of the specified
                  label IDs in uppercase. Defaults to None. (Currently ignored).
        include_spam_trash_threads (bool): Include threads from SPAM and TRASH in the results.
                            Defaults to False. (Currently ignored).

    Returns:
        Dict[str, Any]: A dictionary containing:
            - 'threads' (List[Dict[str, str]]): List of thread resources, each containing:
                - 'id' (str): The thread ID
            - 'nextPageToken' (Optional[str]): Token for retrieving the next page of results.
                Currently always None.
            - 'resultSizeEstimate' (int): Estimated total number of threads matching the query.

    Raises:
        TypeError: If any of the arguments have incorrect types:
            - user_id_for_listing must be a string
            - max_threads_to_return must be an integer
            - thread_list_page_token must be a string
            - search_filter must be a string
            - label_id_filters must be None or a list of strings
            - includeSpamTrash must be a boolean
        ValueError: If max_threads_to_return is greater than 500
        KeyError: If the specified user_id_for_listing does not exist in the database
    """
    from gmail.Users.Threads import list
    return list(
        userId=user_id_for_listing,
        max_results=max_threads_to_return,
        page_token=thread_list_page_token,
        q=search_filter,
        labelIds=label_id_filters,
        include_spam_trash=include_spam_trash_threads
    )


def update_thread_label_assignments(
    target_user_email='me',
    thread_identifier_to_modify='',
    add_these_label_ids=None,
    remove_these_label_ids=None
):
    """
    Modifies the labels applied to the specified thread.

    Adds or removes labels from all messages within the specified thread.
    It utilizes the `Messages.modify` function for each message in the thread.

    Args:
        target_user_email (str): The user's email address. The special value 'me' can be used to indicate the authenticated user.
        thread_identifier_to_modify (str): The ID of the thread to modify.
        add_these_label_ids (Optional[List[str]]): A list of IDs of labels to add to this message. You can add up to 100 labels with each update.
        remove_these_label_ids (Optional[List[str]]): A list of IDs of labels to remove from this message. You can remove up to 100 labels with each update.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the modified thread resource if found,
        otherwise None. The dictionary contains:
            - 'id' (str): The thread ID
            - 'messageIds' (List[str]): List of message IDs in the thread

    Raises:
        TypeError: If any of the arguments have incorrect types:
            - target_user_email must be a string
            - thread_identifier_to_modify must be a string
            - add_these_label_ids must be None or a list of strings
            - remove_these_label_ids must be None or a list of strings
        ValueError: If either add_these_label_ids or remove_these_label_ids contains more than 100 elements
        KeyError: If either:
            - The specified target_user_email does not exist in the database
            - The specified thread thread_identifier_to_modify does not exist for the given user
    """
    from gmail.Users.Threads import modify
    return modify(
        userId=target_user_email,
        id=thread_identifier_to_modify,
        addLabelIds=add_these_label_ids,
        removeLabelIds=remove_these_label_ids
    )
