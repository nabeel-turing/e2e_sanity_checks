# This file is automatically generated by the MutationBuilder

def move_email_to_trash(mailbox_owner_id='me', message_identifier_to_trash=''):
    """
    Moves the specified message to the trash.

    Adds the 'TRASH' label to the message identified by the given ID.
    If the message already has the 'TRASH' label, it remains unchanged.

    Args:
        mailbox_owner_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        message_identifier_to_trash (str): The ID of the message to trash. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the modified message resource if found,
        otherwise None. The dictionary contains:
            - id (str): The ID of the message.
            - threadId (str): The ID of the thread the message belongs to.
            - raw (str): The raw content of the message.
            - sender (str): The email address of the sender.
            - recipient (str): The email address of the recipient.
            - subject (str): The subject of the message.
            - body (str): The body of the message.
            - date (str): The date the message was sent.
            - internalDate (str): The internal date of the message.
            - isRead (bool): Whether the message has been read.
            - attachment (List[Dict[str, str]]): A list of attachments (dictionaries) with key:
                - filename (str): The name of the attachment.
            - labelIds (List[str]): A list of labels applied to the message.

    Raises:
        TypeError: If the specified `mailbox_owner_id` or `message_identifier_to_trash` is not a string.
        ValidationError: If the specified `mailbox_owner_id` or `message_identifier_to_trash` is not a string, or if the specified `mailbox_owner_id` does not exist in the database (propagated from _ensure_user).
    """
    from gmail.Users.Messages import trash
    return trash(userId=mailbox_owner_id, id=message_identifier_to_trash)


def restore_email_from_trash(user_id_for_restore='me', message_id_to_untrash=''):
    """
    Removes the specified message from the trash.

    Removes the 'TRASH' label (uppercase) from the message.
    If the message does not have 'TRASH', it remains unchanged.

    Args:
        user_id_for_restore (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        message_id_to_untrash (str): The ID of the message to untrash. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the modified message resource if found,
        otherwise None. The dictionary typically contains:
            - id (str): The ID of the message.
            - threadId (str): The ID of the thread the message belongs to.
            - raw (str): The raw content of the message.
            - sender (str): The email address of the sender.
            - recipient (str): The email address of the recipient.
            - subject (str): The subject of the message.
            - body (str): The body of the message.
            - date (str): The date the message was sent.
            - internalDate (str): The internal date of the message.
            - isRead (bool): Whether the message has been read.
            - attachment (List[Dict[str, str]]): A list of attachments (dictionaries) with key:
                - filename (str): The name of the attachment.
            - labelIds (List[str]): A list of labels applied to the message.

    Raises:
        TypeError: If `user_id_for_restore` or `message_id_to_untrash` is not a string.
        ValidationError: If the specified `user_id_for_restore` or `message_id_to_untrash` is not a string, or if the specified `user_id_for_restore` does not exist in the database (propagated from _ensure_user).
    """
    from gmail.Users.Messages import untrash
    return untrash(userId=user_id_for_restore, id=message_id_to_untrash)


def permanently_erase_email(account_id_for_deletion='me', email_id_to_erase=''):
    """
    Immediately and permanently deletes the specified message.

    Removes the message identified by the given ID from the user's mailbox.
    This operation cannot be undone. Also cleans up any attachments that
    are no longer referenced after the message deletion.

    Args:
        account_id_for_deletion (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        email_id_to_erase (str): The ID of the message to delete. Defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: The dictionary representing the deleted message resource if it existed,
        otherwise None. The dictionary contains:
            - id (str): The ID of the message.
            - threadId (str): The ID of the thread the message belongs to.
            - raw (str): The raw content of the message.
            - sender (str): The email address of the sender.
            - recipient (str): The email address of the recipient.
            - subject (str): The subject of the message.
            - body (str): The body of the message.
            - date (str): The date the message was sent.
            - internalDate (str): The internal date of the message.
            - isRead (bool): Whether the message has been read.
            - attachment (List[Dict[str, str]]): A list of attachments (dictionaries) with key:
                - filename (str): The name of the attachment.
            - labelIds (List[str]): A list of labels applied to the message.

    Raises:
        TypeError: If `account_id_for_deletion` or `email_id_to_erase` is not a string.
        ValidationError: If the specified `account_id_for_deletion` or `email_id_to_erase` is not a string, or if the specified `account_id_for_deletion` does not exist in the database (propagated from _ensure_user).
    """
    from gmail.Users.Messages import delete
    return delete(userId=account_id_for_deletion, id=email_id_to_erase)


def bulk_erase_emails(user_account_for_batch_delete='me', message_id_list=None):
    """
    Deletes many messages simultaneously.

    Permanently deletes all messages identified by the IDs in the provided list.
    Also cleans up any attachments that are no longer referenced after the
    message deletions.

    Args:
        user_account_for_batch_delete (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        message_id_list (Optional[List[str]]): A list of message IDs to delete. Defaults to None.

    Returns:
        None.

    Raises:
        TypeError: If `user_account_for_batch_delete` is not a string or `id` is not a list of strings.
        ValidationError: If `user_account_for_batch_delete` or any id in the `message_id_list` list is empty or contains whitespace.
    """
    from gmail.Users.Messages import batchDelete
    return batchDelete(userId=user_account_for_batch_delete, ids=message_id_list)


def ingest_raw_email(
    destination_user_id='me',
    email_data_payload=None,
    timestamp_origin='dateHeader',
    bypass_spam_filter=False,
    scan_for_calendar_events=False,
    mark_as_trashed_on_import=False
):
    """
    Imports a message into the mailbox, applying specified labels.

    Creates a new message entry in the database with a generated ID.
    Primarily uses the `raw` content if provided in `msg`. Adds the 'DELETED'
    label if the `deleted` flag is True.
    Note: `internal_date_source`, `never_mark_spam`, and `process_for_calendar`
    are included for API compatibility but are ignored in this implementation.

    Args:
        destination_user_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        email_data_payload (Optional[Dict[str, Any]]): An optional dictionary containing the message data with keys:
            - 'raw' (str): Raw message content.
            - Other optional message properties.
        timestamp_origin (str): Specifies how to determine the internal date.
                              Defaults to 'dateHeader'. (Currently ignored).
        bypass_spam_filter (bool): Whether to prevent the message from being marked as spam.
                         Defaults to False. (Currently ignored).
        scan_for_calendar_events (bool): Whether to process calendar invitations.
                              Defaults to False. (Currently ignored).
        mark_as_trashed_on_import (bool): Mark the imported message as deleted. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary representing the newly imported message resource with keys:
            - 'id' (str): Generated message ID.
            - 'raw' (str): Raw message content.
            - 'labelIds' (List[str]): List of labels applied to the message in uppercase. 
            - 'internalDate' (str): Internal date of the message.

    Raises:
        KeyError: If the specified `destination_user_id` does not exist in the database.
    """
    from gmail.Users.Messages import import_
    return import_(
        userId=destination_user_id,
        msg=email_data_payload,
        internal_date_source=timestamp_origin,
        never_mark_spam=bypass_spam_filter,
        process_for_calendar=scan_for_calendar_events,
        deleted=mark_as_trashed_on_import
    )


def inject_composed_email(
    target_mailbox_id='me',
    message_content_dict=None,
    date_creation_method='receivedTime',
    is_pre_trashed=False
):
    """
    Directly inserts a message into the mailbox.

    Similar to `import_`, but typically used for messages composed by the user
    (e.g., drafts). Creates a new message with generated ID and thread ID.
    Populates fields based on the `msg` dictionary. Adds 'INBOX' and 'UNREAD'
    labels by default, and 'DELETED' if the flag is set.

    Attachment size limits are enforced: individual attachments cannot exceed 25MB,
    and the total message size (including all attachments) cannot exceed 100MB.

    Args:
        target_mailbox_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        message_content_dict (Optional[Dict[str, Any]]): An optional dictionary containing the message data with keys:
            - 'threadId' (str): Thread ID for the message.
            - 'raw' (str): Raw message content.
            - 'sender' (str): Sender email address.
            - 'recipient' (str): Recipient email address.
            - 'subject' (str): Message subject.
            - 'body' (str): Message body.
            - 'date' (str): Message date.
            - 'internalDate' (str): Internal date of the message.
            - 'isRead' (bool): Whether the message has been read.
            - 'labelIds' (List[str]): List of labels to apply to the message in uppercase.
        date_creation_method (str): Determines how the message's `internalDate` is set if `internalDate` is not provided or is None in the `msg` payload.
                                 If `msg` contains a non-None `internalDate` field, that value is used directly (expected as a string Unix timestamp). Otherwise, this parameter applies:
                                 - 'receivedTime' (default): `internalDate` is set to the Unix timestamp of when the message is processed.
                                 - 'dateHeader': `internalDate` is derived from the `msg['date']` field. If `msg['date']` is missing or invalid, it defaults to the processing time.
                                 Defaults to 'receivedTime'.
        is_pre_trashed (bool): Mark the inserted message as deleted. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary representing the newly inserted message resource with keys:
            - 'id' (str): Generated message ID.
            - 'threadId' (str): Thread ID for the message.
            - 'raw' (str): Raw message content.
            - 'sender' (str): Sender email address.
            - 'recipient' (str): Recipient email address.
            - 'subject' (str): Message subject.
            - 'body' (str): Message body.
            - 'date' (str): Message date.
            - 'internalDate' (str): The internal date of the message as a Unix timestamp in seconds (string format). This is taken from `msg['internalDate']` if provided and non-None; otherwise, it's determined based on `internal_date_source`.
            - 'isRead' (bool): Whether the message has been read.
            - 'labelIds' (List[str]): List of labels applied to the message in uppercase.
            - 'payload' (Dict[str, Any]): Message payload containing:
                - 'headers' (List[Dict[str, str]]): List of header dictionaries, each containing:
                    - 'name' (str): Header name ('From', 'To', 'Subject', or 'Date')
                    - 'value' (str): Header value
                - 'body' (Dict[str, str]): Message body containing:
                    - 'data' (str): The content of the message body.

    Raises:
        TypeError: If `target_mailbox_id` or `date_creation_method` is not a string,
                   if `is_pre_trashed` is not a boolean, or if `message_content_dict` is provided but is not a dictionary.
        ValueError: If `date_creation_method` is not 'receivedTime' or 'dateHeader'.
                   If any attachment exceeds 25MB or total message size exceeds 100MB.
        pydantic.ValidationError: If `message_content_dict` is provided and does not conform to the MessagePayloadModel structure (e.g., incorrect types for fields like 'isRead', 'labelIds').
        KeyError: If the specified `target_mailbox_id` does not exist in the database (propagated from `_ensure_user`).
    """
    from gmail.Users.Messages import insert
    return insert(
        userId=target_mailbox_id,
        msg=message_content_dict,
        internal_date_source=date_creation_method,
        deleted=is_pre_trashed
    )


def fetch_email_by_id(
    user_id_for_fetch='me',
    target_message_id='',
    retrieval_format_option='full',
    specific_headers_to_include=None
):
    """
    Gets the specified message.

    Retrieves the message resource identified by the given ID. The response format
    can be customized using the format parameter.

    Args:
        user_id_for_fetch (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        target_message_id (str): The ID of the message to retrieve. Defaults to ''.
        retrieval_format_option (str): The format to return the message in. Must be one of:
                - 'minimal': Returns only email message ID and labels
                - 'full': Returns the full email message data with body content
                - 'raw': Returns the full email message data with raw field (RFC 2822 compliant and may include attachments (e.g., as multipart MIME))
                - 'metadata': Returns only email message ID, labels, and email headers
                Defaults to 'full'.
        specific_headers_to_include (Optional[List[str]]): List of headers to include when format='metadata'.
                          All elements in the list must be strings. Defaults to None.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the message resource if found, otherwise None.
        The dictionary structure varies based on the format parameter:

        For 'minimal' format:
            - 'id' (str): Message ID
            - 'labelIds' (List[str]): List of labels applied to the message in uppercase

        For 'metadata' format:
            - 'id' (str): Message ID
            - 'labelIds' (List[str]): List of labels applied to the message in uppercase
            - 'headers' (List[Dict[str, str]]): List of header dictionaries, each containing:
                - 'name' (str): Header name ('From', 'To', 'Subject', or 'Date')
                - 'value' (str): Header value

        For 'raw' format:
            - 'id' (str): Message ID
            - 'threadId' (str): Thread ID for the message
            - 'labelIds' (List[str]): List of labels applied to the message in uppercase
            - 'raw' (str): The entire message represented as a base64url-encoded string 
                          (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments
                          (e.g., as multipart MIME). 
            - 'internalDate' (str): Internal date of the message

        For 'full' format (default):
            - 'id' (str): Message ID
            - 'threadId' (str): Thread ID for the message
            - 'labelIds' (List[str]): List of labels applied to the message in uppercase
            - 'snippet' (str): First 100 characters of the message body
            - 'internalDate' (str): Internal date of the message
            - 'payload' (Dict[str, Any]): The parsed message payload containing:
                - 'mimeType' (str): The MIME type of the message.
                - 'headers' (List[Dict[str, str]]): List of message headers with 'name' and 'value'.
                - 'parts' (List[Dict[str, Any]]): List of message parts for multipart messages. Each part is a dictionary with the following structure:
                    - 'mimeType' (str): The MIME type of the part (e.g., 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'image/png').
                    - 'filename' (Optional[str]): The filename of the part if it is an attachment (e.g., 'requirements.docx', 'sample_image.png'). Omitted or empty for inline/plain text parts.
                    - 'body' (Dict[str, Any]): The message body data for the part, with possible keys:
                        - 'data' (Optional[str]): The base64url-encoded content of the part (present for inline/plain text parts).
                        - 'attachmentId' (Optional[str]): The ID of the attachment (present for attachments, e.g., 'att_msg4_001').
                        - 'size' (Optional[int]): The size of the attachment in bytes (present for attachments).
                - 'body' (Dict[str, Any]): The message body data.
                    - 'data' (str): The base64url-encoded content of the message body.
            - 'sizeEstimate' (int): Length of the message body
            - 'raw' (str): Raw message content (included for compatibility)

    Raises:
        ValidationError: If any of the input arguments fail validation:
            - If user_id_for_fetch is not a string
            - If target_message_id is not a string
            - If retrieval_format_option is not one of: 'minimal', 'full', 'raw', 'metadata'
            - If specific_headers_to_include is provided but not a list
            - If specific_headers_to_include contains non-string elements
    """
    from gmail.Users.Messages import get
    return get(
        userId=user_id_for_fetch,
        id=target_message_id,
        format=retrieval_format_option,
        metadata_headers=specific_headers_to_include
    )


def dispatch_email(sending_user_id='me', message_to_send=None):
    """
    Sends the specified message to the specified recipient.

    Processes RFC 2822 MIME messages by parsing the base64url-encoded raw message
    to extract headers and payload structure. Automatically extracts and stores
    any attachments, creating the proper Gmail API payload structure with parts references.

    Attachment size limits are enforced: individual attachments cannot exceed 25MB,
    and the total message size (including all attachments) cannot exceed 100MB.

    Args:
        sending_user_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        message_to_send (Optional[Dict[str, Any]]): An optional dictionary containing the message data with keys:
            - 'raw' (Optional[str]): The entire message represented as a base64url-encoded string 
                          (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments
                          (e.g., as multipart MIME). Individual attachments are limited to 25MB each, with
                          a total message size limit of 100MB. Optional; if not provided, the message will be 
                          constructed from 'sender', 'recipient', 'subject', 'body', etc.
            - 'threadId' (str): Thread ID to assign to the message. If not specified,
                               a new thread will be created. Defaults to auto-generated.
            - 'labelIds' (List[str]): List of label IDs to apply to the message.
                                     The 'SENT' label is automatically applied.
            - 'sender' (str): Sender email address.
            - 'recipient' (str): Recipient email address.
            - 'subject' (str): Message subject line.
            - 'body' (str): Plain text message body.
            - 'date' (str): Message date in RFC 2822 format.
            - 'internalDate' (str): Internal timestamp as milliseconds since epoch.
            - 'isRead' (bool): Whether the message has been read.

    Returns:
        Dict[str, Any]: A dictionary representing the sent message resource with keys:
            - 'id' (str): The immutable ID of the message.
            - 'threadId' (str): The ID of the thread the message belongs to.
            - 'labelIds' (List[str]): List of labels applied to the message. Always includes 'SENT'.
            - 'payload' (Dict[str, Any]): The parsed message payload containing:
                - 'mimeType' (str): The MIME type of the message.
                - 'headers' (List[Dict[str, str]]): List of message headers with 'name' and 'value'.
                - 'parts' (List[Dict[str, Any]]): List of message parts for multipart messages. Each part is a dictionary with the following structure:
                    - 'mimeType' (str): The MIME type of the part (e.g., 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'image/png').
                    - 'filename' (Optional[str]): The filename of the part if it is an attachment (e.g., 'requirements.docx', 'sample_image.png'). Omitted or empty for inline/plain text parts.
                    - 'body' (Dict[str, Any]): The message body data for the part, with possible keys:
                        - 'data' (Optional[str]): The base64url-encoded content of the part (present for inline/plain text parts).
                        - 'attachmentId' (Optional[str]): The ID of the attachment (present for attachments, e.g., 'att_msg4_001').
                        - 'size' (Optional[int]): The size of the attachment in bytes (present for attachments, max 25MB per attachment).
                - 'body' (Dict[str, Any]): The message body data.
                    - 'data' (str): The base64url-encoded content of the message body.
            - 'raw' (str): The original base64url-encoded message.
            - 'internalDate' (str): Internal timestamp as milliseconds since Unix epoch.
            - 'headers' (List[Dict[str, str]]): Message headers for easy access.
            - 'sender' (str): Sender email address.
            - 'recipient' (str): Recipient email address.
            - 'subject' (str): Message subject.
            - 'body' (str): Plain text message body.
            - 'date' (str): Message date.
            - 'isRead' (bool): Whether the message has been read.

    Raises:
        TypeError: If `sending_user_id` is not a string, or if `message_to_send` is provided and is not a dictionary.
        ValueError: If `sending_user_id` is empty, contains whitespace, or is not a valid email address.
                   If the raw MIME message cannot be parsed or is malformed.
                   If any attachment exceeds 25MB or total message size exceeds 100MB.
    """
    from gmail.Users.Messages import send
    return send(userId=sending_user_id, msg=message_to_send)


def search_mailbox_for_emails(
    user_account_to_search='me',
    result_limit=100,
    search_query_string='',
    required_label_ids=None,
    search_spam_and_trash_folders=False
):
    """
    Lists the messages in the user's mailbox.

    Retrieves a list of messages matching the specified query criteria.
    Supports filtering based on whether the message has the `TRASH` or `SPAM` label,
    and using `q` (keywords, from:, to:, label:, subject:, attachment:) and `labelIds`. 

    Args:
        user_account_to_search (str): The user ID. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        result_limit (int): Maximum number of messages to return. Defaults to 100.
        search_query_string (str):
            Query string for filtering messages. Strings with spaces must be enclosed
            in single (') or double (") quotes. Supports space-delimited tokens
            (each one filters the current result set). Supported tokens:
            - `from:<email>`       Exact sender address (case-insensitive)
            - `to:<email>`         Exact recipient address (case-insensitive)
            - `label:<LABEL_ID>`   Uppercase label ID
            - `subject:<text>`     Substring match in the subject (case-insensitive)
            - `<keyword>`          Substring match in subject, body, sender or recipient (case-insensitive)
            - `"<phrase>"`         Exact phrase match in subject or body (case-insensitive)

            Filters are combined by implicit AND; token order does not matter.
            Examples:
                # Messages from bob@example.com with "report" in the subject
                q='from:bob@example.com subject:report'
                # Messages mentioning the exact phrase "urgent fix"
                q='"urgent fix"'
        required_label_ids (Optional[List[str]]): List of label IDs required on messages. Defaults to None.
        search_spam_and_trash_folders (bool): Include messages from SPAM and TRASH.
                           Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - 'messages' (List[Dict[str, Any]]): List of message resources matching the query.
              Each message dictionary contains:
                - 'id' (str): Message ID.
                - 'threadId' (str): Thread ID for the message.
                - 'labelIds' (List[str]): List of labels applied to the message in uppercase.
                - 'sender' (str): Sender email address.
                - 'recipient' (str): Recipient email address.
                - 'subject' (str): Message subject.
                - 'body' (str): Message body.
                - 'date' (str): Message date.
                - 'internalDate' (str): Internal date of the message.
                - 'isRead' (bool): Whether the message has been read.
                - 'raw' (str): The entire message represented as a base64url-encoded string 
                          (RFC 4648 Section 5). The raw string must be RFC 2822 compliant and may include attachments
                          (e.g., as multipart MIME). 
                - 'payload' (Dict[str, Any]): The parsed message payload containing:
                    - 'mimeType' (str): The MIME type of the message.
                    - 'headers' (List[Dict[str, str]]): List of message headers with 'name' and 'value'.
                    - 'parts' (List[Dict[str, Any]]): List of message parts for multipart messages. Each part is a dictionary with the following structure:
                        - 'mimeType' (str): The MIME type of the part (e.g., 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'image/png').
                        - 'filename' (Optional[str]): The filename of the part if it is an attachment (e.g., 'requirements.docx', 'sample_image.png'). Omitted or empty for inline/plain text parts.
                        - 'body' (Dict[str, Any]): The message body data for the part, with possible keys:
                            - 'data' (Optional[str]): The base64url-encoded content of the part (present for inline/plain text parts).
                            - 'attachmentId' (Optional[str]): The ID of the attachment (present for attachments, e.g., 'att_msg4_001').
                            - 'size' (Optional[int]): The size of the attachment in bytes (present for attachments).
                    - 'body' (Dict[str, Any]): The message body data.
                        - 'data' (str): The base64url-encoded content of the message body.
            - 'nextPageToken' (None): Currently always None.

    Raises:
        TypeError: If `user_account_to_search` is not a string, `result_limit` is not an integer, 
                   `search_query_string` is not a string, `required_label_ids` is not a list or contains non-strings,
                   or `search_spam_and_trash_folders` is not a boolean.
        ValueError: If `user_account_to_search` is empty, `result_limit` is not a positive integer,
                    or `user_account_to_search` does not exist in the database.
    """
    from gmail.Users.Messages import list
    return list(
        userId=user_account_to_search,
        max_results=result_limit,
        q=search_query_string,
        labelIds=required_label_ids,
        include_spam_trash=search_spam_and_trash_folders
    )


def update_email_tags(
    user_id_for_label_change='me',
    message_id_to_modify='',
    labels_to_apply=None,
    labels_to_remove=None
):
    """
    Modifies the labels on the specified message.

    Adds or removes labels from the message identified by the given ID. All labels are handled
    case-insensitively and stored in their uppercase form. The function enforces label exclusivity
    rules where INBOX is mutually exclusive with SENT, DRAFT, and TRASH. Adding SENT, DRAFT, or TRASH
    will automatically remove INBOX, while adding INBOX will only succeed if none of SENT, DRAFT, or
    TRASH are present. All labels are converted to uppercase before processing, duplicates are
    automatically removed, and labels are stored in a sorted list for consistency. Custom labels can
    be added alongside system labels.

    Args:
        user_id_for_label_change (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        message_id_to_modify (str): The ID of the message to modify. Defaults to ''.
        labels_to_apply (Optional[List[str]]): A list of label names to add. Label names are handled
                case-insensitively and stored in their uppercase form. Defaults to None.
        labels_to_remove (Optional[List[str]]): A list of label names to remove. Label names are handled
                case-insensitively and stored in their uppercase form. Defaults to None.

    Returns:
        Optional[Dict[str, Any]]: A dictionary representing the modified message resource if found,
        otherwise None. The dictionary contains:
            - 'id' (str): Message ID.
            - 'labelIds' (List[str]): Updated list of labels (all uppercase) applied to the message.
            - Other message properties as defined in the database.

    Raises:
        TypeError: If user_id_for_label_change or message_id_to_modify is not a string.
            If labels_to_apply or labels_to_remove is provided and is not a list.
            If any element in labels_to_apply or labels_to_remove is not a string.
        ValueError: If `user_id_for_label_change` is empty or not a valid email address when not "me".
    """
    from gmail.Users.Messages import modify
    return modify(
        userId=user_id_for_label_change,
        id=message_id_to_modify,
        addLabelIds=labels_to_apply,
        removeLabelIds=labels_to_remove
    )


def bulk_update_email_tags(
    user_for_batch_labeling='me',
    list_of_message_ids=None,
    tags_to_add_in_batch=None,
    tags_to_remove_in_batch=None
):
    """
    Modifies the labels on multiple messages simultaneously.

    Applies the specified label modifications (add/remove) to all messages
    identified by the IDs in the provided list.

    Args:
        user_for_batch_labeling (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        list_of_message_ids (Optional[List[str]]): A list of message IDs to modify. Defaults to None or an empty list.
        tags_to_add_in_batch (Optional[List[str]]): A list of label IDs to add. Label IDs are handled
                case-insensitively and stored in their uppercase form. Defaults to None.
        tags_to_remove_in_batch (Optional[List[str]]): A list of label IDs to remove. Label IDs are handled
                case-insensitively and stored in their uppercase form. Defaults to None.

    Returns:
        None.

    Raises:
        TypeError:
            - If `user_for_batch_labeling` is not a string.
            - If `list_of_message_ids` is provided and is not a list.
            - If `list_of_message_ids` is provided and contains non-string elements.
            - If `tags_to_add_in_batch` is provided and is not a list.
            - If `tags_to_add_in_batch` is provided and contains non-string elements.
            - If `tags_to_remove_in_batch` is provided and is not a list.
            - If `tags_to_remove_in_batch` is provided and contains non-string elements.
        ValueError: If the specified `user_for_batch_labeling` does not exist in the database (propagated from _ensure_user).
    """
    from gmail.Users.Messages import batchModify
    return batchModify(
        userId=user_for_batch_labeling,
        ids=list_of_message_ids,
        addLabelIds=tags_to_add_in_batch,
        removeLabelIds=tags_to_remove_in_batch
    )
