# This file is automatically generated by the MutationBuilder

def fetch_account_summary(account_identifier='me'):
    """
    Gets the user's Gmail profile information.

    Retrieves the profile data associated with the specified user ID from the database.

    Args:
        account_identifier (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.

    Returns:
        Dict[str, Any]: A dictionary containing the user's profile information with keys such as:
            - 'emailAddress' (str): The user's email address
            - 'messagesTotal' (int): Total number of messages in the mailbox
            - 'threadsTotal' (int): Total number of threads in the mailbox
            - 'historyId' (str): The current history ID of the mailbox

    Raises:
        TypeError: If `account_identifier` is not a string.
        ValueError: If `account_identifier` is an empty string or does not exist in the database (propagated from database access).
    """
    from gmail.Users import getProfile
    return getProfile(userId=account_identifier)


def subscribe_to_mailbox_events(user_email_address='me', notification_config=None):
    """
    Set up or update a watch on the user's mailbox.

    Stores the watch request configuration for the specified user.

    Args:
        user_email_address (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.
        notification_config (Optional[Dict[str, Any]]): An optional dictionary containing the watch request body.
                The exact structure depends on the watch configuration requirements.
                Defaults to None, resulting in an empty watch configuration.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - 'historyId' (str): The current history ID of the mailbox
            - 'expiration' (str): The expiration timestamp for the watch

    Raises:
        KeyError: If the specified `user_email_address` does not exist in the database.
    """
    from gmail.Users import watch
    return watch(userId=user_email_address, request=notification_config)


def cancel_mailbox_subscription(target_user_id='me'):
    """
    Stop receiving push notifications for the user's mailbox.

    Clears the stored watch configuration for the specified user.

    Args:
        target_user_id (str): The user's email address. The special value 'me'
                can be used to indicate the authenticated user. Defaults to 'me'.

    Returns:
        Dict[str, Any]: An empty dictionary, signifying the successful stop operation.

    Raises:
        KeyError: If the specified `target_user_id` does not exist in the database.
    """
    from gmail.Users import stop
    return stop(userId=target_user_id)


def verify_user_account_existence(user_to_validate):
    """
    Checks if a user exists in the database.

    Args:
        user_to_validate (str): The ID of the user to check.

    Returns:
        bool: True if the user exists in the database, False otherwise.

    Raises:
        TypeError: If user_to_validate is not a string.
        ValueError: If user_to_validate is empty or contains only whitespace.
    """
    from gmail.Users import exists
    return exists(userId=user_to_validate)


def provision_new_account(new_user_identifier, initial_profile_data):
    """
    Creates a new user entry in the database.

    Initializes the data structure for a new user, including profile,
    empty containers for drafts, messages, threads, labels, settings, history,
    and watch configuration.

    Args:
        new_user_identifier (str): The unique identifier for the new user.
        initial_profile_data (Dict[str, Any]): A dictionary containing the initial profile information.
            It must contain an 'emailAddress' (str) key. Other keys are permitted but ignored
            by this function's core logic beyond validation of 'emailAddress'.
            Example: {"emailAddress": "user@example.com", "displayName": "John Doe"}

    Returns:
        Dict[str, Any]: A dictionary representing the newly created user's data structure with keys:
            - 'profile' (Dict[str, Any]): User profile information
            - 'drafts' (Dict[str, Any]): Empty drafts container
            - 'messages' (Dict[str, Any]): Empty messages container
            - 'threads' (Dict[str, Any]): Empty threads container
            - 'labels' (Dict[str, Any]): Empty labels container
            - 'settings' (Dict[str, Any]): User settings with sub-keys:
                - 'imap' (Dict[str, Any]): IMAP settings
                - 'pop' (Dict[str, Any]): POP settings
                - 'vacation' (Dict[str, Any]): Vacation responder settings
                - 'language' (Dict[str, Any]): Language settings
                - 'autoForwarding' (Dict[str, Any]): Auto-forwarding settings
                - 'sendAs' (Dict[str, Any]): Send-as settings
            - 'history' (List[Any]): Empty history list
            - 'watch' (Dict[str, Any]): Empty watch configuration

    Raises:
        TypeError: If `new_user_identifier` is not a string.
        pydantic.ValidationError: If the `initial_profile_data` dictionary is invalid (e.g., missing 'emailAddress',
                                  or 'emailAddress' is not a string).
    """
    from gmail.Users import createUser
    return createUser(userId=new_user_identifier, profile=initial_profile_data)
