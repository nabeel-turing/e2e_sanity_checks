# This file is automatically generated by the MutationBuilder

def publish_content_document(new_content_specification):
    """
    Creates new content.

    This function creates a new content item (page, blogpost, comment, etc.) with the specified
    details and stores it in the database. It handles both basic content creation and special
    cases like comments with ancestor relationships.

    Args:
        new_content_specification (Dict[str, Any]): Dictionary containing content details
            Required fields:
                - type (str): Content type (e.g., 'page', 'blogpost', 'comment')
                - title (str): Content title
                - spaceKey (str): Space key where content will be created
            Optional fields:
                - status (str): Content status (default: 'current')
                - version (Dict): Content version object with 'number' key
                    - number (int): Version number (default: 1)
                    - minorEdit (bool): Flag indicating a minor edit (default: False)
                - body (Dict): Content body with storage format, structured as:
                      - storage (Dict): A dictionary with:
                            - value (str): The content value in storage format.
                            - representation (str): The representation type (e.g., "storage")
                - createdBy (str): Username of the creator (default: 'unknown')
                - postingDay (Optional[str]): Posting day for blog posts in "YYYY-MM-DD" format

    Returns:
        Dict[str, Any]: A dictionary containing the created content details with keys:
            - id (str): Unique identifier for the content.
            - type (str): Content type.
            - title (str): Content title.
            - spaceKey (str): Space key.
            - status (str): Content status.
            - version (Dict): Content version object with keys:
                  - number (int): Version number.
                  - minorEdit (bool): Minor edit flag.
            - body (Dict): Content body.
            - createdBy (str): Username of the creator.
            - postingDay (Optional[str]): Posting day for blog posts (if provided).


    Raises:
        pydantic.ValidationError: If the input `new_content_specification` dictionary does not conform to the
                                  ContentInputModel schema (e.g., missing required fields,
                                  incorrect types, invalid format for postingDay).
        MissingCommentAncestorsError: If `type` is 'comment' and `ancestors` list is missing or empty.
        ParentContentNotFoundError: If a parent content ID specified in `ancestors` for a comment
                                    is not found in the database.
    """
    from confluence.ContentAPI import create_content
    return create_content(body=new_content_specification)


def fetch_content_by_id(content_identifier, required_content_status=None):
    """
    Retrieves content by its unique identifier.

    This function fetches a content item from the database using its ID. It can optionally
    filter the content by its status to ensure the content matches the expected state.

    Args:
        content_identifier (str): The unique identifier of the content to retrieve. Must be a non-empty string.
        required_content_status (Optional[str]): The expected status of the content. If provided,
            the function will verify that the content's status matches this value.
            Must be a string if provided.

    Returns:
        Dict[str, Any]: A dictionary containing the content details with keys:
            - id (str): Content identifier.
            - type (str): Content type.
            - title (str): Content title.
            - spaceKey (str): Internal space key.
            - status (str): Content status.
            - version (Dict[str, Any]): Content version object, which includes:
                  - number (int): Version number.
                  - minorEdit (bool): Flag indicating a minor edit.
            - body (Dict[str, Any]): Content body as a dictionary with the structure:
                  - storage (Dict[str, Any]): A dictionary containing:
                        - value (str): The actual content value.
                        - representation (str): The content representation format (e.g., "storage").
            - ancestors (Optional[List[str]]): List of ancestor IDs (for comments), if applicable.
            - postingDay (Optional[str]): Posting day for blog posts, if available.

    Raises:
        TypeError: If 'content_identifier' is not a string, or if 'required_content_status', 'version', or 'expand'
                   are provided but are not of their expected types (str, int, str respectively).
        InvalidInputError: If 'content_identifier' is an empty string.
        ContentNotFoundError: If the content with the specified ID is not found.
        ContentStatusMismatchError: If the content's required_content_status does not match the expected required_content_status.
    """
    from confluence.ContentAPI import get_content
    return get_content(id=content_identifier, status=required_content_status)


def modify_existing_content(target_content_id, content_modifications):
    """
    Updates existing content.

    This function updates an existing content item with new values.
    Versioning is managed automatically: the version is incremented by one (defaulting to 1 if no version is set).
    The update payload should not include a version object (any provided version data is ignored).

    Special behavior:
      - **Restoring a trashed page:**
        To restore content that is "trashed", the update request must set its status to "current". In that case,
        only the version is incremented and the status updated to "current". No other fields are modified.
      - **Deleting a draft:**
        If the update is intended to delete a draft (signaled by `query_status="draft"`), then the draft is removed and
        the content's body is replaced with the provided body. (Updating a draft is not supported.)

    Args:
        target_content_id (str): ID of the content to update.
        content_modifications (Dict[str, Any]): Dictionary containing updated content details.
            Optional fields:
                - title (str): New content title.
                - status (str): New content status.
                - body (Dict): New content body.
                - space (Dict[str, str]): New space object containing a "key" field.
                    - key (str): Space key.
                - ancestors (List[str]): List of ancestor IDs.

    Returns:
        Dict[str, Any]: Updated content details with keys:
            - id (str): Unique identifier of the content.
            - type (str): Content type (e.g., "page", "blogpost", "comment").
            - title (str): Updated content title.
            - space (Dict[str, str]): Space object containing:
                    - key (str): Space key.
            - status (str): Updated content status.
            - version (Dict[str, Any]): Version object containing:
                    - number (int): Updated version number.
                    - minorEdit (bool): Indicates if the update is a minor edit.
            - body (Dict[str, Any]): Updated content body.
            - Other metadata from the original content may also be present.

    Raises:
        TypeError: If `target_content_id` is not a string or `content_modifications` is not a dictionary.
        pydantic.ValidationError: If the `content_modifications` argument does not conform to the expected structure
                                  (e.g., incorrect types for fields like 'title', 'space', 'ancestors',
                                  or 'space' object missing 'key').
        ValueError: If the content with the specified `target_content_id` doesn't exist (propagated from internal DB logic).
    """
    from confluence.ContentAPI import update_content
    return update_content(id=target_content_id, body=content_modifications)


def trash_or_purge_content(content_id_for_deletion, deletion_context_status=None):
    """
    Deletes a content item from the system.

    This function simulates the deletion of a content item based on its type and status,
    following these cases:
      1. If the content is trashable (default) and its status is "current":
         The content is trashed by updating its status to "trashed" (simulating a soft delete).
      2. If the content is trashable, its status is "trashed", and the query parameter "status"
         is set to "trashed":
         The content is purged (permanently deleted) from the database.
      3. If the content is not trashable:
         The content is immediately deleted permanently regardless of its status.

    Args:
        content_id_for_deletion (str): The unique identifier of the content to delete.
        deletion_context_status (Optional[str]): The query parameter "status" from the request.
            When set to "trashed" in the purge scenario, indicates that the content should be
            permanently deleted.

    Returns:
        None

    Raises:
        TypeError: If 'content_id_for_deletion' is not a string, or if 'deletion_context_status' is provided and is not a string.
        ValueError: If there is no content with the given content_id_for_deletion (propagated from core logic).
    """
    from confluence.ContentAPI import delete_content
    return delete_content(id=content_id_for_deletion, status=deletion_context_status)


def find_content_with_cql(cql_query_string, pagination_start_index=0, pagination_page_size=25):
    """
    Searches for content using Confluence Query Language (CQL) with pagination support.

    This function performs a search across all content items using the provided CQL query.
    It supports complex queries with logical operators and field comparisons, and returns
    paginated results.

    Args:
        cql_query_string (str): The CQL query string to use for searching. The query can include:
            - Field comparisons (e.g., "type='page'", "space="TEST"")
            - Logical operators (AND, OR, NOT)
            - Parentheses for grouping
            - Comparison operators (=, !=, >, <, >=, <=, ~, !~)
            Allowed fields:
                - Ancestor, Container, Content, Created, Creator, Contributor
                - Favourite/favorite, ID, Label, Last modified, Macro, Mention
                - Parent, Space, Space category, Space key, Space title, Space type
                - Text, Title, Type, Watcher, status
        pagination_start_index (int): The starting index for pagination. Defaults to 0. Must be non-negative.
        pagination_page_size (int): The maximum number of results to return. Defaults to 25. Must be non-negative.

    Returns:
        List[Dict[str, Any]]: A list of content items that match the search criteria.
            Each item is a dictionary containing the content details with keys:
            - id (str): Content identifier.
            - type (str): Content type.
            - title (str): Content title.
            - spaceKey (str): Space key.
            - status (str): Content status.
            - version (Dict): Content version object with keys:
                  - number (int): Version number.
                  - minorEdit (bool): Minor edit flag.
            - body (Dict): Content body.
            - ancestors (Optional[List[str]]): List of ancestor IDs (for comments)
    Raises:
        TypeError: If 'cql_query_string' is not a string, or 'pagination_start_index' or 'pagination_page_size' are not integers.
        InvalidPaginationValueError: If 'pagination_start_index' or 'pagination_page_size' are negative.
        ValueError: If the CQL query is invalid or no valid tokens are found.
    """
    from confluence.ContentAPI import search_content
    return search_content(
        cql=cql_query_string,
        start=pagination_start_index,
        limit=pagination_page_size
    )


def fetch_filtered_content_list(
    filter_by_content_type=None,
    filter_by_space_key=None,
    filter_by_title=None,
    filter_by_status='current',
    filter_by_publication_date=None,
    additional_fields_to_expand=None,
    result_offset=0,
    max_results_per_page=25
):
    """
    Returns a paginated list of content filtered by the specified parameters.

    This function retrieves all content from the database and applies filters based
    on the provided arguments. The results are paginated using the start and limit parameters.

    Args:
        filter_by_content_type (Optional[str]): The type of content (e.g., "page", "blogpost", "comment").
            Only content matching this type is returned. If None, no filtering is applied.
        filter_by_space_key (Optional[str]): The key of the space in which the content is located.
            Only content in the specified space is returned.
        filter_by_title (Optional[str]): The title of the content. Filters to content with a matching title. Required if type is "page".
        filter_by_status (Optional[str]): The status of the content (e.g., "current", "trashed", or "any").
            Defaults to "current". If explicitly set to None, it's treated like "current" by the core logic.
            If "any", the status filter is ignored.
        filter_by_publication_date (Optional[str]): The posting day of the content. This filter is only applied
            if the content type is "blogpost". Format: yyyy-mm-dd. Example: "2024-01-01".
        additional_fields_to_expand (Optional[str]): A comma-separated list of additional fields to include in the
            returned content objects. Supported values:
            - space: Expands the space field with space key
            - version: Expands the version information
            - history: Expands the content history
        result_offset (int): The starting index for pagination. Defaults to 0.
        max_results_per_page (int): The maximum number of results to return. Defaults to 25.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries representing the filtered content.
            Each dictionary contains the following keys:
            - id (str): Unique identifier for the content.
            - type (str): Content type.
            - spaceKey (str): Key of the space where the content is located.
            - title (str): Title of the content.
            - status (str): Current status of the content.
            - body (Dict): Content body data.
            - postingDay (Optional[str]): Posting day for blog posts.
            - link (str): URL path to the content.
            - children (Optional[List[Dict[str, Any]]]): List of child content items.
            - ancestors (Optional[List[Dict[str, Any]]]): List of ancestor content items.
            Plus any expanded fields specified in the expand parameter.

    Raises:
        TypeError: If any argument has an incorrect filter_by_content_type (e.g., 'filter_by_content_type' is not a string, 'result_offset' is not an int).
        InvalidParameterValueError: If 'filter_by_status' has an unsupported value (and is not None), 
            'filter_by_publication_date' has an invalid format, 'additional_fields_to_expand' contains unsupported fields, 
            or 'result_offset'/'max_results_per_page' are negative.
        MissingTitleForPageError: If 'filter_by_content_type' is "page" and 'filter_by_title' is not provided or is an empty string.
        ValueError: Propagated if errors occur during 'additional_fields_to_expand' processing for 'history' 
                    (e.g., from an internal `get_content_history` call).
    """
    from confluence.ContentAPI import get_content_list
    return get_content_list(
        type=filter_by_content_type,
        spaceKey=filter_by_space_key,
        title=filter_by_title,
        status=filter_by_status,
        postingDay=filter_by_publication_date,
        expand=additional_fields_to_expand,
        start=result_offset,
        limit=max_results_per_page
    )


def retrieve_content_version_history(document_identifier, expanded_history_fields=None):
    """
    Returns the history of a piece of content.

    This method returns the metadata regarding creation and versioning for the content item
    identified by the given id. It uses a global history store (DB["history"]) that is updated
    whenever content is created or updated. Each history record includes the version number,
    createdBy, createdDate, and lastUpdated timestamp.

    The returned structure is a dictionary with the following keys:
        - id (str): The unique identifier of the content.
        - results (List[Dict[str, Any]]): An ordered list (ascending by version number) of history records.
            Each record contains:
              - version (int): The version number.
              - createdBy (str): The user that created or updated that version.
              - createdDate (str): The ISO timestamp when that version was created.
              - lastUpdated (str): The ISO timestamp when that version was last updated.
        - latest (Dict[str, Any]): The latest version record.
        - createdBy (str): The creator from the latest record.
        - createdDate (str): The creation date from the latest record.
        - previousVersion (Optional[Dict[str, Any]]): The previous version record, if available.
        - nextVersion (Optional[Dict[str, Any]]): Always None, since the current version is the latest.

    Args:
        document_identifier (str): Unique identifier of the content.
        expanded_history_fields (Optional[str], optional): A comma-separated list of additional fields to expand
                                          (e.g., "previousVersion,nextVersion,lastUpdated").
                                          This parameter is not used to filter the output in this simulation.

    Returns:
        Dict[str, Any]: A dictionary representing the content's history.

    Raises:
        ValueError: If no content with the specified document_identifier is found.
    """
    from confluence.ContentAPI import get_content_history
    return get_content_history(id=document_identifier, expand=expanded_history_fields)


def list_child_content_by_type(parent_content_id, expand_child_details=None, for_parent_version_number=0):
    """
    Returns a mapping of direct children content grouped by type.

    Args:
        parent_content_id (str): Unique identifier of the parent content.
        expand_child_details (Optional[str]): A comma-separated list of additional fields to include.
            This parameter is not utilized in this simulation. Defaults to None.
        for_parent_version_number (int): The version number of the parent content. This is included
            for potential version-related logic, but is not used in the simulation. Defaults to 0.

    Returns:
        Dict[str, List[Dict[str, Any]]]: A dictionary where each key represents a content type
            (e.g., "page", "blogpost", "comment", "attachment") and the corresponding value is a list
            of child content dictionaries. Each Dict[str, Any] contains:
                - id (str): Unique identifier for the content.
                - type (str): Content type (e.g., "page", "blogpost", "comment", "attachment").
                - title (str): Title of the content.
                - spaceKey (str): Key of the space where the content is located.
                - status (str): Current status of the content (e.g., "current", "trashed").
                - body (Dict[str, Any]): Content body data.
                - postingDay (Optional[str]): Posting day for blog posts.
                - link (str): URL path to the content.
                - children (Optional[List[Dict[str, Any]]]): List of child content.
                - ancestors (Optional[List[Dict[str, Any]]]): List of ancestor content.

    Raises:
        ValueError: If the parent content with the specified parent_content_id is not found.
    """
    from confluence.ContentAPI import get_content_children
    return get_content_children(
        id=parent_content_id,
        expand=expand_child_details,
        parentVersion=for_parent_version_number
    )


def fetch_children_of_specific_type(
    ancestor_content_id,
    target_child_content_type,
    extra_child_data_to_include=None,
    relevant_parent_version=0,
    child_list_start_index=0,
    child_list_page_limit=25
):
    """
    Returns direct children content of a specified type.

    Args:
        ancestor_content_id (str): Unique identifier of the parent content.
        target_child_content_type (str): The type of child content to retrieve (e.g., "page", "blogpost", "comment", "attachment").
        extra_child_data_to_include (Optional[str], optional): Additional fields to include in the result. Not used in this simulation.
            Defaults to None.
        relevant_parent_version (int, optional): The version of the parent content. Provided for potential future use; not used
            in this simulation. Defaults to 0.
        child_list_start_index (int, optional): The starting index for pagination. Defaults to 0.
        child_list_page_limit (int, optional): The maximum number of child content items to return. Defaults to 25.

    Returns:
        List[Dict[str, any]]: A paginated list of child content dictionaries matching the specified type.
            Each Dict[str, any] contains:
                - id (str): Unique identifier for the content.
                - type (str): Content type (e.g., "page", "blogpost", "comment", "attachment").
                - title (str): Title of the content.
                - spaceKey (str): Key of the space where the content is located.
                - status (str): Current status of the content (e.g., "current", "trashed").
                - body (Dict[str, Any]): Content body data.
                - postingDay (Optional[str]): Posting day for blog posts.
                - link (str): URL path to the content.
                - children (Optional[List[Dict[str, any]]]): List of child content.
                - ancestors (Optional[List[Dict[str, any]]]): List of ancestor content.

    Raises:
        ValueError: If the parent content with the given ancestor_content_id is not found.
    """
    from confluence.ContentAPI import get_content_children_of_type
    return get_content_children_of_type(
        id=ancestor_content_id,
        child_type=target_child_content_type,
        expand=extra_child_data_to_include,
        parentVersion=relevant_parent_version,
        start=child_list_start_index,
        limit=child_list_page_limit
    )


def retrieve_content_comment_thread(
    parent_document_id,
    expand_comment_fields=None,
    concerning_parent_version=0,
    comment_pagination_start=0,
    comment_pagination_limit=25,
    comment_location_filter=None,
    comment_retrieval_depth=None
):
    """
    Returns the comments associated with a specific content item.

    Args:
        parent_document_id (str): The unique identifier of the parent content.
        expand_comment_fields (Optional[str], optional): A comma-separated list of additional fields to include in the
            returned comment objects. Not utilized in this simulation. Defaults to None.
        concerning_parent_version (int, optional): The version of the parent content. This parameter is provided for
            completeness but is not used in this simulation. Defaults to 0.
        comment_pagination_start (int, optional): The starting index for pagination. Defaults to 0.
        comment_pagination_limit (int, optional): The maximum number of comment objects to return. Defaults to 25.
        comment_location_filter (Optional[str], optional): An optional parameter to specify a location filter within the
            content hierarchy. Not used in this simulation. Defaults to None.
        comment_retrieval_depth (Optional[str], optional): An optional parameter to control the depth of comment retrieval.
            Not used in this simulation. Defaults to None.

    Returns:
        List[Dict[str, any]]: A paginated list of comment dictionaries associated with the parent content.
            Each Dict[str, any] contains:
                - id (str): Unique identifier for the content.
                - type (str): Content type (e.g., "page", "blogpost", "comment", "attachment").
                - title (str): Title of the content.
                - spaceKey (str): Key of the space where the content is located.
                - status (str): Current status of the content (e.g., "current", "trashed").
                - body (Dict[str, Any]): Content body data.
                - postingDay (Optional[str]): Posting day for blog posts.
                - link (str): URL path to the content.
                - children (Optional[List[Dict[str, any]]]): List of child content.
                - ancestors (Optional[List[Dict[str, any]]]): List of ancestor content.

    Raises:
        ValueError: If the parent content with the given parent_document_id is not found.
    """
    from confluence.ContentAPI import get_content_comments
    return get_content_comments(
        id=parent_document_id,
        expand=expand_comment_fields,
        parentVersion=concerning_parent_version,
        start=comment_pagination_start,
        limit=comment_pagination_limit,
        location=comment_location_filter,
        depth=comment_retrieval_depth
    )


def list_content_attachments(
    associated_content_id,
    expand_attachment_properties=None,
    attachment_list_offset=0,
    attachment_list_max_count=50,
    filter_by_attachment_filename=None,
    filter_by_media_type=None
):
    """
    Returns attachments for a specific content item.

    Args:
        associated_content_id (str): The unique identifier of the parent content.
        expand_attachment_properties (Optional[str], optional): A comma-separated list of additional fields to include.
            Not utilized in this simulation. Defaults to None.
        attachment_list_offset (int, optional): The starting index for pagination. Defaults to 0.
        attachment_list_max_count (int, optional): The maximum number of attachments to return. Defaults to 50.
        filter_by_attachment_filename (Optional[str], optional): Filter attachments by filename. Defaults to None.
        filter_by_media_type (Optional[str], optional): Filter attachments by media type. Defaults to None.

    Returns:
        List[Dict[str, any]]: A paginated list of attachment dictionaries associated with the parent content, each containing:
            - id (str): Unique identifier for the content.
            - type (str): Content type (e.g., "page", "blogpost", "comment", "attachment").
            - title (str): Title of the content.
            - spaceKey (str): Key of the space where the content is located.
            - status (str): Current status of the content (e.g., "current", "trashed").
            - body (Dict[str, Any]): Content body data.
            - postingDay (Optional[str]): Posting day for blog posts.
            - link (str): URL path to the content.
            - children (Optional[List[Dict[str, any]]]): List of child content.
            - ancestors (Optional[List[Dict[str, any]]]): List of ancestor content.

    Raises:
        ValueError: If the parent content with the given associated_content_id is not found.
    """
    from confluence.ContentAPI import get_content_attachments
    return get_content_attachments(
        id=associated_content_id,
        expand=expand_attachment_properties,
        start=attachment_list_offset,
        limit=attachment_list_max_count,
        filename=filter_by_attachment_filename,
        mediaType=filter_by_media_type
    )


def upload_new_attachment_to_content(
    target_page_id,
    file_to_upload,
    attachment_upload_comment=None,
    is_minor_content_update=False
):
    """
    Creates new attachments for a specific content item.

    Args:
        target_page_id (str): The unique identifier of the parent content.
        file_to_upload (Any): The file object to attach.
        attachment_upload_comment (Optional[str], optional): A comment describing the attachment. Defaults to None.
        is_minor_content_update (bool, optional): Whether this is a minor edit. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing information about the created attachment:
            - attachmentId (str): The unique identifier of the attachment.
            - fileName (str): The name of the attached file.
            - comment (Optional[str]): The comment describing the attachment.
            - minorEdit (bool): Whether this was a minor edit.

    Raises:
        ValueError: If the parent content with the given target_page_id is not found.
    """
    from confluence.ContentAPI import create_attachments
    return create_attachments(
        id=target_page_id,
        file=file_to_upload,
        comment=attachment_upload_comment,
        minorEdit=is_minor_content_update
    )


def modify_attachment_properties(content_container_id, target_attachment_id, new_metadata_payload):
    """
    Updates the metadata of an existing attachment.

    Args:
        content_container_id (str): The unique identifier of the parent content.
        target_attachment_id (str): The unique identifier of the attachment to update.
        new_metadata_payload (Dict[str, Any]): The updated metadata for the attachment.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - attachmentId (str): The unique identifier of the attachment.
            - updatedFields (Dict[str, Any]): A dictionary of the fields that were updated.

    Raises:
        ValueError: If the parent content or attachment is not found.
    """
    from confluence.ContentAPI import update_attachment
    return update_attachment(
        id=content_container_id,
        attachmentId=target_attachment_id,
        body=new_metadata_payload
    )


def replace_attachment_file(
    parent_content_identifier,
    attachment_id_to_update,
    new_file_data,
    file_update_comment=None,
    mark_as_minor_edit=False
):
    """
    Updates the binary data of an existing attachment.

    Args:
        parent_content_identifier (str): The unique identifier of the parent content.
        attachment_id_to_update (str): The unique identifier of the attachment to update.
        new_file_data (Any): The new file object to replace the existing attachment.
        file_update_comment (Optional[str]): A comment describing the update.
        mark_as_minor_edit (bool): Whether this is a minor edit.

    Returns:
        Dict[str, Any]: A dictionary containing information about the updated attachment:
            - attachmentId (str): The unique identifier of the attachment.
            - updatedFile (str): The name of the updated file.
            - comment (Optional[str]): The comment describing the update.
            - minorEdit (bool): Whether this was a minor edit.

    Raises:
        ValueError: If the parent content or attachment is not found.
    """
    from confluence.ContentAPI import update_attachment_data
    return update_attachment_data(
        id=parent_content_identifier,
        attachmentId=attachment_id_to_update,
        file=new_file_data,
        comment=file_update_comment,
        minorEdit=mark_as_minor_edit
    )


def fetch_all_descendant_content_grouped(
    root_content_id,
    expand_descendant_fields=None,
    descendant_list_start=0,
    descendant_list_limit=25
):
    """
    Returns all descendants of a content item, grouped by type.

    Args:
        root_content_id (str): The unique identifier of the parent content.
        expand_descendant_fields (Optional[str]): A comma-separated list of additional fields to include.
            Not used in this simulation.
        descendant_list_start (int): The starting index for pagination.
        descendant_list_limit (int): The maximum number of descendants to return per type.

    Returns:
        Dict[str, List[Dict[str, any]]]: A dictionary mapping content types to lists of descendant content.
            Each Dict[str, any] contains:
                - id (str): Unique identifier for the content.
                - type (str): Content type (e.g., "page", "blogpost", "comment", "attachment").
                - title (str): Title of the content.
                - spaceKey (str): Key of the space where the content is located.
                - status (str): Current status of the content (e.g., "current", "trashed").
                - body (Dict[str, Any]): Content body data.
                - postingDay (Optional[str]): Posting day for blog posts.
                - link (str): URL path to the content.
                - children (Optional[List[Dict[str, any]]]): List of child content.
                - ancestors (Optional[List[Dict[str, any]]]): List of ancestor content.

    Raises:
        ValueError: If the parent content with the given root_content_id is not found.
    """
    from confluence.ContentAPI import get_content_descendants
    return get_content_descendants(
        id=root_content_id,
        expand=expand_descendant_fields,
        start=descendant_list_start,
        limit=descendant_list_limit
    )


def find_descendants_by_type(
    ancestor_id,
    descendant_type_filter,
    expand_properties_for_descendants=None,
    result_set_offset=0,
    result_set_limit=25
):
    """
    Returns descendants of a specific type for a content item.

    Args:
        ancestor_id (str): The unique identifier of the parent content.
        descendant_type_filter (str): The type of descendants to retrieve (e.g., "page", "blogpost", "comment", "attachment").
        expand_properties_for_descendants (Optional[str]): A comma-separated list of additional fields to include.
            Not used in this simulation.
        result_set_offset (int): The starting index for pagination.
        result_set_limit (int): The maximum number of descendants to return.

    Returns:
        List[Dict[str, any]]: A paginated list of descendant content dictionaries of the specified type.
            Each Dict[str, any] contains:
                - id (str): Unique identifier for the content.
                - type (str): Content type (e.g., "page", "blogpost", "comment", "attachment").
                - title (str): Title of the content.
                - spaceKey (str): Key of the space where the content is located.
                - status (str): Current status of the content (e.g., "current", "trashed").
                - body (Dict[str, Any]): Content body data.
                - postingDay (Optional[str]): Posting day for blog posts.
                - link (str): URL path to the content.
                - children (Optional[List[Dict[str, any]]]): List of child content.
                - ancestors (Optional[List[Dict[str, any]]]): List of ancestor content.

    Raises:
        ValueError: If the parent content with the given ancestor_id is not found.
    """
    from confluence.ContentAPI import get_content_descendants_of_type
    return get_content_descendants_of_type(
        id=ancestor_id,
        type=descendant_type_filter,
        expand=expand_properties_for_descendants,
        start=result_set_offset,
        limit=result_set_limit
    )


def list_labels_on_content(
    content_item_id,
    label_prefix_filter=None,
    label_list_start_index=0,
    label_list_max_items=200
):
    """
    Returns a paginated list of content labels. If a prefix is provided,
    it filters labels that start with the given prefix.

    Args:
        content_item_id (str): The ID of the content to get labels for.
        label_prefix_filter (Optional[str]): Optional prefix to filter labels by.
        label_list_start_index (int): The starting index for pagination. Must be non-negative.
        label_list_max_items (int): The maximum number of labels to return. Must be positive.

    Returns:
        List[Dict[str, Any]]: List of label objects in the format
            -   label (str): The label name.

    Raises:
        TypeError: If 'content_item_id' is not a string, 'label_prefix_filter' is not a string or None,
                   'label_list_start_index' is not an integer, or 'label_list_max_items' is not an integer.
        ValueError: If 'label_list_start_index' is negative, 'label_list_max_items' is not positive,
                    or if the content with the given content_item_id is not found (propagated from original logic).
    """
    from confluence.ContentAPI import get_content_labels
    return get_content_labels(
        id=content_item_id,
        prefix=label_prefix_filter,
        start=label_list_start_index,
        limit=label_list_max_items
    )


def apply_labels_to_content(item_id_to_label, labels_to_add):
    """
    Adds labels to a content item. If the content does not have existing labels,
    a new entry is created. Returns the updated list of labels.

    Args:
        item_id_to_label (str): The ID of the content to add labels to.
        labels_to_add (List[str]): List of labels to add.

    Returns:
        List[Dict[str, Any]]: List of updated label objects in the format
            - label (str): The label name.

    Raises:
        TypeError: If 'item_id_to_label' is not a string.
        TypeError: If 'labels_to_add' is not a list or contains non-string elements.
        ValueError: If the content with the given item_id_to_label is not found (from core logic).
    """
    from confluence.ContentAPI import add_content_labels
    return add_content_labels(id=item_id_to_label, labels=labels_to_add)


def remove_labels_from_content(content_id_for_label_removal, specific_label_to_remove=None):
    """
    Deletes labels from a content item. If a specific label is provided,
    only that label is deleted. Otherwise, all labels are deleted.

    Args:
        content_id_for_label_removal (str): The ID of the content from which labels should be deleted.
        specific_label_to_remove (Optional[str]): Optional specific label to delete.

    Raises:
        ValueError: If the content with the given content_id_for_label_removal is not found; if the content has no labels.
    """
    from confluence.ContentAPI import delete_content_labels
    return delete_content_labels(id=content_id_for_label_removal, label=specific_label_to_remove)


def list_content_metadata_properties(
    target_content_identifier,
    properties_to_expand=None,
    property_list_offset=0,
    property_list_limit=10
):
    """
    Returns a paginated list of content properties for the specified content.

    Args:
        target_content_identifier (str): The unique identifier of the content
        properties_to_expand (Optional[str]): A comma-separated list of properties to expand
        property_list_offset (int): The starting index for pagination
        property_list_limit (int): The maximum number of properties to return

    Returns:
        List[Dict[str, any]]: A list of content property objects, where each property has:
            - key (str): The property key
            - value (Dict[str, Any]): The property value (can include any key-value pairs)
            - version (int): The property version number

    Raises:
        ValueError: If no properties for the specified content are found.
    """
    from confluence.ContentAPI import get_content_properties
    return get_content_properties(
        id=target_content_identifier,
        expand=properties_to_expand,
        start=property_list_offset,
        limit=property_list_limit
    )


def add_custom_property_to_content(content_id_for_property, property_data_payload):
    """
    Creates a new property for a specified content item.

    Args:
        content_id_for_property (str): The unique identifier of the content
        property_data_payload (Dict[str, Any]): A JSON object containing the property key and value
            - key (str): The property key
            - value (Dict[str, Any]): The property value, any key-value pair
                - some (str): The property value

    Returns:
        Dict[str, any]: The newly created content property object with:
            - key (str): The property key
            - value (Dict[str, Any]): The property value
            - version (int): The property version number (starts at 1)

    Raises:
        ValueError: If the content with the specified ID is not found; if the property key is missing.
    """
    from confluence.ContentAPI import create_content_property
    return create_content_property(id=content_id_for_property, body=property_data_payload)


def fetch_content_property_by_key(content_lookup_id, property_key_to_find, expand_property_details=None):
    """
    Retrieves a specific property of a content item by its key.

    Args:
        content_lookup_id (str): The unique identifier of the content
        property_key_to_find (str): The key of the property to retrieve
        expand_property_details (Optional[str]): A comma-separated list to expand the property details

    Returns:
        Dict[str, any]: The content property object with:
            - key (str): The property key
            - value (Dict[str, Any]): The property value
            - version (int): The property version number

    Raises:
        ValueError: If the content with the specified ID is not found; if the property with the specified property_key_to_find is not found.
    """
    from confluence.ContentAPI import get_content_property
    return get_content_property(
        id=content_lookup_id,
        key=property_key_to_find,
        expand=expand_property_details
    )


def modify_content_property(content_id_to_modify, property_key_to_update, new_property_value_payload):
    """
    Updates an existing content property with a new value and an incremented version.

    Args:
        content_id_to_modify (str): The unique identifier of the content
        property_key_to_update (str): The key of the property to update
        new_property_value_payload (Dict[str, Any]): A JSON object containing the updated property value and new version

    Returns:
        Dict[str, any]: The updated content property object with:
            - key (str): The property key
            - value (Dict[str, Any]): The updated property value
            - version (int): The incremented version number

    Raises:
        ValueError: If the content with the specified ID is not found; if the property with the specified property_key_to_update is not found.
    """
    from confluence.ContentAPI import update_content_property
    return update_content_property(
        id=content_id_to_modify,
        key=property_key_to_update,
        body=new_property_value_payload
    )


def remove_content_property(content_id_for_prop_deletion, property_key_to_delete):
    """
    Deletes a property from a content item identified by its key.

    Args:
        content_id_for_prop_deletion (str): The unique identifier of the content.
        property_key_to_delete (str): The key of the property to delete

    Raises:
        ValueError: If the content with the specified ID is not found; if the property with the specified property_key_to_delete is not found.
    """
    from confluence.ContentAPI import delete_content_property
    return delete_content_property(id=content_id_for_prop_deletion, key=property_key_to_delete)


def initialize_content_property(target_item_id, new_property_key, initial_property_data):
    """
    Creates a new content property for a specified key when the version is 1.

    Args:
        target_item_id (str): The unique identifier of the content.
        new_property_key (str): The key for the property.
        initial_property_data (Dict[str, Any]): A JSON object representing the property, including version=1

    Returns:
        Dict[str, any]: The created content property object with:
            - key (str): The property key
            - value (Dict[str, Any]): The property value
            - version (int): The property version number (must be 1)

    Raises:
        ValueError: If the content with the specified ID is not found.
    """
    from confluence.ContentAPI import create_content_property_for_key
    return create_content_property_for_key(
        id=target_item_id,
        key=new_property_key,
        body=initial_property_data
    )


def fetch_all_content_permissions(restricted_content_id, expand_restriction_details=None):
    """
    Retrieves all restrictions for a content item, grouped by operation type.

    Args:
        restricted_content_id (str): The ID of the content item.
        expand_restriction_details (Optional[str]): A comma-separated list of additional fields to include.
            This parameter is not utilized in this simulation. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing restrictions grouped by operation type.
            The structure is:
            - read (Dict[str, Any]):
                - restrictions (Dict[str, Any]):
                    - user (List[str]): List of usernames with read access.
                    - group (List[str]): List of group names with read access.
            - update (Dict[str, Any]):
                - restrictions (Dict[str, Any]):
                    - user (List[str]): List of usernames with update access.
                    - group (List[str]): List of group names with update access.

    Raises:
        ValueError: If the content with the specified ID is not found.
    """
    from confluence.ContentAPI import get_content_restrictions_by_operation
    return get_content_restrictions_by_operation(
        id=restricted_content_id,
        expand=expand_restriction_details
    )


def get_permissions_for_action(
    content_id_for_restriction_check,
    permission_operation_key,
    additional_permission_fields=None,
    permission_list_start=0,
    permission_list_limit=100
):
    """
    Retrieves restrictions for a specific operation on a content item.

    Args:
        content_id_for_restriction_check (str): The ID of the content item.
        permission_operation_key (str): The operation type (e.g., "read" or "update").
        additional_permission_fields (Optional[str]): A comma-separated list of additional fields to include.
            This parameter is not utilized in this simulation. Defaults to None.
        permission_list_start (Optional[int]): The starting index for pagination. Defaults to 0.
        permission_list_limit (Optional[int]): The maximum number of results to return. Defaults to 100.

    Returns:
        Dict[str, Any]: A dictionary representing the restrictions for the specified operation with the structure:
            - operationKey (str): The operation type ("read" or "update").
            - restrictions (Dict[str, Any]): A dictionary containing restrictions for the specified operation with the structure:
                - user (List[str]): A list of usernames with access.
                - group (List[str]): A list of group names with access.

    Raises:
        ValueError: If the content with the specified ID is not found; if the operation key is invalid.
    """
    from confluence.ContentAPI import get_content_restrictions_for_operation
    return get_content_restrictions_for_operation(
        id=content_id_for_restriction_check,
        operationKey=permission_operation_key,
        expand=additional_permission_fields,
        start=permission_list_start,
        limit=permission_list_limit
    )
