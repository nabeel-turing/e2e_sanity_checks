# This file is automatically generated by the MutationBuilder

def list_all_spaces(filter_by_space_identifier=None, space_list_start=0, space_list_limit=25):
    """
    Returns a paginated list of all spaces.

    Retrieves a list of space dictionaries for the provided parameters.

    Args:
        filter_by_space_identifier (Optional[str]): A unique identifier to filter spaces by.
            Defaults to None.
        space_list_start (int): The starting index for pagination.
            Defaults to 0.
        space_list_limit (int): The maximum number of spaces to return.
            Defaults to 25.

    Returns:
        List[Dict[str, Any]]: A list of space dictionaries, each containing:
            - spaceKey (str): The unique identifier of the space.
            - name (str): The display name of the space.
            - description (str): A description of the space.

    Raises:
        TypeError: If filter_by_space_identifier is provided and is not a string,
                   or if space_list_start or space_list_limit are not integers.
        ValueError: If the space_list_start or space_list_limit parameters are negative.
    """
    from confluence.SpaceAPI import get_spaces
    return get_spaces(
        spaceKey=filter_by_space_identifier,
        start=space_list_start,
        limit=space_list_limit
    )


def provision_new_space(space_definition):
    """
    Creates a new space.

    Creates and returns a new space dictionary from the provided data.
    Note: If 'name' or 'description' are not provided in the body, Pydantic model
    validation ensures they default to an empty string.

    Args:
        space_definition (Dict[str, Any]): A dictionary containing:
            - key (str): The unique identifier for the space. (Mandatory)
            - name (str): The display name of the space.
            - description (Optional[str]): An optional description of the space.

    Returns:
        Dict[str, Any]: A dictionary representing the newly created space containing:
            - spaceKey (str): The unique identifier of the space (mirrors body['key']).
            - name (str): The display name of the space.
            - description (str): The description of the space.

    Raises:
        pydantic.ValidationError: If the 'space_definition' argument is not a valid dictionary or does not
                                  conform to the SpaceBodyInputModel (e.g., 'key' is missing,
                                  or 'key', 'name', 'description' have incorrect types).
        ValueError: If a space with the provided key already exists.
    """
    from confluence.SpaceAPI import create_space
    return create_space(body=space_definition)


def provision_new_private_space(private_space_definition):
    """
    Creates a new private space.

    This function behaves identically to create_space and returns a new private space dictionary.

    Args:
        private_space_definition (Dict[str, Any]): A dictionary containing:
            - key (str): The unique identifier for the space.
            - name (str): The display name of the space.
            - description (Optional[str]): An optional description of the space.

    Returns:
        Dict[str, Any]: A dictionary representing the newly created private space containing:
            - spaceKey (str): The unique identifier of the space.
            - name (str): The display name of the space.
            - description (str): The description of the space.

    Raises:
        ValueError: If the 'key' is missing from the private_space_definition or if a space with the provided key already exists.
    """
    from confluence.SpaceAPI import create_private_space
    return create_private_space(body=private_space_definition)


def modify_space_details(space_key_to_update, space_update_payload):
    """
    Updates an existing space.

    Updates and returns a space dictionary for the space specified by spaceKey.

    Args:
        space_key_to_update (str): The unique identifier of the space to update.
        space_update_payload (Dict[str, Any]): A dictionary containing the fields to update:
            - name (str): The new display name of the space.
            - description (str): The new description of the space.

    Returns:
        Dict[str, Any]: A dictionary representing the updated space containing:
            - spaceKey (str): The unique identifier of the space.
            - name (str): The updated display name of the space.
            - description (str): The updated description of the space.

    Raises:
        ValueError: If no space with the specified space_key_to_update is found.
    """
    from confluence.SpaceAPI import update_space
    return update_space(spaceKey=space_key_to_update, body=space_update_payload)


def initiate_space_deletion(space_key_to_delete):
    """
    Deletes a space and tracks the deletion task.

    Deletes the space identified by spaceKey and returns a task dictionary that tracks the deletion process.
    Note: The deletion task is simulated and marked as complete immediately.

    Args:
        space_key_to_delete (str): The unique identifier of the space to delete.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The task identifier.
            - spaceKey (str): The key of the space being deleted.
            - status (str): The current status of the deletion task ("in_progress" or "complete").
            - description (str): A description of the task.

    Raises:
        ValueError: If no space with the specified space_key_to_delete is found.
    """
    from confluence.SpaceAPI import delete_space
    return delete_space(spaceKey=space_key_to_delete)


def fetch_space_by_key(space_lookup_key):
    """
    Retrieves details about a specific space.

    Returns the space dictionary for the provided spaceKey.

    Args:
        space_lookup_key (str): The unique identifier of the space.

    Returns:
        Dict[str, Any]: A dictionary representing the space containing:
            - spaceKey (str): The unique identifier of the space.
            - name (str): The display name of the space.
            - description (str): The description of the space.

    Raises:
        TypeError: If space_lookup_key is not a string.
        ValueError: If no space with the specified space_lookup_key is found (propagated from core logic).
    """
    from confluence.SpaceAPI import get_space
    return get_space(spaceKey=space_lookup_key)


def list_all_content_in_space(
    target_space_key,
    content_retrieval_depth=None,
    expand_content_fields=None,
    content_list_start_offset=0,
    content_list_page_size=25
):
    """
    Retrieves the content within a specific space.

    Returns a list of content item dictionaries for the space identified by spaceKey.
    Note: The 'depth' and 'expand' parameters are included for API compatibility but are not fully implemented.

    Args:
        target_space_key (str): The unique identifier of the space. Must be a non-empty string.
        content_retrieval_depth (Optional[str]): The depth of content to retrieve. Defaults to None.
        expand_content_fields (Optional[str]): A comma-separated list of properties to expand. Defaults to None.
        content_list_start_offset (int): The starting index for pagination.
            Defaults to 0. Must be a non-negative integer.
        content_list_page_size (int): The maximum number of content items to return.
            Defaults to 25. Must be a positive integer.

    Returns:
        List[Dict[str, Any]]: A list of content item dictionaries, each containing:
            - id (str): The unique identifier of the content.
            - type (str): The type of content (e.g., "page", "blogpost").
            - title (str): The title of the content.
            - spaceKey (str): The key of the space containing the content.
            - status (str): The current status of the content.
            - body (Dict[str, Any]): A dictionary representing the content body data containing:
                  - storage (Dict[str, Any]): A dictionary with:
                        - value (str): The content value in storage format.
                        - representation (str): The representation type (e.g., "storage").
            - postingDay (Optional[str]): The posting day for blog posts.
            - link (str): The URL path to the content.
            - children (Optional[List[Dict[str, Any]]]): A list of child content items.
            - ancestors (Optional[List[Dict[str, Any]]]): A list of ancestor content items.

    Raises:
        TypeError: If 'target_space_key' is not a string.
        TypeError: If 'content_list_start_offset' is not an integer.
        TypeError: If 'content_list_page_size' is not an integer.
        ValueError: If 'target_space_key' is an empty string.
        ValueError: If 'content_list_start_offset' is a negative integer.
        ValueError: If 'content_list_page_size' is not a positive integer.
        ValueError: If no space with the specified target_space_key is found (as indicated by original docstring, though not explicitly raised by this stub's core logic).
    """
    from confluence.SpaceAPI import get_space_content
    return get_space_content(
        spaceKey=target_space_key,
        depth=content_retrieval_depth,
        expand=expand_content_fields,
        start=content_list_start_offset,
        limit=content_list_page_size
    )


def filter_space_content_by_type(
    source_space_key,
    content_type_to_filter,
    search_depth_level=None,
    fields_to_expand_in_results=None,
    filtered_list_start_index=0,
    filtered_list_page_limit=25
):
    """
    Retrieves content of a specific type within a space.

    Returns a list of content item dictionaries matching the specified type for the given spaceKey.
    Note: The function first retrieves all content for the space and then filters by type.
          The 'depth' and 'expand' parameters are accepted for API compatibility but are not fully implemented.

    Args:
        source_space_key (str): The unique identifier of the space.
        search_depth_level (Optional[str]): The depth of content to retrieve. Defaults to None.
        fields_to_expand_in_results (Optional[str]): A comma-separated list of properties to expand. Defaults to None.
        content_type_to_filter (str): The type of content to filter (e.g., "page", "blogpost").
        filtered_list_start_index (int): The starting index for pagination after filtering.
            Defaults to 0.
        filtered_list_page_limit (int): The maximum number of content items to return after filtering.
            Defaults to 25.

    Returns:
        List[Dict[str, Any]]: A list of content item dictionaries, each containing:
            - id (str): The unique identifier of the content.
            - type (str): The type of content.
            - title (str): The title of the content.
            - spaceKey (str): The key of the space containing the content.
            - status (str): The current status of the content.
            - body (Dict[str, Any]): A dictionary representing the content body data containing:
                  - storage (Dict[str, Any]): A dictionary with:
                        - value (str): The content value in storage format.
                        - representation (str): The representation type (e.g., "storage").
            - postingDay (Optional[str]): The posting day for blog posts.
            - link (str): The URL path to the content.
            - children (Optional[List[Dict[str, Any]]]): A list of child content items.
            - ancestors (Optional[List[Dict[str, Any]]]): A list of ancestor content items.

    Raises:
        ValueError: If no space with the specified source_space_key is found.
    """
    from confluence.SpaceAPI import get_space_content_of_type
    return get_space_content_of_type(
        spaceKey=source_space_key,
        type=content_type_to_filter,
        depth=search_depth_level,
        expand=fields_to_expand_in_results,
        start=filtered_list_start_index,
        limit=filtered_list_page_limit
    )
