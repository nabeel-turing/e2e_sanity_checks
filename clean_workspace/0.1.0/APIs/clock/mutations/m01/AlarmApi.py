# This file is automatically generated by the MutationBuilder

def schedule_new_alarm(
    alarm_duration_text=None,
    alarm_time_of_day=None,
    alarm_scheduled_date=None,
    alarm_custom_label=None,
    alarm_weekly_recurrence=None
):
    """
    Create a new alarm.

    This method can:
    1) Create an alarm with a given duration. (For example, set an alarm for 15 minutes.)
    2) Create an alarm at a specific time of the day. (For example, set an alarm at 10:30am.)

    Args:
        alarm_duration_text (Optional[str]): Duration of the alarm, in the format such as e.g. 5h30m20s, 10m, 2m15s, etc. 
        alarm_time_of_day (Optional[str]): Time of the day that the alarm should fire, in 12-hour format "H[:M[:S]]", e.g. "11:20".
        alarm_scheduled_date (Optional[str]): Scheduled date in format of YYYY-MM-DD.
        alarm_custom_label (Optional[str]): Label of the alarm.
        alarm_weekly_recurrence (Optional[List[str]]): Should be one or more of SUNDAY, MONDAY, TUESDAY, etc.

    Returns:
        Dict[str, Any]: A dictionary containing the created alarm information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import create_alarm
    return create_alarm(
        duration=alarm_duration_text,
        time=alarm_time_of_day,
        date=alarm_scheduled_date,
        label=alarm_custom_label,
        recurrence=alarm_weekly_recurrence
    )


def find_and_display_alarms(
    alarm_search_query=None,
    filter_by_alarm_state=None,
    filter_by_alarm_identifiers=None,
    filter_by_specific_date=None,
    filter_by_start_date_range=None,
    filter_by_end_date_range=None
):
    """
    Shows the matching alarms to the user.

    Args:
        alarm_search_query (Optional[str]): Either the exact time or the label of the alarm.
        filter_by_alarm_state (Optional[str]): Type of the alarm to show (UPCOMING, DISABLED, ACTIVE).
        filter_by_alarm_identifiers (Optional[List[str]]): Alarm ids.
        filter_by_specific_date (Optional[str]): The date to show alarms for.
        filter_by_start_date_range (Optional[str]): Filter for alarm scheduled to fire on or after this date.
        filter_by_end_date_range (Optional[str]): Filter for alarm scheduled to fire on or before this date.

    Returns:
        Dict[str, Any]: A dictionary containing matching alarms.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import show_matching_alarms
    return show_matching_alarms(
        query=alarm_search_query,
        alarm_type=filter_by_alarm_state,
        alarm_ids=filter_by_alarm_identifiers,
        date=filter_by_specific_date,
        start_date=filter_by_start_date_range,
        end_date=filter_by_end_date_range
    )


def update_alarms_with_filters(
    alarm_selection_criteria=None,
    properties_to_update=None,
    apply_to_all_matching_alarms=False
):
    """
    Modifies an alarm or multiple alarms' label, time, or state.

    Args:
        alarm_selection_criteria (Optional[Dict[str, Any]]): Filters to identify the existing alarms that need to be modified.
        properties_to_update (Optional[Dict[str, Any]]): Modifications to make to the existing alarms.
        apply_to_all_matching_alarms (bool): Set to true ONLY when the user clearly wants to modify multiple alarms.

    Returns:
        Dict[str, Any]: A dictionary containing the modified alarm information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import modify_alarm_v2
    return modify_alarm_v2(
        filters=alarm_selection_criteria,
        modifications=properties_to_update,
        bulk_operation=apply_to_all_matching_alarms
    )


def set_time_based_event(
    event_type,
    event_duration_text=None,
    event_trigger_time=None,
    event_time_period_specifier=None,
    event_scheduled_date=None,
    event_name=None,
    event_repetition_schedule=None
):
    """
    Creates a clock object which can either be a timer or an alarm.

    Args:
        event_type (str): Type of the clock component. Either TIMER or ALARM.
        event_duration_text (Optional[str]): Duration of the timer or alarm.
        event_trigger_time (Optional[str]): Time of the day in HH:MM:SS format.
        event_time_period_specifier (Optional[str]): One of AM, PM, or UNKNOWN.
        event_scheduled_date (Optional[str]): Scheduled date in format of YYYY-MM-DD.
        event_name (Optional[str]): Label of the timer or alarm.
        event_repetition_schedule (Optional[List[str]]): Recurrence pattern for alarms.

    Returns:
        Dict[str, Any]: A dictionary containing the created clock component.

    Raises:
        TypeError: If parameters are not of the expected event_type
        ValueError: If validation fails
    """
    from clock.AlarmApi import create_clock
    return create_clock(
        type=event_type,
        duration=event_duration_text,
        time_of_day=event_trigger_time,
        am_pm_or_unknown=event_time_period_specifier,
        date=event_scheduled_date,
        label=event_name,
        recurrence=event_repetition_schedule
    )


def change_alarm_properties(
    search_term_for_alarm=None,
    target_alarm_state=None,
    updated_alarm_time=None,
    updated_time_period=None,
    updated_alarm_name=None,
    target_alarm_identifiers=None,
    additional_time_for_alarm=None,
    existing_alarm_date=None,
    revised_alarm_date=None,
    revised_repetition_schedule=None,
    modify_all_alarms_at_once=False
):
    """
    Modifies when alarm(s) should go off.

    Args:
        search_term_for_alarm (Optional[str]): Alarm's time of day or label.
        target_alarm_state (Optional[str]): Type of the alarm to be modified.
        updated_alarm_time (Optional[str]): The new time of the day.
        updated_time_period (Optional[str]): One of AM, PM or UNKNOWN.
        updated_alarm_name (Optional[str]): The new label to be updated to.
        target_alarm_identifiers (Optional[List[str]]): Alarm ids.
        additional_time_for_alarm (Optional[str]): The duration to add to the current alarm.
        existing_alarm_date (Optional[str]): The alarm with the date that should modify for.
        revised_alarm_date (Optional[str]): The new date that the alarm should be updated to.
        revised_repetition_schedule (Optional[List[str]]): New recurrence pattern.
        modify_all_alarms_at_once (bool): Whether to perform a bulk operation on all alarms.

    Returns:
        Dict[str, Any]: A dictionary containing the modified alarm information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import modify_alarm
    return modify_alarm(
        query=search_term_for_alarm,
        alarm_type=target_alarm_state,
        new_time_of_day=updated_alarm_time,
        new_am_pm_or_unknown=updated_time_period,
        new_label=updated_alarm_name,
        alarm_ids=target_alarm_identifiers,
        duration_to_add=additional_time_for_alarm,
        date=existing_alarm_date,
        new_date=revised_alarm_date,
        new_recurrence=revised_repetition_schedule,
        bulk_operation=modify_all_alarms_at_once
    )


def postpone_ringing_alarm(snooze_until_specific_time=None, snooze_for_duration_in_seconds=None):
    """
    Snoozes an alarm that is firing.

    Args:
        snooze_until_specific_time (Optional[str]): The time to snooze until, in 12-hour format "H[:M[:S]]".
        snooze_for_duration_in_seconds (Optional[int]): Duration to snooze the alarm, in seconds.

    Returns:
        Dict[str, Any]: A dictionary containing the snooze result.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import snooze
    return snooze(time=snooze_until_specific_time, duration=snooze_for_duration_in_seconds)


def set_alarm_activation_status(
    alarm_identifiers_for_state_change=None,
    select_alarms_by_current_state=None,
    select_alarms_by_time=None,
    select_alarms_by_time_period=None,
    select_alarms_by_label=None,
    requested_state_change=None,
    select_alarms_by_date=None,
    select_alarms_after_date=None,
    select_alarms_before_date=None,
    apply_state_change_to_all=False
):
    """
    Changes an alarm's state or bulk changes all alarms' state.

    Args:
        alarm_identifiers_for_state_change (Optional[List[str]]): Alarm ids.
        select_alarms_by_current_state (Optional[str]): Type of the alarm to be modified.
        select_alarms_by_time (Optional[str]): Time of the day of the alarm.
        select_alarms_by_time_period (Optional[str]): One of AM, PM or UNKNOWN.
        select_alarms_by_label (Optional[str]): Alarm label.
        requested_state_change (Optional[str]): Operation to change the alarm state.
        select_alarms_by_date (Optional[str]): The date of the alarm to be modified.
        select_alarms_after_date (Optional[str]): Filter for alarm scheduled to fire on or after this date.
        select_alarms_before_date (Optional[str]): Filter for alarm scheduled to fire on or before this date.
        apply_state_change_to_all (bool): Whether to perform a bulk operation on all alarms.

    Returns:
        Dict[str, Any]: A dictionary containing the modified alarm information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import change_alarm_state
    return change_alarm_state(
        alarm_ids=alarm_identifiers_for_state_change,
        alarm_type=select_alarms_by_current_state,
        time_of_day=select_alarms_by_time,
        am_pm_or_unknown=select_alarms_by_time_period,
        label=select_alarms_by_label,
        state_operation=requested_state_change,
        date=select_alarms_by_date,
        start_date=select_alarms_after_date,
        end_date=select_alarms_before_date,
        bulk_operation=apply_state_change_to_all
    )


def delay_active_alarm(
    postponement_interval=None,
    postponement_target_time=None,
    postponement_time_period=None
):
    """
    Snoozes an alarm that has fired.

    Args:
        postponement_interval (Optional[str]): Duration to snooze the alarm in seconds.
        postponement_target_time (Optional[str]): The time of day to snooze the alarm until.
        postponement_time_period (Optional[str]): One of AM, PM or UNKNOWN.

    Returns:
        Dict[str, Any]: A dictionary containing the snooze result.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.AlarmApi import snooze_alarm
    return snooze_alarm(
        snooze_duration=postponement_interval,
        snooze_till_time_of_day=postponement_target_time,
        am_pm_or_unknown=postponement_time_period
    )
