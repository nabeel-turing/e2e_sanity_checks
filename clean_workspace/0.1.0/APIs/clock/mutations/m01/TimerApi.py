# This file is automatically generated by the MutationBuilder

def configure_new_timer(timer_countdown_duration=None, timer_end_time=None, timer_custom_label=None):
    """
    Create a new timer.

    This method can:
    1) Create a timer with a given duration. (For example, set a timer for 10 minutes.)
    2) Create a timer for a specific time. (For example, set a timer to go off at 10:30.)

    Args:
        timer_countdown_duration (Optional[str]): Duration of the timer, in the format such as e.g. 5h30m20s, 10m, 2m15s, etc.
        timer_end_time (Optional[str]): Time of the day that the timer should fire, in 12-hour format "H[:M[:S]]".
        timer_custom_label (Optional[str]): Label of the timer, if meaningful.

    Returns:
        Dict[str, Any]: A dictionary containing the created timer information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.TimerApi import create_timer
    return create_timer(
        duration=timer_countdown_duration,
        time=timer_end_time,
        label=timer_custom_label
    )


def find_and_display_timers(
    timer_search_query=None,
    filter_by_timer_state=None,
    filter_by_timer_identifiers=None
):
    """
    Shows the matching timers to the user.

    Args:
        timer_search_query (Optional[str]): Either the duration, time_of_day, or the label of the timer.
        filter_by_timer_state (Optional[str]): Type of the timer to show (UPCOMING, PAUSED, RUNNING).
        filter_by_timer_identifiers (Optional[List[str]]): The ids of the timers to be shown to the user.

    Returns:
        Dict[str, Any]: A dictionary containing matching timers.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.TimerApi import show_matching_timers
    return show_matching_timers(
        query=timer_search_query,
        timer_type=filter_by_timer_state,
        timer_ids=filter_by_timer_identifiers
    )


def update_timers_with_filters(
    timer_selection_criteria=None,
    timer_attributes_to_change=None,
    apply_to_all_matching_timers=False
):
    """
    Modifies a timer or multiple timers' label, duration, or state.

    Args:
        timer_selection_criteria (Optional[Dict[str, Any]]): Filters to identify the existing timers that need to be modified.
        timer_attributes_to_change (Optional[Dict[str, Any]]): Modifications to make to the existing timers.
        apply_to_all_matching_timers (bool): Only true when the user wants to perform a bulk operation on all timers.

    Returns:
        Dict[str, Any]: A dictionary containing the modified timer information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.TimerApi import modify_timer_v2
    return modify_timer_v2(
        filters=timer_selection_criteria,
        modifications=timer_attributes_to_change,
        bulk_operation=apply_to_all_matching_timers
    )


def adjust_timer_properties(
    search_term_for_timer=None,
    target_timer_state=None,
    updated_timer_duration=None,
    additional_time_for_timer=None,
    updated_timer_name=None,
    target_timer_identifiers=None,
    modify_all_timers_at_once=False
):
    """
    Modifies timer(s)'s duration or label.

    Args:
        search_term_for_timer (Optional[str]): Either the duration or the label of the timer.
        target_timer_state (Optional[str]): Either UPCOMING, PAUSED or RUNNING.
        updated_timer_duration (Optional[str]): New duration that the timer should be updated to.
        additional_time_for_timer (Optional[str]): The duration to add to the current timer.
        updated_timer_name (Optional[str]): The new label to be updated to.
        target_timer_identifiers (Optional[List[str]]): Timer ids.
        modify_all_timers_at_once (bool): Whether to perform a bulk operation on all timers.

    Returns:
        Dict[str, Any]: A dictionary containing the modified timer information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.TimerApi import modify_timer
    return modify_timer(
        query=search_term_for_timer,
        timer_type=target_timer_state,
        new_duration=updated_timer_duration,
        duration_to_add=additional_time_for_timer,
        new_label=updated_timer_name,
        timer_ids=target_timer_identifiers,
        bulk_operation=modify_all_timers_at_once
    )


def set_timer_run_status(
    timer_identifiers_for_state_change=None,
    select_timers_by_current_state=None,
    select_timers_by_duration=None,
    select_timers_by_label=None,
    requested_timer_action=None,
    apply_action_to_all_timers=False
):
    """
    Changes timers' state such as to resume, pause, reset, cancel, delete, stop, dismiss etc.

    Args:
        timer_identifiers_for_state_change (Optional[List[str]]): Timer ids.
        select_timers_by_current_state (Optional[str]): Either UPCOMING, PAUSED or RUNNING.
        select_timers_by_duration (Optional[str]): Duration of the timer that should be modified.
        select_timers_by_label (Optional[str]): The label of the timer that should be modified.
        requested_timer_action (Optional[str]): Operation to change the timer state.
        apply_action_to_all_timers (bool): Whether to perform a bulk operation on all timers.

    Returns:
        Dict[str, Any]: A dictionary containing the modified timer information.

    Raises:
        TypeError: If parameters are not of the expected type
        ValueError: If validation fails
    """
    from clock.TimerApi import change_timer_state
    return change_timer_state(
        timer_ids=timer_identifiers_for_state_change,
        timer_type=select_timers_by_current_state,
        duration=select_timers_by_duration,
        label=select_timers_by_label,
        state_operation=requested_timer_action,
        bulk_operation=apply_action_to_all_timers
    )
