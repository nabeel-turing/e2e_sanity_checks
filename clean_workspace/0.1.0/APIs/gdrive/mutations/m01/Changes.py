# This file is automatically generated by the MutationBuilder

def request_initial_change_cursor(
    target_drive_id_for_token='',
    enable_all_drives_for_token=False,
    enable_team_drives_for_token=False,
    target_team_drive_id_for_token=''
):
    """
    Gets the starting pageToken for listing future changes.

    This method retrieves a starting page token that can be used to list changes
    to files in a user's Drive or a shared drive. The page token doesn't expire
    and should be stored for subsequent change tracking operations.

    Args:
        target_drive_id_for_token (Optional[str]): The ID of the shared drive for which the starting 
            pageToken for listing future changes will be returned. Must be a valid 
            shared drive ID if provided. Defaults to empty string (user's My Drive).
        enable_all_drives_for_token (Optional[bool]): Whether the requesting application 
            supports both My Drives and shared drives. When True, enables access 
            to shared drive content. Defaults to False.
        enable_team_drives_for_token (Optional[bool]): **DEPRECATED** - Use supportsAllDrives 
            instead. This parameter will be removed in a future version. Defaults to False.
        target_team_drive_id_for_token (Optional[str]): **DEPRECATED** - Use driveId instead. 
            This parameter will be removed in a future version. Defaults to empty string.

    Returns:
        Dict[str, Any]: Dictionary containing the start page token with keys:
            - 'kind' (str): Resource type identifier ('drive#startPageToken').
            - 'startPageToken' (str): The starting page token for listing changes.
                This is an opaque string that can be used in subsequent calls to
                changes.list() to retrieve changes from this point forward.

    Raises:
        ValidationError: If input parameters are invalid (e.g., invalid target_drive_id_for_token format).
        InvalidRequestError: If the request is malformed or contains conflicting parameters.
    """
    from gdrive.Changes import getStartPageToken
    return getStartPageToken(
        driveId=target_drive_id_for_token,
        supportsAllDrives=enable_all_drives_for_token,
        supportsTeamDrives=enable_team_drives_for_token,
        teamDriveId=target_team_drive_id_for_token
    )


def fetch_drive_modifications(
    change_log_page_token,
    target_drive_id_for_changes='',
    show_corpus_removals=False,
    scan_all_drives_for_changes=False,
    report_removed_items=True,
    report_team_drive_item_changes=False,
    changes_per_page_limit=100,
    limit_to_my_drive_changes=False,
    data_spaces_to_query='drive',
    enable_all_drives_change_scan=False,
    enable_team_drives_change_scan=False,
    target_team_drive_id_for_changes='',
    fetch_permissions_for_view_in_changes='',
    fetch_labels_in_changes=''
):
    """
    Lists the changes for a user or shared drive.

    This method retrieves a list of changes that have occurred since the specified 
    page token. Changes include file additions, modifications, deletions, and 
    permission changes.

    Args:
        change_log_page_token (str): The token for continuing a previous list request on the next page.
            This token is obtained from a previous changes.list request or from 
            changes.getStartPageToken(). Cannot be empty.
        target_drive_id_for_changes (str): The ID of the shared drive for which changes are returned.
            Only changes to files within this shared drive will be returned.
            Defaults to empty string (user's My Drive).
        show_corpus_removals (bool): Whether changes should include the file resource 
            if the file is still accessible by the user at the time of the request.
            Defaults to False.
        scan_all_drives_for_changes (bool): Whether both My Drive and shared drive items 
            should be included in results. Defaults to False.
        report_removed_items (bool): Whether to include changes indicating that items have 
            been removed from the list of changes. Defaults to True.
        report_team_drive_item_changes (bool): **DEPRECATED** - Use includeItemsFromAllDrives 
            instead. Whether to include changes for team drive items. Defaults to False.
        changes_per_page_limit (int): Maximum number of changes to return per page. Must be between 
            1 and 1000 inclusive. Defaults to 100.
        limit_to_my_drive_changes (bool): Whether to restrict the results to changes inside 
            the My Drive hierarchy. This cannot be used together with teamDriveId or driveId.
            Defaults to False.
        data_spaces_to_query (str): A comma-separated list of spaces to query within the user corpus.
            Supported values are 'drive', 'appDataFolder', and 'photos'. Defaults to 'drive'.
        enable_all_drives_change_scan (bool): Whether the requesting application supports both 
            My Drives and shared drives. Defaults to False.
        enable_team_drives_change_scan (bool): **DEPRECATED** - Use supportsAllDrives instead.
            Whether the requesting application supports Team Drives. Defaults to False.
        target_team_drive_id_for_changes (str): **DEPRECATED** - Use driveId instead. The ID of the Team Drive 
            for which changes will be returned. Defaults to empty string.
        fetch_permissions_for_view_in_changes (str): Specifies which additional view's permissions 
            to include in the response. Only 'published' is supported. Defaults to empty string.
        fetch_labels_in_changes (str): A comma-separated list of IDs of labels to include in 
            the labelInfo part of the response. Defaults to empty string.

    Returns:
        Dict[str, Any]: Dictionary containing the list of changes with keys:
            - 'kind' (str): Resource type identifier ('drive#changeList').
            - 'nextPageToken' (str): The page token for the next page of changes, 
                or None if there are no more changes.
            - 'newStartPageToken' (str): The starting page token for future changes.
                This token can be used for subsequent changes.list() calls.
            - 'changes' (List[Dict[str, Any]]): List of change objects, each with keys:
                - 'kind' (str): Resource type identifier ('drive#change').
                - 'type' (str): The type of the change ('file' or 'drive').
                - 'changeType' (str): The type of change ('file' for file changes).
                - 'time' (str): The time of this change in RFC 3339 format.
                - 'removed' (bool): Whether the file or shared drive has been removed.
                - 'fileId' (str): The ID of the file which has changed (if type is 'file').
                - 'file' (Dict[str, Any]): The updated state of the file (if type is 'file').
                - 'driveId' (str): The ID of the shared drive the file belongs to.

    Raises:
        ValidationError: If input parameters are invalid (e.g., empty change_log_page_token, 
            invalid changes_per_page_limit range, invalid data_spaces_to_query format).
        InvalidRequestError: If the request contains conflicting parameters or 
            if the change_log_page_token is malformed.
    """
    from gdrive.Changes import list
    return list(
        pageToken=change_log_page_token,
        driveId=target_drive_id_for_changes,
        includeCorpusRemovals=show_corpus_removals,
        includeItemsFromAllDrives=scan_all_drives_for_changes,
        includeRemoved=report_removed_items,
        includeTeamDriveItems=report_team_drive_item_changes,
        pageSize=changes_per_page_limit,
        restrictToMyDrive=limit_to_my_drive_changes,
        spaces=data_spaces_to_query,
        supportsAllDrives=enable_all_drives_change_scan,
        supportsTeamDrives=enable_team_drives_change_scan,
        teamDriveId=target_team_drive_id_for_changes,
        includePermissionsForView=fetch_permissions_for_view_in_changes,
        includeLabels=fetch_labels_in_changes
    )


def monitor_drive_modifications(
    starting_page_token_for_watch,
    watch_channel_configuration=None,
    drive_id_to_watch='',
    notify_on_corpus_removals=False,
    watch_all_drives=False,
    notify_on_item_removal=True,
    watch_team_drive_items=False,
    notification_batch_size=100,
    limit_watch_to_my_drive=False,
    spaces_to_monitor='drive',
    enable_all_drives_monitoring=False,
    enable_team_drives_monitoring=False,
    team_drive_id_to_watch='',
    include_view_permissions_in_notifications='',
    include_labels_in_notifications=''
):
    """
    Creates a simulated notification channel for watching changes in Google Drive.

    This function simulates setting up a watch channel for changes to files in 
    a user's Drive or shared drive. In the simulation, it stores the channel 
    configuration and validates the watch parameters, but does not establish 
    actual real-time notifications.

    Args:
        starting_page_token_for_watch (str): The token for the initial page of changes to watch from.
            This token is obtained from changes.getStartPageToken() or a previous 
            changes.list request. Cannot be empty.
        watch_channel_configuration (Optional[Dict[str, Any]]): Dictionary of notification channel 
            properties. If None, a minimal channel will be created. Expected keys:
            - 'id' (str): Required. Unique identifier for the channel.
            - 'type' (str): Required. Channel type, typically 'web_hook'.
            - 'address' (str): Required. URL where notifications are delivered.
            - 'resourceId' (str): Optional. ID of the resource being watched.
            - 'resourceUri' (str): Optional. URI of the resource being watched.
            - 'token' (str): Optional. Token for authenticating the channel.
            - 'expiration' (str): Optional. Expiration time in RFC 3339 format.
            - 'payload' (bool): Optional. Whether to include payload in notifications.
            - 'params' (Dict[str, Any]): Optional. Additional channel parameters.
        drive_id_to_watch (str): The ID of the shared drive for which changes are watched.
            Only changes to files within this shared drive will trigger notifications.
            Defaults to empty string (user's My Drive).
        notify_on_corpus_removals (bool): Whether the watch should include notifications 
            for files that are removed from the corpus but still accessible.
            Defaults to False.
        watch_all_drives (bool): Whether to watch changes in both My Drive 
            and shared drives. Defaults to False.
        notify_on_item_removal (bool): Whether to include notifications for removed items.
            Defaults to True.
        watch_team_drive_items (bool): **DEPRECATED** - Use includeItemsFromAllDrives 
            instead. Whether to include changes for team drive items. Defaults to False.
        notification_batch_size (int): Maximum number of changes to return per notification. 
            Must be between 1 and 1000 inclusive. Defaults to 100.
        limit_watch_to_my_drive (bool): Whether to restrict notifications to changes 
            inside the My Drive hierarchy only. Cannot be used with driveId or teamDriveId.
            Defaults to False.
        spaces_to_monitor (str): A comma-separated list of spaces to watch for changes.
            Supported values are 'drive', 'appDataFolder', and 'photos'. Defaults to 'drive'.
        enable_all_drives_monitoring (bool): Whether the requesting application supports both 
            My Drives and shared drives. Required when driveId is specified. Defaults to False.
        enable_team_drives_monitoring (bool): **DEPRECATED** - Use supportsAllDrives instead.
            Whether the application supports Team Drives. Defaults to False.
        team_drive_id_to_watch (str): **DEPRECATED** - Use driveId instead. The ID of the Team Drive 
            to watch for changes. Defaults to empty string.
        include_view_permissions_in_notifications (str): Specifies which additional view's permissions 
            to include in change notifications. Only 'published' is supported. 
            Defaults to empty string.
        include_labels_in_notifications (str): A comma-separated list of label IDs to include in 
            the labelInfo part of change notifications. Defaults to empty string.

    Returns:
        Dict[str, Any]: Dictionary containing the created channel resource with keys:
            - 'kind' (str): Resource type identifier ('api#channel').
            - 'id' (str): The unique ID of the channel.
            - 'resourceId' (str): ID of the resource being watched (from input or auto-generated).
            - 'resourceUri' (str): URI of the resource being watched (from input or empty string).
            - 'token' (str): Authentication token for the channel.
            - 'expiration' (str): Channel expiration time in RFC 3339 format.
            - 'type' (str): The type of the channel (e.g., 'web_hook').
            - 'address' (str): URL where notifications are delivered.
            - 'payload' (bool): Whether notifications include payload.
            - 'params' (Dict[str, Any]): Additional channel parameters.
            - 'watchConfig' (Dict[str, Any]): Configuration for what changes to watch.

    Raises:
        ValidationError: If input parameters are invalid (e.g., empty starting_page_token_for_watch, 
            invalid notification_batch_size range, missing required channel properties, invalid spaces_to_monitor format).
        InvalidRequestError: If the request contains conflicting parameters, 
            malformed starting_page_token_for_watch, or invalid channel configuration.
    """
    from gdrive.Changes import watch
    return watch(
        pageToken=starting_page_token_for_watch,
        resource=watch_channel_configuration,
        driveId=drive_id_to_watch,
        includeCorpusRemovals=notify_on_corpus_removals,
        includeItemsFromAllDrives=watch_all_drives,
        includeRemoved=notify_on_item_removal,
        includeTeamDriveItems=watch_team_drive_items,
        pageSize=notification_batch_size,
        restrictToMyDrive=limit_watch_to_my_drive,
        spaces=spaces_to_monitor,
        supportsAllDrives=enable_all_drives_monitoring,
        supportsTeamDrives=enable_team_drives_monitoring,
        teamDriveId=team_drive_id_to_watch,
        includePermissionsForView=include_view_permissions_in_notifications,
        includeLabels=include_labels_in_notifications
    )
