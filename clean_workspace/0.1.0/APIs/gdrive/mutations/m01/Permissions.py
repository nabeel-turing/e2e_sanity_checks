# This file is automatically generated by the MutationBuilder

def grant_file_access(target_file_for_permission_id, permission_details=None):
    """
    Creates a permission for a file or shared drive.

    Args:
        target_file_for_permission_id (str): The ID of the file or shared drive.
        permission_details (Optional[Dict[str, Any]]): Dictionary of permission properties with keys:
            - 'role' (str): The role granted by this permission, defaults to 'reader' (alias for 'viewer'). Possible values:
                - 'viewer': Can view the file
                - 'commenter': Can view and comment on the file
                - 'editor': Can view, comment, and edit the file
                - 'owner': Has full control over the file
            - 'type' (str): The type of the grantee, defaults to 'user'. Possible values:
                - 'user': Permission granted to a specific user
                - 'group': Permission granted to a group
                - 'domain': Permission granted to a domain
                - 'anyone': Permission granted to anyone with the link
            - 'emailAddress' (str): The email address of the user or group to grant the permission to. This will be normalized to lowercase.
            - 'domain' (str): The domain name (e.g. 'example.com') of the entity this permission refers to.
            - 'allowFileDiscovery' (bool): Whether the permission allows the file to be discovered through search, defaults to False.
            - 'expirationTime' (str): The time at which this permission will expire, in RFC 3339 format. Example: `'2025-06-30T12:00:00Z'` (UTC) or `'2025-06-30T08:00:00-04:00'`.

    Returns:
        Dict[str, Any]: Dictionary containing the created permission with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#permission').
            - 'id' (str): Permission ID.
            - 'role' (str): The role granted by this permission.
            - 'type' (str): The type of the grantee.
            - 'emailAddress' (str): The email address of the user or group.
            - 'domain' (str): The domain name of the entity this permission refers to.
            - 'allowFileDiscovery' (bool): Whether the permission allows the file to be discovered through search.
            - 'expirationTime' (str): The time at which this permission will expire, in RFC 3339 format.

    Raises:
        TypeError: If `target_file_for_permission_id` is not a string.
        ValueError: If `target_file_for_permission_id` is an empty string.
        ResourceNotFoundError: If `target_file_for_permission_id` is not found in user's files or shared drives.
        ValidationError: If `permission_details` is provided and does not conform to the
            required structure (e.g., invalid 'role' or 'type' values,
            incorrect data type for 'allowFileDiscovery').
    """
    from gdrive.Permissions import create
    return create(fileId=target_file_for_permission_id, body=permission_details)


def revoke_file_access(
    target_file_id_for_revocation,
    permission_id_to_revoke,
    enable_all_drives_access_for_revocation=False,
    enable_team_drives_access_for_revocation=False,
    as_domain_administrator=False
):
    """
    Deletes a permission.

    Args:
        target_file_id_for_revocation (str): The ID of the file or shared drive.
        permission_id_to_revoke (str): The ID of the permission to delete.
        enable_all_drives_access_for_revocation (Optional[bool]): Whether to support all drives. Defaults to False.
        enable_team_drives_access_for_revocation (Optional[bool]): Whether to support team drives. Defaults to False.
        as_domain_administrator (Optional[bool]): Whether to use domain admin access. Defaults to False.

    Returns:
        None: The function returns None on successful deletion.

    Raises:
        TypeError: If `target_file_id_for_revocation` or `permission_id_to_revoke` is not a string, or if any of
                   the boolean flags are not booleans.
        ValueError: If `target_file_id_for_revocation` or `permission_id_to_revoke` is an empty or whitespace-only string.
        ResourceNotFoundError: If the specified `target_file_id_for_revocation` or `permission_id_to_revoke` cannot be found.
        PermissionDeniedError: If the user lacks sufficient permissions. For shared drive
                               items, 'organizer' role is required. For other items,
                               'owner' or 'editor' (writer) is required, though editors
                               cannot remove owners.
        LastOwnerDeletionError: If an attempt is made to delete the permission of the
                                last owner of a file.
    """
    from gdrive.Permissions import delete
    return delete(
        fileId=target_file_id_for_revocation,
        permissionId=permission_id_to_revoke,
        supportsAllDrives=enable_all_drives_access_for_revocation,
        supportsTeamDrives=enable_team_drives_access_for_revocation,
        useDomainAdminAccess=as_domain_administrator
    )


def fetch_permission_details(
    file_identifier_for_permission_lookup,
    permission_identifier_to_get,
    check_all_drives=False,
    check_team_drives=False,
    use_domain_admin_privileges=False
):
    """
    Gets a permission by ID.

    Retrieves a specific permission by its ID for the specified file. The function
    supports various access patterns including shared drives and domain admin access.

    Args:
        file_identifier_for_permission_lookup (str): The ID of the file or shared drive. Must be a non-empty string.
        permission_identifier_to_get (str): The ID of the permission to retrieve. Must be a non-empty string.
        check_all_drives (bool): Whether the requesting application supports both My Drives 
            and shared drives. Defaults to False.
        check_team_drives (bool): Whether to support team drives. Deprecated - use 
            supportsAllDrives instead. Defaults to False.
        use_domain_admin_privileges (bool): Issue the request as a domain administrator. If set to 
            true, grants access if the file ID refers to a shared drive and the requester 
            is an administrator of the domain to which the shared drive belongs. Defaults to False.

    Returns:
        Optional[Dict[str, Any]]: Dictionary containing the permission with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#permission').
            - 'id' (str): Permission ID.
            - 'role' (str): The role granted by this permission.
            - 'type' (str): The type of the grantee.
            - 'emailAddress' (str): The email address of the user or group.
            - 'domain' (str): The domain name of the entity this permission refers to.
            - 'allowFileDiscovery' (bool): Whether the permission allows the file to be discovered through search.
            - 'expirationTime' (str): The time at which this permission will expire.

    Raises:
        TypeError: If any parameter is not of the expected type.
        ValueError: If file_identifier_for_permission_lookup or permission_identifier_to_get is empty or invalid.
    """
    from gdrive.Permissions import get
    return get(
        fileId=file_identifier_for_permission_lookup,
        permissionId=permission_identifier_to_get,
        supportsAllDrives=check_all_drives,
        supportsTeamDrives=check_team_drives,
        useDomainAdminAccess=use_domain_admin_privileges
    )


def enumerate_file_permissions(
    subject_file_id,
    include_all_drives_permissions=False,
    include_team_drives_permissions=False,
    fetch_with_domain_admin_access=False
):
    """
    Lists a file's or shared drive's permissions.

    Args:
        subject_file_id (str): The ID of the file or shared drive.
        include_all_drives_permissions (Optional[bool]): Whether to support all drives. If True, includes permissions from all drives. Defaults to False.
        include_team_drives_permissions (Optional[bool]): Whether to support team drives. If True, includes team drive specific permissions. Defaults to False.
        fetch_with_domain_admin_access (Optional[bool]): Whether to use domain admin access. If True, includes domain-wide permissions. Defaults to False.

    Returns:
        Dict[str, Any]: Dictionary containing the list of permissions with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#permissionList').
            - 'permissions' (List[PermissionResourceModel]): List of permission objects, each with the following keys:
                - 'kind' (str): Identifies the resource as 'drive#permission'.
                - 'id' (str): The unique ID for this permission.
                - 'role' (str): The role granted by this permission (e.g., 'owner', 'editor', 'reader').
                - 'type' (str): The type of the grantee (e.g., 'user', 'group', 'domain', 'anyone').
                - 'emailAddress' (Optional[str]): The email address of the user or group this permission refers to.
                - 'domain' (Optional[str]): The domain to which this permission applies.
                - 'allowFileDiscovery' (Optional[bool]): Whether this permission allows the file to be discovered through search. Defaults to False.
                - 'expirationTime' (Optional[str]): The RFC 3339 formatted time at which this permission will expire.
                - 'displayName' (Optional[str]): The display name of the user or group.
    Raises:
        TypeError: If any of the input arguments do not match their expected types
                   (e.g., if subject_file_id is not a string, or boolean flags are not booleans).
        NotFoundError: If no file matching `subject_file_id` exists for the current user.
    """
    from gdrive.Permissions import list
    return list(
        fileId=subject_file_id,
        supportsAllDrives=include_all_drives_permissions,
        supportsTeamDrives=include_team_drives_permissions,
        useDomainAdminAccess=fetch_with_domain_admin_access
    )


def modify_file_access_permission(
    file_id_for_permission_update,
    permission_id_to_modify,
    permission_update_payload=None,
    assign_new_owner=False
):
    """
    Updates a permission with patch semantics.

    Args:
        file_id_for_permission_update (str): The ID of the file or shared drive.
        permission_id_to_modify (str): The ID of the permission to update.
        permission_update_payload (Optional[Dict[str, Any]]): Dictionary of permission properties to update with keys:
            - 'role' (str): The role granted by this permission. Possible values:
                - 'viewer': Can view the file, (alias for 'reader')
                - 'commenter': Can view and comment on the file
                - 'editor': Can view, comment, and edit the file (alias for 'writer')
                - 'owner': Has full control over the file
            - 'type' (str): The type of the grantee. Possible values:
                - 'user': Permission granted to a specific user
                - 'group': Permission granted to a group
                - 'domain': Permission granted to a domain
                - 'anyone': Permission granted to anyone with the link
            - 'emailAddress' (str): The email address of the user or group.
            - 'domain' (str): The domain name of the entity this permission refers to.
            - 'allowFileDiscovery' (bool): Whether the permission allows the file to be discovered through search.
            - 'expirationTime' (str): The time at which this permission will expire.
        assign_new_owner (bool): Whether to transfer ownership to the specified user and downgrade the current owner to a writer.

    Returns:
        Dict[str, Any]: Dictionary containing the updated permission with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#permission').
            - 'id' (str): Permission ID.
            - 'role' (str): The role granted by this permission.
            - 'type' (str): The type of the grantee.
            - 'emailAddress' (str): The email address of the user or group.
            - 'domain' (str): The domain name of the entity this permission refers to.
            - 'allowFileDiscovery' (bool): Whether the permission allows the file to be discovered through search.
            - 'expirationTime' (str): The time at which this permission will expire.

    Raises:
        TypeError: If 'file_id_for_permission_update' or 'permission_id_to_modify' are not strings, or
                   if 'assign_new_owner' is not a boolean.
        ValidationError: If 'permission_update_payload' is provided and does not conform to the expected structure.
        LookupError: If the specified 'permission_id_to_modify' is not found (both for standard updates and ownership transfers),
                    or if the file with the given 'file_id_for_permission_update' could not be found or created.
        ValueError: If attempting to transfer ownership to a permission lacking an email address, 
                    or if trying to set 'role' to 'owner' without 'assign_new_owner=True'.
    """
    from gdrive.Permissions import update
    return update(
        fileId=file_id_for_permission_update,
        permissionId=permission_id_to_modify,
        body=permission_update_payload,
        transferOwnership=assign_new_owner
    )
