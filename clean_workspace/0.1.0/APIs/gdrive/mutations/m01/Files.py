# This file is automatically generated by the MutationBuilder

def duplicate_drive_item(
    source_file_identifier,
    copy_metadata=None,
    override_domain_visibility=False,
    preserve_revision_indefinitely=False,
    optical_char_recognition_language='',
    enable_all_drives_support=False,
    enable_team_drives_support=False,
    specify_view_permissions_to_include='',
    specify_labels_to_include=''
):
    """
    Creates a copy of a file if quota allows.

    Args:
        source_file_identifier (str): The ID of the file to copy. Must be a non-empty string.
        copy_metadata (Optional[Dict[str, Any]]): Dictionary of file properties with keys:
            - 'name' (Optional[str]): Name of the copied file. If not provided, defaults to "Copy of {original_file_name}".
            - 'parents' (Optional[List[str]]): List of parent folder IDs. If not provided, inherits from original file.
            - 'permissions' (Optional[List[Dict[str, Any]]]): List of permission objects. Each permission object may include the following fields:
                - 'id' (str): Permission ID.
                - 'role' (str): The role granted by this permission. Allowed values:
                    - 'viewer': Can view the file
                    - 'commenter': Can view and comment on the file
                    - 'editor': Can view, comment, and edit the file
                    - 'owner': Has full control over the file
                - 'type' (str): The type of the grantee. Allowed values:
                    - 'user': Permission granted to a specific user
                    - 'group': Permission granted to a group
                    - 'domain': Permission granted to a domain
                    - 'anyone': Permission granted to anyone with the link
                - 'emailAddress' (Optional[str]): The email address of the user or group.
                - 'domain' (Optional[str]): The domain name of the entity this permission refers to.
                - 'allowFileDiscovery' (Optional[bool]): Whether the permission allows the file to be discovered through search.
                - 'expirationTime' (Optional[str]): The time at which this permission will expire, in RFC 3339 format.
              If not provided, permissions are inherited from the original file.
        override_domain_visibility (Optional[bool]): Whether to ignore default visibility set by domain administrators. Defaults to False.
        preserve_revision_indefinitely (Optional[bool]): Whether to keep revision forever. Defaults to False.
        optical_char_recognition_language (Optional[str]): The language to use for OCR. Defaults to empty string.
        enable_all_drives_support (Optional[bool]): Whether to support all drives. Defaults to False.
        enable_team_drives_support (Optional[bool]): Whether to support team drives. Defaults to False.
        specify_view_permissions_to_include (Optional[str]): Specifies which additional view's permissions to include. Defaults to empty string.
        specify_labels_to_include (Optional[str]): Comma-separated list of labels to include. Defaults to empty string.

    Returns:
        Dict[str, Any]: Dictionary containing the copied file, or an empty dictionary if the original
                        file is not found. Keys for a successful copy include:
            - 'kind' (str): Resource type identifier (e.g., 'drive#file').
            - 'id' (str): File ID.
            - 'name' (str): File name.
            - 'mimeType' (str): MIME type of the file.
            - 'parents' (List[str]): List of parent folder IDs.
            - 'createdTime' (str): Creation timestamp.
            - 'modifiedTime' (str): Last modification timestamp.
            - 'trashed' (bool): Whether the file is in trash.
            - 'starred' (bool): Whether the file is starred.
            - 'owners' (List[str]): List of owner email addresses.
            - 'size' (str): File size in bytes.
            - 'permissions' (List[Dict[str, Any]]): List of permission objects. Each permission object may include the following fields:
                - 'id' (str): Permission ID.
                - 'role' (str): The role granted by this permission. Allowed values:
                    - 'viewer': Can view the file
                    - 'commenter': Can view and comment on the file
                    - 'editor': Can view, comment, and edit the file
                    - 'owner': Has full control over the file
                - 'type' (str): The type of the grantee. Allowed values:
                    - 'user': Permission granted to a specific user
                    - 'group': Permission granted to a group
                    - 'domain': Permission granted to a domain
                    - 'anyone': Permission granted to anyone with the link
                - 'emailAddress' (Optional[str]): The email address of the user or group.
                - 'domain' (Optional[str]): The domain name of the entity this permission refers to.
                - 'allowFileDiscovery' (Optional[bool]): Whether the permission allows the file to be discovered through search.
                - 'expirationTime' (Optional[str]): The time at which this permission will expire, in RFC 3339 format.

    Raises:
        TypeError: If any argument is of an incorrect type.
        ValueError: If source_file_identifier is empty, contains only whitespace, or if the file is not found (with appropriate drive support flags).
        ValidationError: If 'file_metadata' is provided and does not conform to the FileCopyBodyModel structure.
        QuotaExceededError: If the storage quota would be exceeded by copying the file.
    """
    from gdrive.Files import copy
    return copy(
        fileId=source_file_identifier,
        body=copy_metadata,
        ignoreDefaultVisibility=override_domain_visibility,
        keepRevisionForever=preserve_revision_indefinitely,
        ocrLanguage=optical_char_recognition_language,
        supportsAllDrives=enable_all_drives_support,
        supportsTeamDrives=enable_team_drives_support,
        includePermissionsForView=specify_view_permissions_to_include,
        includeLabels=specify_labels_to_include
    )


def add_new_drive_item(
    item_properties=None,
    upload_content_details=None,
    require_single_parent=False,
    disregard_default_visibility_settings=False,
    retain_revision_permanently=False,
    set_ocr_language_code='',
    allow_operations_on_all_drives=False,
    allow_operations_on_team_drives=False,
    make_content_searchable=False,
    additional_view_permissions_list='',
    comma_separated_labels_list=''
):
    """
    Creates a new file or folder with permissions if quota allows.

    Args:
        item_properties (Optional[Dict[str, Any]]): Dictionary of file properties with keys:
            - 'name' (str): Name of the file.
            - 'mimeType' (str): MIME type of the file. Can be:
                - 'application/vnd.google-apps.document'
                - 'application/vnd.google-apps.spreadsheet'
                - 'application/vnd.google-apps.presentation'
                - 'application/vnd.google-apps.drawing'
                - 'application/vnd.google-apps.folder'
                - 'application/vnd.google-apps.script'
            - 'parents' (List[str]): List of parent folder IDs.
            - 'size' (str): File size in bytes (string that must be convertible to integer).
            - 'permissions' (List[Dict[str, Any]]): List of permission objects with keys:
                - 'id' (str): Permission ID
                - 'role' (str): Permission role (e.g., 'owner', 'reader', 'writer')
                - 'type' (str): Permission type (e.g., 'user', 'group', 'domain', 'anyone')
                - 'emailAddress' (str): Email address for user/group permissions
        upload_content_details (Optional[Dict[str, Any]]): Dictionary containing media content properties with keys:
            - 'size' (int): File size in bytes.
            - 'md5Checksum' (str): MD5 checksum of the file content.
            - 'sha1Checksum' (str): SHA1 checksum of the file content.
            - 'sha256Checksum' (str): SHA256 checksum of the file content.
            - 'mimeType' (str): MIME type of the file content.
            - 'imageMediaMetadata' (Dict[str, Any]): Metadata for image files.
            - 'videoMediaMetadata' (Dict[str, Any]): Metadata for video files.
            - 'filePath' (str): Path to file for content upload.
        require_single_parent (Optional[bool]): Whether to enforce single parent. Defaults to False.
        disregard_default_visibility_settings (Optional[bool]): Whether to ignore default visibility. Defaults to False.
        retain_revision_permanently (Optional[bool]): Whether to keep revision forever. Defaults to False.
        set_ocr_language_code (Optional[str]): The language to use for OCR. Defaults to empty string.
        allow_operations_on_all_drives (Optional[bool]): Whether to support all drives. Defaults to False.
        allow_operations_on_team_drives (Optional[bool]): Whether to support team drives. Defaults to False.
        make_content_searchable (Optional[bool]): Whether to use content as indexable text. Defaults to False.
        additional_view_permissions_list (Optional[str]): Specifies which additional view's permissions to include. Defaults to empty string.
        comma_separated_labels_list (Optional[str]): Comma-separated list of labels to include. Defaults to empty string.

    Returns:
        Dict[str, Any]: Dictionary containing the created file with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#file').
            - 'id' (str): File ID.
            - 'driveId' (str): Shared drive ID if applicable.
            - 'name' (str): File name.
            - 'mimeType' (str): MIME type of the file or folder.
            - 'parents' (List[str]): List of parent folder IDs.
            - 'createdTime' (str): Creation timestamp.
            - 'modifiedTime' (str): Last modification timestamp.
            - 'trashed' (bool): Whether the file is in trash.
            - 'starred' (bool): Whether the file is starred.
            - 'owners' (List[str]): List of owner email addresses.
            - 'size' (str): File size in bytes.
            - 'md5Checksum' (str): MD5 checksum of the file.
            - 'sha1Checksum' (str): SHA1 checksum of the file.
            - 'sha256Checksum' (str): SHA256 checksum of the file.
            - 'imageMediaMetadata' (Dict[str, Any]): Metadata for image files.
            - 'videoMediaMetadata' (Dict[str, Any]): Metadata for video files.
            - 'permissions' (List[Dict[str, Any]]): List of permission objects.
            - 'content' (Dict[str, Any]): File content with metadata (if content was uploaded). Contains:
                - 'data' (str): Text or Base64 encoded content data
                - 'encoding' (str): Content encoding ('text' or 'base64')
                - 'checksum' (str): SHA256 checksum for integrity verification
                - 'version' (str): Content version
                - 'lastContentUpdate' (str): Timestamp of last content update
            - 'revisions' (List[Dict[str, Any]]): List of file revisions (if content was uploaded). Contains:
                - 'id' (str): Revision ID
                - 'mimeType' (str): MIME type of the revision
                - 'modifiedTime' (str): When the revision was created
                - 'keepForever' (bool): Whether to keep this revision forever
                - 'originalFilename' (str): Original filename
                - 'size' (str): File size in bytes
                - 'content' (Dict[str, Any]): Revision content with metadata. Contains:
                    - 'data' (str): Text or Base64 encoded content data
                    - 'encoding' (str): Content encoding ('text' or 'base64')
                    - 'checksum' (str): SHA256 checksum for integrity verification
            - 'enforceSingleParent' (bool): Single parent enforcement setting.
            - 'ignoreDefaultVisibility' (bool): Default visibility setting.
            - 'keepRevisionForever' (bool): Revision retention setting.
            - 'ocrLanguage' (str): OCR language setting.
            - 'supportsAllDrives' (bool): All drives support setting.
            - 'supportsTeamDrives' (bool): Team drives support setting.
            - 'useContentAsIndexableText' (bool): Content indexing setting.
            - 'includePermissionsForView' (str): View permissions setting.
            - 'includeLabels' (str): Labels setting.
            - 'revisionSettings' (Dict[str, Any]): Revision settings with keys:
                - 'keepForever' (bool): Whether to keep revisions forever
            - 'ocrMetadata' (Dict[str, Any]): OCR metadata with keys:
                - 'ocrLanguage' (str): OCR language code
                - 'ocrStatus' (str): OCR processing status
            - 'indexableText' (str): Extracted indexable text content.
            - 'additionalPermissions' (List[Dict[str, Any]]): Additional view permissions.
            - 'labels' (List[str]): List of parsed labels.

            Additional keys for specific MIME types:
            For 'application/vnd.google-apps.spreadsheet':
            - 'sheets' (List[Dict[str, Any]]): List of sheet objects with properties
            - 'data' (Dict[str, Any]): Spreadsheet data

            For 'application/vnd.google-apps.document':
            - 'content' (List[Any]): Document content
            - 'tabs' (List[Any]): Document tabs
            - 'suggestionsViewMode' (str): Suggestions view mode
            - 'includeTabsContent' (bool): Whether to include tabs content

    Raises:
        TypeError: If 'item_properties' is provided and is not a dictionary.
        TypeError: If 'upload_content_details' is provided and is not a dictionary.
        TypeError: If 'require_single_parent', 'disregard_default_visibility_settings', 'retain_revision_permanently',
                   'allow_operations_on_all_drives', 'allow_operations_on_team_drives', or 'make_content_searchable'
                   are not booleans.
        TypeError: If 'set_ocr_language_code', 'additional_view_permissions_list', or 'comma_separated_labels_list' are not strings.
        ValidationError: If 'item_properties' is provided and its structure or data types
                                  do not conform to FileBodyModel.
        ValidationError: If 'upload_content_details' is provided and its structure or data types
                                  do not conform to MediaBodyModel.
        KeyError: If internal user lookup fails (propagated from _ensure_user or _get_user_quota).
        ValueError: If item_properties.get('size') is provided but its string value cannot be converted to an integer
                    (e.g., "abc" instead of "123"). This is raised by the core logic.
        QuotaExceededError: If the storage quota would be exceeded by creating the file.
        FileNotFoundError: If upload_content_details contains a filePath that doesn't exist.
    """
    from gdrive.Files import create
    return create(
        body=item_properties,
        media_body=upload_content_details,
        enforceSingleParent=require_single_parent,
        ignoreDefaultVisibility=disregard_default_visibility_settings,
        keepRevisionForever=retain_revision_permanently,
        ocrLanguage=set_ocr_language_code,
        supportsAllDrives=allow_operations_on_all_drives,
        supportsTeamDrives=allow_operations_on_team_drives,
        useContentAsIndexableText=make_content_searchable,
        includePermissionsForView=additional_view_permissions_list,
        includeLabels=comma_separated_labels_list
    )


def erase_drive_item_forever(
    target_item_identifier,
    apply_single_parent_rule=False,
    confirm_all_drives_access=False,
    confirm_team_drives_access=False
):
    """
    Permanently deletes a file owned by the user without moving it to trash.

    Args:
        target_item_identifier (str): The ID of the file to delete.
        apply_single_parent_rule (Optional[bool]): Whether to enforce single parent. Defaults to False.
        confirm_all_drives_access (Optional[bool]): Whether to support all drives. Defaults to False.
        confirm_team_drives_access (Optional[bool]): Whether to support team drives. Defaults to False.

    Returns:
        None: This function does not return a value.

    Raises:
        TypeError: If any argument is not of the expected type.
        FileNotFoundError: If the file does not exist.
        PermissionError: If the user does not have permission to delete the file.
    """
    from gdrive.Files import delete
    return delete(
        fileId=target_item_identifier,
        enforceSingleParent=apply_single_parent_rule,
        supportsAllDrives=confirm_all_drives_access,
        supportsTeamDrives=confirm_team_drives_access
    )


def purge_trash_bin(
    shared_drive_identifier_to_empty='',
    enforce_single_parent_location=False,
    process_all_drives=False,
    process_team_drives=False
):
    """
    Permanently deletes all of the trashed files owned by the user.

    Args:
        shared_drive_identifier_to_empty (str): The ID of the shared drive to empty trash from.
        enforce_single_parent_location (bool): Whether to enforce single parent.
        process_all_drives (bool): Whether to support all drives.
        process_team_drives (bool): Whether to support team drives.
    """
    from gdrive.Files import emptyTrash
    return emptyTrash(
        driveId=shared_drive_identifier_to_empty,
        enforceSingleParent=enforce_single_parent_location,
        supportsAllDrives=process_all_drives,
        supportsTeamDrives=process_team_drives
    )


def convert_and_download_google_file(google_document_id, export_format_mime_type):
    """
    Exports a Google Doc to the requested MIME type and returns binary content.

    Args:
        google_document_id (str): The ID of the file to export. Must be a non-empty string.
        export_format_mime_type (str): The MIME type to export to. Must be a non-empty string.

    Returns:
        Dict[str, Any]: Dictionary containing the exported file with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#export').
            - 'fileId' (str): The ID of the exported file.
            - 'mimeType' (str): The MIME type of the exported file.
            - 'content' (bytes): The binary content of the exported file.

    Raises:
        TypeError: If google_document_id or export_format_mime_type is not a string.
        ValueError: If google_document_id or export_format_mime_type is empty or contains only whitespace.
        FileNotFoundError: If the specified file does not exist.
        ValueError: If the export format content cannot be decoded properly.
    """
    from gdrive.Files import export
    return export(fileId=google_document_id, mimeType=export_format_mime_type)


def create_new_file_identifiers(number_of_ids_to_generate=1, id_usage_space='file'):
    """
    Generates a set of file IDs.

    Args:
        number_of_ids_to_generate (int): Number of IDs to generate.
        id_usage_space (str): The space in which the IDs can be used.

    Returns:
        Dict[str, Any]: Dictionary containing the generated IDs with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#generatedIds').
            - 'ids' (List[str]): List of generated file IDs.
    """
    from gdrive.Files import generateIds
    return generateIds(count=number_of_ids_to_generate, space=id_usage_space)


def fetch_item_details(item_id_to_fetch):
    """
    Gets a file's metadata.

    Args:
        item_id_to_fetch (str): The ID of the file to retrieve.

    Returns:
        Dict[str, Any]: Dictionary containing the file metadata with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#file').
            - 'id' (str): File ID.
            - 'name' (str): File name.
            - 'mimeType' (str): MIME type of the file.
            - 'parents' (List[str]): List of parent folder IDs.
            - 'createdTime' (str): Creation timestamp.
            - 'modifiedTime' (str): Last modification timestamp.
            - 'trashed' (bool): Whether the file is in trash.
            - 'starred' (bool): Whether the file is starred.
            - 'owners' (List[str]): List of owner email addresses.
            - 'content' (Dict[str, Any]): File content with metadata (if content was uploaded). Contains:
                - 'data' (str): Text or Base64 encoded content data
                - 'encoding' (str): Content encoding ('text' or 'base64')
                - 'checksum' (str): SHA256 checksum for integrity verification
                - 'version' (str): Content version
                - 'lastContentUpdate' (str): Timestamp of last content update
            - 'revisions' (List[Dict[str, Any]]): List of file revisions (if content was uploaded). Contains:
                - 'id' (str): Revision ID
                - 'mimeType' (str): MIME type of the revision
                - 'modifiedTime' (str): When the revision was created
                - 'keepForever' (bool): Whether to keep this revision forever
                - 'originalFilename' (str): Original filename
                - 'size' (str): File size in bytes
                - 'content' (Dict[str, Any]): Revision content with metadata. Contains:
                    - 'data' (str): Text or Base64 encoded content data
                    - 'encoding' (str): Content encoding ('text' or 'base64')
                    - 'checksum' (str): SHA256 checksum for integrity verification
            - 'size' (str): File size in bytes.
            - 'permissions' (List[Dict[str, Any]]): List of permission objects.

    Raises:
        TypeError: If `item_id_to_fetch` is not a string.
        ValueError: If `item_id_to_fetch` is None, empty or consists only of whitespace.
        FileNotFoundError: If the file is not found in the database
    """
    from gdrive.Files import get
    return get(fileId=item_id_to_fetch)


def query_user_drive_items(
    search_corpora_selection='user',
    target_drive_id_for_query='',
    scan_all_user_drives=False,
    scan_team_drive_content=False,
    sort_results_by_clause='folder,modifiedTime desc,name',
    results_per_page=10,
    next_page_cursor='',
    search_filter_query='',
    data_spaces_to_search='drive',
    enable_cross_drive_search=False,
    enable_team_drive_search=False,
    target_team_drive_id_for_query='',
    request_extra_view_permissions='',
    request_included_labels=''
):
    """
    Lists the user's files with support for Shared Drives, ordering, and pagination.

    Args:
        search_corpora_selection (Optional[str], optional): Comma-separated list of corpora. Defaults to 'user', which means
            only files owned by or shared with the user will be returned.
        target_drive_id_for_query (Optional[str], optional): ID of the shared drive to search. Defaults to empty string,
            meaning no specific drive filtering is applied.
        scan_all_user_drives (Optional[bool], optional): Whether to include items from all drives.
            Defaults to False, meaning only items from the user's My Drive are included.
        scan_team_drive_content (Optional[bool], optional): Whether to include team drive items.
            Defaults to False, meaning team drive items are excluded.
        sort_results_by_clause (Optional[str], optional): Sort order for the results. Defaults to 'folder,modifiedTime desc,name',
            which means:
            - Folders are listed first
            - Then files are sorted by modified time in descending order (newest first)
            - Finally, items with the same modified time are sorted by name
        results_per_page (Optional[int], optional): Maximum number of files to return. Must be a positive integer.
            Defaults to 10, meaning at most 10 files will be returned per page.
        next_page_cursor (Optional[str], optional): Token for the next page of results. Defaults to empty string,
            meaning the first page of results will be returned.
        search_filter_query (Optional[str], optional): Query string for filtering files. Defaults to empty string,
            meaning no filtering is applied. The query string should follow the format: `field operator value`.
            Logical Operators:
            Multiple conditions can be combined using `and` and `or` logical operators.
            For example, `name = 'file.txt' and trashed = False or mimeType = 'image/jpeg'`
            is processed as `(name = 'file.txt' and trashed = False) or (mimeType = 'image/jpeg')`.
            Parentheses for explicitly grouping conditions (e.g., `A and (B or C)`) are not supported.
            not supported by the current parser. To achieve a query like `A and (B or C)`,
            you must write it in disjunctive normal form: `(A and B) or (A and C)`.
            For instance:
            `(name contains 'report' and mimeType = 'application/pdf') or (name contains 'report' and mimeType = 'text/plain')`
            Supported Operators:
               - `=`: Equals. For exact matches.
               - `!=`: Not equals.
               - `contains`: Checks if the field's string representation contains the given value.
               (e.g., `name contains 'report'`).
               - `<`: Less than. Used for numeric or date/time fields.
               - `<=`: Less than or equal to. Used for numeric or date/time fields.
               - `>`: Greater than. Used for numeric or date/time fields.
               - `>=`: Greater than or equal to. Used for numeric or date/time fields.
               - `in`: Checks if a specific string value is present within a list-like field (e.g., `parents`).
               The syntax is `'stringValue' in fieldName`.
               For example, `'folderId123' in parents` checks if `'folderId123'`
               is one of the IDs in the `parents` list of a file.
            Value Types:
               - Strings: Must be enclosed in single (`'`) or double (`"`) quotes
               (e.g., `name = 'My Document.pdf'` or `description = "Final Report"`).
               - Booleans: Use `True` or `False` (case-insensitive)
               (e.g., `trashed = False` or `starred = True`).
               - Date/Timestamps: For fields like `modifiedTime` or `createdTime`.
               Values should be in a standard date/time format that can be parsed
               (e.g., ISO 8601 format like `'2023-10-26T10:00:00Z'`).
            Filterable Fields:
            You can attempt to filter on any field present in the file resource dictionary.
            Common fields include:
               - `name` (str): The name of the file.
               - `mimeType` (str): The MIME type of the file
               - `trashed` (bool): Whether the file is in the trash.
               - `starred` (bool): Whether the file is starred.
               - `createdTime` (str): The creation time (e.g., `'2024-01-01T00:00:00Z'`).
               - `modifiedTime` (str): The last modification time.
               - `parents` (List[str]): A list of parent folder IDs. Use with the `in` operator.
               - `id` (str): The unique ID of the file.
               - `description` (str): The file's description.
            Examples of `q` strings:
               - `name = 'MyContract.pdf' and trashed = false`
               - `mimeType = 'application/vnd.google-apps.folder' or starred = true`
               - `modifiedTime > '2024-01-01T00:00:00Z'`
               - `'specific_folder_id' in parents and name contains 'confidential'`
               - `(description contains 'secret' and mimeType = 'application/pdf') or (description contains 'secret' and mimeType = 'text/csv')`
        data_spaces_to_search (Optional[str], optional): Comma-separated list of spaces to search. Defaults to 'drive',
            which means only files in the user's Drive will be returned.
        enable_cross_drive_search (Optional[bool], optional): Whether to support all drives. Defaults to False,
            meaning shared drive operations are not supported.
        enable_team_drive_search (Optional[bool], optional): Whether to support team drives. Defaults to False,
            meaning team drive operations are not supported.
        target_team_drive_id_for_query (Optional[str], optional): ID of the team drive to search. Defaults to empty string,
            meaning no specific team drive filtering is applied.
        request_extra_view_permissions (Optional[str], optional): Specifies which additional view's permissions to include.
            Defaults to empty string, meaning no additional permissions are included.
        request_included_labels (Optional[str], optional): Comma-separated list of labels to include. Defaults to empty string,
            meaning no label filtering is applied.

    Returns:
        Dict[str, Any]: Dictionary containing the list of files with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#fileList').
            - 'nextPageToken' (str): Token for the next page of results.
            - 'files' (List[Dict[str, Any]]): List of file metadata objects (without content).

    Raises:
        TypeError: If any argument is not of the expected type.
        InvalidPageSizeError: If results_per_page is not a positive integer.
        KeyError: If internal user/data lookup fails (propagated from helper functions like _ensure_user or DB access).
        ValueError: If the query string is invalid, or if the search_corpora_selection, data_spaces_to_search, sort_results_by_clause, target_drive_id_for_query, target_team_drive_id_for_query, request_extra_view_permissions, or request_included_labels are invalid.
    """
    from gdrive.Files import list
    return list(
        corpora=search_corpora_selection,
        driveId=target_drive_id_for_query,
        includeItemsFromAllDrives=scan_all_user_drives,
        includeTeamDriveItems=scan_team_drive_content,
        orderBy=sort_results_by_clause,
        pageSize=results_per_page,
        pageToken=next_page_cursor,
        q=search_filter_query,
        spaces=data_spaces_to_search,
        supportsAllDrives=enable_cross_drive_search,
        supportsTeamDrives=enable_team_drive_search,
        teamDriveId=target_team_drive_id_for_query,
        includePermissionsForView=request_extra_view_permissions,
        includeLabels=request_included_labels
    )


def modify_drive_item(
    file_identifier_to_update,
    metadata_updates=None,
    content_updates=None,
    parent_folders_to_add='',
    mandate_single_parent=False,
    parent_folders_to_remove=''
):
    """
    Updates a file's metadata or content with patch semantics. 

    This means only the fields explicitly provided in the `body` dictionary
    will be updated. All other file properties will remain unchanged.

    Args:
        file_identifier_to_update (str): The ID of the file to update.
        metadata_updates (Optional[Dict[str, Any]]): Dictionary of file properties to update with keys:
            - 'name' (str): New name of the file.
            - 'mimeType' (str): New MIME type of the file.
            - 'parents' (List[str]): New list of parent folder IDs.
            - 'permissions' (List[Dict[str, Any]]): New list of permission objects.
        content_updates (Optional[Dict[str, Any]]): Dictionary containing media content properties to update with keys:
            - 'size' (int): File size in bytes.
            - 'md5Checksum' (str): MD5 checksum of the file content.
            - 'sha1Checksum' (str): SHA1 checksum of the file content.
            - 'sha256Checksum' (str): SHA256 checksum of the file content.
            - 'mimeType' (str): MIME type of the file content.
            - 'imageMediaMetadata' (Dict[str, Any]): Metadata for image files.
            - 'videoMediaMetadata' (Dict[str, Any]): Metadata for video files.
            - 'filePath' (str): Path to file for content upload (creates new revision).
        parent_folders_to_add (Optional[str]): Comma-separated list of parent IDs to add, defaults to ''.
        mandate_single_parent (Optional[bool]): Whether to enforce single parent, defaults to False.
        parent_folders_to_remove (Optional[str]): Comma-separated list of parent IDs to remove, defaults to ''.

    Returns:
        Optional[Dict[str, Any]]: Dictionary containing the updated file with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#file').
            - 'id' (str): File ID.
            - 'name' (str): File name.
            - 'mimeType' (str): MIME type of the file.
            - 'parents' (List[str]): List of parent folder IDs.
            - 'createdTime' (str): Creation timestamp.
            - 'modifiedTime' (str): Last modification timestamp.
            - 'trashed' (bool): Whether the file is in trash.
            - 'starred' (bool): Whether the file is starred.
            - 'owners' (List[str]): List of owner email addresses.
            - 'size' (str): File size in bytes.
            - 'permissions' (List[Dict[str, Any]]): List of permission objects.
            - 'content' (Dict[str, Any]): File content with metadata (if content was updated). Contains:
                - 'data' (str): Text or Base64 encoded content data
                - 'encoding' (str): Content encoding ('text' or 'base64')
                - 'checksum' (str): SHA256 checksum for integrity verification
                - 'version' (str): Content version
                - 'lastContentUpdate' (str): Timestamp of last content update
            - 'revisions' (List[Dict[str, Any]]): List of file revisions (if content was updated). Contains:
                - 'id' (str): Revision ID
                - 'mimeType' (str): MIME type of the revision
                - 'modifiedTime' (str): When the revision was created
                - 'keepForever' (bool): Whether to keep this revision forever
                - 'originalFilename' (str): Original filename
                - 'size' (str): File size in bytes
                - 'content' (Dict[str, Any]): Revision content with metadata. Contains:
                    - 'data' (str): Text or Base64 encoded content data
                    - 'encoding' (str): Content encoding ('text' or 'base64')
                    - 'checksum' (str): SHA256 checksum for integrity verification

    Raises:
        TypeError: If `file_identifier_to_update`, `parent_folders_to_add`, `parent_folders_to_remove` are not strings,
                   or if `mandate_single_parent` is not a boolean, or if `content_updates` 
                   is provided and is not a dictionary.
        ResourceNotFoundError: If the file with the specified `file_identifier_to_update` is not found.
        ValidationError: If `metadata_updates` is provided and does not conform to the
                                 expected structure (UpdateBodyModel), or if `content_updates`
                                 is provided and does not conform to MediaBodyModel.
        KeyError: (Propagated) If `userId` used internally (e.g., 'me') is not
                  found by `_ensure_user` or during database access.
        QuotaExceededError: If the storage quota would be exceeded by updating the file content.
    """
    from gdrive.Files import update
    return update(
        fileId=file_identifier_to_update,
        body=metadata_updates,
        media_body=content_updates,
        addParents=parent_folders_to_add,
        enforceSingleParent=mandate_single_parent,
        removeParents=parent_folders_to_remove
    )


def watch_file_for_updates(
    file_to_monitor_id,
    notification_channel_config=None,
    confirm_abuse_acknowledgement=False,
    bypass_default_visibility=False,
    monitor_all_drives=False,
    monitor_team_drives=False,
    get_permissions_for_view='',
    get_labels_in_notification=''
):
    """
    Subscribes to changes to a file.

    Args:
        file_to_monitor_id (str): The ID of the file to watch.
        notification_channel_config (Optional[Dict[str, Any]]): Dictionary of watch properties with keys:
            - 'id' (str): Channel ID.
            - 'type' (str): Channel type.
            - 'address' (str): Channel address.
            - 'token' (str): Channel token.
            - 'expiration' (str): Channel expiration time.
        confirm_abuse_acknowledgement (bool): Whether to acknowledge abuse.
        bypass_default_visibility (bool): Whether to ignore default visibility.
        monitor_all_drives (bool): Whether to support all drives.
        monitor_team_drives (bool): Whether to support team drives.
        get_permissions_for_view (str): Specifies which additional view's permissions to include.
        get_labels_in_notification (str): Comma-separated list of labels to include.

    Returns:
        Dict[str, Any]: Dictionary containing the watch information with keys:
            - 'kind' (str): Resource type identifier (e.g., 'api#channel').
            - 'id' (str): Channel ID.
            - 'resourceId' (str): The ID of the watched resource.
            - 'resourceUri' (str): The URI of the watched resource.
            - 'token' (str): Channel token.
            - 'expiration' (str): Channel expiration time.
    """
    from gdrive.Files import watch
    return watch(
        fileId=file_to_monitor_id,
        body=notification_channel_config,
        acknowledgeAbuse=confirm_abuse_acknowledgement,
        ignoreDefaultVisibility=bypass_default_visibility,
        supportsAllDrives=monitor_all_drives,
        supportsTeamDrives=monitor_team_drives,
        includePermissionsForView=get_permissions_for_view,
        includeLabels=get_labels_in_notification
    )


def download_file_data(account_holder_id, document_identifier, specific_version_id=None):
    """
    Get file content, optionally for a specific revision.

    This function retrieves the content of a file, optionally for a specific revision.
    If a revision ID is provided, it searches the file's revisions list for the matching
    revision and returns its content. If no revision ID is provided, it returns the current
    content of the file.

    Args:
        account_holder_id (str): The ID of the user retrieving the file content.
        document_identifier (str): The ID of the file to retrieve content from.
        specific_version_id (Optional[str]): Optional revision ID to get specific revision.

    Returns:
        Dict[str, Any]: A dictionary containing the file content information.
            It has the following keys:
            - file_id (str): The ID of the file to which content is being retrieved.
            - revision_id (Optional[str]): The ID of the revision to get specific revision.
            - content (Dict[str, Any]): The content of the file, it has the following keys:
                - data (str): Encoded content data
                - encoding (str): Content encoding
                - checksum (str): SHA256 checksum for integrity
                - version (str): Content version
                - lastContentUpdate (str): Timestamp of last content update
            - mime_type (str): The MIME type of the file.
            - size (int): The size of the file in bytes.
            - modified_time (str): The last modified time of the file.

    Raises:
        ValueError: If the file ID is not found for the user, if the revision ID is
            not found for the file, or if the file content cannot be retrieved.
    """
    from gdrive.Files import get_content
    return get_content(
        user_id=account_holder_id,
        file_id=document_identifier,
        revision_id=specific_version_id
    )


def add_new_file_version(revising_user_id, target_document_id, revision_byte_content):
    """
    Create a new revision for a file.

    This function creates a new revision for a file with the given content. It
    generates a unique revision ID based on the existing revisions in the file's
    data structure, creates a revision content structure matching the expected
    JSON format, and validates the revision using the RevisionModel. The function
    then adds the revision to the file's revisions list.

    Args:
        revising_user_id (str): The ID of the user creating the revision.
        target_document_id (str): The ID of the file to which the revision is being added.
        revision_byte_content (bytes): The content to be added to the revision.

    Returns:
        Dict[str, Any]: A dictionary containing the revision information.
            It has the following keys:
            - revision_id (str): The ID of the created revision.
            - revision_created (bool): A boolean indicating if the revision was created successfully.
            - size (int): The size of the revision in bytes.
            - checksum (str): The checksum of the revision.

    Raises:
        ValueError: If the revising_user_id is not a string, if the target_document_id is not a string,
            or if the revision_byte_content is not bytes.
    """
    from gdrive.Files import create_revision
    return create_revision(
        user_id=revising_user_id,
        file_id=target_document_id,
        content=revision_byte_content
    )


def overwrite_file_data(updating_user_id, file_id_to_overwrite, replacement_byte_data):
    """
    Update file content with new bytes data.

    This function updates the content of a file with new bytes data. It calculates
    a new checksum for the new content, encodes it to base64, and creates a new
    content structure matching the expected JSON format. The function then validates
    the new content using the FileContentModel and creates a new revision before
    updating the file's content and size. Finally, it clears the export cache since
    the content has changed.

    Args:
        updating_user_id (str): The ID of the user updating the file content.
        file_id_to_overwrite (str): The ID of the file to which content is being updated.
        replacement_byte_data (bytes): The new content to be added to the file.

    Returns:
        Dict[str, Any]: A dictionary containing the update information.
            It has the following keys:
            - file_id (str): The ID of the file to which content is being updated.
            - content_updated (bool): A boolean indicating if the content was updated successfully.
            - new_size (int): The size of the updated content in bytes.
            - new_checksum (str): The checksum of the updated content.
            - new_version (str): The version of the updated content.
    """
    from gdrive.Files import update_content
    return update_content(
        user_id=updating_user_id,
        file_id=file_id_to_overwrite,
        new_content=replacement_byte_data
    )


def convert_and_retrieve_file_data(exporting_user_id, source_file_id_for_export, destination_format_mime):
    """
    Export file content to a different format.

    This function exports the content of a file to a different format. It checks
    if the export is cached and returns the cached content if available. If not,
    it decodes the current content, validates the export format, and exports the
    content to the target MIME type. Finally, it caches the exported content and
    returns the exported content.

    Args:
        exporting_user_id (str): The ID of the user exporting the file content.
        source_file_id_for_export (str): The ID of the file to export content from.
        destination_format_mime (str): The target MIME type for export.

    Returns:
        Dict[str, Any]: A dictionary containing the exported content information.
            It has the following keys:
            - file_id (str): The ID of the file to which content is being exported.
            - exported (bool): A boolean indicating if the content was exported successfully.
            - target_mime (str): The target MIME type for export.
            - content (str): The exported content encoded in the same format as the original content.
            - size (int): The size of the exported content in bytes.
            - cached (bool): A boolean indicating if the content was cached.

    Raises:
        ValueError: If the file ID is not found for the user, if the file content
            cannot be retrieved, or if the export format is not supported.
        ValueError: If the exporting_user_id is not a string, if the source_file_id_for_export is not a string,
            or if the destination_format_mime is not a string.
    """
    from gdrive.Files import export_content
    return export_content(
        user_id=exporting_user_id,
        file_id=source_file_id_for_export,
        target_mime=destination_format_mime
    )


def enumerate_file_versions(querying_user_id, document_id_for_revisions):
    """
    List all revisions for a file.

    This function retrieves all revisions for a file. It returns the file's revisions
    list, which is a list of dictionaries containing the revision information.

    Args:
        querying_user_id (str): The ID of the user retrieving the revisions.
        document_id_for_revisions (str): The ID of the file to retrieve revisions from.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing the revision information.
            Each dictionary has the following keys:
            - id (str): The ID of the revision.
            - mimeType (str): The MIME type of the revision.
            - modifiedTime (str): The last modified time of the revision.
            - keepForever (bool): A boolean indicating if the revision is marked as keep forever.
            - originalFilename (str): The original filename of the revision.

    Raises:
        ValueError: If the querying_user_id is not a string, if the document_id_for_revisions is not a string.
    """
    from gdrive.Files import list_revisions
    return list_revisions(user_id=querying_user_id, file_id=document_id_for_revisions)
