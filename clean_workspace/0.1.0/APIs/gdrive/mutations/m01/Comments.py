# This file is automatically generated by the MutationBuilder

def add_comment_to_file(target_file_for_comment_id, comment_data=None):
    """
    Creates a body on a file.

    This function creates a new body on the specified Google Drive file with
    input validation and error handling.

    Args:
        target_file_for_comment_id (str): The ID of the file to comment on.
        comment_data (Optional[Dict[str, Any]]): Dictionary containing comment properties. If None,
            an empty dictionary is used. Supported keys:
            - 'content' (str, required): The plain text content of the comment.
            - 'author' (Optional[Dict[str, Any]]): Author information with keys:
                - 'displayName' (str): Display name of the author.
                - 'emailAddress' (str): Valid email address of the author.
            - 'quotedFileContent' (Optional[Dict[str, Any]]): Quoted content with keys:
                - 'value' (str): The quoted content text (required if quotedFileContent provided).
                - 'mimeType' (str): MIME type of the quoted content (required if quotedFileContent provided).
            - 'anchor' (Optional[str]): Anchor point for the comment.
            - 'resolved' (Optional[bool]): Whether the comment is resolved (defaults to False).

    Returns:
        Dict[str, Any]: Dictionary containing the created comment with the following keys:
            - 'kind' (str): Resource type identifier ('drive#comment').
            - 'id' (str): Unique comment identifier.
            - 'fileId' (str): The ID of the file this comment belongs to.
            - 'content' (str): The plain text content of the comment.
            - 'htmlContent' (str): HTML-formatted content (same as content for plain text).
            - 'author' (Dict[str, Any]): Author information dictionary containing:
                {'kind': 'drive#user', 'displayName': str, 'emailAddress': str, 'me': bool, 'permissionId': str}
            - 'createdTime' (str): RFC 3339 timestamp when the comment was created.
            - 'modifiedTime' (str): RFC 3339 timestamp when the comment was last modified.
            - 'resolved' (bool): Whether the comment has been resolved.
            - 'deleted' (bool): Whether the comment has been deleted (always False for new comments).
            - 'replies' (List): Empty list of replies for new comments.
            - 'quotedFileContent' (Optional[Dict[str, Any]]): Quoted file content dictionary containing:
                {'value': str, 'mimeType': str} (only present if quoted content provided).
            - 'anchor' (Optional[str]): JSON string anchor point (only present if anchor provided).

    Raises:
        ValidationError: If any input parameter fails validation.
        FileNotFoundError: If the specified file does not exist.
        PermissionDeniedError: If the user lacks permission to comment on the file.
    """
    from gdrive.Comments import create
    return create(fileId=target_file_for_comment_id, body=comment_data)


def fetch_file_comment_by_id(
    file_identifier_for_comment,
    comment_identifier_to_fetch,
    show_deleted_comment=False
):
    """
    Gets a comment by ID.

    Args:
        file_identifier_for_comment (str): The ID of the file the comment belongs to.
        comment_identifier_to_fetch (str): The ID of the comment to get.
        show_deleted_comment (bool): Whether to include deleted comments.

    Returns:
        Optional[Dict[str, Any]]: Dictionary containing the comment with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#comment').
            - 'id' (str): Comment ID.
            - 'fileId' (str): The ID of the file this comment belongs to.
            - 'content' (str): The content of the comment.
            - 'author' (Dict[str, Any]): Dictionary of author information.
            - 'quotedFileContent' (Dict[str, Any]): Dictionary of quoted content.
            - 'anchor' (str): The anchor point of the comment.
            - 'resolved' (bool): Whether the comment has been resolved.
            - 'createdTime' (str): The time at which the comment was created.
            - 'modifiedTime' (str): The time at which the comment was last modified.
            - 'deleted' (bool): Whether the comment has been deleted.
    """
    from gdrive.Comments import get
    return get(
        fileId=file_identifier_for_comment,
        commentId=comment_identifier_to_fetch,
        includeDeleted=show_deleted_comment
    )


def enumerate_file_comments(
    file_identifier_for_listing_comments,
    include_deleted_comments_in_list=False,
    comments_per_page=20,
    comment_list_page_cursor='',
    filter_comments_modified_since=''
):
    """
    Lists comments for a file.

    Args:
        file_identifier_for_listing_comments (str): The ID of the file to list comments for. Cannot be empty.
        include_deleted_comments_in_list (Optional[bool]): Whether to include deleted comments.
            If False, deleted comments are excluded from the response. Defaults to False.
        comments_per_page (Optional[int]): Maximum number of comments to return per page.
            Must be between 1 and 100, inclusive. Defaults to 20.
        comment_list_page_cursor (Optional[str]): Page token for continuing a previous list request.
            Provides the starting point for pagination. Expected to be an integer string if provided.
            Defaults to an empty string.
        filter_comments_modified_since (Optional[str]): The start time to filter comments by.
            Only comments modified on or after this timestamp are returned.
            Format: RFC 3339 timestamp (e.g., '2023-01-01T00:00:00Z').
            Defaults to an empty string (no time filter).

    Returns:
        Dict[str, Any]: Dictionary containing the list of comments with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#commentList').
            - 'nextPageToken' (str or None): Page token for the next page of results.
            - 'comments' (List[Dict[str, Any]]): List of comment objects. Each comment dictionary contains fields such as:
                - 'kind' (str): Resource type identifier (e.g., 'drive#comment').
                - 'id' (str): Comment ID.
                - 'fileId' (str): The ID of the file this comment belongs to.
                - 'content' (str): The content of the comment.
                - 'author' (Dict[str, Any]): Dictionary of author information.
                - 'quotedFileContent' (Dict[str, Any]): Dictionary of quoted content.
                - 'anchor' (str): The anchor point of the comment.
                - 'resolved' (bool): Whether the comment has been resolved.
                - 'createdTime' (str): The time at which the comment was created.
                - 'modifiedTime' (str): The time at which the comment was last modified.

    Raises:
        TypeError: If `file_identifier_for_listing_comments` is not a string, `include_deleted_comments_in_list` is not a boolean,
                   `comments_per_page` is not an integer, `comment_list_page_cursor` is not a string,
                   or `filter_comments_modified_since` is not a string.
        ValueError: If `file_identifier_for_listing_comments` is an empty string.
        PageSizeOutOfBoundsError: If `comments_per_page` is not within the range [1, 100].
        MalformedPageTokenError: If `comment_list_page_cursor` is provided and is not a valid integer string.
        InvalidTimestampFormatError: If `filter_comments_modified_since` is provided and is not a
                                     valid RFC 3339 timestamp string.
        ValueError: Propagated if the user 'me' (implicit userId for operations)
                  does not exist in the database.
    """
    from gdrive.Comments import list
    return list(
        fileId=file_identifier_for_listing_comments,
        includeDeleted=include_deleted_comments_in_list,
        pageSize=comments_per_page,
        pageToken=comment_list_page_cursor,
        startModifiedTime=filter_comments_modified_since
    )


def edit_file_comment(file_id_of_comment, comment_id_to_update, updated_comment_content=None):
    """
    Updates a comment with patch semantics.

    Args:
        file_id_of_comment (str): The ID of the file the comment belongs to.
        comment_id_to_update (str): The ID of the comment to update.
        updated_comment_content (Optional[Dict[str, Any]]): Dictionary of comment properties to update with keys:
            - 'content' (str): The content of the comment.
            - 'author' (Dict[str, Any]): Dictionary of author information with keys:
                - 'displayName' (str): The display name of the author.
                - 'emailAddress' (str): The email address of the author.
            - 'quotedFileContent' (Dict[str, Any]): Dictionary of quoted content with keys:
                - 'value' (str): The quoted content.
                - 'mimeType' (str): The MIME type of the quoted content.
            - 'anchor' (str): The anchor point of the comment.
            - 'resolved' (bool): Whether the comment has been resolved.

    Returns:
        Optional[Dict[str, Any]]: Dictionary containing the updated comment with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#comment').
            - 'id' (str): Comment ID.
            - 'fileId' (str): The ID of the file this comment belongs to.
            - 'content' (str): The content of the comment.
            - 'author' (Dict[str, Any]): Dictionary of author information.
            - 'quotedFileContent' (Dict[str, Any]): Dictionary of quoted content.
            - 'anchor' (str): The anchor point of the comment.
            - 'resolved' (bool): Whether the comment has been resolved.
            - 'createdTime' (str): The time at which the comment was created.
            - 'modifiedTime' (str): The time at which the comment was last modified.
    """
    from gdrive.Comments import update
    return update(
        fileId=file_id_of_comment,
        commentId=comment_id_to_update,
        body=updated_comment_content
    )


def remove_comment_from_file(file_id_containing_comment, comment_id_to_delete):
    """
    Deletes a comment from a file in Google Drive.

    This function permanently removes a comment from a file. The comment is
    identified by its `commentId` and the `fileId` of the file it is associated
    with. If the comment does not exist or the provided IDs are incorrect,
    an error will be raised.

    Args:
        file_id_containing_comment (str): The ID of the file the comment belongs to.
        comment_id_to_delete (str): The ID of the comment to delete.

    Returns:
        None

    Raises:
        TypeError: If `file_id_containing_comment` or `comment_id_to_delete` is not a string.
        ValueError: If `file_id_containing_comment` or `comment_id_to_delete` is an empty string.
        NotFoundError: If the comment is not found.
    """
    from gdrive.Comments import delete
    return delete(fileId=file_id_containing_comment, commentId=comment_id_to_delete)
