# This file is automatically generated by the MutationBuilder

def provision_new_shared_drive(idempotency_request_token=None, drive_configuration_details=None):
    """
    Creates a shared drive. If requestId is provided, it's used as the drive's ID and for idempotency.
    Otherwise, an internal ID is generated.

    Args:
        idempotency_request_token (Optional[str]): An ID, such as a random UUID. If provided, this ID is used
                                   as the drive's ID. If a drive with this ID already exists,
                                   it is returned. If None or empty, an internal ID is
                                   generated for a new drive.
        drive_configuration_details (Optional[Dict[str, Any]]): Dictionary of drive properties. Valid keys:
            - 'name' (Optional[str]): The name of the shared drive.
            - 'restrictions' (Optional[Dict[str, Any]]): A dictionary of restrictions to apply to the drive, with keys:
                - 'adminManagedRestrictions' (bool): Whether administrative privileges on this shared drive are required to modify restrictions.
                - 'copyRequiresWriterPermission' (bool): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                - 'domainUsersOnly' (bool): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                - 'driveMembersOnly' (bool): Whether access to items inside this shared drive is restricted to its members.
            - 'hidden' (Optional[bool]): Whether the shared drive is hidden from default view.
            - 'themeId' (Optional[str]): The ID of the theme to apply to this shared drive.

    Returns:
        Dict[str, Any]:  A dictionary representing the created or existing shared or existing drive, containing the following keys::
            - 'kind' (str): Resource type identifier (e.g., 'drive#drive').
            - 'id' (str): Drive ID (this will be the requestId if provided, otherwise an internally generated ID).
            - 'name' (str): The name of the shared drive.
            - 'restrictions' (Dict[str, Any]): Dictionary of restrictions. Contains keys:
                - 'adminManagedRestrictions' (bool): Whether administrative privileges on this shared drive are required to modify restrictions.
                - 'copyRequiresWriterPermission' (bool): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                - 'domainUsersOnly' (bool): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                - 'driveMembersOnly' (bool): Whether access to items inside this shared drive is restricted to its members.
            - 'hidden' (bool): Whether the shared drive is hidden from default view.
            - 'themeId' (str): The ID of the theme applied to this shared drive.
            - 'createdTime' (str): The time at which the shared drive was created.

    Raises:
        TypeError: If 'idempotency_request_token' is provided and is not a string.
        ValidationError: If 'drive_configuration_details' is provided and does not conform to the expected structure.
    """
    from gdrive.Drives import create
    return create(requestId=idempotency_request_token, body=drive_configuration_details)


def remove_shared_drive_permanently(shared_drive_to_delete_id):
    """
    Permanently deletes a shared drive for which the user is an organizer.

    This function permanently removes a shared drive from the user's account. The drive
    must be identified by its unique `driveId`. For the operation to succeed, the user
    must have the appropriate permissions (e.g., be an organizer) for the specified drive.
    Once deleted, the drive and all of its contents are irretrievably lost.

    Args:
        shared_drive_to_delete_id (str): The unique identifier of the shared drive to be deleted.

    Returns:
        None

    Raises:
        TypeError: If shared_drive_to_delete_id is not a string.
        NotFoundError: If no drive with the specified `shared_drive_to_delete_id` is found.
    """
    from gdrive.Drives import delete
    return delete(driveId=shared_drive_to_delete_id)


def retrieve_shared_drive_info(drive_id_to_query):
    """
    Gets a shared drive's metadata by ID.

    Args:
        drive_id_to_query (str): The ID of the shared drive.

    Returns:
        Optional[Dict[str, Any]]: Dictionary containing the drive metadata with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#drive').
            - 'id' (str): Drive ID.
            - 'name' (str): The name of the shared drive.
            - 'restrictions' (Dict[str, Any]): Dictionary of restrictions with keys:
                - 'adminManagedRestrictions' (bool): Whether administrative privileges on this shared drive are required to modify restrictions.
                - 'copyRequiresWriterPermission' (bool): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                - 'domainUsersOnly' (bool): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                - 'driveMembersOnly' (bool): Whether access to items inside this shared drive is restricted to its members.
            - 'hidden' (bool): Whether the shared drive is hidden from default view.
            - 'themeId' (str): The ID of the theme applied to this shared drive.
            - 'createdTime' (str): The time at which the shared drive was created.
        Returns None if the drive with the specified ID is not found.

    Raises:
        TypeError: If drive_id_to_query is not a string or is empty.
    """
    from gdrive.Drives import get
    return get(driveId=drive_id_to_query)


def conceal_shared_drive_from_view(drive_id_to_hide):
    """
    Hides a shared drive from the default view.

    Args:
        drive_id_to_hide (str): The ID of the shared drive to hide. Must be a non-empty string.

    Returns:
        Optional[Dict[str, Any]]: The hidden drive resource object if successful, or None if the drive doesn't exist.
            If successful, the dictionary contains:
            - 'kind' (str): Resource type identifier ('drive#drive').
            - 'id' (str): Drive ID.
            - 'name' (str): The name of the shared drive.
            - 'restrictions' (Dict[str, Any]): Dictionary of restrictions (if present).
            - 'hidden' (bool): Always True after successful hide operation.
            - 'themeId' (str): The ID of the theme applied to this shared drive (if present).
            - 'createdTime' (str): The time at which the shared drive was created (if present).

    Raises:
        ValueError: If drive_id_to_hide is None, empty, or not a string.
    """
    from gdrive.Drives import hide
    return hide(driveId=drive_id_to_hide)


def enumerate_user_shared_drives(drives_per_page_limit=10, drive_search_query='', drive_list_page_token=''):
    """
    Lists the user's shared drives.

    This function returns a list of shared drives that the user is a member of.
    It supports filtering by drive properties through the `q` parameter
    and allows for pagination using `pageSize` and `pageToken`.

    Args:
        drives_per_page_limit (int): Maximum number of shared drives to return per page.
                        Must be an integer between 1 and 100.
        drive_search_query (str): Query string for searching shared drives. 
                 The query supports the following fields and operators:
                     - Fields: 'name', 'id', 'createdTime', 'hidden', 'themeId'
                     - Operators: =, !=, <, <=, >, >=, contains, in
                 You can combine conditions with 'and' and 'or'.
                 String values must be quoted. Example queries:
                     "name = 'My Drive'"
                     "name contains 'Project' and hidden = false"
                     "createdTime >= '2023-01-01T00:00:00Z'"
                     "name = 'Team Drive' or themeId = 'blue-theme'"
        drive_list_page_token (str): (Optional) A base64-encoded token for pagination. The token encodes a JSON object with:
            - 'last_row_time' (str): The unix timestamp (as a string) when the last page was generated.
            - 'offset' (int): The offset (index) to start the next page from.

    Returns:
        Dict[str, Any]: Dictionary containing the list of shared drives with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#driveList').
            - 'nextPageToken' (str): Page token for the next page of results.
            Dict[str, Any]:  A dictionary representing the created or existing shared or existing drive, containing the following keys::
                - 'kind' (str): Resource type identifier (e.g., 'drive#drive').
                - 'id' (str): Drive ID (this will be the requestId if provided, otherwise an internally generated ID).
                - 'name' (str): The name of the shared drive.
                - 'restrictions' (Dict[str, Any]): Dictionary of restrictions. Contains keys:
                    - 'adminManagedRestrictions' (bool): Whether administrative privileges on this shared drive are required to modify restrictions.
                    - 'copyRequiresWriterPermission' (bool): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                    - 'domainUsersOnly' (bool): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                    - 'driveMembersOnly' (bool): Whether access to items inside this shared drive is restricted to its members.
                - 'hidden' (bool): Whether the shared drive is hidden from default view.
                - 'themeId' (str): The ID of the theme applied to this shared drive.
                - 'createdTime' (str): The time at which the shared drive was created.
            - 'drives' (List[Dict[str, Any]]): List of shared drive objects.

    Raises:
        TypeError: If `drives_per_page_limit` is not an integer or `drive_search_query` is not a string.
        ValueError: If `drives_per_page_limit` is negative or greater than 100.
        InvalidQueryError: If `drive_search_query` is provided and is not a valid query string.
    """
    from gdrive.Drives import list
    return list(
        pageSize=drives_per_page_limit,
        q=drive_search_query,
        pageToken=drive_list_page_token
    )


def reveal_shared_drive_in_view(drive_id_to_unhide):
    """
    Restores a shared drive to the default view.

    Args:
        drive_id_to_unhide (str): The ID of the shared drive.

    Returns:
        Optional[Dict[str, Any]]: Dictionary containing the unhidden drive with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#drive').
            - 'id' (str): Drive ID.
            - 'name' (str): The name of the shared drive.
            - 'restrictions' (Dict[str, Any]): Dictionary of restrictions with keys:
                - 'adminManagedRestrictions' (bool): Whether administrative privileges on this shared drive are required to modify restrictions.
                - 'copyRequiresWriterPermission' (bool): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                - 'domainUsersOnly' (bool): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                - 'driveMembersOnly' (bool): Whether access to items inside this shared drive is restricted to its members.
            - 'hidden' (bool): Whether the shared drive is hidden from default view.
            - 'themeId' (str): The ID of the theme applied to this shared drive.
            - 'createdTime' (str): The time at which the shared drive was created.
        Returns None if the drive with the specified ID is not found.

    Raises:
        TypeError: If drive_id_to_unhide is not a string or is empty.
    """
    from gdrive.Drives import unhide
    return unhide(driveId=drive_id_to_unhide)


def modify_shared_drive_properties(target_drive_for_update_id, drive_metadata_payload=None):
    """
    Updates the metadata for a shared drive.

    This function modifies an existing shared drive's metadata based on the
    provided `body`. The drive is identified by its `driveId`.

    Args:
        target_drive_for_update_id (str): The ID of the shared drive.
        drive_metadata_payload (Optional[Dict[str, Any]]): Dictionary of drive properties to update with keys:
            - 'name' (Optional[str]): The name of the shared drive.
            - 'restrictions' (Optional[Dict[str, Any]]): Dictionary of restrictions with keys:
                - 'adminManagedRestrictions' (Optional[bool]): Whether administrative privileges on this shared drive are required to modify restrictions.
                - 'copyRequiresWriterPermission' (Optional[bool]): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                - 'domainUsersOnly' (Optional[bool]): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                - 'driveMembersOnly' (Optional[bool]): Whether access to items inside this shared drive is restricted to its members.
            - 'hidden' (Optional[bool]): Whether the shared drive is hidden from default view.
            - 'themeId' (Optional[str]): The ID of the theme to apply to this shared drive.

    Returns:
        Dict[str, Any]: Dictionary containing the updated drive with keys:
            - 'kind' (str): Resource type identifier (e.g., 'drive#drive').
            - 'id' (str): Drive ID.
            - 'name' (str): The name of the shared drive.
            - 'restrictions' (Dict[str, Any]): Dictionary of restrictions with keys:
                - 'adminManagedRestrictions' (bool): Whether administrative privileges on this shared drive are required to modify restrictions.
                - 'copyRequiresWriterPermission' (bool): Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters.
                - 'domainUsersOnly' (bool): Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs.
                - 'driveMembersOnly' (bool): Whether access to items inside this shared drive is restricted to its members.
            - 'hidden' (bool): Whether the shared drive is hidden from default view.
            - 'themeId' (str): The ID of the theme applied to this shared drive.
            - 'createdTime' (str): The time at which the shared drive was created.

    Raises:
        TypeError: If 'target_drive_for_update_id' is not a non-empty string or 'drive_metadata_payload' is not a dictionary.
        ValidationError: If 'drive_metadata_payload' is provided and does not conform to the DriveUpdateBodyModel structure
                                  (e.g., incorrect types for fields, disallowed extra fields).
        NotFoundError: If no drive with the specified `target_drive_for_update_id` is found.
    """
    from gdrive.Drives import update
    return update(driveId=target_drive_for_update_id, body=drive_metadata_payload)
