# This file is automatically generated by the MutationBuilder

def find_scim_users(
    scim_user_attributes_to_return=None,
    scim_user_filter_query=None,
    scim_pagination_start_index=None,
    scim_pagination_result_count=None,
    scim_sort_attribute=None,
    scim_sort_direction=None
):
    """
    Retrieves a list of users based on specified filtering, sorting, and pagination criteria.

    This endpoint adheres to SCIM (System for Cross-domain Identity Management) standards.
    Supports complex filtering via SCIM filter syntax and offers a 100-item default page size.

    Args:
        scim_user_attributes_to_return (Optional[str], optional): Comma-separated list of specific attributes to return.
            - Enum: "userName", "name.familyName", "name.givenName", "roles", "roles.value",
                    "externalId", "active", "meta.lastModified", "meta.created", "id"
        scim_user_filter_query (Optional[str], optional): SCIM-compliant filter expression to search for users.
            Example:
                'userName eq "jhon.doe@example.com" and meta.lastModified gt "2011-05-13T04:42:34Z"'
            Supported attributes:
                - "userName"
                - "name.familyName"
                - "name.givenName"
                - "roles"
                - "roles.value"
                - "externalId"
                - "active"
                - "meta.lastModified"
                - "meta.created"
            Supported operators:
                - eq: Equal to
                - ne: Not equal to
                - lt: Less than
                - le: Less than or equal to
                - gt: Greater than
                - ge: Greater than or equal to
                - pr: Present
                - co: Contains
                - and: Logical "and"
                - or: Logical "or"
                - not: Logical "not"
        scim_pagination_start_index (Optional[int], optional): 1-based index of the first query result. Must be >= 1.
        scim_pagination_result_count (Optional[int], optional): Number of results to return per page. Must be >= 0.
        scim_sort_attribute (Optional[str], optional): Attribute used to order results.
            - Allowed values: "id", "externalId"
        scim_sort_direction (Optional[str], optional): Direction of sorting.
            - Allowed values: "ascending", "descending"

    Returns:
        List[Dict[str, Any]]: List of user records. Each user record contains:
            - id (str): Unique SCIM resource identifier.
            - externalId (str): Client-specific resource identifier.
            - userName (str): User's email address.
            - name (Dict[str, str]):
                - familyName (str): User's last name.
                - givenName (str): User's first name.
            - roles (List[Dict[str, Any]]): Roles assigned to the user.
                - value (str): Role identifier.
                - display (str): Role name.
                - type (str): Role type.
                - primary (bool): Whether it's the primary role.
            - active (bool): Indicates if the user account is active.
            - meta (Dict[str, str]):
                - resourceType (str)
                - created (str): Creation timestamp.
                - lastModified (str): Last updated timestamp.
                - location (str): Resource URI.

    Raises:
        TypeError: If any argument has an invalid type.
        InvalidAttributeError: If any specified attribute in `scim_user_attributes_to_return` is not allowed or empty.
        InvalidPaginationParameterError: If `scim_pagination_start_index` is not positive, or `scim_pagination_result_count` is negative.
        InvalidSortByValueError: If `scim_sort_attribute` specifies an attribute not allowed for sorting.
        InvalidSortOrderValueError: If `scim_sort_direction` is not 'ascending' or 'descending'.
        HTTPError 400: Bad Request – Potentially propagated from deeper logic for issues like
                       invalid scim_user_filter_query expression or scim_pagination_result_count value too large (if not caught by basic validation).
    """
    from workday.Users import get
    return get(
        attributes=scim_user_attributes_to_return,
        filter=scim_user_filter_query,
        startIndex=scim_pagination_start_index,
        count=scim_pagination_result_count,
        sortBy=scim_sort_attribute,
        sortOrder=scim_sort_direction
    )


def provision_new_scim_user(new_scim_user_data):
    """
    Creates a new user with the specified attributes.

    This operation is SCIM-compliant and requires a payload defining the user details.
    Supports external identifiers for integration with client systems.

    Args:
        new_scim_user_data (Dict[str, Any]): The user resource to create. The structure is defined by the SCIM User schema.
            - externalId (str): Optional client-assigned unique identifier.
            - userName (str): Required. Email address of the user.
            - name (Dict[str, str]): Required. Name object with:
                - givenName (str): First name of the user.
                - familyName (str): Last name of the user.
            - active (bool): Optional. Whether the user account is active.
            - roles (List[str]): Optional. Roles assigned to the user.
            - meta (Dict[str, Any]): Optional. Metadata about the user.

    Returns:
        Dict[str, Any]: Created user resource with metadata and system-assigned identifiers.
            - schemas (List[str]): SCIM schemas associated with the resource.
            - id (str): Unique SCIM identifier for the user.
            - externalId (str): Client-provided unique identifier.
            - userName (str): Email of the user.
            - name (Dict[str, str]):
                - givenName (str): First name.
                - familyName (str): Last name.
            - active (bool): Account activation status.
            - roles (List[Dict[str, Any]]): Roles assigned to the user.
                - value (str): Role identifier.
                - display (str): Role name.
                - type (str): Type of role.
                - primary (bool): Indicates if it's the primary role.
            - meta (Dict[str, str]):
                - resourceType (str): SCIM resource type.
                - created (str): ISO timestamp when the user was created.
                - lastModified (str): ISO timestamp of the last update.
                - location (str): URI of the created user resource.

    Raises:
        pydantic.ValidationError: If the 'new_scim_user_data' payload does not conform to UserScimInputModel structure
                                  or contains invalid data types (corresponds to HTTPError 400 for payload issues).
        TypeError: If 'new_scim_user_data' is not a dictionary (raised by Pydantic model instantiation).
        HTTPError 409: Conflict – user with the same userName already exists (propagated from database logic).
    """
    from workday.Users import post
    return post(body=new_scim_user_data)
