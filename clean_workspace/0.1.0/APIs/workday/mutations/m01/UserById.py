# This file is automatically generated by the MutationBuilder

def fetch_scim_user_details(
    scim_user_identifier,
    requested_user_attributes=None,
    user_search_filter_expression=None
):
    """
    Retrieves the details of a single user by SCIM resource ID.

    This endpoint conforms to SCIM 2.0 RFC 7644 Section 3.4.1, returning user metadata,
    core attributes, and optional related roles or identifiers.

    Args:
        scim_user_identifier (str): Unique SCIM identifier of the user to retrieve.
        requested_user_attributes (Optional[str]): Optional comma-separated list of attributes to return in the response.
            Allowed:
                - "userName"
                - "name.familyName"
                - "name.givenName"
                - "roles"
                - "roles.value"
                - "externalId"
                - "active"
                - "meta.lastModified"
                - "meta.created"
        user_search_filter_expression (Optional[str]): Optional filter to apply to the user search.
            Currently not implemented.

    Returns:
        Optional[Dict[str, Any]]: The user object returned in SCIM-compliant format, or None if not found. It can contain the following keys:

            - schemas (List[str]): List of SCIM schema URIs that apply to this resource.
            - id (str): Unique identifier for the user resource.
            - externalId (str): Client-defined external identifier for the user.
            - userName (str): Email address of the user.
            - name (Dict[str, str]):
                - givenName (str): First name of the user.
                - familyName (str): Last name of the user.
            - active (bool): Indicates whether the user is active.
            - roles (List[Dict[str, Any]]): Roles assigned to the user (read-only).
                - value (str): Role identifier.
                - display (str): Human-readable name of the role.
                - type (str): Role type.
                - primary (bool): True if this is the user's primary role.
            - meta (Dict[str, str]):
                - resourceType (str): Type of SCIM resource ("User").
                - created (str): Timestamp when the resource was created (ISO 8601).
                - lastModified (str): Timestamp when the resource was last updated.
                - location (str): URI of the resource.
    """
    from workday.UserById import get
    return get(
        id=scim_user_identifier,
        attributes=requested_user_attributes,
        filter=user_search_filter_expression
    )


def patch_scim_user_attributes(scim_user_id_to_patch, scim_patch_operations_payload):
    """
    Applies partial updates to a User resource using a sequence of SCIM-compliant patch operations.

    This endpoint supports `add`, `remove`, and `replace` operations as described in RFC 7644 Section 3.5.2.
    Common use cases include changing the user's name, deactivating accounts, or updating metadata.

    Note:
        - Users cannot deactivate their own account (403).
        - Changes to `userName` require both the original and target domains to match those configured in the company SSO setup.
        - All PATCH operations must conform to SCIM and system-specific constraints.

    Args:
        scim_user_id_to_patch (str): Unique SCIM identifier of the user to patch.
        scim_patch_operations_payload (Dict[str, Any]): A dictionary containing the patch operations, conforming to SCIM schema.
            It must contain the following keys:
            - schemas (List[str]): SCIM schema identifiers. Must include SCIM PATCH schema URI.
            - Operations (List[Dict[str, Any]]): A list of operations to apply.
                - op (str): Type of operation.
                    - Enum: "add", "remove", "replace"
                - path (str, optional): SCIM path to the attribute being modified. Required for "remove".
                - value (Any): Value to assign or append. Can be a primitive or nested structure.

    Returns:
        Optional[Dict[str, Any]]: The updated user resource in SCIM-compliant structure, or None if not found.

            - id (str): Unique SCIM user identifier.
            - externalId (str): Client-defined identifier.
            - userName (str): User email address.
            - active (bool): Indicates if the user is active.
            - name (Dict[str, str]):
                - givenName (str): First name.
                - familyName (str): Last name.
            - roles (List[Dict[str, Any]]): User roles (read-only).
                - value (str): Role ID.
                - display (str): Role name.
                - type (str): Role type.
                - primary (bool): If it's the primary role.
            - meta (Dict[str, str]):
                - resourceType (str): SCIM resource type.
                - created (str): ISO timestamp of resource creation.
                - lastModified (str): ISO timestamp of last update.
                - location (str): URI for this resource.

    Raises:
        HTTPError 400: Bad request – Invalid operations, attribute immutability, or validation failure.
        HTTPError 403: Forbidden – Unauthorized field update or self-deactivation attempt.
        HTTPError 404: Not found – No user with the provided ID exists.
    """
    from workday.UserById import patch
    return patch(id=scim_user_id_to_patch, body=scim_patch_operations_payload)


def overwrite_scim_user_details(scim_user_id_to_replace, full_user_replacement_data):
    """
    Replaces all updatable attributes of a User resource as per RFC 7644 Section 3.5.1.

    This operation replaces only the attributes provided in the request payload, leaving any others intact.
    Users cannot deactivate themselves or modify their email domain unless it's compliant with configured SSO rules.

    Args:
        scim_user_id_to_replace (str): Unique SCIM identifier of the user to update.
        full_user_replacement_data (Dict[str, Any]): A dictionary containing the user attributes to update.
            - externalId (str): Optional client-defined external identifier.
            - userName (str): Required. User's email address. Must match configured SSO domain for updates.
            - name (Dict[str, str]):
                - givenName (str): Required. User’s first name.
                - familyName (str): Required. User’s last name.
            - active (bool): Optional. Whether the user account is active.

    Returns:
        Optional[Dict[str, Any]]: The updated user resource in SCIM-compliant format, or None if not found.

            - id (str): Unique SCIM identifier.
            - externalId (str): External identifier for client reference.
            - userName (str): Email of the user.
            - name (Dict[str, str]):
                - givenName (str): First name.
                - familyName (str): Last name.
            - active (bool): Indicates whether the user is active.
            - roles (List[Dict[str, Any]]): User's assigned roles (read-only).
                - value (str): Role ID.
                - display (str): Role display name.
                - type (str): Role type.
                - primary (bool): Whether this is the user's primary role.
            - meta (Dict[str, str]):
                - resourceType (str): SCIM resource type.
                - created (str): ISO timestamp of creation.
                - lastModified (str): ISO timestamp of last update.
                - location (str): URI to retrieve the resource.

    Raises:
        HTTPError 400: Invalid value or attempt to update an immutable field.
        HTTPError 403: Forbidden — Self-deactivation or unauthorized email domain modification.
        HTTPError 404: Not Found — User does not exist.
        HTTPError 409: Conflict — A user with the specified data already exists.
    """
    from workday.UserById import put
    return put(id=scim_user_id_to_replace, body=full_user_replacement_data)


def disable_scim_user_account(scim_user_id_to_deactivate):
    """
    Deactivates a user by their unique identifier.

    This operation marks the user as inactive. The core logic to prevent self-deactivation
    (which would result in a 403 error) or to handle a non-existent user (404 error)
    is assumed to be part of the broader system or interactions with the 'db' object.

    Args:
        scim_user_id_to_deactivate (str): Unique SCIM user identifier of the user to deactivate.

    Returns:
        bool: True if the user was found and notionally deactivated (deleted from the list in this snippet),
              False if the user was not found.

    Raises:
        TypeError: If 'scim_user_id_to_deactivate' is not a string.
        HTTPError 403: Forbidden — User cannot deactivate themselves (as per original docstring, system context).
        HTTPError 404: Not Found — The specified user does not exist (as per original docstring, system context).
    """
    from workday.UserById import delete
    return delete(id=scim_user_id_to_deactivate)
