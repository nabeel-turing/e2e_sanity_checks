# This file is automatically generated by the MutationBuilder

def fetch_spend_category_by_internal_id(spend_category_internal_id):
    """
    Retrieves the details of an existing spend category using its internal identifier.

    Internal IDs allow referencing spend categories directly in the database. This is useful for internal operations and direct database access.

    Args:
        spend_category_internal_id (int): Internal identifier of the spend category.

    Returns:
        Optional[Dict[str, Any]]: The spend category resource if found, None otherwise.
            - type (str): Always "spend_categories".
            - id (int): Unique internal ID.
            - attributes (Dict[str, Any]):
                - name (str): Name of the spend category.
                - external_id (str): External identifier.
                - usages (List[str]): List of usages.
                    - Enum: "procurement", "expense", "ad_hoc_payment", "supplier_invoice"
    """
    from workday.SpendCategoryById import get
    return get(id=spend_category_internal_id)


def modify_spend_category_by_internal_id(
    spend_category_id_to_update,
    new_spend_category_name=None,
    new_spend_category_external_id=None,
    new_spend_category_usages=None
):
    """
    Updates the details of an existing spend category using its internal identifier.

    The internal ID must match the one provided in the URL path. All parameters are optional and only the provided fields will be updated.

    Args:
        spend_category_id_to_update (int): Internal identifier for the spend category to be updated.
        new_spend_category_name (Optional[str]): Updated name (max 255 characters).
        new_spend_category_external_id (Optional[str]): New or same external identifier (max 255 characters).
        new_spend_category_usages (Optional[List[str]]): Updated list of usages.
            - Enum: "procurement", "expense", "ad_hoc_payment", "supplier_invoice"

    Returns:
        Optional[Dict[str, Any]]: The updated spend category object if found, None otherwise.

            - data (Dict[str, Any]):
                - type (str): Always "spend_categories".
                - id (int): Unique internal ID.
                - attributes (Dict[str, Any]):
                    - name (str): Updated or existing name.
                    - external_id (str): External identifier.
                    - usages (List[str]): Allowed usages.
    """
    from workday.SpendCategoryById import patch
    return patch(
        id=spend_category_id_to_update,
        name=new_spend_category_name,
        external_id=new_spend_category_external_id,
        usages=new_spend_category_usages
    )


def remove_spend_category_by_internal_id(spend_category_id_to_delete):
    """
    Deletes an existing spend category using its internal identifier.

    The internal ID must match the one provided in the URL path.

    Args:
        spend_category_id_to_delete (int): Internal identifier of the spend category to be deleted.

    Returns:
        bool: True if the spend category was deleted, False otherwise.
    """
    from workday.SpendCategoryById import delete
    return delete(id=spend_category_id_to_delete)
