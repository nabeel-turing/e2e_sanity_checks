# This file is automatically generated by the MutationBuilder

def assign_contacts_to_event_by_id(rfp_event_identifier, contact_ids_payload):
    """
    Adds supplier contacts to a specific event. Only events of type RFP are supported.

    Args:
        rfp_event_identifier (int): The unique identifier of the event to which supplier
            contacts will be added.
        contact_ids_payload (dict): A dictionary containing the supplier contact information,
            including:
            - supplier_contact_ids (List[str], optional): A list of supplier contact IDs to be
                added to the event
            - type (str): Object type, should always be "supplier_contacts"

    Returns:
        Optional[Dict]: The updated event data if successful, including the newly
            added supplier contacts. Returns None if:
            - The event does not exist
            - The event is not of type RFP
            - The operation fails
    """
    from workday.EventSupplierContacts import post
    return post(event_id=rfp_event_identifier, data=contact_ids_payload)


def unassign_contacts_from_event_by_id(rfp_event_id_for_removal, contact_ids_to_remove_payload):
    """
    Remove suppliers from an event using supplier contacts. Only events of type RFP are supported.

    Args:
        rfp_event_id_for_removal (int): The unique identifier of the event from which supplier
            contacts will be removed.
        contact_ids_to_remove_payload (dict): A dictionary containing the supplier contact information,
            including:
            - supplier_contact_ids (List[str], optional): A list of supplier contact IDs to be
                removed from the event
            - type (str): Object type, should always be "supplier_contacts"
    Returns:
        Optional[Dict]: The updated event data if successful, with the specified
            supplier contacts removed. Returns None if:
            - The event does not exist
            - The event is not of type RFP
            - The operation fails
    """
    from workday.EventSupplierContacts import delete
    return delete(event_id=rfp_event_id_for_removal, data=contact_ids_to_remove_payload)
