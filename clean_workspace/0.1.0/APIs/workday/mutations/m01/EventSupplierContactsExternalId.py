# This file is automatically generated by the MutationBuilder

def assign_contacts_to_event_by_external_ids(target_event_external_id, contact_external_ids_payload):
    """
    Add suppliers to an event using supplier contacts. Only events of type RFP are supported. You must supply the unique event external identifier (the one you used when created the event). You must supply the external identifiers of the supplier contacts too. The operation will be rolled back upon any failure, and invitations won't be sent. For best performance, we recommend inviting 10 or less supplier contacts in a single request.

    Args:
        target_event_external_id (str): The unique external identifier of the event to which suppliers will be added.
        contact_external_ids_payload (dict): A dictionary containing the supplier contact information, including:
            - supplier_contact_external_ids (List[str], optional): A list of supplier contact external IDs to be added to the event
            - type (str): Object type, should always be "supplier_contacts"

    Returns:
        Optional[Dict[str, Any]]: The updated event data if successful, including the newly added supplier contacts. Returns None if:
            - The event does not exist
            - The event is not of type RFP
            - The operation fails
    """
    from workday.EventSupplierContactsExternalId import post
    return post(event_external_id=target_event_external_id, data=contact_external_ids_payload)


def unassign_contacts_from_event_by_external_ids(event_external_id_for_contact_removal, contact_external_ids_to_remove_payload):
    """
    Remove suppliers from an event using supplier contacts. Only events of type RFP are supported. You must supply the unique event external identifier (the one you used when created the event). You must supply the external identifiers of the supplier contacts too. The operation will be rolled back upon any failure, and invitations won't be removed. For best performance, we recommend removing 10 or less supplier contacts in a single request.

    Args:
        event_external_id_for_contact_removal (str): The unique external identifier of the event from which supplier contacts will be removed.
        contact_external_ids_to_remove_payload (dict): A dictionary containing the supplier contact information, including:
            - supplier_contact_external_ids (List[str], optional): A list of supplier contact external IDs to be removed from the event
            - type (str): Object type, should always be "supplier_contacts"

    Returns:
        Optional[Dict[str, Any]]: The updated event data if successful, with the specified supplier contacts removed. Returns None if:
            - The event does not exist
            - The event is not of type RFP
            - The operation fails
    """
    from workday.EventSupplierContactsExternalId import delete
    return delete(
        event_external_id=event_external_id_for_contact_removal,
        data=contact_external_ids_to_remove_payload
    )
