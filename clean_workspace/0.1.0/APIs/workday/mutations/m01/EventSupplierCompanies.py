# This file is automatically generated by the MutationBuilder

def assign_suppliers_to_event_by_id(target_event_id, supplier_id_data_payload):
    """
    Add suppliers to an event. Only events of type RFP are supported.

    Args:
        target_event_id (int): The unique identifier of the event to which suppliers
            will be added.
        supplier_id_data_payload (dict): A dictionary containing the supplier information, including:
            - supplier_ids (List[str], optional): A list of supplier IDs to be added to the event
            - type (str): Object type, should always be "supplier_companies"

    Returns:
        Optional[Dict]: The updated event data if successful, including the newly
            added suppliers. Returns None if:
            - The event does not exist
            - The event is not of type RFP
            - The operation fails
    """
    from workday.EventSupplierCompanies import post
    return post(event_id=target_event_id, data=supplier_id_data_payload)


def unassign_suppliers_from_event_by_id(event_id_for_supplier_removal, supplier_ids_to_remove_payload):
    """
    Remove suppliers from an event. Only events of type RFP are supported.

    Args:
        event_id_for_supplier_removal (int): The unique identifier of the event from which suppliers
            will be removed.
        supplier_ids_to_remove_payload (dict): A dictionary containing the supplier information, including:
            - supplier_ids (List[str], optional): A list of supplier IDs to be removed from the event
            - type (str): Object type, should always be "supplier_companies"

    Returns:
        Optional[Dict]: The updated event data if successful, with the specified
            suppliers removed. Returns None if:
            - The event does not exist
            - The event is not of type RFP
            - The operation fails
    """
    from workday.EventSupplierCompanies import delete
    return delete(event_id=event_id_for_supplier_removal, data=supplier_ids_to_remove_payload)
