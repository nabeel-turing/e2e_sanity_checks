# This file is automatically generated by the MutationBuilder

def fetch_project_by_internal_id(project_internal_identifier):
    """
    Retrieves the details of a specific project using its unique internal identifier.

    Args:
        project_internal_identifier (int): The unique internal identifier of the project to retrieve.

    Returns:
        Optional[Dict]: A dictionary containing the project details if found,
                       None if no project exists with the given ID.
                       The project details will be returned with any of the following keys:
                        - type_id (str): Object type
                        - id (str): Project identifier string
                        - external_id (str): Project external identifier string
                        - supplier_companies (List): Array of supplier company objects
                        - supplier_contacts (List): Array of supplier contact objects
                        - status (str): Project status
                        - attributes (Dict[str, Union[str, float, bool, datetime.date, None]]): Project attributes object containing:
                            - name (str): Project name
                            - description (str): Project description
                            - state (str): Project state (draft, requested, planned, active, completed, canceled, on_hold)
                            - target_start_date (datetime.date): Project target start date
                            - target_end_date (datetime.date): Project target end date
                            - actual_spend_amount (float): Project actual spend amount
                            - approved_spend_amount (float): Project approved spend amount
                            - estimated_savings_amount (float): Project estimated savings amount
                            - estimated_spend_amount (float): Project estimated spend amount
                            - canceled_note (Optional[str]): Project cancelation note
                            - canceled_reason (Optional[str]): Project cancelation reason
                            - on_hold_note (Optional[str]): Project on-hold note
                            - on_hold_reason (Optional[str]): Project on-hold reason
                            - needs_attention (bool): Project needs attention status
                            - marked_as_needs_attention_at (Optional[datetime.datetime]): Project marked as needs attention timestamp
                            - needs_attention_note (Optional[str]): Project needs attention note
                            - needs_attention_reason (Optional[str]): Project needs attention reason
                        - relationships (Dict[str, Union[List[Dict], Dict]]): Project relationships object containing:
                            - attachments (List[Dict]): Array of attachment objects
                            - creator (Dict): Project creator stakeholder object
                            - requester (Dict): Project requester stakeholder object
                            - owner (Dict): Project owner stakeholder object
                            - project_type (Dict): Project type object
                        - links (Dict[str, str]): Resource links object containing:
                            - self (str): Normalized link to the resource
    """
    from workday.ProjectById import get
    return get(id=project_internal_identifier)


def modify_project_by_internal_id(project_id_for_update, updated_project_information):
    """
    Updates the details of an existing project using its unique internal identifier.

    Args:
        project_id_for_update (int): The unique internal identifier of the project to update.
        updated_project_information (Dict): A dictionary containing the updated project details.
                            Validated against ProjectDataInputModel.
                            Must include an 'id' field whose string representation matches the provided path ID.
                            - type_id (str): Object type
                            - id (str): Project identifier string.
                            - external_id (str): Project external identifier string
                            - supplier_companies (List[Dict[str, Any]]): Array of supplier company objects
                            - supplier_contacts (List[Dict[str, Any]]): Array of supplier contact objects
                            - status (str): Project status
                            - attributes (ProjectAttributesInputModel): Project attributes object.
                            - relationships (ProjectRelationshipsInputModel): Project relationships object.

    Returns:
        Optional[Dict]: The updated project details if successful,
                       None if the project doesn't exist.
                       The updated project details will be returned with any of the following keys:
                        - type_id (str): Object type
                        - id (str): Project identifier string.
                        - external_id (str): Project external identifier string
                        - supplier_companies (List): Array of supplier company objects
                        - supplier_contacts (List): Array of supplier contact objects
                        - status (str): Project status
                        - attributes (Dict[str, Union[str, float, bool, datetime.date, None]]): Project attributes object containing:
                            - name (str): Project name
                            - description (str): Project description
                            - state (str): Project state (draft, requested, planned, active, completed, canceled, on_hold)
                            - target_start_date (datetime.date): Project target start date
                            - target_end_date (datetime.date): Project target end date
                            - actual_spend_amount (float): Project actual spend amount
                            - approved_spend_amount (float): Project approved spend amount
                            - estimated_savings_amount (float): Project estimated savings amount
                            - estimated_spend_amount (float): Project estimated spend amount
                            - canceled_note (Optional[str]): Project cancelation note
                            - canceled_reason (Optional[str]): Project cancelation reason
                            - on_hold_note (Optional[str]): Project on-hold note
                            - on_hold_reason (Optional[str]): Project on-hold reason
                            - needs_attention (bool): Project needs attention status
                            - marked_as_needs_attention_at (Optional[datetime.datetime]): Project marked as needs attention timestamp
                            - needs_attention_note (Optional[str]): Project needs attention note
                            - needs_attention_reason (Optional[str]): Project needs attention reason
                        - relationships (Dict[str, Union[List[Dict], Dict]]): Project relationships object containing:
                            - attachments (List[Dict]): Array of attachment objects
                            - creator (Dict): Project creator stakeholder object
                            - requester (Dict): Project requester stakeholder object
                            - owner (Dict): Project owner stakeholder object
                            - project_type (Dict): Project type object
                        - links (Dict[str, str]): Resource links object containing:
                            - self (str): Normalized link to the resource

    Raises:
        TypeError: If 'project_id_for_update' is not an integer.
        pydantic.ValidationError: If 'updated_project_information' does not conform to the ProjectDataInputModel structure.
        ProjectIDMismatchError: If the 'project_id_for_update' in 'updated_project_information' does not match the 'project_id_for_update' provided in the path.
    """
    from workday.ProjectById import patch
    return patch(id=project_id_for_update, project_data=updated_project_information)


def remove_project_by_internal_id(project_id_to_delete):
    """
    Deletes a project using its unique internal identifier.

    Args:
        project_id_to_delete (int): The unique internal identifier of the project to delete.

    Returns:
        bool: True if the project was successfully deleted,
              False if no project exists with the given ID.
    """
    from workday.ProjectById import delete
    return delete(id=project_id_to_delete)
