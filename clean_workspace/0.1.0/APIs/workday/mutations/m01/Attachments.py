# This file is automatically generated by the MutationBuilder

def get_attachments_by_id_list(attachment_id_filter_list):
    """
    Retrieve a filtered list of attachments based on specified IDs.

    This function returns a list of attachments matching the provided IDs, with a maximum
    limit of 50 attachments per request.

    Args:
        attachment_id_filter_list (str): Comma-separated string of attachment IDs to filter by.

    Returns:
        List[Dict[str, Any]]: A list of attachment dictionaries, where each attachment contains:
            - id (int): Attachment identifier string.
            - name (str): Attachment file name.
            - type (str): Object type, should always be attachments.
            - uploaded_by (str): Email or Identifier of the uploader.
            - external_id (str): Attachment external identifier.
            - attributes (dict): Attachment attributes. May contain the following keys:
                - title (str): Attachment title.
                - size (str): Attachment file size in bytes.
                - external_id (str): Attachment external identifier.
                - download_url (str): Attachment download URL.
                - download_url_expires_at (datetime): Download URL expiration time.
                - uploaded_at (datetime): Time of upload.
            - Any other attachment-specific attributes as defined in the system.

    Note:
        The result is limited to 50 attachments regardless of the number of IDs provided.
    """
    from workday.Attachments import get
    return get(filter_id_equals=attachment_id_filter_list)


def upload_new_attachment(new_attachment_payload):
    """
    Create a new attachment in the system.

    This function creates a new attachment with the provided data. It checks for duplicate
    external IDs and generates a new unique internal ID for the attachment.

    Args:
        new_attachment_payload (Dict[str, Any]): Dictionary containing attachment data with the following keys:

            - type (str, required): Object type, should always be attachments.
            - name (str, required): Attachment file name.
            - uploaded_by (str): Email/identifier of uploader
            - external_id (str, max_length=255): Attachment external identifier.
            - attributes (dict): Attachment attributes which may contain any of the following keys:
                - title (str, max_length=255): Attachment title.
                - size (str): Attachment file size in bytes.
                - external_id (str, max_length=255): Attachment external identifier.
                - download_url (str): Attachment download URL.
                - download_url_expires_at (datetime): Download URL expiration time.
                - uploaded_at (datetime): Upload timestamp
            - relationships (dict): One of Contract, Event, Project, or Supplier Company containing:
                - type (str, required): Object type.
                - id (int, required): Object identifier string.

    Returns:
        Dict[str, Any]: A dictionary containing the attachment data.
            - If an attachment with the provided external_id already exists, returns a dictionary with:
                - "error" (str): "Attachment with this external_id already exists."
            - On successful creation, returns a dictionary with the following keys:
                - "id" (int): Auto-generated unique identifier for the attachment
                - "type" (str): Object type, should be "attachments"
                - "name" (str): Attachment file name
                - "uploaded_by" (str): Email/identifier of uploader
                - "external_id" (str): Attachment external identifier.
                - "attributes" (dict): Attachment attributes. May contain any of the following keys:
                    - title (str): Title (max 255 chars)
                    - size (str): File size in bytes
                    - external_id (str): External identifier (max 255 chars)
                    - download_url (str): Download URL
                    - download_url_expires_at (datetime): URL expiration time
                    - uploaded_at (datetime): Upload timestamp
                - Any other attachment-specific attributes as defined.
    """
    from workday.Attachments import post
    return post(data=new_attachment_payload)


def find_all_attachments_by_id_filter(attachment_ids_for_filtering=None):
    """
    Returns a filtered list of attachments based on the `filter[id_equals]` param.
    The result is limited to 50 attachments.

    Args:
        attachment_ids_for_filtering (str): Comma-separated string of attachment IDs to filter by. Defaults to None.
            If None, all attachments are returned (up to the limit).

    Returns:
        Dict[str, Any]: A dictionary containing:
            - data (List[Dict[str, Any]]): List of attachment objects containing any of the following keys:
                - "id" (int): Identifier for the attachment
                - "type" (str): Object type, should be "attachments"
                - "name" (str): Attachment file name
                - "uploaded_by" (str): Email/identifier of uploader
                - "external_id" (str): Attachment external identifier.
                - "attributes" (dict): Attachment attributes containing any of the following keys:
                    - title (str): Title (max 255 chars)
                    - size (str): File size in bytes
                    - external_id (str): External identifier (max 255 chars)
                    - download_url (str): Download URL
                    - download_url_expires_at (datetime): URL expiration time
                    - uploaded_at (datetime): Upload timestamp
                - Any other attachment-specific attributes as defined in the system.
            - links (Dict[str, str]): Resource links
            - meta (Dict[str, int]): Metadata containing the total count of the results

    Note:
        The result is limited to 50 attachments per request.
    """
    from workday.Attachments import list_attachments
    return list_attachments(filter_id_equals=attachment_ids_for_filtering)


def fetch_attachment_by_internal_id(attachment_internal_id):
    """
    Retrieve a specific attachment by its internal ID.

    Args:
        attachment_internal_id (int): The internal ID of the attachment to retrieve.

    Returns:
        Optional[Dict[str, Any]]: The attachment object if found, None otherwise.
            The object contains any of the following keys:
                - "id" (int): Identifier for the attachment
                - "type" (str): Object type, should be "attachments"
                - "name" (str): Attachment file name
                - "uploaded_by" (str): Email/identifier of uploader
                - "external_id" (str): Attachment external identifier.
                - "attributes" (dict): Attachment attributes containing any of the following keys:
                    - title (str): Title (max 255 chars)
                    - size (str): File size in bytes
                    - external_id (str): External identifier (max 255 chars)
                    - download_url (str): Download URL
                    - download_url_expires_at (datetime): URL expiration time
                    - uploaded_at (datetime): Upload timestamp
                - Any other attachment-specific attributes as defined in the system.
    """
    from workday.Attachments import get_attachment_by_id
    return get_attachment_by_id(id=attachment_internal_id)


def modify_attachment_by_internal_id(attachment_id_to_update, attachment_update_data):
    """
    Update an existing attachment by its internal ID.

    Args:
        attachment_id_to_update (int): The internal ID of the attachment to update.
        attachment_update_data (Dict[str, Any]): Dictionary containing the fields to update with their new values.

    Returns:
        Optional[Dict[str, Any]]: The updated attachment object if found and updated. None if the attachment does not exist. 
        The object contains any of the following keys:
            - "id" (int): Identifier for the attachment
            - "type" (str): Object type, should be "attachments"
            - "name" (str): Attachment file name
            - "uploaded_by" (str): Email/identifier of uploader
            - "external_id" (str): Attachment external identifier.
            - "attributes" (dict): Attachment attributes. May contain any of the following keys:
                - title (str): Title (max 255 chars)
                - size (str): File size in bytes
                - external_id (str): External identifier (max 255 chars)
                - download_url (str): Download URL
                - download_url_expires_at (datetime): URL expiration time
                - uploaded_at (datetime): Upload timestamp
            - Any other attachment-specific attributes as defined in the system.


    Note:
        The ID field in the data dictionary will be ignored and replaced with the id provided as argument.
    """
    from workday.Attachments import patch_attachment_by_id
    return patch_attachment_by_id(id=attachment_id_to_update, data=attachment_update_data)


def remove_attachment_by_internal_id(attachment_id_to_delete):
    """
    Delete an attachment by its internal ID.

    Args:
        attachment_id_to_delete (int): The internal ID of the attachment to delete.

    Returns:
        bool: True if the attachment was successfully deleted, False if the attachment
            does not exist.
    """
    from workday.Attachments import delete_attachment_by_id
    return delete_attachment_by_id(id=attachment_id_to_delete)


def fetch_attachment_by_external_id(attachment_external_identifier):
    """
    Retrieve a specific attachment by its external ID.

    Args:
        attachment_external_identifier (str): The external ID of the attachment to retrieve.

    Returns:
        Optional[Dict[str, Any]]: The attachment object if found, None otherwise.
            The object contains any of the following keys:
                - "id" (int): Identifier for the attachment
                - "type" (str): Object type, should be "attachments"
                - "name" (str): Attachment file name
                - "uploaded_by" (str): Email/identifier of uploader
                - "attributes" (dict): Attachment attributes. May contain any of the following keys:
                    - title (str): Title (max 255 chars)
                    - size (str): File size in bytes
                    - external_id (str): External identifier (max 255 chars)
                    - download_url (str): Download URL
                    - download_url_expires_at (datetime): URL expiration time
                    - uploaded_at (datetime): Upload timestamp
                - Any other attachment-specific attributes as defined in the system.
    """
    from workday.Attachments import get_attachment_by_external_id
    return get_attachment_by_external_id(external_id=attachment_external_identifier)


def modify_attachment_by_external_id(attachment_external_id_to_update, attachment_modification_data):
    """
    Update an existing attachment by its external ID.

    Args:
        attachment_external_id_to_update (str): The external ID of the attachment to update.
        attachment_modification_data (Dict[str, Any]): Dictionary containing the fields to update with their new values.

    Returns:
        Optional[Dict[str, Any]]: The updated attachment object if found and updated,
            None if the attachment does not exist.
            The object contains any of the following keys:
                - "id" (int): Identifier for the attachment
                - "type" (str): Object type, should be "attachments"
                - "name" (str): Attachment file name
                - "uploaded_by" (str): Email/identifier of uploader
                - external_id (str): Attachment external identifier.
                - "attributes" (dict): Attachment attributes. May contain any of the following keys:
                    - title (str): Title (max 255 chars)
                    - size (str): File size in bytes
                    - external_id (str): External identifier (max 255 chars)
                    - download_url (str): Download URL
                    - download_url_expires_at (datetime): URL expiration time
                    - uploaded_at (datetime): Upload timestamp
                - Any other attachment-specific attributes as defined in the system.

    Note:
        The external_id field in the data dictionary will be ignored and replaced with
        the provided external_id.
    """
    from workday.Attachments import patch_attachment_by_external_id
    return patch_attachment_by_external_id(
        external_id=attachment_external_id_to_update,
        data=attachment_modification_data
    )


def remove_attachment_by_external_id(attachment_external_id_to_delete):
    """
    Delete an attachment by its external ID.

    Args:
        attachment_external_id_to_delete (str): The external ID of the attachment to delete.

    Returns:
        bool: True if the attachment was successfully deleted, False if the attachment
            does not exist.
    """
    from workday.Attachments import delete_attachment_by_external_id
    return delete_attachment_by_external_id(external_id=attachment_external_id_to_delete)
