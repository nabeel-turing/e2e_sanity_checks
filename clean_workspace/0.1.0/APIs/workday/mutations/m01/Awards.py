# This file is automatically generated by the MutationBuilder

def find_awards_by_criteria(
    award_state_filter=None,
    award_updated_since_filter=None,
    award_updated_before_filter=None
):
    """
    Retrieve a list of awards based on specified filter criteria.

    This function supports filtering awards by their state and update timestamps.
    Multiple filters can be combined to narrow down the results.

    Args:
        award_state_filter (Optional[List[str]]): List of states to filter awards by.
            Valid states include: "draft" "confirmed" "awaiting_requisition_sync" "requisition_created".
        award_updated_since_filter (Optional[str]): Return awards updated on or after the specified timestamp..
        award_updated_before_filter (Optional[str]): Return awards updated on or before the specified timestamp.

    Returns:
        List[Dict[str, Any]]: A list of award dictionaries, where each award contains any of the following keys:
            - type (str): Object type, should always be "awards"
            - id (int): Unique identifier for the award
            - state (str): Current state of the award
            - updated_at (str): Timestamp of the last update
            - attributes (dict): Award attributes containing:
                - title (str): Award title (max 255 characters)
                - external_id (str): Award ID in your internal database (max 255 characters)
                - state (str): Award state, one of: "draft", "confirmed", "awaiting_requisition_sync", "requisition_created"
                - pros (str): Pros associated with award option
                - cons (str): Cons associated with award option
            - relationships (dict): Award relationships containing:
                - creator (dict): Project creator information
                - project (dict): Associated project information
            - links (dict): Related links containing:
                - self (str): URL to the resource
            - Other award-specific attributes as defined in the system
    """
    from workday.Awards import get
    return get(
        filter_state_equals=award_state_filter,
        filter_updated_at_from=award_updated_since_filter,
        filter_updated_at_to=award_updated_before_filter
    )


def get_line_items_for_award(
    target_award_identifier,
    quoted_status_filter=None,
    line_item_type_filter=None,
    include_award_line_item_relations=None
):
    """
    Retrieve line items associated with a specific award.

    Args:
        target_award_identifier (int): The unique identifier of the award to retrieve line items for.
        quoted_status_filter (Optional[bool]): Filter line items by their quoted status.
            True for quoted items, False for non-quoted items.
        line_item_type_filter (Optional[List[str]]): Return awards line items with specified line item types.
            Valid types include: "STANDARD", "GOODS", "SERVICES".
        include_award_line_item_relations (Optional[str]): Use the _include parameter to request related resources along with the primary resource.
            Supported includes: "supplier_company", "worksheet".

    Returns:
        List[Dict[str, Any]]: A list of award line item dictionaries, where each may contain any of the following keys:
            - type (str): Object type, always "award_line_items"
            - id (int): Unique identifier for the award line item
            - award_id (int): Associated award identifier
            - description (str): Description of the line item
            - amount (float): Amount of the award line item
            - attributes (dict): Award line item attributes containing:
                - data (dict): Worksheet column data with:
                    - data_identifier (str): Worksheet column identifier
                    - value (any): Cell value for the line item
                - allocated_quantity (int): Quantity allocated for the line item
                - sought_quantity (int): Quantity sought for the line item
                - price (float): Unit price of the line item
                - total_spend (float): Total spend for the line item
                - net_savings (float): Net savings amount
                - net_savings_percentage (float): Net savings as a percentage
                - line_item_type (str): Type of line item ("STANDARD", "GOODS", or "SERVICES")
                - is_quoted (bool): Whether the line item has been quoted
            - relationships (dict): Related resources containing:
                - supplier_company (dict): Associated supplier company with:
                    - type (str): Always "supplier_companies"
                    - id (int): Supplier company identifier
                - worksheet (dict): Associated worksheet with:
                    - type (str): Always "worksheets"
                    - id (int): Worksheet identifier
            - Any other award line item-specific attributes as defined in the system
    """
    from workday.Awards import get_award_line_items
    return get_award_line_items(
        award_id=target_award_identifier,
        filter_is_quoted_equals=quoted_status_filter,
        filter_line_item_type_equals=line_item_type_filter,
        _include=include_award_line_item_relations
    )


def fetch_award_line_item_by_id(line_item_id_for_award, award_line_item_resources_to_include=None):
    """
    Retrieve details of a specific award line item.

    Args:
        line_item_id_for_award (str): The unique identifier of the award line item to retrieve.
        award_line_item_resources_to_include (Optional[str]): Use the _include parameter to request related resources along with the primary resource.
            Supported includes: "supplier_company", "worksheet".

    Returns:
        Optional[Dict[str, Any]]: The award line item object if found, None otherwise.
            The object may contain any of the following keys:
            - type (str): Object type, always "award_line_items"
            - id (int): Unique identifier for the award line item
            - award_id (int): Associated award identifier
            - description (str): Description of the line item
            - amount (float): Amount of the award line item
            - attributes (dict): Award line item attributes containing:
                - data (dict): Worksheet column data with:
                    - data_identifier (str): Worksheet column identifier
                    - value (any): Cell value for the line item
                - allocated_quantity (int): Quantity allocated for the line item
                - sought_quantity (int): Quantity sought for the line item
                - price (float): Unit price of the line item
                - total_spend (float): Total spend for the line item
                - net_savings (float): Net savings amount
                - net_savings_percentage (float): Net savings as a percentage
                - line_item_type (str): Type of line item ("STANDARD", "GOODS", or "SERVICES")
                - is_quoted (bool): Whether the line item has been quoted
            - relationships (dict): Related resources containing:
                - supplier_company (dict): Associated supplier company with:
                    - type (str): Always "supplier_companies"
                    - id (int): Supplier company identifier
                - worksheet (dict): Associated worksheet with:
                    - type (str): Always "worksheets"
                    - id (int): Worksheet identifier
            - Any other award line item-specific attributes as defined in the system

    Raises:
        KeyError: If no award line item exists with the specified ID.
    """
    from workday.Awards import get_award_line_item
    return get_award_line_item(
        id=line_item_id_for_award,
        _include=award_line_item_resources_to_include
    )
