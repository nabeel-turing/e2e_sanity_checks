# This file is automatically generated by the MutationBuilder

def get_user_accessible_channels(
    user_to_query_id,
    conversation_list_cursor=None,
    hide_archived_conversations=False,
    page_size_limit=100,
    conversation_types_filter_csv=None
):
    """
    Lists conversations the specified user may access.

    Args:
        user_to_query_id (str): The ID of the user whose conversations to list.
        conversation_list_cursor (Optional[str]): Paginate through collections of data by setting the cursor parameter to the next_cursor attribute returned by a previous request's response. Default value fetches the first page.
        hide_archived_conversations (bool): Set to true to exclude archived channels from the list. Defaults to False.
        page_size_limit (int): The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. Default is 100.
        conversation_types_filter_csv (Optional[str]): Mix and match channel types by providing a comma-separated list of any combination of public_channel, private_channel, mpim, im.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - channels (List[Dict[str, Any]]): List of conversation objects
            - next_cursor (Optional[str]): Cursor for the next page of results

    Raises:
        TypeError: If user_to_query_id is not a string or is empty, hide_archived_conversations is not a boolean,
                  or conversation_types_filter_csv is not a string when provided.
        ValueError: If page_size_limit is not between 1 and 1000, or if conversation_types_filter_csv contains invalid values,
                   or if conversation_list_cursor is not a valid integer string.
    """
    from slack.Users import conversations
    return conversations(
        user_id=user_to_query_id,
        cursor=conversation_list_cursor,
        exclude_archived=hide_archived_conversations,
        limit=page_size_limit,
        types=conversation_types_filter_csv
    )


def update_user_activity_status(user_id_for_presence_update, new_presence_state):
    """
    Manually sets a user's presence.

    This function updates the presence status for a specified user, setting it
    to either 'active' or 'away'. It directly modifies the user's record in
    the database. Upon successful execution, it confirms the operation was
    successful.

    Args:
        user_id_for_presence_update (str): The ID of the user to update. Cannot be an empty string.
        new_presence_state (str): The new presence status. Must be either 'active' or 'away'.

    Returns:
        Dict[str, Any]: A dictionary confirming the success of the operation.
            - ok (bool): Always True if the presence was set successfully.

    Raises:
        TypeError: If `user_id_for_presence_update` or `new_presence_state` is not a string.
        ValueError: If `user_id_for_presence_update` is an empty string or if `new_presence_state` is not
                    'active' or 'away'.
        UserNotFoundError: If the user with the specified `user_id_for_presence_update` is not found.
    """
    from slack.Users import setPresence
    return setPresence(user_id=user_id_for_presence_update, presence=new_presence_state)


def upload_user_profile_picture(
    target_user_for_photo_update,
    base64_encoded_image_data,
    crop_origin_x_coordinate=None,
    crop_origin_y_coordinate=None,
    crop_box_width=None
):
    """
    Sets a user's profile photo.

    This function updates the profile photo for a specified user. It takes a
    user ID and a base64-encoded string representing the new image.
    Optionally, cropping parameters can be provided to specify how the image
    should be cropped. The function updates the user's record in the
    database with the new image and cropping information.

    Args:
        target_user_for_photo_update (str): The ID of the user to update. Cannot be an empty string.
        base64_encoded_image_data (str): A base64-encoded string of the image data. Cannot be empty.
        crop_origin_x_coordinate (Optional[int]): The x-coordinate for the top-left corner of the crop.
            Must be a non-negative integer if provided.
        crop_origin_y_coordinate (Optional[int]): The y-coordinate for the top-left corner of the crop.
            Must be a non-negative integer if provided.
        crop_box_width (Optional[int]): The width of the crop box.
            Must be a non-negative integer if provided.

    Returns:
        Dict[str, Any]: A dictionary confirming the success of the operation.
            - ok (bool): Always True if the photo was set successfully.

    Raises:
        TypeError: If `target_user_for_photo_update` or `base64_encoded_image_data` is not a string, or if any of the
                   cropping parameters are not integers.
        ValueError: If `target_user_for_photo_update` or `base64_encoded_image_data` is an empty string, or if any of
                    the cropping parameters are negative.
        UserNotFoundError: If the user with the specified `target_user_for_photo_update` is not found.
    """
    from slack.Users import setPhoto
    return setPhoto(
        user_id=target_user_for_photo_update,
        image=base64_encoded_image_data,
        crop_x=crop_origin_x_coordinate,
        crop_y=crop_origin_y_coordinate,
        crop_w=crop_box_width
    )


def remove_user_profile_picture(user_id_for_photo_deletion):
    """
    Deletes the profile photo for a user.

    This function removes the profile picture for a specified user. It
    identifies the user by their ID and deletes the associated image data,
    including any cropping information, from their profile.

    Args:
        user_id_for_photo_deletion (str): The ID of the user whose photo should be deleted.

    Returns:
        Dict[str, Any]: A dictionary confirming the success of the operation,
            in the format `{'ok': True}`.

    Raises:
        TypeError: If `user_id_for_photo_deletion` is not a string.
        ValueError: If `user_id_for_photo_deletion` is an empty string or if the user does not have a profile photo to delete.
        UserNotFoundError: If a user with the specified `user_id_for_photo_deletion` cannot be found.
    """
    from slack.Users import deletePhoto
    return deletePhoto(user_id=user_id_for_photo_deletion)


def fetch_user_details(user_identifier_to_fetch, return_locale_information=False):
    """
    Gets information about a user.

    Args:
        user_identifier_to_fetch (str): User ID to get info on.
        return_locale_information (bool): Whether to include locale. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - user (Dict[str, Any]): User information if successful

    Raises:
        ValueError: If user_identifier_to_fetch is invalid or not a string
        TypeError: If return_locale_information is not a boolean
        SlackError: If user is not found in the database
    """
    from slack.Users import info
    return info(user_id=user_identifier_to_fetch, include_locale=return_locale_information)


def check_user_activity_status(user_id_for_presence_check=None):
    """
    Gets user presence information.

    Args:
        user_id_for_presence_check (Optional[str]): User ID to get presence info on. Defaults to the authed user.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - presence (str): User's presence status

    Raises:
        TypeError: If user_id_for_presence_check is provided but not a string
        MissingUserIDError: If no user_id_for_presence_check is provided and there is no authenticated user
        UserNotFoundError: If the specified user_id_for_presence_check does not exist in the database
    """
    from slack.Users import getPresence
    return getPresence(user_id=user_id_for_presence_check)


def update_user_profile_fields(profile_data_to_update, user_id_for_profile_update):
    """
    Set a user's profile information.

    Args:
        profile_data_to_update (Dict[str, Any]): Dictionary of profile fields to set. Must contain valid profile fields:
            - display_name (Optional[str]): The user's display name
            - real_name (Optional[str]): The user's real name
            - email (Optional[str]): The user's email address. Must contain '@' character if provided
            - phone (Optional[str]): The user's phone number. Must contain only digits, spaces, hyphens, and '+' if provided
            - status_emoji (Optional[str]): The user's status emoji
            - status_text (Optional[str]): The user's status text
            - title (Optional[str]): The user's title
            - team (Optional[str]): The user's team
            - skype (Optional[str]): The user's Skype handle
            - first_name (Optional[str]): The user's first name
            - last_name (Optional[str]): The user's last name
        user_id_for_profile_update (str): ID of user to change. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - profile (Dict[str, Any]): Updated profile information if successful, containing:
                - display_name (Optional[str]): The user's display name
                - real_name (Optional[str]): The user's real name
                - email (Optional[str]): The user's email address
                - phone (Optional[str]): The user's phone number
                - status_emoji (Optional[str]): The user's status emoji
                - status_text (Optional[str]): The user's status text
                - title (Optional[str]): The user's title
                - team (Optional[str]): The user's team
                - skype (Optional[str]): The user's Skype handle
                - first_name (Optional[str]): The user's first name
                - last_name (Optional[str]): The user's last name

    Raises:
        TypeError: If user_id_for_profile_update is not a string
        MissingUserIDError: If user_id_for_profile_update is empty or None
        UserNotFoundError: If the specified user_id_for_profile_update does not exist
        InvalidProfileError: If the profile_data_to_update data is invalid
        ValidationError: If any profile_data_to_update field fails validation
    """
    from slack.Users import set_user_profile
    return set_user_profile(profile=profile_data_to_update, user_id=user_id_for_profile_update)


def enumerate_workspace_users(
    user_list_pagination_cursor=None,
    include_user_locale_data=False,
    user_list_page_limit=100,
    filter_users_by_team_id=None
):
    """
    Lists all users in a Slack team.

    Args:
        user_list_pagination_cursor (Optional[str]): Pagination cursor encoded in base64 in format "user:{user_id}". Must be a valid base64 string if provided.
        include_user_locale_data (bool): Include locale information. Defaults to False.
        user_list_page_limit (int): Maximum number of items to return. Must be positive and no larger than 1000. Defaults to 100.
        filter_users_by_team_id (Optional[str]): Team ID to filter users by. Must be a non-empty string if provided.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - members (List[Dict[str, Any]]): List of user objects (when successful), each containing:
                - id (str): User ID
                - team_id (str): Team ID the user belongs to
                - name (str): Username
                - real_name (str): User's real name
                - profile (Dict[str, Any]): User profile information containing:
                    - email (str): User's email address
                    - display_name (str): Display name
                    - image (str): Profile image data
                    - image_crop_x (int): X coordinate for image crop
                    - image_crop_y (int): Y coordinate for image crop
                    - image_crop_w (int): Width for image crop
                    - title (str): Job title
                - is_admin (bool): Whether user is an admin
                - is_bot (bool): Whether user is a bot
                - deleted (bool): Whether user is deleted
                - presence (str): User's presence status
                - locale (str): User's locale (only if include_locale is True)
            - response_metadata (Dict[str, Any]): Pagination metadata containing:
                - next_cursor (Optional[str]): Base64 encoded cursor for next page of results in format "user:{user_id}"

    Raises:
        TypeError: If input types are invalid:
            - 'user_list_pagination_cursor' is not a string (and not None).
            - 'include_user_locale_data' is not a boolean.
            - 'user_list_page_limit' is not an integer.
            - 'filter_users_by_team_id' is not a string (and not None).
        ValueError: If 'user_list_page_limit' is not a positive integer or exceeds 1000.
        InvalidCursorValueError: If 'user_list_pagination_cursor' cannot be decoded properly or user ID not found.
    """
    from slack.Users import list_users
    return list_users(
        cursor=user_list_pagination_cursor,
        include_locale=include_user_locale_data,
        limit=user_list_page_limit,
        team_id=filter_users_by_team_id
    )


def retrieve_user_identity(user_id_for_identity_lookup):
    """
    Get a user's identity information.

    Args:
        user_id_for_identity_lookup (str): User ID. Must be a non-empty string.

    Returns:
        dict: A dictionary containing the user's identity information with the following structure:
            - ok (bool): Whether the operation was successful
            - user (dict): User identity information containing:
                - name (str): User's username
                - id (str): User's ID
            - team (dict): Team information containing:
                - id (str): Team ID the user belongs to

    Raises:
        TypeError: If user_id_for_identity_lookup is not a string.
        MissingUserIDError: If user_id_for_identity_lookup is empty or None.
        UserNotFoundError: If the specified user_id_for_identity_lookup does not exist in the database.
    """
    from slack.Users import identity
    return identity(user_id=user_id_for_identity_lookup)


def find_user_by_email_address(user_email_to_search):
    """
    Find a user with an email address.

    Args:
        user_email_to_search (str): An email address belonging to a user. Must be a non-empty string.

    Returns:
        Dict[str, Any]: User data if found (e.g., {"ok": True, "user": user_data}).

    Raises:
        TypeError: If `user_email_to_search` is not a string.
        EmptyEmailError: If `user_email_to_search` is an empty string.
        InvalidEmailFormatError: If user_email_to_search format is invalid (missing '@', empty local/domain parts, missing TLD, etc.).
        UserNotFoundError: If no user is found with the specified user_email_to_search address.
    """
    from slack.Users import lookupByEmail
    return lookupByEmail(email=user_email_to_search)


def fetch_authenticated_user_id():
    """
    Helper endpoint that returns the ID of the user who is currently authenticated in the
    simulation (``DB["current_user"]["id"]``).

    Returns:
        Dict[str, Any]:
            - ok (bool): Always ``True`` when the current user is set.
            - user_id (str): ID of the current user.

    Errors:
        If the simulator has not set a current user yet, returns ``{"ok": False, "error": "current_user_not_set"}``.
    """
    from slack.Users import current_user_id
    return current_user_id()
