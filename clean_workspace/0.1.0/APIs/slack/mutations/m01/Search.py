# This file is automatically generated by the MutationBuilder

def find_messages_by_query(message_search_expression):
    """
    Searches for messages matching a query.

    The query is a space-separated string of terms and filters. Text terms are
    matched against the message's content. By default, all text terms must be
    present in the message (AND logic).

    Args:
        message_search_expression (str): The search query. The structure is a space-separated string
            of terms and filters. Supported filters are:
            - `from:@<user>`: Restricts the search to messages from a specific user.
            - `in:#<channel>`: Restricts the search to a specific channel.
            - `has:link`: Narrows search to messages that contain a URL.
            - `has:reaction`: Narrows search to messages that have a reaction.
            - `has:star`: Narrows search to messages that have been starred.
            - `before:YYYY-MM-DD`: Filters for messages sent before a specific date.
            - `after:YYYY-MM-DD`: Filters for messages sent after a specific date.
            - `during:YYYY-MM-DD`: Filters for messages on a specific date. Also
              supports `YYYY` for a year or `YYYY-MM` for a month.
            - `-<word>`: Excludes messages containing the specified word.
            - `some*`: Wildcard support for partial word matching.
            - `OR`: When used between text terms (e.g., "hello OR world"), the
              logic changes to match messages containing any of the terms.

    Returns:
        List[Dict[str, Any]]: List of matching messages, where each message contains:
            - ts (str): Message timestamp
            - text (str): Message content
            - user (str): User ID who sent the message
            - channel (str): Channel ID where message was sent
            - reactions (Optional[List[Dict[str, Any]]]): List of reactions if any

    Raises:
        TypeError: If 'message_search_expression' is not a string.
    """
    from slack.Search import search_messages
    return search_messages(query=message_search_expression)


def find_files_by_query(file_search_expression):
    """
    Searches for files matching a query.

    The query is a space-separated string of terms and filters. Text terms are
    matched against the file's name and title. If multiple text terms are
    provided, a match occurs if any term is found (OR logic).

    Args:
        file_search_expression (str): The search query. The structure is a space-separated string
            of terms and filters. Supported filters for files are:
            - `in:#<channel>`: Restricts the search to a specific channel.
            - `filetype:<type>`: Narrows search to a specific file type (e.g., 'pdf', 'image').
            - `has:star`: Narrows search to files that have been starred.
            Note: Date filters, user filters (`from:`), exclusion (`-`), and
            wildcards (`*`) are not applicable to file searches.

    Returns:
        List[Dict[str, Any]]: List of matching files, where each file contains:
            - id (str): File ID
            - name (str): File name
            - title (str): File title
            - filetype (str): File type
            - channels (List[str]): List of channel IDs where file is shared
            - is_starred (bool): Whether the file is starred
    """
    from slack.Search import search_files
    return search_files(query=file_search_expression)


def find_content_by_query(unified_search_expression):
    """
    Searches for messages and files matching a query.

    This function executes a search across both messages and files using a single
    query. The query is a space-separated string of terms and filters. Filters
    are applied to the resource type they are relevant to (e.g., `filetype:`
    only applies to files).

    Args:
        unified_search_expression (str): The search query. The structure is a space-separated string
            of terms and filters.

            For Text Terms:
            - In Messages: Matched against message content. Default logic is AND,
              but `OR` can be used to match any term.
            - In Files: Matched against the file's name and title. The logic is
              always OR (any term match).

            Supported Filters:
            - `in:#<channel>`: (Messages & Files) Restricts search to a channel.
            - `has:star`: (Messages & Files) Narrows to starred items.
            - `from:@<user>`: (Messages-only) Restricts to messages from a user.
            - `has:link`: (Messages-only) Narrows to messages containing a URL.
            - `has:reaction`: (Messages-only) Narrows to messages with reactions.
            - `before:`, `after:`, `during:`: (Messages-only) Date-based filters.
            - `-<word>`: (Messages-only) Excludes messages with the word.
            - `some*`: (Messages-only) Wildcard support.
            - `filetype:<type>`: (Files-only) Narrows to a specific file type.

    Returns:
        Dict[str, List[Dict[str, Any]]]: Dictionary containing:
            - messages (List[Dict[str, Any]]): List of matching messages
            - files (List[Dict[str, Any]]): List of matching files
    """
    from slack.Search import search_all
    return search_all(query=unified_search_expression)
