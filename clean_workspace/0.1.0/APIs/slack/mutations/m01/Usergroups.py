# This file is automatically generated by the MutationBuilder

def form_new_user_group(
    user_group_name,
    mention_handle_for_group=None,
    group_team_id=None,
    group_description_text=None,
    initial_channel_ids_list=None,
    creation_timestamp_string=str(time.time())
):
    """
    Creates a new User Group.

    Args:
        user_group_name (str): Name of the User Group. Must be a non-empty string.
        mention_handle_for_group (Optional[str]): A mention handle for the User Group. Must be a string if provided.
        group_team_id (Optional[str]): ID of the team the User Group belongs to. Must be a string if provided.
        group_description_text (Optional[str]): Description of the User Group. Must be a string if provided.
        initial_channel_ids_list (Optional[List[str]]): List of channel IDs to include in the User Group.
                                           If provided, must be a list of strings.
        creation_timestamp_string (str): Timestamp when the User Group was created.
                          Defaults to current time as a string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True if successful.
            - usergroup (Dict[str, Any]): The created user group.

    Raises:
        TypeError: If any argument has an invalid type.
        ValueError: If any argument has an invalid value.
    """
    from slack.Usergroups import create
    return create(
        name=user_group_name,
        handle=mention_handle_for_group,
        team_id=group_team_id,
        description=group_description_text,
        channel_ids=initial_channel_ids_list,
        created_at=creation_timestamp_string
    )


def enumerate_team_user_groups(
    target_team_identifier=None,
    show_disabled_groups=False,
    return_user_count=False,
    return_user_id_list=False
):
    """
    Lists all User Groups for a team.

    Args:
        target_team_identifier (Optional[str]): ID of the team to list User Groups for.
        show_disabled_groups (bool): Include disabled User Groups. Defaults to False.
        return_user_count (bool): Include the number of users. Defaults to False.
        return_user_id_list (bool): Include the list of user IDs. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the request was successful
            - usergroups (List[Dict[str, Any]]): List of user groups, where each group contains:
                - id (str): User Group ID
                - team_id (Optional[str]): Team ID
                - name (str): User Group name
                - handle (Optional[str]): User Group handle
                - description (Optional[str]): User Group description
                - date_create (str): Creation timestamp
                - date_update (str): Last update timestamp
                - date_delete (int): Deletion timestamp
                - prefs (Dict[str, List[str]]): Preferences containing:
                    - channels (List[str]): List of channel IDs
                    - groups (List[str]): List of group IDs
                - users (Optional[List[str]]): List of user IDs (if include_users=True)
                - user_count (Optional[int]): Number of users (if include_count=True)
                - disabled (bool): Whether the group is disabled

    Raises:
        TypeError: If any argument is of an incorrect type.
    """
    from slack.Usergroups import list
    return list(
        team_id=target_team_identifier,
        include_disabled=show_disabled_groups,
        include_count=return_user_count,
        include_users=return_user_id_list
    )


def modify_existing_user_group(
    group_to_update_id,
    new_group_name=None,
    new_group_handle=None,
    new_group_description=None,
    updated_channel_ids_list=None,
    update_timestamp_string=None
):
    """
    Updates an existing User Group.

    Args:
        group_to_update_id (str): The ID of the User Group to update.
        new_group_name (Optional[str]): New name for the User Group. Must be a non-empty string if provided.
        new_group_handle (Optional[str]): New handle for the User Group. Must be a non-empty string if provided.
        new_group_description (Optional[str]): New description for the User Group. Must be a string if provided.
        updated_channel_ids_list (Optional[List[str]]): New list of channel IDs. Must be a list of strings if provided.
        update_timestamp_string (Optional[str]): Timestamp when the User Group was last updated. Must be a string if provided.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the request was successful
            - usergroup (Dict[str, Any]): The updated user group if successful

    Raises:
        UserGroupIdInvalidError: If group_to_update_id is invalid or empty.
        UserGroupNotFoundError: If the group_to_update_id does not exist.
        ValueError: If new_group_name or new_group_handle already exists, or if updated_channel_ids_list contains invalid channel IDs.
        TypeError: If any parameter has an invalid type.
    """
    from slack.Usergroups import update
    return update(
        usergroup_id=group_to_update_id,
        name=new_group_name,
        handle=new_group_handle,
        description=new_group_description,
        channel_ids=updated_channel_ids_list,
        date_update=update_timestamp_string
    )


def deactivate_user_group(group_to_disable_id, deletion_timestamp=None):
    """
    Disables a User Group.

    Args:
        group_to_disable_id (str): The ID of the User Group to disable.
        deletion_timestamp (Optional[str]): Timestamp string when the User Group was deleted.
                                     If None, current time will be used.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): True if the request was successful.

    Raises:
        TypeError: If `group_to_disable_id` is not a string, or if `deletion_timestamp`
                   is provided and is not a string.
        UserGroupIdInvalidError: If `group_to_disable_id` is an empty string.
        UserGroupNotFoundError: If the `group_to_disable_id` does not exist.
        UserGroupAlreadyDisabledError: If the user group is already disabled.
    """
    from slack.Usergroups import disable
    return disable(usergroup_id=group_to_disable_id, date_delete=deletion_timestamp)


def reactivate_user_group(group_to_enable_id):
    """
    Enables a User Group.

    This method enables a user group that has been disabled.
    It resets the disabled flag and the deleted timestamp.
    It also resets the user who deleted it.

    Args:
        group_to_enable_id (str): The ID of the User Group to enable.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the request was successful

    Raises:
        TypeError: If `group_to_enable_id` is not a string.
        UserGroupIdInvalidError: If `group_to_enable_id` is an empty string.
        UserGroupNotFoundError: If the `group_to_enable_id` does not exist.
    """
    from slack.Usergroups import enable
    return enable(usergroup_id=group_to_enable_id)
