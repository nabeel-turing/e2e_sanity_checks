# This file is automatically generated by the MutationBuilder

def cancel_reminder(reminder_to_delete_id):
    """
    Deletes a reminder.

    Args:
        reminder_to_delete_id (str): The ID of the reminder. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True for successful deletion

    Raises:
        TypeError: If reminder_to_delete_id is not a string.
        MissingReminderIdError: If reminder_to_delete_id is an empty string.
        ReminderNotFoundError: If reminder_to_delete_id does not exist in the database.
    """
    from slack.Reminders import delete
    return delete(reminder_id=reminder_to_delete_id)


def fetch_reminder_details(target_reminder_id):
    """
    Gets information about a reminder.

    Args:
        target_reminder_id (str): The ID of the reminder. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True for successful retrieval
            - reminder (Dict[str, Any]): The reminder data

    Raises:
        TypeError: If target_reminder_id is not a string.
        MissingReminderIdError: If target_reminder_id is an empty string.
        ReminderNotFoundError: If target_reminder_id does not exist in the database.
    """
    from slack.Reminders import info
    return info(reminder_id=target_reminder_id)


def mark_reminder_as_done(reminder_to_complete_id, completion_timestamp_value):
    """
    Marks a reminder as complete.

    Args:
        reminder_to_complete_id (str): The ID of the reminder. Must be a non-empty string.
        completion_timestamp_value (str): Timestamp for when it was completed. Must be a non-empty string representing a valid numeric timestamp.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True for successful completion

    Raises:
        TypeError: If reminder_to_complete_id or completion_timestamp_value is not a string.
        MissingReminderIdError: If reminder_to_complete_id is an empty string.
        MissingCompleteTimestampError: If completion_timestamp_value is an empty string.
        InvalidCompleteTimestampError: If completion_timestamp_value cannot be parsed as a valid numeric timestamp.
        ReminderNotFoundError: If reminder_to_complete_id does not exist in the database.
        ReminderAlreadyCompleteError: If the reminder is already marked as complete.
    """
    from slack.Reminders import complete
    return complete(reminder_id=reminder_to_complete_id, complete_ts=completion_timestamp_value)


def enumerate_user_reminders(subject_user_id):
    """
    Lists all reminders created by or for a given user.

    Args:
        subject_user_id (str): User ID. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the request was successful.
            - reminders (List[Dict[str, Any]]): List of reminder objects.

    Raises:
        TypeError: If subject_user_id is not a string.
        MissingUserIDError: If subject_user_id is an empty string.
        UserNotFoundError: If subject_user_id is not found in the database.
    """
    from slack.Reminders import list_reminders
    return list_reminders(user_id=subject_user_id)


def create_new_reminder(
    recipient_user_identifier,
    reminder_message_content,
    reminder_trigger_timestamp,
    reminder_delivery_channel_id=None
):
    """
    Creates a reminder with comprehensive input validation.

    Validation Logic:
        1. Type validation: user_id, text, and ts must be strings; channel_id must be string or None
        2. Empty string validation: user_id and text cannot be empty strings
        3. Timestamp validation: ts cannot be empty and must represent a valid numeric value
        4. User existence validation: user_id must exist in the database

    Args:
        recipient_user_identifier (str): User ID to remind. Must be a non-empty string.
        reminder_message_content (str): The content of the reminder. Must be a non-empty string.
        reminder_trigger_timestamp (str): When this reminder should happen (unix timestamp as a string).
                  Must be a non-empty string representing a number (e.g., "1678886400" or "1678886400.5").
        reminder_delivery_channel_id (Optional[str]): Channel ID to remind in. Defaults to None.
                                    If provided as a string, it can be empty (unlike user_id and text).

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the request was successful (always True if no exception).
            - reminder (Dict[str, Any]): The created reminder data containing:
                - id (str): Unique reminder ID
                - creator_id (str): ID of user who created the reminder
                - user_id (str): ID of user to be reminded
                - text (str): Reminder content
                - time (str): When reminder should trigger (timestamp)
                - complete_ts (None): Completion timestamp (null until completed)
                - channel_id (Optional[str]): Channel ID if specified

    Raises:
        TypeError: If recipient_user_identifier, reminder_message_content, or reminder_trigger_timestamp is not a string, or if reminder_delivery_channel_id is not string/None.
        ValueError: If recipient_user_identifier or reminder_message_content is an empty string.
        InvalidTimestampFormatError: If reminder_trigger_timestamp is empty or cannot be parsed as a numeric timestamp.
        UserNotFoundError: If the recipient_user_identifier does not exist in the database.
    """
    from slack.Reminders import add
    return add(
        user_id=recipient_user_identifier,
        text=reminder_message_content,
        ts=reminder_trigger_timestamp,
        channel_id=reminder_delivery_channel_id
    )
