# This file is automatically generated by the MutationBuilder

def post_action_message(performing_user_id, destination_channel, action_message_text):
    """
    Share a me message into a channel.

    Args:
        performing_user_id (str): User ID.
        destination_channel (str): Channel to send message to. Must be a non-empty string.
        action_message_text (str): Text of the message to send. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - channel (str): The channel ID where the message was sent
            - text (str): The message text
            - ts (str): The timestamp of the message

    Raises:
        TypeError: If `performing_user_id`, `destination_channel`, or `action_message_text` is not a string.
        InvalidChannelError: If `destination_channel` is an empty string.
        InvalidTextError: If `action_message_text` is an empty string.
    """
    from slack.Chat import meMessage
    return meMessage(
        user_id=performing_user_id,
        channel=destination_channel,
        text=action_message_text
    )


def erase_posted_message(channel_of_message, timestamp_of_message_to_delete):
    """
    Deletes a message from a specified channel by its timestamp.

    Args:
        channel_of_message (str): The unique identifier of the channel containing the message.
        timestamp_of_message_to_delete (str): A Unix timestamp with fractional seconds representing the message to be deleted.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): True if deletion was successful.
            - channel (str) : The channel ID if deletion was successful.
            - ts (str): A Unix timestamp with fractional seconds representing

    Raises:
        ValueError: If any of the required parameters (channel_of_message, timestamp_of_message_to_delete) are missing or invalid.
        ChannelNotFoundError: If the specified channel_of_message is not found.
        MessageNotFoundError: If no message exists with the given timestamp.
        PermissionError: If the user does not have permission to delete the message.
    """
    from slack.Chat import delete
    return delete(channel=channel_of_message, ts=timestamp_of_message_to_delete)


def cancel_scheduled_message(target_channel_of_scheduled_msg, pending_message_identifier):
    """
    Deletes a scheduled message from a specified channel.

    Args:
        target_channel_of_scheduled_msg (str): The unique identifier of the channel containing the scheduled message.
        pending_message_identifier (str): The unique ID of the scheduled message.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): True if deletion was successful.
            - channel (str): The channel ID.
            - scheduled_message_id (str): The ID of the deleted scheduled message.

    Raises:
        ValueError: If any input is invalid.
        PermissionError: If the user is not authenticated or lacks deletion rights.
        ChannelNotFoundError: If the target_channel_of_scheduled_msg doesn't exist.
        MessageNotFoundError: If no matching scheduled message is found.
    """
    from slack.Chat import deleteScheduledMessage
    return deleteScheduledMessage(
        channel=target_channel_of_scheduled_msg,
        scheduled_message_id=pending_message_identifier
    )


def send_temporary_private_message(
    ephemeral_message_channel,
    recipient_user_id,
    message_attachments_json=None,
    message_block_kit_list=None,
    fallback_message_text=None,
    post_as_authenticated_user=None,
    sender_icon_emoji=None,
    sender_icon_url=None,
    enable_name_linking=None,
    markdown_formatted_text=None,
    message_parsing_mode=None,
    in_reply_to_thread_timestamp=None,
    sender_display_name=None
):
    """
    Sends an ephemeral message to a user in a channel.

    Args:
        ephemeral_message_channel (str): Channel to send the message to. Can't be empty.
        recipient_user_id (str): User to send the message to. Can't be empty.
        message_attachments_json (Optional[str]): JSON-based array of structured attachments. Must be a string if provided.
        message_block_kit_list (Optional[List[Dict[str, Any]]]): A JSON-based array of structured blocks. Must be a list if provided.
        fallback_message_text (Optional[str]): Message text. Must be a string if provided.
        post_as_authenticated_user (Optional[bool]): Pass true to post the message as the authed user. Must be a boolean if provided.
        sender_icon_emoji (Optional[str]): Emoji to use as the icon. Must be a string if provided.
        sender_icon_url (Optional[str]): URL to an image to use as the icon. Must be a string if provided.
        enable_name_linking (Optional[bool]): Find and link channel names and usernames. Must be a boolean if provided.
        markdown_formatted_text (Optional[str]): Message text formatted in markdown. Must be a string if provided.
        message_parsing_mode (Optional[str]): Change how messages are treated. Must be a string if provided.
        in_reply_to_thread_timestamp (Optional[str]): Provide another message's ts value to post this message in a thread. Must be a string if provided.
        sender_display_name (Optional[str]): Set your bot's or your user name. Must be a string if provided.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful (always True)
            - message (dict): The sent ephemeral message object containing:
                - channel (str): The channel ID where the message was sent
                - user (str): The user ID who received the ephemeral message
                - text (Optional[str]): The message text if provided
                - attachments (Optional[str]): JSON attachments if provided
                - blocks (Optional[List[Dict[str, Any]]]): Structured blocks if provided
                - as_user (Optional[bool]): Whether posted as the authed user if provided
                - icon_emoji (Optional[str]): Icon emoji if provided
                - icon_url (Optional[str]): Icon URL if provided
                - link_names (Optional[bool]): Whether to link names if provided
                - markdown_text (Optional[str]): Markdown formatted text if provided
                - parse (Optional[str]): Message parsing mode if provided
                - thread_ts (Optional[str]): Thread timestamp if provided
                - username (Optional[str]): Bot/user name if provided

    Raises:
        MissingRequiredArgumentsError: If 'ephemeral_message_channel' or 'recipient_user_id' arguments are missing or empty.
        InvalidChannelError: If 'ephemeral_message_channel' is not a string.
        InvalidUserError: If 'recipient_user_id' is not a string.
        TypeError: If any optional parameter is provided with an incorrect type.
    """
    from slack.Chat import postEphemeral
    return postEphemeral(
        channel=ephemeral_message_channel,
        user=recipient_user_id,
        attachments=message_attachments_json,
        blocks=message_block_kit_list,
        text=fallback_message_text,
        as_user=post_as_authenticated_user,
        icon_emoji=sender_icon_emoji,
        icon_url=sender_icon_url,
        link_names=enable_name_linking,
        markdown_text=markdown_formatted_text,
        parse=message_parsing_mode,
        thread_ts=in_reply_to_thread_timestamp,
        username=sender_display_name
    )


def publish_message_to_channel(
    target_channel_for_message,
    message_timestamp_for_update=None,
    structured_attachments_json=None,
    block_kit_layout=None,
    plain_text_content=None,
    send_as_authed_user=None,
    custom_sender_icon_emoji=None,
    custom_sender_icon_url=None,
    auto_link_names_and_groups=None,
    message_content_markdown=None,
    event_metadata_json=None,
    disable_markup_parsing=None,
    content_parsing_behavior=None,
    broadcast_reply_to_channel=None,
    reply_thread_identifier_ts=None,
    expand_text_urls=None,
    suppress_media_previews=None,
    custom_sender_username=None
):
    """
    Sends a message to a channel.

    Args:
        target_channel_for_message (str): Channel ID. Must be a non-empty string.
        message_timestamp_for_update (Optional[str]): Message timestamp. Must be a string if provided.
        structured_attachments_json (Optional[str]): JSON-based array of structured attachments. Must be a string if provided.
        block_kit_layout (Optional[List[Dict[str, Any]]]): A JSON-based array of structured blocks.
            If provided, must be a list of dictionaries. Each dictionary's structure
            is validated by BlockItemStructure.
        plain_text_content (Optional[str]): Message text. Must be a string if provided.
        send_as_authed_user (Optional[bool]): Post as user (legacy). Must be a boolean if provided.
        custom_sender_icon_emoji (Optional[str]): Emoji to use as the icon. Must be a string if provided.
        custom_sender_icon_url (Optional[str]): URL to an image to use as the icon. Must be a string if provided.
        auto_link_names_and_groups (Optional[bool]): Find and link user groups. Must be a boolean if provided.
        message_content_markdown (Optional[str]): Message text formatted in markdown. Must be a string if provided.
        event_metadata_json (Optional[str]): JSON object with event_type and event_payload fields. Must be a string if provided.
        disable_markup_parsing (Optional[bool]): Disable Slack markup parsing. Must be a boolean if provided.
        content_parsing_behavior (Optional[str]): Change how messages are treated. Must be a string if provided.
        broadcast_reply_to_channel (Optional[bool]): Make reply visible to everyone. Must be a boolean if provided.
        reply_thread_identifier_ts (Optional[str]): Provide another message's ts value to make this message a reply. Must be a string if provided.
        expand_text_urls (Optional[bool]): Enable unfurling of primarily text-based content. Must be a boolean if provided.
        suppress_media_previews (Optional[bool]): Disable unfurling of media content. Must be a boolean if provided.
        custom_sender_username (Optional[str]): Set your bot's user name. Must be a string if provided.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - message (dict): Either:
                1. The sent message object containing:
                    - channel (str): Channel ID
                    - text (str): Message text
                    - attachments (Optional[str]): Message attachments
                    - blocks (Optional[List[Dict]]): Message blocks
                    - user (str): User ID
                    - ts (str): Message timestamp
                    - as_user (Optional[bool]): Whether posted as user
                    - icon_emoji (Optional[str]): Icon emoji
                    - icon_url (Optional[str]): Icon URL
                    - link_names (Optional[bool]): Link names setting
                    - markdown_text (Optional[str]): Markdown text
                    - metadata (Optional[str]): Message metadata
                    - mrkdwn (Optional[bool]): Markdown setting
                    - parse (Optional[str]): Parse setting
                    - reply_broadcast (Optional[bool]): Reply broadcast setting
                    - thread_ts (Optional[str]): Thread timestamp
                    - unfurl_links (Optional[bool]): Unfurl links setting
                    - unfurl_media (Optional[bool]): Unfurl media setting
                    - username (Optional[str]): Username
                OR
                2. The parent message object with replies list containing:
                    - All fields from the sent message object above
                    - replies (List[Dict]): List of reply messages, where each reply contains:
                        - channel (str): Channel ID
                        - text (str): Reply text
                        - attachments (Optional[str]): Reply attachments
                        - blocks (Optional[List[Dict]]): Reply blocks
                        - user (str): User ID
                        - ts (str): Reply timestamp
                        - as_user (Optional[bool]): Whether posted as user
                        - icon_emoji (Optional[str]): Icon emoji
                        - icon_url (Optional[str]): Icon URL
                        - link_names (Optional[bool]): Link names setting
                        - markdown_text (Optional[str]): Markdown text
                        - metadata (Optional[str]): Reply metadata
                        - mrkdwn (Optional[bool]): Markdown setting
                        - parse (Optional[str]): Parse setting
                        - reply_broadcast (Optional[bool]): Reply broadcast setting
                        - thread_ts (Optional[str]): Thread timestamp
                        - unfurl_links (Optional[bool]): Unfurl links setting
                        - unfurl_media (Optional[bool]): Unfurl media setting
                        - username (Optional[str]): Username

    Raises:
        TypeError: If any argument is of an incorrect type (e.g., 'target_channel_for_message' not a string,
                   'block_kit_layout' not a list when provided, items in 'block_kit_layout' not dictionaries,
                   'send_as_authed_user' not a boolean when provided).
        ValueError: If 'target_channel_for_message' is an empty string.
        ValidationError: If an item in 'block_kit_layout' does not conform to BlockItemStructure.
                                  (With current 'extra=allow', this primarily ensures it's a parsable dict,
                                  but would enforce fields if BlockItemStructure had them defined).
        ChannelNotFoundError: If the specified target_channel_for_message does not exist in the database.
        MessageNotFoundError: If attempting to reply to a thread that doesn't exist or if the target_channel_for_message has no messages.
    """
    from slack.Chat import postMessage
    return postMessage(
        channel=target_channel_for_message,
        ts=message_timestamp_for_update,
        attachments=structured_attachments_json,
        blocks=block_kit_layout,
        text=plain_text_content,
        as_user=send_as_authed_user,
        icon_emoji=custom_sender_icon_emoji,
        icon_url=custom_sender_icon_url,
        link_names=auto_link_names_and_groups,
        markdown_text=message_content_markdown,
        metadata=event_metadata_json,
        mrkdwn=disable_markup_parsing,
        parse=content_parsing_behavior,
        reply_broadcast=broadcast_reply_to_channel,
        thread_ts=reply_thread_identifier_ts,
        unfurl_links=expand_text_urls,
        unfurl_media=suppress_media_previews,
        username=custom_sender_username
    )


def get_pending_scheduled_messages(
    filter_by_channel=None,
    pagination_start_point=None,
    time_range_end=None,
    max_results_count=None,
    time_range_start=None,
    filter_by_team=None
):
    """
    Returns a list of scheduled messages.

    Args:
        filter_by_channel (Optional[str]): The channel of the scheduled messages. Defaults to None.
        pagination_start_point (Optional[str]): For pagination purposes. Should be a string representing a non-negative integer. Defaults to None.
        time_range_end (Optional[str]): A Unix timestamp string (integer or float representation) of the latest value in the time range. Defaults to None.
        max_results_count (Optional[int]): Maximum number of original entries to return. Must be a non-negative integer. Defaults to None.
        time_range_start (Optional[str]): A Unix timestamp string (integer or float representation) of the oldest value in the time range. Defaults to None.
        filter_by_team (Optional[str]): encoded team id to list channels in, required if org token is used. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful.
            - scheduled_messages (list): List of scheduled message objects.
            - response_metadata (dict): Pagination metadata containing:
                - next_cursor (Optional[str]): Cursor for next page of results.

    Raises:
        TypeError: If any argument is of an incorrect type (e.g., `filter_by_channel` is not a string, `max_results_count` is not an int).
        InvalidTimestampFormatError: If `time_range_end` or `time_range_start` is provided but is not a valid numeric string.
        InvalidLimitValueError: If `max_results_count` is provided and is negative.
        InvalidCursorFormatError: If `pagination_start_point` is provided but is not a string representing a non-negative integer.
        CursorOutOfBoundsError: If `pagination_start_point` is valid format but out of bounds for the current filtered data.
    """
    from slack.Chat import list_scheduled_Messages
    return list_scheduled_Messages(
        channel=filter_by_channel,
        cursor=pagination_start_point,
        latest=time_range_end,
        limit=max_results_count,
        oldest=time_range_start,
        team_id=filter_by_team
    )


def queue_message_for_later_delivery(
    scheduling_user_id,
    delivery_channel_id,
    scheduled_delivery_time,
    future_message_attachments=None,
    future_message_blocks=None,
    future_message_text=None,
    deliver_as_authed_user=False,
    enable_name_linking_on_delivery=False,
    future_message_markdown_text=None,
    future_message_metadata=None,
    delivery_parsing_options=None,
    broadcast_reply_on_delivery=False,
    reply_to_thread_on_delivery=None,
    unfurl_links_on_delivery=True,
    unfurl_media_on_delivery=False
):
    """
    Schedules a message to be sent to a channel.

    Args:
        scheduling_user_id (str): User ID.
        delivery_channel_id (str): Channel to send the message to.
        scheduled_delivery_time (int): Unix timestamp for when to send the message. Must be positive.
                       Can be provided as int, float, or numeric string.
        future_message_attachments (Optional[str]): JSON-formatted string representing an array of structured attachments.
        future_message_blocks (Optional[List[Dict[str, Any]]]): A list of structured block objects (dictionaries).
        future_message_text (Optional[str]): Message text.
        deliver_as_authed_user (bool): Post as the authed user. Defaults to False.
        enable_name_linking_on_delivery (bool): Find and link user groups. Defaults to False.
        future_message_markdown_text (Optional[str]): Message text formatted in markdown.
        future_message_metadata (Optional[str]): JSON-formatted string representing an object with 'event_type' (str)
                                  and 'event_payload' (dict) fields.
        delivery_parsing_options (Optional[str]): Change how messages are treated.
        broadcast_reply_on_delivery (bool): Whether reply should be made visible to everyone. Defaults to False.
        reply_to_thread_on_delivery (Optional[str]): Provide another message's ts value to make this message a reply.
        unfurl_links_on_delivery (bool): Enable unfurling of primarily text-based content. Defaults to True.
        unfurl_media_on_delivery (bool): Disable unfurling of media content. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - message_id (int): ID of the scheduled message
            - scheduled_message_id (str): String representation of the message ID

    Raises:
        ValidationError: If any input argument fails validation according to
                                  the defined Pydantic model (includes type errors,
                                  missing required fields, or specific validator failures like
                                  invalid JSON structures or non-positive scheduled_delivery_time).
        TypeError: If arguments are passed in a way that Pydantic cannot process (e.g., wrong top-level type for an arg not covered by Pydantic model itself - less common with model covering all args).
    """
    from slack.Chat import scheduleMessage
    return scheduleMessage(
        user_id=scheduling_user_id,
        channel=delivery_channel_id,
        post_at=scheduled_delivery_time,
        attachments=future_message_attachments,
        blocks=future_message_blocks,
        text=future_message_text,
        as_user=deliver_as_authed_user,
        link_names=enable_name_linking_on_delivery,
        markdown_text=future_message_markdown_text,
        metadata=future_message_metadata,
        parse=delivery_parsing_options,
        reply_broadcast=broadcast_reply_on_delivery,
        thread_ts=reply_to_thread_on_delivery,
        unfurl_links=unfurl_links_on_delivery,
        unfurl_media=unfurl_media_on_delivery
    )


def modify_posted_message(
    message_location_channel_id,
    message_to_update_timestamp,
    new_attachments_json=None,
    new_blocks_json=None,
    new_message_text=None,
    update_as_authed_user=None,
    new_file_attachments_list=None,
    should_link_names=None,
    new_markdown_text=None,
    updated_parsing_mode=None,
    should_broadcast_reply=None
):
    """
    Updates a message.

    Args:
        message_location_channel_id (str): Channel containing the message.
        message_to_update_timestamp (str): Timestamp of the message to be updated.
        new_attachments_json (Optional[str]): A JSON-based array of structured attachments, presented as a URL-encoded string.
        new_blocks_json (Optional[str]): A JSON-based array of structured blocks, presented as a URL-encoded string.
        new_message_text (Optional[str]): The updated message text.
        update_as_authed_user (Optional[bool]): Update the message as the authed user.
        new_file_attachments_list (Optional[List[str]]): Array of new file ids that will be sent with this message.
        should_link_names (Optional[bool]): Find and link channel names and usernames.
        new_markdown_text (Optional[str]): Message text formatted in markdown.
        updated_parsing_mode (Optional[str]): Change how messages are treated.
        should_broadcast_reply (Optional[bool]): Broadcast an existing thread reply.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - ts (str): Timestamp of the updated message
            - channel (str): Channel ID
            - message (dict): The updated message object containing:
                - channel (str): Channel ID
                - text (Optional[str]): Message text
                - attachments (Optional[str]): Message attachments
                - blocks (Optional[str]): Message blocks
                - as_user (Optional[bool]): Whether updated as user
                - file_ids (Optional[List[str]]): File IDs
                - link_names (Optional[bool]): Link names setting
                - markdown_text (Optional[str]): Markdown text
                - parse (Optional[str]): Parse setting
                - reply_broadcast (Optional[bool]): Reply broadcast setting

    Raises:
        TypeError: If any parameter has an incorrect type.
        ValueError: If at least one of new_attachments_json, new_blocks_json, or new_message_text is not provided.
        ChannelNotFoundError: If the message_location_channel_id is not found or empty.
        InvalidTimestampFormatError: If the timestamp is empty or invalid.
        MessageNotFoundError: If the message with the given timestamp is not found in the message_location_channel_id.
    """
    from slack.Chat import update
    return update(
        channel=message_location_channel_id,
        ts=message_to_update_timestamp,
        attachments=new_attachments_json,
        blocks=new_blocks_json,
        text=new_message_text,
        as_user=update_as_authed_user,
        file_ids=new_file_attachments_list,
        link_names=should_link_names,
        markdown_text=new_markdown_text,
        parse=updated_parsing_mode,
        reply_broadcast=should_broadcast_reply
    )
