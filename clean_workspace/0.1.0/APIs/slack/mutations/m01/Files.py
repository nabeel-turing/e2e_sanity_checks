# This file is automatically generated by the MutationBuilder

def retrieve_file_details(
    target_file_identifier,
    comments_pagination_cursor=None,
    comment_retrieval_limit=100
):
    """
    Get information about a file.

    Args:
        target_file_identifier (str): The ID of the file to get info for. Must be a non-empty string.
        comments_pagination_cursor (Optional[str]): Pagination cursor for comments. Must be a string representing a non-negative integer. Defaults to None.
        comment_retrieval_limit (int): Maximum number of comments to return. Must be a positive integer. Defaults to 100.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True (exceptions are raised on errors)
            - file (dict): File information containing:
                - id (str): File ID
                - name (str): File name
                - title (str): File title
                - filetype (str): File type/extension
                - mimetype (str): MIME type of the file
                - size (int): File size in bytes
                - channels (list): List of channel IDs where file is shared
                - comments (list): Paginated list of comments on the file
            - response_metadata (dict): Pagination metadata containing:
                - next_cursor (str): Cursor for next page of comments, or None if no more pages

    Raises:
        TypeError: If target_file_identifier is not a string, comments_pagination_cursor is not a string or None, or comment_retrieval_limit is not an integer.
        ValueError: If target_file_identifier is empty, or comment_retrieval_limit is not positive.
        FileNotFoundError: If the specified target_file_identifier does not exist.
        InvalidCursorFormatError: If comments_pagination_cursor cannot be parsed as a non-negative integer.
        CursorOutOfBoundsError: If comments_pagination_cursor exceeds the length of available comments.
    """
    from slack.Files import get_file_info
    return get_file_info(
        file_id=target_file_identifier,
        cursor=comments_pagination_cursor,
        limit=comment_retrieval_limit
    )


def distribute_existing_file(file_to_share_id, target_channel_identifiers_csv):
    """
    Shares an existing file into specified channels.

    This function allows sharing a file that already exists in the Slack workspace
    to one or more channels. The file must exist in the files database and all
    specified channels must be valid.

    Args:
        file_to_share_id (str): The ID of the file to share. Must be a non-empty string.
        target_channel_identifiers_csv (str): Comma-separated list of channel IDs to share the file with.
            Must be a non-empty string with valid channel IDs.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - file_id (str): ID of the shared file
            - shared_to_channels (list): List of channel IDs where file was shared
            - file (dict): Updated file information with channel associations

    Raises:
        TypeError: If file_to_share_id or target_channel_identifiers_csv is not a string.
        ValueError: If file_to_share_id or target_channel_identifiers_csv is empty or contains only whitespace.
        FileNotFoundError: If the specified file_to_share_id does not exist.
        InvalidChannelIdError: If any of the specified channel IDs is invalid.
    """
    from slack.Files import share_file
    return share_file(file_id=file_to_share_id, channel_ids=target_channel_identifiers_csv)


def register_external_file(
    foreign_file_identifier,
    remote_file_access_url,
    file_display_title,
    file_extension_type=None,
    searchable_text_content=None
):
    """
    Add a remote file to the Slack workspace.

    This function registers an external file in Slack's database, allowing it to be referenced
    and shared within the Slack workspace. The file itself remains hosted externally.

    Args:
        foreign_file_identifier (str): A unique identifier for the file in the external system.
            Must be a non-empty string.
        remote_file_access_url (str): The URL where the file can be accessed.
            Must be a non-empty string.
        file_display_title (str): The display title for the file in Slack.
            Must be a non-empty string.
        file_extension_type (Optional[str]): The type/extension of the file (e.g., "pdf", "docx").
            Must be a non-empty string if provided. Defaults to None.
        searchable_text_content (Optional[str]): Text content that can be indexed for search.
            Must be a non-empty string if provided. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - 'ok' (bool): Always True (exceptions are raised on errors).
            - 'file' (Dict[str, Any]): File information with keys:
                - 'id' (str): Unique Slack file ID.
                - 'external_id' (str): The provided external ID.
                - 'external_url' (str): The provided external URL.
                - 'title' (str): The provided title.
                - 'filetype' (Optional[str]): The provided filetype if any.
                - 'indexable_file_contents' (Optional[str]): The provided indexable content if any.
                - 'comments' (List[Dict[str, Any]]): Empty list of comments (initially).

    Raises:
        TypeError: If foreign_file_identifier, remote_file_access_url, or file_display_title is not a string, or if 
            file_extension_type or searchable_text_content is not a string or None.
        ValueError: If required parameters (foreign_file_identifier, remote_file_access_url, or file_display_title) are 
            empty strings, or if optional string parameters are provided as empty strings.
    """
    from slack.Files import add_remote_file
    return add_remote_file(
        external_id=foreign_file_identifier,
        external_url=remote_file_access_url,
        title=file_display_title,
        filetype=file_extension_type,
        indexable_file_contents=searchable_text_content
    )


def permanently_remove_file(file_identifier_for_deletion):
    """
    Deletes a file from the Slack workspace.

    This function permanently removes a file from the Slack workspace, including
    from all channels where it was shared.

    Args:
        file_identifier_for_deletion (str): The ID of the file to delete. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Status True if file is deleted, False otherwise.

    Raises:
        TypeError: If file_identifier_for_deletion is not a string.
        ValueError: If file_identifier_for_deletion is empty or contains only whitespace.
        FileNotFoundError: If the specified file_identifier_for_deletion does not exist.
    """
    from slack.Files import delete_file
    return delete_file(file_id=file_identifier_for_deletion)


def transfer_file_to_workspace(
    destination_channel_ids=None,
    file_data_as_string=None,
    local_file_system_path=None,
    uploaded_file_name=None,
    explicit_file_type=None,
    accompanying_message_text=None,
    reply_to_thread_timestamp=None,
    file_metadata_title=None
):
    """
    Upload a file to Slack.

    It supports uploading files either by providing content directly or by specifying a file path.
    The function automatically detects file types, MIME types, and handles both text and binary files.
    Files are subject to a 50MB size limit.

    Args:
        destination_channel_ids (Optional[str]): Comma-separated list of channel IDs where the file will be shared.
            Must be valid channel IDs if provided.
        file_data_as_string (Optional[str]): File contents as a string. If both content and file_path are provided,
            content takes precedence. Subject to 50MB size limit.
        local_file_system_path (Optional[str]): Path to a local file to upload. The file will be read and its
            content will be processed based on the file type (text or binary). Subject to 50MB size limit.
        uploaded_file_name (Optional[str]): Name of the file. If not provided and file_path is given,
            the filename will be extracted from the file path.
        explicit_file_type (Optional[str]): File type identifier (e.g., 'pdf', 'txt', 'jpg').
            If not provided, it will be auto-detected from the filename or file path.
        accompanying_message_text (Optional[str]): Initial comment to add with the file.
        reply_to_thread_timestamp (Optional[str]): Timestamp of parent message to reply to in a thread.
        file_metadata_title (Optional[str]): Title of the file. If not provided, defaults to filename.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - file (dict): Uploaded file information containing:
                - id (str): Unique file ID
                - name (str): File name
                - title (str): File title
                - filetype (str): File type
                - mimetype (str): MIME type of the file
                - size (int): File size in bytes
                - content (str): File content (base64 encoded for binary files)
                - channels (list): List of channel IDs where file is shared
                - initial_comment (str): Initial comment if provided
                - thread_ts (str): Thread timestamp if provided
                - created (int): Unix timestamp of file creation
                - user (str): User ID who uploaded the file (from current_user)

    Raises:
        TypeError: If parameter types are incorrect
        MissingContentOrFilePathError: If neither file_data_as_string nor local_file_system_path is provided
        InvalidChannelIdError: If any provided channel ID is invalid
        FileSizeLimitExceededError: If file size exceeds 50MB limit
        FileReadError: If file cannot be read from the specified path
        FileNotFoundError: If specified file path does not exist
    """
    from slack.Files import upload_file
    return upload_file(
        channels=destination_channel_ids,
        content=file_data_as_string,
        file_path=local_file_system_path,
        filename=uploaded_file_name,
        filetype=explicit_file_type,
        initial_comment=accompanying_message_text,
        thread_ts=reply_to_thread_timestamp,
        title=file_metadata_title
    )


def complete_remote_file_upload(
    file_update_objects,
    sharing_channel_id=None,
    introductory_comment_text=None,
    thread_parent_message_ts=None
):
    """
    Finishes an external file upload started with `get_external_upload_url()`.

    Args:
        file_update_objects (List[Dict[str, Any]]): List of file object dictionaries. Each dictionary must contain:
            - id (str): Required. The ID of the file to update.
            - title (Optional[str]): Optional. The new title for the file.
        sharing_channel_id (Optional[str]): Channel ID where the file will be shared.
        introductory_comment_text (Optional[str]): Initial comment for the file.
        thread_parent_message_ts (Optional[str]): Parent message timestamp for threading.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful

    Raises:
        TypeError: If file_update_objects is not a list, or if sharing_channel_id, introductory_comment_text, or thread_parent_message_ts is not a string or None.
        ValueError: If file_update_objects list is empty, or if file objects are malformed (missing 'id' field or not dictionaries).
        ChannelNotFoundError: If the specified sharing_channel_id does not exist.
        FileNotFoundError: If any file_id in the file_update_objects list does not exist.
    """
    from slack.Files import finish_external_upload
    return finish_external_upload(
        files=file_update_objects,
        channel_id=sharing_channel_id,
        initial_comment=introductory_comment_text,
        thread_ts=thread_parent_message_ts
    )


def enumerate_workspace_files(
    filter_by_channel_identifier=None,
    filter_by_uploader_id=None,
    created_after_timestamp=None,
    created_before_timestamp=None,
    file_type_filter_csv=None,
    results_page_cursor=None,
    page_item_limit=100
):
    """
    Lists files, optionally filtered by channel, user, and time.

    This function retrieves files from the Slack workspace with optional filtering capabilities.
    Files can be filtered by channel, user, timestamp range, and file types. Results are paginated
    for efficient data retrieval.

    Args:
        filter_by_channel_identifier (Optional[str]): Filter files shared in a specific channel. Must be a valid channel ID if provided.
        filter_by_uploader_id (Optional[str]): Filter files uploaded by a specific user. Must be a valid user ID if provided.
        created_after_timestamp (Optional[str]): Filter files created after this timestamp (inclusive). Must be a Unix timestamp string if provided.
        created_before_timestamp (Optional[str]): Filter files created before this timestamp (inclusive). Must be a Unix timestamp string if provided.
        file_type_filter_csv (Optional[str]): Comma-separated list of file types to filter by (e.g., "pdf,docx,jpg").
        results_page_cursor (Optional[str]): Pagination cursor for retrieving additional results. Must be a string representing a non-negative integer.
        page_item_limit (int): Maximum number of files to return per page. Must be a positive integer. Defaults to 100.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - files (list): List of file objects matching the filter criteria
            - response_metadata (dict): Pagination metadata containing:
                - next_cursor (str): Cursor for next page of results, or None if no more pages

    Raises:
        TypeError: If any argument is of an incorrect type.
        ValueError: If page_item_limit is not a positive integer, or if timestamp strings cannot be parsed.
        ChannelNotFoundError: If the specified filter_by_channel_identifier does not exist.
        UserNotFoundError: If the specified filter_by_uploader_id does not exist.
        InvalidCursorFormatError: If results_page_cursor is provided but cannot be parsed as a non-negative integer.
        CursorOutOfBoundsError: If results_page_cursor exceeds the length of available data.
    """
    from slack.Files import list_files
    return list_files(
        channel_id=filter_by_channel_identifier,
        user_id=filter_by_uploader_id,
        ts_from=created_after_timestamp,
        ts_to=created_before_timestamp,
        types=file_type_filter_csv,
        cursor=results_page_cursor,
        limit=page_item_limit
    )


def deregister_external_file(slack_file_id_to_remove=None, external_system_file_id=None):
    """
    Remove a remote file and clean up all of its references.

    Exactly **one** identifier must be supplied – either a Slack-generated
    ``file_id`` *or* the external ``external_id`` that was provided when the
    file was first registered.  When the target is found the file record is
    deleted from the workspace's internal storage and its identifier is
    removed from every channel that had access to the file.

    Args:
        slack_file_id_to_remove (Optional[str]):
            The unique Slack-generated ID of the file to remove.
        external_system_file_id (Optional[str]):
            The creator-defined GUID that was supplied when the remote file
            was added via :pyfunc:`add_remote_file` or the external upload
            flow.

    Returns:
        Dict[str, Any]: A dictionary confirming the success of the operation,
            in the format ``{"ok": True}``.

    Raises:
        TypeError: If *slack_file_id_to_remove* or *external_system_file_id* is provided but is **not** a
            ``str``.
        ValueError: If **neither** identifier is supplied, **both** are
            supplied, or any supplied identifier is an empty/whitespace-only
            string.
        FileNotFoundError: If no file matches the supplied identifier.
    """
    from slack.Files import remove_remote_file
    return remove_remote_file(file_id=slack_file_id_to_remove, external_id=external_system_file_id)


def request_external_upload_link(
    file_name_for_upload,
    file_size_in_bytes,
    accessibility_description_text=None,
    snippet_display_type=None
):
    """
    Generates a URL for uploading an external file to Slack.

    This function initiates the file upload process by providing a secure,
    temporary URL to which the file data can be sent. It takes basic file
    information, such as its name and size, and returns a unique file ID
    and the corresponding upload URL. It also starts a 1-minute timer to
    automatically delete the file record if the upload is not completed.

    Args:
        file_name_for_upload (str): The name of the file to be uploaded.
        file_size_in_bytes (int): The size of the file in bytes.
        accessibility_description_text (Optional[str]): A description of the file used for
            accessibility purposes (e.g., by screen readers).
        snippet_display_type (Optional[str]): The specific type of snippet, which
            can be used to influence how the file is displayed.

    Returns:
        Dict[str, Any]: A dictionary containing the details for the upload,
            which includes the following keys:
            - ok (bool): Always `True` to indicate success.
            - upload_url (str): A temporary, unique URL where the file
              should be uploaded.
            - file_id (str): A unique, Slack-generated ID that will be
              associated with the uploaded file.

    Raises:
        TypeError: If `file_name_for_upload`, `accessibility_description_text`, or `snippet_display_type` are provided
            but are not strings, or if `file_size_in_bytes` is not an integer.
        ValueError: If `file_name_for_upload` is an empty string, if `file_size_in_bytes` is less
            than or equal to zero, or if `accessibility_description_text` exceeds 1000 characters.
        FileSizeLimitExceededError: If `file_size_in_bytes` exceeds 50 MB (52_428_800 bytes).
    """
    from slack.Files import get_external_upload_url
    return get_external_upload_url(
        filename=file_name_for_upload,
        length=file_size_in_bytes,
        alt_txt=accessibility_description_text,
        snippet_type=snippet_display_type
    )
