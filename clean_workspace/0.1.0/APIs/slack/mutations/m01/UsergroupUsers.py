# This file is automatically generated by the MutationBuilder

def replace_user_group_membership(
    target_user_group_id,
    full_user_id_list_csv,
    return_updated_member_count=False,
    membership_update_timestamp=None
):
    """
    Update the list of users for a User Group.

    Args:
        target_user_group_id (str): The encoded ID of the User Group to update.
        full_user_id_list_csv (str): A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
        return_updated_member_count (bool): Include the number of users in the User Group. Defaults to False.
        membership_update_timestamp (Optional[str]): Timestamp when the User Group was last updated. If None or empty, 
            the current timestamp will be used.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - usergroup (Dict[str, Any]): The updated User Group object containing:
                - users (List[str]): List of user IDs in the group
                - user_count (int): Number of users in the group (only included if include_count is True)
                - updated_by (str): ID of user who last updated the group
                - date_update (str): Timestamp of last update

    Raises:
        UserGroupIdInvalidError: If the target_user_group_id ID is empty or invalid
        InvalidUsersError: If the full_user_id_list_csv string is empty or invalid
        UserGroupNotFoundError: If the specified target_user_group_id does not exist
        UserNotFoundError: If any of the provided user IDs do not exist in the database
    """
    from slack.UsergroupUsers import update
    return update(
        usergroup=target_user_group_id,
        users=full_user_id_list_csv,
        include_count=return_updated_member_count,
        date_update=membership_update_timestamp
    )


def get_users_in_group(user_group_identifier, include_inactive_users=False):
    """
    Lists all users in a User Group.

    Args:
        user_group_identifier (str): The ID of the User Group.
        include_inactive_users (bool): Include disabled users. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the operation was successful
            - users (List[Dict[str, Any]]): List of user objects, where each user contains:
                - id (str): User ID
                - name (str): User name
                - real_name (str): User's real name
                - team_id (str): Team ID
                - is_admin (bool): Whether user is an admin
                - is_owner (bool): Whether user is an owner
                - is_primary_owner (bool): Whether user is primary owner
                - is_restricted (bool): Whether user is restricted
                - is_ultra_restricted (bool): Whether user is ultra restricted
                - is_bot (bool): Whether user is a bot
                - is_app_user (bool): Whether user is an app user
                - updated (int): Last update timestamp

    Raises:
        UserGroupIdInvalidError: If user_group_identifier is empty or not a string
        UserGroupNotFoundError: If the specified user_group_identifier does not exist
        InconsistentDataError: If a user in the usergroup is not found in the users database
        IncludeDisabledInvalidError: If include_inactive_users is not a boolean
    """
    from slack.UsergroupUsers import list
    return list(usergroup_id=user_group_identifier, include_disabled=include_inactive_users)
