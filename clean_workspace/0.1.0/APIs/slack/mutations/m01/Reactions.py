# This file is automatically generated by the MutationBuilder

def retrieve_message_reactions(conversation_identifier, target_message_timestamp, include_user_details=False):
    """
    Gets reactions for a specific message in a channel.

    This function is used to get reactions for a specific message in a channel.
    It can return either a summary of the reactions or all the reaction details.
    If full is True, it returns all the reaction details.
    If full is False, it returns a summary of the reactions.

    Args:
        conversation_identifier (str): ID of the channel. Cannot be empty.
        target_message_timestamp (str): The timestamp of the message to get reactions for.
            This should be a string representation of a Unix timestamp with
            up to 6 decimal places for microsecond precision. Cannot be empty.
        include_user_details (bool): If true, return all reaction details. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing the status of the operation and
            the requested reaction data.
            - ok (bool): Indicates if the request was successful.
            - reactions (Union[List[Dict[str, Any]], Dict[str, int]]):
                If `full` is True, a list of reaction objects with the
                following keys:
                    - name (str): The name of the reaction emoji.
                    - users (List[str]): A list of user IDs who have
                      used this reaction on this specific message.
                    - count (int): The total number of users who have
                      used this reaction on this message.
                If `full` is False, a dictionary mapping each reaction
                name (str) to the total count of all users who have
                used it on this message (int).

    Raises:
        TypeError: If `conversation_identifier` or `target_message_timestamp` is not a string, or if `include_user_details` is not a boolean.
        ValueError: If `conversation_identifier` or `target_message_timestamp` is an empty string.
        ChannelNotFoundError: If the specified `conversation_identifier` does not exist in the database.
        MessageNotFoundError: If the specified `target_message_timestamp` does not correspond to a message
            within the given `conversation_identifier`.
    """
    from slack.Reactions import get
    return get(
        channel_id=conversation_identifier,
        message_ts=target_message_timestamp,
        full=include_user_details
    )


def apply_emoji_to_message(
    reacting_user_identifier,
    target_channel_id,
    emoji_name_to_add,
    message_identifier_timestamp
):
    """
    Adds a reaction to a message.

    Args:
        reacting_user_identifier (str): User ID. Must be a non-empty string.
        target_channel_id (str): ID of the channel. Must be a non-empty string.
        emoji_name_to_add (str): Reaction (emoji) name. Must be a non-empty string.
        message_identifier_timestamp (str): Timestamp of the message. This should be a string
            representation of a Unix timestamp with up to 6 decimal places
            for microsecond precision. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Whether the request was successful.
            - message ([Dict[str, Any]): The updated message object if successful
              with the following keys:
                - ts (str): The timestamp of the message.
                - user (str): The ID of the user who posted the message.
                - text (str): The text content of the message.
                - reactions (List[Dict[str, Any]]): A list of reaction objects.
                    - name (str): The name of the reaction emoji.
                    - users (List[str]): A list of user IDs who have used this reaction.
                    - count (int): The total number of users who have used this reaction.

    Raises:
        TypeError: If reacting_user_identifier, target_channel_id, emoji_name_to_add, or message_identifier_timestamp is not a string.
        ValueError: If reacting_user_identifier, target_channel_id, emoji_name_to_add, or message_identifier_timestamp is an empty string.
        ChannelNotFoundError: If the specified channel does not exist.
        MessageNotFoundError: If the specified message does not exist in the channel.
        AlreadyReactionError: If the user has already reacted with this emoji.
    """
    from slack.Reactions import add
    return add(
        user_id=reacting_user_identifier,
        channel_id=target_channel_id,
        name=emoji_name_to_add,
        message_ts=message_identifier_timestamp
    )


def query_user_emoji_responses(
    filter_by_user_id=None,
    fetch_full_reaction_data=False,
    pagination_token=None,
    max_items_per_page=100
):
    """
    Lists reactions made by a user (or all users if user_id is None).

    Args:
        filter_by_user_id (Optional[str]): Show reactions made by this user. Defaults to None (all users).
            If provided, must be a non-empty string.
        fetch_full_reaction_data (bool): If true, return all reaction details. Defaults to False.
        pagination_token (Optional[str]): Parameter for pagination. Defaults to None.
            If provided, must be a string that can be parsed as a non-negative integer.
        max_items_per_page (int): The maximum number of items to return. Defaults to 100.
            Must be a positive integer.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True for successful retrieval
            - reactions (List[Dict[str, Any]]): List of reaction objects, each containing:
                - channel (str): Channel ID
                - message_ts (str): Message timestamp
                - name (str): Reaction name
                - count (int): Number of users who reacted
                - users (Optional[List[str]]): List of user IDs who reacted (only if full=True)
            - response_metadata (Dict[str, Any]): Pagination information
                - next_cursor (Optional[str]): Cursor for next page of results

    Raises:
        TypeError: If filter_by_user_id is not a string or None, if fetch_full_reaction_data is not a boolean, 
                  if pagination_token is not a string or None, or if max_items_per_page is not an integer.
        ValueError: If filter_by_user_id is an empty string, if max_items_per_page is not positive,
                   or if pagination_token is an empty string.
        InvalidCursorValueError: If pagination_token cannot be parsed as a non-negative integer.
    """
    from slack.Reactions import list
    return list(
        user_id=filter_by_user_id,
        full=fetch_full_reaction_data,
        cursor=pagination_token,
        limit=max_items_per_page
    )


def retract_emoji_from_message(
    unreacting_user_id,
    emoji_to_remove,
    conversation_context_id,
    subject_message_timestamp
):
    """
    Removes a reaction from a message.

    Args:
        unreacting_user_id (str): User ID. Must be a non-empty string.
        emoji_to_remove (str): Reaction (emoji) name. Must be a non-empty string.
        conversation_context_id (str): ID of the channel. Must be a non-empty string.
        subject_message_timestamp (str): Timestamp of the message. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - ok (bool): Always True for successful removal

    Raises:
        TypeError: If unreacting_user_id, emoji_to_remove, conversation_context_id, or subject_message_timestamp is not a string.
        MissingRequiredArgumentsError: If any of the required arguments is an empty string.
        ChannelNotFoundError: If the specified channel does not exist.
        MessageNotFoundError: If the specified message does not exist in the channel.
        NoReactionsOnMessageError: If the message has no reactions.
        ReactionNotFoundError: If the specified reaction is not found on the message.
        UserHasNotReactedError: If the user has not reacted with this emoji.
    """
    from slack.Reactions import remove
    return remove(
        user_id=unreacting_user_id,
        name=emoji_to_remove,
        channel_id=conversation_context_id,
        message_ts=subject_message_timestamp
    )
