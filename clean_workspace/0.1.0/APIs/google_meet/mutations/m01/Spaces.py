# This file is automatically generated by the MutationBuilder

def modify_conference_room(space_identifier, field_modifications=None):
    """
    Updates details about a meeting space.

    This function modifies the specified fields of an existing meeting space. Only fields
    that are included in the update_mask will be changed.

    Args:
        space_identifier (str): The name of the space to update.
        field_modifications (Optional[Dict[str, Any]]): A dictionary containing the fields to update
            and their new values. If provided, known fields like 'id', 'meetingCode',
            'meetingUri', 'accessType', 'entryPointAccess' must adhere to their
            expected types (typically string). Additional arbitrary fields and their
            values are also permitted, aligning with the Pydantic model SpaceUpdateMaskModel.

    Returns:
        Dict[str, Any]: A dictionary.
        - If the space is not found, returns a dictionary with the key "error" and
          the value "Space not found".
        - On successful update, returns a dictionary with the following keys and value types:
            - "id" (str): The space identifier
            - "meetingCode" (str): The code used to join the meeting
            - "meetingUri" (str): The URI that can be used to join the meeting
            - "accessType" (str): The access level for the space (e.g., "TRUSTED", "RESTRICTED", "OPEN")
            - "entryPointAccess" (str): Who can access the entry points (e.g., "ALL", "CREATOR_APP_ONLY")
            - Additional fields that were updated according to the update_mask

    Raises:
        TypeError: If 'space_identifier' is not a string.
        pydantic.ValidationError: If 'field_modifications' is provided and does not conform to the
                                  SpaceUpdateMaskModel structure (e.g., a known field like
                                  'meetingCode' has an incorrect data type).
    """
    from google_meet.Spaces import patch
    return patch(name=space_identifier, update_mask=field_modifications)


def fetch_conference_room_info(room_name_to_query):
    """
    Gets details about a meeting space.

    Retrieves comprehensive information about a specific meeting space.

    Args:
        room_name_to_query (str): The name of the space to retrieve.

    Returns:
        Dict[str, Any]: A dictionary.
        - If the space is not found, returns a dictionary with the key "error" and
          the value "Space not found".
        - On successful retrieval, returns a dictionary with the following keys and value types:
            - "id" (str): The space identifier
            - "meetingCode" (str): The code used to join the meeting
            - "meetingUri" (str): The URI that can be used to join the meeting
            - "accessType" (str): The access level for the space (e.g., "TRUSTED", "RESTRICTED", "OPEN")
            - "entryPointAccess" (str): Who can access the entry points (e.g., "ALL", "CREATOR_APP_ONLY")
            - "activeConference" (Optional[Dict[str, Any]]): Information about an active conference
              in this space, if one exists

    Raises:
        TypeError: If 'room_name_to_query' is not a string.
    """
    from google_meet.Spaces import get
    return get(name=room_name_to_query)


def establish_new_virtual_room(new_room_label, room_initial_properties):
    """
    Creates a new meeting space.

    This function adds a new meeting space to the database with the specified
    name and content details.

    Args:
        new_room_label (str): The name of the new space. Must be a non-empty string.
        room_initial_properties (Dict[str, Any]): A dictionary containing the details of the new space.
            - "meetingCode" (str): A unique code for joining the meeting
            - "meetingUri" (str): A URI that can be used to join the meeting
            - "accessType" (str): The access level for the space

    Returns:
        Dict[str, Any]: A dictionary containing the operation result.
            - "message" (str): Success message in the format "Space {space_name} created successfully"

    Raises:
        TypeError: If `new_room_label` is not a string, or if `room_initial_properties` is not a dictionary.
        InvalidSpaceNameError: If `new_room_label` is an empty string.
        ValidationError: If `room_initial_properties` does not conform to the expected structure
                                  (defined by SpaceContentModel).
    """
    from google_meet.Spaces import create
    return create(space_name=new_room_label, space_content=room_initial_properties)


def terminate_current_conference(target_space_name):
    """
    Ends an active conference in a meeting space, if one exists.

    This function removes the activeConference field from the specified space,
    effectively marking any active conference as ended.

    Args:
        target_space_name (str): The name of the space.

    Returns:
        Dict[str, Any]: A dictionary.
        - If the space is not found, returns a dictionary with the key "error" and
          the value "Space not found".
        - If there was an active conference that was successfully ended, returns a
          dictionary with the key "message" and the value "Active conference ended".
        - If there was no active conference to end, returns a dictionary with the key
          "message" and the value "No active conference to end".

    Raises:
        TypeError: If 'target_space_name' is not a string.
    """
    from google_meet.Spaces import endActiveConference
    return endActiveConference(name=target_space_name)
