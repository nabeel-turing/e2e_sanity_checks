[
  {
    "name": "add_comment",
    "description": "Inserts a new comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which comment resource properties the API response will include."
        },
        "snippet": {
          "type": "object",
          "description": "An object containing comment details."
        },
        "moderation_status": {
          "type": "string",
          "description": "A string specifying the initial moderation status for the comment; defaults to 'published'."
        },
        "banned_author": {
          "type": "boolean",
          "description": "Specifies if the comment author is banned; defaults to `False`."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "create_channel",
    "description": "Creates a channel resource in the simulated database.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the channel resource properties to include in the API response."
        },
        "category_id": {
          "type": "string",
          "description": "A YouTube guide category ID for the new channel."
        },
        "for_username": {
          "type": "string",
          "description": "A YouTube username for the new channel."
        },
        "hl": {
          "type": "string",
          "description": "Retrieves localized resource metadata for a specific application language supported by the YouTube website."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies the YouTube channel ID for the new channel; currently unused."
        },
        "managed_by_me": {
          "type": "boolean",
          "description": "Whether the channel is managed by the authenticated user."
        },
        "max_results": {
          "type": "integer",
          "description": "Maximum number of items to return in the result set."
        },
        "mine": {
          "type": "boolean",
          "description": "Indicates whether the channel is owned by the authenticated user."
        },
        "my_subscribers": {
          "type": "boolean",
          "description": "Indicates whether the authenticated user has subscribed to the channel."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified by this parameter's value."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "create_comment_thread",
    "description": "Inserts a new comment thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which `commentThread` resource properties the API response includes, limited to \"snippet\"."
        },
        "snippet": {
          "type": "object",
          "description": "A dictionary containing arbitrary metadata for the comment thread."
        },
        "top_level_comment": {
          "type": "object",
          "description": "The top-level comment for the thread, provided as an optional dictionary that may contain an `id` (str) key."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "create_membership",
    "description": "Create a new membership.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the membership resource properties included in the API response; currently, only `snippet` is supported."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "Snippet object with membership details."
        }
      },
      "required": [
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "create_subscription",
    "description": "Inserts a new subscription.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which subscription resource properties the API response will include."
        },
        "snippet": {
          "type": "object",
          "description": "A dictionary containing subscription details, including `channelId` (the subscribing channel's ID) and `resourceId` (a dictionary representing the subscribed channel's ID)."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "delete_caption",
    "description": "Deletes a caption.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the caption track to delete."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Identifies a YouTube CMS user acting on behalf of the content owner specified in the `onBehalfOfContentOwner` parameter."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified in its value."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_channel_section",
    "description": "Deletes a channel section.",
    "parameters": {
      "type": "object",
      "properties": {
        "section_id": {
          "type": "string",
          "description": "Unique identifier for the channel section to delete."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The content owner ID for CMS user operations."
        }
      },
      "required": [
        "section_id"
      ]
    }
  },
  {
    "name": "delete_comment",
    "description": "Delete a comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The ID of the comment to delete."
        }
      },
      "required": [
        "comment_id"
      ]
    }
  },
  {
    "name": "delete_comment_thread",
    "description": "Delete a comment thread by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "string",
          "description": "The ID of the comment thread to delete."
        }
      },
      "required": [
        "thread_id"
      ]
    }
  },
  {
    "name": "delete_membership",
    "description": "Deletes a membership.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Membership ID to delete."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_subscription",
    "description": "Deletes a subscription.",
    "parameters": {
      "type": "object",
      "properties": {
        "subscription_id": {
          "type": "string",
          "description": "The ID of the subscription to delete."
        }
      },
      "required": [
        "subscription_id"
      ]
    }
  },
  {
    "name": "delete_video",
    "description": "Deletes a video.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the video to delete."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The content owner's ID on whose behalf the deletion is made."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "download_caption",
    "description": "Downloads a caption track.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the caption to be downloaded."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "CMS user making the request on behalf of the content owner."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Content owner the user is acting on behalf of; currently not used in implementation."
        },
        "tfmt": {
          "type": "string",
          "description": "The desired format for the caption file, either 'srt', 'vtt', or 'sbv'."
        },
        "tlang": {
          "type": "string",
          "description": "Target language for simulated translation."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "insert_caption",
    "description": "Inserts a new caption.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the caption resource properties to include in the API response; must be 'snippet'."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "A dictionary containing details about the caption track."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Identifies the YouTube CMS user in the request's authorization credentials who is acting on behalf of the content owner specified in the `onBehalfOfContentOwner` parameter."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified in this parameter's value."
        },
        "sync": {
          "type": "boolean",
          "description": "Indicates whether the caption track should be synchronized with the video."
        }
      },
      "required": [
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "insert_channel_banner",
    "description": "Inserts a new channel banner.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "The ID of the channel for which to insert a banner."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Identifies a YouTube CMS user acting on behalf of the content owner specified by this parameter's value."
        },
        "on_behalf_of_content_owner_channel": {
          "type": "string",
          "description": "YouTube channel ID of the channel to which the user is being added."
        }
      }
    }
  },
  {
    "name": "insert_channel_section",
    "description": "Inserts a new channel section.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which `channelSection` resource properties, such as `snippet` or `contentDetails`, the API response will include."
        },
        "snippet": {
          "type": "string",
          "description": "An object containing details about the channel section."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Identifies a YouTube CMS user acting on behalf of the content owner specified by this parameter's value; currently unused."
        },
        "on_behalf_of_content_owner_channel": {
          "type": "string",
          "description": "Specifies the YouTube channel ID of the channel to which the user is being added; currently not used."
        }
      },
      "required": [
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "list_activities",
    "description": "Retrieve a list of YouTube activities (uploads, likes, comments, etc.) using optional filters for channel ID, publication date range, or region code.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the activity resource properties to include in the API response."
        },
        "channelId": {
          "type": "string",
          "description": "Specifies a YouTube channel ID to return only that channel's activities."
        },
        "mine": {
          "type": "boolean",
          "description": "Set to `true` to retrieve the authenticated user's activity feed."
        },
        "maxResults": {
          "type": "integer",
          "description": "The maximum number of items to return in the result set."
        },
        "pageToken": {
          "type": "string",
          "description": "Identifies a specific page in the result set to be returned."
        },
        "publishedAfter": {
          "type": "string",
          "description": "Specifies the earliest date and time an activity could have occurred."
        },
        "publishedBefore": {
          "type": "string",
          "description": "Specifies the latest date and time an activity could have occurred."
        },
        "regionCode": {
          "type": "string",
          "description": "Specifies the region to select an available video chart."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_captions",
    "description": "Retrieve a list of captions for a specified video.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which parts of the caption resource to include: 'id' or 'snippet'."
        },
        "videoId": {
          "type": "string",
          "description": "ID of the video to retrieve captions for."
        },
        "id": {
          "type": "string",
          "description": "Specific caption ID to filter results."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "A CMS user making the request on behalf of the content owner."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "The content owner the user is acting on behalf of (currently unused)."
        }
      },
      "required": [
        "part",
        "videoId"
      ]
    }
  },
  {
    "name": "list_channel_sections",
    "description": "Retrieve a list of channel sections with optional filters.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the channelSection resource properties to include in the API response, formatted as a comma-separated string of valid parts (e.g., 'id,snippet,contentDetails'), where at least one part must be valid."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID to return only that channel's sections."
        },
        "hl": {
          "type": "string",
          "description": "Retrieves localized resource metadata for a specific YouTube-supported application language."
        },
        "section_id": {
          "type": "string",
          "description": "A string specifying YouTube channel section ID(s); while comma-separated values are accepted, the logic currently filters by the entire string as a single ID."
        },
        "mine": {
          "type": "boolean",
          "description": "A boolean flag to return only channel sections owned by the authenticated user."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified in the parameter value."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_channels",
    "description": "Retrieve a list of channels with optional filters.",
    "parameters": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "description": "A YouTube guide category ID that filters the API response to include only channels from that category."
        },
        "for_username": {
          "type": "string",
          "description": "A YouTube username to filter results, including only the associated channel in the API response."
        },
        "hl": {
          "type": "string",
          "description": "Specifies the application language for retrieving localized resource metadata supported by the YouTube website."
        },
        "channel_id": {
          "type": "string",
          "description": "A comma-separated list of YouTube channel IDs for the resources being retrieved."
        },
        "managed_by_me": {
          "type": "boolean",
          "description": "A boolean parameter to filter channels, returning only those the user can manage."
        },
        "max_results": {
          "type": "integer",
          "description": "The maximum number of items to return in the result set, constrained to a range of 1 to 50."
        },
        "mine": {
          "type": "boolean",
          "description": "A boolean parameter that, when `True`, instructs the API to return only channels owned by the authenticated user."
        },
        "my_subscribers": {
          "type": "boolean",
          "description": "Filters the results to only return channels to which the authenticated user has subscribed."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Indicates the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified by this parameter's value."
        }
      }
    }
  },
  {
    "name": "list_comment_threads",
    "description": "Retrieve a list of comment threads with optional filters.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which `commentThread` resource properties to include in the API response; cannot be empty."
        },
        "thread_id": {
          "type": "string",
          "description": "Identifies the comment thread to retrieve."
        },
        "channel_id": {
          "type": "string",
          "description": "A YouTube channel ID to return only that channel's comment threads."
        },
        "video_id": {
          "type": "string",
          "description": "Specifies the video ID for which to return comment threads."
        },
        "all_threads_related_to_channel_id": {
          "type": "string",
          "description": "A YouTube channel ID for which to return all related comment threads."
        },
        "search_terms": {
          "type": "string",
          "description": "Search terms for filtering comment threads."
        },
        "moderation_status": {
          "type": "string",
          "description": "Specifies the moderation status of comments to include in the response."
        },
        "order": {
          "type": "string",
          "description": "Specifies the listing order of comment threads in the API response."
        },
        "max_results": {
          "type": "integer",
          "description": "Maximum number of items to return in the result set; must be a positive integer if provided."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set to return."
        },
        "text_format": {
          "type": "string",
          "description": "Specifies the format of the text in the comments."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_comments",
    "description": "Retrieves comments with optional filters.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which comment resource properties the API response includes."
        },
        "comment_id": {
          "type": "string",
          "description": "The ID of the comment to retrieve."
        },
        "parent_id": {
          "type": "string",
          "description": "Identifies the comment to retrieve its replies."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set for retrieval; currently unused."
        },
        "text_format": {
          "type": "string",
          "description": "Specifies the format of the comment text; currently not used."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_memberships",
    "description": "List channel members matching specified criteria.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which membership resource properties to include in the API response; must be 'snippet'."
        },
        "has_access_to_level": {
          "type": "string",
          "description": "Specifies the membership level the member has access to."
        },
        "filter_by_member_channel_id": {
          "type": "string",
          "description": "A comma-separated list of YouTube channel IDs; the API returns only memberships from these channels."
        },
        "max_results": {
          "type": "integer",
          "description": "Maximum number of items to return in the result set."
        },
        "mode": {
          "type": "string",
          "description": "The membership mode to filter results by, such as \"fanFunding\" or \"sponsors\"."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set to return, though currently not used in implementation."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_searches",
    "description": "Returns a collection of search results that match the query parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "A comma-separated list of one or more search resource properties, such as `snippet` or `id`."
        },
        "q": {
          "type": "string",
          "description": "The query term to search for."
        },
        "channel_id": {
          "type": "string",
          "description": "Filters results to resources created by the specified channel."
        },
        "channel_type": {
          "type": "string",
          "description": "Filters results by a specified channel type."
        },
        "max_results": {
          "type": "integer",
          "description": "The maximum number of items in the result set."
        },
        "order": {
          "type": "string",
          "description": "The sort order for returned resources."
        },
        "type": {
          "type": "string",
          "description": "A comma-separated list of resource types to include in the search response."
        },
        "video_caption": {
          "type": "string",
          "description": "Filters videos by presence, absence, or type of captions."
        },
        "video_category_id": {
          "type": "string",
          "description": "Filter videos by category ID."
        },
        "video_definition": {
          "type": "string",
          "description": "Filters videos by their definition (`high` or `standard`)."
        },
        "video_duration": {
          "type": "string",
          "description": "Filter videos by duration."
        },
        "video_embeddable": {
          "type": "string",
          "description": "Filters videos that can be embedded."
        },
        "video_license": {
          "type": "string",
          "description": "Filter videos by license type."
        },
        "video_syndicated": {
          "type": "string",
          "description": "Filters videos by syndication status, accepting 'true' or 'false'."
        },
        "video_type": {
          "type": "string",
          "description": "Filter videos by type."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_subscriptions",
    "description": "Retrieves a list of subscriptions with optional filters.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "A string specifying the subscription resource properties for the API response."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID to return only that channel's subscriptions."
        },
        "subscription_id": {
          "type": "string",
          "description": "Identifies the subscription to retrieve."
        },
        "mine": {
          "type": "boolean",
          "description": "If true, only return subscriptions owned by the authenticated user."
        },
        "my_recent_subscribers": {
          "type": "boolean",
          "description": "Returns subscriptions to the authenticated user's channel made within the last 30 days."
        },
        "my_subscribers": {
          "type": "boolean",
          "description": "Instructs the API to return only subscriptions to the authenticated user's channel."
        },
        "for_channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID to return only subscriptions to that channel."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Identifies the content owner for whom the authenticated YouTube CMS user is acting."
        },
        "on_behalf_of_content_owner_channel": {
          "type": "string",
          "description": "Specifies the YouTube channel ID of the channel to which the user is being added."
        },
        "order": {
          "type": "string",
          "description": "Determines the listing order of subscriptions in the API response."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page within the result set."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_video_categories",
    "description": "List video categories with optional filters.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `videoCategory` resource properties to include in the API response; must be `snippet`."
        },
        "hl": {
          "type": "string",
          "description": "Specifies a YouTube-supported application language for retrieving localized resource metadata, though currently unused."
        },
        "id": {
          "type": "string",
          "description": "Identifies the video category to retrieve."
        },
        "region_code": {
          "type": "string",
          "description": "A region code to select video categories available in the specified region."
        },
        "max_results": {
          "type": "integer",
          "description": "Maximum number of items to return in the result set."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_videos",
    "description": "Retrieves a list of videos by providing a required `part` parameter and exactly one filter from `chart`, comma-separated `id`s, or `my_rating`.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the video resource properties to include in the API response."
        },
        "chart": {
          "type": "string",
          "description": "Retrieves a list of 'mostPopular' videos."
        },
        "id": {
          "type": "string",
          "description": "A comma-separated list of YouTube video IDs to retrieve."
        },
        "my_rating": {
          "type": "string",
          "description": "Retrieves videos that match criteria specified by this parameter's value."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set to return."
        },
        "user_id": {
          "type": "string",
          "description": "Required when the `my_rating` parameter is used."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "manage_channel_comment_count",
    "description": "Retrieves or sets the number of comments for the channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_count": {
          "type": "integer",
          "description": "An optional integer; if provided, sets the comment count, otherwise retrieves it."
        }
      }
    }
  },
  {
    "name": "manage_channel_subscriber_count",
    "description": "Retrieve or set the channel's subscriber count.",
    "parameters": {
      "type": "object",
      "properties": {
        "subscriber_count": {
          "type": "integer",
          "description": "Sets the subscriber count if provided; otherwise, retrieves the current count."
        }
      }
    }
  },
  {
    "name": "manage_channel_subscriber_visibility",
    "description": "Retrieves or sets whether the subscriber count is hidden.",
    "parameters": {
      "type": "object",
      "properties": {
        "hidden_subscriber_count": {
          "type": "boolean",
          "description": "Sets whether the subscriber count is hidden; if `None`, retrieves the current setting."
        }
      }
    }
  },
  {
    "name": "manage_channel_video_count",
    "description": "Get or set the channel's uploaded video count.",
    "parameters": {
      "type": "object",
      "properties": {
        "video_count": {
          "type": "integer",
          "description": "An optional integer that sets the video count; if None, it retrieves the current video count."
        }
      }
    }
  },
  {
    "name": "manage_channel_view_count",
    "description": "Retrieves or sets the total view count of the channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "view_count": {
          "type": "integer",
          "description": "Sets the channel view count if provided; otherwise, retrieves the current view count."
        }
      }
    }
  },
  {
    "name": "mark_comment_as_spam",
    "description": "Marks a comment as spam.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The ID of the comment to mark as spam."
        }
      },
      "required": [
        "comment_id"
      ]
    }
  },
  {
    "name": "rate_video",
    "description": "Rates a video by adjusting like/dislike counts.",
    "parameters": {
      "type": "object",
      "properties": {
        "video_id": {
          "type": "string",
          "description": "The ID of the video to rate."
        },
        "rating": {
          "type": "string",
          "description": "The rating type, which must be one of `like`, `dislike`, or `none`."
        },
        "on_behalf_of": {
          "type": "string",
          "description": "Ignored; no user data is stored."
        }
      },
      "required": [
        "rating",
        "video_id"
      ]
    }
  },
  {
    "name": "report_video_abuse",
    "description": "Reports a video for abuse.",
    "parameters": {
      "type": "object",
      "properties": {
        "video_id": {
          "type": "string",
          "description": "The ID of the video to report."
        },
        "reason_id": {
          "type": "string",
          "description": "The ID of the reason for reporting the video."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The ID of the content owner on whose behalf the report is made."
        }
      },
      "required": [
        "reason_id",
        "video_id"
      ]
    }
  },
  {
    "name": "set_comment_moderation_status",
    "description": "Sets the moderation status of a comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The ID of the comment to moderate."
        },
        "moderation_status": {
          "type": "string",
          "description": "The new moderation status, valid as `heldForReview`, `published`, or `rejected`."
        },
        "ban_author": {
          "type": "boolean",
          "description": "Set to `True` to ban the comment's author upon rejection; defaults to `False`."
        }
      },
      "required": [
        "comment_id",
        "moderation_status"
      ]
    }
  },
  {
    "name": "update_caption",
    "description": "Update a caption resource.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the caption resource properties included in the API response, currently limited to 'snippet'."
        },
        "id": {
          "type": "string",
          "description": "Identifies the caption track being updated."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "An object containing caption track details."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Identifies a YouTube CMS user acting on behalf of the content owner specified in the `onBehalfOfContentOwner` parameter."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "The content owner on whose behalf the requesting YouTube CMS user's authorization credentials are acting."
        },
        "sync": {
          "type": "boolean",
          "description": "Indicates whether the caption track should be synchronized with the video."
        }
      },
      "required": [
        "id",
        "part"
      ]
    }
  },
  {
    "name": "update_channel_metadata",
    "description": "Updates metadata of a YouTube channel.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "The unique identifier of the channel to update."
        },
        "properties": {
          "type": "object",
          "properties": {
            "categoryId": {
              "type": "string",
              "description": "Channel category."
            },
            "forUsername": {
              "type": "string",
              "description": "The channel username."
            },
            "hl": {
              "type": "string",
              "description": "A string representing the language setting."
            },
            "managedByMe": {
              "type": "boolean",
              "description": "Whether the channel is managed."
            },
            "mine": {
              "type": "boolean",
              "description": "Channel ownership."
            },
            "mySubscribers": {
              "type": "boolean",
              "description": "A boolean indicating the subscription status."
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "Identifier for the CMS content owner."
            }
          },
          "description": "Key-value pairs of channel properties to update. Valid properties include `categoryId`, `forUsername`, `hl`, `managedByMe`, `mine`, `mySubscribers`, and `onBehalfOfContentOwner`.",
          "required": [
            "categoryId",
            "forUsername",
            "hl",
            "managedByMe",
            "mine",
            "mySubscribers",
            "onBehalfOfContentOwner"
          ]
        }
      },
      "required": [
        "channel_id"
      ]
    }
  },
  {
    "name": "update_channel_section",
    "description": "Update a channel section.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `channelSection` resource properties to include in the API response, such as `snippet` or `contentDetails`."
        },
        "section_id": {
          "type": "string",
          "description": "The ID of the channel section to update."
        },
        "snippet": {
          "type": "string",
          "description": "An object containing channel section details."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Identifies a YouTube CMS user acting on behalf of the specified content owner; this parameter is currently not used."
        }
      },
      "required": [
        "part",
        "section_id"
      ]
    }
  },
  {
    "name": "update_comment",
    "description": "Updates an existing comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The ID of the comment to update."
        },
        "snippet": {
          "type": "object",
          "description": "A dictionary containing details about the comment."
        },
        "moderation_status": {
          "type": "string",
          "description": "The new moderation status for the comment."
        },
        "banned_author": {
          "type": "boolean",
          "description": "Whether the comment's author is banned."
        }
      },
      "required": [
        "comment_id"
      ]
    }
  },
  {
    "name": "update_comment_thread",
    "description": "Update an existing comment thread and return the updated thread object.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "string",
          "description": "The ID of the comment thread to update."
        },
        "snippet": {
          "type": "object",
          "description": "A dictionary containing comment thread details."
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of comment IDs associated with the thread."
        }
      },
      "required": [
        "thread_id"
      ]
    }
  },
  {
    "name": "update_membership",
    "description": "Update an existing membership.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the membership resource properties included in the API response."
        },
        "id": {
          "type": "string",
          "description": "The ID of the membership to update."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "An updated snippet object with membership details."
        }
      },
      "required": [
        "id",
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "update_video_metadata",
    "description": "Updates specified properties of a video resource.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the video resource properties the API request is setting, which can be one or more of `snippet`, `contentDetails`, `status`, `recordingDetails`, or `localizations` (comma-separated)."
        },
        "body": {
          "type": "object",
          "properties": {},
          "description": "The video resource (dictionary) to update, which must include the video ID."
        },
        "on_behalf_of": {
          "type": "string",
          "description": "ID of the user on whose behalf the request is made."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The ID of the content owner on whose behalf the request is being made."
        }
      },
      "required": [
        "body",
        "part"
      ]
    }
  }
]