[
  {
    "name": "add_comment",
    "description": "Inserts a new comment. The comment's content and details are provided via a `snippet` object, and its initial `moderation_status` can be specified (defaulting to \"published\"). It also supports setting whether the author is banned, which defaults to `False`.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the comment resource properties that the API response will include."
        },
        "snippet": {
          "type": "object",
          "description": "A dictionary containing details about the comment."
        },
        "moderation_status": {
          "type": "string",
          "description": "Specifies the initial moderation status for the comment. This parameter defaults to \"published\"."
        },
        "banned_author": {
          "type": "boolean",
          "description": "Indicates whether the comment's author is banned. Defaults to `False`."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "create_channel",
    "description": "Creates a new channel resource.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "The `part` parameter (string) specifies which channel resource properties the API response will include."
        },
        "category_id": {
          "type": "string",
          "description": "A string that specifies a YouTube guide category ID for the new channel."
        },
        "for_username": {
          "type": "string",
          "description": "Specifies the YouTube username to associate with the new channel."
        },
        "hl": {
          "type": "string",
          "description": "Retrieves localized resource metadata for a specific application language. The language must be supported by the YouTube website."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies the YouTube channel ID for the new channel. This parameter is currently not used."
        },
        "managed_by_me": {
          "type": "boolean",
          "description": "This boolean parameter indicates whether the channel is managed by the authenticated user. Set to `True` if the user manages the channel, or `False` otherwise."
        },
        "max_results": {
          "type": "integer",
          "description": "An optional integer parameter that specifies the maximum number of items to return in the result set."
        },
        "mine": {
          "type": "boolean",
          "description": "A boolean value indicating whether the channel is owned by the authenticated user."
        },
        "my_subscribers": {
          "type": "boolean",
          "description": "Indicates whether the authenticated user has subscribed to the channel. This is an optional boolean parameter."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of a specific content owner. The string value of this parameter identifies the content owner."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "create_comment_thread",
    "description": "Inserts a new comment thread. The `part` parameter must be \"snippet\" to specify the response properties. Optionally, provide a `snippet` dictionary for arbitrary thread metadata or a `top_level_comment` dictionary for the initial comment, which can include an 'id' key.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `commentThread` resource properties to include in the API response. Currently, only `snippet` is supported for this parameter."
        },
        "snippet": {
          "type": "object",
          "description": "An optional dictionary containing details about the comment thread. This parameter is treated as arbitrary thread metadata."
        },
        "top_level_comment": {
          "type": "object",
          "description": "The top-level comment for the thread. If provided, it must be a dictionary that can optionally contain an 'id' key of type string."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "create_membership",
    "description": "Creates a new membership, requiring the `part` parameter to be 'snippet' to specify the membership resource properties included in the API response. The `snippet` parameter provides the membership details.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "The `part` parameter specifies which membership resource properties the API response will include. It must be set to 'snippet'."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "A dictionary object that specifies membership details. This includes the `memberChannelId`, `hasAccessToLevel`, and `mode` properties."
        }
      },
      "required": [
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "create_subscription",
    "description": "Inserts a new subscription, allowing specification of response properties with `part` and subscription details with an optional `snippet` dictionary.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "A string that specifies which subscription resource properties the API response will include."
        },
        "snippet": {
          "type": "object",
          "description": "An optional dictionary containing details about the subscription. When provided, it includes metadata such as the `channelId` (string) of the subscribing channel and the `resourceId` (dictionary) of the channel being subscribed to."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "delete_caption",
    "description": "Deletes a caption identified by its unique ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifies the caption track to be deleted."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "A string parameter indicating that the request's authorization credentials identify a YouTube CMS user. This user is acting on behalf of the content owner specified in the `onBehalfOfContentOwner` parameter."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Identifies the content owner on whose behalf the YouTube CMS user, identified by the request's authorization credentials, is acting."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_channel_section",
    "description": "Deletes a channel section. Provide the unique `section_id` as a string to identify the channel section to delete. Optionally, include an `on_behalf_of_content_owner` string, which specifies the content owner ID for CMS user operations.",
    "parameters": {
      "type": "object",
      "properties": {
        "section_id": {
          "type": "string",
          "description": "The unique string identifier of the channel section to delete."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The content owner ID used for CMS user operations. This parameter is optional and must be a string if provided."
        }
      },
      "required": [
        "section_id"
      ]
    }
  },
  {
    "name": "delete_comment",
    "description": "Deletes a specific comment. Specify the comment to delete by providing its string ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The ID of the comment to delete, provided as a string."
        }
      },
      "required": [
        "comment_id"
      ]
    }
  },
  {
    "name": "delete_comment_thread",
    "description": "Deletes a comment thread by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "string",
          "description": "The string ID of the comment thread to delete."
        }
      },
      "required": [
        "thread_id"
      ]
    }
  },
  {
    "name": "delete_membership",
    "description": "Deletes a specific membership by its unique identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string ID of the membership to delete."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "delete_subscription",
    "description": "Deletes a subscription identified by its unique ID. The function returns a success status or an error if the specified subscription is not found.",
    "parameters": {
      "type": "object",
      "properties": {
        "subscription_id": {
          "type": "string",
          "description": "The string ID of the subscription to delete."
        }
      },
      "required": [
        "subscription_id"
      ]
    }
  },
  {
    "name": "delete_video",
    "description": "Deletes a video identified by its unique ID. The deletion can optionally be performed on behalf of a specified content owner.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string identifier for the video to be deleted."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The ID of the content owner on whose behalf the deletion is being made."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "download_caption",
    "description": "Downloads a specific caption track by its ID. It can retrieve the caption in a desired format such as SRT, VTT, or SBV, or provide a translated version to a target language.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The string ID of the caption to be downloaded."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Identifies the CMS user making the request on behalf of the content owner. This parameter is currently not used in the implementation."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "The content owner the user is acting on behalf of. This parameter is currently not used in the implementation."
        },
        "tfmt": {
          "type": "string",
          "description": "Specifies the desired format of the caption file. Valid formats are 'srt', 'vtt', and 'sbv'."
        },
        "tlang": {
          "type": "string",
          "description": "Specifies the target language for the simulated translation."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  {
    "name": "insert_caption",
    "description": "Inserts a new caption. This operation requires the `part` parameter to be set to 'snippet' for successful execution.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the caption resource properties to include in the API response. This parameter is a string that must be set to 'snippet'."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "A dictionary containing details about the caption track."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified in the `onBehalfOfContentOwner` parameter. This parameter is currently not used in the implementation."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified by this parameter's value. This parameter is currently not used in the implementation."
        },
        "sync": {
          "type": "boolean",
          "description": "A boolean parameter that indicates whether the caption track should be synchronized with the video."
        }
      },
      "required": [
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "insert_channel_banner",
    "description": "Inserts a new channel banner and returns the newly created banner resource.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "The optional ID of the channel for which to insert the banner."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Specifies the content owner on whose behalf the YouTube CMS user, identified by the request's authorization credentials, is acting."
        },
        "on_behalf_of_content_owner_channel": {
          "type": "string",
          "description": "Specifies the YouTube channel ID of the channel to which the user is being added."
        }
      }
    }
  },
  {
    "name": "insert_channel_section",
    "description": "Inserts a new channel section. This function requires the `part` parameter, which must be 'snippet' or 'contentDetails' to specify resource properties, and a `snippet` parameter containing the section's details. Optional `on_behalf_of_content_owner` and `on_behalf_of_content_owner_channel` parameters are also accepted but are currently unused.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which properties of the `channelSection` resource the API response will include. This parameter must be either `'snippet'` or `'contentDetails'`."
        },
        "snippet": {
          "type": "string",
          "description": "A string representing the channel section's snippet object, which contains its details. This string must be well-formed."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Specifies that the request's authorization credentials belong to a YouTube CMS user acting on behalf of the content owner identified by this parameter's string value. This parameter is currently not used."
        },
        "on_behalf_of_content_owner_channel": {
          "type": "string",
          "description": "Specifies the YouTube channel ID of the channel to which the user is being added. This parameter is currently not used."
        }
      },
      "required": [
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "list_activities",
    "description": "Retrieve a list of YouTube activities, which represent various actions such as uploads, likes, and comments. These activities can be filtered using criteria including channel ID, publication date range, and region code.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the activity resource properties that the API response will include. These properties can include `id`, `snippet`, and `contentDetails`."
        },
        "channelId": {
          "type": "string",
          "description": "A YouTube channel ID. When provided, the API will only return activities associated with this specific channel."
        },
        "mine": {
          "type": "boolean",
          "description": "Set this parameter to `true` to retrieve activities for the authenticated user."
        },
        "maxResults": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set."
        },
        "pageToken": {
          "type": "string",
          "description": "Identifies a specific page within the result set to be returned."
        },
        "publishedAfter": {
          "type": "string",
          "description": "An optional string that specifies the earliest date and time an activity could have occurred."
        },
        "publishedBefore": {
          "type": "string",
          "description": "A string that specifies the latest date and time an activity could have occurred."
        },
        "regionCode": {
          "type": "string",
          "description": "Specifies the region code for selecting a video chart. The API uses this code to return a video chart available in the specified region."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_captions",
    "description": "Retrieves a list of captions for a specified video, optionally filtered by a specific caption ID. The required `part` parameter must be 'id' or 'snippet' to determine the level of detail provided for each caption.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies which parts of the caption resource to retrieve. It must be 'id' or 'snippet'."
        },
        "videoId": {
          "type": "string",
          "description": "The string ID of the video from which to retrieve captions."
        },
        "id": {
          "type": "string",
          "description": "An optional string that specifies a single caption ID. Use this parameter to filter the retrieved list of captions to include only the one matching the provided ID."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Identifies the CMS user making the request on behalf of the content owner. This parameter is currently not used in the implementation."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Specifies the content owner on whose behalf the user is acting. This parameter is currently not used in the implementation."
        }
      },
      "required": [
        "part",
        "videoId"
      ]
    }
  },
  {
    "name": "list_channel_sections",
    "description": "Retrieves a list of channel sections, optionally filtered by various criteria. The `part` parameter specifies included resource properties as a comma-separated string (e.g., \"id,snippet,contentDetails\"), requiring at least one valid component. The `section_id` parameter filters by a single channel section ID, despite being described as accepting a comma-separated list of IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `channelSection` resource properties that the API response will include. It must be a comma-separated string of valid parts, such as `id,snippet,contentDetails`. The parameter cannot be an empty string, consist only of commas or whitespace, or contain no valid parts after parsing; at least one specified part must be valid."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID. When provided, the API returns only channel sections associated with that specific ID."
        },
        "hl": {
          "type": "string",
          "description": "Specifies the application language for which to retrieve localized resource metadata. This language must be supported by the YouTube website."
        },
        "section_id": {
          "type": "string",
          "description": "Specifies YouTube channel section ID(s) for retrieval, which must be a single string. Although it accepts a comma-separated list of IDs, the current implementation treats the entire string as a single ID for filtering."
        },
        "mine": {
          "type": "boolean",
          "description": "A boolean parameter that, when set to `True`, instructs the API to return only channel sections owned by the authenticated user."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified by this parameter's value."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_channels",
    "description": "Retrieves a list of channels, optionally filtering by criteria such as category ID, username, or ownership status. You can specify a comma-separated list of channel IDs, or limit the maximum number of results to a value between 1 and 50.",
    "parameters": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string",
          "description": "Specifies a YouTube guide category ID as a string. When provided, the API response will exclusively include channels belonging to that specific category."
        },
        "for_username": {
          "type": "string",
          "description": "Specifies a YouTube username. When provided, this parameter filters the results to include only the channel associated with the specified username."
        },
        "hl": {
          "type": "string",
          "description": "Specifies the application language for which the API retrieves localized resource metadata. The specified language must be supported by the YouTube website."
        },
        "channel_id": {
          "type": "string",
          "description": "A comma-separated list of YouTube channel IDs. This parameter specifies the channel resources to be retrieved."
        },
        "managed_by_me": {
          "type": "boolean",
          "description": "An optional boolean parameter that, when `True`, filters the API response to return only channels the user is allowed to manage."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set. This value must be an integer between 1 and 50, inclusive."
        },
        "mine": {
          "type": "boolean",
          "description": "A boolean flag that, when set, instructs the API to return only channels owned by the authenticated user."
        },
        "my_subscribers": {
          "type": "boolean",
          "description": "Specifies whether to return only channels to which the authenticated user has subscribed. This parameter accepts a boolean value."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "This string parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified by its value."
        }
      }
    }
  },
  {
    "name": "list_comment_threads",
    "description": "Retrieves a list of comment threads. This function supports filtering results by specific thread, channel, or video IDs, by search terms, moderation status, or text format. Specify the desired resource properties using the mandatory `part` parameter, and manage results with ordering and pagination options.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `commentThread` resource properties that the API response will include. This parameter is mandatory and must not be an empty string."
        },
        "thread_id": {
          "type": "string",
          "description": "Identifies the specific comment thread to retrieve. This parameter must be a string."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID as a string. When provided, the API returns only comment threads associated with that specific channel."
        },
        "video_id": {
          "type": "string",
          "description": "Identifies the video for which comment threads should be returned. This parameter must be a string if provided."
        },
        "all_threads_related_to_channel_id": {
          "type": "string",
          "description": "A YouTube channel ID used to return all comment threads related to that specified channel."
        },
        "search_terms": {
          "type": "string",
          "description": "A string that specifies the search terms used for filtering comment threads."
        },
        "moderation_status": {
          "type": "string",
          "description": "Specifies the moderation status of comments to include in the response. This parameter accepts a string."
        },
        "order": {
          "type": "string",
          "description": "Specifies the order in which comment threads should be listed in the API response."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set. This parameter must be a positive integer if provided."
        },
        "page_token": {
          "type": "string",
          "description": "A string that identifies a specific page in the result set to be returned."
        },
        "text_format": {
          "type": "string",
          "description": "Specifies the format of the text content within comments."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_comments",
    "description": "Retrieves a list of comments. A `part` parameter is required to specify the comment resource properties included in the API response. Optionally filter the results by `comment_id`, `parent_id` to retrieve replies, or specify `max_results` to limit the number of returned items.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "A required string parameter that specifies which comment resource properties the API response will include."
        },
        "comment_id": {
          "type": "string",
          "description": "An optional string that identifies the specific comment to be retrieved."
        },
        "parent_id": {
          "type": "string",
          "description": "Identifies the comment, as a string, for which replies should be retrieved."
        },
        "max_results": {
          "type": "integer",
          "description": "The maximum number of items to include in the returned result set."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set that should be returned. However, this parameter is currently not used."
        },
        "text_format": {
          "type": "string",
          "description": "Specifies the format of the text within the comment. This parameter is currently not used."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_memberships",
    "description": "Retrieves a list of membership objects for a channel based on specified criteria. The response includes an `items` list, where each item is a membership object detailing the member's ID, channel ID, access level, and membership mode. A valid `part` parameter, specifically 'snippet', is required for a successful response.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the membership resource properties to include in the API response. This parameter must be set to `snippet`."
        },
        "has_access_to_level": {
          "type": "string",
          "description": "Specifies the membership level that a member has access to. Use this parameter to filter the returned list of members."
        },
        "filter_by_member_channel_id": {
          "type": "string",
          "description": "Specifies a comma-separated list of YouTube channel IDs. The API will only return memberships associated with those specified channels."
        },
        "max_results": {
          "type": "integer",
          "description": "An integer specifying the maximum number of items to return in the result set."
        },
        "mode": {
          "type": "string",
          "description": "Specifies the membership mode, such as `fanFunding` or `sponsors`."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set to be returned. This parameter is currently not used in the implementation."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_searches",
    "description": "Returns a dictionary simulating an API response that contains a collection of search results matching the provided query and filter parameters. This response also includes pagination metadata, such as total results and results per page.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies a comma-separated list of one or more search resource properties, such as `snippet` or `id`."
        },
        "q": {
          "type": "string",
          "description": "A query string that searches for matching resources. This string is used to find matches within the titles or descriptions of videos, channels, and playlists."
        },
        "channel_id": {
          "type": "string",
          "description": "A string representing a channel identifier. Use this parameter to filter search results and return only resources created by that specific channel."
        },
        "channel_type": {
          "type": "string",
          "description": "Filters search results to include only channels of a specified type."
        },
        "max_results": {
          "type": "integer",
          "description": "The maximum number of items to return in the result set. This integer parameter defaults to 25, and results are capped at a maximum of 50 items."
        },
        "order": {
          "type": "string",
          "description": "Specifies the order in which to sort the returned resources. This parameter accepts string values such as 'relevance', 'viewCount', 'date', or 'title'. The default sorting order is by 'relevance'."
        },
        "type": {
          "type": "string",
          "description": "A comma-separated list of resource types to include in the search response, such as 'video', 'channel', or 'playlist'. If omitted, results will include all three types by default."
        },
        "video_caption": {
          "type": "string",
          "description": "Filters videos based on the presence, absence, or type of captions. Valid values include 'any' (for any captions), 'closedCaption' (for closed captions), or 'none' (for no captions)."
        },
        "video_category_id": {
          "type": "string",
          "description": "Filters search results to display only videos associated with the specified category ID."
        },
        "video_definition": {
          "type": "string",
          "description": "Filters videos based on their definition. Specify 'high' for high definition videos or 'standard' for standard definition."
        },
        "video_duration": {
          "type": "string",
          "description": "Filters the collection of videos by their length. Use this parameter to specify the desired video duration for search results."
        },
        "video_embeddable": {
          "type": "string",
          "description": "Filters videos based on their embeddability status. Set to `'true'` to return only embeddable videos; otherwise, provide any non-empty string to filter for non-embeddable videos."
        },
        "video_license": {
          "type": "string",
          "description": "Specifies the license type to filter video results."
        },
        "video_syndicated": {
          "type": "string",
          "description": "Filters videos based on their syndication status. Set to `'true'` to include syndicated videos or `'false'` to exclude them."
        },
        "video_type": {
          "type": "string",
          "description": "A string parameter used to filter video results by their specific type."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_subscriptions",
    "description": "Retrieves a list of subscriptions. This function supports various optional filters, allowing you to narrow results by criteria such as specific channel IDs, subscription IDs, or authenticated user ownership.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the subscription resource properties to include in the API response."
        },
        "channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID. The API returns only subscriptions associated with that particular channel."
        },
        "subscription_id": {
          "type": "string",
          "description": "The unique identifier for the specific subscription to be retrieved."
        },
        "mine": {
          "type": "boolean",
          "description": "A boolean parameter that, when set to `true`, instructs the API to return only subscriptions owned by the authenticated user."
        },
        "my_recent_subscribers": {
          "type": "boolean",
          "description": "A boolean parameter that, when set, returns only subscriptions to the authenticated user's channel from the last 30 days."
        },
        "my_subscribers": {
          "type": "boolean",
          "description": "A boolean parameter that instructs the API to return only subscriptions to the authenticated user's channel."
        },
        "for_channel_id": {
          "type": "string",
          "description": "Specifies a YouTube channel ID. The API will only return subscriptions to that particular channel."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Specifies the content owner for whom a YouTube CMS user is acting. The request's authorization credentials must identify a YouTube CMS user who is acting on behalf of the content owner specified by this parameter's value."
        },
        "on_behalf_of_content_owner_channel": {
          "type": "string",
          "description": "Specifies the YouTube channel ID for the channel to which the user is being added."
        },
        "order": {
          "type": "string",
          "description": "Specifies the order in which the API response should list subscriptions."
        },
        "page_token": {
          "type": "string",
          "description": "Identifies a specific page in the result set to be returned."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_video_categories",
    "description": "Retrieves a list of video categories. The required `part` parameter must be 'snippet' to specify the resource properties included in the response. Optionally filter results by category ID, region code, or the maximum number of items.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `videoCategory` resource properties included in the API response. This parameter must be set to 'snippet'."
        },
        "hl": {
          "type": "string",
          "description": "The `hl` parameter instructs the API to retrieve localized resource metadata for a specific application language supported by the YouTube website. Note that this parameter is currently unused."
        },
        "id": {
          "type": "string",
          "description": "An optional string parameter that identifies the specific video category to retrieve."
        },
        "region_code": {
          "type": "string",
          "description": "Specifies a region code to select video categories available in that specific region."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to include in the result set."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "list_videos",
    "description": "Retrieves a list of videos, requiring the `part` parameter. Results are filtered by exactly one of `chart`, `id`, or `my_rating`: `chart` supports only 'mostPopular', `id` accepts a comma-separated list of video IDs, and `my_rating` requires the `user_id` parameter.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the video resource properties to include in the API response. This is a required parameter."
        },
        "chart": {
          "type": "string",
          "description": "Specifies a chart to retrieve a list of videos matching its criteria. Currently, only 'mostPopular' is supported as a valid value."
        },
        "id": {
          "type": "string",
          "description": "Specifies the YouTube video IDs for retrieval. Provide these IDs as a comma-separated list."
        },
        "my_rating": {
          "type": "string",
          "description": "Retrieves a list of videos matching the criteria specified by this parameter's value. This parameter requires the `user_id` parameter to be set and cannot be used simultaneously with either the `chart` or `id` parameters."
        },
        "max_results": {
          "type": "integer",
          "description": "Specifies the maximum number of items to return in the result set. The API will not return more than 50 items, even if a higher value is provided."
        },
        "page_token": {
          "type": "string",
          "description": "Specifies the particular page within a paginated result set to be returned."
        },
        "user_id": {
          "type": "string",
          "description": "The user ID to identify a user. This parameter is required when the `my_rating` parameter is used."
        }
      },
      "required": [
        "part"
      ]
    }
  },
  {
    "name": "manage_channel_comment_count",
    "description": "Retrieves the current number of comments for the channel. If an integer `comment_count` is provided, it sets the comment count to this new value instead.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_count": {
          "type": "integer",
          "description": "An optional integer. If provided, it sets the comment count to this value; if `None`, it retrieves the current comment count."
        }
      }
    }
  },
  {
    "name": "manage_channel_subscriber_count",
    "description": "Retrieves the current subscriber count for the channel. If a `subscriber_count` value is provided, it sets the channel's subscriber count to that specified number instead.",
    "parameters": {
      "type": "object",
      "properties": {
        "subscriber_count": {
          "type": "integer",
          "description": "Sets the subscriber count if an integer value is provided. If `None`, retrieves the current subscriber count."
        }
      }
    }
  },
  {
    "name": "manage_channel_subscriber_visibility",
    "description": "Manages the visibility of the subscriber count. If a boolean value is provided, it sets the subscriber count visibility; otherwise, it retrieves the current visibility status.",
    "parameters": {
      "type": "object",
      "properties": {
        "hidden_subscriber_count": {
          "type": "boolean",
          "description": "An optional boolean parameter that determines the visibility of the subscriber count. Provide a boolean value to set whether the count is hidden, or set to `None` to retrieve the current visibility setting."
        }
      }
    }
  },
  {
    "name": "manage_channel_video_count",
    "description": "Retrieves or sets the number of videos uploaded to the channel. If an integer `video_count` is provided, it sets the channel's video count to this value; otherwise, it retrieves the current video count.",
    "parameters": {
      "type": "object",
      "properties": {
        "video_count": {
          "type": "integer",
          "description": "Sets the video count to the specified value when provided. If `None`, this parameter retrieves the current video count."
        }
      }
    }
  },
  {
    "name": "manage_channel_view_count",
    "description": "Retrieves or sets the total view count of the channel. Provide a `view_count` parameter to set the count, or omit it to retrieve the current count.",
    "parameters": {
      "type": "object",
      "properties": {
        "view_count": {
          "type": "integer",
          "description": "An optional integer that controls the channel's view count operation. If an integer value is provided, it sets the channel's view count to that specified value. If `None`, it retrieves the current view count."
        }
      }
    }
  },
  {
    "name": "mark_comment_as_spam",
    "description": "Marks a comment as spam, identified by its unique ID. Returns the updated comment object upon success, or an error if the comment is not found.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The string ID of the comment to mark as spam."
        }
      },
      "required": [
        "comment_id"
      ]
    }
  },
  {
    "name": "rate_video",
    "description": "Rates a specific video by directly adjusting its like or dislike counts. The `rating` parameter must be \"like\", \"dislike\", or \"none\"; the `on_behalf_of` parameter is ignored.",
    "parameters": {
      "type": "object",
      "properties": {
        "video_id": {
          "type": "string",
          "description": "The string ID of the video to rate."
        },
        "rating": {
          "type": "string",
          "description": "The rating to apply to the video. It must be one of 'like', 'dislike', or 'none'."
        },
        "on_behalf_of": {
          "type": "string",
          "description": "This parameter is ignored as no user data is stored."
        }
      },
      "required": [
        "rating",
        "video_id"
      ]
    }
  },
  {
    "name": "report_video_abuse",
    "description": "Reports a video for abuse. Provide the ID of the video to report, the reason ID for the abuse, and optionally the content owner's ID on whose behalf the report is made. The function returns a dictionary indicating if the report was successful or if an error occurred.",
    "parameters": {
      "type": "object",
      "properties": {
        "video_id": {
          "type": "string",
          "description": "The string ID of the video to report."
        },
        "reason_id": {
          "type": "string",
          "description": "The string ID that specifies the reason for reporting the video."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "A unique identifier for the content owner on whose behalf this report is submitted."
        }
      },
      "required": [
        "reason_id",
        "video_id"
      ]
    }
  },
  {
    "name": "set_comment_moderation_status",
    "description": "Sets the moderation status of a comment. Valid statuses are 'heldForReview', 'published', or 'rejected'. When setting the status to 'rejected', the author can optionally be banned.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The string identifier for the comment to moderate."
        },
        "moderation_status": {
          "type": "string",
          "description": "The new moderation status for the comment. Valid values are `\"heldForReview\"`, `\"published\"`, or `\"rejected\"`."
        },
        "ban_author": {
          "type": "boolean",
          "description": "A boolean that, if `True`, bans the author when their comment is rejected. This parameter defaults to `False`."
        }
      },
      "required": [
        "comment_id",
        "moderation_status"
      ]
    }
  },
  {
    "name": "update_caption",
    "description": "Updates an existing caption resource by its `id`. Specify the `part` parameter as `'snippet'` to indicate the properties being updated, and provide a `snippet` object containing the new details for the caption track.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the caption resource properties that the API response will include. For this operation, the parameter must be set to 'snippet'."
        },
        "id": {
          "type": "string",
          "description": "Identifies the caption track to be updated."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "A dictionary containing details about the caption track."
        },
        "onBehalfOf": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials belong to a YouTube CMS user acting on behalf of the content owner specified by the `onBehalfOfContentOwner` parameter."
        },
        "onBehalfOfContentOwner": {
          "type": "string",
          "description": "Specifies the content owner on whose behalf a YouTube CMS user, identified by the request's authorization credentials, is acting."
        },
        "sync": {
          "type": "boolean",
          "description": "An optional boolean parameter that indicates whether the caption track should be synchronized with the video. This parameter is currently not used in the implementation."
        }
      },
      "required": [
        "id",
        "part"
      ]
    }
  },
  {
    "name": "update_channel_metadata",
    "description": "Updates metadata for a YouTube channel by providing key-value pairs. Valid properties include `categoryId` (str), `forUsername` (str), `hl` (str), `managedByMe` (bool), `mine` (bool), `mySubscribers` (bool), and `onBehalfOfContentOwner` (str).",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "The unique identifier, as a string, of the channel to update."
        },
        "properties": {
          "type": "object",
          "properties": {
            "categoryId": {
              "type": "string",
              "description": "Specifies the category identifier for the channel as a string."
            },
            "forUsername": {
              "type": "string",
              "description": "Specifies the username for the channel."
            },
            "hl": {
              "type": "string",
              "description": "Specifies the language setting for the channel as a string."
            },
            "managedByMe": {
              "type": "boolean",
              "description": "A boolean value indicating the channel's management status."
            },
            "mine": {
              "type": "boolean",
              "description": "Indicates the channel's ownership status as a boolean value."
            },
            "mySubscribers": {
              "type": "boolean",
              "description": "Specifies the subscription status as a boolean."
            },
            "onBehalfOfContentOwner": {
              "type": "string",
              "description": "A string representing CMS user information."
            }
          },
          "description": "A dictionary containing key-value pairs to update channel properties. Keys must be specific property names such as `categoryId`, `forUsername`, `hl`, or `onBehalfOfContentOwner` (which expect string values), or boolean flags like `managedByMe`, `mine`, and `mySubscribers`.",
          "required": [
            "categoryId",
            "forUsername",
            "hl",
            "managedByMe",
            "mine",
            "mySubscribers",
            "onBehalfOfContentOwner"
          ]
        }
      },
      "required": [
        "channel_id"
      ]
    }
  },
  {
    "name": "update_channel_section",
    "description": "Updates an existing channel section. Specify the `part` parameter, such as `snippet` or `contentDetails`, to indicate which properties of the channel section are being modified.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the `channelSection` resource properties to include in the API response. This parameter must be either `'snippet'` or `'contentDetails'`."
        },
        "section_id": {
          "type": "string",
          "description": "The string ID of the channel section to update. This ID must correspond to an existing channel section."
        },
        "snippet": {
          "type": "string",
          "description": "A string representing the snippet object, which contains details about the channel section."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "Indicates that the request's authorization credentials identify a YouTube CMS user acting on behalf of the content owner specified by this parameter's value. This parameter is currently not used."
        }
      },
      "required": [
        "part",
        "section_id"
      ]
    }
  },
  {
    "name": "update_comment",
    "description": "Updates an existing comment identified by its ID. Provide at least one of the following parameters to modify: the comment's `snippet` (a dictionary of details), its `moderation_status` (a string), or whether its `author` is banned (a boolean).",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "string",
          "description": "The string identifier of the comment to be updated."
        },
        "snippet": {
          "type": "object",
          "description": "A dictionary containing details about the comment."
        },
        "moderation_status": {
          "type": "string",
          "description": "Specifies the new moderation status for the comment."
        },
        "banned_author": {
          "type": "boolean",
          "description": "A boolean value indicating whether the author of the comment is banned."
        }
      },
      "required": [
        "comment_id"
      ]
    }
  },
  {
    "name": "update_comment_thread",
    "description": "Updates an existing comment thread identified by its `thread_id`. It allows modifying the thread's `snippet` object, its `comments` (a list of comment IDs), or both. An update requires providing at least one of the `snippet` or `comments` parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "string",
          "description": "A string representing the ID of the comment thread to update."
        },
        "snippet": {
          "type": "object",
          "description": "An optional dictionary, referred to as the snippet object, that contains details about the comment thread. It is used to update the thread's associated information."
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies a list of comment IDs associated with the thread."
        }
      },
      "required": [
        "thread_id"
      ]
    }
  },
  {
    "name": "update_membership",
    "description": "Updates an existing membership, identified by its ID, using the provided `snippet` object for new membership details. The function exclusively modifies the `snippet` portion of the membership, and the `part` parameter, which specifies response properties, currently must be 'snippet' for successful updates.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "Specifies the membership resource properties to include in the API response. This parameter must be set to 'snippet'."
        },
        "id": {
          "type": "string",
          "description": "The unique identifier of the membership to be updated."
        },
        "snippet": {
          "type": "object",
          "properties": {},
          "description": "A dictionary object containing updated membership details."
        }
      },
      "required": [
        "id",
        "part",
        "snippet"
      ]
    }
  },
  {
    "name": "update_video_metadata",
    "description": "Updates an existing video. Specify which video resource properties to update using the `part` parameter, which must be a comma-separated list of values such as 'snippet', 'contentDetails', 'status', 'recordingDetails', or 'localizations'. The `body` parameter must provide the video resource to update, including its unique `id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "part": {
          "type": "string",
          "description": "A string that specifies which video resource properties the API request is setting. This parameter accepts a single property name or a comma-separated list of names. Valid property names include `snippet`, `contentDetails`, `status`, `recordingDetails`, and `localizations`."
        },
        "body": {
          "type": "object",
          "properties": {},
          "description": "A dictionary representing the video resource to update. This dictionary must include the video's `id`."
        },
        "on_behalf_of": {
          "type": "string",
          "description": "The optional string ID of the user on whose behalf the request is being made."
        },
        "on_behalf_of_content_owner": {
          "type": "string",
          "description": "The ID of the content owner on whose behalf the request is being made."
        }
      },
      "required": [
        "body",
        "part"
      ]
    }
  }
]