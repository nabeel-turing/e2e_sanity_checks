# This file is automatically generated by the MutationBuilder

def get_or_set_channel_comment_total(new_comment_total_value=None):
    """
    Retrieves or sets the number of comments for the channel.

    Args:
        new_comment_total_value (Optional[int]): If provided, sets the comment count to this value.
                                      If None, retrieves the current comment count.

    Returns:
        Dict[str, int]: A dictionary containing:
        - If `comment_count` is provided:
            - commentCount (int): The newly set comment count for the channel.
        - If `comment_count` is not provided:
            - commentCount (int): The current number of comments on the channel from the database.
    """
    from youtube.ChannelStatistics import comment_count
    return comment_count(comment_count=new_comment_total_value)


def configure_subscriber_count_visibility(is_subscriber_count_hidden=None):
    """
    Checks whether the subscriber count is hidden.

    Args:
        is_subscriber_count_hidden (Optional[bool]): If provided, sets whether the subscriber count is hidden.
                                                 If None, retrieves the current setting.

    Returns:
        Dict[str, bool]: A dictionary containing:
        - If `hidden_subscriber_count` is provided:
            - hiddenSubscriberCount (bool): The newly set visibility state.
        - If `hidden_subscriber_count` is not provided:
            - hiddenSubscriberCount (bool): The current visibility status from the database.
    """
    from youtube.ChannelStatistics import hidden_subscriber_count
    return hidden_subscriber_count(hidden_subscriber_count=is_subscriber_count_hidden)


def get_or_set_channel_subscriber_total(new_subscriber_total_value=None):
    """
    Retrieves or sets the number of subscribers of the channel.

    Args:
        new_subscriber_total_value (Optional[int]): If provided, sets the subscriber count to this value.
                                         If None, retrieves the current subscriber count.

    Returns:
        Dict[str, int]: A dictionary containing:
        - If `subscriber_count` is provided:
            - subscriberCount (int): The newly set subscriber count.
        - If `subscriber_count` is not provided:
            - subscriberCount (int): The current subscriber count from the database.
    """
    from youtube.ChannelStatistics import subscriber_count
    return subscriber_count(subscriber_count=new_subscriber_total_value)


def get_or_set_channel_video_total(new_video_total_value=None):
    """
    Retrieves or sets the number of videos uploaded to the channel.

    Args:
        new_video_total_value (Optional[int]): If provided, sets the video count to this value.
                                    If None, retrieves the current video count.

    Returns:
        Dict[str, int]: A dictionary containing:
        - If `video_count` is provided:
            - videoCount (int): The newly set number of uploaded videos.
        - If `video_count` is not provided:
            - videoCount (int): The current number of videos from the database.
    """
    from youtube.ChannelStatistics import video_count
    return video_count(video_count=new_video_total_value)


def get_or_set_channel_view_total(new_view_total_value=None):
    """
    Retrieves or sets the total view count of the channel.

    Args:
        new_view_total_value (Optional[int]): If provided, sets the view count to this value.
                                   If None, retrieves the current view count.

    Returns:
        Dict[str, int]: A dictionary containing:
        - If `view_count` is provided:
            - viewCount (int): The newly set total number of views.
        - If `view_count` is not provided:
            - viewCount (int): The current total view count from the database.
    """
    from youtube.ChannelStatistics import view_count
    return view_count(view_count=new_view_total_value)
