# This file is automatically generated by the MutationBuilder

def get_channel_members_list(
    membership_data_to_return,
    filter_by_access_level_id=None,
    filter_by_member_ids=None,
    member_list_size=None,
    filter_by_membership_mode=None,
    member_list_page_cursor=None
):
    """
    Retrieves a list of members that match the request criteria for a channel.

    Args:
        membership_data_to_return (str): The part parameter specifies the membership resource properties that the API response will include.
        filter_by_access_level_id (Optional[str]): The hasAccessToLevel parameter specifies the membership level that the member has access to.
        filter_by_member_ids (Optional[str]): The filterByMemberChannelId parameter specifies a comma-separated list of YouTube channel IDs. The API will only return memberships from those channels.
        member_list_size (Optional[int]): The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        filter_by_membership_mode (Optional[str]): The mode parameter specifies the membership mode.
        member_list_page_cursor (Optional[str]): The pageToken parameter identifies a specific page in the result set that should be returned. (Currently not used in implementation)

    Returns:
            Dict[str, Union[List[Dict], str]]: A dictionary containing:
            - If part is valid:
                - items (List[Dict]): A list of membership objects, each containing:
                    - id (str): Unique ID of the member
                    - snippet (Dict): Metadata about the membership containing:
                        - memberChannelId (str): Channel ID of the member
                        - hasAccessToLevel (str): The level the member has access to
                        - mode (str): The mode of the membership (e.g., "fanFunding", "sponsors")
            - If part is invalid:
                - error (str): Error message describing the issue (e.g., "Invalid part parameter").
    """
    from youtube.Memberships import list
    return list(
        part=membership_data_to_return,
        has_access_to_level=filter_by_access_level_id,
        filter_by_member_channel_id=filter_by_member_ids,
        max_results=member_list_size,
        mode=filter_by_membership_mode,
        page_token=member_list_page_cursor
    )


def add_new_channel_member(new_member_response_parts, new_membership_information):
    """
    Creates a new membership.

    Args:
        new_member_response_parts (str): The part parameter specifies the membership resource properties that the API response will include.
        new_membership_information (Dict[str, Any]): The snippet object containing membership details.

    Returns:
        Dict[str, Union[bool, Dict, str]]: A dictionary containing:
            - If part is valid:
                - success (bool): Whether the operation was successful
                - membership (Dict): The created membership object containing:
                    - id (str): Unique ID of the member
                    - snippet (Dict): Metadata about the membership containing:
                        - memberChannelId (str): Channel ID of the member
                        - hasAccessToLevel (str): The level the member has access to
                        - mode (str): The mode of the membership (e.g., "fanFunding", "sponsors")
            - If part is invalid:
                - error (str): Error message describing the issue
    """
    from youtube.Memberships import insert
    return insert(part=new_member_response_parts, snippet=new_membership_information)


def remove_channel_membership(membership_id_to_delete):
    """
    Deletes a membership.

    Args:
        membership_id_to_delete (str): The ID of the membership to delete.

    Returns:
        Dict[str, bool]: A dictionary containing:
            - success (bool): Whether the operation was successful
    """
    from youtube.Memberships import delete
    return delete(id=membership_id_to_delete)


def modify_channel_membership_details(
    membership_parts_to_update,
    membership_id_for_update,
    updated_membership_information
):
    """
    Updates an existing membership.

    Args:
        membership_parts_to_update (str): The part parameter specifies the membership resource properties that the API response will include.
        membership_id_for_update (str): The ID of the membership to update.
        updated_membership_information (Dict[str, Any]): The updated snippet object containing membership details.

    Returns:
        Dict[str, Union[bool, Dict, str]]: A dictionary containing:
            - If part is valid and membership exists:
                - success (bool): Whether the operation was successful
                - membership (Dict): The updated membership object containing:
                    - id (str): Unique ID of the member
                    - snippet (Dict): Metadata about the membership containing:
                        - memberChannelId (str): Channel ID of the member
                        - hasAccessToLevel (str): The level the member has access to
                        - mode (str): The mode of the membership (e.g., "fanFunding", "sponsors")
            - If part is invalid:
                - error (str): Error message describing the issue
            - If membership not found:
                - success (bool): False
    """
    from youtube.Memberships import update
    return update(
        part=membership_parts_to_update,
        id=membership_id_for_update,
        snippet=updated_membership_information
    )
