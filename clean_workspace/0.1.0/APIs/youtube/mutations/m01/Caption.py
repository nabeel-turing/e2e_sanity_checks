# This file is automatically generated by the MutationBuilder

def remove_video_caption_track(
    caption_track_id_to_delete,
    cms_user_agent_id=None,
    cms_content_owner_id_for_action=None
):
    """
    Deletes a caption.

    Args:
        caption_track_id_to_delete (str): The id parameter identifies the caption track that is being deleted.
        cms_user_agent_id (Optional[str]): The onBehalfOf parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the onBehalfOfContentOwner parameter. (Currently not used in implementation)
        cms_content_owner_id_for_action (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. (Currently not used in implementation)

    Returns:
        Dict[str, bool]: A dictionary containing:
            - success (bool): True if deletion is successful

    Raises:
        ValueError: If the caption ID does not exist in the database.
    """
    from youtube.Caption import delete
    return delete(
        id=caption_track_id_to_delete,
        onBehalfOf=cms_user_agent_id,
        onBehalfOfContentOwner=cms_content_owner_id_for_action
    )


def fetch_caption_track_file(
    caption_track_id_to_download,
    requesting_cms_user_id=None,
    caption_content_owner_id=None,
    caption_file_format=None,
    caption_translation_language=None
):
    """
    Downloads a caption track.

    Args:
        caption_track_id_to_download (str): The ID of the caption to be downloaded.
        requesting_cms_user_id (Optional[str]): CMS user making the request on behalf of the content owner. (Currently not used in implementation)
        caption_content_owner_id (Optional[str]): Content owner the user is acting on behalf of. (Currently not used in implementation)
        caption_file_format (Optional[str]): Desired format of the caption file ('srt', 'vtt', 'sbv').
        caption_translation_language (Optional[str]): Target language for translation (simulated).

    Returns:
        str: Caption content or simulated translation.

    Raises:
        ValueError: If caption is not found or format is unsupported.
    """
    from youtube.Caption import download
    return download(
        id=caption_track_id_to_download,
        onBehalfOf=requesting_cms_user_id,
        onBehalfOfContentOwner=caption_content_owner_id,
        tfmt=caption_file_format,
        tlang=caption_translation_language
    )


def upload_new_caption_track(
    caption_resource_parts,
    new_caption_track_details,
    upload_as_cms_user_id=None,
    upload_for_content_owner_id=None,
    synchronize_with_video_timing=False
):
    """
    Inserts a new caption.

    Args:
        caption_resource_parts (str): The part parameter specifies the caption resource properties that the API response will include.
        new_caption_track_details (Dict[str, Any]): The snippet object contains details about the caption track.
        upload_as_cms_user_id (Optional[str]): The onBehalfOf parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the onBehalfOfContentOwner parameter. (Currently not used in implementation)
        upload_for_content_owner_id (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. (Currently not used in implementation)
        synchronize_with_video_timing (bool): The sync parameter indicates whether the caption track should be synchronized with the video. (Currently not used in implementation)

    Returns:
        Dict[str, Union[bool, Dict, str]]: A dictionary containing:
            - If part is valid:
                - success (bool): True if caption was successfully inserted
                - caption (Dict): The created caption object containing:
                    - id (str): Generated unique caption ID
                    - snippet (Dict): The provided snippet object

    Raises:
        ValueError: If 'caption_resource_parts' is not 'new_caption_track_details'.
    """
    from youtube.Caption import insert
    return insert(
        part=caption_resource_parts,
        snippet=new_caption_track_details,
        onBehalfOf=upload_as_cms_user_id,
        onBehalfOfContentOwner=upload_for_content_owner_id,
        sync=synchronize_with_video_timing
    )


def get_video_caption_tracks(
    caption_track_data_to_include,
    source_video_id,
    filter_by_caption_track_id=None,
    list_as_cms_user_id=None,
    list_for_content_owner_id=None
):
    """
    Retrieves a list of captions.

    Args:
        caption_track_data_to_include (str): Must be 'id' or 'snippet'.
        source_video_id (str): ID of the video to retrieve captions for.
        filter_by_caption_track_id (Optional[str]): Specific caption ID to filter results.
        list_as_cms_user_id (Optional[str]): CMS user making the request on behalf of the content owner. (Currently not used in implementation)
        list_for_content_owner_id (Optional[str]): Content owner the user is acting on behalf of. (Currently not used in implementation)

    Returns:
        Dict[str, List[Dict]]: A dictionary containing:
            - items (List[Dict]): A list of caption objects, each containing:
                - id (str): Caption ID
                - snippet (Dict): Caption metadata containing at least:
                    - videoId (str): The ID of the video the caption belongs to

    Raises:
        ValueError: If 'caption_track_data_to_include' is not valid.
    """
    from youtube.Caption import list
    return list(
        part=caption_track_data_to_include,
        videoId=source_video_id,
        id=filter_by_caption_track_id,
        onBehalfOf=list_as_cms_user_id,
        onBehalfOfContentOwner=list_for_content_owner_id
    )


def modify_video_caption_track(
    caption_parts_to_be_updated,
    caption_track_id_to_modify,
    updated_caption_track_details=None,
    update_as_cms_user_id=None,
    update_for_content_owner_id=None,
    resynchronize_with_video=None
):
    """
    Updates a caption resource.

    Args:
        caption_parts_to_be_updated (str): The part parameter specifies the caption resource properties that the API response will include.
        caption_track_id_to_modify (str): The id parameter identifies the caption track that is being updated.
        updated_caption_track_details (Optional[Dict[str, Any]]): The snippet object contains details about the caption track.
        update_as_cms_user_id (Optional[str]): The onBehalfOf parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the onBehalfOfContentOwner parameter. (Currently not used in implementation)
        update_for_content_owner_id (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. (Currently not used in implementation)
        resynchronize_with_video (Optional[bool]): The sync parameter indicates whether the caption track should be synchronized with the video. (Currently not used in implementation)

    Returns:
        Dict[str, Union[bool, str]]: A dictionary containing:
            - If caption exists and part is valid:
                - success (bool): True if caption was successfully updated
                - message (str): Confirmation message "Caption updated."
            - If caption not found:
                - error (str): "Caption not found"

    Raises:
        ValueError: If 'caption_parts_to_be_updated' is not 'updated_caption_track_details'.
    """
    from youtube.Caption import update
    return update(
        part=caption_parts_to_be_updated,
        id=caption_track_id_to_modify,
        snippet=updated_caption_track_details,
        onBehalfOf=update_as_cms_user_id,
        onBehalfOfContentOwner=update_for_content_owner_id,
        sync=resynchronize_with_video
    )
