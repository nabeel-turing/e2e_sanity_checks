# This file is automatically generated by the MutationBuilder

def search_for_videos(
    video_resource_data_parts,
    filter_by_chart_type=None,
    filter_by_video_ids=None,
    filter_by_my_rating=None,
    video_results_per_page=5,
    video_list_page_cursor=None,
    authenticated_user_id_for_rating=None
):
    """
    Retrieves a list of videos with optional filters.

    Args:
        video_resource_data_parts (str): The part parameter specifies the video resource properties that the API response will include.
        filter_by_chart_type (Optional[str]): Set this parameter to retrieve a list of videos that match the criteria specified by the chart parameter value.
        filter_by_video_ids (Optional[str]): The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved.
        filter_by_my_rating (Optional[str]): Set this parameter to retrieve a list of videos that match the criteria specified by the myRating parameter value.
        video_results_per_page (Optional[int]): The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        video_list_page_cursor (Optional[str]): The pageToken parameter identifies a specific page in the result set that should be returned.
        authenticated_user_id_for_rating (Optional[str]): The user_id parameter is required when using my_rating parameter.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - kind (str): Resource type ("youtube#videoListResponse").
            - items (List[Dict]): List of video resources matching the filters.
            - pageInfo (Dict): Pagination details:
                - totalResults (int): Total number of results returned.
                - resultsPerPage (int): Number of results per page.
            - error (str, optional): Error message if input validation fails.
    """
    from youtube.Videos import list
    return list(
        part=video_resource_data_parts,
        chart=filter_by_chart_type,
        id=filter_by_video_ids,
        my_rating=filter_by_my_rating,
        max_results=video_results_per_page,
        page_token=video_list_page_cursor,
        user_id=authenticated_user_id_for_rating
    )


def set_video_rating(video_identifier_to_rate, rating_value, acting_user_identifier=None):
    """
    Rates a video by adjusting like/dislike counts directly.

    Args:
        video_identifier_to_rate (str): The ID of the video to rate.
        rating_value (str): Must be one of: "like", "dislike", "none".
        acting_user_identifier (Optional[str]): Ignored (no user data is stored).


    Returns:
        Dict[str, Any]: A dictionary indicating success or error:
            - success (bool): True if rating was applied.
            - error (str, optional): Describes why the operation failed.
    """
    from youtube.Videos import rate
    return rate(
        video_id=video_identifier_to_rate,
        rating=rating_value,
        on_behalf_of=acting_user_identifier
    )


def flag_video_for_abuse(abusive_video_id, abuse_reason_code, reporting_content_owner_id=None):
    """
    Reports a video for abuse.

    Args:
        abusive_video_id (str): The ID of the video to report.
        abuse_reason_code (str): The ID of the reason for reporting the video.
        reporting_content_owner_id (Optional[str]): The ID of the content owner on whose behalf the report is being made.

    Returns:
        Dict[str, Any]: A dictionary indicating the result:
            - success (bool): True if the report was accepted.
            - error (str, optional): Describes any validation issues.
    """
    from youtube.Videos import report_abuse
    return report_abuse(
        video_id=abusive_video_id,
        reason_id=abuse_reason_code,
        on_behalf_of_content_owner=reporting_content_owner_id
    )


def remove_video_by_id(video_id_to_be_deleted, delete_for_content_owner_id=None):
    """
    Deletes a video.

    Args:
        video_id_to_be_deleted (str): The ID of the video to delete.
        delete_for_content_owner_id (Optional[str]): The ID of the content owner on whose behalf the deletion is being made.

    Returns:
        Dict[str, Any]: A dictionary indicating success or error:
            - success (bool): True if deletion was successful.
            - error (str, optional): Describes why the operation failed.
    """
    from youtube.Videos import delete
    return delete(id=video_id_to_be_deleted, on_behalf_of_content_owner=delete_for_content_owner_id)


def modify_video_details(
    video_parts_being_updated,
    updated_video_resource_body,
    modify_as_user_id=None,
    modify_for_content_owner_id=None
):
    """
    Updates a video.

    Args:
        video_parts_being_updated (str): The part parameter specifies the video resource properties that the API request is setting.
        updated_video_resource_body (Dict[str, Any]): The video resource to update.
        modify_as_user_id (Optional[str]): The ID of the user on whose behalf the request is being made.
        modify_for_content_owner_id (Optional[str]): The ID of the content owner on whose behalf the request is being made.

    Returns:
        Dict[str, Any]: The updated video resource or an error dictionary:
            - If successful: Updated video dictionary.
            - If error: Dictionary with an 'error' message.
    """
    from youtube.Videos import update
    return update(
        part=video_parts_being_updated,
        body=updated_video_resource_body,
        on_behalf_of=modify_as_user_id,
        on_behalf_of_content_owner=modify_for_content_owner_id
    )


def publish_new_video(video_details):
    """
    Uploads a video.
    Args:
        video_details (Dict[str, Any]): The video resource to upload.
            snippet (Dict[str, Any]): The snippet of the video to upload.
                channelId (str): The ID of the channel that the video is uploaded to.
                title (str): The title of the video.
                description (str): The description of the video.
                thumbnails (Dict[str, Any]): The thumbnails of the video.
                    default (Dict[str, Any]): The default thumbnail of the video.
                        url (str): The URL of the default thumbnail.
                        width (int): The width of the default thumbnail.
                        height (int): The height of the default thumbnail.
                    medium (Dict[str, Any]): The medium thumbnail of the video.
                        url (str): The URL of the medium thumbnail.
                        width (int): The width of the medium thumbnail.
                        height (int): The height of the medium thumbnail.
                    high (Dict[str, Any]): The high thumbnail of the video.
                        url (str): The URL of the high thumbnail.
                        width (int): The width of the high thumbnail.
                        height (int): The height of the high thumbnail.
                channelTitle (str): The title of the channel that the video is uploaded to.
                tags (List[str]): The tags of the video.
                categoryId (str): The ID of the category that the video belongs to.
            status (Dict[str, Any]): The status of the video to upload.
                uploadStatus (str): The upload status of the video. Must be one of ['processed', 'failed', 'rejected', 'uploaded', 'deleted'].
                privacyStatus (str): The privacy status of the video. Must be one of ['public', 'unlisted', 'private'].
                embeddable (bool): Whether the video is embeddable.
                madeForKids (bool): Whether the video is made for kids.

    Returns:
        Dict[str, Any]: The uploaded video resource:
            id (str): The ID of the video.
            snippet (Dict[str, Any]): The snippet of the video.
                publishedAt (str): The date and time the video was published.
                channelId (str): The ID of the channel that the video is uploaded to.
                title (str): The title of the video.
                description (str): The description of the video.
                thumbnails (Dict[str, Any]): The thumbnails of the video.
                    default (Dict[str, Any]): The default thumbnail of the video.
                        url (str): The URL of the default thumbnail.
                        width (int): The width of the default thumbnail.
                        height (int): The height of the default thumbnail.
                    medium (Dict[str, Any]): The medium thumbnail of the video.
                        url (str): The URL of the medium thumbnail.
                        width (int): The width of the medium thumbnail.
                        height (int): The height of the medium thumbnail.
                    high (Dict[str, Any]): The high thumbnail of the video.
                        url (str): The URL of the high thumbnail.
                        width (int): The width of the high thumbnail.
                        height (int): The height of the high thumbnail.
            status (Dict[str, Any]): The status of the video.
                uploadStatus (str): The upload status of the video.
                privacyStatus (str): The privacy status of the video.
                embeddable (bool): Whether the video is embeddable.
                madeForKids (bool): Whether the video is made for kids.
            statistics (Dict[str, Any]): The statistics of the video.
                viewCount (int): The view count of the video.
                likeCount (int): The like count of the video.
                commentCount (int): The comment count of the video.
                favoriteCount (int): The favorite count of the video.
    Raises:
        ValueError: If the 'video_details' parameter is not provided
                    or if the channel_id is not found in the database.
                    or if the category_id is not found in the database.
                    or if the channel_title does not match the channel title in the DB.
                    or if the upload status is not one of ['processed', 'failed', 'rejected', 'uploaded', 'deleted'].
                    or if the privacy status is not one of ['public', 'unlisted', 'private'].
        TypeError: If the 'video_details' parameter is not a dictionary.
        ValidationError: If the 'video_details' parameter is not of the correct structure as specified in the docstring.
    """
    from youtube.Videos import upload
    return upload(body=video_details)
