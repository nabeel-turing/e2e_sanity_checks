# This file is automatically generated by the MutationBuilder

def moderate_single_comment(
    target_comment_id_for_moderation,
    new_moderation_state,
    should_ban_author_on_rejection=False
):
    """
    Sets the moderation status of a comment.

    Args:
        target_comment_id_for_moderation (str): The ID of the comment to moderate.
        new_moderation_state (str): The new moderation status. Valid values:
            - "heldForReview"
            - "published"
            - "rejected"
        should_ban_author_on_rejection (bool): If True, bans the author of the comment when rejecting it. Default to false

    Returns:
        Dict[str, Any]: A dictionary containing:
            - If the comment is found and updated:
                - success (bool): True
                - comment (Dict): The updated comment object:
                    - id (str)
                    - snippet (Dict)
                    - moderationStatus (str)
                    - bannedAuthor (bool)
            - If an error occurs:
                - error (str): Error message
    """
    from youtube.Comment import set_moderation_status
    return set_moderation_status(
        comment_id=target_comment_id_for_moderation,
        moderation_status=new_moderation_state,
        ban_author=should_ban_author_on_rejection
    )


def remove_individual_comment(comment_identifier_to_remove):
    """
    Deletes a comment.

    Args:
        comment_identifier_to_remove (str): The ID of the comment to delete.

    Returns:
        Dict[str, bool | str]: A dictionary containing:
            - If the comment is successfully deleted:
                - success (bool): True
            - If the comment is not found:
                - error (str): Error message
    """
    from youtube.Comment import delete
    return delete(comment_id=comment_identifier_to_remove)


def post_new_comment(
    comment_response_data_parts,
    new_comment_content=None,
    initial_moderation_status='published',
    is_author_banned=False
):
    """
    Inserts a new comment.

    Args:
        comment_response_data_parts (str): The part parameter specifies the comment resource properties that the API response will include.
        new_comment_content (Optional[Dict]): The snippet object contains details about the comment.
        initial_moderation_status (str): The initial moderation status for the comment.
                          Defaults to "published".
        is_author_banned (bool): Whether the author of the comment is banned.
                      Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - If insertion is successful:
                - success (bool): True
                - comment (Dict): The newly created comment:
                    - id (str)
                    - snippet (Dict)
                    - moderationStatus (str)
                    - bannedAuthor (bool)
            - If an error occurs:
                - error (str): Error message
    """
    from youtube.Comment import insert
    return insert(
        part=comment_response_data_parts,
        snippet=new_comment_content,
        moderation_status=initial_moderation_status,
        banned_author=is_author_banned
    )


def retrieve_comments_for_thread(
    comment_data_fields,
    filter_by_specific_comment_id=None,
    fetch_replies_for_comment_id=None,
    comment_page_size_limit=None,
    comment_results_page_token=None,
    response_text_format=None
):
    """
    Retrieves a list of comments with optional filters.

    Args:
        comment_data_fields (str): The part parameter specifies the comment resource properties that the API response will include.
        filter_by_specific_comment_id (Optional[str]): The id parameter identifies the comment that is being retrieved.
        fetch_replies_for_comment_id (Optional[str]): The parentId parameter identifies the comment for which replies should be retrieved.
        comment_page_size_limit (Optional[int]): The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        comment_results_page_token (Optional[str]): The pageToken parameter identifies a specific page in the result set that should be returned. Currently not used !
        response_text_format (Optional[str]): The textFormat parameter specifies the format of the text in the comment. Currently not used !

    Returns:
        Dict[str, List[Dict] | str]: A dictionary containing:
        - If successful:
            - items (List[Dict]): A list of comment resources matching the filters:
                - id (str)
                - snippet (Dict)
                - moderationStatus (str)
                - bannedAuthor (bool)
        - If an error occurs:
            - error (str): Error message
    """
    from youtube.Comment import list
    return list(
        part=comment_data_fields,
        comment_id=filter_by_specific_comment_id,
        parent_id=fetch_replies_for_comment_id,
        max_results=comment_page_size_limit,
        page_token=comment_results_page_token,
        text_format=response_text_format
    )


def flag_comment_as_spam(comment_id_to_flag):
    """
    Marks a comment as spam.

    Args:
        comment_id_to_flag (str): The ID of the comment to mark as spam.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - If successful:
                - success (bool): True
                - comment (Dict): The updated comment object
            - If the comment is not found:
                - error (str): Error message
    """
    from youtube.Comment import mark_as_spam
    return mark_as_spam(comment_id=comment_id_to_flag)


def edit_existing_comment(
    comment_id_for_editing,
    updated_comment_content=None,
    updated_moderation_status=None,
    update_author_ban_status=None
):
    """
    Updates an existing comment.

    Args:
        comment_id_for_editing (str): The ID of the comment to update.
        updated_comment_content (Optional[Dict]): The snippet object contains details about the comment.
        updated_moderation_status (Optional[str]): The new moderation status for the comment.
        update_author_ban_status (Optional[bool]): Whether the author of the comment is banned.

    Returns:
        Dict[str, str]: A dictionary containing:
            - If successful:
                - success (str): A success message with comment ID.
            - If comment not found or no fields provided:
                - error (str): Error message.
    """
    from youtube.Comment import update
    return update(
        comment_id=comment_id_for_editing,
        snippet=updated_comment_content,
        moderation_status=updated_moderation_status,
        banned_author=update_author_ban_status
    )
