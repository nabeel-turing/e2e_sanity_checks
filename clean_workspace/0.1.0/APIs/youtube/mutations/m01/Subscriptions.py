# This file is automatically generated by the MutationBuilder

def add_new_channel_subscription(subscription_response_parts, new_subscription_details=None):
    """
    Inserts a new subscription.

    Args:
        subscription_response_parts(str): The part parameter specifies the subscription resource properties that the API response will include.
        new_subscription_details(Optional[Dict]): The snippet object contains details about the subscription.

    Returns:
        Dict[str, Optional[Dict]]: A dictionary containing:
            - If successful:
                - success (bool): True
                - subscription (Dict): The newly created subscription object:
                    - id (str): Unique subscription ID.
                    - snippet (Dict): Metadata about the subscription, including:
                        - channelId (str): The subscribing channel's ID.
                        - resourceId (Dict): The ID of the channel being subscribed to.
            - If an error occurs:
                - error (str): Error message (e.g., "Part parameter required").
    """
    from youtube.Subscriptions import insert
    return insert(part=subscription_response_parts, snippet=new_subscription_details)


def cancel_channel_subscription(subscription_identifier_to_cancel):
    """
    Deletes a subscription.

    Args:
        subscription_identifier_to_cancel(str): The ID of the subscription to delete.

    Returns:
        Dict[str, bool]: A dictionary containing:
            - If successful:
                - success (bool): True
            - If the subscription ID does not exist:
                - error (str): Error message indicating the subscription was not found.
    """
    from youtube.Subscriptions import delete
    return delete(subscription_id=subscription_identifier_to_cancel)


def retrieve_user_or_channel_subscriptions(
    subscription_data_to_include,
    filter_subscriptions_by_owning_channel_id=None,
    filter_by_specific_subscription_id=None,
    fetch_my_subscriptions_flag=False,
    fetch_my_recent_subscribers_flag=False,
    fetch_all_my_subscribers_flag=False,
    filter_subscriptions_to_a_channel_id=None,
    subscription_list_page_limit=None,
    subscription_request_as_owner_id=None,
    subscription_request_for_owner_channel_id=None,
    subscription_list_sort_order=None,
    subscription_list_page_marker=None
):
    """
    Retrieves a list of subscriptions with optional filters.

    Args:
        subscription_data_to_include(str): The part parameter specifies the subscription resource properties that the API response will include.
        filter_subscriptions_by_owning_channel_id(Optional[str]): The channelId parameter specifies a YouTube channel ID. The API will only return that channel's subscriptions.
        filter_by_specific_subscription_id(Optional[str]): The id parameter identifies the subscription that is being retrieved.
        fetch_my_subscriptions_flag(bool): The mine parameter can be used to instruct the API to only return subscriptions owned by the authenticated user.
        fetch_my_recent_subscribers_flag(bool): The myRecentSubscribers parameter can be used to instruct the API to only return subscriptions to the authenticated user's channel from the last 30 days.
        fetch_all_my_subscribers_flag(bool): The mySubscribers parameter can be used to instruct the API to only return subscriptions to the authenticated user's channel.
        filter_subscriptions_to_a_channel_id(Optional[str]): The forChannelId parameter specifies a YouTube channel ID. The API will only return subscriptions to that channel.
        subscription_list_page_limit(Optional[int]): The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        subscription_request_as_owner_id(Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value.
        subscription_request_for_owner_channel_id(Optional[str]): The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which the user is being added.
        subscription_list_sort_order(Optional[str]): The order parameter specifies the order in which the API response should list subscriptions.
        subscription_list_page_marker(Optional[str]): The pageToken parameter identifies a specific page in the result set that should be returned.

    Returns:
        Dict[str, List[Dict]]: A dictionary containing:
        - If successful:
            - items (List[Dict]): A list of subscription objects matching the filters:
                - id (str): The subscription ID.
                - snippet (Dict): Contains:
                    - channelId (str): The channel that owns the subscription.
                    - resourceId (Dict): The channel being subscribed to.
                        - kind (str): Type of the resource (e.g., "youtube#channel").
                        - channelId (str): ID of the subscribed channel.
        - If an error occurs:
            - error (str): Description of the issue (e.g., missing part parameter).
    """
    from youtube.Subscriptions import list
    return list(
        part=subscription_data_to_include,
        channel_id=filter_subscriptions_by_owning_channel_id,
        subscription_id=filter_by_specific_subscription_id,
        mine=fetch_my_subscriptions_flag,
        my_recent_subscribers=fetch_my_recent_subscribers_flag,
        my_subscribers=fetch_all_my_subscribers_flag,
        for_channel_id=filter_subscriptions_to_a_channel_id,
        max_results=subscription_list_page_limit,
        on_behalf_of_content_owner=subscription_request_as_owner_id,
        on_behalf_of_content_owner_channel=subscription_request_for_owner_channel_id,
        order=subscription_list_sort_order,
        page_token=subscription_list_page_marker
    )
