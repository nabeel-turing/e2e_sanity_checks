# This file is automatically generated by the MutationBuilder

def retrieve_channel_layout_sections(
    section_resource_properties,
    owning_channel_id=None,
    metadata_language_preference=None,
    specific_section_ids_list=None,
    fetch_my_channel_sections=False,
    cms_content_owner_id=None
):
    """
    Retrieves a list of channel sections with optional filters.

    Args:
        section_resource_properties (str): The part parameter specifies the channelSection resource properties that the API response will include.
              It should be a comma-separated string of valid parts (e.g., "id,snippet,contentDetails").
              At least one specified part must be valid. An empty string, a string consisting only of
              commas/whitespace, or a string with no valid parts after parsing will raise an error.
        owning_channel_id (Optional[str]): The channelId parameter specifies a YouTube channel ID.
                    The API will only return that channel's sections.
        metadata_language_preference (Optional[str]): The hl parameter instructs the API to retrieve localized resource metadata
            for a specific application language that the YouTube website supports.
        specific_section_ids_list (Optional[str]): The id parameter specifies a comma-separated list of the YouTube channel section ID(s)
                    for the resource(s) that are being retrieved. This is expected as a single string.
                    The original core logic appears to treat this as a single ID for filtering if provided,
                    rather than parsing a list of IDs from this string.
        fetch_my_channel_sections (bool): The mine parameter can be used to instruct the API to only return channel sections
              owned by the authenticated user.
        cms_content_owner_id (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's
                                     authorization credentials identify a YouTube CMS user who is acting
                                     on behalf of the content owner specified in the parameter value.

    Returns:
        Dict[str, List[Dict]]: A dictionary containing:
            - items: List of channel section objects matching the filter criteria.
            Each channel section object's structure depends on the 'part' parameter and API specifics. Example fields:
                - id: Unique section identifier
                - snippet: Section details (channelId, title, position, type)
                - contentDetails: Additional section content details.

    Raises:
        TypeError: If any argument is of an incorrect type (e.g., 'section_resource_properties' is not a string,
                   'fetch_my_channel_sections' is not a boolean).
        InvalidPartParameterError: If the 'section_resource_properties' parameter is an empty string, malformed (e.g., consists
                                   only of commas or whitespace), or if none of its comma-separated components
                                   are valid. Valid section_resource_properties components are "id", "snippet", "contentDetails".
        KeyError: If the database interaction leads to a KeyError (e.g., if `DB.get` raises it,
                  potentially indicating the database is not properly initialized or an essential
                  key is missing). This error is propagated from the underlying database access.
    """
    from youtube.ChannelSection import list
    return list(
        part=section_resource_properties,
        channel_id=owning_channel_id,
        hl=metadata_language_preference,
        section_id=specific_section_ids_list,
        mine=fetch_my_channel_sections,
        on_behalf_of_content_owner=cms_content_owner_id
    )


def remove_channel_layout_section(section_identifier_to_remove, acting_as_content_owner_id=None):
    """
    Deletes a channel section from the simulated database.

    Args:
        section_identifier_to_remove (str): The unique identifier of the channel section to delete.
        acting_as_content_owner_id (Optional[str]): Content owner ID for CMS user operations.

    Returns:
        Dict[str, bool]: A dictionary indicating the outcome.
            - success (bool): if the operation was successful.

    Raises:
        TypeError: If 'section_identifier_to_remove' is not a string.
        TypeError: If 'acting_as_content_owner_id' is provided and is not a string.
    """
    from youtube.ChannelSection import delete
    return delete(
        section_id=section_identifier_to_remove,
        on_behalf_of_content_owner=acting_as_content_owner_id
    )


def add_new_channel_layout_section(
    response_section_parts,
    new_section_details,
    request_as_content_owner_id=None,
    target_owner_channel_id=None
):
    """
    Inserts a new channel section.

    Args:
        response_section_parts (str): The part parameter specifies the channelSection resource properties that the API response will include.
        new_section_details (str): The snippet object contains details about the channel section.
        request_as_content_owner_id (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. Currently not used!
        target_owner_channel_id (Optional[str]): The onBehalfOfContentOwnerChannel parameter specifies the YouTube channel ID of the channel to which the user is being added. Currently not used!

    Returns:
        Dict[str, any]: A dictionary containing:
            on success
                - success (bool): Whether the operation was successful
                - channelSection (Dict): The newly created channel section object
            on error
                - error (str): Error message if the operation failed

    Raises:
        ValueError: If response_section_parts parameter is invalid or new_section_details is malformed
        KeyError: If the database is not properly initialized
    """
    from youtube.ChannelSection import insert
    return insert(
        part=response_section_parts,
        snippet=new_section_details,
        on_behalf_of_content_owner=request_as_content_owner_id,
        on_behalf_of_content_owner_channel=target_owner_channel_id
    )


def modify_channel_layout_section(
    updated_section_parts,
    section_id_to_modify,
    updated_section_details=None,
    cms_acting_content_owner_id=None
):
    """
    Updates a channel section.

    Args:
        updated_section_parts (str): The part parameter specifies the channelSection resource properties that the API response will include.
        section_id_to_modify (str): The ID of the channel section to update.
        updated_section_details (Optional[str]): The snippet object contains details about the channel section.
        cms_acting_content_owner_id (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. Currently not used !

    Returns:
        Dict[str, str]: A dictionary containing:
            - success (str): Success message if the update was successful
            - error (str): Error message if the update failed

    Raises:
        ValueError: If updated_section_parts parameter is invalid or updated_section_details is malformed
        KeyError: If the section_id_to_modify doesn't exist in the database
    """
    from youtube.ChannelSection import update
    return update(
        part=updated_section_parts,
        section_id=section_id_to_modify,
        snippet=updated_section_details,
        on_behalf_of_content_owner=cms_acting_content_owner_id
    )
