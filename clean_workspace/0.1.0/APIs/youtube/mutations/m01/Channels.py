# This file is automatically generated by the MutationBuilder

def find_channels_by_criteria(
    filter_by_guide_category_id=None,
    find_by_username=None,
    preferred_language_code=None,
    filter_by_channel_ids=None,
    show_managed_channels_only=None,
    channel_list_page_size=None,
    show_my_channels_only=None,
    show_channels_subscribed_to=None,
    act_as_content_owner_for_request=None
):
    """
    Retrieves a list of channels with optional filters.

    Args:
        filter_by_guide_category_id (Optional[str]): The categoryId parameter specifies a YouTube guide category ID.
                     The API response will only include channels from that category.
        find_by_username (Optional[str]): The forUsername parameter specifies a YouTube username.
                      The API response will only include the channel associated with that username.
        preferred_language_code (Optional[str]): The hl parameter instructs the API to retrieve localized resource metadata
            for a specific application language that the YouTube website supports.
        filter_by_channel_ids (Optional[str]): The id parameter specifies a comma-separated list of the YouTube channel ID(s)
                    for the resource(s) that are being retrieved.
        show_managed_channels_only (Optional[bool]): The managedByMe parameter can be used to instruct the API
                       to only return channels that the user is allowed to manage.
        channel_list_page_size (Optional[int]): The maxResults parameter specifies the maximum number of items
                     that should be returned in the result set. Must be between 1 and 50.
        show_my_channels_only (Optional[bool]): The mine parameter can be used to instruct the API to only return
              channels owned by the authenticated user.
        show_channels_subscribed_to (Optional[bool]): The mySubscribers parameter can be used to instruct the API
                        to only return channels to which the authenticated user has subscribed.
        act_as_content_owner_for_request (Optional[str]): The onBehalfOfContentOwner parameter indicates that the
                                   request's authorization credentials identify a YouTube CMS user
                                   who is acting on behalf of the content owner specified
                                   in the parameter value.

    Returns:
        Dict[str, List[Dict]]: A dictionary containing:
            - items: List of channel objects matching the filter criteria
            Each channel object contains:
                - id (str): Unique channel identifier
                - categoryId (str): Channel category
                - forUsername (str): Channel username
                - hl (str): Language setting
                - managedByMe (bool): Management status
                - mine (bool): Ownership status
                - mySubscribers (str): Subscription status
                - onBehalfOfContentOwner (str): CMS user information

    Raises:
        TypeError: If any input argument has an incorrect type.
        MaxResultsOutOfRangeError: If channel_list_page_size is provided and is not between 1 and 50 (inclusive).
        KeyError: If the database is not properly initialized or a critical key is missing
                  (propagated from DB access).
    """
    from youtube.Channels import list
    return list(
        category_id=filter_by_guide_category_id,
        for_username=find_by_username,
        hl=preferred_language_code,
        channel_id=filter_by_channel_ids,
        managed_by_me=show_managed_channels_only,
        max_results=channel_list_page_size,
        mine=show_my_channels_only,
        my_subscribers=show_channels_subscribed_to,
        on_behalf_of_content_owner=act_as_content_owner_for_request
    )


def register_new_channel(
    initial_channel_data_parts,
    new_channel_guide_category=None,
    new_channel_username=None,
    new_channel_language=None,
    predefined_channel_id=None,
    is_managed_by_creator=None,
    creation_response_limit=None,
    is_owned_by_creator=None,
    is_subscribed_by_creator=None,
    create_as_content_owner_id=None
):
    """
    Creates a new channel resource in the simulated database.

    Args:
        initial_channel_data_parts (str): The part parameter specifies the channel resource properties that the API response will include.
        new_channel_guide_category (Optional[str]): The categoryId parameter specifies a YouTube guide category ID for the new channel.
        new_channel_username (Optional[str]): The forUsername parameter specifies a YouTube username for the new channel.
        new_channel_language (Optional[str]): The hl parameter instructs the API to retrieve localized resource metadata for a specific application language that the YouTube website supports.
        predefined_channel_id (Optional[str]): The id parameter specifies the YouTube channel ID for the new channel. Currently not used!
        is_managed_by_creator (Optional[bool]): The managedByMe parameter indicates whether the channel is managed by the authenticated user.
        creation_response_limit (Optional[int]): The maxResults parameter specifies the maximum number of items that should be returned in the result set.
        is_owned_by_creator (Optional[bool]): The mine parameter indicates whether the channel is owned by the authenticated user.
        is_subscribed_by_creator (Optional[bool]): The mySubscribers parameter indicates whether the authenticated user has subscribed to the channel.
        create_as_content_owner_id (Optional[str]): The onBehalfOfContentOwner parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value.

    Returns:
        Union[Dict[str, Any], Dict[str, str]]: 
            A dictionary containing channel data or an error message.
            onsuccess(Dict[str, Any]): 
                - success (bool): Whether the operation was successful
                - channel (Dict[str, Any]): The newly created channel object with all properties
            onerror(Dict[str, str]): 
                - error (str): error message

    Raises:
        ValueError: If initial_channel_data_parts is empty or invalid
        KeyError: If the database is not properly initialized
    """
    from youtube.Channels import insert
    return insert(
        part=initial_channel_data_parts,
        category_id=new_channel_guide_category,
        for_username=new_channel_username,
        hl=new_channel_language,
        channel_id=predefined_channel_id,
        managed_by_me=is_managed_by_creator,
        max_results=creation_response_limit,
        mine=is_owned_by_creator,
        my_subscribers=is_subscribed_by_creator,
        on_behalf_of_content_owner=create_as_content_owner_id
    )


def edit_channel_properties(channel_identifier_for_edit, new_channel_property_values=None):
    """
    Updates metadata of a YouTube channel.

    Args:
        channel_identifier_for_edit (str): The unique identifier of the channel to update.
        new_channel_property_values (Dict[str, str | bool]): Key-value pairs of channel properties to update. Valid properties include:
            - categoryId (str): Channel category
            - forUsername (str): Channel username
            - hl (str): Language setting
            - managedByMe (bool): Management status
            - mine (bool): Ownership status
            - mySubscribers (bool): Subscription status
            - onBehalfOfContentOwner (str): CMS user information
    Returns:
        Dict[str, str]: A dictionary containing:
            onsuccess: 
                - success (str): Success Message
            onerror: 
                - error (str): Error Message

    Raises:
        ValueError: If no update parameters are provided.
        KeyError: If the channel_identifier_for_edit doesn't exist in the database.
    """
    from youtube.Channels import update
    return update(channel_id=channel_identifier_for_edit, properties=new_channel_property_values)
