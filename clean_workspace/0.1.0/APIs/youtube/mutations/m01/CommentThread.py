# This file is automatically generated by the MutationBuilder

def initiate_new_comment_discussion(
    thread_resource_parts,
    thread_metadata_details=None,
    initial_thread_comment_data=None
):
    """
    Inserts a new comment thread.

    Args:
        thread_resource_parts (str): The part parameter specifies the commentThread resource properties
                    that the API response will include. Currently, only "snippet" is supported.
        thread_metadata_details (Optional[Dict]): The snippet object contains details about the comment thread.
                                   This is treated as arbitrary thread metadata.
        initial_thread_comment_data (Optional[Dict]): The top-level comment for the thread.
                                            If provided, it's expected to be a dictionary
                                            potentially containing an 'id' (str) key.

    Returns:
        Dict[str, Dict]: A dictionary containing:
            - If insertion is successful:
                - success (bool): True
                - commentThread (Dict): The newly created comment thread object:
                    - id (str): Unique thread ID.
                    - snippet (Dict): Thread metadata.
                    - comments (List[str]): List of comment IDs in the thread.
    Raises:
        TypeError: If 'thread_resource_parts' is not a string.
        InvalidPartParameterError: If the 'thread_resource_parts' parameter is not "thread_metadata_details".
        pydantic.ValidationError: If 'thread_metadata_details' or 'initial_thread_comment_data' (when provided)
                                  do not conform to their expected dictionary structures
                                  (e.g., not a dictionary, or 'initial_thread_comment_data.id'
                                  is not a string if provided).
    """
    from youtube.CommentThread import insert
    return insert(
        part=thread_resource_parts,
        snippet=thread_metadata_details,
        top_level_comment=initial_thread_comment_data
    )


def query_comment_discussions(
    comment_thread_data_parts,
    specific_discussion_id=None,
    filter_by_channel_id=None,
    filter_by_video_id=None,
    fetch_all_channel_related_threads_id=None,
    discussion_search_query=None,
    comment_moderation_filter=None,
    discussion_sort_order=None,
    max_discussions_per_page=None,
    discussion_page_identifier=None,
    comment_text_output_format=None
):
    """
    Retrieves a list of comment threads with optional filters.

    Args:
        comment_thread_data_parts (str): The part parameter specifies the commentThread resource properties that the API response will include. Cannot be empty.
        specific_discussion_id (Optional[str]): The id parameter identifies the comment thread that is being retrieved.
        filter_by_channel_id (Optional[str]): The channelId parameter specifies a YouTube channel ID. The API will only return that channel's comment threads.
        filter_by_video_id (Optional[str]): The videoId parameter identifies the video for which the API should return comment threads.
        fetch_all_channel_related_threads_id (Optional[str]): The allThreadsRelatedToChannelId parameter specifies a YouTube channel ID. The API will return all comment threads related to that channel.
        discussion_search_query (Optional[str]): The searchTerms parameter specifies the search terms to use when filtering comment threads.
        comment_moderation_filter (Optional[str]): The moderationStatus parameter specifies the moderation status of comments to include in the response.
        discussion_sort_order (Optional[str]): The order parameter specifies the order in which the API response should list comment threads.
        max_discussions_per_page (Optional[int]): The maxResults parameter specifies the maximum number of items that should be returned in the result set. Must be a positive integer if provided.
        discussion_page_identifier (Optional[str]): The pageToken parameter identifies a specific page in the result set that should be returned.
        comment_text_output_format (Optional[str]): The textFormat parameter specifies the format of the text in the comments.

    Returns:
        Dict[str, List[Dict[str, Any]]]: A dictionary containing:
            - items (List[Dict[str, Any]]): List of matching commentThread objects:
                - id (str)
                - snippet (Dict)
                - comments (List[str])

    Raises:
        MissingPartParameterError: If the 'comment_thread_data_parts' parameter is not provided or is an empty string.
        InvalidMaxResultsError: If 'max_discussions_per_page' is provided but is not a positive integer.
        TypeError: If any parameter is of an incorrect type (e.g., 'comment_thread_data_parts' is not a string,
                   'max_discussions_per_page' is not an integer when provided, other string parameters
                   are not strings when provided).
        KeyError: If expected keys (e.g., 'commentThreads') are missing from the DB structure
                  (propagated from internal DB access).
    """
    from youtube.CommentThread import list
    return list(
        part=comment_thread_data_parts,
        thread_id=specific_discussion_id,
        channel_id=filter_by_channel_id,
        video_id=filter_by_video_id,
        all_threads_related_to_channel_id=fetch_all_channel_related_threads_id,
        search_terms=discussion_search_query,
        moderation_status=comment_moderation_filter,
        order=discussion_sort_order,
        max_results=max_discussions_per_page,
        page_token=discussion_page_identifier,
        text_format=comment_text_output_format
    )


def remove_comment_discussion(discussion_identifier_to_delete):
    """
    Deletes a comment thread by its ID.

    Args:
        discussion_identifier_to_delete (str): The ID of the comment thread to delete.

    Returns:
        Dict[str, str]: a dictionary with one of these keys:
            success: A message indicating successful deletion.
            error: An error message if the thread is not found.
    """
    from youtube.CommentThread import delete
    return delete(thread_id=discussion_identifier_to_delete)


def modify_comment_discussion(
    discussion_id_for_update,
    updated_thread_metadata=None,
    updated_comment_id_list=None
):
    """
    Updates an existing comment thread.

    Args:
        discussion_id_for_update (str): The ID of the comment thread to update.
        updated_thread_metadata (Optional[Dict]): The snippet object contains details about the comment thread.
        updated_comment_id_list (Optional[List[str]]): A list of comment IDs associated with the thread.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - If successful:
                - success (str): Success message with thread ID.
                - commentThread (Dict): The updated comment thread object:
                    - id (str)
                    - snippet (Dict)
                    - comments (List[str])
            - If an error occurs:
                - error (str): Error message (e.g., thread not found or no update data).
    """
    from youtube.CommentThread import update
    return update(
        thread_id=discussion_id_for_update,
        snippet=updated_thread_metadata,
        comments=updated_comment_id_list
    )
