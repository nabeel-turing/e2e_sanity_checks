# This file is automatically generated by the MutationBuilder

def get_all_table_metadata():
    """
    List all tables in the BigQuery database.

    This function lists all tables in the BigQuery database by loading the JSON DB file
    and processing its contents. It returns a list of dictionaries, where each dictionary
    represents a table. Each dictionary contains specific details for a table: its unique
    identifier ('table_id'), the identifier of the dataset containing it ('dataset_id'),
    the identifier of the project containing it ('project_id'), the table's type (e.g.,
    'TABLE', 'VIEW', 'MATERIALIZED_VIEW'), the Unix timestamp (milliseconds) of its
    creation, and an optional Unix timestamp (milliseconds) for its expiration.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary
            represents a table. Each dictionary contains the following keys:
            table_id (str): The unique identifier of the table (e.g., 'my_table').
            dataset_id (str): The identifier of the dataset containing this table.
            project_id (str): The identifier of the project containing this table.
            type (str): The type of the table (e.g., 'TABLE', 'VIEW', 'MATERIALIZED_VIEW').
            creation_time (int): Unix timestamp (milliseconds) when the table was created.
            expiration_time (Optional[int]): Unix timestamp (milliseconds) when the
                table expires. Null if no expiration set.

    Raises:
        ProjectNotFoundError: If the Google Cloud Project configured for the
            BigQuery client does not exist or is inaccessible.
        DatasetNotFoundError: If the operation is scoped to a dataset that does
            not exist (less common for a general list-tables unless a default
            dataset is assumed and not found).
    """
    from bigquery.bigqueryAPI import list_tables
    return list_tables()


def fetch_table_schema(specific_table_name):
    """
    Get the schema information for a specific table.

    This function retrieves detailed information for a specific table. The information
    returned includes identifiers for the table, its dataset, and project;
    timestamps for creation, last modification, and optional expiration;
    the table's type (e.g., 'TABLE', 'VIEW', 'MATERIALIZED_VIEW', 'EXTERNAL');
    an optional row count and size in bytes; and a detailed schema definition.
    The schema definition lists all fields (columns) with their names, data types,
    modes, and any nested fields for structured (RECORD) types.

    Args:
        specific_table_name (str): The name of the table for which to retrieve schema information.

    Returns:
        Dict[str, Any]: A dictionary containing detailed information about the specified table.
            It includes the following keys:
            'table_id' (str): The identifier of the table.
            'dataset_id' (str): The identifier of the dataset containing the table.
            'project_id' (str): The identifier of the project containing the table.
            'creation_time' (int): Unix timestamp (milliseconds) of table creation.
            'last_modified_time' (int): Unix timestamp (milliseconds) of last modification.
            'expiration_time' (Optional[int]): Unix timestamp (milliseconds) when the table
                expires. Null if no expiration.
            'type' (str): The type of the table (e.g., 'TABLE', 'VIEW',
                'MATERIALIZED_VIEW', 'EXTERNAL').
            'num_rows' (Optional[int]): The number of rows in the table. May be null
                for some table types or if metadata is stale.
            'size_bytes' (Optional[int]): The total size of the table data in bytes.
                May be null.
            'schema' (Dict[str, Any]): A dictionary representing the table schema.
                This dictionary typically contains the key:
                'fields' (List[Dict[str, Any]]): A list of dictionaries, where each
                    dictionary defines a field (column) schema. Each field schema
                    dictionary contains the following keys:
                    'name' (str): The name of the field (column).
                    'type' (str): The BigQuery data type of the field (e.g.,
                        'STRING', 'INTEGER', 'FLOAT', 'BOOLEAN', 'TIMESTAMP',
                        'DATE', 'RECORD', 'GEOGRAPHY').
                    'mode' (str): The mode of the field ('NULLABLE', 'REQUIRED',
                        'REPEATED'). Default is 'NULLABLE'.
                    'fields' (Optional[List[Dict[str, Any]]]): For 'RECORD' (struct)
                        type fields, this is a nested list of field schema
                        definitions, following the same structure as the parent
                        'fields' list items.

    Raises:
        TableNotFoundError: If the specified `specific_table_name` does not exist or is not
            accessible within the configured project/dataset.
        InvalidInputError: If the provided `specific_table_name` is malformed or does not
            conform to BigQuery naming conventions.
    """
    from bigquery.bigqueryAPI import describe_table
    return describe_table(table_name=specific_table_name)


def run_sql_statement(sql_command):
    """
    Execute a SELECT query on the BigQuery database.

    Args:
        sql_command (str): The SQL query to execute.

    Returns:
        Dict[str, List[Dict[str, Any]]]: Query results containing a list of row dictionaries.

    Raises:
        InvalidQueryError: If the SQL sql_command is malformed, contains syntax errors, references non-existent tables/columns, or is otherwise invalid.
    """
    from bigquery.bigqueryAPI import execute_query
    return execute_query(query=sql_command)
