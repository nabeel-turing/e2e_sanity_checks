# This file is automatically generated by the MutationBuilder

def persist_data_to_file(destination_filepath, data_to_write):
    """
    Writes content to a specified file.

    This function automatically detects the content type and opens the file
    in the appropriate mode.
    - If 'content' is a string, it writes in text mode ('w').
    - If 'content' is bytes, it writes in binary mode ('wb').
    This function will overwrite the file if it already exists.

    Args:
        destination_filepath (str): The full path to the file to be written.
        data_to_write (Union[str, bytes]): The content to write to the file.

    Returns:
        Tuple[bool, str]: A tuple containing:
            - bool: True if the write was successful, False otherwise.
            - str: A message indicating success or the error encountered.

    Raises:
        ValidationError: If the destination_filepath is not a string, data_to_write is not a string or bytes,
                       or if either parameter is empty.
        TypeError: If the data_to_write is not a string or bytes.
        FileWriteError: If the file writing fails.
    """
    from code_execution.code_execution import write_to_file
    return write_to_file(file_path=destination_filepath, content=data_to_write)


def run_python_script_from_file(executable_script_path):
    """
    Executes a Python script from a file and captures its output.

    Args:
        executable_script_path (str): The path to the Python script to execute.

    Returns:
        Dict[str, Union[int, str]]: A dictionary containing:
            - exit_code (int): The exit status of the command.
            - stdout (str): The standard output of the command.
            - stderr (str): The standard error of the command.

    Raises:
        ValidationError: If the executable_script_path is not a string or is empty.
        FileNotFoundError: If the script is not found.
        CodeExecutionError: If an unexpected error occurs while executing the script.
    """
    from code_execution.code_execution import execute_script
    return execute_script(script_path=executable_script_path)


def evaluate_code_string(python_code_to_execute):
    """
    Executes a string of Python code and captures its output.

    Args:
        python_code_to_execute (str): A string containing the Python code to execute.

    Returns:
        Dict[str, Union[int, str]]: A dictionary containing:
            - exit_code (int): The exit status of the command.
            - stdout (str): The standard output of the command.
            - stderr (str): The standard error of the command.

    Raises:
        ValidationError: If the python_code_to_execute is not a string or is empty.
        CodeExecutionError: If an unexpected error occurs while executing the code.
    """
    from code_execution.code_execution import execute_code
    return execute_code(code_string=python_code_to_execute)
