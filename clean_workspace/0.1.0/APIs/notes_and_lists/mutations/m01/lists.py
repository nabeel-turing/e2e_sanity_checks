# This file is automatically generated by the MutationBuilder

def make_new_list(new_list_title=None, initial_list_items=None, suggested_list_name=None):
    """
    Use this function to create a new list.

    This function handles the creation of a list with optional initial list items.
    The `list_name` argument should always be populated if the `elements_to_add`
    argument is non-empty. The list is always created in the user's query
    language unless suggested otherwise.

    Args:
        new_list_title (Optional[str]): Name of the list. If the user explicitly
            specifies a list name, use it. Otherwise, a suitable name must be
            generated based on the value of the `elements_to_add` argument and
            the overall prompt context. If `elements_to_add` is empty as well,
            then this argument should be left empty.
        initial_list_items (Optional[List[str]]): The items to include in the list.
            This can be initial list items provided by the user, or the result
            content of a `google_search` operation. The items to add to the list
            should always be in the user's query language unless suggested
            otherwise.
        suggested_list_name (Optional[str]): Required if the `list_name` argument is
            empty. If the user provides the items to add to the list but not a
            list name, a suitable name should always be generated, based on the
            items to add and the overall prompt context.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly created list. It contains the following keys:
            - id(str): The ID of the newly created list.
            - title(str): The name of the newly created list.
            - items(Dict[str, Dict[str, Any]]): A dictionary of the items in the newly created list. Each item is a dictionary with the item id as the key.
                -id(Dict[str, str]): A dictionary with the following keys:
                    - id(str): The ID of the item.
                    - content(str): The content of the item.
                    - created_at(str): The date and time the item was created. ISO 8601 format.
                    - updated_at(str): The date and time the item was last updated. ISO 8601 format.
            - created_at(str): The date and time the list was created. ISO 8601 format.
            - updated_at(str): The date and time the list was last updated. ISO 8601 format.
            - item_history(Dict[str, Any]): A dictionary containing the history of the items in the list.

    Raises:
        TypeError: If new_list_title, initial_list_items, or suggested_list_name are not of type str.
        ValueError: If new_list_title is empty and initial_list_items is empty.
        ValidationError: If the new_list_title and suggested_list_name are empty.
    """
    from notes_and_lists.lists import create_list
    return create_list(
        list_name=new_list_title,
        elements_to_add=initial_list_items,
        generated_title=suggested_list_name
    )


def append_items_to_list(
    target_list_id=None,
    list_search_query=None,
    list_name_to_find=None,
    search_synonyms=None,
    creation_fallback_name=None,
    new_items_for_list=None,
    is_multi_list_operation=False
):
    """
    Use this function to add items to an existing list.

    Args:
        target_list_id (Optional[str]): The ID of the list to add items to.
        list_search_query (Optional[str]): A search query to find the list.
        list_name_to_find (Optional[str]): The name of the list to find.
        search_synonyms (Optional[List[str]]): Synonyms to expand the search.
        creation_fallback_name (Optional[str]): The name of the list to be created if one doesn't exist.
        new_items_for_list (Optional[List[str]]): The items to add to the list. 
        is_multi_list_operation (Optional[bool]): Indicates if the intent is to modify multiple lists. Not implemented yet.
    Returns:
        Dict[str, Any]: A dictionary object containing the updated list.

    Raises:
        TypeError: If input arguments are not of the expected type.
        ValueError: If input arguments fail validation.
        TypeError: If input arguments are not of the expected type.
    """
    from notes_and_lists.lists import add_to_list
    return add_to_list(
        list_id=target_list_id,
        query=list_search_query,
        search_term=list_name_to_find,
        query_expansion=search_synonyms,
        list_name=creation_fallback_name,
        elements_to_add=new_items_for_list,
        is_bulk_mutation=is_multi_list_operation
    )
