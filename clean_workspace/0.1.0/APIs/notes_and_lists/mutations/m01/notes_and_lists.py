# This file is automatically generated by the MutationBuilder

def compose_new_note(note_heading=None, note_body_text=None, suggested_note_heading=None):
    """
    Use this function to create a new note.

    This function handles the creation of a note with initial content. The title
    argument must always be populated if text content is non-empty. The note is
    always created in the user's query language unless suggested otherwise.

    Args:
        note_heading (Optional[str]): Title of the note. If the user explicitly specifies
            a title, use it. Otherwise, a suitable title must be generated,
            based on the value of the `text_content` argument and the
            overall prompt context. If `text_content` is empty as well, then
            leave this argument empty.
        note_body_text (Optional[str]): The text content of the note. This can be
            initial content provided by the user, or the result content of a
            `google_search` operation. The text_content should always be in
            user's query language unless suggested otherwise.
        suggested_note_heading (Optional[str]): Required if the `title` argument is
            empty. If the user provides the text content of the note but not
            a title, a suitable title should be generated, based on the text
            content and overall prompt context.

    Returns:
        Dict[str, Any]: A dictionary containing the details of the newly created
            note, structured as a TextNote object. It contains the following keys:
            - note_id (str): The unique identifier of the note.
            - title (str): The title of the note.
            - text_content (str): The text content of the note.

    Raises:
        TypeError: If input arguments are not of the correct type.
        ValidationError: If input arguments fail validation.
    """
    from notes_and_lists.notes_and_lists import create_note
    return create_note(
        title=note_heading,
        text_content=note_body_text,
        generated_title=suggested_note_heading
    )


def display_all_entries(entry_type_filter=None):
    """
    Displays all notes or lists based on the provided hint.

    This function retrieves all notes and/or lists from the database and returns
    them in a structured format. The details of the items are provided through
    a side channel, eliminating the need to call show_notes_and_lists after this function.

    Args:
        entry_type_filter (Optional[str]): The type of item to show. Can be:
            - "LIST": Show only lists
            - "NOTE": Show only notes  
            - "ANY": Show both notes and lists
            - None: Show both notes and lists (default behavior)

    Returns:
        Dict[str, Any]: A NotesAndListsResult object containing:
            - notes (List[Dict[str, Any]]): List of note objects, each containing:
                - id (str): The unique identifier of the note
                - title (Optional[str]): The title of the note
                - content (str): The content of the note
                - created_at (str): The creation timestamp in ISO format
                - updated_at (str): The last update timestamp in ISO format
                - content_history (List[str]): List of previous content versions
            - lists (List[Dict[str, Any]]): List of list objects, each containing:
                - id (str): The unique identifier of the list
                - title (Optional[str]): The title of the list
                - items (Dict[str, Dict[str, Any]]): Dictionary of list items, each containing:
                    - id (str): The unique identifier of the item
                    - content (str): The content of the item
                    - created_at (str): The creation timestamp in ISO format
                    - updated_at (str): The last update timestamp in ISO format
                - created_at (str): The creation timestamp in ISO format
                - updated_at (str): The last update timestamp in ISO format
                - item_history (Dict[str, List[str]]): Dictionary of item content history

    Raises:
        TypeError: If entry_type_filter is not a string or None.
        ValueError: If entry_type_filter is not one of the valid values (LIST, NOTE, ANY).
    """
    from notes_and_lists.notes_and_lists import show_all
    return show_all(hint=entry_type_filter)


def display_specific_items(entry_identifiers_to_show=None, search_string_for_items=None):
    """
    Use this function to display specific notes or lists.

    This function performs an implicit search to find the relevant items, so you 
    don't need to call search_notes_and_lists before using it. You can either 
    specify exact item IDs or provide a search query to find relevant notes and lists.

    Args:
        entry_identifiers_to_show (Optional[List[str]]): The IDs of the notes and/or lists to show. 
            Use this if you know the IDs from previous interactions. Defaults to None.
        search_string_for_items (Optional[str]): A query to search for the notes and lists. Use this 
            if you don't know the IDs of the specific items. Defaults to None.

    Returns:
        Dict[str, Any]: A NotesAndListsResult object containing the details of the 
            specified notes and/or lists with the following structure:
            - notes (List[Dict[str, Any]]): List of matching notes containing:
                - id (str): The unique identifier of the note.
                - title (Optional[str]): The title of the note.
                - content (str): The content of the note.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
                - content_history (List[str]): List of previous content versions.
            - lists (List[Dict[str, Any]]): List of matching lists containing:
                - id (str): The unique identifier of the list.
                - title (Optional[str]): The title of the list.
                - items (Dict[str, Dict[str, Any]]): Dictionary of list items where 
                    each item contains:
                    - id (str): The unique identifier of the item.
                    - content (str): The content of the item.
                    - created_at (str): The creation timestamp in ISO 8601 format.
                    - updated_at (str): The last update timestamp in ISO 8601 format.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
                - item_history (Dict[str, List[str]]): Dictionary mapping item IDs 
                    to their content history.

    Raises:
        TypeError: If entry_identifiers_to_show is not a list of strings or None, or if search_string_for_items is not a string or None.
        ValueError: If no valid entry_identifiers_to_show or search_string_for_items is provided, or if specified entry_identifiers_to_show are not found.
    """
    from notes_and_lists.notes_and_lists import show_notes_and_lists
    return show_notes_and_lists(item_ids=entry_identifiers_to_show, query=search_string_for_items)


def retrieve_entries(
    specific_entry_ids=None,
    retrieval_query=None,
    exact_name_or_keyword=None,
    object_type_hint='ANY'
):
    """
    Use this function to retrieve notes or lists.

    The content of retrieved notes and lists can be empty. Do not call the 
    get_notes_and_lists again with the returned item IDs to retrieve the full content.
    This function can search by specific IDs, query terms, search terms, and can be 
    filtered by hint type.

    Args:
        specific_entry_ids (Optional[List[str]]): The IDs of the notes and lists to retrieve. 
            Use this if you know the IDs from previous interactions. Defaults to None.
        retrieval_query (Optional[str]): Query to be used for searching notes and lists items. 
            Defaults to None.
        exact_name_or_keyword (Optional[str]): The exact name of the list or note, or search terms 
            to find the lists or notes, only if it is not in NotesAndListsProvider values. 
            Do not use this if the user refers to a provider. This field should be populated 
            with the core identifying name of the note or list, even if a verb like "show," 
            "display," or "get" is present in the user's request. Defaults to None.
        object_type_hint (str): Type of the object to retrieve. Infer it from the user prompt. 
            If the user explicitly asks for lists or notes, use 'LIST' or 'NOTE' respectively. 
            Otherwise, use 'ANY'. Valid values are "NOTE", "LIST", or "ANY". Defaults to None.

    Returns:
        Dict[str, Any]: A NotesAndListsResult object containing the item_ids of the 
            retrieved notes and/or lists with the following structure:
            - notes (List[Dict[str, Any]]): List of retrieved notes containing:
                - id (str): The unique identifier of the note.
                - title (Optional[str]): The title of the note.
                - content (str): The content of the note.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
                - content_history (List[str]): List of previous content versions.
            - lists (List[Dict[str, Any]]): List of retrieved lists containing:
                - id (str): The unique identifier of the list.
                - title (Optional[str]): The title of the list.
                - items (Dict[str, Dict[str, Any]]): Dictionary of list items where 
                    each item contains:
                    - id (str): The unique identifier of the item.
                    - content (str): The content of the item.
                    - created_at (str): The creation timestamp in ISO 8601 format.
                    - updated_at (str): The last update timestamp in ISO 8601 format.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
                - item_history (Dict[str, List[str]]): Dictionary mapping item IDs 
                    to their content history.

    Raises:
        TypeError: If specific_entry_ids is not a list of strings or None, if retrieval_query is not a string or None, if exact_name_or_keyword is not a string or None, or if object_type_hint is not a string or None.
        ValueError: If specific_entry_ids is an empty list, if specific_entry_ids contains empty or whitespace-only strings, if retrieval_query is empty or whitespace-only, if exact_name_or_keyword is empty or whitespace-only, or if object_type_hint contains invalid values not in ["NOTE", "LIST", "ANY"].
    """
    from notes_and_lists.notes_and_lists import get_notes_and_lists
    return get_notes_and_lists(
        item_ids=specific_entry_ids,
        query=retrieval_query,
        search_term=exact_name_or_keyword,
        hint=object_type_hint
    )


def remove_entries(
    keyword_for_deletion=None,
    deletion_search_query=None,
    related_deletion_terms=None,
    ids_to_delete=None,
    single_id_to_delete=None
):
    """
    This can be used to delete lists and/or notes.

    This function allows deletion of notes and lists by searching through various 
    methods including search terms, queries, query expansion, or direct item IDs.

    Args:
        keyword_for_deletion (Optional[str]): The name of the lists or notes, or keywords to 
            search for the lists or notes. Defaults to None.
        deletion_search_query (Optional[str]): Optional query to be used for searching notes and lists 
            items. This should not be set if the title is not specified. Defaults to None.
        related_deletion_terms (Optional[List[str]]): Optional search query expansion using 
            synonyms or related terms. Defaults to None.
        ids_to_delete (Optional[List[str]]): The IDs of the notes and/or lists to delete. 
            If available from the context, use this instead of search_term. Defaults to None.
        single_id_to_delete (Optional[str]): The id of note or list which is to be deleted. 
            Defaults to None.

    Returns:
        Dict[str, Any]: A NotesAndListsResult object containing the IDs of the deleted 
            lists and/or notes with the following structure:
            - notes (List[Dict[str, Any]]): List of deleted notes containing:
                - id (str): The unique identifier of the note.
                - title (Optional[str]): The title of the note.
                - content (str): The content of the note.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
                - content_history (List[str]): List of previous content versions.
            - lists (List[Dict[str, Any]]): List of deleted lists containing:
                - id (str): The unique identifier of the list.
                - title (Optional[str]): The title of the list.
                - items (Dict[str, Dict[str, Any]]): Dictionary of list items where 
                    each item contains:
                    - id (str): The unique identifier of the item.
                    - content (str): The content of the item.
                    - created_at (str): The creation timestamp in ISO 8601 format.
                    - updated_at (str): The last update timestamp in ISO 8601 format.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
                - item_history (Dict[str, List[str]]): Dictionary mapping item IDs 
                    to their content history.

    Raises:
        TypeError: If keyword_for_deletion is not a string or None, if deletion_search_query is not a string or None, if related_deletion_terms is not a list of strings or None, if ids_to_delete is not a list of strings or None, or if single_id_to_delete is not a string or None.
        ValueError: If keyword_for_deletion is empty or whitespace-only, if deletion_search_query is empty or whitespace-only, if related_deletion_terms is an empty list, if related_deletion_terms contains empty or whitespace-only strings, if ids_to_delete is an empty list, if ids_to_delete contains empty or whitespace-only strings, or if single_id_to_delete is empty or whitespace-only.
        ValidationError: If parameters do not conform to the expected structure.
    """
    from notes_and_lists.notes_and_lists import delete_notes_and_lists
    return delete_notes_and_lists(
        search_term=keyword_for_deletion,
        query=deletion_search_query,
        query_expansion=related_deletion_terms,
        item_ids=ids_to_delete,
        item_id=single_id_to_delete
    )


def remove_item_from_list(
    list_search_keyword=None,
    list_finder_query=None,
    list_search_synonyms=None,
    parent_list_id=None,
    item_ids_to_remove=None
):
    """
    This can be used to delete items in a notes and lists list.

    This function allows deletion of specific items from lists by searching for lists 
    through various methods or by direct list ID, and then deleting specified items 
    by their IDs or through search criteria.

    Args:
        list_search_keyword (Optional[str]): The name of the list or keywords to search for 
            the list. Defaults to None.
        list_finder_query (Optional[str]): Optional query to be used for searching notes and lists 
            items. This should not be set if the title is not specified. Defaults to None.
        list_search_synonyms (Optional[List[str]]): Optional search query expansion using 
            synonyms or related terms. Defaults to None.
        parent_list_id (Optional[str]): The id of list which contains the items to be deleted. 
            Defaults to None.
        item_ids_to_remove (Optional[List[str]]): The ids of list items to be deleted. 
            Defaults to None.

    Returns:
        Dict[str, Any]: A ListResult object containing the updated list information 
            with the following structure:
            - id (str): The unique identifier of the list.
            - title (Optional[str]): The title of the list.
            - items (Dict[str, Dict[str, Any]]): Dictionary of remaining list items where 
                each item contains:
                - id (str): The unique identifier of the item.
                - content (str): The content of the item.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.
            - created_at (str): The creation timestamp in ISO 8601 format.
            - updated_at (str): The last update timestamp in ISO 8601 format.
            - item_history (Dict[str, List[str]]): Dictionary mapping item IDs 
                to their content history.
            - deleted_items (List[Dict[str, Any]]): List of deleted items containing:
                - id (str): The unique identifier of the deleted item.
                - content (str): The content of the deleted item.
                - created_at (str): The creation timestamp in ISO 8601 format.
                - updated_at (str): The last update timestamp in ISO 8601 format.

    Raises:
        TypeError: If list_search_keyword is not a string or None, if list_finder_query is not a string or None, if list_search_synonyms is not a list of strings or None, if parent_list_id is not a string or None, or if item_ids_to_remove is not a list of strings or None.
        ValueError: If list_search_keyword is empty or whitespace-only, if list_finder_query is empty or whitespace-only, if list_search_synonyms is an empty list, if list_search_synonyms contains empty or whitespace-only strings, if parent_list_id is empty or whitespace-only, if item_ids_to_remove is an empty list, if item_ids_to_remove contains empty or whitespace-only strings, or if no list is found matching the search criteria.
        ValidationError: If parameters do not conform to the expected structure.
    """
    from notes_and_lists.notes_and_lists import delete_list_item
    return delete_list_item(
        search_term=list_search_keyword,
        query=list_finder_query,
        query_expansion=list_search_synonyms,
        list_id=parent_list_id,
        elements_to_delete=item_ids_to_remove
    )


def rename_entry(
    entry_name_to_find=None,
    entry_finder_query=None,
    finder_query_expansion=None,
    id_of_item_to_rename=None,
    new_entry_title=None
):
    """
    This can be used to update the title of an existing list or note.

    This function updates the title of an existing list or note. 
    It can identify the target item using a search term, a more specific query, or a direct item ID.

    Args:
        entry_name_to_find (Optional[str]): The name of the note or list. or keywords to search for the note or list.
        entry_finder_query (Optional[str]): Optional query to be used for searching notes and lists items. This should not be set if the title is not specified.
        finder_query_expansion (Optional[List[str]]): Optional search query expansion using synonyms or related terms.
        id_of_item_to_rename (Optional[str]): The id of the note or list to be updated. If available from the context, use this instead of search_term.
        new_entry_title (Optional[str]): The updated title of the notes and lists item.

    Returns:
        Dict[str, Any]: A dictionary containing information of the updated lists and/or notes. It contains the following keys:
            - notes_and_lists_items (List[Dict[str, Any]]): A list of dictionaries containing information of the updated lists and/or notes. It contains the following keys:
                - item_id (str): The unique identifier of the list or note.
                - title (str): The title of the list or note.
                - note_content (Optional[Dict[str, str]]): The note content of the list or note. It contains the following keys:
                    - text_content (str): The text content of the note.
                - list_content (Optional[Dict[str, any]]): The list content of the list or note. It contains the following keys:
                    - items (List[Dict[str, any]]): The items of the list. It contains the following keys:
                        - id (str): The unique identifier of the item.
                        - content (str): The text content of the item.
                - deep_link_url (str): The deep link URL of the list or note. TODO: Add deep link url

    Raises:
        TypeError: If input arguments are not of the correct type.
        NotFoundError: If the note or list is not found.
        ValueError: If input arguments fail validation.
    """
    from notes_and_lists.notes_and_lists import update_title
    return update_title(
        search_term=entry_name_to_find,
        query=entry_finder_query,
        query_expansion=finder_query_expansion,
        item_id=id_of_item_to_rename,
        updated_title=new_entry_title
    )


def modify_list_element(
    containing_list_id,
    element_id_to_modify,
    new_element_content,
    list_lookup_term=None
):
    """
    Updates an existing item in a specified list.

    Args:
        containing_list_id (Optional[str]): The ID of the list containing the item.
        element_id_to_modify (str): The ID of the list item to update.
        new_element_content (str): The new content for the list item.
        list_lookup_term (Optional[str]): A search term to find the list if the ID is not known.

    Returns:
        Dict[str, Any]: A dictionary representing the updated list.

    Raises:
        ValueError: If required arguments are missing or invalid.
        ListNotFoundError: If the specified list cannot be found.
        ListItemNotFoundError: If the specified list item cannot be found.
    """
    from notes_and_lists.notes_and_lists import update_list_item
    return update_list_item(
        list_id=containing_list_id,
        list_item_id=element_id_to_modify,
        updated_element=new_element_content,
        search_term=list_lookup_term
    )


def add_text_to_note(
    note_search_query=None,
    note_search_synonyms=None,
    target_note_id=None,
    content_to_append=None
):
    """
    This can be used to add content to an existing note.

    This function adds specified text content to an existing note, which can be identified either by its ID or by a search query.

    Args:
        note_search_query (Optional[str]): Optional query to be used for searching notes and lists items. This should not be set if the title is not specified.
        note_search_synonyms (Optional[List[str]]): Optional search query expansion using synonyms or related terms.
        target_note_id (Optional[str]): The id of the note to which the text content will be appended.
        content_to_append (Optional[str]): Text content to be appended to the existing note.

    Returns:
        Dict[str, any]: A dictionary containing information in the updated note. It contains the following keys:
            - note_id (str): The unique identifier of the note.
            - title (str): The title of the note.
            - text_content (str): The text content of the note.

    Raises:
        TypeError: If input arguments are not of the correct type.
        NotFoundError: If the note is not found.
        ValidationError: If input arguments fail validation.
    """
    from notes_and_lists.notes_and_lists import append_to_note
    return append_to_note(
        query=note_search_query,
        query_expansion=note_search_synonyms,
        note_id=target_note_id,
        text_content=content_to_append
    )


def broadcast_notes_and_lists(sharing_configuration=None):
    """
    This function is not supported.

    Args:
        sharing_configuration (Optional[Dict[str, Any]]): An optional dictionary of parameters.

    Raises:
        UnsupportedOperationError: Always, as this feature is not implemented.
    """
    from notes_and_lists.notes_and_lists import share_notes_and_lists
    return share_notes_and_lists(options=sharing_configuration)


def modify_note_content(
    note_search_keyword=None,
    note_lookup_query=None,
    related_note_search_terms=None,
    id_of_note_to_update=None,
    new_text_for_note=None,
    modification_method=None
):
    """
    This can be used to update (add/append/prepend/insert to) an existing note content.

    This function updates an existing note's content. The note to be updated can be
    identified by a search term, a query, or a specific note ID. The content can be
    added, appended, prepended, or inserted based on the specified update type.

    Args:
        note_search_keyword (Optional[str]): The name of the note or keywords to search for the note.
        note_lookup_query (Optional[str]): Optional query to be used for searching notes.
        related_note_search_terms (Optional[List[str]]): Optional search query expansion using synonyms or related terms.
        id_of_note_to_update (Optional[str]): The id of the note to be updated. If available from the context, use this instead of search_term.
        new_text_for_note (Optional[str]): Text content to update the existing note with.
        modification_method (Optional[str]): The type of update operation to be performed on the note. 
            Possible values: "APPEND","PREPEND","REPLACE","MOVE","EDIT"

    Returns:
        Dict[str, Any]: A dictionary containing information about the updated note. It contains the following keys:
            - note_id (str): The unique identifier of the note.
            - title (str): The title of the note.
            - text_content (str): The text content of the note.

    Raises:
        KeyError: If the 'notes' collection is not found in the database for provided id_of_note_to_update.
        TypeError: If input arguments are not of the correct type.
        ValidationError: If input arguments fail validation.
        NotFoundError: If the note is not found.
    """
    from notes_and_lists.notes_and_lists import update_note
    return update_note(
        search_term=note_search_keyword,
        query=note_lookup_query,
        query_expansion=related_note_search_terms,
        note_id=id_of_note_to_update,
        text_content=new_text_for_note,
        update_type=modification_method
    )


def revert_last_action(operation_ids_to_reverse):
    """
    Reverts one or more previous operations based on their IDs.

    Args:
        operation_ids_to_reverse (List[str]): A list of operation IDs to be undone.

    Returns:
        str: A message confirming the successful reversal of the operations.

    Raises:
        ValueError: If `operation_ids_to_reverse` is empty or invalid.
        OperationNotFoundError: If an operation ID does not correspond to a logged operation.
    """
    from notes_and_lists.notes_and_lists import undo
    return undo(undo_operation_ids=operation_ids_to_reverse)
