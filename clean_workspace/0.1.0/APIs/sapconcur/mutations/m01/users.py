# This file is automatically generated by the MutationBuilder

def dispatch_user_certificate(
    target_user_identifier,
    voucher_category,
    monetary_value,
    associated_itinerary_ref=None,
    currency_iso_code='USD'
):
    """
    Sends a certificate to a user using the notification infrastructure.

    This function issues digital certificates to users for various business activities
    such as travel completion, expense approval, or training completion. Certificates
    are delivered via the existing notification system and stored as notifications
    with certificate-specific context data.

    Args:
        target_user_identifier (str): The unique identifier of the user to receive the certificate.
        voucher_category (str): Type of certificate to issue. Valid types are:
            - "travel_completion": Certificate for completed business travel
            - "expense_approval": Certificate for approved expense reports  
            - "training_completion": Certificate for completed training
            - "refund_voucher": Certificate for refund vouchers issued to users
            - "goodwill_gesture": Certificate for goodwill gestures provided to users
            - "gift_card": Certificate for gift cards issued to users
        monetary_value (float): Monetary amount associated with the certificate (e.g., trip cost, 
            approved expense amount, training cost). Must be non-negative.
        associated_itinerary_ref (Optional[str]): Trip identifier when certificate is related to a specific trip.
            Required for "travel_completion" certificates. Defaults to None.
        currency_iso_code (str): Currency code for the amount (e.g., "USD", "EUR", "GBP"). 
            Defaults to "USD".

    Returns:
        Dict[str, Any]: A dictionary containing:
            - message (str): Confirmation message about certificate delivery
            - notification_id (str): Unique identifier for the certificate notification
            - certificate_number (str): Unique certificate number for tracking
            - download_url (str): URL to access/download the certificate
            - issued_at (str): ISO timestamp when certificate was issued

    Raises:
        ValidationError: If input parameters fail validation (invalid target_user_identifier, voucher_category, 
            associated_itinerary_ref format, monetary_value, or currency_iso_code).
        UserNotFoundError: If the specified target_user_identifier does not exist in the system.
        TripNotFoundError: If associated_itinerary_ref is provided but the trip does not exist or does not 
            belong to the specified user.
    """
    from sapconcur.users import send_certificate
    return send_certificate(
        user_id=target_user_identifier,
        certificate_type=voucher_category,
        amount=monetary_value,
        trip_id=associated_itinerary_ref,
        currency=currency_iso_code
    )


def find_user_by_login(user_login_name):
    """
    Retrieves user details and booking record locators for a given username.

    This function searches for a user by their username and returns the
    user's data along with their booking record locators, payment methods,
    and gift certificates if a match is found.

    Args:
        user_login_name (str): The username to search for.

    Returns:
        Dict[str, Any]: A dictionary containing the user's data, with keys:
            - id (str): The unique ID of the user.
            - user_name (str): The username for the user.
            - given_name (str): The user's first name.
            - family_name (str): The user's last name.
            - email (str): The user's email address.
            - active (bool): The user's account status.
            - dob (Optional[str]): The date of birth of the user in YYYY-MM-DD format.
            - membership (str): The user's membership level (e.g., gold, silver, bronze).
            - booking_locators (List[str]): A list of booking record locators associated with the user's trips.
            - payment_methods (Dict[str, Dict[str, Any]]): Dictionary of payment methods with payment_id as key.
                Each payment method contains:
                - id (str): Payment method ID
                - source (str): always "credit_card" 
                - brand str: Card brand (e.g., "visa", "mastercard") 
                - last_four (str): Last four digits of card
            - certificates (List[Dict[str, Any]]): List of gift certificates, each containing:
                - id (str): Certificate/notification ID
                - certificate_number (str): Unique certificate number
                - amount (float): Certificate amount
                - currency (str): Currency code (e.g., "USD")
                - issued_date (str): ISO timestamp of when certificate was issued
                - type (str): "refund_voucher" or "goodwill_gesture"

    Raises:
        ValidationError: If the username is not a string or is empty.
        UserNotFoundError: If the user is not found.
    """
    from sapconcur.users import get_user_details
    return get_user_details(user_name=user_login_name)


def escalate_to_support_specialist(issue_description):
    """
    Transfer the user to a human agent, with a summary of the user's issue.

    Args:
        issue_description (str): A summary of the user's issue.

    Returns:
        str: A confirmation message.

    Raises:
        CustomValidationError: If the issue_description is not a non-empty string.
    """
    from sapconcur.users import transfer_to_human_agents
    return transfer_to_human_agents(summary=issue_description)
