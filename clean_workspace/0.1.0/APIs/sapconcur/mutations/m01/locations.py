# This file is automatically generated by the MutationBuilder

def retrieve_location_data(location_unique_identifier):
    """
    Retrieves details of a specific location by its ID or UUID.

    This function retrieves details of a specific location by its ID or UUID.
    It is used when the exact identifier of a Concur location is known.

    Args:
        location_unique_identifier (str): Required ID or UUID of the location.

    Returns:
        Dict[str, Any]: A dictionary containing detailed information about the specified location, with the following keys:
            id (str): Unique identifier (ID or UUID) for the location.
            name (str): The official name of the location.
            address_line1 (str): The primary street address line for the location.
            address_line2 (str): An optional secondary street address line (e.g., suite, floor, P.O. Box). May be empty.
            city (str): The city where the location is situated.
            state_province (str): The state, province, or region of the location.
            postal_code (str): The postal or ZIP code for the location's address.
            country_code (str): The two-letter ISO country code (e.g., 'US', 'CA', 'GB').
            latitude (float): The geographic latitude of the location in decimal degrees.
            longitude (float): The geographic longitude of the location in decimal degrees.
            is_active (bool): A boolean flag indicating if the location is currently active and operational.
            location_type (str): The type or category of the location (e.g., 'Office', 'Warehouse', 'Client Site', 'Store').
            timezone (str): The IANA timezone database name for the location's local time (e.g., 'America/New_York', 'Europe/London').
            created_at (str): Timestamp in ISO 8601 format indicating when the location record was created.
            updated_at (str): Timestamp in ISO 8601 format indicating when the location record was last updated.
            custom_fields (List[Dict[str, Any]]): A list of custom field objects associated with the location. Each object in the list typically contains:
                field_id (str): The unique identifier for the custom field definition.
                field_name (str): The display name of the custom field.
                value (Any): The value assigned to this custom field for this specific location instance. The type of value depends on the custom field's configuration.

    Raises:
        ValidationError: If the input `location_unique_identifier` is not a string, or if it is an empty string.
        NotFoundError: If no location with the specified ID is found.
    """
    from sapconcur.locations import get_location_by_id
    return get_location_by_id(id=location_unique_identifier)


def find_corporate_sites(
    page_cursor=None,
    records_per_page=None,
    location_name_query=None,
    city_filter=None,
    subdivision_code_filter=None,
    country_code_filter=None,
    admin_region_filter=None
):
    """
    Retrieves details of locations valid at the user's company with optional filtering parameters.

    This function retrieves details of locations valid at the user's company.
    It allows for finding Concur locations by various optional filter
    parameters such as name, city, country, country subdivision, or
    administrative region.

    Args:
        page_cursor (Optional[str]): The starting point of the next set of results after the specified limit. Defaults to None.
        records_per_page (Optional[int]): Number of records to return (default: 25). Defaults to None.
        location_name_query (Optional[str]): Common name associated with location (e.g., neighborhood, landmark, city). Defaults to None.
        city_filter (Optional[str]): City name of the location. Defaults to None.
        subdivision_code_filter (Optional[str]): ISO 3166-2 country subdivision code (e.g., US-WA). Defaults to None.
        country_code_filter (Optional[str]): 2-letter ISO 3166-1 country code (e.g., US). Defaults to None.
        admin_region_filter (Optional[str]): Administrative region (e.g., county). Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing the list of locations and pagination information, with the following keys:
            items (List[Dict[str, Any]]): A list of location dictionaries matching the query. Each location dictionary contains:
                id (str): Unique identifier for the location.
                name (str): Name of the location.
                address_line_1 (str): First line of the street address.
                address_line_2 (Optional[str]): Second line of the street address. Null if not provided or not applicable.
                city (str): City where the location is situated.
                country_subdivision_code (Optional[str]): Code for the state, province, or region (e.g., 'CA' for California, 'BY' for Bavaria). Null if not applicable.
                country_subdivision_name (Optional[str]): Name of the state, province, or region (e.g., 'California', 'Bavaria'). Null if not applicable.
                postal_code (Optional[str]): Postal or ZIP code for the location. Null if not applicable.
                country_code (str): ISO 3166-1 alpha-2 country code (e.g., 'US', 'DE').
                country_name (str): Full name of the country (e.g., 'United States', 'Germany').
                latitude (Optional[float]): Latitude of the location in decimal degrees. Null if not available.
                longitude (Optional[float]): Longitude of the location in decimal degrees. Null if not available.
                is_active (bool): Indicates if the location is currently active and usable for transactions.
                external_id (Optional[str]): An external identifier for the location, often used for mapping to records in other systems (e.g., ERP, HRIS). Null if not applicable.
            page_info (Dict[str, Any]): Pagination details for the list of locations, with the following keys:
                total_count (Optional[int]): The total number of locations matching the filter criteria. This field may be null or omitted if calculating the total count is too costly or not supported for the query.
                limit (int): The maximum number of items requested per page (echoes the input `limit` or server default).
                current_offset (str): The string offset or cursor that was used to retrieve the current page of results.
                next_offset (Optional[str]): The string offset or cursor to use to retrieve the next page of results. Null or omitted if this is the last page or if pagination is not applicable to the query result.

    Raises:
        ValidationError: If input arguments fail validation.
    """
    from sapconcur.locations import list_locations
    return list_locations(
        offset=page_cursor,
        limit=records_per_page,
        name=location_name_query,
        city=city_filter,
        countrySubdivision=subdivision_code_filter,
        country=country_code_filter,
        administrativeRegion=admin_region_filter
    )


def fetch_airport_city_map():
    """
    Retrieves a dictionary of all airports with their city.

    This function iterates through the locations in the database, filters for those
    with a location_type of 'airport', and returns them in a dictionary format.

    Returns:
        Dict[str, str]: A dictionary where keys are airport names and values are city names.
    """
    from sapconcur.locations import list_all_airports
    return list_all_airports()
