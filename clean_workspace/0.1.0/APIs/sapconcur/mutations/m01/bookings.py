# This file is automatically generated by the MutationBuilder

def revoke_reservation(supplier_name, booking_locator_id, owner_concur_login=None):
    """
    Cancels an existing booking.

    This function cancels an existing booking. By default, the OAuth consumer must be the booking owner.
    Travel Management Companies (TMCs) can cancel on behalf of users when registered with SAP Concur
    and possessing appropriate admin roles (Web Services Administrator or Can Administer).
    Booking records can only be updated by their original source.

    Args:
        supplier_name (str): Unique supplier identifier configured during SAP Concur application review. Must match the booking's Supplier Name exactly.
        booking_locator_id (str): Confirmation number of the booking to be canceled.
        owner_concur_login (Optional[str]): SAP Concur login ID of the booking owner (required only when canceling on behalf of another user). Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - success (bool): Indicates if the cancellation was successful
            - message (str): Human-readable message about the cancellation
            - booking_id (str): Unique identifier of the cancelled booking
            - booking_source (str): Supplier name of the cancelled booking
            - confirmation_number (str): Confirmation number of the cancelled booking
            - status (str): Current status of the booking (should be CANCELLED)
            - cancelled_at (str): ISO timestamp of when the booking was cancelled

    Raises:
        BookingNotFoundError: The booking specified by the combination of `booking_source` and `confirmation_number` could not be found in the system.
        ValidationError: If input arguments fail validation.
    """
    from sapconcur.bookings import cancel_booking
    return cancel_booking(
        bookingSource=supplier_name,
        confirmationNumber=booking_locator_id,
        userid_value=owner_concur_login
    )


def process_reservation_update(booking_data_payload, target_trip_id):
    """
    Creates or updates a booking in SAP Concur.

    This function creates a new booking or updates an existing one. It requires
    BookingSource and RecordLocator to be provided within the 'booking' dictionary.
    If an update operation results in a new confirmation number, any pre-existing
    booking associated with the old confirmation number must be explicitly cancelled
    by the caller.

    Args:
        booking_data_payload (Dict[str, Any]): A dictionary containing the booking details.
            BookingSource (str): The supplier's name. (Required)
            RecordLocator (str): Record locator for this booking (6+ alphanumeric characters). (Required)
            Passengers (List[Dict[str, Any]]): A list of passenger objects. (Required)
                NameFirst (str): First name of passenger. (Required)
                NameLast (str): Last name of passenger. (Required)
                NameMiddle (Optional[str]): Middle name of passenger.
                NamePrefix (Optional[str]): Name prefix (e.g., Mr., Ms.).
                NameRemark (Optional[str]): Additional name details.
                NameSuffix (Optional[str]): Name suffix (e.g., Jr., Sr.).
                NameTitle (Optional[str]): Professional title.
                TextName (Optional[str]): Full name as entered in booking tool.
            DateBookedLocal (Optional[str]): Booking creation date in local time (YYYY-MM-DDThh:mm:ss).
            FormOfPaymentName (Optional[str]): Name of the form of payment.
            FormOfPaymentType (Optional[str]): Type of the form of payment.
            TicketMailingAddress (Optional[str]): Mailing address for tickets.
            TicketPickupLocation (Optional[str]): Pickup location for tickets.
            TicketPickupNumber (Optional[str]): Confirmation number for ticket pickup.
            Segments (Optional[Dict[str, Any]]): Contains travel segments. Keys are segment types ('Car', 'Air', 'Hotel').
                Car (Optional[List[Dict[str, Any]]]): List of car rental segments.
                    Vendor (str): Vendor code for the car rental company.
                    VendorName (Optional[str]): Full name of the car rental company.
                    Status (Optional[str]): Booking status of the segment.
                    StartDateLocal (str): Start date of the car rental.
                    EndDateLocal (str): End date of the car rental.
                    ConfirmationNumber (Optional[str]): Confirmation number for the car rental.
                    StartLocation (str): Pickup location for the car.
                    EndLocation (str): Drop-off location for the car.
                    TotalRate (float): Total cost of the rental.
                    Currency (str): Currency code for the rate.
                    CarType (Optional[str]): Type of car rented.
                    Baggage (Optional[Dict[str, Any]]): Baggage allowance for the car rental.
                        count (int): Number of bags, defaults to 0.
                        weight_kg (int): Weight of the bags in kilograms, defaults to 0.
                        nonfree_count (int): Number of non-free bags, defaults to 0.
                Air (Optional[List[Dict[str, Any]]]): List of air travel segments.
                    Vendor (str): Airline vendor code.
                    VendorName (Optional[str]): Full name of the airline.
                    Status (Optional[str]): Booking status of the segment.
                    DepartureDateTimeLocal (str): Local departure date and time.
                    ArrivalDateTimeLocal (str): Local arrival date and time.
                    ConfirmationNumber (Optional[str]): Confirmation number for the flight.
                    DepartureAirport (str): Departure airport code.
                    ArrivalAirport (str): Arrival airport code.
                    FlightNumber (str): Flight number.
                    AircraftType (Optional[str]): Type of aircraft.
                    FareClass (Optional[str]): Fare class for the ticket(e.g., "economy", "business", "first", "premium_economy").
                    TotalRate (float): Total cost of the flight.
                    Currency (str): Currency code for the rate.
                    IsDirect (Optional[bool]): Whether the flight is direct.
                Hotel (Optional[List[Dict[str, Any]]]): List of hotel stay segments.
                    Vendor (str): Hotel vendor code.
                    VendorName (Optional[str]): Full name of the hotel.
                    Status (Optional[str]): Booking status of the segment.
                    CheckInDateLocal (str): Local check-in date.
                    CheckOutDateLocal (str): Local check-out date.
                    ConfirmationNumber (Optional[str]): Confirmation number for the hotel stay.
                    HotelName (Optional[str]): Name of the hotel.
                    Location (str): Location of the hotel.
                    RoomType (Optional[str]): Type of room booked.
                    MealPlan (Optional[str]): Meal plan included.
                    TotalRate (float): Total cost of the stay.
                    Currency (str): Currency code for the rate.
            Delivery (Optional[str]): Booking delivery method.
            Warnings (Optional[List[str]]): Warnings associated with the booking.
            insurance (Optional[str]): Status of the insurance 'yes' or 'no'.
        target_trip_id (str): Trip identifier from query parameter.

    Returns:
        Dict[str, Any]: A dictionary confirming the creation or update of the booking. It contains the following keys:
            booking_id (str): The unique identifier for this booking within the system.
            trip_id (str): The identifier of the trip this booking is associated with.
            booking_source (str): The source from which the booking was made (e.g., 'GDS', 'API').
            record_locator (str): The external record locator for the booking.
            status (str): The current status of the booking (e.g., 'CONFIRMED', 'PENDING_CONFIRMATION', 'UPDATED', 'CANCELLED').
            last_modified_timestamp (str): ISO 8601 timestamp indicating when the booking was last modified.
            segments (List[Dict[str, Any]]): A list of segments included in this booking. Each segment dictionary contains:
                segment_id (str): Unique identifier for the segment within the system.
                segment_type (str): Type of the segment (e.g., 'AIR', 'HOTEL', 'CAR').
                status (str): Confirmation status of the segment (e.g., 'CONFIRMED', 'WAITLISTED').
                confirmation_number (Optional[str]): Provider-specific confirmation number for the segment.
                details (Dict[str, Any]): Specific details for the segment type.
                    For 'AIR' segments:
                        Vendor (str): Airline vendor code.
                        VendorName (str): Full name of the airline.
                        DepartureDateTimeLocal (str): Local departure date and time.
                        ArrivalDateTimeLocal (str): Local arrival date and time.
                        DepartureAirport (str): Departure airport code.
                        ArrivalAirport (str): Arrival airport code.
                        FlightNumber (str): Flight number.
                        AircraftType (Optional[str]): Type of aircraft.
                        FareClass (str): Fare class for the ticket(e.g., "economy", "business", "first", "premium_economy").
                        TotalRate (float): Total cost of the flight.
                        Currency (str): Currency code for the rate.
                        IsDirect (bool): Whether the flight is direct.
                        Baggage ([Dict[str, Any]]): Baggage allowance for the flight.
                            count (int): Number of bags.
                            weight_kg (int): Weight of the bags in kilograms.
                            nonfree_count (int): Number of non-free bags.
                    For 'CAR' segments:
                        Vendor (str): Vendor code for the car rental company.
                        VendorName (str): Full name of the car rental company.
                        StartDateLocal (str): Start date of the car rental.
                        EndDateLocal (str): End date of the car rental.
                        StartLocation (str): Pickup location for the car.
                        EndLocation (str): Drop-off location for the car.
                        TotalRate (float): Total cost of the rental.
                        Currency (str): Currency code for the rate.
                        CarType (Optional[str]): Type of car rented.
                    For 'HOTEL' segments:
                        Vendor (str): Hotel vendor code.
                        VendorName (str): Full name of the hotel.
                        HotelName (str): Name of the hotel.
                        CheckInDateLocal (str): Local check-in date.
                        CheckOutDateLocal (str): Local check-out date.
                        Location (str): Location of the hotel.
                        RoomType (Optional[str]): Type of room booked.
                        MealPlan (Optional[str]): Meal plan included.
                        TotalRate (float): Total cost of the stay.
                        Currency (str): Currency code for the rate.
            passengers (List[Dict[str, Any]]): A list of passengers associated with this booking. Each passenger dictionary contains:
                passenger_id (str): Unique identifier assigned to the passenger for this booking within the system.
                first_name (str): First name of the passenger.
                last_name (str): Last name of the passenger.
            insurance (str): Status of the insurance 'yes' or 'no'.

    Raises:
        TripNotFoundError: If the specified 'target_trip_id' does not correspond to an existing, active trip.
        BookingConflictError: If there is a conflict attempting to update the booking_data_payload (e.g., trying to modify a finalized booking_data_payload, version mismatch, or the booking_data_payload is in a non-updatable state).
        ValidationError: If input arguments fail validation.
    """
    from sapconcur.bookings import create_or_update_booking
    return create_or_update_booking(booking=booking_data_payload, trip_id=target_trip_id)


def adjust_booking_baggage(
    reservation_supplier,
    booking_reference_id,
    new_total_bag_quantity,
    chargeable_bag_quantity,
    payment_instrument_id=None
):
    """
    Updates baggage allowance for a booking with payment processing for additional bags.

    Args:
        reservation_supplier (str): The supplier's name that must match the booking.
        booking_reference_id (str): Record locator for the booking.
        new_total_bag_quantity (int): Total number of bags for the booking.
        chargeable_bag_quantity (int): Number of bags that require payment.
        payment_instrument_id (Optional[str]): ID of the payment method to use. Required if adding paid bags.

    Returns:
        Dict[str, Any]: Updated booking details with baggage information.

    Raises:
        BookingNotFoundError: If the booking cannot be found with the provided source and confirmation number.
        ValidationError: If input validation fails or payment method is invalid.
    """
    from sapconcur.bookings import update_reservation_baggages
    return update_reservation_baggages(
        booking_source=reservation_supplier,
        confirmation_number=booking_reference_id,
        total_baggages=new_total_bag_quantity,
        nonfree_baggages=chargeable_bag_quantity,
        payment_id=payment_instrument_id
    )


def alter_booking_flight_details(
    originating_supplier,
    pnr_locator,
    new_fare_basis_code,
    updated_flight_legs,
    payment_source_identifier
):
    """
    Updates flight details for a booking, handling multiple flight segments and payment processing.

    Note: This function preserves existing baggage information on a segment-by-segment basis.
    For flights that match existing flight numbers and dates, the original baggage information
    is preserved. For new flights, baggage information from the first original segment is used
    as a fallback. To modify baggage information, use the update_reservation_baggages function.

    Args:
        originating_supplier (str): The supplier's name that must match the booking.
        pnr_locator (str): Record locator for the booking.
        new_fare_basis_code (str): Fare class for all flights (e.g., 'economy', 'business', 'first').
        updated_flight_legs (List[Dict[str, Any]]): List of flights to update or add.
            Each flight can contain the following fields:
            - flight_number (str): The flight number.
            - date (str): The date of the flight in ISO format.
            - origin (Optional[str]): The origin airport code. Defaults to 'JFK' if not provided.
            - destination (Optional[str]): The destination airport code. Defaults to 'LAX' if not provided.
            - price (Optional[float]): The price of the flight. If not provided, it will be calculated.
        payment_source_identifier (str): ID of the payment method to use for any price differences.

    Returns:
        Dict[str, Any]: A dictionary containing the updated booking details, including:
            - booking_id (str): The unique identifier for this booking.
            - booking_source (str): The source from which the booking was made.
            - confirmation_number (str): The external record locator for the booking.
            - status (str): The status of the update operation (e.g., "SUCCESS").
            - fare_class (str): The fare class for all flights.
            - last_modified (str): ISO timestamp of the last modification.
            - flights (List[Dict[str, Any]]): A list of the updated flight details, each containing:
                - flight_number (str): The flight number.
                - date (str): The date of the flight.
                - origin (str): The origin airport code.
                - destination (str): The destination airport code.
                - price (float): The price of the flight.
            - payment (Optional[Dict[str, Any]]): Payment details if there was a price difference, containing:
                - payment_id (str): The ID of the payment method used.
                - amount (float): The amount of the price difference.


    Raises:
        BookingNotFoundError: If the booking cannot be found with the provided source and confirmation number.
        ValidationError: If input validation fails, payment method is invalid, or flight is not found.
    """
    from sapconcur.bookings import update_reservation_flights
    return update_reservation_flights(
        booking_source=originating_supplier,
        confirmation_number=pnr_locator,
        fare_class=new_fare_basis_code,
        flights=updated_flight_legs,
        payment_id=payment_source_identifier
    )


def update_booking_travelers(data_source_supplier, reservation_code, new_passenger_list):
    """
    Updates all passenger information in a booking.

    Args:
        data_source_supplier (str): The supplier's name that must match the booking.
        reservation_code (str): Record locator for the booking.
        new_passenger_list (List[Dict[str, Any]]): List of passengers to update.
            Each passenger should contain:
            - name_first (str): First name
            - name_last (str): Last name
            Optional fields:
            - text_name (str): Full name as entered
            - pax_type (str): Passenger type (ADT/CHD/INF)
            - dob (str): Date of birth in YYYY-MM-DD format

    Returns:
        Dict[str, Any]: Updated booking details with passenger information.

    Raises:
        BookingNotFoundError: If the booking cannot be found with the provided source and confirmation number.
        ValidationError: If input validation fails or passenger count doesn't match.
    """
    from sapconcur.bookings import update_reservation_passengers
    return update_reservation_passengers(
        booking_source=data_source_supplier,
        confirmation_number=reservation_code,
        passengers=new_passenger_list
    )


def retrieve_booking_by_record_locator(booking_pnr_code):
    """
    Retrieves reservation details for a given record locator.

    This function finds a booking by its record locator and 
    returns the booking data if found.

    Args:
        booking_pnr_code (str): The record locator of the booking.

    Returns:
        Dict[str, Any]: A dictionary containing the raw booking data, with keys such as:
            - booking_id (str): The unique ID of the booking.
            - user_id (str): The user name of the user this booking belongs to.
            - booking_source (str): The source of the booking (e.g., supplier name).
            - record_locator (str): The confirmation number for the booking.
            - trip_id (str): The ID of the trip this booking belongs to.
            - status (str): The current status of the booking (e.g., 'CONFIRMED').
            - passengers (List[Dict]): A list of passenger details, each containing:
                - name_first (str): The first name of the passenger.
                - name_last (str): The last name of the passenger.
                - dob (str, optional): Date of birth in YYYY-MM-DD format.
            - segments (List[Dict]): A list of travel segments. For 'AIR' type, it can contain:
                - segment_id (str): Unique identifier for the segment.
                - type (str): Type of segment, e.g., 'AIR'.
                - status (str): Confirmation status, e.g., 'CONFIRMED'.
                - confirmation_number (str): Confirmation number for the flight.
                - start_date (str): Departure date and time in 'YYYY-MM-DD HH:MM:SS' format.
                - end_date (str): Arrival date and time in 'YYYY-MM-DD HH:MM:SS' format.
                - vendor (str): Airline vendor code.
                - vendor_name (str): Full name of the airline.
                - currency (str): Currency code for the rate, e.g., 'USD'.
                - total_rate (float): Total cost of the flight.
                - departure_airport (str): Departure airport code.
                - arrival_airport (str): Arrival airport code.
                - flight_number (str): Flight number.
                - aircraft_type (str): Type of aircraft.
                - fare_class (str): Fare class code for the ticket.
                - is_direct (bool): Whether the flight is direct.
                - baggage (Dict): Baggage allowance with 'count', 'weight_kg', 'nonfree_count'.
                - scheduled_departure_time (str): Scheduled departure time ('HH:MM:SS').
                - scheduled_arrival_time (str): Scheduled arrival time ('HH:MM:SS').
                - flight_schedule_data (Dict): Historical flight data keyed by date.
                - availability_data (Dict): Seat availability data keyed by date.
                - pricing_data (Dict): Pricing data keyed by date.
                - operational_status (Dict): Flight status by date ('landed', 'cancelled', 'flying', 'available').
                - estimated_departure_times (Dict): Estimated departure times keyed by date.
                - estimated_arrival_times (Dict): Estimated arrival times keyed by date.
            - last_modified (str): The ISO timestamp of the last modification.
            - insurance (str): Status of the insurance 'yes' or 'no'.
            - payment_history (List[Dict], optional): A list of payment transactions for the booking. Each entry contains:
                - payment_id (str): The ID of the payment method used.
                - amount (float): The transaction amount. Can be negative for refunds.
                - timestamp (str): The ISO timestamp of the transaction.
                - type (str): The type of transaction (e.g., 'booking', 'refund', 'baggage', 'flight_change').
            - date_booked_local (str): Booking creation date in local time (YYYY-MM-DDThh:mm:ss).
            - form_of_payment_name (str): Name of the form of payment.
            - form_of_payment_type (str): Type of the form of payment.
            - delivery (str): Booking delivery method.
            - warnings (List[str]): Warnings associated with the booking.

    Raises:
        ValidationError: If input arguments fail validation.
        BookingNotFoundError: If the booking specified by the record locator could not be found.
    """
    from sapconcur.bookings import get_reservation_details
    return get_reservation_details(record_locator=booking_pnr_code)
