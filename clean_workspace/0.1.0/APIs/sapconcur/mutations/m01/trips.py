# This file is automatically generated by the MutationBuilder

def query_trip_overviews(
    filter_from_date=None,
    filter_to_date=None,
    filter_created_since=None,
    filter_created_until=None,
    filter_last_updated=None,
    filter_by_booking_category=None,
    scope_user_id=None,
    with_paging_details=False,
    page_size=None,
    with_virtual_trips=None,
    with_cancelled_itineraries=False,
    with_guest_bookings=False
):
    """
    Retrieves trip summaries for a user or company.

    This function retrieves trip summaries based on specified filter criteria.
    It requires the ITINER scope for authorization. To access company-wide trip data
    (by setting `userid_value` to 'ALL'), the authenticated user must possess either
    'Web Services Administrator' or 'Can Administer' roles. All parameters for filtering
    are optional. It is important to note that this function is not recommended for
    extracting large volumes of historical data. For comprehensive company-wide data needs,
    using Itinerary v4 is advised.

    Args:
        filter_from_date (Optional[str]): UTC start date for trips (YYYY-MM-DD). Default: today - 30 days. Defaults to None.
        filter_to_date (Optional[str]): UTC end date for trips (YYYY-MM-DD). Default: today + 12 months. Defaults to None.
        filter_created_since (Optional[str]): UTC date for trips created on/after (YYYY-MM-DD). Defaults to None.
        filter_created_until (Optional[str]): UTC date for trips created on/before (YYYY-MM-DD). Defaults to None.
        filter_last_updated (Optional[str]): UTC last modified date/time of trips (format: date-time). Defaults to None.
        filter_by_booking_category (Optional[str]): Filter by booking type. Possible values: 'Air', 'Car', 'Dining', 'Hotel', 'Parking', 'Rail', 'Ride'. Defaults to None.
        scope_user_id (Optional[str]): User's login ID or 'ALL' for company-wide access. Defaults to None(company-wide access).
        with_paging_details (Optional[bool]): Include paging metadata in response. Defaults to False.
        page_size (Optional[int]): Number of items per page (default: 200 if page provided). Defaults to None.
        with_virtual_trips (Optional[int]): 1 to include virtual trips. Possible values: 0, 1. Defaults to None (treated as 0).
        with_cancelled_itineraries (Optional[bool]): Include trips with Canceled status. Defaults to False.
        with_guest_bookings (Optional[bool]): Include guest bookings. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing a list of trip summaries and optional metadata.

    Raises:
        ValidationError: If input arguments fail validation.
    """
    from sapconcur.trips import get_trip_summaries
    return get_trip_summaries(
        start_date=filter_from_date,
        end_date=filter_to_date,
        created_after_date=filter_created_since,
        created_before_date=filter_created_until,
        last_modified_date=filter_last_updated,
        booking_type=filter_by_booking_category,
        userid_value=scope_user_id,
        include_metadata=with_paging_details,
        items_per_page=page_size,
        include_virtual_trip=with_virtual_trips,
        include_canceled_trips=with_cancelled_itineraries,
        include_guest_bookings=with_guest_bookings
    )


def process_itinerary_submission(submitter_user_id, trip_details_payload):
    """
    Creates a new trip or updates an existing one based on the provided input.

    This function serves as a central point for trip management. If an `ItinLocator`
    (trip ID) is provided and exists, the corresponding trip will be updated.
    Otherwise, a new trip will be created. The update process is destructive;
    it replaces all existing bookings on the trip with the new ones provided.

    Args:
        submitter_user_id (UUID): The unique identifier of the user performing the action.
        trip_details_payload (Dict[str, Any]): A dictionary containing the trip details,
            which will be validated against the `CreateOrUpdateTripInput` model.
            Expected keys include:
            - `ItinLocator` (Optional[str]): Unique identifier for the trip. If provided and exists, updates the trip; otherwise creates a new one.
            - `TripName` (str): Name of the trip.
            - `StartDateLocal` (str): Start date of the trip in YYYY-MM-DD format.
            - `EndDateLocal` (str): End date of the trip in YYYY-MM-DD format.
            - `Comments` (Optional[str]): Additional comments about the trip.
            - `IsVirtualTrip` (bool): Whether this is a virtual trip.
            - `IsGuestBooking` (bool): Whether this is a guest booking.
            - `Bookings` (List[Dict]): List of booking dictionaries, each containing:
                - `RecordLocator` (str): Booking record locator.
                - `BookingSource` (str): Source of the booking.
                - `ConfirmationNumber` (str): Confirmation number for the booking.
                - `Status` (str): Status of the booking (e.g., "CONFIRMED").
                - `FormOfPaymentName` (str): Name of the payment method.
                - `FormOfPaymentType` (str): Type of payment method.
                - `Delivery` (str): Delivery method for the booking.
                - `Passengers` (List[Dict]): List of passenger information dictionaries.
                - `Segments` (Optional[Dict]): Optional segments containing Air, Car, or Hotel bookings.

    Returns:
        Dict[str, Any]: A dictionary representing the created or updated trip,
            formatted for the API response.

    Raises:
        custom_errors.UserNotFoundError: If the user with the given `submitter_user_id` is not found.
        custom_errors.TripNotFoundError: If an `ItinLocator` is provided but the trip is not found.
        PydanticValidationError: If the input data in `trip_details_payload` fails validation.
    """
    from sapconcur.trips import create_or_update_trip
    return create_or_update_trip(user_id=submitter_user_id, raw_trip_input=trip_details_payload)
