# This file is automatically generated by the MutationBuilder

def fetch_release_by_identifier(version_identifier):
    """
    Get a version by ID.

    Args:
        version_identifier (str): The ID of the version to get.

    Returns:
        Dict[str, Any]: A dictionary containing the version's information.
            - id (str): The ID of the version.
            - name (str): The name of the version.
            - description (str): The description of the version.
            - archived (bool): Whether the version is archived.
            - released (bool): Whether the version is released.
            - releaseDate (str): The release date of the version.
            - userReleaseDate (str): The user release date of the version.
            - project (str): The project of the version.
            - projectId (int): The project ID of the version.
    """
    from jira.VersionApi import get_version
    return get_version(ver_id=version_identifier)


def register_new_release(
    version_name='',
    version_summary='',
    is_archived=False,
    is_released=False,
    scheduled_release_date='',
    actual_release_date='',
    parent_project_key='',
    parent_project_id=0
):
    """
    Create a new version.

    Args:
        version_name (str): The name of the version.
        version_summary (str): The description of the version.
        is_archived (bool): Whether the version is archived.
        is_released (bool): Whether the version is released.
        scheduled_release_date (str): The release date of the version.
        actual_release_date (str): The user release date of the version.
        parent_project_key (str): The project of the version.
        parent_project_id (int): The project ID of the version.

    Returns:
        Dict[str, Any]: A dictionary containing the version's information.
            - created (bool): Whether the version was created.
            - version (dict): The version's information.
                - id (str): The ID of the version.
                - name (str): The name of the version.
                - description (str): The description of the version.
                - archived (bool): Whether the version is archived.
                - released (bool): Whether the version is released.
                - releaseDate (str): The release date of the version.
                - userReleaseDate (str): The user release date of the version.
                - project (str): The project of the version.
                - projectId (int): The project ID of the version.
    Raises:
        ValueError: If the required field 'version_name' is missing.
    """
    from jira.VersionApi import create_version
    return create_version(
        name=version_name,
        description=version_summary,
        archived=is_archived,
        released=is_released,
        release_date=scheduled_release_date,
        user_release_date=actual_release_date,
        project=parent_project_key,
        project_id=parent_project_id
    )


def remove_release_by_identifier(version_to_delete_id, new_fix_version_id=None, new_affected_version_id=None):
    """
    Delete a version.

    Args:
        version_to_delete_id (str): The ID of the version to delete.
        new_fix_version_id (str): The ID of the version to move the fixed issues to, currently not used.
        new_affected_version_id (str): The ID of the version to move the affected issues to, currently not used.

    Returns:
        Dict[str, Any]: A dictionary containing the version's information.
            - deleted (str): The ID of the version that was deleted.
            - moveFixIssuesTo (str): The ID of the version to move the fixed issues to.
            - moveAffectedIssuesTo (str): The ID of the version to move the affected issues to.
    Raises:
        ValueError: If the version does not exist.
    """
    from jira.VersionApi import delete_version
    return delete_version(
        ver_id=version_to_delete_id,
        move_fix_issues_to=new_fix_version_id,
        move_affected_issues_to=new_affected_version_id
    )


def get_release_ticket_statistics(release_identifier):
    """
    Get the related issue counts for a version.

    Args:
        release_identifier (str): The ID of the version to get the related issue counts for.

    Returns:
        Dict[str, Any]: A dictionary containing the related issue counts, currently returns 0 for both.
            - fixCount (int): The number of issues that reference this version as a fix version.
            - affectedCount (int): The number of issues that reference this version as an affected version.
    """
    from jira.VersionApi import get_version_related_issue_counts
    return get_version_related_issue_counts(ver_id=release_identifier)
