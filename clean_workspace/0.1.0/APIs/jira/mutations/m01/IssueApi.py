# This file is automatically generated by the MutationBuilder

def register_new_ticket(issue_attributes):
    """
    Create a new issue in Jira.

    This method creates a new issue with the specified fields. The issue will be
    assigned a unique ID and stored in the system.

    Args:
        issue_attributes (Dict[str, Any]): A dictionary containing the issue fields. Required fields include:
            - project (str): The project key the issue belongs to
            - summary (str): A brief description of the issue
            - description (str): A detailed description of the issue
            - issuetype (str): The type of issue
            - priority (str): The priority of the issue
            - status (str): The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)
            - assignee (Dict[str, str]): The user assigned to the issue in dictionary format. Example: {"name": "jdoe"}
                - name (str): The assignee's username (e.g., 'jdoe')

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The unique identifier for the new issue
            - fields (Dict[str, Any]): The fields of the created issue
                - project (str): The project key
                - summary (str): Issue summary
                - description (str): Issue description
                - priority (str): The priority of the issue
                - status (str): The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)
                - assignee (Dict[str, str]): Assignee information
                    - name (str): The assignee's username (e.g., 'jdoe')
                - issuetype (str): The type of issue


    Raises:
        EmptyFieldError: If the issue_attributes dictionary is empty
        MissingRequiredFieldError: If the issue_attributes dictionary is missing required issue_attributes
    """
    from jira.IssueApi import create_issue
    return create_issue(fields=issue_attributes)


def find_ticket_by_unique_id(ticket_identifier):
    """
    Retrieve a specific issue by its ID.

    This method returns detailed information about a specific issue
    identified by its unique ID, including any attachments associated with the issue.

    Args:
        ticket_identifier (str): The unique identifier of the issue to retrieve.

    Returns:
        Dict[str, Any]: A dictionary containing issue details:
            - id (str): The unique identifier for the issue.
            - fields (Dict[str, Any]): The fields of the issue, including:
                - project (str): The project key.
                - summary (str): Issue summary.
                - description (str): Issue description.
                - priority (str): The priority of the issue.
                - status (str): The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)
                - assignee (Dict[str, str]): Assignee information in dictionary format. Example: {"name": "jdoe"}
                    - name (str): The assignee's username (e.g., 'jdoe')
                - issuetype (str): The type of issue
                - attachments (List[Dict[str, Any]]): List of attachment metadata, each containing:
                    - id (int): The unique attachment identifier
                    - filename (str): Original filename of the attachment
                    - fileSize (int): File size in bytes
                    - mimeType (str): MIME type of the file
                    - created (str): ISO 8601 timestamp when attachment was uploaded
                    - checksum (str): SHA256 checksum for file integrity verification
                    - parentId Optional(str): The ID of the issue this attachment belongs to
                    - content (str): Data of the attachment
                - due_date (Optional[str]): The due date of the issue, if present.
                - comments (Optional[List[str]]]): A list of comments to add to the issue.


    Raises:
        TypeError: If ticket_identifier is not a string.
        ValueError: If the issue does not exist (this error originates from the function's core logic).
        ValidationError: If the issue data or attachments(from list_issue_attachments) are invalid.
        NotFoundError: If the attachment with the specified ID does not exist (from list_issue_attachments).
    """
    from jira.IssueApi import get_issue
    return get_issue(issue_id=ticket_identifier)


def modify_ticket_details(ticket_id_to_update, updated_ticket_data=None):
    """
    Update an existing issue.

    This method allows updating the fields of an existing issue.
    Only the provided fields will be updated.

    Args:
        ticket_id_to_update (str): The unique identifier of the issue to update.
        updated_ticket_data (Optional[Dict[str, Any]]): The fields to update. Can include any valid
            issue field. Expected structure if provided:
            - summary (Optional[str]): The summary of the issue
            - description (Optional[str]): The description of the issue
            - priority (Optional[str]): The priority of the issue
            - status (Optional[str]): The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)
            - assignee (Optional[Dict[str, str]]): Assignee information in dictionary format. Example: {"name": "jdoe"}
                    - name (str): The assignee's username (e.g., 'jdoe')
            - issuetype (Optional[str]): The type of issue
            - project (Optional[str]): The project key
            - due_date (Optional[str]): The due date of the issue
            - comments (Optional[List[str]]]): A list of comments to add to the issue.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - updated (bool): True if the issue was successfully updated
            - issue (Dict[str, Any]): The updated issue object
                - id (str): The unique identifier for the issue
                - fields (Dict[str, Any]): The fields of the issue, including:
                    - project (str): The project key
                    - summary (str): Issue summary
                    - description (str): Issue description
                    - priority (str): The priority of the issue
                    - status (str): The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)
                    - assignee (Dict[str, str]): Assignee information
                        - name (str): The assignee's username (e.g., 'jdoe')
                    - issuetype (str): The type of issue
                    - due_date (Optional[str]): The due date of the issue
                    - comments (Optional[List[str]]]): A list of comments to add to the issue.

    Raises:
        TypeError: If 'ticket_id_to_update' is not a string or 'updated_ticket_data' is not a dictionary.
        ValueError: If the issue with 'ticket_id_to_update' is not found.
        ValidationError: If 'updated_ticket_data' is provided and does not conform to the
                        IssueFieldsUpdateModel structure (e.g., invalid field types
                        or incorrect assignee structure).
    """
    from jira.IssueApi import update_issue
    return update_issue(issue_id=ticket_id_to_update, fields=updated_ticket_data)


def remove_ticket_by_identifier(ticket_to_delete_id, include_subtask_removal=False):
    """
    Delete an existing issue.

    This method permanently removes an issue from the system.
    Optionally, its subtasks can be deleted as well.

    Args:
        ticket_to_delete_id (str): The unique identifier of the issue to delete.
        include_subtask_removal (bool): Whether to delete subtasks. Defaults to False.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - deleted (str): The ID of the deleted issue.
            - deleteSubtasks (str): The value of the delete_subtasks parameter (True or False).

    Raises:
        TypeError: If ticket_to_delete_id is not a string or if include_subtask_removal is not a boolean.
        ValueError: If the issue does not exist or if subtasks exist and include_subtask_removal is False.
    """
    from jira.IssueApi import delete_issue
    return delete_issue(issue_id=ticket_to_delete_id, delete_subtasks=include_subtask_removal)


def batch_remove_tickets(ticket_id_list):
    """
    Delete multiple issues in bulk.

    This method allows deleting multiple issues in a single operation.
    The operation will continue even if some issues cannot be deleted.

    Args:
        ticket_id_list (List[str]): A list of issue IDs to delete

    Returns:
        Dict[str, Any]: A dictionary containing:
            - deleted (List[str]): List of successfully deleted issue messages
            - errors (List[str]): List of error messages for failed deletions
    """
    from jira.IssueApi import bulk_delete_issues_bulk
    return bulk_delete_issues_bulk(issue_ids=ticket_id_list)


def delegate_ticket_to_person(ticket_id_for_assignment, designated_user):
    """
    Assign an issue to a user.

    This method assigns an issue to a specific user. The assignee can be
    a user or can be set to null to unassign the issue (handled by how 'assignee' dict is populated).

    Args:
        ticket_id_for_assignment (str): The unique identifier of the issue to assign.
        designated_user (Dict): The assignee information. Must contain:
            - name (str): The assignee's username (e.g., 'jdoe').

    Returns:
        Dict[str, Any]: A dictionary containing:
            - assigned (bool): True if the issue was successfully assigned (if issue exists).
            - issue (Dict[str, Any]): The updated issue object if successful.
                - id (str): The unique identifier for the issue.
                - fields (Dict[str, Any]): The fields of the issue, including:
                    - project (str): The project key
                    - summary (str): Issue summary
                    - description (str): Issue description
                    - priority (str): The priority of the issue
                    - status (str): The status of the issue. Example: (Open, Resolved, Closed, Completed, In Progress)
                    - assignee (Dict[str, str]): Assignee information
                        - name (str): The assignee's username (e.g., 'jdoe')
                    - issuetype (str): The type of issue
    Raises:
        TypeError: If 'ticket_id_for_assignment' is not a string or 'designated_user' is not a dictionary.
        pydantic.ValidationError: If 'designated_user' dictionary does not conform to the required structure (e.g., missing 'name', or 'name' is not a string).
    """
    from jira.IssueApi import assign_issue
    return assign_issue(issue_id=ticket_id_for_assignment, assignee=designated_user)


def execute_batch_ticket_actions(ticket_modification_list):
    """
    Perform bulk operations on multiple issues.

    This method allows performing operations on multiple issues in a single
    request. The operations are processed in the order they are provided.

    Args:
        ticket_modification_list (List[Dict[str, Any]]): A dictionary containing the bulk operations to perform.


    Returns:
        Dict[str, Any]: A dictionary containing:
            - bulkProcessed (bool): True if the bulk operation was processed
            - updatesCount (int): The number of updates processed

    Raises:
        ValueError: If the ticket_modification_list dictionary is empty
    """
    from jira.IssueApi import bulk_issue_operation
    return bulk_issue_operation(issueUpdates=ticket_modification_list)


def find_tickets_for_selection_ui(search_term=None, active_jql_filter=None):
    """
    Search for issues based on a query string and/or JQL.

    This method searches for issues based on a text query string and/or JQL (Jira Query Language).
    The search is case-insensitive for text queries. JQL filtering is applied first, then text filtering.

    Args:
        search_term (Optional[str]): The text query string to search for in issue summaries and IDs.
                               If None, no text filtering will be applied.
                               An empty string "" will generally match all issues.
        active_jql_filter (Optional[str]): JQL expression to filter issues before applying text search.
                                   If provided, only issues matching the JQL will be considered.
                                   Supports all standard JQL operators and functions.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - issues (List[str]): List of issue IDs that match the query and/or JQL.

    Raises:
        TypeError: If 'search_term' or 'active_jql_filter' are provided and are not strings.
        ValueError: If 'active_jql_filter' contains invalid JQL syntax.
    """
    from jira.IssueApi import issue_picker
    return issue_picker(query=search_term, currentJQL=active_jql_filter)


def fetch_ticket_creation_schemas(project_identifiers_filter=None, ticket_type_names_filter=None):
    """
    Get the create metadata for projects and issue types.

    This method returns metadata about projects and their available issue types
    that can be used for creating new issues. The response can be filtered by
    project keys and issue type names.

    Args:
        project_identifiers_filter (Optional[str]): Project keys to filter the results. 
            If None, all projects are returned. This parameter accepts a 
            comma-separated list of project keys. Specifying a project 
            that does not exist is not an error, but it will not be in the results.
        ticket_type_names_filter (Optional[str]): Issue type names to filter the results.
            If None, all issue types are returned. This parameter accepts a 
            comma-separated list of issue type names. Specifying an issue type 
            that does not exist is not an error.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - projects (List[Dict[str, Any]]): List of projects with their metadata
                - key (str): The project key
                - name (str): The project name
                - lead (str): The project lead username
                - issueTypes (List[Dict[str, Any]]): List of available issue types for this project                    
                    - name (str): The issue type name

    Raises:
        TypeError: If project_identifiers_filter or ticket_type_names_filter are provided and are not strings.
    """
    from jira.IssueApi import get_create_meta
    return get_create_meta(
        projectKeys=project_identifiers_filter,
        issueTypeNames=ticket_type_names_filter
    )
