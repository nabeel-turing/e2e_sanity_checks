# This file is automatically generated by the MutationBuilder

def add_project_module(target_project_key, component_name, component_details=None):
    """
    Create a new component in a Jira project.

    This method creates a new component within a specified project. Components
    are used to group issues within a project and can be assigned to specific
    team members.

    Args:
        target_project_key (str): The key of the project where the component will be created.
            Must be a non-empty string.
        component_name (str): The name of the component.
            Must be a non-empty string with a maximum length of 255 characters.
        component_details (Optional[str]): A description of the component's purpose.
            Maximum length is 1000 characters. None if not provided.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - id (str): The unique identifier for the component
            - project (str): The project key
            - name (str): The component name
            - description (str): The component description

    Raises:
        TypeError: If 'target_project_key' or 'component_name' is not a string, or if 'component_details'
                   is provided and is not a string.
        EmptyInputError: If 'target_project_key' or 'component_name' is an empty string.
        ProjectNotFoundError: If the specified 'target_project_key' does not exist in the database.
    """
    from jira.ComponentApi import create_component
    return create_component(
        project=target_project_key,
        name=component_name,
        description=component_details
    )


def fetch_module_by_identifier(component_identifier):
    """
    Retrieve a component by its ID.

    This method returns detailed information about a specific component
    identified by its unique ID.

    Args:
        component_identifier (str): The unique identifier of the component to retrieve.

    Returns:
        Dict[str, Any]: A dictionary containing component details:
            - id (str): The component ID
            - project (str): The project key
            - name (str): The component name
            - description (str): The component description

    Raises:
        TypeError: If `component_identifier` is not a string.
        ValueError: If the component with the given ID is not found.
    """
    from jira.ComponentApi import get_component
    return get_component(comp_id=component_identifier)


def modify_project_module_by_id(module_id_to_update, new_module_name=None, new_module_description=None):
    """
    Update an existing component.

    This method allows updating the name and/or description of an existing
    component. At least one of name or description must be provided.

    Args:
        module_id_to_update (str): The unique identifier of the component to update.
        new_module_name (Optional[str]): The new name for the component. Defaults to None and maximum length is 255 characters.
        new_module_description (Optional[str]): The new description for the component
            Maximum length is 1000 characters.
            Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - updated (bool): True if the component was successfully updated.
            - component (dict): The updated component object.

    Raises:
        TypeError: If module_id_to_update is not a string, or if new_module_name/new_module_description
                   are provided and are not strings.
        ValueError: If new_module_name is provided and is empty or if its length exceeds 255 chars, or if new_module_description
                   is provided and is empty or if its length exceeds 1000 chars.
        MissingUpdateDataError: If neither new_module_name nor new_module_description is provided for the update.
        ComponentNotFoundError: If the specified component does not exist in the DB.
    """
    from jira.ComponentApi import update_component
    return update_component(
        comp_id=module_id_to_update,
        name=new_module_name,
        description=new_module_description
    )


def remove_module_by_identifier(module_to_delete_id, target_component_for_issues=None):
    """
    Delete a component from a project.

    This method permanently removes a component from a project. Optionally,
    issues assigned to the component can be moved to another component.

    Args:
        module_to_delete_id (str): The unique identifier of the component to delete
        target_component_for_issues (Optional[str]): The ID of the component to move
            existing issues to. If not provided, issues will remain
            unassigned. Defaults to None.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - deleted (str): The ID of the deleted component
            - moveIssuesTo (Optional[str]): The ID of the component
                    issues were moved to

    Raises:
        ValueError: If the component does not exist
    """
    from jira.ComponentApi import delete_component
    return delete_component(comp_id=module_to_delete_id, moveIssuesTo=target_component_for_issues)
