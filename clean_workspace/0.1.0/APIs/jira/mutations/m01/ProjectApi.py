# This file is automatically generated by the MutationBuilder

def initialize_new_workspace(project_identifier_key, project_display_name, project_manager_username=None):
    """
    Create a new project.

    This method creates a new project with the given key and name.

    Args:
        project_identifier_key (str): The key of the project. Cannot be empty.
        project_display_name (str): The name of the project. Cannot be empty.
        project_manager_username (Optional[str]): The name of the project lead. Must be a valid user name if provided.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - created (bool): Whether the project was created successfully
            - project (dict): The project
                - key (str): The key of the project
                - name (str): The name of the project
                - lead (str): The name of the project lead.

    Raises:
        TypeError: If project_identifier_key or project_display_name or project_manager_username(if provided) is not a string.
        ProjectInputError: If project_identifier_key or project_display_name or project_manager_username(if provided) is an empty string.
        ProjectAlreadyExistsError: If a project with the given project_identifier_key already exists.
        UserNotFoundError: If the project lead is provided and does not exist in the database.
    """
    from jira.ProjectApi import create_project
    return create_project(
        proj_key=project_identifier_key,
        proj_name=project_display_name,
        proj_lead=project_manager_username
    )


def retrieve_all_workspaces():
    """
    Get all projects.

    This method returns all projects in the system.

    Returns:
        Dict[str, List[Dict[str, str]]]: A dictionary containing:
            - projects (List[Dict[str, str]]): A list of projects
                - key (str): The key of the project
                - name (str): The name of the project
    """
    from jira.ProjectApi import get_projects
    return get_projects()


def find_workspace_by_key(workspace_identifier):
    """
    Get a project by key.

    This method retrieves a specific project using its key.

    Args:
        workspace_identifier (str): The key of the project. Cannot be empty.

    Returns:
        Dict[str, Any]: A dictionary representing the project, containing:
            - key (str): The key of the project.
            - name (str): The name of the project.

    Raises:
        TypeError: If workspace_identifier is not a string.
        ProjectInputError: If workspace_identifier is an empty string.
        ValueError: If the workspace_identifier is not found.
    """
    from jira.ProjectApi import get_project
    return get_project(project_key=workspace_identifier)


def fetch_workspace_icons_by_key(project_id_key):
    """
    Get all avatars for a project.

    Note: This returns all avatars with type 'project' 

    Args:
        project_id_key (str): The key of the project. Must be a non-empty string.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - project (str): The project key that was requested
            - avatars (List[Dict[str, Any]]): A list of avatar objects with type 'project'.
                Each avatar dictionary contains:
                - id (str): The unique identifier of the avatar
                - type (str): The type of avatar (always 'project' for this function)
                - filename (str): The filename of the avatar image

    Raises:
        TypeError: If project_id_key is not a string.
        ValueError: If project_id_key is an empty string.
    """
    from jira.ProjectApi import get_project_avatars
    return get_project_avatars(project_key=project_id_key)


def list_workspace_modules_by_key(target_workspace_key):
    """
    Get all components for a project.

    This method returns all components for a project.

    Args:
        target_workspace_key (str): The key of the project.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - components (List[Dict[str, Any]]): A list of components.
                Each component dictionary has:
                - id (str): The id of the component.
                - project (str): The project key of the component.
                - name (str): The name of the component.
                - description (str): The description of the component.

    Raises:
        TypeError: If target_workspace_key is not a string.
    """
    from jira.ProjectApi import get_project_components
    return get_project_components(project_key=target_workspace_key)


def remove_workspace_by_key(workspace_key_to_delete):
    """
    Delete a project.

    This method deletes a project.

    Args:
        workspace_key_to_delete (str): The key of the project

    Returns:
        Dict[str, str]: A dictionary containing:
            - deleted (str): The key of the deleted project

    Raises:
        ValueError: If the workspace_key_to_delete is not found
    """
    from jira.ProjectApi import delete_project
    return delete_project(project_key=workspace_key_to_delete)
