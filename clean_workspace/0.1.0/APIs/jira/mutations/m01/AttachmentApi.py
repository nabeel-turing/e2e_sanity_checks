# This file is automatically generated by the MutationBuilder

def fetch_file_attachment_details(attachment_identifier):
    """
    Get attachment metadata without file content.

    Returns metadata information for an attachment.
    This is useful for getting file information (name, size, type, etc.) 

    Args:
        attachment_identifier (Union[str, int]): The unique identifier of the attachment. Must be a positive 
            integer or a string representation of a positive integer.

    Returns:
        Dict[str, Any]: A dictionary containing the attachment metadata with keys:
            - id (int): The unique attachment identifier
            - filename (str): Original filename of the attachment
            - fileSize (int): File size in bytes
            - mimeType (str): MIME type of the file (e.g., 'text/plain', 'image/png')
            - created (str): ISO 8601 timestamp when attachment was uploaded
            - checksum (str): SHA256 checksum for file integrity verification
            - parentId (str): The ID of the issue this attachment belongs to
            - content (str): Data of the attachment

    Raises:
        TypeError: If attachment_identifier is not a string or integer type.
        ValidationError: If attachment_identifier is empty, not a valid integer, 
            zero, or negative.
        NotFoundError: If no attachment exists with the specified attachment_identifier.
        ValueError: If there are issues getting the attachment content.
    """
    from jira.AttachmentApi import get_attachment_metadata
    return get_attachment_metadata(id=attachment_identifier)


def remove_file_attachment(attachment_id_to_delete):
    """
    Delete an attachment and remove all references from issues.

    Permanently removes an attachment from the system, including the file data 
    and all references to it from issues. This operation cannot be undone.
    The function performs a complete cleanup by removing both the attachment 
    record and all issue references to ensure data consistency.

    Args:
        attachment_id_to_delete (Union[str, int]): The unique identifier of the attachment to delete.
            Must be a positive integer or a string representation of a positive integer.

    Returns:
        bool: Always returns True upon successful deletion. The function raises 
            exceptions for any error conditions rather than returning False.

    Raises:
        TypeError: If attachment_id_to_delete is not a string or integer type.
        ValidationError: If attachment_id_to_delete is empty, not a valid integer,
            zero, or negative.
        NotFoundError: If no attachment exists with the specified attachment_id_to_delete.
    """
    from jira.AttachmentApi import delete_attachment
    return delete_attachment(id=attachment_id_to_delete)


def upload_file_to_ticket(target_ticket_id_or_key, local_file_path):
    """
    Add an attachment to an issue from a file path.

    Creates a new attachment associated with the specified issue by reading
    a file from the filesystem. Automatically handles MIME type detection,
    file size validation, encoding, and checksum generation. The attachment
    is stored in the database with full metadata and the issue is updated
    to reference the new attachment.

    Args:
        target_ticket_id_or_key (str): The unique identifier or key of the target issue.
            Must be a non-empty string that exists in the database.
        local_file_path (str): Filesystem path to the file to attach. The file will
            be read from disk and the filename will be extracted from the path.

    Returns:
        List[Dict[str, Any]]: A list containing one dictionary with the created attachment
            metadata. The dictionary contains:
            - id (int): The unique attachment identifier
            - filename (str): The attachment filename (extracted from file_path)
            - fileSize (int): File size in bytes (limit 25MB)
            - mimeType (str): Detected MIME type (e.g., 'text/plain', 'image/png')
            - created (str): ISO 8601 timestamp when attachment was created
            - content (str): Data of the attachment
            - parentId (str): The ID of the issue this attachment belongs to
            - checksum (str): SHA256 checksum for file integrity verification

    Raises:
        TypeError: If target_ticket_id_or_key or local_file_path is not a string.
        ValidationError: If:
            - target_ticket_id_or_key is empty or whitespace-only
            - local_file_path is empty or whitespace-only
            - File processing fails (encoding, size limits, etc.)
        NotFoundError: If the specified issue does not exist in the database.
        FileNotFoundError: If the file at local_file_path does not exist.
    """
    from jira.AttachmentApi import add_attachment
    return add_attachment(issue_id_or_key=target_ticket_id_or_key, file_path=local_file_path)


def get_ticket_file_attachments(source_ticket_id_or_key):
    """
    List all attachments associated with an issue.

    Retrieves metadata for all attachments that are currently associated with the
    specified issue. The function automatically handles orphaned references by
    skipping attachments that were deleted but still have references in the issue.
    Returns an empty list if the issue has no attachments. The attachments are
    returned in the order they appear in the issue's attachment list.

    Args:
        source_ticket_id_or_key (str): The unique identifier or key of the issue to query.
            Must be a non-empty string that exists in the database.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing attachment metadata.
            Each dictionary contains:
            - id (int): The unique attachment identifier
            - filename (str): Original filename of the attachment
            - fileSize (int): File size in bytes
            - mimeType (str): MIME type of the file (e.g., 'text/plain', 'image/png')
            - created (str): ISO 8601 timestamp when attachment was uploaded
            - checksum (str): SHA256 checksum for file integrity verification
            - parentId (str): The ID of the issue this attachment belongs to
            - content (str): Data of the attachment

            Returns an empty list if the issue has no attachments or if all
            attachment references point to deleted attachments.

    Raises:
        TypeError: If source_ticket_id_or_key is not a string type.
        ValidationError: If source_ticket_id_or_key is empty or whitespace-only.
        NotFoundError: If no issue exists with the specified identifier.
    """
    from jira.AttachmentApi import list_issue_attachments
    return list_issue_attachments(issue_id_or_key=source_ticket_id_or_key)


def save_attachment_to_disk(attachment_to_download_id):
    """
    Download attachment content to a local file in the current directory.

    Downloads the specified attachment and saves it to the current directory using
    the attachment's original filename. This function handles both binary and text 
    attachments, automatically detecting the appropriate encoding and writing method 
    based on the attachment's stored encoding format.

    The function retrieves the attachment data directly from the database and
    then processes it according to its encoding:
    - Base64 encoded attachments are decoded and written as binary files
    - Text attachments are written directly as UTF-8 text files

    Args:
        attachment_to_download_id (Union[str, int]): The unique identifier of the attachment to download.
            Can be provided as an integer or string representation of the attachment ID.
            Must be a positive integer that exists in the database.

    Returns:
        bool: Always returns True upon successful completion. The function raises
            exceptions for any error conditions rather than returning False.

    Raises:
        TypeError: If attachment_to_download_id is not a string or integer.
        ValidationError: If attachment_to_download_id cannot be converted to a positive integer
            or if attachment_to_download_id is empty string/whitespace.
        NotFoundError: If no attachment exists with the specified ID.
        OSError: If there are filesystem permission issues or disk space problems
            when writing the file.
        IOError: If there are issues reading attachment data or writing to the output file.
    """
    from jira.AttachmentApi import download_attachment
    return download_attachment(id=attachment_to_download_id)


def retrieve_attachment_binary_data(source_attachment_id):
    """
    Get attachment content as binary data.

    Retrieves the raw binary content of an attachment without saving it to disk.
    This function decodes the stored attachment data and returns it as binary content.
    The content is returned as bytes that can be used directly by applications for processing, 
    streaming, or further manipulation.

    Args:
        source_attachment_id (Union[str, int]): The unique identifier of the attachment to retrieve.
            Can be provided as an integer or string representation of the attachment ID.
            Must be a positive integer that exists in the database.

    Returns:
        Dict[str, Any]: A dictionary containing the attachment content with keys:
            - content (bytes): The raw binary content of the attachment. For base64
              encoded attachments, this is the decoded binary data. For text attachments,
              this is the content encoded as UTF-8 bytes.

    Raises:
        TypeError: If source_attachment_id is not a string or integer.
        ValidationError: If source_attachment_id cannot be converted to a positive integer
            or if source_attachment_id is empty string/whitespace.
        NotFoundError: If no attachment exists with the specified ID.
        ValueError: If there are issues decoding the attachment data (e.g., invalid base64).
    """
    from jira.AttachmentApi import get_attachment_content
    return get_attachment_content(id=source_attachment_id)
