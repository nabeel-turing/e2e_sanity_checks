# This file is automatically generated by the MutationBuilder

def retrieve_user_by_login_or_id(user_login=None, user_account_id=None):
    """
    Get a user by username or account_id(key).

    This function retrieves a single user from the database. It prioritizes
    the `account_id` if both identifiers are provided. If no user is found
    matching the given criteria, it will raise a `UserNotFoundError`.

    Args:
        user_login (Optional[str]): The username of the user to retrieve. This is deprecated.
        user_account_id (Optional[str]): The account ID (key) of the user to retrieve.

    Returns:
        Dict[str, Any]: The user object dictionary if a user is found. It contains:
            - name (str): The username of the user.
            - key (str): The unique identifier (account ID) for the user.
            - active (bool): The user's active status.
            - emailAddress (str): The user's primary email address.
            - displayName (str): The user's display name.
            - profile (dict): A dictionary containing `bio` and `joined` date.
            - groups (list): A list of groups the user belongs to.
            - drafts (list): A list of the user's draft messages.
            - messages (list): A list of the user's messages.
            - threads (list): A list of the user's message threads.
            - labels (list): A list of labels associated with the user.
            - settings (dict): A dictionary of user-specific settings,
              including `theme` and `notifications`.
            - history (list): A list of the user's activity history.
            - watch (list): A list of items the user is watching.
            - sendAs (list): A list of aliases the user can send mail as.
    Raises:
        TypeError: If user_login is provided and is not a string.
        TypeError: If user_account_id is provided and is not a string.
        MissingUserIdentifierError: If neither user_login nor user_account_id is provided.
        UserNotFoundError: If the user is not found.
    """
    from jira.UserApi import get_user
    return get_user(username=user_login, account_id=user_account_id)


def provision_new_account(user_creation_data):
    """
    Create a new user with all required fields.

    This function validates the input payload to ensure it contains the necessary
    user details and that the email is not already in use. On success, it
    populates a user object with a mix of provided data and sensible defaults.

    Args:
        user_creation_data (Dict[str, Any]): A dictionary containing the user's details.
            - name (str): The username for the new user. (Required)
            - emailAddress (str): The user's primary email address. (Required)
            - displayName (str): The name to display in the UI. (Required)
            - profile (Optional[Dict[str, Any]]): A dictionary for profile info.
                - bio (str, optional): The user's biography.
                - joined (str, optional): The date the user joined.
            - groups (Optional[List[str]]): A list of group names.
            - drafts (Optional[List[Dict[str, Any]]]): A list of draft objects.
                - Each object is a dict with the keys:
                    - id (str): The unique ID of the draft.
                    - subject (str): The subject of the draft.
                    - body (str): The content of the draft.
                    - timestamp (str): The creation timestamp of the draft.
            - messages (Optional[List[Dict[str, Any]]]): A list of message objects.
                - Each object is a dict with the keys:
                    - id (str): The unique ID of the message.
                    - from (str): The sender's email address.
                    - to (str): The recipient's email address.
                    - subject (str): The subject of the message.
                    - timestamp (str): The timestamp of the message.
            - threads (Optional[List[Dict[str, Any]]]): A list of thread objects.
                - Each object is a dict with the keys:
                    - id (str): The unique ID of the thread.
                    - messageIds (List[str]): A list of message IDs in the thread.
            - labels (Optional[List[str]]): A list of label strings.
            - settings (Optional[Dict[str, Any]]): A dictionary for user settings.
                - theme (str, optional): The user's theme preference.
                - notifications (bool, optional): The user's notification preference.
            - history (Optional[List[Dict[str, Any]]]): A list of history event objects.
                - Each object is a dict with the keys:
                    - action (str): The action performed.
                    - timestamp (str): The timestamp of the action.
            - watch (Optional[List[str]]): A list of watched item IDs.
            - sendAs (Optional[List[Dict[str, Any]]]): A list of alias objects.
                - Each object is a dict with the keys:
                    - alias (str): The email alias.
                    - default (bool): Whether this is the default alias.

    Returns:
        Dict[str, Any]: A dictionary containing a 'created' flag and the new 'user'
            object. The user object's structure is detailed below.

            - created (bool): Always True on success.
            - user (Dict[str, Any]): The newly created user object, containing:
                - name (str): The username of the user.
                - key (str): The unique identifier for the user.
                - active (bool): User status, always True on creation.
                - emailAddress (str): The user's primary email address.
                - displayName (str): The user's display name.
                - profile (Dict[str, Any]): Contains user profile information.
                    - bio (str): The user's biography.
                    - joined (str): The date the user joined.
                - groups (List[str]): A list of group names the user belongs to.
                - drafts (List[Dict[str, Any]]): A list of the user's draft message objects. Each object is a dict with the keys:
                    - id (str): The unique ID of the draft.
                    - subject (str): The subject of the draft.
                    - body (str): The content of the draft.
                    - timestamp (str): The creation timestamp of the draft.
                - messages (List[Dict[str, Any]]): A list of the user's message objects. Each object is a dict with the keys:
                    - id (str): The unique ID of the message.
                    - from (str): The sender's email address.
                    - to (str): The recipient's email address.
                    - subject (str): The subject of the message.
                    - timestamp (str): The timestamp of the message.
                - threads (List[Dict[str, Any]]): A list of the user's message thread objects. Each object is a dict with the keys:
                    - id (str): The unique ID of the thread.
                    - messageIds (List[str]): A list of message IDs belonging to the thread.
                - labels (List[str]): A list of strings representing labels.
                - settings (Dict[str, Any]): User-specific settings.
                    - theme (str): The user's selected theme (e.g., 'light').
                    - notifications (bool): The user's notification preference.
                - history (List[Dict[str, Any]]): A list of the user's activity history objects. Each object is a dict with the keys:
                    - action (str): The action performed (e.g., 'login').
                    - timestamp (str): The timestamp of the action.
                - watch (List[str]): A list of strings representing watched item IDs.
                - sendAs (List[Dict[str, Any]]): A list of alias objects the user can send mail as. Each object is a dict with the keys:
                    - alias (str): The email alias.
                    - default (bool): Whether this is the default alias.

    Raises:
        TypeError: If the `user_creation_data` argument is not a dictionary.
        ValidationError: If the user_creation_data fails validation (e.g.,
                                  missing required fields, invalid email format).
    """
    from jira.UserApi import create_user
    return create_user(payload=user_creation_data)


def remove_user_by_login_or_key(user_to_delete_name=None, user_to_delete_key=None):
    """
    Delete a user by username or key.

    Args:
        user_to_delete_name (Optional[str]): The username of the user to delete.
        user_to_delete_key (Optional[str]): The key of the user to delete.

    Returns:
        Dict[str, Any]: A dictionary containing the user's information.
            - deleted (str): The key of the user that was deleted.
    Raises:
        ValueError: If the user is not found or both user_to_delete_name and user_to_delete_key are not provided.
    """
    from jira.UserApi import delete_user
    return delete_user(username=user_to_delete_name, key=user_to_delete_key)


def search_for_accounts(
    query_string,
    search_offset=0,
    result_count_limit=50,
    fetch_active_users=True,
    fetch_inactive_users=False
):
    """
    Finds users by a string search against their name, display name, and email.

    This function provides a general-purpose search for users and supports
    pagination and filtering by active status. The search is case-insensitive.

    Args:
        query_string (str): The search string to match against user fields name, display name, and email
        search_offset (Optional[int]): The index of the first user to return. Defaults to 0.
        result_count_limit (Optional[int]): The maximum number of users to return. Defaults to 50 (maximum allowed value is 1000). 
                If you specify a value that is higher than 1000, your search results will be truncated.
        fetch_active_users (Optional[bool]): If True, active users are included. Defaults to True.
        fetch_inactive_users (Optional[bool]): If True, inactive users are included. Defaults to False.

    Returns:
        List[Dict[str, Any]]: A list of user objects matching the criteria.
            Each user object contains:
            - name (str): The username of the user.
            - key (str): The unique identifier (account ID) for the user.
            - active (bool): The user's active status.
            - emailAddress (str): The user's primary email address.
            - displayName (str): The user's display name.
            - profile (Dict[str, Any]):
                - bio (str): The user's biography.
                - joined (str): The date the user joined.
            - groups (List[str]): A list of group names.
            - drafts (List[Dict[str, Any]]): A list of draft message objects.
                - id (str): The unique ID of the draft.
                - subject (str): The subject of the draft.
                - body (str): The content of the draft.
                - timestamp (str): The creation timestamp of the draft.
            - messages (List[Dict[str, Any]]): A list of message objects.
                - id (str): The unique ID of the message.
                - from (str): The sender's email address.
                - to (str): The recipient's email address.
                - subject (str): The subject of the message.
                - timestamp (str): The timestamp of the message.
            - threads (List[Dict[str, Any]]): A list of thread objects.
                - id (str): The unique ID of the thread.
                - messageIds (List[str]): A list of message IDs in the thread.
            - labels (List[str]): A list of label strings.
            - settings (Dict[str, Any]):
                - theme (str): The user's theme preference.
                - notifications (bool): The user's notification preference.
            - history (List[Dict[str, Any]]): A list of history event objects.
                - action (str): The action performed.
                - timestamp (str): The timestamp of the action.
            - watch (List[str]): A list of watched item IDs.
            - sendAs (List[Dict[str, Any]]): A list of alias objects.
                - alias (str): The email alias.
                - default (bool): Whether this is the default alias.

    Raises:
        TypeError: If 'username' is not a string,
                   'search_offset' or 'result_count_limit' are not integers,
                   or 'fetch_active_users' or 'fetch_inactive_users' are not booleans.
        ValueError: If 'username' is an empty string (after stripping whitespace),
                    'search_offset' is negative,
                    or 'result_count_limit' is not a positive integer.
    """
    from jira.UserApi import find_users
    return find_users(
        search_string=query_string,
        startAt=search_offset,
        maxResults=result_count_limit,
        includeActive=fetch_active_users,
        includeInactive=fetch_inactive_users
    )
