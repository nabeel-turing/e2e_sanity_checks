# This file is automatically generated by the MutationBuilder

def get_all_ticket_varieties():
    """
    Retrieve all issue types from Jira.

    This method returns a list of all issue types defined in the system.
    Issue types are used to categorize and manage issues in Jira.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - issueTypes (List[Dict[str, Any]]): A list of issue type objects, where each type contains:
                - id (str): The unique identifier for the issue type
                - name (str): The display name of the issue type
                - description (Optional[str]): The description of the issue type
                - subtask (bool): Whether the issue type is a subtask
    """
    from jira.IssueTypeApi import get_issue_types
    return get_issue_types()


def find_ticket_variety_by_id(ticket_type_identifier):
    """
    Retrieve a specific issue type by its ID.

    This method returns detailed information about a specific issue type
    identified by its unique ID.

    Args:
        ticket_type_identifier (str): The unique identifier of the issue type to retrieve. Must be a non-empty string.

    Returns:
        Dict[str, Any]: The issue type object containing:
            - id (str): The unique identifier for the issue type
            - name (str): The display name of the issue type
            - description (str): The description of the issue type
            - subtask (bool): Whether the issue type is a subtask

    Raises:
        TypeError: If ticket_type_identifier is not a string.
        ValueError: If ticket_type_identifier is an empty string.
        IssueTypeNotFoundError: If the issue type with the given ID is not found in the database.
    """
    from jira.IssueTypeApi import get_issue_type
    return get_issue_type(type_id=ticket_type_identifier)


def define_new_ticket_variety(new_type_name, new_type_details, variety_classification='standard'):
    """
    Create a new issue type in Jira.

    This method creates a new issue type with the specified name and description.
    The issue type will be assigned a unique ID and stored in the system.

    Args:
        new_type_name (str): The name of the issue type. Cannot be empty.
        new_type_details (str): The description of the issue type. Cannot be empty.
        variety_classification (str): The type of issue type to create (default is "standard").
                    Expected values are "standard" or "subtask". 
                    Any other value provided is treated as "standard" by the code.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - created (bool): Whether the issue type was created successfully
            - issueType (Dict[str, Any]): The created issue type object
                - id (str): The unique identifier for the issue type
                - name (str): The display name of the issue type
                - description (str): The description of the issue type
                - subtask (bool): Whether the issue type is a subtask

    Raises:
        TypeError: If 'new_type_name', 'new_type_details', or 'variety_classification' is not a string.
        EmptyFieldError: If 'new_type_name' or 'new_type_details' is an empty string.
    """
    from jira.IssueTypeApi import create_issue_type
    return create_issue_type(
        name=new_type_name,
        description=new_type_details,
        type=variety_classification
    )
