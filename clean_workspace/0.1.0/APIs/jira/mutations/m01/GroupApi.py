# This file is automatically generated by the MutationBuilder

def fetch_user_collection_by_name(user_group_name):
    """
    Retrieve a specific group by its name.

    This method returns detailed information about a specific group
    identified by its name. Groups in Jira are used to manage user permissions
    and access control.

    Args:
        user_group_name (str): The name of the group to retrieve. Cannot be empty or whitespace-only.

    Returns:
        Dict[str, Dict[str, Any]]: A dictionary containing:
            - group (Dict[str, Any]): The group object containing:
                - name (str): The name of the group
                - users (List[str]): List of names of users in the group

    Raises:
        TypeError: If user_group_name is not a string.
        ValueError: If the user_group_name is empty, whitespace-only, or if the group does not exist in the database.
    """
    from jira.GroupApi import get_group
    return get_group(groupname=user_group_name)


def modify_user_collection_membership(target_group_name, user_list_to_update):
    """
    Update the members of an existing group.

    This method allows updating the list of users in a specific group.
    The group must exist before it can be updated.

    Args:
        target_group_name (str): The name of the group to update
        user_list_to_update (List[str]): List of usernames to add to the group

    Returns:
        Dict[str, Any]: A dictionary containing:
            - {groupname} (Dict[str, Any]): The updated group object containing:
                - name (str): The name of the group
                - users (List[str]): List of usernames in the group

    Raises:
        ValueError: If the group does not exist
    """
    from jira.GroupApi import update_group
    return update_group(groupname=target_group_name, users=user_list_to_update)


def establish_new_user_collection(new_group_name):
    """
    Create a new group.

    This method creates a new group with the specified name. The group
    will initially have no members.

    Args:
        new_group_name (str): The name of the group to create.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - created (bool): True if the group was successfully created.
            - group (Dict[str, Any]): The created group object containing:
                - name (str): The name of the group.
                - users (List[str]): Empty list of users.

    Raises:
        TypeError: If 'new_group_name' is not a string.
        ValueError: If 'new_group_name' is empty or consists only of whitespace.
        GroupAlreadyExistsError: If the group with the given 'new_group_name' already exists.
    """
    from jira.GroupApi import create_group
    return create_group(name=new_group_name)


def remove_user_collection_by_name(group_name_to_delete):
    """
    Delete an existing group.

    This method permanently removes a group from the system. All users
    in the group will lose their group-based permissions.

    Args:
        group_name_to_delete (str): The name of the group to delete

    Returns:
        Dict[str, Any]: A dictionary containing:
            - deleted (str): The name of the deleted group

    Raises:
        TypeError: If group_name_to_delete is not a string.
        ValueError: If the group_name_to_delete is empty.
        ValueError: If the group does not exist.
    """
    from jira.GroupApi import delete_group
    return delete_group(groupname=group_name_to_delete)
