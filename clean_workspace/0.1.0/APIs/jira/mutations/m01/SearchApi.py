# This file is automatically generated by the MutationBuilder

def query_tickets_with_jql(
    jql_query_string='',
    pagination_start_index=0,
    results_limit=50,
    fields_to_return=None,
    fields_to_expand=None,
    enable_query_validation=True
):
    """
    Search for issues based on JQL query.

    Args:
        jql_query_string (str): The JQL query to search for issues.
                   Strings with spaces must be enclosed in single (') or double (") quotes.
                   Commonly searchable fields include:
                   - `id` / `key` (e.g., `id = "ISSUE-123"`)
                   - `project` (e.g., `project = "DEMO"`)
                   - `summary` (e.g., `summary ~ "critical bug"` or `summary = "Exact phrase"`)
                   - `description` (e.g., `description ~ "detailed steps"`)
                   - `priority` (e.g., `priority = "High"`)
                   - `assignee`:
                       - The `assignee` field is stored as a dictionary with a `name` field (e.g., `{"name": "jdoe"}`), but can be queried directly using the username: `assignee = "jdoe"`.
                       - The JQL parser automatically extracts the `name` field from the assignee dictionary for comparison.
                       - The `name` field corresponds to the user's `name` field from the users table (not email or display name).
                       - Dot notation queries (e.g., `assignee.name = "jdoe"`) are **NOT supported** by the current JQL parser.
                   - `created` (e.g., `created >= "2024-01-01"`)
                   - `issuetype` (e.g., `issuetype = "Bug"`)
                   - `status` (e.g., `status = "Open"`)

                   Supported operators:
                   - `=` (equals), `!=` (not equals)
                   - `~` (contains), `!~` (does not contain)
                   - `<`, `<=`, `>`, `>=` (comparison operators for dates/numbers)
                   - `IN` (e.g., `priority IN ("High", "Critical")`)
                   - `NOT IN` (e.g., `status NOT IN ("Closed", "Done")`)
                   - `IS EMPTY`, `IS NOT EMPTY` (for null/empty checks)
                   - `IS NULL`, `IS NOT NULL` (aliases for empty checks)
                   - `EMPTY`, `NULL` (legacy empty checks)

                   Combining conditions:
                   - Use `AND` and `OR` for multiple conditions (e.g., `project = "WebApp" AND status = "Open" OR priority = "High"`).
                   - `AND` has higher precedence than `OR`.
                   - Parentheses `()` for explicit grouping of conditions are supported (e.g., `(project = "WebApp" OR project = "API") AND status = "Open"`).

                   Ordering results:
                   - Use `ORDER BY fieldName [ASC|DESC]` (e.g., `ORDER BY created DESC`).

                   The exact fields and operators supported depend on the JQL parsing and evaluation logic implemented in the simulation.
        pagination_start_index (Optional[int]): The index of the first issue to return. Defaults to 0.
        results_limit (Optional[int]): The maximum number of issues to return. Defaults to 50.
        fields_to_return (Optional[List[str]]): A list of fields to return. Defaults to None (all fields).
        fields_to_expand (Optional[List[str]]): A list of fields to expand. Defaults to None.
        enable_query_validation (Optional[bool]): Whether to validate the JQL query. Defaults to True.

    Returns:
        Dict[str, Any]: A dictionary containing:
            - issues (List[Dict[str, Any]]): A list of issues
                - id (str): The id of the issue.
                - fields (Dict[str, Any]): The fields of the issue.
                    - project (str): The project key
                    - summary (str): Issue summary
                    - description (str): Issue description
                    - priority (str): The priority of the issue
                    - assignee (Dict[str, str]): Assignee information
                        - name (str): The assignee's username (e.g., 'jdoe')
                    - created (str): Creation timestamp
            - startAt (int): The index of the first issue to return.
            - maxResults (int): The maximum number of issues to return.
            - total (int): The total number of issues.

    Raises:
        TypeError: If any argument has an invalid type (e.g., jql_query_string is not a string,
                   pagination_start_index is not an int/None, fields_to_return is not a list/None, etc.).
        ValueError: If any argument has an invalid value (e.g., negative pagination_start_index or results_limit,
                    or non-string elements in fields_to_return/fields_to_expand lists).
    """
    from jira.SearchApi import search_issues
    return search_issues(
        jql=jql_query_string,
        start_at=pagination_start_index,
        max_results=results_limit,
        fields=fields_to_return,
        expand=fields_to_expand,
        validate_query=enable_query_validation
    )
