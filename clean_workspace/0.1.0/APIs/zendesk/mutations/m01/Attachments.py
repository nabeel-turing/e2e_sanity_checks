# This file is automatically generated by the MutationBuilder

def purge_upload_by_token(file_upload_token_to_delete):
    """
    Deletes an uploaded file using its token.

    This function removes an uploaded file from the system using the token
    that was returned when the file was originally uploaded. The token is
    valid for 60 minutes after upload.

    Args:
        file_upload_token_to_delete (str): The upload token of the attachment to delete. This token
            was returned when the file was originally uploaded via the uploads endpoint.

    Returns:
        None: Returns nothing on successful deletion (204 No Content equivalent)

    Raises:
        TypeError: If file_upload_token_to_delete is not a string.
        ValueError: If file_upload_token_to_delete is empty or if the upload file_upload_token_to_delete does not exist.
        AttachmentNotFoundError: If the attachment with the given file_upload_token_to_delete is not found.
    """
    from zendesk.Attachments import delete_attachment
    return delete_attachment(token=file_upload_token_to_delete)


def inspect_attachment_metadata(file_attachment_identifier):
    """
    Retrieves metadata about a specific attachment.

    This function returns detailed information about an attachment including
    its content type, file name, size, URLs, and other metadata. The attachment
    must exist in the system and not be marked as deleted.

    Args:
        file_attachment_identifier (int): The ID of the attachment to retrieve.

    Returns:
        Dict[str, Any]: A dictionary containing the attachment metadata:
            - id (int): The unique identifier of the attachment.
            - content_type (str): The MIME type of the attachment.
            - content_url (str): URL where the attachment file can be downloaded.
            - file_name (str): The name of the attachment file.
            - size (int): The size of the attachment in bytes.
            - url (str): API URL to access the attachment details.
            - deleted (bool): Whether the attachment has been deleted.
            - created_at (str): ISO 8601 timestamp when the attachment was created.
            - updated_at (str): ISO 8601 timestamp when the attachment was last updated.
            - height (Optional[str]): The height of the image in pixels (if applicable).
            - width (Optional[str]): The width of the image in pixels (if applicable).
            - inline (bool): Whether the attachment is inline (excluded from attachment list).
            - malware_scan_result (Optional[str]): Result of malware scan.
            - thumbnails (Optional[List[Dict]]): Array of thumbnail objects (if applicable).

    Raises:
        TypeError: If file_attachment_identifier is not an integer.
        ValueError: If file_attachment_identifier is negative or zero.
        AttachmentNotFoundError: If the attachment with the given ID is not found.
    """
    from zendesk.Attachments import show_attachment
    return show_attachment(attachment_id=file_attachment_identifier)


def generate_attachment_upload_token(
    destination_file_name,
    existing_upload_session_token=None,
    file_media_type=None,
    simulated_file_size_bytes=1024
):
    """
    Mock file upload that generates attachment tokens and metadata.

    This function simulates uploading a file to Zendesk and returns the upload token
    and attachment metadata. The token can be used to associate the file with tickets
    or comments. Multiple files can be associated with the same token.

    Args:
        destination_file_name (str): Target filename for the attachment.
        existing_upload_session_token (Optional[str]): Upload token for associating multiple files. If not provided,
            a new token will be generated.
        file_media_type (Optional[str]): MIME type of the file. If not provided, will be
            auto-detected from the filename.
        simulated_file_size_bytes (int): Mock file size in bytes. Defaults to 1024.

    Returns:
        Dict[str, Any]: A dictionary containing the upload information:
            - upload (Dict[str, Any]): Upload information containing:
                - token (str): Upload token for associating with tickets.
                - attachment (Dict[str, Any]): Attachment object with id, file_name, 
                  content_url, content_type, size.
                - attachments (List[Dict[str, Any]]): Array of all attachments for this token.

    Raises:
        TypeError: If any parameter has an incorrect type.
        ValueError: If destination_file_name is empty or simulated_file_size_bytes is negative.
    """
    from zendesk.Attachments import create_attachment
    return create_attachment(
        filename=destination_file_name,
        token=existing_upload_session_token,
        content_type=file_media_type,
        file_size=simulated_file_size_bytes
    )
