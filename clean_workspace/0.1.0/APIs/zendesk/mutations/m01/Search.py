# This file is automatically generated by the MutationBuilder

def execute_cross_platform_search(
    search_query_string,
    result_ordering_field=None,
    result_ordering_direction=None,
    results_page_index=1,
    items_per_page_limit=100,
    sideload_additional_data=None
):
    """
    Search for tickets, users, and organizations using Zendesk's query syntax.

    This function simulates the Zendesk Support API /api/v2/search endpoint which allows
    searching across tickets, users, and organizations using property keywords and operators.
    Groups are not currently supported.

    Args:
        search_query_string (str): The search query string using Zendesk's query syntax.

            Search Rules:
            - Searches across tickets, users, and organizations by default
            - Use "type:ticket", "type:user", or "type:organization" to limit scope
            - Multiple terms are combined with AND logic
            - Use quotes for exact phrase matching: "exact phrase"
            - Use wildcards (*) for pattern matching like "email*"
            - Use minus (-) for negation like "-status:closed"
            - Combine filters and text like "priority:urgent server down"

            Supported Filter Fields:

            For Tickets:
            - status: new, open, pending, hold, solved, closed
            - priority: low, normal, high, urgent (supports >, <, >=, <= operators)
            - ticket_type: problem, incident, question, task
            - assignee: user_id, "me", "none"
            - requester: user_id
            - organization: organization_id, "none"
            - group: group_id, "none"
            - tags: tag_name, "none"
            - subject: text search in ticket subject
            - description: text search in ticket description
            - created: date or relative time (>2hours, >1day, >1week)
            - updated: date or relative time

            For Users:
            - role: end-user, agent, admin
            - email: email pattern or domain (@example.com)
            - name: text search in user name
            - organization: organization_id, "none"
            - tags: tag_name, "none"
            - verified: true, false
            - active: true, false
            - created: date or relative time
            - updated: date or relative time

            For Organizations:
            - name: text search in organization name
            - tags: tag_name, "none"
            - created: date or relative time
            - updated: date or relative time

            Relative Time Format:
            - Supports: hours/h, minutes/min, days/d, weeks/w, months, years/y
        result_ordering_field (Optional[str]): Field to sort results by. Value can be created_at, updated_at, priority, status, ticket_type
        result_ordering_direction (Optional[str]): Sort order. Value can be asc, desc. Defaults to desc.
        results_page_index (int): Page number for pagination. Defaults to 1.
        items_per_page_limit (int): Number of results per page (1-100). Defaults to 100.
        sideload_additional_data (Optional[str]): Side-load related data. Comma-separated list like "users", or "users,organizations".

    Returns:
        Dict[str, Any]: A dictionary containing search results with the following structure:
            results (List[Dict[str, Any]]): Array of search result objects. Each result contains:
                id (int): Unique identifier for the object.
                url (str): API URL for the object.
                result_type (str): Type of object ("ticket", "user", "organization").
                created_at (str): Creation timestamp (ISO 8601 format).
                updated_at (str): Last update timestamp (ISO 8601 format).

                For tickets:
                    subject (str): Ticket subject line.
                    description (str): Ticket description.
                    status (str): Ticket status ("new", "open", "pending", "hold", "solved", "closed").
                    priority (str): Ticket priority ("low", "normal", "high", "urgent").
                    ticket_type (str): Ticket type ("problem", "incident", "question", "task").
                    assignee_id (Optional[int]): ID of assigned agent.
                    requester_id (Optional[int]): ID of ticket requester.
                    organization_id (Optional[int]): ID of associated organization.
                    group_id (Optional[int]): ID of assigned group.
                    tags (List[str]): Array of tags applied to the ticket.

                For users:
                    name (str): User's full name.
                    email (str): User's email address.
                    role (str): User role ("end-user", "agent", "admin").
                    active (bool): Whether the user account is active.
                    verified (bool): Whether the user's email is verified.
                    phone (str): User's phone number.
                    organization_id (Optional[int]): ID of user's organization.
                    tags (List[str]): Array of tags applied to the user.

                For organizations:
                    name (str): Organization name.
                    details (str): Organization details.
                    notes (str): Organization notes.
                    tags (List[str]): Array of tags applied to the organization.

            count (int): Total number of results found.
            page (int): Current page number.
            per_page (int): Number of results per page.
            next_page (Optional[str]): URL for next page (if exists).
            previous_page (Optional[str]): URL for previous page (if exists).

            When include parameter is used:
                users (Optional[List[Dict[str, Any]]]): Side-loaded user objects when "users" included.
                organizations (Optional[List[Dict[str, Any]]]): Side-loaded organization objects when "organizations" included.            

    Raises:
        TypeError: When any parameter has an incorrect type (e.g., non-string search_query_string, 
            non-integer results_page_index/items_per_page_limit).
        ValueError: When parameter values are invalid:
            - Trying to access search results beyond the 1000 record limit
            - results_page_index < 1
            - items_per_page_limit < 1 or items_per_page_limit > 100  
            - result_ordering_field not in valid options
            - result_ordering_direction not 'asc' or 'desc'
    """
    from zendesk.Search import list_search_results
    return list_search_results(
        query=search_query_string,
        sort_by=result_ordering_field,
        sort_order=result_ordering_direction,
        page=results_page_index,
        per_page=items_per_page_limit,
        include=sideload_additional_data
    )
