# This file is automatically generated by the MutationBuilder

def list_all_accessible_subscriptions(
    auth_method_for_sub_list=None,
    tenant_for_sub_list=None,
    max_retries_for_sub_list=None,
    delay_for_sub_list_retry=None,
    max_delay_for_sub_list_retry=None,
    mode_for_sub_list_retry=None,
    timeout_for_sub_list_net=None
):
    """
    List all Azure subscriptions accessible to your account.

    This function lists all Azure subscriptions accessible to the account. It optionally allows specifying a tenant and authentication method. Results include subscription names and IDs, returned as a list of dictionaries.

    Args:
        auth_method_for_sub_list (Optional[str]): Authentication method to use. Options: 'credential' (Azure CLI/managed identity), 'key' (access key), or 'connectionString'.
        tenant_for_sub_list (Optional[str]): The Azure Active Directory tenant ID or name. This can be either the GUID identifier or the display name of your Azure AD tenant.
        max_retries_for_sub_list (Optional[str]): Maximum number of retry attempts for failed operations before giving up.
        delay_for_sub_list_retry (Optional[str]): Initial delay in seconds between retry attempts. For exponential backoff, this value is used as the base.
        max_delay_for_sub_list_retry (Optional[str]): Maximum delay in seconds between retries, regardless of the retry strategy.
        mode_for_sub_list_retry (Optional[str]): Retry strategy to use. 'fixed' uses consistent delays, 'exponential' increases delay between attempts.
        timeout_for_sub_list_net (Optional[str]): Network operation timeout in seconds. Operations taking longer than this will be cancelled.

    Returns:
        List[Dict[str, Any]]: A list of Azure subscriptions accessible to the account. Each dictionary in the list represents a subscription and contains the following keys:
            id (str): The subscription ID (GUID).
            subscriptionId (str): The subscription ID (GUID, often duplicated for convenience).
            displayName (str): The friendly name of the subscription.
            state (str): The state of the subscription (e.g., 'Enabled', 'Warned', 'PastDue', 'Disabled').
            tenantId (str): The tenant ID associated with the subscription.

    Raises:
        TenantNotFoundError: If a specified tenant_for_sub_list ID is invalid or inaccessible.
        ValidationError: If input arguments fail validation.
    """
    from azure.management import azmcp_subscription_list
    return azmcp_subscription_list(
        auth_method=auth_method_for_sub_list,
        tenant=tenant_for_sub_list,
        retry_max_retries=max_retries_for_sub_list,
        retry_delay=delay_for_sub_list_retry,
        retry_max_delay=max_delay_for_sub_list_retry,
        retry_mode=mode_for_sub_list_retry,
        retry_network_timeout=timeout_for_sub_list_net
    )


def get_all_resource_groups(
    subscription_for_rg_list,
    auth_method_for_rg_list=None,
    tenant_for_rg_list=None,
    max_retries_for_rg_list=None,
    delay_for_rg_list_retry=None,
    max_delay_for_rg_list_retry=None,
    mode_for_rg_list_retry=None,
    timeout_for_rg_list_net=None
):
    """
    List all resource groups in a subscription.
    This function retrieves all resource groups available in the specified subscription.
    Results include resource group names and IDs, returned as a list of dictionaries,
    where each dictionary represents a resource group.
    Args:
        subscription_for_rg_list (str): The Azure subscription ID or name. This can be either the
            GUID identifier or the display name of the Azure subscription to use.
        auth_method_for_rg_list (Optional[str]): Authentication method to use. Options: 'credential'
            (Azure CLI/managed identity), 'key' (access key), or 'connectionString'.
        tenant_for_rg_list (Optional[str]): The Azure Active Directory tenant ID or name. This can
            be either the GUID identifier or the display name of your Azure AD tenant.
        max_retries_for_rg_list (Optional[str]): Maximum number of retry attempts for
            failed operations before giving up. Expected to be a string representing an integer.
        delay_for_rg_list_retry (Optional[str]): Initial delay in seconds between retry attempts.
            For exponential backoff, this value is used as the base. Expected to be a string representing an integer.
        max_delay_for_rg_list_retry (Optional[str]): Maximum delay in seconds between retries,
            regardless of the retry strategy. Expected to be a string representing an integer.
        mode_for_rg_list_retry (Optional[str]): Retry strategy to use. 'fixed' uses consistent
            delays, 'exponential' increases delay between attempts.
        timeout_for_rg_list_net (Optional[str]): Network operation timeout in seconds.
            Operations taking longer than this will be cancelled. Expected to be a string representing an integer.
    Returns:
        List[Dict[str, Any]]: A list of dictionaries, where each dictionary represents a
        resource group and contains the following keys:
            name (str): The name of the resource group.
            id (str): The resource ID of the resource group.
            location (str): The Azure region where the resource group is located.
            managedBy (Optional[str]): The ID of the resource that manages this
                resource group, if applicable.
            tags (Optional[Dict[str, str]]): Tags associated with the resource group.
    Raises:
        SubscriptionNotFoundError: If the specified subscription_for_rg_list ID is not found.
        ValidationError: If input arguments fail validation.
    """
    from azure.management import azmcp_group_list
    return azmcp_group_list(
        subscription=subscription_for_rg_list,
        auth_method=auth_method_for_rg_list,
        tenant=tenant_for_rg_list,
        retry_max_retries=max_retries_for_rg_list,
        retry_delay=delay_for_rg_list_retry,
        retry_max_delay=max_delay_for_rg_list_retry,
        retry_mode=mode_for_rg_list_retry,
        retry_network_timeout=timeout_for_rg_list_net
    )
