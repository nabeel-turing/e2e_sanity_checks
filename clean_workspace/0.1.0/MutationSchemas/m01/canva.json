[
  {
    "name": "begin_design_import_from_file",
    "description": "Creates a design import job from a file upload.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_import_parameters": {
          "type": "object",
          "description": "Metadata included in the Import-Metadata header:",
          "properties": {
            "title_base64": {
              "type": "string",
              "description": "REQUIRED. Base64-encoded design title (max 50 unencoded characters)."
            },
            "mime_type": {
              "type": "string",
              "description": "MIME type of the file (e.g., \"application/pdf\")."
            }
          },
          "required": [
            "title_base64"
          ]
        }
      },
      "required": [
        "file_import_parameters"
      ]
    }
  },
  {
    "name": "check_file_import_progress",
    "description": "Retrieves the status and result of a design import job.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_import_job_id": {
          "type": "string",
          "description": "The ID of the design import job."
        }
      },
      "required": [
        "file_import_job_id"
      ]
    }
  },
  {
    "name": "check_media_upload_status",
    "description": "Retrieves the status and result of an asset upload job.",
    "parameters": {
      "type": "object",
      "properties": {
        "upload_task_identifier": {
          "type": "string",
          "description": "The ID of the asset upload job."
        }
      },
      "required": [
        "upload_task_identifier"
      ]
    }
  },
  {
    "name": "enumerate_directory_contents",
    "description": "Lists items (folders, designs, images) within a specified folder.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_folder_identifier": {
          "type": "string",
          "description": "The ID of the folder to list items from."
        },
        "content_type_filter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Comma-delimited list of item types to filter by.\nValid values: \"folder\", \"design\", \"image\"."
        },
        "sorting_preference": {
          "type": "string",
          "description": "Field used to sort the results.\nValid values:\n- \"created_ascending\"\n- \"created_descending\"\n- \"modified_ascending\"\n- \"modified_descending\" (default)\n- \"title_ascending\"\n- \"title_descending\""
        },
        "pagination_cursor": {
          "type": "string",
          "description": "Continuation token for paginated responses."
        }
      },
      "required": [
        "target_folder_identifier"
      ]
    }
  },
  {
    "name": "enumerate_thread_replies",
    "description": "Lists replies from a specific thread on a design.",
    "parameters": {
      "type": "object",
      "properties": {
        "relevant_design_id": {
          "type": "string",
          "description": "The ID of the design."
        },
        "target_thread_identifier": {
          "type": "string",
          "description": "The ID of the thread."
        },
        "page_size": {
          "type": "integer",
          "description": "Max number of replies to return (default: 50, min: 1, max: 100)."
        },
        "next_page_token": {
          "type": "string",
          "description": "Token for paginated results."
        }
      },
      "required": [
        "relevant_design_id",
        "target_thread_identifier"
      ]
    }
  },
  {
    "name": "fetch_asset_metadata",
    "description": "Retrieves metadata for a specific asset by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "media_identifier": {
          "type": "string",
          "description": "The ID of the asset to retrieve."
        }
      },
      "required": [
        "media_identifier"
      ]
    }
  },
  {
    "name": "fetch_autofill_task_status",
    "description": "Retrieves the status and results of an autofill job by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "autofill_job_identifier": {
          "type": "string",
          "description": "The ID of the autofill job to retrieve."
        }
      },
      "required": [
        "autofill_job_identifier"
      ]
    }
  },
  {
    "name": "fetch_brand_template_by_id",
    "description": "Retrieve a brand template by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "template_identifier": {
          "type": "string",
          "description": "The ID of the brand template."
        }
      },
      "required": [
        "template_identifier"
      ]
    }
  },
  {
    "name": "fetch_discussion_thread",
    "description": "Retrieves a specific comment thread from a design.",
    "parameters": {
      "type": "object",
      "properties": {
        "associated_design_id": {
          "type": "string",
          "description": "The design ID."
        },
        "discussion_thread_identifier": {
          "type": "string",
          "description": "The ID of the thread to retrieve."
        }
      },
      "required": [
        "associated_design_id",
        "discussion_thread_identifier"
      ]
    }
  },
  {
    "name": "fetch_project_pages",
    "description": "Retrieves pages from a design, with support for pagination.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_design_id": {
          "type": "string",
          "description": "The ID of the design to retrieve pages from."
        },
        "pagination_start_index": {
          "type": "integer",
          "description": "The index of the first page to return (1-based). Default is 1.\nMin: 1, Max: 500."
        },
        "items_per_page_count": {
          "type": "integer",
          "description": "The number of pages to return. Default is 50.\nMin: 1, Max: 200."
        }
      },
      "required": [
        "target_design_id"
      ]
    }
  },
  {
    "name": "fetch_user_team_info",
    "description": "Retrieves the team-related user information for the given user ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "account_identifier": {
          "type": "string",
          "description": "Unique identifier of the user."
        }
      },
      "required": [
        "account_identifier"
      ]
    }
  },
  {
    "name": "find_brand_templates",
    "description": "List brand templates with optional filters and sorting.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_keyword": {
          "type": "string",
          "description": "Search term to filter brand templates by title."
        },
        "page_token": {
          "type": "string",
          "description": "Token for pagination (currently unused)."
        },
        "ownership_filter": {
          "type": "string",
          "description": "Ownership filter ('any', 'owned', 'shared')."
        },
        "sort_order_key": {
          "type": "string",
          "description": "Sort order ('relevance', 'modified_descending', etc.)."
        },
        "dataset_status_filter": {
          "type": "string",
          "description": "Filter based on dataset presence ('any', 'non_empty', 'empty')."
        }
      }
    }
  },
  {
    "name": "generate_canva_artwork",
    "description": "Creates a new design with specified design type, asset, and title.",
    "parameters": {
      "type": "object",
      "properties": {
        "artwork_format": {
          "type": "object",
          "description": "The design type to use with the following key:\n- \"preset\": Accepted values for preset are:\n- doc\n- whiteboard\n- presentation\n- canvas\n- banner\n- flyer\n- social\n- video\n- presentation\n- infographic\n- poster"
        },
        "initial_asset_identifier": {
          "type": "string",
          "description": "The ID of the asset (e.g., image) to include in the design.\nMust be a non-empty string."
        },
        "artwork_name": {
          "type": "string",
          "description": "Title of the design. Must be 1â€“255 characters."
        }
      },
      "required": [
        "artwork_format",
        "artwork_name",
        "initial_asset_identifier"
      ]
    }
  },
  {
    "name": "get_url_import_status",
    "description": "Retrieves the status and result of a URL import job.",
    "parameters": {
      "type": "object",
      "properties": {
        "url_import_job_identifier": {
          "type": "string",
          "description": "The ID of the URL import job."
        }
      },
      "required": [
        "url_import_job_identifier"
      ]
    }
  },
  {
    "name": "initiate_design_autofill_task",
    "description": "Creates an asynchronous job to autofill a design from a brand template with input data.",
    "parameters": {
      "type": "object",
      "properties": {
        "source_template_identifier": {
          "type": "string",
          "description": "ID of the input brand template."
        },
        "autofill_payload": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Required. One of \"image\", \"text\", or \"chart\"."
            },
            "asset_id": {
              "type": "string",
              "description": "Required if type is \"image\"."
            },
            "text": {
              "type": "string",
              "description": "Required if type is \"text\"."
            },
            "chart_data": {
              "type": "object",
              "description": "Required if type is \"chart\". Structure:",
              "properties": {
                "rows": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "One of \"string\", \"number\", \"boolean\", \"date\"."
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        "description": "List of cells, each with:"
                      }
                    },
                    "required": [
                      "cells"
                    ]
                  },
                  "description": "List of rows, where each row contains:"
                }
              },
              "required": [
                "rows"
              ]
            }
          },
          "description": "Dictionary of data fields to autofill. Each key maps to a field object with:",
          "required": [
            "type"
          ]
        },
        "new_design_title": {
          "type": "string",
          "description": "Optional title for the autofilled design. If not provided, defaults to the template's title."
        }
      },
      "required": [
        "autofill_payload",
        "source_template_identifier"
      ]
    }
  },
  {
    "name": "initiate_design_export_process",
    "description": "Creates a design export job.",
    "parameters": {
      "type": "object",
      "properties": {
        "source_design_identifier": {
          "type": "string",
          "description": "REQUIRED. The ID of the design to export."
        },
        "export_specifications": {
          "type": "object",
          "description": "REQUIRED. Dictionary specifying export format options:",
          "properties": {
            "type": {
              "type": "string",
              "description": "REQUIRED. One of:\n    - \"pdf\", \"jpg\", \"png\", \"pptx\", \"gif\", \"mp4\"."
            },
            "quality": {
              "type": "integer",
              "description": "SOMETIMES REQUIRED.\n    - For JPG: Integer between 1â€“100 (compression quality).\n    - For MP4: One of the following values:\n        \"horizontal_480p\", \"horizontal_720p\", \"horizontal_1080p\", \"horizontal_4k\",\n        \"vertical_480p\", \"vertical_720p\", \"vertical_1080p\", \"vertical_4k\"."
            },
            "pages": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Page numbers to export (1-based index)."
            },
            "export_quality": {
              "type": "string",
              "description": "\"regular\" or \"pro\". Default is \"regular\"."
            },
            "size": {
              "type": "string",
              "description": "Paper size for PDFs. One of: \"a4\", \"a3\", \"letter\", \"legal\"."
            },
            "height": {
              "type": "integer",
              "description": "Height in pixels (min: 40, max: 25000)."
            },
            "width": {
              "type": "integer",
              "description": "Width in pixels (min: 40, max: 25000)."
            },
            "lossless": {
              "type": "boolean",
              "description": "For PNG. If True, export without compression. Default: True."
            },
            "transparent_background": {
              "type": "boolean",
              "description": "For PNG. If True, enables transparency. Default: False."
            },
            "as_single_image": {
              "type": "boolean",
              "description": "If True, export multipage design as a single image. Default: False."
            }
          },
          "required": [
            "type"
          ]
        }
      },
      "required": [
        "export_specifications",
        "source_design_identifier"
      ]
    }
  },
  {
    "name": "initiate_design_import_from_url",
    "description": "Creates a design import job using a public URL.",
    "parameters": {
      "type": "object",
      "properties": {
        "imported_design_title": {
          "type": "string",
          "description": "REQUIRED. The title for the imported design (1â€“255 characters)."
        },
        "source_file_url": {
          "type": "string",
          "description": "REQUIRED. Publicly accessible file URL (1â€“2048 characters)."
        },
        "file_content_type": {
          "type": "string",
          "description": "MIME type of the file (1â€“100 characters). If not provided, it will be auto-detected."
        }
      },
      "required": [
        "imported_design_title",
        "source_file_url"
      ]
    }
  },
  {
    "name": "make_new_directory",
    "description": "Creates a new folder with the given name under the specified parent folder.",
    "parameters": {
      "type": "object",
      "properties": {
        "directory_name": {
          "type": "string",
          "description": "Name of the new folder (1â€“255 characters)."
        },
        "containing_folder_id": {
          "type": "string",
          "description": "ID of the parent folder (1â€“50 characters)."
        }
      },
      "required": [
        "containing_folder_id",
        "directory_name"
      ]
    }
  },
  {
    "name": "modify_asset_details",
    "description": "Updates the metadata of an existing asset and returns the updated asset.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_asset_id": {
          "type": "string",
          "description": "The ID of the asset to update."
        },
        "new_asset_name": {
          "type": "string",
          "description": "New name for the asset (max 50 characters)."
        },
        "new_asset_tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "New list of tags for the asset (max 50 tags)."
        }
      },
      "required": [
        "target_asset_id"
      ]
    }
  },
  {
    "name": "permanently_remove_asset",
    "description": "Deletes an asset by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "asset_to_remove_id": {
          "type": "string",
          "description": "The ID of the asset to delete."
        }
      },
      "required": [
        "asset_to_remove_id"
      ]
    }
  },
  {
    "name": "post_reply_to_thread",
    "description": "Adds a reply to a comment thread on a design.",
    "parameters": {
      "type": "object",
      "properties": {
        "related_design_id": {
          "type": "string",
          "description": "The ID of the design the thread belongs to."
        },
        "parent_thread_id": {
          "type": "string",
          "description": "The ID of the thread to reply to."
        },
        "reply_content": {
          "type": "string",
          "description": "The plaintext message body of the reply. Mentions use [user_id:team_id]."
        }
      },
      "required": [
        "parent_thread_id",
        "related_design_id",
        "reply_content"
      ]
    }
  },
  {
    "name": "query_design_export_status",
    "description": "Retrieves the status and results of a design export job.",
    "parameters": {
      "type": "object",
      "properties": {
        "export_task_identifier": {
          "type": "string",
          "description": "REQUIRED. The export job ID."
        }
      },
      "required": [
        "export_task_identifier"
      ]
    }
  },
  {
    "name": "remove_directory_and_contents",
    "description": "Deletes a folder and all its contents recursively.",
    "parameters": {
      "type": "object",
      "properties": {
        "folder_to_delete_id": {
          "type": "string",
          "description": "ID of the folder to delete."
        }
      },
      "required": [
        "folder_to_delete_id"
      ]
    }
  },
  {
    "name": "rename_directory",
    "description": "Updates the name of a folder and its modification timestamp.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_directory_id": {
          "type": "string",
          "description": "ID of the folder to update."
        },
        "updated_directory_name": {
          "type": "string",
          "description": "New name for the folder (1â€“255 characters)."
        }
      },
      "required": [
        "target_directory_id",
        "updated_directory_name"
      ]
    }
  },
  {
    "name": "retrieve_artwork_metadata",
    "description": "Retrieves metadata for a single design.",
    "parameters": {
      "type": "object",
      "properties": {
        "artwork_identifier": {
          "type": "string",
          "description": "The ID of the design. Must be a non-empty string."
        }
      },
      "required": [
        "artwork_identifier"
      ]
    }
  },
  {
    "name": "retrieve_brand_template_schema",
    "description": "Gets the dataset definition of a brand template. If the brand template contains autofill data fields,\n\nthis returns an object with the data field names and the type of data they accept.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_template_id": {
          "type": "string",
          "description": "The brand template ID."
        }
      },
      "required": [
        "target_template_id"
      ]
    }
  },
  {
    "name": "retrieve_directory_details",
    "description": "Retrieves metadata for a specific folder.",
    "parameters": {
      "type": "object",
      "properties": {
        "directory_identifier": {
          "type": "string",
          "description": "ID of the folder to retrieve."
        }
      },
      "required": [
        "directory_identifier"
      ]
    }
  },
  {
    "name": "retrieve_specific_reply",
    "description": "Retrieves a specific reply from a thread on a design.",
    "parameters": {
      "type": "object",
      "properties": {
        "design_context_id": {
          "type": "string",
          "description": "The ID of the design."
        },
        "containing_thread_id": {
          "type": "string",
          "description": "The ID of the thread the reply belongs to."
        },
        "reply_identifier": {
          "type": "string",
          "description": "The ID of the reply to retrieve."
        }
      },
      "required": [
        "containing_thread_id",
        "design_context_id",
        "reply_identifier"
      ]
    }
  },
  {
    "name": "retrieve_user_profile_data",
    "description": "Retrieves the profile data for the given user ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_account_id": {
          "type": "string",
          "description": "Unique identifier of the user."
        }
      },
      "required": [
        "user_account_id"
      ]
    }
  },
  {
    "name": "search_canva_creations",
    "description": "Lists user-owned and shared designs, optionally filtered and sorted.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_keyword": {
          "type": "string",
          "description": "Search term to filter designs by title (max length: 255)."
        },
        "access_level_filter": {
          "type": "string",
          "description": "Filter by ownership - \"any\", \"owned\", or \"shared\".\nDefaults to \"any\"."
        },
        "result_ordering_preference": {
          "type": "string",
          "description": "Sort options - \"relevance\", \"modified_descending\", \"modified_ascending\",\n\"title_descending\", \"title_ascending\". Defaults to \"relevance\"."
        }
      }
    }
  },
  {
    "name": "start_media_upload_process",
    "description": "Creates an asset upload job and returns its initial status.",
    "parameters": {
      "type": "object",
      "properties": {
        "asset_filename": {
          "type": "string",
          "description": "The name of the asset being uploaded."
        },
        "asset_keywords": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the asset (max 50)."
        },
        "preview_image_url": {
          "type": "string",
          "description": "URL to the thumbnail image representing the asset."
        }
      },
      "required": [
        "asset_filename",
        "asset_keywords",
        "preview_image_url"
      ]
    }
  },
  {
    "name": "start_new_discussion_thread",
    "description": "Creates a new comment thread on a design.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_design_id": {
          "type": "string",
          "description": "The ID of the design to add a comment to."
        },
        "comment_text": {
          "type": "string",
          "description": "The plaintext body of the comment. User mentions must follow the format [user_id:team_id]."
        },
        "assigned_user_identifier": {
          "type": "string",
          "description": "Optional ID of the user to assign the comment to.\nThe user must be mentioned in the comment message."
        }
      },
      "required": [
        "comment_text",
        "target_design_id"
      ]
    }
  }
]