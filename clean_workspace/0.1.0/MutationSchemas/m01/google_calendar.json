[
  {
    "name": "add_calendar_access_rule",
    "description": "Creates a new access control rule for the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_calendar_for_permission": {
          "type": "string",
          "description": "The ID of the calendar to create the rule for."
        },
        "notify_on_permission_change": {
          "type": "boolean",
          "description": "Whether to send notifications to the rule's scope. Defaults to True."
        },
        "new_permission_rule_data": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "The role to assign (e.g., 'reader', 'writer')."
            },
            "scope": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of scope (e.g., 'user', 'group')."
                },
                "value": {
                  "type": "string",
                  "description": "The value of the scope (e.g., email address)."
                }
              },
              "description": "The scope of the rule:",
              "required": [
                "type",
                "value"
              ]
            },
            "ruleId": {
              "type": "string",
              "description": "The ID of the rule. If not provided, one will be generated."
            }
          },
          "description": "The rule details:",
          "required": [
            "role",
            "scope"
          ]
        }
      },
      "required": [
        "target_calendar_for_permission"
      ]
    }
  },
  {
    "name": "add_calendar_to_my_list",
    "description": "Creates a new calendar list entry in the user's calendar list.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_calendar_list_entry_info": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the calendar list entry. If not provided, a UUID will be generated."
            },
            "summary": {
              "type": "string",
              "description": "The summary of the calendar list entry."
            },
            "description": {
              "type": "string",
              "description": "The description of the calendar list entry."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone of the calendar list entry (e.g. \"America/New_York\")."
            }
          },
          "description": "The resource to create the calendar list entry with.",
          "required": [
            "description",
            "summary",
            "timeZone"
          ]
        }
      },
      "required": [
        "new_calendar_list_entry_info"
      ]
    }
  },
  {
    "name": "add_event_from_definition",
    "description": "Imports an event into the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "destination_calendar_for_import": {
          "type": "string",
          "description": "The identifier of the calendar."
        },
        "meeting_data_schema_version": {
          "type": "integer",
          "description": "The version of the conference data.\nDefaults to 0."
        },
        "enable_event_attachments": {
          "type": "boolean",
          "description": "Whether the event supports attachments.\nDefaults to False."
        },
        "event_definition_payload": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the event. If not provided,\n    a new UUID will be generated."
            },
            "summary": {
              "type": "string",
              "description": "The summary/title of the event."
            },
            "description": {
              "type": "string",
              "description": "The description of the event."
            },
            "start": {
              "type": "object",
              "properties": {
                "dateTime": {
                  "type": "string",
                  "description": "The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                }
              },
              "description": "The start time of the event.",
              "required": [
                "dateTime"
              ]
            },
            "end": {
              "type": "object",
              "properties": {
                "dateTime": {
                  "type": "string",
                  "description": "The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
                }
              },
              "description": "The end time of the event.",
              "required": [
                "dateTime"
              ]
            }
          },
          "description": "The event to import:",
          "required": [
            "end",
            "start",
            "summary"
          ]
        }
      },
      "required": [
        "destination_calendar_for_import"
      ]
    }
  },
  {
    "name": "create_event_from_text_prompt",
    "description": "Creates an event based on a simple text string.",
    "parameters": {
      "type": "object",
      "properties": {
        "quick_add_calendar_id": {
          "type": "string",
          "description": "The identifier of the calendar."
        },
        "should_alert_on_quick_add": {
          "type": "boolean",
          "description": "Whether to send notifications about the creation.\nDefaults to False."
        },
        "quick_add_update_channel": {
          "type": "string",
          "description": "Whether to send updates about the creation.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None."
        },
        "natural_language_event_description": {
          "type": "string",
          "description": "The text to parse into an event. This should be a natural language\ndescription of the event, such as \"Lunch with John at noon tomorrow\"."
        }
      },
      "required": [
        "quick_add_calendar_id"
      ]
    }
  },
  {
    "name": "establish_new_secondary_calendar",
    "description": "Creates a secondary calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_calendar_specifications": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the calendar."
            },
            "summary": {
              "type": "string",
              "description": "The Title of the calendar."
            },
            "description": {
              "type": "string",
              "description": "The description of the calendar."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone of the calendar (e.g. \"America/New_York\")."
            },
            "location": {
              "type": "string",
              "description": "Geographic location of the calendar as free-form text."
            },
            "etag": {
              "type": "string",
              "description": "ETag of the resource. Used for optimistic concurrency control."
            },
            "kind": {
              "type": "string",
              "description": "Type of the resource (\"calendar#calendar\")."
            },
            "conferenceProperties": {
              "type": "object",
              "properties": {
                "allowedConferenceSolutionTypes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of conference solution types that are supported for this calendar.\n        Each string in the list can be one of:\n        - \"eventHangout\"\n        - \"eventNamedHangout\"\n        - \"hangoutsMeet\""
                }
              },
              "description": "Conference-related properties."
            }
          },
          "description": "The resource to create the calendar with."
        }
      }
    }
  },
  {
    "name": "fetch_calendar_from_my_list",
    "description": "Retrieves a calendar list entry from the user's calendar list.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_list_entry_to_retrieve": {
          "type": "string",
          "description": "The ID of the calendar list entry to retrieve. If \"primary\" is provided, the primary calendar will be returned."
        }
      },
      "required": [
        "calendar_list_entry_to_retrieve"
      ]
    }
  },
  {
    "name": "fetch_calendar_properties",
    "description": "Retrieves metadata for a specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_metadata_retrieval": {
          "type": "string",
          "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
        }
      },
      "required": [
        "calendar_id_for_metadata_retrieval"
      ]
    }
  },
  {
    "name": "fetch_event_details",
    "description": "Retrieves an event from the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "deprecated_email_inclusion_flag": {
          "type": "boolean",
          "description": "Deprecated. This parameter is ignored as email addresses\nare always included in the response. Defaults to False."
        },
        "calendar_source_id": {
          "type": "string",
          "description": "The identifier of the calendar. Defaults to \"primary\".\nTo retrieve calendar IDs call the calendarList.list method.\nIf you want to access the primary calendar of the currently logged in user,\nuse the \"primary\" keyword."
        },
        "specific_event_identifier": {
          "type": "string",
          "description": "The identifier of the event to retrieve. This is mandatory."
        },
        "attendee_count_limit": {
          "type": "integer",
          "description": "The maximum number of attendees to return (must be non-negative).\nDefaults to None (return all attendees)."
        },
        "response_display_timezone": {
          "type": "string",
          "description": "The time zone to use for the response (e.g. \"America/New_York\").\nDefaults to the calendar's time zone."
        }
      }
    }
  },
  {
    "name": "fetch_permission_rule",
    "description": "Retrieves an access control rule from the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_acl_retrieval": {
          "type": "string",
          "description": "The ID of the calendar to get the rule from."
        },
        "access_rule_identifier": {
          "type": "string",
          "description": "The ID of the rule to retrieve."
        }
      },
      "required": [
        "access_rule_identifier",
        "calendar_id_for_acl_retrieval"
      ]
    }
  },
  {
    "name": "fully_replace_calendar_details",
    "description": "Replaces an existing calendar with new data.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_full_update": {
          "type": "string",
          "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
        },
        "complete_new_calendar_metadata": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "The summary of the calendar."
            },
            "description": {
              "type": "string",
              "description": "The description of the calendar."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone of the calendar (e.g. \"America/New_York\")."
            }
          },
          "description": "The resource to update the calendar with."
        }
      },
      "required": [
        "calendar_id_for_full_update"
      ]
    }
  },
  {
    "name": "get_all_calendar_permission_rules",
    "description": "Lists all access control rules for the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_rule_listing": {
          "type": "string",
          "description": "The ID of the calendar to list rules for."
        },
        "max_rules_to_fetch": {
          "type": "integer",
          "description": "Maximum number of rules to return. Defaults to 100."
        },
        "rule_list_pagination_token": {
          "type": "string",
          "description": "Token for pagination. Not implemented."
        },
        "include_removed_rules": {
          "type": "boolean",
          "description": "Whether to include deleted rules. Not implemented."
        },
        "rule_list_sync_token": {
          "type": "string",
          "description": "Token for synchronization. Not implemented."
        }
      },
      "required": [
        "calendar_id_for_rule_listing"
      ]
    }
  },
  {
    "name": "get_recurring_event_occurrences",
    "description": "Returns instances of a specified recurring event.\n\nThis is a mock, so we won't actually expand recurrences.\nWe'll pretend the event itself is the only instance.",
    "parameters": {
      "type": "object",
      "properties": {
        "force_email_inclusion": {
          "type": "boolean",
          "description": "Whether to include the email address of the event creator.\nDefaults to False."
        },
        "calendar_context_identifier": {
          "type": "string",
          "description": "The identifier of the calendar. If not provided, defaults to \"primary\"."
        },
        "base_recurring_event_id": {
          "type": "string",
          "description": "The identifier of the event."
        },
        "maximum_attendees_to_show": {
          "type": "integer",
          "description": "The maximum number of attendees to return.\nMust be non-negative. Defaults to None (return all attendees)."
        },
        "max_instances_to_return": {
          "type": "integer",
          "description": "The maximum number of instances to return.\nMust be a positive integer. Defaults to 250."
        },
        "instance_original_start_datetime": {
          "type": "string",
          "description": "The original start time of the instance in ISO 8601 format."
        },
        "pagination_cursor": {
          "type": "string",
          "description": "The token for the next page of results."
        },
        "include_cancelled_instances": {
          "type": "boolean",
          "description": "Whether to include deleted instances.\nDefaults to False."
        },
        "upper_datetime_boundary": {
          "type": "string",
          "description": "The maximum time of the instances to return in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
        },
        "lower_datetime_boundary": {
          "type": "string",
          "description": "The minimum time of the instances to return in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format."
        },
        "timezone_for_instances": {
          "type": "string",
          "description": "The time zone to use for the response (e.g. \"America/New_York\").\nMust be in format 'Continent/City'. Defaults to the calendar's time zone."
        }
      }
    }
  },
  {
    "name": "modify_event_partially",
    "description": "Updates specific fields of an existing event.\n\nThis function allows partial updates to an event by providing only the fields \nthat need to be changed.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_containing_the_event": {
          "type": "string",
          "description": "The identifier of the calendar. Defaults to \"primary\"."
        },
        "event_id_for_patching": {
          "type": "string",
          "description": "The identifier of the event to update."
        },
        "event_update_fields": {
          "type": "object",
          "properties": {},
          "description": "The fields to update."
        },
        "modification_update_policy": {
          "type": "string",
          "description": "Whether to send updates about the patch.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None.\nNote: sendUpdates functionality is not implemented yet.\nValidated structure:\n- summary (Optional[str]): The new summary/title of the event.\n- description (Optional[str]): The new description of the event.\n- start (Optional[Dict[str, Any]]): The new start time of the event.\n    - dateTime (Optional[str]): The date and time in ISO 8601 format (e.g., \"2025-03-10T09:00:00Z\").\n- end (Optional[Dict[str, Any]]): The new end time of the event.\n    - dateTime (Optional[str]): The date and time in ISO 8601 format (e.g., \"2025-03-10T09:30:00Z\").\n- attendees (Optional[List[Dict[str, Any]]]): The new list of attendees.\n    Each attendee dict contains:\n    - email (Optional[str]): The attendee's email address.\n    - displayName (Optional[str]): The attendee's name.\n    - organizer (Optional[bool]): Whether the attendee is the organizer.\n    - self (Optional[bool]): Whether this represents the calendar owner.\n    - resource (Optional[bool]): Whether the attendee is a resource (room, equipment).\n    - optional (Optional[bool]): Whether this is an optional attendee.\n    - responseStatus (Optional[str]): Response status (\"needsAction\", \"declined\", \"tentative\", \"accepted\").\n    - comment (Optional[str]): The attendee's comment.\n    - additionalGuests (Optional[int]): Number of additional guests.\n- location (Optional[str]): The new location of the event.\n- recurrence (Optional[List[str]]): The new recurrence rules of the event.\n- reminders (Optional[Dict[str, Any]]): The new reminders of the event.\n    - useDefault (Optional[bool]): Whether to use default calendar reminders.\n    - overrides (Optional[List[Dict[str, Any]]]): Custom reminder overrides.\n        Each override dict contains:\n        - method (Optional[str]): Reminder method.\n        - minutes (Optional[int]): Minutes before event start."
        }
      }
    }
  },
  {
    "name": "modify_existing_permission_rule",
    "description": "Updates specific fields of an existing access control rule.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_rule_patch": {
          "type": "string",
          "description": "The ID of the calendar containing the rule."
        },
        "rule_identifier_to_modify": {
          "type": "string",
          "description": "The ID of the rule to update."
        },
        "alert_on_rule_modification": {
          "type": "boolean",
          "description": "Whether to send notifications. Defaults to True."
        },
        "permission_rule_update_data": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "New role to assign."
            },
            "scope": {
              "type": "object",
              "properties": {},
              "description": "New scope settings."
            }
          },
          "description": "The fields to update:",
          "required": [
            "role",
            "scope"
          ]
        }
      },
      "required": [
        "calendar_id_for_rule_patch",
        "rule_identifier_to_modify"
      ]
    }
  },
  {
    "name": "modify_my_calendar_list_item",
    "description": "Updates specific fields of an existing calendar list entry.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_list_entry_to_patch": {
          "type": "string",
          "description": "The ID of the calendar list entry to patch. If \"primary\" is provided, the primary calendar will be patched."
        },
        "use_rgb_for_color": {
          "type": "boolean",
          "description": "Whether to use RGB color format. Defaults to False."
        },
        "calendar_list_item_updates": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "The summary of the calendar list entry."
            },
            "description": {
              "type": "string",
              "description": "The description of the calendar list entry."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone of the calendar list entry (e.g. \"America/New_York\")."
            }
          },
          "description": "The resource to patch the calendar list entry with.",
          "required": [
            "description",
            "summary",
            "timeZone"
          ]
        }
      },
      "required": [
        "calendar_list_entry_to_patch"
      ]
    }
  },
  {
    "name": "monitor_event_modifications",
    "description": "Sets up a watch for changes to events in the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "always_include_creator_email": {
          "type": "boolean",
          "description": "Whether to always include the email address\nof the event creator. Defaults to False."
        },
        "calendar_id_to_monitor": {
          "type": "string",
          "description": "The identifier of the calendar. If not provided,\ndefaults to the user's primary calendar."
        },
        "event_categories_to_watch": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The types of events to watch for.\nMust be one or more of: \"default\", \"focusTime\", \"outOfOffice\"."
        },
        "ical_identifier_filter": {
          "type": "string",
          "description": "The iCalUID of the event to filter by."
        },
        "watch_attendee_limit": {
          "type": "integer",
          "description": "The maximum number of attendees to return per event.\nMust be a positive integer if provided."
        },
        "watch_max_results": {
          "type": "integer",
          "description": "The maximum number of events to return.\nMust be a positive integer. Defaults to 250."
        },
        "watch_result_sort_key": {
          "type": "string",
          "description": "The order of the events.\nMust be one of: \"startTime\", \"updated\"."
        },
        "watch_results_page_token": {
          "type": "string",
          "description": "Token specifying which result page to return."
        },
        "private_metadata_filter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Private extended property filters\nin the form \"key=value\"."
        },
        "watch_search_text": {
          "type": "string",
          "description": "Free text search terms to find events that match."
        },
        "shared_metadata_filter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Shared extended property filters\nin the form \"key=value\"."
        },
        "include_deleted_in_watch": {
          "type": "boolean",
          "description": "Whether to include deleted events.\nDefaults to False."
        },
        "reveal_hidden_invitations_in_watch": {
          "type": "boolean",
          "description": "Whether to include hidden invitations.\nDefaults to False."
        },
        "expand_recurring_events_in_watch": {
          "type": "boolean",
          "description": "Whether to expand recurring events into instances.\nDefaults to False."
        },
        "watch_synchronization_token": {
          "type": "string",
          "description": "Token obtained from the nextSyncToken field returned on the\nlast page of results from the previous list request."
        },
        "watch_end_time_filter": {
          "type": "string",
          "description": "Upper bound (exclusive) for an event's start time in\nISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
        },
        "watch_start_time_filter": {
          "type": "string",
          "description": "Lower bound (inclusive) for an event's end time in\nISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
        },
        "watch_response_timezone": {
          "type": "string",
          "description": "Time zone used in the response (e.g. \"America/New_York\").\nThe default is the calendar's time zone."
        },
        "min_last_modified_filter": {
          "type": "string",
          "description": "Lower bound for an event's last modification time in\nISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
        },
        "watch_notification_channel_config": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the watch. If not provided,\n    a new UUID will be generated."
            },
            "type": {
              "type": "string",
              "description": "The type of the watch. Defaults to \"web_hook\"."
            },
            "address": {
              "type": "string",
              "description": "The address to send notifications to."
            }
          },
          "description": "The watch configuration:"
        }
      }
    }
  },
  {
    "name": "monitor_my_calendar_list_updates",
    "description": "Sets up a watch for changes to calendar list entries.",
    "parameters": {
      "type": "object",
      "properties": {
        "watch_list_item_limit": {
          "type": "integer",
          "description": "Maximum number of calendar list entries to return.\nMust be between 1 and 250. Defaults to 100."
        },
        "required_access_level_filter": {
          "type": "string",
          "description": "The minimum access role required to view the\ncalendar list entries. Must be one of: \"freeBusyReader\", \"owner\", \"reader\", \"writer\"."
        },
        "calendar_list_watch_page_token": {
          "type": "string",
          "description": "Token specifying which result page to return."
        },
        "include_deleted_list_entries": {
          "type": "boolean",
          "description": "Whether to include deleted calendar list entries\nin the result. Defaults to False."
        },
        "include_hidden_list_entries": {
          "type": "boolean",
          "description": "Whether to show hidden entries. Defaults to False."
        },
        "list_watch_sync_token": {
          "type": "string",
          "description": "Token obtained from the nextSyncToken field returned\non the last page of results from the previous list request. Cannot be used\ntogether with minAccessRole."
        },
        "list_watch_channel_details": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Channel ID. If not provided, one will be generated."
            },
            "type": {
              "type": "string",
              "description": "Type of watch. Defaults to \"web_hook\"."
            }
          },
          "description": "Watch configuration:",
          "required": [
            "id",
            "type"
          ]
        }
      }
    }
  },
  {
    "name": "monitor_permission_rule_modifications",
    "description": "Sets up a watch for changes to access control rules.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_acl_watch": {
          "type": "string",
          "description": "The ID of the calendar to watch."
        },
        "max_rules_in_watch_feed": {
          "type": "integer",
          "description": "Maximum number of rules to return. Defaults to 100."
        },
        "acl_watch_pagination_token": {
          "type": "string",
          "description": "Token for pagination. Not implemented."
        },
        "include_deleted_rules_in_watch": {
          "type": "boolean",
          "description": "Whether to include deleted rules. Not implemented."
        },
        "acl_synchronization_token": {
          "type": "string",
          "description": "Token for synchronization. Not implemented."
        },
        "acl_watch_channel_setup": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of watch (defaults to \"web_hook\")."
            },
            "id": {
              "type": "string",
              "description": "Channel ID. If not provided, one will be generated."
            }
          },
          "description": "Watch configuration:",
          "required": [
            "type"
          ]
        }
      },
      "required": [
        "calendar_id_for_acl_watch"
      ]
    }
  },
  {
    "name": "partially_update_calendar_details",
    "description": "Updates specific fields of an existing calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_patch": {
          "type": "string",
          "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
        },
        "calendar_metadata_to_update": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "The summary of the calendar."
            },
            "description": {
              "type": "string",
              "description": "The description of the calendar."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone of the calendar (e.g. \"America/New_York\")."
            }
          },
          "description": "The resource to patch the calendar with."
        }
      },
      "required": [
        "calendar_id_for_patch"
      ]
    }
  },
  {
    "name": "purge_main_calendar",
    "description": "Clears a primary calendar. This operation deletes all events associated with the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "primary_calendar_to_erase_id": {
          "type": "string",
          "description": "The identifier of the calendar.\n- To retrieve calendar IDs, call the `calendarList.list` method.\n- Use the keyword \"primary\" to access the primary calendar of the currently logged-in user."
        }
      },
      "required": [
        "primary_calendar_to_erase_id"
      ]
    }
  },
  {
    "name": "relocate_event_to_another_calendar",
    "description": "Moves an event from one calendar to another. We simulate by removing from old\n\nand creating in new with same ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "source_calendar_identifier": {
          "type": "string",
          "description": "The identifier of the source calendar."
        },
        "event_to_relocate_id": {
          "type": "string",
          "description": "The identifier of the event to move."
        },
        "target_calendar_for_move": {
          "type": "string",
          "description": "The identifier of the destination calendar."
        },
        "notify_participants_on_move": {
          "type": "boolean",
          "description": "Whether to send notifications about the move.\nDefaults to False."
        },
        "move_update_distribution": {
          "type": "string",
          "description": "Whether to send updates about the move.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None."
        }
      },
      "required": [
        "event_to_relocate_id",
        "source_calendar_identifier",
        "target_calendar_for_move"
      ]
    }
  },
  {
    "name": "remove_auxiliary_calendar",
    "description": "Deletes a secondary calendar. This operation removes the calendar from the user's calendar list.\n\nNote: Primary calendars cannot be deleted.",
    "parameters": {
      "type": "object",
      "properties": {
        "secondary_calendar_to_remove_id": {
          "type": "string",
          "description": "The identifier of the secondary calendar to delete.\nTo retrieve calendar IDs, call the `calendarList.list` method."
        }
      },
      "required": [
        "secondary_calendar_to_remove_id"
      ]
    }
  },
  {
    "name": "remove_calendar_event",
    "description": "Deletes an event from the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_calendar_id": {
          "type": "string",
          "description": "The identifier of the calendar containing the event to delete."
        },
        "event_to_be_deleted_id": {
          "type": "string",
          "description": "The identifier of the event to delete."
        },
        "deletion_update_policy": {
          "type": "string",
          "description": "Whether to send updates about the deletion.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None.\nNote: sendUpdates functionality is not implemented yet."
        }
      },
      "required": [
        "event_to_be_deleted_id",
        "target_calendar_id"
      ]
    }
  },
  {
    "name": "remove_calendar_from_my_list",
    "description": "Deletes a calendar list entry from the user's calendar list.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_list_entry_to_delete": {
          "type": "string",
          "description": "The ID of the calendar list entry to delete."
        }
      },
      "required": [
        "calendar_list_entry_to_delete"
      ]
    }
  },
  {
    "name": "remove_calendar_permission_rule",
    "description": "Deletes an access control rule from the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "acl_calendar_identifier": {
          "type": "string",
          "description": "The ID of the calendar to delete the rule from."
        },
        "permission_rule_to_delete_id": {
          "type": "string",
          "description": "The ID of the rule to delete."
        }
      },
      "required": [
        "acl_calendar_identifier",
        "permission_rule_to_delete_id"
      ]
    }
  },
  {
    "name": "replace_access_control_rule",
    "description": "Replaces an existing access control rule with new data.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_id_for_rule_replacement": {
          "type": "string",
          "description": "The ID of the calendar containing the rule."
        },
        "rule_identifier_to_replace": {
          "type": "string",
          "description": "The ID of the rule to update."
        },
        "should_notify_on_replacement": {
          "type": "boolean",
          "description": "Whether to send notifications. Defaults to True."
        },
        "full_replacement_rule_data": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "New role to assign."
            },
            "scope": {
              "type": "object",
              "properties": {},
              "description": "New scope settings."
            }
          },
          "description": "The complete new rule data:",
          "required": [
            "role",
            "scope"
          ]
        }
      },
      "required": [
        "calendar_id_for_rule_replacement",
        "rule_identifier_to_replace"
      ]
    }
  },
  {
    "name": "replace_existing_event",
    "description": "Replaces an existing event with new data.",
    "parameters": {
      "type": "object",
      "properties": {
        "event_id_to_be_updated": {
          "type": "string",
          "description": "The identifier of the event to update."
        },
        "calendar_location_id": {
          "type": "string",
          "description": "The identifier of the calendar."
        },
        "complete_event_data_for_update": {
          "type": "object",
          "properties": {},
          "description": "The event to update. Must contain:"
        },
        "replacement_update_notification_mode": {
          "type": "string",
          "description": "Whether to send updates about the update.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None.\nNote: sendUpdates functionality is not implemented yet.\n- summary (str): The summary/title of the event.\n- id (Optional[str]): The identifier of the event.\n- description (Optional[str]): The description of the event.\n- start (Optional[Dict[str, Any]]): The start time of the event.\n    - dateTime (Optional[str]): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.\n    - timeZone (Optional[str]): The time zone of the start time.\n- end (Optional[Dict[str, Any]]): The end time of the event.\n    - dateTime (Optional[str]): The date and time of the end time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.\n    - timeZone (Optional[str]): The time zone of the end time.\n- recurrence (Optional[List[str]]): The recurrence rules of the event in RRULE format.\n    Examples:\n    - Daily for 5 occurrences: [\"RRULE:FREQ=DAILY;COUNT=5\"]\n    - Weekly on Monday and Wednesday: [\"RRULE:FREQ=WEEKLY;BYDAY=MO,WE\"]\n    - Monthly on the 15th: [\"RRULE:FREQ=MONTHLY;BYMONTHDAY=15\"]\n    - Yearly on January 1st: [\"RRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1\"]\n    - Every 2 weeks: [\"RRULE:FREQ=WEEKLY;INTERVAL=2\"]\n    - Until a specific date: [\"RRULE:FREQ=DAILY;UNTIL=20241231T235959Z\"]\n\n    Supported RRULE parameters:\n    - FREQ: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY (required)\n    - INTERVAL: Positive integer (default: 1)\n    - COUNT: Positive integer (number of occurrences)\n    - UNTIL: YYYYMMDDTHHMMSSZ or YYYYMMDDTHHMMSS format\n    - BYDAY: SU,MO,TU,WE,TH,FR,SA (with optional ordinal: 1SU, -1MO)\n    - BYMONTH: 1-12\n    - BYMONTHDAY: 1-31\n    - BYYEARDAY: 1-366\n    - BYWEEKNO: 1-53\n    - BYHOUR: 0-23\n    - BYMINUTE: 0-59\n    - BYSECOND: 0-59\n    - BYSETPOS: 1-366 or -366 to -1\n    - WKST: SU,MO,TU,WE,TH,FR,SA (week start)\n\n- attendees (Optional[List[Dict[str, Any]]]): List of event attendees. Each attendee can have:\n    - email (Optional[str]): The attendee's email address\n    - displayName (Optional[str]): The attendee's display name\n    - organizer (Optional[bool]): Whether the attendee is the organizer\n    - self (Optional[bool]): Whether the attendee is the user\n    - resource (Optional[bool]): Whether the attendee is a resource\n    - optional (Optional[bool]): Whether the attendee's presence is optional\n    - responseStatus (Optional[str]): The attendee's response status\n    - comment (Optional[str]): The attendee's comment\n    - additionalGuests (Optional[int]): Number of additional guests\n- reminders (Optional[Dict[str, Any]]): The reminders of the event.\n    - useDefault (Optional[bool]): Whether to use the default reminders.\n    - overrides (Optional[List[Dict[str, Any]]]): The list of overrides.\n        - method (Optional[str]): The method of the reminder.\n        - minutes (Optional[int]): The minutes of the reminder.\n- location (Optional[str]): The location of the event."
        }
      },
      "required": [
        "event_id_to_be_updated"
      ]
    }
  },
  {
    "name": "replace_my_calendar_list_item",
    "description": "Replaces an existing calendar list entry with new data.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_list_entry_to_replace": {
          "type": "string",
          "description": "The ID of the calendar list entry to replace. If \"primary\" is provided, the primary calendar will be replaced."
        },
        "is_color_in_rgb_format": {
          "type": "boolean",
          "description": "Whether to use RGB color format. Defaults to False."
        },
        "complete_calendar_list_item_data": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "The summary of the calendar list entry."
            },
            "description": {
              "type": "string",
              "description": "The description of the calendar list entry."
            },
            "timeZone": {
              "type": "string",
              "description": "The time zone of the calendar list entry (e.g. \"America/New_York\")."
            }
          },
          "description": "The resource to replace the calendar list entry with.",
          "required": [
            "description",
            "summary",
            "timeZone"
          ]
        }
      },
      "required": [
        "calendar_list_entry_to_replace"
      ]
    }
  },
  {
    "name": "retrieve_color_definitions",
    "description": "Returns the color definitions for calendars and events.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_events_from_calendar",
    "description": "Lists events from the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "selected_calendar_identifier": {
          "type": "string",
          "description": "The identifier of the calendar. Defaults to \"primary\"."
        },
        "result_set_size": {
          "type": "integer",
          "description": "The maximum number of events to return.\nMust be a positive integer. Defaults to 250."
        },
        "search_start_time_filter": {
          "type": "string",
          "description": "The minimum time of the events to return (ISO datetime string)."
        },
        "search_end_time_filter": {
          "type": "string",
          "description": "The maximum time of the events to return (ISO datetime string)."
        },
        "event_search_keyword": {
          "type": "string",
          "description": "The query string to filter events by."
        },
        "expand_recurring_into_instances": {
          "type": "boolean",
          "description": "Whether to expand recurring events into individual instances.\nWhen True, recurring events are expanded into separate instances within the time range.\nWhen False, only the base recurring event is returned. Defaults to False."
        },
        "sorting_criterion": {
          "type": "string",
          "description": "The order of the events.\nMust be one of: \"startTime\", \"updated\". Defaults to None."
        }
      }
    }
  },
  {
    "name": "retrieve_my_calendar_list",
    "description": "Lists all calendar list entries in the user's calendar list.",
    "parameters": {
      "type": "object",
      "properties": {
        "list_entry_limit": {
          "type": "integer",
          "description": "Maximum number of calendar list entries to return.\nMust be a positive integer. Defaults to 100."
        }
      }
    }
  },
  {
    "name": "schedule_new_calendar_event",
    "description": "Creates a new event in the specified calendar.",
    "parameters": {
      "type": "object",
      "properties": {
        "calendar_for_new_event": {
          "type": "string",
          "description": "The identifier of the calendar. Defaults to the user's primary calendar."
        },
        "new_event_configuration": {
          "type": "object",
          "properties": {},
          "description": "The event to create:"
        },
        "creation_notification_preference": {
          "type": "string",
          "description": "Whether to send updates about the creation.\nPossible values: \"all\", \"externalOnly\", \"none\". Defaults to None.\nNote: sendUpdates functionality is not implemented yet.\n- id (str, optional): The identifier of the event. If not provided,\n    a new UUID will be generated.\n- summary (str): The summary/title of the event.\n- description (str, optional): The description of the event.\n- start (Dict[str, Any]): The start time of the event.\n    - dateTime (str): The date and time of the start time in ISO 8601(YYYY-MM-DDTHH:MM:SSZ) format.\n- end (Dict[str, Any]): The end time of the event.\n    - dateTime (str): The date and time of the end time.\n- recurrence (Optional[List[str]]): The recurrence rules of the event in RRULE format.\n    Examples:\n    - Daily for 5 occurrences: [\"RRULE:FREQ=DAILY;COUNT=5\"]\n    - Weekly on Monday and Wednesday: [\"RRULE:FREQ=WEEKLY;BYDAY=MO,WE\"]\n    - Monthly on the 15th: [\"RRULE:FREQ=MONTHLY;BYMONTHDAY=15\"]\n    - Yearly on January 1st: [\"RRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1\"]\n    - Every 2 weeks: [\"RRULE:FREQ=WEEKLY;INTERVAL=2\"]\n    - Until a specific date: [\"RRULE:FREQ=DAILY;UNTIL=20241231T235959Z\"]\n\n    Supported RRULE parameters:\n    - FREQ: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY (required)\n    - INTERVAL: Positive integer (default: 1)\n    - COUNT: Positive integer (number of occurrences)\n    - UNTIL: YYYYMMDDTHHMMSSZ or YYYYMMDDTHHMMSS format\n    - BYDAY: SU,MO,TU,WE,TH,FR,SA (with optional ordinal: 1SU, -1MO)\n    - BYMONTH: 1-12\n    - BYMONTHDAY: 1-31\n    - BYYEARDAY: 1-366\n    - BYWEEKNO: 1-53\n    - BYHOUR: 0-23\n    - BYMINUTE: 0-59\n    - BYSECOND: 0-59\n    - BYSETPOS: 1-366 or -366 to -1\n    - WKST: SU,MO,TU,WE,TH,FR,SA (week start)\n\n- attendees (Optional[List[Dict[str, Any]]]): List of event attendees. Each attendee can have:\n    - email (Optional[str]): The attendee's email address\n    - displayName (Optional[str]): The attendee's display name\n    - organizer (Optional[bool]): Whether the attendee is the organizer\n    - self (Optional[bool]): Whether the attendee is the user\n    - resource (Optional[bool]): Whether the attendee is a resource\n    - optional (Optional[bool]): Whether the attendee's presence is optional\n    - responseStatus (Optional[str]): The attendee's response status\n    - comment (Optional[str]): The attendee's comment\n    - additionalGuests (Optional[int]): Number of additional guests\n\n- reminders (Optional[Dict[str, Any]]): The reminders of the event.\n    - useDefault (bool): Whether to use the default reminders.\n    - overrides (Optional[List[Dict[str, Any]]]): The list of overrides.\n        - method (str): The method of the reminder.\n        - minutes (int): The minutes of the reminder.\n- location (Optional[str]): The location of the event."
        }
      }
    }
  },
  {
    "name": "terminate_resource_watch",
    "description": "Stops watching resources through a channel. This operation removes the channel from the\n\nlist of active channels and prevents further notifications from being sent.",
    "parameters": {
      "type": "object",
      "properties": {
        "channel_to_stop_details": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the channel."
            }
          },
          "description": "The resource to stop the channel with.",
          "required": [
            "id"
          ]
        }
      }
    }
  }
]