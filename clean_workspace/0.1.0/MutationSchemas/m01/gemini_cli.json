[
  {
    "name": "commit_fact_to_memory",
    "description": "Save a specific piece of information or fact to long-term memory.\n\nUse this function when the user explicitly asks you to remember something,\nor when they state a clear, concise fact that seems important to retain\nfor future interactions.",
    "parameters": {
      "type": "object",
      "properties": {
        "information_to_store": {
          "type": "string",
          "description": "The specific fact or piece of information to remember.\nShould be a clear, self-contained statement."
        }
      },
      "required": [
        "information_to_store"
      ]
    }
  },
  {
    "name": "execute_workspace_command",
    "description": "Execute a shell command in the simulated workspace environment with all advanced features.\n\nThis function executes shell commands with proper security validation,\nprocess management, and workspace integration. Commands are executed\nin a temporary environment that mirrors the workspace state.\n\nIMPORTANT: For any command that expects user interaction or uses a pager\n(like git diff, git log, less, head, tail, more, etc.), you MUST append\n' | cat' to the command string yourself before passing it to this function.\nFailure to do so will cause the command to hang or fail.",
    "parameters": {
      "type": "object",
      "properties": {
        "command_line_to_execute": {
          "type": "string",
          "description": "The shell command to execute. Must be a valid shell command."
        },
        "command_purpose_description": {
          "type": "string",
          "description": "Brief description of the command's purpose."
        },
        "execution_directory": {
          "type": "string",
          "description": "Directory to execute the command in, relative to\nworkspace root. If not provided, uses current working directory."
        },
        "run_as_background_process": {
          "type": "boolean",
          "description": "Whether to run the command in background.\nBackground commands return immediately with a process ID."
        }
      },
      "required": [
        "command_line_to_execute"
      ]
    }
  },
  {
    "name": "fetch_file_content",
    "description": "Read content from a file in the simulated workspace.\n\nReads and returns the content of a specified file from the local filesystem.\nHandles text, images (PNG, JPG, GIF, WEBP, SVG, BMP), and PDF files. For text \nfiles, it can read specific line ranges with pagination support.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_path_to_read": {
          "type": "string",
          "description": "Absolute path of the file to read. Must be located under\nthe configured workspace_root and not be ignored by .geminiignore patterns."
        },
        "line_offset": {
          "type": "integer",
          "description": "For text files only, the 0-based line number to start \nreading from. Requires 'limit' to be set. Use for paginating through large files."
        },
        "max_lines_to_read": {
          "type": "integer",
          "description": "For text files only, maximum number of lines to read. \nUse with 'offset' to paginate through large files. If omitted, reads up to \n2000 lines by default. Also enforces a per-line length cap of 2000 characters."
        }
      },
      "required": [
        "file_path_to_read"
      ]
    }
  },
  {
    "name": "fetch_multiple_files_content",
    "description": "Read content from multiple files specified by paths or glob patterns.\n\nThis function reads and concatenates content from multiple files. For text files,\nit concatenates their content with separators. For image/PDF files explicitly\nrequested, it returns them as base64-encoded data.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_paths_or_patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. Array of glob patterns or paths relative to the\nworkspace root. Examples: ['src/**/*.py'], ['README.md', 'docs/']"
        },
        "additional_inclusion_patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional glob patterns to include. These are\nmerged with `paths`. Example: [\"*.test.py\"] to add test files."
        },
        "exclusion_glob_patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Glob patterns for files/directories to exclude.\nAdded to default excludes if useDefaultExcludes is True."
        },
        "search_subdirectories": {
          "type": "boolean",
          "description": "Whether to search recursively. Primarily controlled\nby `**` in glob patterns. Defaults to True."
        },
        "apply_default_exclusions": {
          "type": "boolean",
          "description": "Whether to apply default exclusion patterns\n(e.g., node_modules, .git, binary files). Defaults to True."
        },
        "honor_gitignore_file": {
          "type": "boolean",
          "description": "Whether to respect .gitignore patterns.\nDefaults to True (note: simplified implementation for simulation)."
        }
      },
      "required": [
        "file_paths_or_patterns"
      ]
    }
  },
  {
    "name": "find_files_by_pattern",
    "description": "Find files matching a glob pattern, sorted by modification time (newest first).\n\nThis function searches for files matching the specified glob pattern within the\ngiven directory (or workspace root if not specified). Results are sorted with\nrecently modified files (within 24 hours) appearing first by modification time,\nfollowed by older files sorted alphabetically.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_glob_pattern": {
          "type": "string",
          "description": "The glob pattern to match files against. Supports wildcards\nlike '*.py', '**/*.md', 'src/**/*.ts', etc."
        },
        "search_directory": {
          "type": "string",
          "description": "The absolute path to the directory to search within.\nIf not provided, searches the workspace root. Must be within workspace."
        },
        "match_case": {
          "type": "boolean",
          "description": "Whether the pattern matching should be\ncase-sensitive. Defaults to False for case-insensitive matching."
        },
        "use_gitignore_rules": {
          "type": "boolean",
          "description": "Whether to respect .gitignore patterns\nwhen finding files. Only applies if in a git repository. Defaults to True."
        }
      },
      "required": [
        "search_glob_pattern"
      ]
    }
  },
  {
    "name": "find_in_files_regex",
    "description": "Search for a regular expression pattern within file contents.\n\nThis function searches for the specified regex pattern within the content of files\nin the given directory (or workspace root if not specified). It uses a pure Python\nimplementation to search through text files and returns matches with line numbers\nand content.",
    "parameters": {
      "type": "object",
      "properties": {
        "regex_search_pattern": {
          "type": "string",
          "description": "The regular expression pattern to search for within file contents.\nMust be a valid regex pattern (e.g., 'function\\s+myFunction', 'import\\s+\\{.*\\}')."
        },
        "directory_to_search_in": {
          "type": "string",
          "description": "The absolute path to the directory to search within.\nIf not provided, searches the workspace root. Must be within workspace."
        },
        "file_inclusion_glob": {
          "type": "string",
          "description": "A glob pattern to filter which files are searched\n(e.g., '*.js', '*.{ts,tsx}', 'src/**'). If not provided, searches all files\n(respecting common ignore patterns)."
        }
      },
      "required": [
        "regex_search_pattern"
      ]
    }
  },
  {
    "name": "get_directory_contents",
    "description": "List the direct children of a workspace directory.",
    "parameters": {
      "type": "object",
      "properties": {
        "folder_to_inspect": {
          "type": "string",
          "description": "Absolute directory path to list. Must reside inside the\nworkspace root stored in SimulationEngine.db.DB."
        },
        "exclusion_patterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Glob patterns to exclude from the\nlisting, for example ['*.log', 'node_modules']. Defaults to None."
        }
      },
      "required": [
        "folder_to_inspect"
      ]
    }
  },
  {
    "name": "perform_safe_replacement",
    "description": "Perform surgical string replacement with multi-stage self-correction.\n\nThis function implements a sophisticated replacement workflow: checkpoint → diff → write.\nIt performs exact string matching and replacement with intelligent error correction,\nvalidation of expected replacement counts, and comprehensive error handling.\n\nThe function can create new files (when old_string is empty) or perform precise\nreplacements in existing files. It includes multi-stage self-correction to handle\ncommon issues like string escaping problems or whitespace mismatches.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_to_modify": {
          "type": "string",
          "description": "Absolute path to the file to modify. Must be within workspace."
        },
        "string_to_be_replaced": {
          "type": "string",
          "description": "Exact literal text to replace. Must include sufficient context\n(3+ lines before/after) for unique identification. Use empty string to create new file."
        },
        "replacement_text": {
          "type": "string",
          "description": "Exact literal text to replace old_string with. Must be the\ncomplete replacement text with correct whitespace and formatting."
        },
        "expected_occurrence_count": {
          "type": "integer",
          "description": "Number of replacements expected. Defaults to 1.\nUse when replacing multiple occurrences of the same string."
        },
        "was_edited_by_user": {
          "type": "boolean",
          "description": "Whether the edit was modified manually by the user.\nUsed for tracking user modifications. Defaults to None."
        }
      },
      "required": [
        "file_to_modify",
        "replacement_text",
        "string_to_be_replaced"
      ]
    }
  },
  {
    "name": "update_or_create_file",
    "description": "Write content to a specified file, creating parent directories if needed.\n\nThis function writes the provided content to the specified file path. If the file\nalready exists, it will be overwritten. If the file doesn't exist, it (and any\nnecessary parent directories) will be created. The operation executes immediately\nwithout user approval or confirmation prompts.",
    "parameters": {
      "type": "object",
      "properties": {
        "destination_file_path": {
          "type": "string",
          "description": "The absolute path to the file to write to. Must be within\nthe workspace root."
        },
        "data_to_write": {
          "type": "string",
          "description": "The content to write to the file. This will completely replace\nany existing content in the file."
        },
        "is_user_edit": {
          "type": "boolean",
          "description": "Whether the proposed content was modified\nby the user. Defaults to None."
        }
      },
      "required": [
        "data_to_write",
        "destination_file_path"
      ]
    }
  }
]