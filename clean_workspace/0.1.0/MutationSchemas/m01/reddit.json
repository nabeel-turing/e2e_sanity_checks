[
  {
    "name": "add_contributor_to_live_thread",
    "description": "Invites a new contributor to a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "invitee_username": {
          "type": "string",
          "description": "The username of the invitee."
        }
      },
      "required": [
        "invitee_username"
      ]
    }
  },
  {
    "name": "add_image_to_subreddit_stylesheet",
    "description": "Uploads an image for a subreddit's stylesheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "image_key_name": {
          "type": "string",
          "description": "The name/key for the image."
        },
        "image_file_data": {
          "type": "object",
          "properties": {},
          "description": "The image file data."
        }
      },
      "required": [
        "image_file_data",
        "image_key_name"
      ]
    }
  },
  {
    "name": "allow_replies_to_item",
    "description": "Unlocks a previously locked post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_to_unlock_fullname": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "item_to_unlock_fullname"
      ]
    }
  },
  {
    "name": "allow_subreddit_messaging",
    "description": "Unblocks a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "apply_flair_template_to_post",
    "description": "Applies a chosen link flair template to a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_flair": {
          "type": "string",
          "description": "The fullname of the post."
        },
        "selected_flair_template_id": {
          "type": "string",
          "description": "The ID of the flair template."
        }
      },
      "required": [
        "post_fullname_to_flair",
        "selected_flair_template_id"
      ]
    }
  },
  {
    "name": "apply_subreddit_stylesheet_changes",
    "description": "Updates the subreddit's stylesheet.",
    "parameters": {
      "type": "object",
      "properties": {
        "save_operation": {
          "type": "string",
          "description": "The operation (typically \"save\")."
        },
        "new_stylesheet_code": {
          "type": "string",
          "description": "The new stylesheet code."
        }
      },
      "required": [
        "new_stylesheet_code",
        "save_operation"
      ]
    }
  },
  {
    "name": "arrange_flair_templates",
    "description": "Reorders the existing flair templates.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_category_to_reorder": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "new_template_id_order": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An ordered list of flair template IDs."
        }
      },
      "required": [
        "flair_category_to_reorder",
        "new_template_id_order"
      ]
    }
  },
  {
    "name": "arrange_posts_in_collection",
    "description": "Reorders the posts in a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_to_reorder_id": {
          "type": "string",
          "description": "The identifier of the collection."
        },
        "new_post_id_order": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of comma separated link_ids in the order to set them in."
        }
      },
      "required": [
        "collection_to_reorder_id",
        "new_post_id_order"
      ]
    }
  },
  {
    "name": "arrange_subreddit_widgets",
    "description": "Reorders widgets within a specified section.",
    "parameters": {
      "type": "object",
      "properties": {
        "widget_section_name": {
          "type": "string",
          "description": "The section name (e.g., \"sidebar\")."
        },
        "new_widget_id_order": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An ordered list of widget IDs."
        }
      },
      "required": [
        "new_widget_id_order",
        "widget_section_name"
      ]
    }
  },
  {
    "name": "assign_flair_to_user",
    "description": "Sets or updates a user's flair.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_response_format": {
          "type": "string",
          "description": "Must be \"json\"."
        },
        "username_to_flair": {
          "type": "string",
          "description": "The username for which to set flair."
        },
        "chosen_flair_template_id": {
          "type": "string",
          "description": "The ID of the flair template (if using one)."
        },
        "custom_flair_text": {
          "type": "string",
          "description": "Custom flair text if not using a template."
        }
      },
      "required": [
        "api_response_format",
        "username_to_flair"
      ]
    }
  },
  {
    "name": "block_sender_of_message",
    "description": "Blocks a user based on a messaging context.",
    "parameters": {
      "type": "object",
      "properties": {
        "message_context_id": {
          "type": "string",
          "description": "The identifier of the message or user context."
        }
      },
      "required": [
        "message_context_id"
      ]
    }
  },
  {
    "name": "bookmark_item_for_user",
    "description": "Saves a post or comment to the user's saved list.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_save": {
          "type": "string",
          "description": "The fullname of the item to save."
        }
      },
      "required": [
        "item_fullname_to_save"
      ]
    }
  },
  {
    "name": "bulk_update_user_flairs_from_csv",
    "description": "Processes CSV input to set multiple user flairs.",
    "parameters": {
      "type": "object",
      "properties": {
        "csv_formatted_flair_data": {
          "type": "string",
          "description": "A CSV-formatted string with flair data."
        }
      },
      "required": [
        "csv_formatted_flair_data"
      ]
    }
  },
  {
    "name": "cancel_live_thread_contributor_invitation",
    "description": "Revokes a pending contributor invite.",
    "parameters": {
      "type": "object",
      "properties": {
        "username_of_invitee_to_revoke": {
          "type": "string",
          "description": "The username of the invite to revoke."
        }
      },
      "required": [
        "username_of_invitee_to_revoke"
      ]
    }
  },
  {
    "name": "cancel_snooze_on_item_reports",
    "description": "Unsnoozes reports, resuming notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_unsnooze": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "item_fullname_to_unsnooze"
      ]
    }
  },
  {
    "name": "cast_vote_on_content",
    "description": "Casts or revokes a vote on a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_vote_on": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "vote_direction_value": {
          "type": "integer",
          "description": "The vote direction (-1 for downvote, 0 for remove, +1 for upvote)."
        }
      },
      "required": [
        "item_fullname_to_vote_on",
        "vote_direction_value"
      ]
    }
  },
  {
    "name": "check_subreddit_name_availability",
    "description": "Checks for subreddit name availability or suggests names.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_term": {
          "type": "string",
          "description": "The search term for subreddit names."
        }
      },
      "required": [
        "search_term"
      ]
    }
  },
  {
    "name": "conceal_live_thread_discussion",
    "description": "Hides the discussion thread associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "conceal_posts_from_feed",
    "description": "Hides one or more posts from the user's front page.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullnames_to_hide": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of post fullnames to hide."
        }
      },
      "required": [
        "post_fullnames_to_hide"
      ]
    }
  },
  {
    "name": "conceal_specific_announcements",
    "description": "Hides one or more announcements from the authenticated user's feed.",
    "parameters": {
      "type": "object",
      "properties": {
        "ids_of_announcements_to_hide": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of announcement IDs to hide."
        }
      },
      "required": [
        "ids_of_announcements_to_hide"
      ]
    }
  },
  {
    "name": "conceal_wiki_page_revision",
    "description": "Hides a specific revision from the wiki history.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_of_revision": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "revision_id_to_hide": {
          "type": "string",
          "description": "The revision ID to hide."
        }
      },
      "required": [
        "revision_id_to_hide",
        "wiki_page_of_revision"
      ]
    }
  },
  {
    "name": "conclude_live_thread",
    "description": "Closes a live thread to stop further updates.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_live_thread_id": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "target_live_thread_id"
      ]
    }
  },
  {
    "name": "configure_advanced_flair_template",
    "description": "Creates or updates a flair template with advanced options.",
    "parameters": {
      "type": "object",
      "properties": {
        "advanced_template_flair_category": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "advanced_flair_template_text": {
          "type": "string",
          "description": "The flair text."
        }
      },
      "required": [
        "advanced_flair_template_text",
        "advanced_template_flair_category"
      ]
    }
  },
  {
    "name": "configure_basic_flair_template",
    "description": "Creates or updates a flair template.",
    "parameters": {
      "type": "object",
      "properties": {
        "template_flair_category": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        },
        "flair_template_text": {
          "type": "string",
          "description": "The flair text."
        }
      },
      "required": [
        "flair_template_text",
        "template_flair_category"
      ]
    }
  },
  {
    "name": "configure_emoji_display_dimensions",
    "description": "Sets a custom display size for a subreddit emoji.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_emoji_name": {
          "type": "string",
          "description": "The name of the emoji."
        },
        "custom_width_pixels": {
          "type": "integer",
          "description": "The desired width in pixels."
        },
        "custom_height_pixels": {
          "type": "integer",
          "description": "The desired height in pixels."
        }
      },
      "required": [
        "custom_height_pixels",
        "custom_width_pixels",
        "target_emoji_name"
      ]
    }
  },
  {
    "name": "configure_post_contest_mode",
    "description": "Enables or disables contest mode for a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "contest_mode_enabled_state": {
          "type": "boolean",
          "description": "True to enable contest mode, False to disable."
        },
        "target_post_id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "contest_mode_enabled_state",
        "target_post_id"
      ]
    }
  },
  {
    "name": "configure_post_stickiness",
    "description": "Stickies or unstickies a post in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "sticky_slot_position": {
          "type": "integer",
          "description": "The sticky slot number."
        },
        "is_sticky_enabled": {
          "type": "boolean",
          "description": "True to sticky, False to unsticky."
        },
        "post_to_sticky_id": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "is_sticky_enabled",
        "post_to_sticky_id"
      ]
    }
  },
  {
    "name": "configure_subreddit_widget",
    "description": "Creates or updates a subreddit widget.",
    "parameters": {
      "type": "object",
      "properties": {
        "configuration_details": {
          "type": "object",
          "properties": {},
          "description": "The widget configuration data. The format varies based on the widget kind:\n- For 'image' widgets:\n    {\n        \"data\": [\n            {\n                \"height\": int,\n                \"linkUrl\": str (optional),\n                \"url\": str,\n                \"width\": int,\n            },\n            ...\n        ],\n        \"kind\": \"image\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'calendar' widgets:\n    {\n        \"configuration\": {\n            \"numEvents\": int (1-50, default: 10),\n            \"showDate\": bool,\n            \"showDescription\": bool,\n            \"showLocation\": bool,\n            \"showTime\": bool,\n            \"showTitle\": bool,\n        },\n        \"googleCalendarId\": str (email),\n        \"kind\": \"calendar\",\n        \"requiresSync\": bool,\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'textarea' widgets:\n    {\n        \"kind\": \"textarea\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n        \"text\": str (markdown),\n    }\n- For 'menu' widgets:\n    {\n        \"data\": [\n            {\n                \"text\": str (max 20 chars),\n                \"url\": str,\n            }\n            OR\n            {\n                \"children\": [\n                    {\n                        \"text\": str (max 20 chars),\n                        \"url\": str,\n                    },\n                    ...\n                ],\n                \"text\": str (max 20 chars),\n            },\n            ...\n        ],\n        \"kind\": \"menu\",\n        \"showWiki\": bool,\n    }\n- For 'button' widgets:\n    {\n        \"buttons\": [\n            {\n                \"color\": str (6-digit hex),\n                \"fillColor\": str (6-digit hex),\n                \"hoverState\": {\n                    \"color\": str (6-digit hex),\n                    \"fillColor\": str (6-digit hex),\n                    \"kind\": \"text\",\n                    \"text\": str (max 30 chars),\n                    \"textColor\": str (6-digit hex),\n                }\n                OR\n                {\n                    \"height\": int,\n                    \"imageUrl\": str,\n                    \"kind\": \"image\",\n                    \"width\": int,\n                },\n                \"kind\": \"text\",\n                \"text\": str (max 30 chars),\n                \"textColor\": str (6-digit hex),\n                \"url\": str,\n            }\n            OR\n            {\n                \"height\": int,\n                \"hoverState\": {\n                    \"color\": str (6-digit hex),\n                    \"fillColor\": str (6-digit hex),\n                    \"kind\": \"text\",\n                    \"text\": str (max 30 chars),\n                    \"textColor\": str (6-digit hex),\n                }\n                OR\n                {\n                    \"height\": int,\n                    \"imageUrl\": str,\n                    \"kind\": \"image\",\n                    \"width\": int,\n                },\n                \"imageUrl\": str,\n                \"kind\": \"image\",\n                \"linkUrl\": str,\n                \"text\": str (max 30 chars),\n                \"width\": int,\n            },\n            ...\n        ],\n        \"description\": str (markdown),\n        \"kind\": \"button\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'community-list' widgets:\n    {\n        \"data\": [\n            str (subreddit name),\n            ...\n        ],\n        \"kind\": \"community-list\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }\n- For 'custom' widgets:\n    {\n        \"css\": str (max 100000 chars),\n        \"height\": int (50-500),\n        \"imageData\": [\n            {\n                \"height\": int,\n                \"name\": str (max 20 chars),\n                \"url\": str,\n                \"width\": int,\n            },\n            ...\n        ],\n        \"kind\": \"custom\",\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n        \"text\": str (markdown),\n    }\n- For 'post-flair' widgets:\n    {\n        \"display\": str (\"cloud\" or \"list\"),\n        \"kind\": \"post-flair\",\n        \"order\": [\n            str (flair template ID),\n            ...\n        ],\n        \"shortName\": str (max 30 chars),\n        \"styles\": {\n            \"backgroundColor\": str (6-digit hex),\n            \"headerColor\": str (6-digit hex),\n        },\n    }"
        }
      },
      "required": [
        "configuration_details"
      ]
    }
  },
  {
    "name": "confirm_live_thread_contributor_invite",
    "description": "Accepts an invitation to contribute to a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "live_thread_identifier": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "live_thread_identifier"
      ]
    }
  },
  {
    "name": "confirm_moderated_item",
    "description": "Approves a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_approve": {
          "type": "string",
          "description": "The fullname of the item to approve."
        }
      },
      "required": [
        "item_fullname_to_approve"
      ]
    }
  },
  {
    "name": "confirm_moderator_invitation",
    "description": "Accepts an invitation to moderate a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "confirm_modmail_conversation",
    "description": "Approves a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "modmail_thread_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "modmail_thread_id"
      ]
    }
  },
  {
    "name": "create_new_post",
    "description": "Submits a new link or text post into a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_type": {
          "type": "string",
          "description": "The type of post (\"link\" or \"self\")."
        },
        "target_subreddit": {
          "type": "string",
          "description": "The subreddit to which the post is submitted."
        },
        "post_title": {
          "type": "string",
          "description": "The title of the post."
        },
        "self_post_text": {
          "type": "string",
          "description": "The text body for a self-post. Required when kind is \"self\"."
        },
        "link_post_url": {
          "type": "string",
          "description": "The URL for a link post. Required when kind is \"link\"."
        },
        "is_nsfw": {
          "type": "boolean",
          "description": "Whether the post is Not Safe For Work. Defaults to False."
        },
        "is_spoiler": {
          "type": "boolean",
          "description": "Whether the post contains spoilers. Defaults to False."
        }
      },
      "required": [
        "post_title",
        "post_type",
        "target_subreddit"
      ]
    }
  },
  {
    "name": "create_subreddit_emoji",
    "description": "Adds a new emoji to a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_subreddit": {
          "type": "string",
          "description": "The name of the subreddit."
        },
        "new_emoji_name": {
          "type": "string",
          "description": "Name of the emoji to be created. It can be alphanumeric without any special characters except '-' & '_' and cannot exceed 24 characters."
        },
        "image_s3_key": {
          "type": "string",
          "description": "S3 key of the uploaded image which can be obtained from the S3 url. This is of the form subreddit/hash_value."
        },
        "is_for_mod_flair_only": {
          "type": "boolean",
          "description": "Whether the emoji is only available for moderator flair. Defaults to False."
        },
        "is_allowed_in_post_flair": {
          "type": "boolean",
          "description": "Whether the emoji can be used in post flair. Defaults to True."
        },
        "is_allowed_in_user_flair": {
          "type": "boolean",
          "description": "Whether the emoji can be used in user flair. Defaults to True."
        },
        "custom_emoji_css": {
          "type": "string",
          "description": "CSS styling for the emoji."
        }
      },
      "required": [
        "image_s3_key",
        "new_emoji_name",
        "target_subreddit"
      ]
    }
  },
  {
    "name": "define_post_comment_sort_order",
    "description": "Sets the suggested comment sort order for a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "suggested_sort_method": {
          "type": "string",
          "description": "The sort order (e.g., \"top\", \"new\")."
        },
        "target_post_for_sort": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "target_post_for_sort"
      ]
    }
  },
  {
    "name": "delete_moderated_item",
    "description": "Removes a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_remove": {
          "type": "string",
          "description": "The fullname of the item to remove."
        },
        "mark_as_spam": {
          "type": "boolean",
          "description": "Indicates if the item should be marked as spam."
        }
      },
      "required": [
        "item_fullname_to_remove"
      ]
    }
  },
  {
    "name": "disregard_reports_for_item",
    "description": "Ignores future reports on a specific item.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_ignore_reports": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "item_fullname_to_ignore_reports"
      ]
    }
  },
  {
    "name": "dissolve_friend_relationship",
    "description": "Removes a friend relationship.",
    "parameters": {
      "type": "object",
      "properties": {
        "username_to_unfriend": {
          "type": "string",
          "description": "The username to unfriend."
        },
        "relationship_category": {
          "type": "string",
          "description": "The relationship type (e.g., \"friend\")."
        }
      },
      "required": [
        "relationship_category",
        "username_to_unfriend"
      ]
    }
  },
  {
    "name": "duplicate_multireddit",
    "description": "Copies an existing multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "source_multireddit_path": {
          "type": "string",
          "description": "The source multireddit path."
        },
        "destination_multireddit_path": {
          "type": "string",
          "description": "The destination path for the copy."
        }
      },
      "required": [
        "destination_multireddit_path",
        "source_multireddit_path"
      ]
    }
  },
  {
    "name": "eject_contributor_from_live_thread",
    "description": "Removes a contributor from a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "contributor_username_to_remove": {
          "type": "string",
          "description": "The username of the contributor to remove."
        }
      },
      "required": [
        "contributor_username_to_remove"
      ]
    }
  },
  {
    "name": "eject_post_from_collection",
    "description": "Removes a post from a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_remove": {
          "type": "string",
          "description": "The fullname of the post to remove."
        },
        "source_collection_id": {
          "type": "string",
          "description": "The identifier of the collection."
        }
      },
      "required": [
        "post_fullname_to_remove",
        "source_collection_id"
      ]
    }
  },
  {
    "name": "eject_subreddit_from_multireddit",
    "description": "Removes a subreddit from a multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "multireddit_path_to_modify": {
          "type": "string",
          "description": "The multireddit path."
        },
        "subreddit_name_to_remove": {
          "type": "string",
          "description": "The subreddit name to remove."
        }
      },
      "required": [
        "multireddit_path_to_modify",
        "subreddit_name_to_remove"
      ]
    }
  },
  {
    "name": "eject_subreddit_from_multireddit_filter",
    "description": "Removes a subreddit from a saved filter path.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_filter_path": {
          "type": "string",
          "description": "The filter path identifier."
        },
        "subreddit_to_remove": {
          "type": "string",
          "description": "The subreddit name to remove."
        }
      },
      "required": [
        "subreddit_to_remove",
        "target_filter_path"
      ]
    }
  },
  {
    "name": "erase_flair_template_by_id",
    "description": "Deletes a flair template by its ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "flair_template_identifier": {
          "type": "string",
          "description": "The ID of the flair template to delete."
        }
      },
      "required": [
        "flair_template_identifier"
      ]
    }
  },
  {
    "name": "establish_friend_relationship",
    "description": "Adds a user as a friend.",
    "parameters": {
      "type": "object",
      "properties": {
        "api_response_format_type": {
          "type": "string",
          "description": "Must be \"json\"."
        },
        "username_to_add_as_friend": {
          "type": "string",
          "description": "The username to add as a friend."
        }
      },
      "required": [
        "api_response_format_type",
        "username_to_add_as_friend"
      ]
    }
  },
  {
    "name": "establish_or_modify_subreddit",
    "description": "Creates or edits a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit_url_name": {
          "type": "string",
          "description": "The name of the subreddit."
        },
        "subreddit_display_title": {
          "type": "string",
          "description": "The title of the subreddit."
        }
      },
      "required": [
        "subreddit_display_title",
        "subreddit_url_name"
      ]
    }
  },
  {
    "name": "execute_content_search",
    "description": "Searches for content based on the provided query and parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_query_text": {
          "type": "string",
          "description": "The search query string (maximum 512 characters)."
        },
        "pagination_after_cursor": {
          "type": "string",
          "description": "A cursor for paginating results after a certain point. Defaults to None."
        },
        "pagination_before_cursor": {
          "type": "string",
          "description": "A cursor for paginating results before a certain point. Defaults to None."
        },
        "search_filter_category": {
          "type": "string",
          "description": "The category to filter search results by (maximum 5 characters). Defaults to None."
        },
        "seen_results_count": {
          "type": "integer",
          "description": "The number of results already seen. Defaults to 0."
        },
        "should_include_facets": {
          "type": "boolean",
          "description": "Whether to include facet information in the results. Defaults to False."
        },
        "max_results_to_return": {
          "type": "integer",
          "description": "The maximum number of results to return (must be between 1 and 100). Defaults to 25."
        },
        "limit_to_subreddit": {
          "type": "boolean",
          "description": "Whether to restrict the search to the current subreddit (if applicable). Defaults to False."
        },
        "filter_by_type_string": {
          "type": "string",
          "description": "A string to filter results by a specific type (e.g., 'all'). Defaults to None."
        },
        "result_sorting_method": {
          "type": "string",
          "description": "The sorting method for results ('relevance', 'hot', 'top', 'new', 'comments'). Defaults to \"relevance\"."
        },
        "include_subreddit_details": {
          "type": "boolean",
          "description": "Whether to include detailed information about the subreddit. Defaults to False."
        },
        "time_filter_period": {
          "type": "string",
          "description": "The time filter for top or controversial sorts ('hour', 'day', 'week', 'month', 'year', 'all'). Defaults to None."
        },
        "searchable_content_types": {
          "type": "string",
          "description": "Comma-separated string of types to search for ('sr', 'link', 'user'). Defaults to None (all types)."
        }
      },
      "required": [
        "search_query_text"
      ]
    }
  },
  {
    "name": "execute_wiki_editor_modification",
    "description": "Performs an action to add or remove a wiki editor.",
    "parameters": {
      "type": "object",
      "properties": {
        "editor_action_type": {
          "type": "string",
          "description": "\"add\" or \"del\" to modify wiki editors."
        }
      },
      "required": [
        "editor_action_type"
      ]
    }
  },
  {
    "name": "fetch_all_global_announcements",
    "description": "Retrieves a list of global announcements.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_all_subreddit_widgets",
    "description": "Retrieves all widgets configured for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_collection_details",
    "description": "Retrieves information about a specific collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_identifier": {
          "type": "string",
          "description": "The unique identifier of the collection."
        }
      },
      "required": [
        "collection_identifier"
      ]
    }
  },
  {
    "name": "fetch_comments_by_user",
    "description": "Retrieves comments made by a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_to_fetch_comments_from": {
          "type": "string",
          "description": "The username."
        }
      },
      "required": [
        "user_to_fetch_comments_from"
      ]
    }
  },
  {
    "name": "fetch_comments_for_post",
    "description": "Retrieves comments for a post identified by its article ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_article_id_or_slug": {
          "type": "string",
          "description": "The article ID or slug."
        }
      },
      "required": [
        "post_article_id_or_slug"
      ]
    }
  },
  {
    "name": "fetch_content_info_by_id_or_url",
    "description": "Retrieves information about posts or comments by fullname or URL.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullnames_list": {
          "type": "string",
          "description": "A comma-separated list of fullnames."
        },
        "reference_lookup_url": {
          "type": "string",
          "description": "A URL to look up posts referencing it."
        }
      }
    }
  },
  {
    "name": "fetch_content_marked_as_spam",
    "description": "Retrieves items marked as spam.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_content_of_wiki_page",
    "description": "Retrieves the content of a wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_to_fetch_content_from": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "wiki_page_to_fetch_content_from"
      ]
    }
  },
  {
    "name": "fetch_controversial_listings",
    "description": "Retrieves posts that are currently controversial.",
    "parameters": {
      "type": "object",
      "properties": {
        "pagination_cursor": {
          "type": "string",
          "description": "The fullname anchor for pagination."
        }
      }
    }
  },
  {
    "name": "fetch_current_featured_live_thread",
    "description": "Retrieves the currently featured live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_current_link_flair_templates",
    "description": "Retrieves link flair templates (v2).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_current_user_flair_templates",
    "description": "Retrieves all user flair templates for a subreddit (v2).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_current_user_identity",
    "description": "Retrieves the identity details of the currently authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_discussions_for_wiki_page",
    "description": "Retrieves discussion links related to a wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_wiki_page": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "target_wiki_page"
      ]
    }
  },
  {
    "name": "fetch_hot_frontpage_posts",
    "description": "Retrieves hot posts from the front page.",
    "parameters": {
      "type": "object",
      "properties": {
        "max_post_count": {
          "type": "integer",
          "description": "The maximum number of posts to return."
        }
      }
    }
  },
  {
    "name": "fetch_items_from_modqueue",
    "description": "Retrieves items pending moderator action",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_live_thread_update_info",
    "description": "Retrieves details for a specific live thread update.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_update_id": {
          "type": "string",
          "description": "The ID of the update to retrieve."
        }
      },
      "required": [
        "target_update_id"
      ]
    }
  },
  {
    "name": "fetch_live_threads_by_fullname",
    "description": "Retrieves data for multiple live threads by their fullnames.",
    "parameters": {
      "type": "object",
      "properties": {
        "live_thread_fullname_list": {
          "type": "string",
          "description": "A comma-separated list of live thread fullnames."
        }
      },
      "required": [
        "live_thread_fullname_list"
      ]
    }
  },
  {
    "name": "fetch_messages_from_mailbox",
    "description": "Retrieves messages from a specified mailbox category.",
    "parameters": {
      "type": "object",
      "properties": {
        "mailbox_category": {
          "type": "string",
          "description": "The mailbox category (e.g., \"inbox\", \"sent\")."
        }
      },
      "required": [
        "mailbox_category"
      ]
    }
  },
  {
    "name": "fetch_moderated_listings_by_location",
    "description": "Retrieves moderated listings for a specific category.",
    "parameters": {
      "type": "object",
      "properties": {
        "moderation_category": {
          "type": "string",
          "description": "The moderation category (e.g., \"spam\")."
        }
      },
      "required": [
        "moderation_category"
      ]
    }
  },
  {
    "name": "fetch_modmail_thread_details",
    "description": "Retrieves details of a specific modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "target_conversation_id"
      ]
    }
  },
  {
    "name": "fetch_multireddit_description",
    "description": "Retrieves the description of a multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_multireddit_path": {
          "type": "string",
          "description": "The multireddit path."
        }
      },
      "required": [
        "target_multireddit_path"
      ]
    }
  },
  {
    "name": "fetch_my_subreddits_by_role",
    "description": "Retrieves subreddits based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_role_category": {
          "type": "string",
          "description": "The category (e.g., \"contributor\", \"moderator\")."
        }
      },
      "required": [
        "user_role_category"
      ]
    }
  },
  {
    "name": "fetch_old_link_flair_templates",
    "description": "Retrieves link flair templates (legacy version).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_old_user_flair_templates",
    "description": "Retrieves all user flair templates for a subreddit (legacy).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_paginated_user_flair_list",
    "description": "Retrieves a paginated list of users and their flair.",
    "parameters": {
      "type": "object",
      "properties": {
        "pagination_fullname_anchor": {
          "type": "string",
          "description": "The fullname anchor for pagination."
        },
        "username_filter": {
          "type": "string",
          "description": "A filter by username."
        },
        "max_users_to_return": {
          "type": "integer",
          "description": "The maximum number of users to return."
        }
      }
    }
  },
  {
    "name": "fetch_posts_by_sort_method",
    "description": "Retrieves posts sorted by a specified method.",
    "parameters": {
      "type": "object",
      "properties": {
        "sorting_criteria": {
          "type": "string",
          "description": "The sorting category (e.g., hot, new, rising)."
        }
      },
      "required": [
        "sorting_criteria"
      ]
    }
  },
  {
    "name": "fetch_preferences_from_category",
    "description": "Retrieves specific preference details from various preference categories.",
    "parameters": {
      "type": "object",
      "properties": {
        "preference_category_name": {
          "type": "string",
          "description": "The preference category to retrieve (e.g., \"blocked\", \"friends\")."
        }
      },
      "required": [
        "preference_category_name"
      ]
    }
  },
  {
    "name": "fetch_public_multireddits_for_user",
    "description": "Retrieves public multireddits for a specified user.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_user": {
          "type": "string",
          "description": "The username whose multireddits are requested."
        }
      },
      "required": [
        "target_user"
      ]
    }
  },
  {
    "name": "fetch_public_subreddits_by_listing",
    "description": "Retrieves subreddits based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "listing_category": {
          "type": "string",
          "description": "The category (e.g., \"popular\", \"new\")."
        }
      },
      "required": [
        "listing_category"
      ]
    }
  },
  {
    "name": "fetch_recent_revisions_for_all_wiki_pages",
    "description": "Retrieves recent revisions for all wiki pages.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_recently_edited_content",
    "description": "Retrieves recently edited posts or comments.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_reported_content",
    "description": "Retrieves reported posts or comments.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_revision_history_for_wiki_page",
    "description": "Retrieves revisions for a specific wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_for_history": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "wiki_page_for_history"
      ]
    }
  },
  {
    "name": "fetch_specific_live_thread_info",
    "description": "Retrieves details about a specific live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "live_thread_id_to_fetch": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "live_thread_id_to_fetch"
      ]
    }
  },
  {
    "name": "fetch_subreddit_css",
    "description": "Retrieves the subreddit's stylesheet code.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_subreddit_edit_settings",
    "description": "Retrieves the subreddit editing settings.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_subreddit_sidebar_content",
    "description": "Retrieves the sidebar content for the subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_subreddit_submission_guidelines",
    "description": "Retrieves the submission text (sidebar text) for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit_name_for_text": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit_name_for_text"
      ]
    }
  },
  {
    "name": "fetch_subreddit_submission_rules",
    "description": "Retrieves submission requirements for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_subreddit_for_requirements": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "target_subreddit_for_requirements"
      ]
    }
  },
  {
    "name": "fetch_subreddit_user_lists_by_category",
    "description": "Retrieves user lists based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_list_category": {
          "type": "string",
          "description": "The category (e.g., \"banned\", \"moderators\")."
        }
      },
      "required": [
        "user_list_category"
      ]
    }
  },
  {
    "name": "fetch_top_ranked_posts",
    "description": "Retrieves the best posts ranked by the algorithm.",
    "parameters": {
      "type": "object",
      "properties": {
        "pagination_anchor_fullname": {
          "type": "string",
          "description": "The fullname anchor for pagination."
        },
        "post_retrieval_limit": {
          "type": "integer",
          "description": "The maximum number of posts to return."
        }
      }
    }
  },
  {
    "name": "fetch_trending_posts",
    "description": "Retrieves posts that are rapidly gaining popularity.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_trophies_for_user",
    "description": "Retrieves trophies for a specified user.",
    "parameters": {
      "type": "object",
      "properties": {
        "profile_username": {
          "type": "string",
          "description": "The target username."
        }
      },
      "required": [
        "profile_username"
      ]
    }
  },
  {
    "name": "fetch_unmoderated_content",
    "description": "Retrieves posts or comments that are unmoderated.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_unread_modmail_count",
    "description": "Retrieves the count of unread modmail conversations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_user_activity_overview",
    "description": "Retrieves an overview of a user's submissions and comments.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_user_awards",
    "description": "Retrieves the trophies (awards) earned by the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_user_content_from_category",
    "description": "Retrieves user content for a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "content_category": {
          "type": "string",
          "description": "The category (e.g., \"overview\", \"comments\")."
        }
      },
      "required": [
        "content_category"
      ]
    }
  },
  {
    "name": "fetch_user_info_by_account_ids",
    "description": "Retrieves user data for specified account IDs.",
    "parameters": {
      "type": "object",
      "properties": {
        "comma_separated_account_ids": {
          "type": "string",
          "description": "A comma-separated list of account IDs."
        }
      },
      "required": [
        "comma_separated_account_ids"
      ]
    }
  },
  {
    "name": "fetch_user_karma_details",
    "description": "Retrieves a breakdown of the authenticated user's subreddit karma.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_user_messaging_settings",
    "description": "Retrieves the messaging preferences of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_user_mod_notes_in_subreddit",
    "description": "Retrieves recent moderator notes for a user in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_username": {
          "type": "string",
          "description": "The username for whom to retrieve notes."
        },
        "target_subreddit_name": {
          "type": "string",
          "description": "The subreddit identifier."
        }
      },
      "required": [
        "target_subreddit_name",
        "target_username"
      ]
    }
  },
  {
    "name": "fetch_user_multireddits",
    "description": "Retrieves the authenticated user's multireddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_user_preferences",
    "description": "Retrieves the preference settings of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "specific_preference_fields": {
          "type": "string",
          "description": "A comma-separated list of specific preference fields to return.\nIf None, returns all preferences."
        }
      }
    }
  },
  {
    "name": "fetch_user_unread_announcements",
    "description": "Retrieves a list of announcements not yet read by the user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "fetch_users_by_public_list",
    "description": "Retrieves users based on a specified category.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_public_list_category": {
          "type": "string",
          "description": "The user category (e.g., \"new\", \"popular\")."
        }
      },
      "required": [
        "user_public_list_category"
      ]
    }
  },
  {
    "name": "find_subreddits_by_metadata",
    "description": "Searches for subreddits by name, title and description.",
    "parameters": {
      "type": "object",
      "properties": {
        "metadata_search_query": {
          "type": "string",
          "description": "The search keyword(s)."
        },
        "require_exact_match": {
          "type": "boolean",
          "description": "If True, an exact match for the query will be performed. Defaults to False."
        },
        "include_adult_subreddits": {
          "type": "boolean",
          "description": "If True, results will include subreddits marked as \"over 18\". Defaults to False."
        }
      },
      "required": [
        "metadata_search_query"
      ]
    }
  },
  {
    "name": "find_subreddits_by_query",
    "description": "Searches for subreddits by name or topic.",
    "parameters": {
      "type": "object",
      "properties": {
        "search_keyword": {
          "type": "string",
          "description": "The search query."
        }
      },
      "required": [
        "search_keyword"
      ]
    }
  },
  {
    "name": "find_users_by_username",
    "description": "Searches for users by name.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "flag_live_thread_for_review",
    "description": "Reports a live thread for rule violations.",
    "parameters": {
      "type": "object",
      "properties": {
        "live_thread_id_to_report": {
          "type": "string",
          "description": "The ID of the live thread."
        }
      },
      "required": [
        "live_thread_id_to_report"
      ]
    }
  },
  {
    "name": "flag_post_as_nsfw",
    "description": "Marks a post as Not Safe For Work (NSFW).",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_mark_nsfw": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "post_fullname_to_mark_nsfw"
      ]
    }
  },
  {
    "name": "flag_post_as_spoiler",
    "description": "Marks a post as containing spoilers.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_mark_spoiler": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "post_fullname_to_mark_spoiler"
      ]
    }
  },
  {
    "name": "flag_user_for_review",
    "description": "Reports a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "username_to_report": {
          "type": "string",
          "description": "The username to report."
        },
        "report_explanation": {
          "type": "string",
          "description": "The reason for reporting."
        }
      },
      "required": [
        "username_to_report"
      ]
    }
  },
  {
    "name": "get_subreddits_with_modmail_access",
    "description": "Lists subreddits accessible via modmail.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "grant_user_privileges",
    "description": "Sets permissions for a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_username_for_permissions": {
          "type": "string",
          "description": "The username for whom to set permissions."
        },
        "list_of_permissions_to_grant": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of permissions to grant."
        }
      },
      "required": [
        "target_username_for_permissions"
      ]
    }
  },
  {
    "name": "grant_wiki_edit_permission",
    "description": "Adds a user to the wiki editors list for a page.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_name": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "user_to_add_as_editor": {
          "type": "string",
          "description": "The username to grant editing access."
        }
      },
      "required": [
        "user_to_add_as_editor",
        "wiki_page_name"
      ]
    }
  },
  {
    "name": "hide_inbox_messages",
    "description": "Collapses one or more messages in the inbox.",
    "parameters": {
      "type": "object",
      "properties": {
        "message_ids_to_collapse": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs to collapse."
        }
      },
      "required": [
        "message_ids_to_collapse"
      ]
    }
  },
  {
    "name": "initialize_new_collection",
    "description": "Creates a new collection in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_collection_title": {
          "type": "string",
          "description": "The title of the new collection."
        },
        "subreddit_fullname_for_collection": {
          "type": "string",
          "description": "The fullname of the subreddit."
        }
      },
      "required": [
        "new_collection_title",
        "subreddit_fullname_for_collection"
      ]
    }
  },
  {
    "name": "insert_post_into_collection",
    "description": "Adds a post to an existing collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_collection_identifier": {
          "type": "string",
          "description": "The unique identifier of the collection."
        },
        "post_fullname_to_add": {
          "type": "string",
          "description": "The fullname of the post to add."
        }
      },
      "required": [
        "post_fullname_to_add",
        "target_collection_identifier"
      ]
    }
  },
  {
    "name": "issue_temporary_ban_from_modmail",
    "description": "Temporarily bans a user via modmail.",
    "parameters": {
      "type": "object",
      "properties": {
        "source_conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "source_conversation_id"
      ]
    }
  },
  {
    "name": "lift_ban_from_modmail",
    "description": "Revokes a ban issued via modmail.",
    "parameters": {
      "type": "object",
      "properties": {
        "related_conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "related_conversation_id"
      ]
    }
  },
  {
    "name": "list_all_emojis_for_subreddit",
    "description": "Retrieves all emojis for a specified subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit_name_for_emojis": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit_name_for_emojis"
      ]
    }
  },
  {
    "name": "list_all_modmail_conversations",
    "description": "Retrieves a list of modmail conversations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_all_wiki_pages_in_subreddit",
    "description": "Retrieves a list of wiki pages for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_approved_submitters_in_subreddit",
    "description": "Retrieves a list of approved submitters in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_approved_wiki_contributors_in_subreddit",
    "description": "Retrieves a list of approved wiki contributors.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_banned_users_in_subreddit",
    "description": "Retrieves a list of banned users in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_collections_in_subreddit",
    "description": "Retrieves collections for a specific subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_subreddit_fullname": {
          "type": "string",
          "description": "The fullname of the subreddit."
        }
      },
      "required": [
        "target_subreddit_fullname"
      ]
    }
  },
  {
    "name": "list_default_subreddits",
    "description": "Retrieves the list of default subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_detailed_blocked_user_info",
    "description": "Retrieves detailed information about blocked users.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_detailed_friend_info",
    "description": "Retrieves detailed information about friends.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_gold_exclusive_subreddits",
    "description": "Retrieves gold-exclusive subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_live_thread_associated_discussions",
    "description": "Retrieves discussion thread identifiers associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_live_thread_contributors",
    "description": "Retrieves the list of contributors for a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_moderators_in_subreddit",
    "description": "Retrieves a list of moderators in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_muted_users_in_subreddit",
    "description": "Retrieves a list of muted users in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_blocked_users",
    "description": "Retrieves a list of users blocked by the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_contributorships",
    "description": "Retrieves subreddits where the user is an approved contributor.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_friends",
    "description": "Retrieves a list of friends for the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_moderatorships",
    "description": "Retrieves subreddits where the user is a moderator.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_streaming_related_subreddits",
    "description": "Retrieves subreddits related to streaming content.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_subscriptions",
    "description": "Retrieves subreddits the user is subscribed to.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_my_trusted_users",
    "description": "Retrieves the trusted user list for the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_newly_created_subreddits",
    "description": "Retrieves newly created subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_newly_registered_users",
    "description": "Retrieves the newest registered users.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_popular_subreddits",
    "description": "Retrieves popular subreddits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_popular_users",
    "description": "Retrieves popular users.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_stickied_post_identifiers",
    "description": "Retrieves the identifiers of stickied posts.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_subreddit_moderation_rules",
    "description": "Retrieves the moderation rules of a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_downvoted_content",
    "description": "Retrieves posts downvoted by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_gilded_content",
    "description": "Retrieves posts that have been gilded for a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_hidden_content",
    "description": "Retrieves hidden posts of a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_saved_content",
    "description": "Retrieves posts saved by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_saved_item_categories",
    "description": "Retrieves the user's saved categories.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_submitted_content",
    "description": "Retrieves posts submitted by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_user_upvoted_content",
    "description": "Retrieves posts upvoted by a user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "list_wiki_banned_users_in_subreddit",
    "description": "Retrieves a list of users banned from wiki edits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "load_more_comments_in_thread",
    "description": "Retrieves additional comments omitted by pagination.",
    "parameters": {
      "type": "object",
      "properties": {
        "parent_post_fullname": {
          "type": "string",
          "description": "The fullname of the parent post."
        },
        "child_comment_ids_to_load": {
          "type": "string",
          "description": "A comma-separated list of child comment IDs to retrieve."
        }
      },
      "required": [
        "child_comment_ids_to_load",
        "parent_post_fullname"
      ]
    }
  },
  {
    "name": "locate_duplicate_articles",
    "description": "Finds duplicate posts for a given article.",
    "parameters": {
      "type": "object",
      "properties": {
        "original_post_id": {
          "type": "string",
          "description": "The ID of the original post."
        }
      },
      "required": [
        "original_post_id"
      ]
    }
  },
  {
    "name": "log_recent_content_visits",
    "description": "Stores a record of the user's recent post or comment visits.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "manage_subreddit_subscription",
    "description": "Subscribes or unsubscribes the user from a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subscription_action": {
          "type": "string",
          "description": "Either \"sub\" or \"unsub\"."
        },
        "subreddit_name_to_act_on": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit_name_to_act_on",
        "subscription_action"
      ]
    }
  },
  {
    "name": "mark_live_update_as_erroneous",
    "description": "Marks a live thread update as erroneous.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_identifier_to_strike": {
          "type": "string",
          "description": "The ID of the update to strike."
        }
      },
      "required": [
        "update_identifier_to_strike"
      ]
    }
  },
  {
    "name": "modify_collection_description",
    "description": "Updates the description of a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_identifier_to_update": {
          "type": "string",
          "description": "The collection identifier."
        },
        "new_collection_description": {
          "type": "string",
          "description": "The new description text."
        }
      },
      "required": [
        "collection_identifier_to_update",
        "new_collection_description"
      ]
    }
  },
  {
    "name": "modify_live_thread_details",
    "description": "Updates the settings or title of a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_live_thread_description": {
          "type": "string",
          "description": "The new description for the live thread."
        }
      }
    }
  },
  {
    "name": "modify_subreddit_flair_settings",
    "description": "Configures overall flair settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "is_flair_feature_enabled": {
          "type": "boolean",
          "description": "Indicates if flair is enabled."
        },
        "flair_display_position": {
          "type": "string",
          "description": "The position of flair (e.g., \"left\" or \"right\")."
        }
      }
    }
  },
  {
    "name": "modify_user_preferences",
    "description": "Updates the preference settings of the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "preferences_to_update": {
          "type": "object",
          "properties": {},
          "description": "A dictionary containing the preference fields to update."
        }
      },
      "required": [
        "preferences_to_update"
      ]
    }
  },
  {
    "name": "permanently_remove_message",
    "description": "Deletes a message permanently.",
    "parameters": {
      "type": "object",
      "properties": {
        "message_id_to_delete": {
          "type": "string",
          "description": "The identifier of the message to delete."
        }
      },
      "required": [
        "message_id_to_delete"
      ]
    }
  },
  {
    "name": "post_new_comment",
    "description": "Submits a new comment or reply to a message.",
    "parameters": {
      "type": "object",
      "properties": {
        "parent_item_fullname": {
          "type": "string",
          "description": "The fullname of the parent post or comment."
        },
        "comment_markdown_text": {
          "type": "string",
          "description": "The comment text in raw markdown."
        }
      },
      "required": [
        "comment_markdown_text",
        "parent_item_fullname"
      ]
    }
  },
  {
    "name": "post_update_to_live_thread",
    "description": "Adds a new update to the live thread feed.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_content_text": {
          "type": "string",
          "description": "The text content of the update."
        }
      },
      "required": [
        "update_content_text"
      ]
    }
  },
  {
    "name": "prevent_replies_to_item",
    "description": "Locks a post or comment to prevent further replies.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_to_lock_fullname": {
          "type": "string",
          "description": "The fullname of the item to lock."
        }
      },
      "required": [
        "item_to_lock_fullname"
      ]
    }
  },
  {
    "name": "prevent_user_interaction",
    "description": "Blocks a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_account_id_to_block": {
          "type": "string",
          "description": "The account ID of the user to block."
        }
      },
      "required": [
        "user_account_id_to_block"
      ]
    }
  },
  {
    "name": "purge_flair_templates",
    "description": "Clears all flair templates (user or link) in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_flair_category": {
          "type": "string",
          "description": "Either \"USER_FLAIR\" or \"LINK_FLAIR\"."
        }
      },
      "required": [
        "target_flair_category"
      ]
    }
  },
  {
    "name": "reapprove_removed_comment",
    "description": "Re-approves a comment that was removed.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_fullname_to_show": {
          "type": "string",
          "description": "The fullname of the comment."
        }
      },
      "required": [
        "comment_fullname_to_show"
      ]
    }
  },
  {
    "name": "reject_modmail_conversation",
    "description": "Disapproves a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_to_reject_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "thread_to_reject_id"
      ]
    }
  },
  {
    "name": "remove_image_from_subreddit_stylesheet",
    "description": "Deletes a subreddit stylesheet image.",
    "parameters": {
      "type": "object",
      "properties": {
        "image_name_to_delete": {
          "type": "string",
          "description": "The name or key of the image to remove."
        }
      },
      "required": [
        "image_name_to_delete"
      ]
    }
  },
  {
    "name": "remove_item_from_bookmarks",
    "description": "Unsaves a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_unsave": {
          "type": "string",
          "description": "The fullname of the item to unsave."
        }
      },
      "required": [
        "item_fullname_to_unsave"
      ]
    }
  },
  {
    "name": "remove_live_thread_update",
    "description": "Deletes a specific update from a live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "update_identifier_to_delete": {
          "type": "string",
          "description": "The ID of the update to delete."
        }
      },
      "required": [
        "update_identifier_to_delete"
      ]
    }
  },
  {
    "name": "remove_mod_note",
    "description": "Deletes a moderator note.",
    "parameters": {
      "type": "object",
      "properties": {
        "moderator_note_identifier": {
          "type": "string",
          "description": "The identifier of the note to delete."
        }
      },
      "required": [
        "moderator_note_identifier"
      ]
    }
  },
  {
    "name": "remove_multireddit_by_path",
    "description": "Deletes a multireddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "path_of_multireddit_to_delete": {
          "type": "string",
          "description": "The multireddit path."
        }
      },
      "required": [
        "path_of_multireddit_to_delete"
      ]
    }
  },
  {
    "name": "remove_nsfw_flag_from_post",
    "description": "Removes the NSFW tag from a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_unmark_nsfw": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "post_fullname_to_unmark_nsfw"
      ]
    }
  },
  {
    "name": "remove_post_collection",
    "description": "Deletes an existing collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_id_to_delete": {
          "type": "string",
          "description": "The identifier of the collection to delete."
        }
      },
      "required": [
        "collection_id_to_delete"
      ]
    }
  },
  {
    "name": "remove_post_or_comment",
    "description": "Deletes a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_delete": {
          "type": "string",
          "description": "The fullname of the item to delete."
        }
      },
      "required": [
        "item_fullname_to_delete"
      ]
    }
  },
  {
    "name": "remove_saved_multireddit_filter",
    "description": "Deletes a saved filter path.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter_path_to_delete": {
          "type": "string",
          "description": "The filter path identifier."
        }
      },
      "required": [
        "filter_path_to_delete"
      ]
    }
  },
  {
    "name": "remove_spoiler_flag_from_post",
    "description": "Removes the spoiler tag from a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_unmark_spoiler": {
          "type": "string",
          "description": "The fullname of the post."
        }
      },
      "required": [
        "post_fullname_to_unmark_spoiler"
      ]
    }
  },
  {
    "name": "remove_subreddit_banner_image",
    "description": "Deletes the subreddit's banner image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "remove_subreddit_emoji",
    "description": "Removes an existing emoji from a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit_to_modify": {
          "type": "string",
          "description": "The name of the subreddit."
        },
        "emoji_to_delete": {
          "type": "string",
          "description": "The name of the emoji to delete."
        }
      },
      "required": [
        "emoji_to_delete",
        "subreddit_to_modify"
      ]
    }
  },
  {
    "name": "remove_subreddit_header_image",
    "description": "Deletes the subreddit's header image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "remove_subreddit_icon_image",
    "description": "Deletes the subreddit's icon image.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "remove_subreddit_widget_by_id",
    "description": "Deletes a specific widget.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_widget_identifier": {
          "type": "string",
          "description": "The identifier of the widget to delete."
        }
      },
      "required": [
        "target_widget_identifier"
      ]
    }
  },
  {
    "name": "remove_user_flair_assignment",
    "description": "Removes flair from a specific user.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_user_name": {
          "type": "string",
          "description": "The username whose flair is to be removed."
        }
      },
      "required": [
        "target_user_name"
      ]
    }
  },
  {
    "name": "rename_collection",
    "description": "Changes the title of a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "collection_identifier_to_rename": {
          "type": "string",
          "description": "The collection identifier."
        },
        "updated_collection_title": {
          "type": "string",
          "description": "The new title for the collection."
        }
      },
      "required": [
        "collection_identifier_to_rename",
        "updated_collection_title"
      ]
    }
  },
  {
    "name": "request_emoji_s3_upload_credentials",
    "description": "Acquires and returns an upload lease to an S3 temporary bucket.",
    "parameters": {
      "type": "object",
      "properties": {
        "emoji_image_filepath": {
          "type": "string",
          "description": "The name and extension of the image file (e.g. \"image1.png\")."
        },
        "emoji_image_mimetype": {
          "type": "string",
          "description": "The MIME type of the image (e.g. \"image/png\")."
        }
      },
      "required": [
        "emoji_image_filepath",
        "emoji_image_mimetype"
      ]
    }
  },
  {
    "name": "request_widget_image_s3_lease",
    "description": "Acquires and returns an upload lease to an S3 temporary bucket for widget image uploads.",
    "parameters": {
      "type": "object",
      "properties": {
        "image_file_path": {
          "type": "string",
          "description": "The name and extension of the image file (e.g. \"widget.png\")."
        },
        "image_mime_type": {
          "type": "string",
          "description": "The MIME type of the image (e.g. \"image/png\")."
        }
      },
      "required": [
        "image_file_path",
        "image_mime_type"
      ]
    }
  },
  {
    "name": "resign_from_contributor_role",
    "description": "Removes the current user from contributor status.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "resign_from_live_thread_contributorship",
    "description": "Removes contributor status from the current user.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "resign_from_moderator_role",
    "description": "Removes the current user from moderator status.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "restore_modmail_conversation",
    "description": "Unarchives a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "archived_thread_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "archived_thread_id"
      ]
    }
  },
  {
    "name": "restore_wiki_page_to_version",
    "description": "Reverts a wiki page to a previous revision.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_to_revert": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "revision_id_to_restore": {
          "type": "string",
          "description": "The revision ID to revert to."
        }
      },
      "required": [
        "revision_id_to_restore",
        "wiki_page_to_revert"
      ]
    }
  },
  {
    "name": "resume_listening_to_item_reports",
    "description": "Stops ignoring reports on a specific item.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_unignore": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "item_fullname_to_unignore"
      ]
    }
  },
  {
    "name": "retrieve_available_flair_choices",
    "description": "Retrieves available flair options for a link or user.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_link_fullname": {
          "type": "string",
          "description": "The fullname of the link."
        },
        "target_user_for_flair_options": {
          "type": "string",
          "description": "The username."
        }
      }
    }
  },
  {
    "name": "retrieve_available_oauth_scopes",
    "description": "Retrieves all available OAuth scopes and their descriptions.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_latest_posts",
    "description": "Retrieves the newest posts.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_live_thread_metadata",
    "description": "Retrieves metadata about a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_old_subreddit_autocomplete_list",
    "description": "Provides autocomplete suggestions for subreddits (legacy).",
    "parameters": {
      "type": "object",
      "properties": {
        "partial_subreddit_name": {
          "type": "string",
          "description": "A partial subreddit name."
        }
      },
      "required": [
        "partial_subreddit_name"
      ]
    }
  },
  {
    "name": "retrieve_posts_by_fullname",
    "description": "Retrieves posts by their fullnames.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_list": {
          "type": "string",
          "description": "A comma-separated list of post fullnames."
        }
      },
      "required": [
        "post_fullname_list"
      ]
    }
  },
  {
    "name": "retrieve_settings_for_wiki_page",
    "description": "Retrieves the settings for a specific wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_for_settings": {
          "type": "string",
          "description": "The name of the wiki page."
        }
      },
      "required": [
        "wiki_page_for_settings"
      ]
    }
  },
  {
    "name": "retrieve_subreddit_details",
    "description": "Retrieves information about a specific subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "subreddit_name_to_query": {
          "type": "string",
          "description": "The name of the subreddit."
        }
      },
      "required": [
        "subreddit_name_to_query"
      ]
    }
  },
  {
    "name": "retrieve_subreddit_mod_log",
    "description": "Retrieves the moderation log for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_subreddit_traffic_data",
    "description": "Retrieves traffic statistics for a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_top_posts_by_timeframe",
    "description": "Retrieves the top posts.",
    "parameters": {
      "type": "object",
      "properties": {
        "time_period_filter": {
          "type": "string",
          "description": "The timeframe (e.g., day, week)."
        }
      }
    }
  },
  {
    "name": "retrieve_user_inbox",
    "description": "Retrieves messages from the inbox.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_user_profile_data",
    "description": "Retrieves profile information for a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "user_profile_name": {
          "type": "string",
          "description": "The username."
        }
      },
      "required": [
        "user_profile_name"
      ]
    }
  },
  {
    "name": "retrieve_user_sent_messages",
    "description": "Retrieves messages from the sent folder.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_user_unread_messages",
    "description": "Retrieves unread messages from the inbox.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "retrieve_v2_subreddit_autocomplete_list",
    "description": "Provides autocomplete suggestions for subreddits (v2).",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "reveal_hidden_posts_in_feed",
    "description": "Unhides posts that were previously hidden.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullnames_to_unhide": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of post fullnames to unhide."
        }
      },
      "required": [
        "post_fullnames_to_unhide"
      ]
    }
  },
  {
    "name": "reveal_live_thread_discussion",
    "description": "Unhides the discussion thread associated with a live thread.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "revoke_wiki_edit_permission",
    "description": "Removes a user from the wiki editors list.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_wiki_page_name": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "user_to_remove_from_editors": {
          "type": "string",
          "description": "The username to remove from editors."
        }
      },
      "required": [
        "target_wiki_page_name",
        "user_to_remove_from_editors"
      ]
    }
  },
  {
    "name": "send_private_message",
    "description": "Composes and sends a new private message.",
    "parameters": {
      "type": "object",
      "properties": {
        "recipient_username": {
          "type": "string",
          "description": "The recipient's identifier or email. Cannot be empty or consist only of whitespace."
        },
        "message_subject_line": {
          "type": "string",
          "description": "The subject of the message. Cannot be empty or consist only of whitespace."
        },
        "message_body_content": {
          "type": "string",
          "description": "The body text of the message. Cannot be empty or consist only of whitespace."
        }
      },
      "required": [
        "message_body_content",
        "message_subject_line",
        "recipient_username"
      ]
    }
  },
  {
    "name": "set_all_announcements_read",
    "description": "Marks all global announcements as read.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "set_all_inbox_messages_read",
    "description": "Marks all messages in the inbox as read.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "set_announcements_as_read",
    "description": "Marks one or more announcements as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "ids_of_announcements_to_mark_read": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of announcement IDs to mark as read."
        }
      },
      "required": [
        "ids_of_announcements_to_mark_read"
      ]
    }
  },
  {
    "name": "set_collection_display_layout",
    "description": "Updates the display layout of a collection.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_collection_id_for_layout_change": {
          "type": "string",
          "description": "The collection identifier."
        },
        "new_display_layout_style": {
          "type": "string",
          "description": "The new layout style (e.g., GALLERY, TIMELINE)."
        }
      },
      "required": [
        "new_display_layout_style",
        "target_collection_id_for_layout_change"
      ]
    }
  },
  {
    "name": "set_item_reply_status",
    "description": "Enables or disables replies for a post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_item_fullname": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "enable_replies_state": {
          "type": "boolean",
          "description": "True to enable replies, False to disable."
        }
      },
      "required": [
        "enable_replies_state",
        "target_item_fullname"
      ]
    }
  },
  {
    "name": "set_moderator_distinction_on_item",
    "description": "Distinguishes a moderator's post or comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_distinguish": {
          "type": "string",
          "description": "The fullname of the item."
        },
        "distinction_type": {
          "type": "string",
          "description": "The method of distinction (e.g., \"yes\", \"no\", \"admin\")."
        }
      },
      "required": [
        "distinction_type",
        "item_fullname_to_distinguish"
      ]
    }
  },
  {
    "name": "set_modmail_conversations_as_read_in_bulk",
    "description": "Marks multiple modmail conversations as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "modmail_conversation_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs."
        }
      },
      "required": [
        "modmail_conversation_identifiers"
      ]
    }
  },
  {
    "name": "set_modmail_threads_as_read",
    "description": "Marks specified modmail conversations as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_conversation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs."
        }
      },
      "required": [
        "target_conversation_ids"
      ]
    }
  },
  {
    "name": "set_modmail_threads_as_unread",
    "description": "Marks specified modmail conversations as unread.",
    "parameters": {
      "type": "object",
      "properties": {
        "conversation_identifiers_to_mark_unread": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of modmail conversation IDs."
        }
      },
      "required": [
        "conversation_identifiers_to_mark_unread"
      ]
    }
  },
  {
    "name": "set_post_crowd_control_level",
    "description": "Updates the crowd control level for a post.",
    "parameters": {
      "type": "object",
      "properties": {
        "post_fullname_to_update": {
          "type": "string",
          "description": "The fullname of the post."
        },
        "new_crowd_control_level": {
          "type": "integer",
          "description": "The new crowd control level."
        }
      },
      "required": [
        "new_crowd_control_level",
        "post_fullname_to_update"
      ]
    }
  },
  {
    "name": "set_specific_messages_as_read",
    "description": "Marks specified messages as read.",
    "parameters": {
      "type": "object",
      "properties": {
        "message_ids_to_mark_read": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs."
        }
      },
      "required": [
        "message_ids_to_mark_read"
      ]
    }
  },
  {
    "name": "set_specific_messages_as_unread",
    "description": "Marks specified messages as unread.",
    "parameters": {
      "type": "object",
      "properties": {
        "message_ids_to_mark_unread": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs."
        }
      },
      "required": [
        "message_ids_to_mark_unread"
      ]
    }
  },
  {
    "name": "show_inbox_messages",
    "description": "Uncollapses one or more messages in the inbox.",
    "parameters": {
      "type": "object",
      "properties": {
        "message_ids_to_uncollapse": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of message IDs."
        }
      },
      "required": [
        "message_ids_to_uncollapse"
      ]
    }
  },
  {
    "name": "silence_user_in_modmail",
    "description": "Mutes the user in a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "contextual_conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "contextual_conversation_id"
      ]
    }
  },
  {
    "name": "start_new_live_thread",
    "description": "Creates a new live thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "live_thread_title": {
          "type": "string",
          "description": "The title of the new live thread."
        }
      },
      "required": [
        "live_thread_title"
      ]
    }
  },
  {
    "name": "store_modmail_conversation",
    "description": "Archives a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_to_archive_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "thread_to_archive_id"
      ]
    }
  },
  {
    "name": "submit_report_for_item",
    "description": "Reports a post or comment for review.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_id_to_report": {
          "type": "string",
          "description": "The fullname of the item to report."
        },
        "reason_for_report": {
          "type": "string",
          "description": "A short explanation for the report."
        }
      },
      "required": [
        "item_id_to_report"
      ]
    }
  },
  {
    "name": "suggest_similar_subreddits",
    "description": "Suggests related subreddits based on provided names.",
    "parameters": {
      "type": "object",
      "properties": {
        "source_subreddit_names": {
          "type": "string",
          "description": "A comma-separated list of subreddit names."
        }
      },
      "required": [
        "source_subreddit_names"
      ]
    }
  },
  {
    "name": "temporarily_silence_item_reports",
    "description": "Snoozes reports on a specific item.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_fullname_to_snooze": {
          "type": "string",
          "description": "The fullname of the item."
        }
      },
      "required": [
        "item_fullname_to_snooze"
      ]
    }
  },
  {
    "name": "toggle_flair_feature_status",
    "description": "Enables or disables flair in a subreddit.",
    "parameters": {
      "type": "object",
      "properties": {
        "response_format": {
          "type": "string",
          "description": "Must be \"json\"."
        },
        "new_flair_enabled_state": {
          "type": "boolean",
          "description": "True to enable flair, False to disable."
        }
      },
      "required": [
        "new_flair_enabled_state",
        "response_format"
      ]
    }
  },
  {
    "name": "toggle_post_follow_status",
    "description": "Follows or unfollows a post to receive notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_post_fullname": {
          "type": "string",
          "description": "The fullname of the post."
        },
        "set_follow_state": {
          "type": "boolean",
          "description": "True to follow, False to unfollow."
        }
      },
      "required": [
        "set_follow_state",
        "target_post_fullname"
      ]
    }
  },
  {
    "name": "unfriend_user_by_name",
    "description": "Removes a friend relationship.",
    "parameters": {
      "type": "object",
      "properties": {
        "friend_username_to_remove": {
          "type": "string",
          "description": "The username to remove."
        }
      },
      "required": [
        "friend_username_to_remove"
      ]
    }
  },
  {
    "name": "unhighlight_modmail_thread",
    "description": "Removes a highlight marker from a conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "target_thread_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "target_thread_id"
      ]
    }
  },
  {
    "name": "unsilence_user_in_modmail",
    "description": "Unmutes a user in a modmail conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "reference_conversation_id": {
          "type": "string",
          "description": "The ID of the modmail conversation."
        }
      },
      "required": [
        "reference_conversation_id"
      ]
    }
  },
  {
    "name": "update_item_text",
    "description": "Edits the text of a comment or self-post.",
    "parameters": {
      "type": "object",
      "properties": {
        "item_id_to_edit": {
          "type": "string",
          "description": "The fullname of the post or comment."
        },
        "new_markdown_text": {
          "type": "string",
          "description": "The new text content in raw markdown."
        }
      },
      "required": [
        "item_id_to_edit",
        "new_markdown_text"
      ]
    }
  },
  {
    "name": "update_live_thread_contributor_permissions",
    "description": "Updates permissions for an existing contributor.",
    "parameters": {
      "type": "object",
      "properties": {
        "contributor_username_to_modify": {
          "type": "string",
          "description": "The username of the contributor."
        }
      },
      "required": [
        "contributor_username_to_modify"
      ]
    }
  },
  {
    "name": "update_wiki_page_markdown",
    "description": "Edits the content of a wiki page.",
    "parameters": {
      "type": "object",
      "properties": {
        "wiki_page_to_edit": {
          "type": "string",
          "description": "The name of the wiki page."
        },
        "new_markdown_content": {
          "type": "string",
          "description": "The new content in raw markdown."
        }
      },
      "required": [
        "new_markdown_content",
        "wiki_page_to_edit"
      ]
    }
  },
  {
    "name": "verify_if_captcha_is_needed",
    "description": "Checks if CAPTCHA is required for user requests.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "verify_username_is_available",
    "description": "Checks if a username is available.",
    "parameters": {
      "type": "object",
      "properties": {
        "username_to_check": {
          "type": "string",
          "description": "The username to check."
        }
      },
      "required": [
        "username_to_check"
      ]
    }
  }
]